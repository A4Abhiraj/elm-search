[
  {
    "name": "Bogdanp/elm-combine",
    "version": "3.1.0",
    "docs": [
      {
        "name": "Combine.Num",
        "comment": " This module contains Parsers specific to parsing numbers.\n\n# Parsers\n@docs sign, digit, int, float\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "digit",
            "comment": " Parse a digit. ",
            "type": "Combine.Parser s Int"
          },
          {
            "name": "float",
            "comment": " Parse a float. ",
            "type": "Combine.Parser s Float"
          },
          {
            "name": "int",
            "comment": " Parse an integer. ",
            "type": "Combine.Parser s Int"
          },
          {
            "name": "sign",
            "comment": " Parse a numeric sign, returning `1` for positive numbers and `-1`\nfor negative numbers. ",
            "type": "Combine.Parser s Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Combine.Char",
        "comment": " This module contains `Char`-specific Parsers.\n\nAvoid using this module if performance is a concern. You can achieve\neverything that you can do with this module by using `Combine.regex`,\n`Combine.string` or `Combine.primitive` and, in general, those will be\nmuch faster.\n\n# Parsers\n@docs satisfy, char, anyChar, oneOf, noneOf, space, tab, newline, crlf, eol, lower, upper, digit, octDigit, hexDigit\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyChar",
            "comment": " Parse any character.\n\n    parse anyChar \"a\" ==\n    -- Ok 'a'\n\n    parse anyChar \"\" ==\n    -- Err [\"expected any character\"]\n\n",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "char",
            "comment": " Parse an exact character match.\n\n    parse (char 'a') \"a\" ==\n    -- Ok 'a'\n\n    parse (char 'a') \"b\" ==\n    -- Err [\"expected 'a'\"]\n\n",
            "type": "Char -> Combine.Parser s Char"
          },
          {
            "name": "crlf",
            "comment": " Parse a `\\r\\n` sequence, returning a `\\n` character. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "digit",
            "comment": " Parse any base 10 digit. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "eol",
            "comment": " Parse an end of line character or sequence, returning a `\\n` character. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "hexDigit",
            "comment": " Parse any base 16 digit. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "lower",
            "comment": " Parse any lowercase character. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "newline",
            "comment": " Parse a `\\n` character. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "noneOf",
            "comment": " Parse a character that is not in the given list.\n\n    parse (noneOf ['a', 'b']) \"c\" ==\n    -- Ok 'c'\n\n    parse (noneOf ['a', 'b']) \"a\" ==\n    -- Err [\"expected none of ['a','b']\"]\n\n",
            "type": "List Char -> Combine.Parser s Char"
          },
          {
            "name": "octDigit",
            "comment": " Parse any base 8 digit. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "oneOf",
            "comment": " Parse a character from the given list.\n\n    parse (oneOf ['a', 'b']) \"a\" ==\n    -- Ok 'a'\n\n    parse (oneOf ['a', 'b']) \"c\" ==\n    -- Err [\"expected one of ['a','b']\"]\n\n",
            "type": "List Char -> Combine.Parser s Char"
          },
          {
            "name": "satisfy",
            "comment": " Parse a character matching the predicate.\n\n    parse (satisfy ((==) 'a')) \"a\" ==\n    -- Ok 'a'\n\n    parse (satisfy ((==) 'a')) \"b\" ==\n    -- Err [\"could not satisfy predicate\"]\n\n",
            "type": "(Char -> Bool) -> Combine.Parser s Char"
          },
          {
            "name": "space",
            "comment": " Parse a space character. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "tab",
            "comment": " Parse a `\\t` character. ",
            "type": "Combine.Parser s Char"
          },
          {
            "name": "upper",
            "comment": " Parse any uppercase character. ",
            "type": "Combine.Parser s Char"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Combine",
        "comment": " This library provides facilities for parsing structured text data\ninto concrete Elm values.\n\n## API Reference\n\n* [Core Types](#core-types)\n* [Running Parsers](#running-parsers)\n* [Constructing Parsers](#constructing-parsers)\n* [Parsers](#parsers)\n* [Combinators](#combinators)\n  * [Transforming Parsers](#transforming-parsers)\n  * [Chaining Parsers](#chaining-parsers)\n  * [Parser Combinators](#parser-combinators)\n  * [State Combinators](#state-combinators)\n\n## Core Types\n@docs Parser, InputStream, ParseLocation, ParseContext, ParseResult, ParseErr, ParseOk\n\n## Running Parsers\n@docs parse, runParser\n\n## Constructing Parsers\n@docs primitive, app, lazy\n\n## Parsers\n@docs fail, succeed, string, regex, end, whitespace\n\n## Combinators\n\n### Transforming Parsers\n@docs map, (<$>), (<$), ($>), mapError, (<?>)\n\n### Chaining Parsers\n@docs andThen, (>>=), andMap, (<*>), (<*), (*>), sequence\n\n### Parser Combinators\n@docs lookAhead, while, or, (<|>), choice, optional, maybe, many, many1, manyTill, sepBy, sepBy1, sepEndBy, sepEndBy1, skip, skipMany, skipMany1, chainl, chainr, count, between, parens, braces, brackets\n\n### State Combinators\n@docs withState, putState, modifyState, withLocation, withLine, withColumn, currentLocation, currentSourceLine, currentLine, currentColumn\n",
        "aliases": [
          {
            "name": "InputStream",
            "comment": " The input stream over which `Parser`s operate.\n\n* `data` is the initial input provided by the user\n* `input` is the remainder after running a parse\n* `position` is the starting position of `input` in `data` after a parse\n\n ",
            "args": [],
            "type": "{ data : String, input : String, position : Int }"
          },
          {
            "name": "ParseContext",
            "comment": " A tuple representing the current parser state, the remaining input\nstream and the parse result.  Don't worry about this type unless\nyou're writing your own `primitive` parsers. ",
            "args": [
              "state",
              "res"
            ],
            "type": "( state, Combine.InputStream, Combine.ParseResult res )"
          },
          {
            "name": "ParseErr",
            "comment": " A tuple representing a failed parse.  It contains the state after\nrunning the parser, the remaining input stream and a list of\nerror messages. ",
            "args": [
              "state"
            ],
            "type": "( state, Combine.InputStream, List String )"
          },
          {
            "name": "ParseLocation",
            "comment": " A record representing the current parse location in an InputStream.\n\n* `source` the current line of source code\n* `line` the current line number (starting at 1)\n* `column` the current column (starting at 1)\n",
            "args": [],
            "type": "{ source : String, line : Int, column : Int }"
          },
          {
            "name": "ParseOk",
            "comment": " A tuple representing a successful parse.  It contains the state\nafter running the parser, the remaining input stream and the\nresult. ",
            "args": [
              "state",
              "res"
            ],
            "type": "( state, Combine.InputStream, res )"
          },
          {
            "name": "ParseResult",
            "comment": " Running a `Parser` results in one of two states:\n\n* `Ok res` when the parser has successfully parsed the input\n* `Err messages` when the parser has failed with a list of error messages.\n",
            "args": [
              "res"
            ],
            "type": "Result.Result (List String) res"
          }
        ],
        "types": [
          {
            "name": "Parser",
            "comment": " The Parser type.\n\nAt their core, `Parser`s wrap functions from some `state` and an\n`InputStream` to a tuple representing the new `state`, the\nremaining `InputStream` and a `ParseResult res`.\n",
            "args": [
              "state",
              "res"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "$>",
            "comment": " Run a parser and return the value on the right on success.\n\n    parse (string \"true\" $> True) \"true\"\n    -- Ok True\n\n    parse (string \"true\" $> True) \"false\"\n    -- Err [\"expected \\\"true\\\"\"]\n\n",
            "type": "Combine.Parser s x -> a -> Combine.Parser s a",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "*>",
            "comment": " Join two parsers, ignoring the result of the one on the left.\n\n    unprefix : Parser s String\n    unprefix =\n      string \">\"\n        *> while ((==) ' ')\n        *> while ((/=) ' ')\n\n    parse unprefix \"> a\"\n    -- Ok \"a\"\n\n",
            "type": "Combine.Parser s x -> Combine.Parser s a -> Combine.Parser s a",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "<$",
            "comment": " Run a parser and return the value on the left on success.\n\n    parse (True <$ string \"true\") \"true\"\n    -- Ok True\n\n    parse (True <$ string \"true\") \"false\"\n    -- Err [\"expected \\\"true\\\"\"]\n\n",
            "type": "a -> Combine.Parser s x -> Combine.Parser s a",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "<$>",
            "comment": " Infix version of `map`.\n\n    parse (toString <$> int) \"42\"\n    -- Ok \"42\"\n\n    parse (toString <$> int) \"abc\"\n    -- Err [\"expected an integer\"]\n\n ",
            "type": "(a -> b) -> Combine.Parser s a -> Combine.Parser s b",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "<*",
            "comment": " Join two parsers, ignoring the result of the one on the right.\n\n    unsuffix : Parser s String\n    unsuffix =\n      regex \"[a-z]\"\n        <* regex \"[!?]\"\n\n    parse unsuffix \"a!\"\n    -- Ok \"a\"\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s x -> Combine.Parser s a",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "<*>",
            "comment": " Infix version of `andMap`.\n\n    add : Int -> Int -> Int\n    add = (+)\n\n    plus : Parser s String\n    plus = string \"+\"\n\n    parse (add <$> int <*> (plus *> int)) \"1+1\"\n    -- Ok 2\n\n ",
            "type": "Combine.Parser s (a -> b) -> Combine.Parser s a -> Combine.Parser s b",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "<?>",
            "comment": " Variant of `mapError` that replaces the Parser's error with a List\nof a single string.\n\n    parse (string \"a\" <?> \"gimme an 'a'\") \"b\"\n    -- Err [\"gimme an 'a'\"]\n\n",
            "type": "Combine.Parser s a -> String -> Combine.Parser s a",
            "associativity": "non",
            "precedence": 0
          },
          {
            "name": "<|>",
            "comment": " Synonym for `or`. ",
            "type": "Combine.Parser s a -> Combine.Parser s a -> Combine.Parser s a",
            "associativity": "right",
            "precedence": 1
          },
          {
            "name": ">>=",
            "comment": " Infix version of `andThen`.\n\n    import Combine.Num exposing (int)\n\n    choosy : Parser s String\n    choosy =\n      let\n        createParser n =\n          if n % 2 == 0 then\n            string \" is even\"\n          else\n            string \" is odd\"\n      in\n        int >>= createParser\n\n    parse choosy \"1 is odd\"\n    -- Ok \" is odd\"\n\n    parse choosy \"2 is even\"\n    -- Ok \" is even\"\n\n    parse choosy \"1 is even\"\n    -- Err [\"expected \\\" is odd\\\"\"]\n\n",
            "type": "Combine.Parser s a -> (a -> Combine.Parser s b) -> Combine.Parser s b",
            "associativity": "left",
            "precedence": 1
          },
          {
            "name": "andMap",
            "comment": " Sequence two parsers.\n\n    import Combine.Num exposing (int)\n\n    plus : Parser s String\n    plus = string \"+\"\n\n    sum : Parser s Int\n    sum =\n      int\n        |> map (+)\n        |> andMap (plus *> int)\n\n    parse sum \"1+2\"\n    -- Ok 3\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s (a -> b) -> Combine.Parser s b"
          },
          {
            "name": "andThen",
            "comment": " Sequence two parsers, passing the result of the first parser to a\nfunction that returns the second parser. The value of the second\nparser is returned on success.\n\n    import Combine.Num exposing (int)\n\n    choosy : Parser s String\n    choosy =\n      let\n        createParser n =\n          if n % 2 == 0 then\n            string \" is even\"\n          else\n            string \" is odd\"\n      in\n        int\n          |> andThen createParser\n\n    parse choosy \"1 is odd\"\n    -- Ok \" is odd\"\n\n    parse choosy \"2 is even\"\n    -- Ok \" is even\"\n\n    parse choosy \"1 is even\"\n    -- Err [\"expected \\\" is odd\\\"\"]\n\n",
            "type": "(a -> Combine.Parser s b) -> Combine.Parser s a -> Combine.Parser s b"
          },
          {
            "name": "app",
            "comment": " Unwrap a parser so it can be applied to a state and an input\nstream.  This function is useful if you want to construct your own\nparsers via `primitive`.  If you're using this outside of the context\nof `primitive` then you might be doing something wrong so try asking\nfor help on the mailing list.\n\nHere's how you would implement a greedy version of `manyTill` using\n`primitive` and `app`:\n\n    manyTill : Parser s a -> Parser s x -> Parser s (List a)\n    manyTill p end =\n      let\n        accumulate acc state stream =\n          case app end state stream of\n            (rstate, rstream, Ok _) ->\n              (rstate, rstream, Ok (List.reverse acc))\n\n            _ ->\n              case app p state stream of\n                (rstate, rstream, Ok res) ->\n                  accumulate (res :: acc) rstate rstream\n\n                (estate, estream, Err ms) ->\n                  (estate, estream, Err ms)\n      in\n        primitive <| accumulate []\n\n",
            "type": "Combine.Parser state res -> state -> Combine.InputStream -> Combine.ParseContext state res"
          },
          {
            "name": "between",
            "comment": " Parse something between two other parsers.\n\nThe parser\n\n    between (string \"(\") (string \")\") (string \"a\")\n\nis equivalent to the parser\n\n    string \"(\" *> string \"a\" <* string \")\"\n\n",
            "type": "Combine.Parser s l -> Combine.Parser s r -> Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "braces",
            "comment": " Parse something between braces `{}`. ",
            "type": "Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "brackets",
            "comment": " Parse something between square brackets `[]`. ",
            "type": "Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "chainl",
            "comment": " Parse one or more occurences of `p` separated by `op`, recursively\napply all functions returned by `op` to the values returned by `p`. See\nthe `examples/Calc.elm` file for an example.\n",
            "type": "Combine.Parser s (a -> a -> a) -> Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "chainr",
            "comment": " Similar to `chainl` but functions of `op` are applied in\nright-associative order to the values of `p`.  See the\n`examples/Python.elm` file for a usage example. ",
            "type": "Combine.Parser s (a -> a -> a) -> Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "choice",
            "comment": " Choose between a list of parsers.\n\n    parse (choice [string \"a\", string \"b\"]) \"a\"\n    -- Ok \"a\"\n\n    parse (choice [string \"a\", string \"b\"]) \"b\"\n    -- Ok \"b\"\n\n",
            "type": "List (Combine.Parser s a) -> Combine.Parser s a"
          },
          {
            "name": "count",
            "comment": " Parse `n` occurences of `p`. ",
            "type": "Int -> Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "currentColumn",
            "comment": " Get the current column in the input stream. ",
            "type": "Combine.InputStream -> Int"
          },
          {
            "name": "currentLine",
            "comment": " Get the current line in the input stream. ",
            "type": "Combine.InputStream -> Int"
          },
          {
            "name": "currentLocation",
            "comment": " Get the current `(line, column)` in the input stream. ",
            "type": "Combine.InputStream -> Combine.ParseLocation"
          },
          {
            "name": "currentSourceLine",
            "comment": " Get the current source line in the input stream. ",
            "type": "Combine.InputStream -> String"
          },
          {
            "name": "end",
            "comment": " Fail when the input is not empty.\n\n    parse end \"\"\n    -- Ok ()\n\n    parse end \"a\"\n    -- Err [\"expected end of input\"]\n\n",
            "type": "Combine.Parser s ()"
          },
          {
            "name": "fail",
            "comment": " Fail without consuming any input.\n\n    parse (fail \"some error\") \"hello\"\n    -- Err [\"some error\"]\n\n",
            "type": "String -> Combine.Parser s a"
          },
          {
            "name": "lazy",
            "comment": " Defer running a parser until it's actually required.  Use this\nfunction to avoid \"bad-recursion\" errors.\n\n    type Expression\n      = ETerm String\n      | EList (List E)\n\n    name : Parser s String\n    name = whitespace *> regex \"[a-zA-Z]+\" <* whitespace\n\n    term : Parser s Expression\n    term = ETerm <$> name\n\n    list : Parser s Expression\n    list =\n      let\n        -- helper is itself a function so we avoid the case where the\n        -- value `list` tries to apply itself in its definition.\n        helper () =\n          EList <$> between (string \"(\") (string \")\") (many (term <|> list))\n      in\n        -- lazy defers calling helper until it's actually needed.\n        lazy helper\n\n    parse list \"\"\n    -- Err [\"expected \\\"(\\\"\"]\n\n    parse list \"()\"\n    -- Ok (EList [])\n\n    parse list \"(a (b c))\"\n    -- Ok (EList [ETerm \"a\", EList [ETerm \"b\", ETerm \"c\"]])\n\n",
            "type": "(() -> Combine.Parser s a) -> Combine.Parser s a"
          },
          {
            "name": "lookAhead",
            "comment": " Apply a parser without consuming any input on success. ",
            "type": "Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "many",
            "comment": " Apply a parser zero or more times and return a list of the results.\n\n    parse (many (string \"a\")) \"aaab\"\n    -- Ok [\"a\", \"a\", \"a\"]\n\n    parse (many (string \"a\")) \"bbbb\"\n    -- Ok []\n\n    parse (many (string \"a\")) \"\"\n    -- Ok []\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "many1",
            "comment": " Parse at least one result.\n\n    parse (many1 (string \"a\")) \"a\"\n    -- Ok [\"a\"]\n\n    parse (many1 (string \"a\")) \"\"\n    -- Err [\"expected \\\"a\\\"\"]\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "manyTill",
            "comment": " Apply parser `p` zero or more times until parser `end`\nsucceeds. On success, the list of `p`'s results is returned.\n\n    string \"<!--\" *> manyTill anyChar (string \"-->\")\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s end -> Combine.Parser s (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the result of a parser.\n\n    let\n      parser =\n        string \"a\"\n          |> map String.toUpper\n    in\n      parse parser \"a\"\n      -- Ok \"A\"\n\n",
            "type": "(a -> b) -> Combine.Parser s a -> Combine.Parser s b"
          },
          {
            "name": "mapError",
            "comment": " Transform the error of a parser.\n\n    let\n      parser =\n        string \"a\"\n          |> mapError (always [\"bad input\"])\n    in\n      parse parser b\n      -- Err [\"bad input\"]\n\n",
            "type": "(List String -> List String) -> Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "maybe",
            "comment": " Wrap the return value into a `Maybe`.  Returns `Nothing` on failure.\n\n    parse (maybe (string \"a\")) \"a\"\n    -- Ok (Just \"a\")\n\n    parse (maybe (string \"a\")) \"b\"\n    -- Ok Nothing\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s (Maybe.Maybe a)"
          },
          {
            "name": "modifyState",
            "comment": " Modify the parser's state. ",
            "type": "(s -> s) -> Combine.Parser s ()"
          },
          {
            "name": "optional",
            "comment": " Return a default value when the given parser fails.\n\n    letterA : Parser s String\n    letterA = optional \"a\" (string \"a\")\n\n    parse letterA \"a\"\n    -- Ok \"a\"\n\n    parse letterA \"b\"\n    -- Ok \"a\"\n\n",
            "type": "a -> Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "or",
            "comment": " Choose between two parsers.\n\n    parse (or (string \"a\") (string \"b\")) \"a\"\n    -- Ok \"a\"\n\n    parse (or (string \"a\") (string \"b\")) \"b\"\n    -- Ok \"b\"\n\n    parse (or (string \"a\") (string \"b\")) \"c\"\n    -- Err [\"expected \\\"a\\\"\", \"expected \\\"b\\\"\"]\n\n",
            "type": "Combine.Parser s a -> Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "parens",
            "comment": " Parse something between parentheses. ",
            "type": "Combine.Parser s a -> Combine.Parser s a"
          },
          {
            "name": "parse",
            "comment": " Parse a string.  See `runParser` if your parser needs to manage\nsome internal state.\n\n    import Combine.Num exposing (int)\n    import String\n\n    parseAnInteger : String -> Result String Int\n    parseAnInteger input =\n      case parse int input of\n        Ok (_, stream, result) ->\n          Ok result\n\n        Err (_, stream, errors) ->\n          Err (String.join \" or \" errors)\n\n    parseAnInteger \"123\"\n    -- Ok 123\n\n    parseAnInteger \"abc\"\n    -- Err \"expected an integer\"\n\n ",
            "type": "Combine.Parser () res -> String -> Result.Result (Combine.ParseErr ()) (Combine.ParseOk () res)"
          },
          {
            "name": "primitive",
            "comment": " Construct a new primitive Parser.\n\nIf you find yourself reaching for this function often consider opening\na [Github issue][issues] with the library to have your custom Parsers\nincluded in the standard distribution.\n\n[issues]: https://github.com/Bogdanp/elm-combine/issues\n",
            "type": "(state -> Combine.InputStream -> Combine.ParseContext state res) -> Combine.Parser state res"
          },
          {
            "name": "putState",
            "comment": " Replace the parser's state. ",
            "type": "s -> Combine.Parser s ()"
          },
          {
            "name": "regex",
            "comment": " Parse a Regex match.\n\nRegular expressions must match from the beginning of the input and their\nsubgroups are ignored. A `^` is added implicitly to the beginning of\nevery pattern unless one already exists.\n\n    parse (regex \"a+\") \"aaaaab\"\n    -- Ok \"aaaaa\"\n\n",
            "type": "String -> Combine.Parser s String"
          },
          {
            "name": "runParser",
            "comment": " Parse a string while maintaining some internal state.\n\n    import Combine.Num exposing (int)\n    import String\n\n    type alias Output =\n      { count : Int\n      , integers : List Int\n      }\n\n    statefulInt : Parse Int Int\n    statefulInt =\n      -- Parse an int, then increment the state and return the parsed\n      -- int.  It's important that we try to parse the int _first_\n      -- since modifying the state will always succeed.\n      int <* modifyState ((+) 1)\n\n    ints : Parse Int (List Int)\n    ints =\n      sepBy (string \" \") statefulInt\n\n    parseIntegers : String -> Result String Output\n    parseIntegers input =\n      case runParser ints 0 input of\n        Ok (state, stream, ints) ->\n          Ok { count = state, integers = ints }\n\n        Err (state, stream, errors) ->\n          Err (String.join \" or \" errors)\n\n    parseIntegers \"\"\n    -- Ok { count = 0, integers = [] }\n\n    parseIntegers \"1 2 3 45\"\n    -- Ok { count = 4, integers = [1, 2, 3, 45] }\n\n    parseIntegers \"1 a 2\"\n    -- Ok { count = 1, integers = [1] }\n\n",
            "type": "Combine.Parser state res -> state -> String -> Result.Result (Combine.ParseErr state) (Combine.ParseOk state res)"
          },
          {
            "name": "sepBy",
            "comment": " Parser zero or more occurences of one parser separated by another.\n\n    parse (sepBy (string \",\") (string \"a\")) \"b\"\n    -- Ok []\n\n    parse (sepBy (string \",\") (string \"a\")) \"a,a,a\"\n    -- Ok [\"a\", \"a\", \"a\"]\n\n    parse (sepBy (string \",\") (string \"a\")) \"a,a,b\"\n    -- Ok [\"a\", \"a\"]\n\n",
            "type": "Combine.Parser s x -> Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "sepBy1",
            "comment": " Parse one or more occurences of one parser separated by another. ",
            "type": "Combine.Parser s x -> Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "sepEndBy",
            "comment": " Parse zero or more occurences of one parser separated and\noptionally ended by another.\n\n    parse (sepEndBy (string \",\") (string \"a\")) \"a,a,a,\"\n    -- Ok [\"a\", \"a\", \"a\"]\n\n",
            "type": "Combine.Parser s x -> Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "sepEndBy1",
            "comment": " Parse one or more occurences of one parser separated and\noptionally ended by another.\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"\"\n    -- Err [\"expected \\\"a\\\"\"]\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"a\"\n    -- Ok [\"a\"]\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"a,\"\n    -- Ok [\"a\"]\n\n",
            "type": "Combine.Parser s x -> Combine.Parser s a -> Combine.Parser s (List a)"
          },
          {
            "name": "sequence",
            "comment": " Run a list of parsers in sequence, accumulating the results.  The\nmain use case for this parser is when you want to combine a list of\nparsers into a single, top-level, parser.  For most use cases, you'll\nwant to use one of the other combinators instead.\n\n    parse (sequence [string \"a\", string \"b\"]) \"ab\"\n    -- Ok [\"a\", \"b\"]\n\n    parse (sequence [string \"a\", string \"b\"]) \"ac\"\n    -- Err [\"expected \\\"b\\\"\"]\n\n ",
            "type": "List (Combine.Parser s a) -> Combine.Parser s (List a)"
          },
          {
            "name": "skip",
            "comment": " Apply a parser and skip its result. ",
            "type": "Combine.Parser s x -> Combine.Parser s ()"
          },
          {
            "name": "skipMany",
            "comment": " Apply a parser and skip its result many times. ",
            "type": "Combine.Parser s x -> Combine.Parser s ()"
          },
          {
            "name": "skipMany1",
            "comment": " Apply a parser and skip its result at least once. ",
            "type": "Combine.Parser s x -> Combine.Parser s ()"
          },
          {
            "name": "string",
            "comment": " Parse an exact string match.\n\n    parse (string \"hello\") \"hello world\"\n    -- Ok \"hello\"\n\n    parse (string \"hello\") \"goodbye\"\n    -- Err [\"expected \\\"hello\\\"\"]\n\n",
            "type": "String -> Combine.Parser s String"
          },
          {
            "name": "succeed",
            "comment": " Return a value without consuming any input.\n\n    parse (succeed 1) \"a\"\n    -- Ok 1\n\n",
            "type": "a -> Combine.Parser s a"
          },
          {
            "name": "while",
            "comment": " Consume input while the predicate matches.\n\n    parse (while ((/=) ' ')) \"test 123\"\n    -- Ok \"test\"\n\n",
            "type": "(Char -> Bool) -> Combine.Parser s String"
          },
          {
            "name": "whitespace",
            "comment": " Parse zero or more whitespace characters.\n\n    parse (whitespace *> string \"hello\") \"hello\"\n    -- Ok \"hello\"\n\n    parse (whitespace *> string \"hello\") \"   hello\"\n    -- Ok \"hello\"\n\n",
            "type": "Combine.Parser s String"
          },
          {
            "name": "withColumn",
            "comment": " Get the current column and pipe it into a parser. ",
            "type": "(Int -> Combine.Parser s a) -> Combine.Parser s a"
          },
          {
            "name": "withLine",
            "comment": " Get the current line and pipe it into a parser. ",
            "type": "(Int -> Combine.Parser s a) -> Combine.Parser s a"
          },
          {
            "name": "withLocation",
            "comment": " Get the current position in the input stream and pipe it into a parser. ",
            "type": "(Combine.ParseLocation -> Combine.Parser s a) -> Combine.Parser s a"
          },
          {
            "name": "withState",
            "comment": " Get the parser's state and pipe it into a parser. ",
            "type": "(s -> Combine.Parser s a) -> Combine.Parser s a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-datepicker",
    "version": "3.0.2",
    "docs": [
      {
        "name": "DatePicker",
        "comment": " A customizable date picker component.\n\n# Tea ☕\n@docs Msg, DatePicker\n@docs init, update, view\n\n# Settings\n@docs Settings, defaultSettings\n",
        "aliases": [
          {
            "name": "Settings",
            "comment": " The type of date picker settings.\n",
            "args": [],
            "type": "{ placeholder : String , classNamespace : String , inputClassList : List ( String, Bool ) , inputName : Maybe.Maybe String , isDisabled : Date.Date -> Bool , dateFormatter : Date.Date -> String , dayFormatter : Date.Day -> String , monthFormatter : Date.Month -> String , yearFormatter : Int -> String , firstDayOfWeek : Date.Day , pickedDate : Maybe.Maybe Date.Date }"
          }
        ],
        "types": [
          {
            "name": "DatePicker",
            "comment": " The DatePicker model.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " An opaque type representing messages that are passed inside the DatePicker.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultSettings",
            "comment": " A record of default settings for the date picker.  Extend this if\nyou want to customize your date picker.\n\n\n    import DatePicker exposing (defaultSettings)\n\n    DatePicker.init { defaultSettings | placeholder = \"Pick a date\" }\n\n\nTo disable certain dates:\n\n\n    import Date exposing (Day(..), dayOfWeek)\n    import DatePicker exposing (defaultSettings)\n\n    DatePicker.init { defaultSettings | isDisabled = \\d -> dayOfWeek d `List.member` [ Sat, Sun ] }\n\n",
            "type": "DatePicker.Settings"
          },
          {
            "name": "init",
            "comment": " Initialize a DatePicker given a Settings record.  You must execute\nthe returned command for the date picker to behave correctly.\n\n\n    init =\n      let\n         (datePicker, datePickerFx) =\n           DatePicker.init defaultSettings\n      in\n         { picker = datePicker } ! [ Cmd.map ToDatePicker datePickerfx ]\n\n",
            "type": "DatePicker.Settings -> ( DatePicker.DatePicker, Platform.Cmd.Cmd DatePicker.Msg )"
          },
          {
            "name": "update",
            "comment": " The date picker update function.  The third value in the returned\ntuple represents the picked date, it is `Nothing` if no date was\npicked or if the previously-picked date has not changed and `Just`\nsome date if it has.\n",
            "type": "DatePicker.Msg -> DatePicker.DatePicker -> ( DatePicker.DatePicker , Platform.Cmd.Cmd DatePicker.Msg , Maybe.Maybe Date.Date )"
          },
          {
            "name": "view",
            "comment": " The date picker view.\n",
            "type": "DatePicker.DatePicker -> Html.Html DatePicker.Msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-querystring",
    "version": "1.0.0",
    "docs": [
      {
        "name": "QueryString",
        "comment": " This module exposes functions for working with query strings.\n\nYou can manipulate `QueryString`s:\n\n    > empty\n    |   |> add \"a\" \"hello\"\n    |   |> add \"a\" \"goodbye\"\n    |   |> add \"b\" \"1\"\n    |   |> render\n    \"?a=hello&a=goodbye&b=1\" : String\n\nAnd you can parse and extract their parameters:\n\n    > let\n    |   qs = parse \"?a=1&a=2&a=test&b=hello\"\n    |   a = qs |> many int \"a\"\n    |   b = qs |> one string \"b\" |> Maybe.withDefault \"goodbye\"\n    | in\n    |   (a, b)\n    ([1, 2], \"hello\")\n\n## Types\n@docs QueryString\n\n## Constructing QueryStrings\n@docs parse, empty\n\n## Manipulating parameters\n@docs render, add, remove, filter\n\n## Extracting parameters\n@docs all, one, many\n\n### Parsers\n@docs string, int\n\n",
        "aliases": [],
        "types": [
          {
            "name": "QueryString",
            "comment": " Represents a parsed query string.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a value to a key.\n\n    > parse \"?a=1&b=a&a=c\"\n    |   |> add \"a\" \"2\"\n    |   |> render\n    \"?a=2&a=1&a=c&b=a\" : String\n\n    > parse \"?a=1&b=a&a=c\"\n    |   |> add \"d\" \"hello\"\n    |   |> render\n    \"?a=1&a=c&b=a&d=hello\" : String\n\n",
            "type": "String -> String -> QueryString.QueryString -> QueryString.QueryString"
          },
          {
            "name": "all",
            "comment": " Retrieve all of the values for a given key.\n\n    > parse \"?a=1&a=2\"\n    |   |> all \"a\"\n    [\"1\",\"2\"] : List String\n\n    > parse \"?a=1&a=2\"\n    |   |> all \"b\"\n    [] : List String\n\n",
            "type": "String -> QueryString.QueryString -> List String"
          },
          {
            "name": "empty",
            "comment": " Construct an empty QueryString.\n",
            "type": "QueryString.QueryString"
          },
          {
            "name": "filter",
            "comment": " Filter a key's values.\n\n    > parse \"?a=1&b=a&a=c\"\n    |   |> filter \"a\" ((==) \"1\")\n    |   |> render\n    \"?a=1&b=a\" : String\n\n",
            "type": "String -> (String -> Bool) -> QueryString.QueryString -> QueryString.QueryString"
          },
          {
            "name": "int",
            "comment": " A Parser that accepts any integer.\n",
            "type": "Combine.Parser s Int"
          },
          {
            "name": "many",
            "comment": " Retrieve zero or more values for some key. Values are funneled\nthrough the given parser before being returned.\n\n    > parse \"?a=1&a=c&a=2\"\n    |   |> many int \"a\"\n    [1,2] : List Int\n\n",
            "type": "Combine.Parser () a -> String -> QueryString.QueryString -> List a"
          },
          {
            "name": "one",
            "comment": " Retrieve a single value for a given key. Values are funneled through\nthe given parser before being returned.\n\n    > parse \"?a=1&a=2\"\n    |   |> one string \"a\"\n    Just \"2\" : Maybe.Maybe String\n\n    > parse \"?a=1&a=2\"\n    |   |> one int \"a\"\n    Just 2 : Maybe.Maybe Int\n\n    > parse \"?a=1&a=c\"\n    |   |> one int \"a\"\n    Just 1 : Maybe.Maybe Int\n\n",
            "type": "Combine.Parser () a -> String -> QueryString.QueryString -> Maybe.Maybe a"
          },
          {
            "name": "parse",
            "comment": " Turn a String into a QueryString. The initial `?` is optional.\n\n    > parse \"\"\n    QueryString (Dict.fromList []) : QueryString\n\n    > parse \"?a=1&b=c&a=2\"\n    QueryString (Dict.fromList [(\"a\",[\"1\",\"2\"]),(\"b\",[\"c\"])])\n        : QueryString\n\n    > parse \"a=1&b=c&a=2\"\n    QueryString (Dict.fromList [(\"a\",[\"1\",\"2\"]),(\"b\",[\"c\"])])\n        : QueryString\n\n",
            "type": "String -> QueryString.QueryString"
          },
          {
            "name": "remove",
            "comment": " Remove a key.\n\n    > parse \"?a=1&b=a&a=c\"\n    |   |> remove \"a\"\n    |   |> render\n    \"?b=a\" : String\n\n    > parse \"?a=1&b=a&a=c\"\n    |   |> remove \"c\"\n    |   |> render\n    \"?a=1&a=c&b=a\" : String\n\n",
            "type": "String -> QueryString.QueryString -> QueryString.QueryString"
          },
          {
            "name": "render",
            "comment": " Render a QueryString to a String.\n\n    > render (parse \"?a=1&b=a&a=c\")\n    \"?a=1&a=c&b=a\" : String\n\n",
            "type": "QueryString.QueryString -> String"
          },
          {
            "name": "string",
            "comment": " A Parser that accepts any string.\n",
            "type": "Combine.Parser s String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-route",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Route",
        "comment": " This module exposes combinators for creating route parsers.\n\n@docs Route, Router\n\n## Routing\n@docs route, (:=), router, match, reverse\n\n## Route combinators\n@docs static, custom, string, int, and, (</>)\n",
        "aliases": [],
        "types": [
          {
            "name": "Route",
            "comment": " Routes represent concrete parsers for paths. Routes can be combined\nand they keep track of their path components in order to provide\nautomatic reverse routing.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Router",
            "comment": " A Router is, at its core, a List of Routes.\n\n    sitemap : Router a\n    sitemap = router [routeA, routeB]\n\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": ":=",
            "comment": " A synonym for `route`.\n\n    type Sitemap\n      = HomeR\n\n    homeR : Route Sitemap\n    homeR = HomeR := static \"\"\n\n",
            "type": "a -> Route.Route (a -> b) -> Route.Route b",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "</>",
            "comment": " A synonym for `and`.\n\n    type Sitemap\n      = AddR Int Int\n\n    addR = AddR := int </> int\n    sitemap = router [addR]\n\n    > match sitemap \"/1/2\"\n    Just (AddR 1 2) : Maybe Sitemap\n\n",
            "type": "Route.Route (a -> b) -> Route.Route (b -> c) -> Route.Route (a -> c)",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "and",
            "comment": " Compose two Routes.\n\n    type Sitemap\n      = AddR Int Int\n\n    addR = AddR := int `and` int\n    sitemap = router [addR]\n\n    > match sitemap \"/1/2\"\n    Just (AddR 1 2) : Maybe Sitemap\n\n",
            "type": "Route.Route (a -> b) -> Route.Route (b -> c) -> Route.Route (a -> c)"
          },
          {
            "name": "custom",
            "comment": " Create a Route with a custom Parser.\n\n    import Combine exposing (..)\n    import Combine.Infix exposing (..)\n\n    type Category\n      = Snippet\n      | Post\n\n    type Sitemap\n      = CategoryR Category\n\n    categoryR = CategoryR := static \"categories\" </> custom categoryParser\n    sitemap = router [categoryR]\n\n    > match sitemap \"/categories/a\"\n    Nothing : Maybe Sitemap\n\n    > match sitemap \"/categories/Post\"\n    Just (CategoryR Post) : Maybe Sitemap\n\n    > match sitemap \"/categories/Snippet\"\n    Just (CategoryR Snippet) : Maybe Sitemap\n\nSee `examples/Custom.elm` for a complete example.\n\n",
            "type": "Combine.Parser () a -> Route.Route ((a -> b) -> b)"
          },
          {
            "name": "int",
            "comment": " A Route that matches any integer.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := static \"users\" </> int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/a\"\n    Nothing : Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe Sitemap\n\n    > match sitemap \"/users/-1\"\n    Just (UserR -1) : Maybe Sitemap\n\n",
            "type": "Route.Route ((Int -> a) -> a)"
          },
          {
            "name": "match",
            "comment": " Given a Router and an arbitrary String representing a path, this\nfunction will return the first Route that matches that path.\n\n    type Sitemap\n      = HomeR\n      | UsersR\n      | UserR Int\n\n    homeR = HomeR := static \"\"\n    usersR = UsersR := static \"users\"\n    usersR = UserR := static \"users\" </> int\n    sitemap = router [homeR, userR, usersR]\n\n    > match sitemap \"/a\"\n    Nothing : Maybe Sitemap\n\n    > match sitemap \"/\"\n    Just HomeR : Maybe Sitemap\n\n    > match sitemap \"/users\"\n    Just UsersR : Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe Sitemap\n\n",
            "type": "Route.Router a -> String -> Maybe.Maybe a"
          },
          {
            "name": "reverse",
            "comment": " Render a path given a Route and a list of route components.\n\n    type Sitemap\n      = HomeR\n      | UsersR\n      | UserR Int\n\n    homeR = HomeR := static \"\"\n    usersR = UsersR := static \"users\"\n    usersR = UserR := static \"users\" </> int\n    sitemap = router [homeR, userR, usersR]\n\n    > reverse homeR []\n    \"/\"\n\n    > reverse usersR []\n    \"/users\"\n\n    > reverse userR [\"1\"]\n    \"/users/1\"\n\nIf you are willing to write some boilerplate, `reverse` can be used to\nconstruct a type safe reverse routing function specific to your\napplication:\n\n    toString : Sitemap -> String\n    toString r =\n      case r of\n        HomeR  -> reverse homeR []\n        UsersR  -> reverse usersR []\n        UserR uid -> reverse userR [toString uid]\n\n    > toString HomeR\n    \"/\"\n\n    > toString UsersR\n    \"/users\"\n\n    > toString (UserR 1)\n    \"/users/1\"\n\n`reverse` will crash at runtime if there is a mismatch between the\nroute and the list of arguments that is passed in. For example:\n\n    > reverse deepR []\n    Error: Ran into a `Debug.crash` in module `Route`\n\n    This was caused by the `case` expression between lines 145 and 175.\n    One of the branches ended with a crash and the following value got through:\n\n        ([],[CInt,CInt,CInt])\n\n    The message provided by the code author is:\n\n        'reverse' called with an unexpected number of arguments\n\n    > reverse deepR [\"a\"]\n    Error: Ran into a `Debug.crash` in module `Route`\n\n    This was caused by the `case` expression between lines 171 and 176.\n    One of the branches ended with a crash and the following value got through:\n\n        Err (\"could not convert string 'a' to an Int\")\n\n    The message provided by the code author is:\n\n        could not convert string 'a' to an Int in a call to 'reverse'\n\n",
            "type": "Route.Route a -> List String -> String"
          },
          {
            "name": "route",
            "comment": " Declare a Route.\n\n    type Sitemap\n      = HomeR\n\n    homeR : Route Sitemap\n    homeR = route HomeR (static \"\")\n\n",
            "type": "a -> Route.Route (a -> b) -> Route.Route b"
          },
          {
            "name": "router",
            "comment": " Construct a Router from a list of Routes.\n\n    type Sitemap\n      = HomeR\n      | BlogR\n\n    homeR = HomeR := static \"\"\n    blogR = BlogR := static \"blog\"\n    sitemap = router [homeR, blogR]\n\n",
            "type": "List (Route.Route a) -> Route.Router a"
          },
          {
            "name": "static",
            "comment": " Create a Route that matches a static String.\n\n    type Sitemap\n      = BlogR\n\n    blogR = BlogR := static \"blog\"\n    sitemap = router [blogR]\n\n    > match sitemap \"/blog\"\n    Just BlogR : Maybe Sitemap\n\n",
            "type": "String -> Route.Route (a -> a)"
          },
          {
            "name": "string",
            "comment": " A Route that matches any string.\n\n    type Sitemap\n      = PostR String\n\n    postR = PostR := static \"posts\" </> string\n    sitemap = router [postR]\n\n    > match sitemap \"/posts/\"\n    Nothing : Maybe Sitemap\n\n    > match sitemap \"/posts/hello-world/test\"\n    Nothing : Maybe Sitemap\n\n    > match sitemap \"/posts/hello-world\"\n    Just (PostR \"hello-world\") : Maybe Sitemap\n\n",
            "type": "Route.Route ((String -> a) -> a)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-time",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Time.ZonedDateTime",
        "comment": " This module defines a time representation based on a Date, the\ntime of day and a time zone.\n\nZonedDateTimes should only be used when reasoning about or displaying\n`DateTime`s in a user's local time zone.  For this reason, the API\nsurface of `ZonedDateTimes` is extremely limited.\n\n# ZonedDateTimes\n@docs ZonedDateTime\n\n# Constructing ZonedDateTimes\n@docs zero, zonedDateTime, fromDateTime, toDateTime\n\n# Inspecting ZonedDateTimes\n@docs timeZone, year, month, day, weekday, hour, minute, second, millisecond, abbreviation, utcOffset, utcOffsetString\n\n# Helper functions\n@docs toISO8601, fromISO8601\n",
        "aliases": [],
        "types": [
          {
            "name": "ZonedDateTime",
            "comment": " ZoneDateTime is the opaque type for all ZonedDateTime values.\nValues of this type represent a `(TimeZone, DateTime)` pair.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "abbreviation",
            "comment": " abbreviation returns a ZonedDateTime's abbreviation at that time.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> String"
          },
          {
            "name": "day",
            "comment": " day returns a ZonedDateTime's day.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "fromDateTime",
            "comment": " fromDateTime constructs a ZonedDateTime value from a TimeZone and\na DateTime.\n",
            "type": "Time.TimeZone.TimeZone -> Time.DateTime.DateTime -> Time.ZonedDateTime.ZonedDateTime"
          },
          {
            "name": "fromISO8601",
            "comment": " fromISO8601 parses an ISO8601-formatted string into a\nZonedDateTime object, adjusting for its offset.\n",
            "type": "Time.TimeZone.TimeZone -> String -> Result.Result String Time.ZonedDateTime.ZonedDateTime"
          },
          {
            "name": "hour",
            "comment": " hour returns a ZonedDateTime's hour.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "millisecond",
            "comment": " millisecond returns a ZonedDateTime's millisecond.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "minute",
            "comment": " minute returns a ZonedDateTime's minute.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "month",
            "comment": " month returns a ZonedDateTime's month.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "second",
            "comment": " second returns a ZonedDateTime's second.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "timeZone",
            "comment": " timeZone returns a ZonedDatetime's TimeZone.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Time.TimeZone.TimeZone"
          },
          {
            "name": "toDateTime",
            "comment": " toDateTime converts a ZonedDateTime to a UTC DateTime value.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "toISO8601",
            "comment": " toISO8601 renders a ZonedDateTime in ISO8601 format.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> String"
          },
          {
            "name": "utcOffset",
            "comment": " utcOffset returns a ZonedDateTime's offset from UTC in\nmilliseconds at that time.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "utcOffsetString",
            "comment": " utcOffsetString returns a ZonedDateTime's UTC offset at that time\nas a string.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> String"
          },
          {
            "name": "weekday",
            "comment": " weekday returns a ZonedDateTime's day of the week.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Time.Date.Weekday"
          },
          {
            "name": "year",
            "comment": " year returns a ZonedDateTime's year.\n",
            "type": "Time.ZonedDateTime.ZonedDateTime -> Int"
          },
          {
            "name": "zero",
            "comment": " zero represents the first millisecond of the first day of the\ncurrent era.  Use it to build `ZonedDateTime` values:\n\n    -- 0-01-01T00:00:00+02:00\n    zonedDateTime (europe_bucharest ()) zero\n\n    -- 2016-01-01T00:00:00+02:00\n    zonedDateTime (europe_bucharest ()) { zero | year = 2016 }\n\n    -- 2016-05-29T13:00:00+02:00\n    zonedDateTime (europe_bucharest ()) { zero | year = 2016, month = 5, day = 29, hour = 13 }\n",
            "type": "Time.Internal.DateTimeData"
          },
          {
            "name": "zonedDateTime",
            "comment": " zonedDateTime constructs a ZonedDateTime value given a TimeZone, a\ndate and a time.  Invalid values are clamped to the nearest valid date\nand time.\n",
            "type": "Time.TimeZone.TimeZone -> Time.Internal.DateTimeData -> Time.ZonedDateTime.ZonedDateTime"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Time.TimeZones",
        "comment": " This module contains TimeZone definitions for all Timezones as they\nare defined in the IANA zoneinfo database.\n\nTimeZone data is parsed lazily so, in order to retrieve a zone's value you\nmust apply `()` to it.  For example:\n\n    import Time.DateTime exposing (epoch, toTimestamp)\n    import Time.TimeZone exposing (abbreviation)\n    import Time.TimeZones exposing (europe_bucharest)\n\n    let\n        timezone = europe_bucharest ()\n    in\n        abbreviation (toTimestamp epoch) timezone\n\n@docs africa_abidjan, africa_accra, africa_addis_ababa, africa_algiers, africa_asmara, africa_asmera, africa_bamako, africa_bangui, africa_banjul, africa_bissau, africa_blantyre, africa_brazzaville, africa_bujumbura, africa_cairo, africa_casablanca, africa_ceuta, africa_conakry, africa_dakar, africa_dar_es_salaam, africa_djibouti, africa_douala, africa_el_aaiun, africa_freetown, africa_gaborone, africa_harare, africa_johannesburg, africa_juba, africa_kampala, africa_khartoum, africa_kigali, africa_kinshasa, africa_lagos, africa_libreville, africa_lome, africa_luanda, africa_lubumbashi, africa_lusaka, africa_malabo, africa_maputo, africa_maseru, africa_mbabane, africa_mogadishu, africa_monrovia, africa_nairobi, africa_ndjamena, africa_niamey, africa_nouakchott, africa_ouagadougou, africa_porto_novo, africa_sao_tome, africa_timbuktu, africa_tripoli, africa_tunis, africa_windhoek, america_adak, america_anchorage, america_anguilla, america_antigua, america_araguaina, america_argentina_buenos_aires, america_argentina_catamarca, america_argentina_comodrivadavia, america_argentina_cordoba, america_argentina_jujuy, america_argentina_la_rioja, america_argentina_mendoza, america_argentina_rio_gallegos, america_argentina_salta, america_argentina_san_juan, america_argentina_san_luis, america_argentina_tucuman, america_argentina_ushuaia, america_aruba, america_asuncion, america_atikokan, america_atka, america_bahia, america_bahia_banderas, america_barbados, america_belem, america_belize, america_blanc_sablon, america_boa_vista, america_bogota, america_boise, america_buenos_aires, america_cambridge_bay, america_campo_grande, america_cancun, america_caracas, america_catamarca, america_cayenne, america_cayman, america_chicago, america_chihuahua, america_coral_harbour, america_cordoba, america_costa_rica, america_creston, america_cuiaba, america_curacao, america_danmarkshavn, america_dawson, america_dawson_creek, america_denver, america_detroit, america_dominica, america_edmonton, america_eirunepe, america_el_salvador, america_ensenada, america_fort_nelson, america_fort_wayne, america_fortaleza, america_glace_bay, america_godthab, america_goose_bay, america_grand_turk, america_grenada, america_guadeloupe, america_guatemala, america_guayaquil, america_guyana, america_halifax, america_havana, america_hermosillo, america_indiana_indianapolis, america_indiana_knox, america_indiana_marengo, america_indiana_petersburg, america_indiana_tell_city, america_indiana_vevay, america_indiana_vincennes, america_indiana_winamac, america_indianapolis, america_inuvik, america_iqaluit, america_jamaica, america_jujuy, america_juneau, america_kentucky_louisville, america_kentucky_monticello, america_knox_in, america_kralendijk, america_la_paz, america_lima, america_los_angeles, america_louisville, america_lower_princes, america_maceio, america_managua, america_manaus, america_marigot, america_martinique, america_matamoros, america_mazatlan, america_mendoza, america_menominee, america_merida, america_metlakatla, america_mexico_city, america_miquelon, america_moncton, america_monterrey, america_montevideo, america_montreal, america_montserrat, america_nassau, america_new_york, america_nipigon, america_nome, america_noronha, america_north_dakota_beulah, america_north_dakota_center, america_north_dakota_new_salem, america_ojinaga, america_panama, america_pangnirtung, america_paramaribo, america_phoenix, america_port_au_prince, america_port_of_spain, america_porto_acre, america_porto_velho, america_puerto_rico, america_rainy_river, america_rankin_inlet, america_recife, america_regina, america_resolute, america_rio_branco, america_rosario, america_santa_isabel, america_santarem, america_santiago, america_santo_domingo, america_sao_paulo, america_scoresbysund, america_shiprock, america_sitka, america_st_barthelemy, america_st_johns, america_st_kitts, america_st_lucia, america_st_thomas, america_st_vincent, america_swift_current, america_tegucigalpa, america_thule, america_thunder_bay, america_tijuana, america_toronto, america_tortola, america_vancouver, america_virgin, america_whitehorse, america_winnipeg, america_yakutat, america_yellowknife, antarctica_casey, antarctica_davis, antarctica_dumontdurville, antarctica_macquarie, antarctica_mawson, antarctica_mcmurdo, antarctica_palmer, antarctica_rothera, antarctica_south_pole, antarctica_syowa, antarctica_troll, antarctica_vostok, arctic_longyearbyen, asia_aden, asia_almaty, asia_amman, asia_anadyr, asia_aqtau, asia_aqtobe, asia_ashgabat, asia_ashkhabad, asia_baghdad, asia_bahrain, asia_baku, asia_bangkok, asia_barnaul, asia_beirut, asia_bishkek, asia_brunei, asia_calcutta, asia_chita, asia_choibalsan, asia_chongqing, asia_chungking, asia_colombo, asia_dacca, asia_damascus, asia_dhaka, asia_dili, asia_dubai, asia_dushanbe, asia_gaza, asia_harbin, asia_hebron, asia_ho_chi_minh, asia_hong_kong, asia_hovd, asia_irkutsk, asia_istanbul, asia_jakarta, asia_jayapura, asia_jerusalem, asia_kabul, asia_kamchatka, asia_karachi, asia_kashgar, asia_kathmandu, asia_katmandu, asia_khandyga, asia_kolkata, asia_krasnoyarsk, asia_kuala_lumpur, asia_kuching, asia_kuwait, asia_macao, asia_macau, asia_magadan, asia_makassar, asia_manila, asia_muscat, asia_nicosia, asia_novokuznetsk, asia_novosibirsk, asia_omsk, asia_oral, asia_phnom_penh, asia_pontianak, asia_pyongyang, asia_qatar, asia_qyzylorda, asia_rangoon, asia_riyadh, asia_saigon, asia_sakhalin, asia_samarkand, asia_seoul, asia_shanghai, asia_singapore, asia_srednekolymsk, asia_taipei, asia_tashkent, asia_tbilisi, asia_tehran, asia_tel_aviv, asia_thimbu, asia_thimphu, asia_tokyo, asia_tomsk, asia_ujung_pandang, asia_ulaanbaatar, asia_ulan_bator, asia_urumqi, asia_ust_nera, asia_vientiane, asia_vladivostok, asia_yakutsk, asia_yekaterinburg, asia_yerevan, atlantic_azores, atlantic_bermuda, atlantic_canary, atlantic_cape_verde, atlantic_faeroe, atlantic_faroe, atlantic_jan_mayen, atlantic_madeira, atlantic_reykjavik, atlantic_south_georgia, atlantic_st_helena, atlantic_stanley, australia_act, australia_adelaide, australia_brisbane, australia_broken_hill, australia_canberra, australia_currie, australia_darwin, australia_eucla, australia_hobart, australia_lhi, australia_lindeman, australia_lord_howe, australia_melbourne, australia_north, australia_nsw, australia_perth, australia_queensland, australia_south, australia_sydney, australia_tasmania, australia_victoria, australia_west, australia_yancowinna, brazil_acre, brazil_denoronha, brazil_east, brazil_west, canada_atlantic, canada_central, canada_east_saskatchewan, canada_eastern, canada_mountain, canada_newfoundland, canada_pacific, canada_saskatchewan, canada_yukon, cet, chile_continental, chile_easterisland, cst6cdt, cuba, eet, egypt, eire, est, est5edt, etc_gmt, etc_gmt_0, etc_gmt_minus_0, etc_gmt_minus_1, etc_gmt_minus_10, etc_gmt_minus_11, etc_gmt_minus_12, etc_gmt_minus_13, etc_gmt_minus_14, etc_gmt_minus_2, etc_gmt_minus_3, etc_gmt_minus_4, etc_gmt_minus_5, etc_gmt_minus_6, etc_gmt_minus_7, etc_gmt_minus_8, etc_gmt_minus_9, etc_gmt_plus_0, etc_gmt_plus_1, etc_gmt_plus_10, etc_gmt_plus_11, etc_gmt_plus_12, etc_gmt_plus_2, etc_gmt_plus_3, etc_gmt_plus_4, etc_gmt_plus_5, etc_gmt_plus_6, etc_gmt_plus_7, etc_gmt_plus_8, etc_gmt_plus_9, etc_greenwich, etc_uct, etc_universal, etc_utc, etc_zulu, europe_amsterdam, europe_andorra, europe_astrakhan, europe_athens, europe_belfast, europe_belgrade, europe_berlin, europe_bratislava, europe_brussels, europe_bucharest, europe_budapest, europe_busingen, europe_chisinau, europe_copenhagen, europe_dublin, europe_gibraltar, europe_guernsey, europe_helsinki, europe_isle_of_man, europe_istanbul, europe_jersey, europe_kaliningrad, europe_kiev, europe_kirov, europe_lisbon, europe_ljubljana, europe_london, europe_luxembourg, europe_madrid, europe_malta, europe_mariehamn, europe_minsk, europe_monaco, europe_moscow, europe_nicosia, europe_oslo, europe_paris, europe_podgorica, europe_prague, europe_riga, europe_rome, europe_samara, europe_san_marino, europe_sarajevo, europe_simferopol, europe_skopje, europe_sofia, europe_stockholm, europe_tallinn, europe_tirane, europe_tiraspol, europe_ulyanovsk, europe_uzhgorod, europe_vaduz, europe_vatican, europe_vienna, europe_vilnius, europe_volgograd, europe_warsaw, europe_zagreb, europe_zaporozhye, europe_zurich, gb, gb_eire, gmt, gmt_0, gmt_minus_0, gmt_plus_0, greenwich, hongkong, hst, iceland, indian_antananarivo, indian_chagos, indian_christmas, indian_cocos, indian_comoro, indian_kerguelen, indian_mahe, indian_maldives, indian_mauritius, indian_mayotte, indian_reunion, iran, israel, jamaica, japan, kwajalein, libya, met, mexico_bajanorte, mexico_bajasur, mexico_general, mst, mst7mdt, navajo, nz, nz_chat, pacific_apia, pacific_auckland, pacific_bougainville, pacific_chatham, pacific_chuuk, pacific_easter, pacific_efate, pacific_enderbury, pacific_fakaofo, pacific_fiji, pacific_funafuti, pacific_galapagos, pacific_gambier, pacific_guadalcanal, pacific_guam, pacific_honolulu, pacific_johnston, pacific_kiritimati, pacific_kosrae, pacific_kwajalein, pacific_majuro, pacific_marquesas, pacific_midway, pacific_nauru, pacific_niue, pacific_norfolk, pacific_noumea, pacific_pago_pago, pacific_palau, pacific_pitcairn, pacific_pohnpei, pacific_ponape, pacific_port_moresby, pacific_rarotonga, pacific_saipan, pacific_samoa, pacific_tahiti, pacific_tarawa, pacific_tongatapu, pacific_truk, pacific_wake, pacific_wallis, pacific_yap, poland, portugal, prc, pst8pdt, roc, rok, singapore, turkey, uct, universal, us_alaska, us_aleutian, us_arizona, us_central, us_east_indiana, us_eastern, us_hawaii, us_indiana_starke, us_michigan, us_mountain, us_pacific, us_pacific_new, us_samoa, utc, w_su, wet, zulu\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "africa_abidjan",
            "comment": " Africa/Abidjan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_accra",
            "comment": " Africa/Accra ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_addis_ababa",
            "comment": " Africa/Addis_Ababa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_algiers",
            "comment": " Africa/Algiers ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_asmara",
            "comment": " Africa/Asmara ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_asmera",
            "comment": " Africa/Asmera ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_bamako",
            "comment": " Africa/Bamako ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_bangui",
            "comment": " Africa/Bangui ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_banjul",
            "comment": " Africa/Banjul ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_bissau",
            "comment": " Africa/Bissau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_blantyre",
            "comment": " Africa/Blantyre ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_brazzaville",
            "comment": " Africa/Brazzaville ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_bujumbura",
            "comment": " Africa/Bujumbura ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_cairo",
            "comment": " Africa/Cairo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_casablanca",
            "comment": " Africa/Casablanca ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_ceuta",
            "comment": " Africa/Ceuta ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_conakry",
            "comment": " Africa/Conakry ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_dakar",
            "comment": " Africa/Dakar ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_dar_es_salaam",
            "comment": " Africa/Dar_es_Salaam ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_djibouti",
            "comment": " Africa/Djibouti ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_douala",
            "comment": " Africa/Douala ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_el_aaiun",
            "comment": " Africa/El_Aaiun ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_freetown",
            "comment": " Africa/Freetown ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_gaborone",
            "comment": " Africa/Gaborone ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_harare",
            "comment": " Africa/Harare ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_johannesburg",
            "comment": " Africa/Johannesburg ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_juba",
            "comment": " Africa/Juba ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_kampala",
            "comment": " Africa/Kampala ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_khartoum",
            "comment": " Africa/Khartoum ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_kigali",
            "comment": " Africa/Kigali ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_kinshasa",
            "comment": " Africa/Kinshasa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_lagos",
            "comment": " Africa/Lagos ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_libreville",
            "comment": " Africa/Libreville ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_lome",
            "comment": " Africa/Lome ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_luanda",
            "comment": " Africa/Luanda ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_lubumbashi",
            "comment": " Africa/Lubumbashi ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_lusaka",
            "comment": " Africa/Lusaka ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_malabo",
            "comment": " Africa/Malabo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_maputo",
            "comment": " Africa/Maputo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_maseru",
            "comment": " Africa/Maseru ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_mbabane",
            "comment": " Africa/Mbabane ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_mogadishu",
            "comment": " Africa/Mogadishu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_monrovia",
            "comment": " Africa/Monrovia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_nairobi",
            "comment": " Africa/Nairobi ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_ndjamena",
            "comment": " Africa/Ndjamena ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_niamey",
            "comment": " Africa/Niamey ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_nouakchott",
            "comment": " Africa/Nouakchott ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_ouagadougou",
            "comment": " Africa/Ouagadougou ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_porto_novo",
            "comment": " Africa/Porto-Novo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_sao_tome",
            "comment": " Africa/Sao_Tome ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_timbuktu",
            "comment": " Africa/Timbuktu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_tripoli",
            "comment": " Africa/Tripoli ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_tunis",
            "comment": " Africa/Tunis ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "africa_windhoek",
            "comment": " Africa/Windhoek ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_adak",
            "comment": " America/Adak ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_anchorage",
            "comment": " America/Anchorage ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_anguilla",
            "comment": " America/Anguilla ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_antigua",
            "comment": " America/Antigua ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_araguaina",
            "comment": " America/Araguaina ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_buenos_aires",
            "comment": " America/Argentina/Buenos_Aires ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_catamarca",
            "comment": " America/Argentina/Catamarca ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_comodrivadavia",
            "comment": " America/Argentina/ComodRivadavia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_cordoba",
            "comment": " America/Argentina/Cordoba ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_jujuy",
            "comment": " America/Argentina/Jujuy ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_la_rioja",
            "comment": " America/Argentina/La_Rioja ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_mendoza",
            "comment": " America/Argentina/Mendoza ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_rio_gallegos",
            "comment": " America/Argentina/Rio_Gallegos ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_salta",
            "comment": " America/Argentina/Salta ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_san_juan",
            "comment": " America/Argentina/San_Juan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_san_luis",
            "comment": " America/Argentina/San_Luis ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_tucuman",
            "comment": " America/Argentina/Tucuman ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_argentina_ushuaia",
            "comment": " America/Argentina/Ushuaia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_aruba",
            "comment": " America/Aruba ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_asuncion",
            "comment": " America/Asuncion ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_atikokan",
            "comment": " America/Atikokan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_atka",
            "comment": " America/Atka ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_bahia",
            "comment": " America/Bahia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_bahia_banderas",
            "comment": " America/Bahia_Banderas ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_barbados",
            "comment": " America/Barbados ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_belem",
            "comment": " America/Belem ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_belize",
            "comment": " America/Belize ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_blanc_sablon",
            "comment": " America/Blanc-Sablon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_boa_vista",
            "comment": " America/Boa_Vista ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_bogota",
            "comment": " America/Bogota ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_boise",
            "comment": " America/Boise ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_buenos_aires",
            "comment": " America/Buenos_Aires ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_cambridge_bay",
            "comment": " America/Cambridge_Bay ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_campo_grande",
            "comment": " America/Campo_Grande ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_cancun",
            "comment": " America/Cancun ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_caracas",
            "comment": " America/Caracas ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_catamarca",
            "comment": " America/Catamarca ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_cayenne",
            "comment": " America/Cayenne ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_cayman",
            "comment": " America/Cayman ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_chicago",
            "comment": " America/Chicago ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_chihuahua",
            "comment": " America/Chihuahua ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_coral_harbour",
            "comment": " America/Coral_Harbour ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_cordoba",
            "comment": " America/Cordoba ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_costa_rica",
            "comment": " America/Costa_Rica ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_creston",
            "comment": " America/Creston ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_cuiaba",
            "comment": " America/Cuiaba ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_curacao",
            "comment": " America/Curacao ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_danmarkshavn",
            "comment": " America/Danmarkshavn ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_dawson",
            "comment": " America/Dawson ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_dawson_creek",
            "comment": " America/Dawson_Creek ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_denver",
            "comment": " America/Denver ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_detroit",
            "comment": " America/Detroit ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_dominica",
            "comment": " America/Dominica ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_edmonton",
            "comment": " America/Edmonton ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_eirunepe",
            "comment": " America/Eirunepe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_el_salvador",
            "comment": " America/El_Salvador ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_ensenada",
            "comment": " America/Ensenada ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_fort_nelson",
            "comment": " America/Fort_Nelson ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_fort_wayne",
            "comment": " America/Fort_Wayne ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_fortaleza",
            "comment": " America/Fortaleza ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_glace_bay",
            "comment": " America/Glace_Bay ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_godthab",
            "comment": " America/Godthab ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_goose_bay",
            "comment": " America/Goose_Bay ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_grand_turk",
            "comment": " America/Grand_Turk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_grenada",
            "comment": " America/Grenada ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_guadeloupe",
            "comment": " America/Guadeloupe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_guatemala",
            "comment": " America/Guatemala ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_guayaquil",
            "comment": " America/Guayaquil ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_guyana",
            "comment": " America/Guyana ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_halifax",
            "comment": " America/Halifax ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_havana",
            "comment": " America/Havana ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_hermosillo",
            "comment": " America/Hermosillo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_indianapolis",
            "comment": " America/Indiana/Indianapolis ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_knox",
            "comment": " America/Indiana/Knox ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_marengo",
            "comment": " America/Indiana/Marengo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_petersburg",
            "comment": " America/Indiana/Petersburg ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_tell_city",
            "comment": " America/Indiana/Tell_City ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_vevay",
            "comment": " America/Indiana/Vevay ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_vincennes",
            "comment": " America/Indiana/Vincennes ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indiana_winamac",
            "comment": " America/Indiana/Winamac ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_indianapolis",
            "comment": " America/Indianapolis ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_inuvik",
            "comment": " America/Inuvik ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_iqaluit",
            "comment": " America/Iqaluit ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_jamaica",
            "comment": " America/Jamaica ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_jujuy",
            "comment": " America/Jujuy ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_juneau",
            "comment": " America/Juneau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_kentucky_louisville",
            "comment": " America/Kentucky/Louisville ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_kentucky_monticello",
            "comment": " America/Kentucky/Monticello ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_knox_in",
            "comment": " America/Knox_IN ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_kralendijk",
            "comment": " America/Kralendijk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_la_paz",
            "comment": " America/La_Paz ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_lima",
            "comment": " America/Lima ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_los_angeles",
            "comment": " America/Los_Angeles ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_louisville",
            "comment": " America/Louisville ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_lower_princes",
            "comment": " America/Lower_Princes ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_maceio",
            "comment": " America/Maceio ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_managua",
            "comment": " America/Managua ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_manaus",
            "comment": " America/Manaus ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_marigot",
            "comment": " America/Marigot ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_martinique",
            "comment": " America/Martinique ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_matamoros",
            "comment": " America/Matamoros ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_mazatlan",
            "comment": " America/Mazatlan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_mendoza",
            "comment": " America/Mendoza ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_menominee",
            "comment": " America/Menominee ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_merida",
            "comment": " America/Merida ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_metlakatla",
            "comment": " America/Metlakatla ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_mexico_city",
            "comment": " America/Mexico_City ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_miquelon",
            "comment": " America/Miquelon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_moncton",
            "comment": " America/Moncton ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_monterrey",
            "comment": " America/Monterrey ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_montevideo",
            "comment": " America/Montevideo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_montreal",
            "comment": " America/Montreal ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_montserrat",
            "comment": " America/Montserrat ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_nassau",
            "comment": " America/Nassau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_new_york",
            "comment": " America/New_York ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_nipigon",
            "comment": " America/Nipigon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_nome",
            "comment": " America/Nome ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_noronha",
            "comment": " America/Noronha ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_north_dakota_beulah",
            "comment": " America/North_Dakota/Beulah ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_north_dakota_center",
            "comment": " America/North_Dakota/Center ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_north_dakota_new_salem",
            "comment": " America/North_Dakota/New_Salem ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_ojinaga",
            "comment": " America/Ojinaga ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_panama",
            "comment": " America/Panama ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_pangnirtung",
            "comment": " America/Pangnirtung ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_paramaribo",
            "comment": " America/Paramaribo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_phoenix",
            "comment": " America/Phoenix ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_port_au_prince",
            "comment": " America/Port-au-Prince ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_port_of_spain",
            "comment": " America/Port_of_Spain ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_porto_acre",
            "comment": " America/Porto_Acre ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_porto_velho",
            "comment": " America/Porto_Velho ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_puerto_rico",
            "comment": " America/Puerto_Rico ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_rainy_river",
            "comment": " America/Rainy_River ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_rankin_inlet",
            "comment": " America/Rankin_Inlet ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_recife",
            "comment": " America/Recife ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_regina",
            "comment": " America/Regina ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_resolute",
            "comment": " America/Resolute ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_rio_branco",
            "comment": " America/Rio_Branco ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_rosario",
            "comment": " America/Rosario ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_santa_isabel",
            "comment": " America/Santa_Isabel ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_santarem",
            "comment": " America/Santarem ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_santiago",
            "comment": " America/Santiago ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_santo_domingo",
            "comment": " America/Santo_Domingo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_sao_paulo",
            "comment": " America/Sao_Paulo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_scoresbysund",
            "comment": " America/Scoresbysund ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_shiprock",
            "comment": " America/Shiprock ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_sitka",
            "comment": " America/Sitka ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_st_barthelemy",
            "comment": " America/St_Barthelemy ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_st_johns",
            "comment": " America/St_Johns ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_st_kitts",
            "comment": " America/St_Kitts ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_st_lucia",
            "comment": " America/St_Lucia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_st_thomas",
            "comment": " America/St_Thomas ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_st_vincent",
            "comment": " America/St_Vincent ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_swift_current",
            "comment": " America/Swift_Current ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_tegucigalpa",
            "comment": " America/Tegucigalpa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_thule",
            "comment": " America/Thule ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_thunder_bay",
            "comment": " America/Thunder_Bay ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_tijuana",
            "comment": " America/Tijuana ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_toronto",
            "comment": " America/Toronto ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_tortola",
            "comment": " America/Tortola ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_vancouver",
            "comment": " America/Vancouver ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_virgin",
            "comment": " America/Virgin ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_whitehorse",
            "comment": " America/Whitehorse ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_winnipeg",
            "comment": " America/Winnipeg ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_yakutat",
            "comment": " America/Yakutat ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "america_yellowknife",
            "comment": " America/Yellowknife ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_casey",
            "comment": " Antarctica/Casey ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_davis",
            "comment": " Antarctica/Davis ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_dumontdurville",
            "comment": " Antarctica/DumontDUrville ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_macquarie",
            "comment": " Antarctica/Macquarie ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_mawson",
            "comment": " Antarctica/Mawson ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_mcmurdo",
            "comment": " Antarctica/McMurdo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_palmer",
            "comment": " Antarctica/Palmer ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_rothera",
            "comment": " Antarctica/Rothera ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_south_pole",
            "comment": " Antarctica/South_Pole ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_syowa",
            "comment": " Antarctica/Syowa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_troll",
            "comment": " Antarctica/Troll ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "antarctica_vostok",
            "comment": " Antarctica/Vostok ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "arctic_longyearbyen",
            "comment": " Arctic/Longyearbyen ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_aden",
            "comment": " Asia/Aden ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_almaty",
            "comment": " Asia/Almaty ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_amman",
            "comment": " Asia/Amman ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_anadyr",
            "comment": " Asia/Anadyr ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_aqtau",
            "comment": " Asia/Aqtau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_aqtobe",
            "comment": " Asia/Aqtobe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ashgabat",
            "comment": " Asia/Ashgabat ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ashkhabad",
            "comment": " Asia/Ashkhabad ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_baghdad",
            "comment": " Asia/Baghdad ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_bahrain",
            "comment": " Asia/Bahrain ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_baku",
            "comment": " Asia/Baku ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_bangkok",
            "comment": " Asia/Bangkok ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_barnaul",
            "comment": " Asia/Barnaul ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_beirut",
            "comment": " Asia/Beirut ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_bishkek",
            "comment": " Asia/Bishkek ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_brunei",
            "comment": " Asia/Brunei ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_calcutta",
            "comment": " Asia/Calcutta ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_chita",
            "comment": " Asia/Chita ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_choibalsan",
            "comment": " Asia/Choibalsan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_chongqing",
            "comment": " Asia/Chongqing ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_chungking",
            "comment": " Asia/Chungking ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_colombo",
            "comment": " Asia/Colombo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_dacca",
            "comment": " Asia/Dacca ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_damascus",
            "comment": " Asia/Damascus ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_dhaka",
            "comment": " Asia/Dhaka ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_dili",
            "comment": " Asia/Dili ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_dubai",
            "comment": " Asia/Dubai ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_dushanbe",
            "comment": " Asia/Dushanbe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_gaza",
            "comment": " Asia/Gaza ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_harbin",
            "comment": " Asia/Harbin ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_hebron",
            "comment": " Asia/Hebron ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ho_chi_minh",
            "comment": " Asia/Ho_Chi_Minh ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_hong_kong",
            "comment": " Asia/Hong_Kong ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_hovd",
            "comment": " Asia/Hovd ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_irkutsk",
            "comment": " Asia/Irkutsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_istanbul",
            "comment": " Asia/Istanbul ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_jakarta",
            "comment": " Asia/Jakarta ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_jayapura",
            "comment": " Asia/Jayapura ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_jerusalem",
            "comment": " Asia/Jerusalem ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kabul",
            "comment": " Asia/Kabul ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kamchatka",
            "comment": " Asia/Kamchatka ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_karachi",
            "comment": " Asia/Karachi ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kashgar",
            "comment": " Asia/Kashgar ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kathmandu",
            "comment": " Asia/Kathmandu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_katmandu",
            "comment": " Asia/Katmandu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_khandyga",
            "comment": " Asia/Khandyga ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kolkata",
            "comment": " Asia/Kolkata ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_krasnoyarsk",
            "comment": " Asia/Krasnoyarsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kuala_lumpur",
            "comment": " Asia/Kuala_Lumpur ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kuching",
            "comment": " Asia/Kuching ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_kuwait",
            "comment": " Asia/Kuwait ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_macao",
            "comment": " Asia/Macao ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_macau",
            "comment": " Asia/Macau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_magadan",
            "comment": " Asia/Magadan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_makassar",
            "comment": " Asia/Makassar ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_manila",
            "comment": " Asia/Manila ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_muscat",
            "comment": " Asia/Muscat ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_nicosia",
            "comment": " Asia/Nicosia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_novokuznetsk",
            "comment": " Asia/Novokuznetsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_novosibirsk",
            "comment": " Asia/Novosibirsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_omsk",
            "comment": " Asia/Omsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_oral",
            "comment": " Asia/Oral ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_phnom_penh",
            "comment": " Asia/Phnom_Penh ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_pontianak",
            "comment": " Asia/Pontianak ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_pyongyang",
            "comment": " Asia/Pyongyang ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_qatar",
            "comment": " Asia/Qatar ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_qyzylorda",
            "comment": " Asia/Qyzylorda ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_rangoon",
            "comment": " Asia/Rangoon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_riyadh",
            "comment": " Asia/Riyadh ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_saigon",
            "comment": " Asia/Saigon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_sakhalin",
            "comment": " Asia/Sakhalin ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_samarkand",
            "comment": " Asia/Samarkand ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_seoul",
            "comment": " Asia/Seoul ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_shanghai",
            "comment": " Asia/Shanghai ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_singapore",
            "comment": " Asia/Singapore ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_srednekolymsk",
            "comment": " Asia/Srednekolymsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_taipei",
            "comment": " Asia/Taipei ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_tashkent",
            "comment": " Asia/Tashkent ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_tbilisi",
            "comment": " Asia/Tbilisi ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_tehran",
            "comment": " Asia/Tehran ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_tel_aviv",
            "comment": " Asia/Tel_Aviv ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_thimbu",
            "comment": " Asia/Thimbu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_thimphu",
            "comment": " Asia/Thimphu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_tokyo",
            "comment": " Asia/Tokyo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_tomsk",
            "comment": " Asia/Tomsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ujung_pandang",
            "comment": " Asia/Ujung_Pandang ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ulaanbaatar",
            "comment": " Asia/Ulaanbaatar ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ulan_bator",
            "comment": " Asia/Ulan_Bator ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_urumqi",
            "comment": " Asia/Urumqi ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_ust_nera",
            "comment": " Asia/Ust-Nera ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_vientiane",
            "comment": " Asia/Vientiane ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_vladivostok",
            "comment": " Asia/Vladivostok ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_yakutsk",
            "comment": " Asia/Yakutsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_yekaterinburg",
            "comment": " Asia/Yekaterinburg ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "asia_yerevan",
            "comment": " Asia/Yerevan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_azores",
            "comment": " Atlantic/Azores ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_bermuda",
            "comment": " Atlantic/Bermuda ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_canary",
            "comment": " Atlantic/Canary ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_cape_verde",
            "comment": " Atlantic/Cape_Verde ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_faeroe",
            "comment": " Atlantic/Faeroe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_faroe",
            "comment": " Atlantic/Faroe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_jan_mayen",
            "comment": " Atlantic/Jan_Mayen ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_madeira",
            "comment": " Atlantic/Madeira ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_reykjavik",
            "comment": " Atlantic/Reykjavik ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_south_georgia",
            "comment": " Atlantic/South_Georgia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_st_helena",
            "comment": " Atlantic/St_Helena ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "atlantic_stanley",
            "comment": " Atlantic/Stanley ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_act",
            "comment": " Australia/ACT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_adelaide",
            "comment": " Australia/Adelaide ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_brisbane",
            "comment": " Australia/Brisbane ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_broken_hill",
            "comment": " Australia/Broken_Hill ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_canberra",
            "comment": " Australia/Canberra ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_currie",
            "comment": " Australia/Currie ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_darwin",
            "comment": " Australia/Darwin ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_eucla",
            "comment": " Australia/Eucla ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_hobart",
            "comment": " Australia/Hobart ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_lhi",
            "comment": " Australia/LHI ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_lindeman",
            "comment": " Australia/Lindeman ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_lord_howe",
            "comment": " Australia/Lord_Howe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_melbourne",
            "comment": " Australia/Melbourne ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_north",
            "comment": " Australia/North ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_nsw",
            "comment": " Australia/NSW ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_perth",
            "comment": " Australia/Perth ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_queensland",
            "comment": " Australia/Queensland ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_south",
            "comment": " Australia/South ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_sydney",
            "comment": " Australia/Sydney ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_tasmania",
            "comment": " Australia/Tasmania ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_victoria",
            "comment": " Australia/Victoria ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_west",
            "comment": " Australia/West ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "australia_yancowinna",
            "comment": " Australia/Yancowinna ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "brazil_acre",
            "comment": " Brazil/Acre ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "brazil_denoronha",
            "comment": " Brazil/DeNoronha ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "brazil_east",
            "comment": " Brazil/East ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "brazil_west",
            "comment": " Brazil/West ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_atlantic",
            "comment": " Canada/Atlantic ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_central",
            "comment": " Canada/Central ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_east_saskatchewan",
            "comment": " Canada/East-Saskatchewan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_eastern",
            "comment": " Canada/Eastern ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_mountain",
            "comment": " Canada/Mountain ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_newfoundland",
            "comment": " Canada/Newfoundland ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_pacific",
            "comment": " Canada/Pacific ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_saskatchewan",
            "comment": " Canada/Saskatchewan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "canada_yukon",
            "comment": " Canada/Yukon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "cet",
            "comment": " CET ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "chile_continental",
            "comment": " Chile/Continental ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "chile_easterisland",
            "comment": " Chile/EasterIsland ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "cst6cdt",
            "comment": " CST6CDT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "cuba",
            "comment": " Cuba ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "eet",
            "comment": " EET ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "egypt",
            "comment": " Egypt ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "eire",
            "comment": " Eire ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "est",
            "comment": " Europe/Budapest ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "est5edt",
            "comment": " EST5EDT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt",
            "comment": " Etc/GMT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_0",
            "comment": " Etc/GMT0 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_0",
            "comment": " Etc/GMT-0 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_1",
            "comment": " Etc/GMT-1 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_10",
            "comment": " Etc/GMT-10 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_11",
            "comment": " Etc/GMT-11 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_12",
            "comment": " Etc/GMT-12 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_13",
            "comment": " Etc/GMT-13 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_14",
            "comment": " Etc/GMT-14 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_2",
            "comment": " Etc/GMT-2 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_3",
            "comment": " Etc/GMT-3 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_4",
            "comment": " Etc/GMT-4 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_5",
            "comment": " Etc/GMT-5 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_6",
            "comment": " Etc/GMT-6 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_7",
            "comment": " Etc/GMT-7 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_8",
            "comment": " Etc/GMT-8 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_minus_9",
            "comment": " Etc/GMT-9 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_0",
            "comment": " Etc/GMT+0 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_1",
            "comment": " Etc/GMT+1 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_10",
            "comment": " Etc/GMT+10 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_11",
            "comment": " Etc/GMT+11 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_12",
            "comment": " Etc/GMT+12 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_2",
            "comment": " Etc/GMT+2 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_3",
            "comment": " Etc/GMT+3 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_4",
            "comment": " Etc/GMT+4 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_5",
            "comment": " Etc/GMT+5 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_6",
            "comment": " Etc/GMT+6 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_7",
            "comment": " Etc/GMT+7 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_8",
            "comment": " Etc/GMT+8 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_gmt_plus_9",
            "comment": " Etc/GMT+9 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_greenwich",
            "comment": " Etc/Greenwich ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_uct",
            "comment": " Etc/UCT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_universal",
            "comment": " Etc/Universal ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_utc",
            "comment": " Etc/UTC ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "etc_zulu",
            "comment": " Etc/Zulu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_amsterdam",
            "comment": " Europe/Amsterdam ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_andorra",
            "comment": " Europe/Andorra ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_astrakhan",
            "comment": " Europe/Astrakhan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_athens",
            "comment": " Europe/Athens ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_belfast",
            "comment": " Europe/Belfast ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_belgrade",
            "comment": " Europe/Belgrade ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_berlin",
            "comment": " Europe/Berlin ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_bratislava",
            "comment": " Europe/Bratislava ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_brussels",
            "comment": " Europe/Brussels ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_bucharest",
            "comment": " Europe/Bucharest ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_budapest",
            "comment": " Europe/Budapest ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_busingen",
            "comment": " Europe/Busingen ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_chisinau",
            "comment": " Europe/Chisinau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_copenhagen",
            "comment": " Europe/Copenhagen ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_dublin",
            "comment": " Europe/Dublin ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_gibraltar",
            "comment": " Europe/Gibraltar ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_guernsey",
            "comment": " Europe/Guernsey ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_helsinki",
            "comment": " Europe/Helsinki ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_isle_of_man",
            "comment": " Europe/Isle_of_Man ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_istanbul",
            "comment": " Europe/Istanbul ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_jersey",
            "comment": " Europe/Jersey ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_kaliningrad",
            "comment": " Europe/Kaliningrad ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_kiev",
            "comment": " Europe/Kiev ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_kirov",
            "comment": " Europe/Kirov ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_lisbon",
            "comment": " Europe/Lisbon ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_ljubljana",
            "comment": " Europe/Ljubljana ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_london",
            "comment": " Europe/London ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_luxembourg",
            "comment": " Europe/Luxembourg ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_madrid",
            "comment": " Europe/Madrid ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_malta",
            "comment": " Europe/Malta ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_mariehamn",
            "comment": " Europe/Mariehamn ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_minsk",
            "comment": " Europe/Minsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_monaco",
            "comment": " Europe/Monaco ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_moscow",
            "comment": " Europe/Moscow ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_nicosia",
            "comment": " Europe/Nicosia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_oslo",
            "comment": " Europe/Oslo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_paris",
            "comment": " Europe/Paris ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_podgorica",
            "comment": " Europe/Podgorica ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_prague",
            "comment": " Europe/Prague ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_riga",
            "comment": " Europe/Riga ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_rome",
            "comment": " Europe/Rome ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_samara",
            "comment": " Europe/Samara ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_san_marino",
            "comment": " Europe/San_Marino ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_sarajevo",
            "comment": " Europe/Sarajevo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_simferopol",
            "comment": " Europe/Simferopol ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_skopje",
            "comment": " Europe/Skopje ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_sofia",
            "comment": " Europe/Sofia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_stockholm",
            "comment": " Europe/Stockholm ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_tallinn",
            "comment": " Europe/Tallinn ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_tirane",
            "comment": " Europe/Tirane ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_tiraspol",
            "comment": " Europe/Tiraspol ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_ulyanovsk",
            "comment": " Europe/Ulyanovsk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_uzhgorod",
            "comment": " Europe/Uzhgorod ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_vaduz",
            "comment": " Europe/Vaduz ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_vatican",
            "comment": " Europe/Vatican ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_vienna",
            "comment": " Europe/Vienna ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_vilnius",
            "comment": " Europe/Vilnius ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_volgograd",
            "comment": " Europe/Volgograd ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_warsaw",
            "comment": " Europe/Warsaw ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_zagreb",
            "comment": " Europe/Zagreb ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_zaporozhye",
            "comment": " Europe/Zaporozhye ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "europe_zurich",
            "comment": " Europe/Zurich ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "gb",
            "comment": " GB ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "gb_eire",
            "comment": " GB-Eire ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "gmt",
            "comment": " GMT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "gmt_0",
            "comment": " GMT0 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "gmt_minus_0",
            "comment": " GMT-0 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "gmt_plus_0",
            "comment": " GMT+0 ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "greenwich",
            "comment": " Greenwich ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "hongkong",
            "comment": " Hongkong ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "hst",
            "comment": " HST ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "iceland",
            "comment": " Iceland ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_antananarivo",
            "comment": " Indian/Antananarivo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_chagos",
            "comment": " Indian/Chagos ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_christmas",
            "comment": " Indian/Christmas ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_cocos",
            "comment": " Indian/Cocos ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_comoro",
            "comment": " Indian/Comoro ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_kerguelen",
            "comment": " Indian/Kerguelen ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_mahe",
            "comment": " Indian/Mahe ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_maldives",
            "comment": " Indian/Maldives ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_mauritius",
            "comment": " Indian/Mauritius ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_mayotte",
            "comment": " Indian/Mayotte ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "indian_reunion",
            "comment": " Indian/Reunion ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "iran",
            "comment": " Iran ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "israel",
            "comment": " Israel ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "jamaica",
            "comment": " Jamaica ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "japan",
            "comment": " Japan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "kwajalein",
            "comment": " Kwajalein ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "libya",
            "comment": " Libya ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "met",
            "comment": " MET ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "mexico_bajanorte",
            "comment": " Mexico/BajaNorte ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "mexico_bajasur",
            "comment": " Mexico/BajaSur ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "mexico_general",
            "comment": " Mexico/General ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "mst",
            "comment": " MST ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "mst7mdt",
            "comment": " MST7MDT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "navajo",
            "comment": " Navajo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "nz",
            "comment": " NZ ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "nz_chat",
            "comment": " NZ-CHAT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_apia",
            "comment": " Pacific/Apia ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_auckland",
            "comment": " Pacific/Auckland ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_bougainville",
            "comment": " Pacific/Bougainville ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_chatham",
            "comment": " Pacific/Chatham ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_chuuk",
            "comment": " Pacific/Chuuk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_easter",
            "comment": " Pacific/Easter ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_efate",
            "comment": " Pacific/Efate ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_enderbury",
            "comment": " Pacific/Enderbury ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_fakaofo",
            "comment": " Pacific/Fakaofo ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_fiji",
            "comment": " Pacific/Fiji ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_funafuti",
            "comment": " Pacific/Funafuti ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_galapagos",
            "comment": " Pacific/Galapagos ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_gambier",
            "comment": " Pacific/Gambier ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_guadalcanal",
            "comment": " Pacific/Guadalcanal ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_guam",
            "comment": " Pacific/Guam ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_honolulu",
            "comment": " Pacific/Honolulu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_johnston",
            "comment": " Pacific/Johnston ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_kiritimati",
            "comment": " Pacific/Kiritimati ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_kosrae",
            "comment": " Pacific/Kosrae ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_kwajalein",
            "comment": " Pacific/Kwajalein ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_majuro",
            "comment": " Pacific/Majuro ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_marquesas",
            "comment": " Pacific/Marquesas ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_midway",
            "comment": " Pacific/Midway ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_nauru",
            "comment": " Pacific/Nauru ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_niue",
            "comment": " Pacific/Niue ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_norfolk",
            "comment": " Pacific/Norfolk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_noumea",
            "comment": " Pacific/Noumea ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_pago_pago",
            "comment": " Pacific/Pago_Pago ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_palau",
            "comment": " Pacific/Palau ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_pitcairn",
            "comment": " Pacific/Pitcairn ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_pohnpei",
            "comment": " Pacific/Pohnpei ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_ponape",
            "comment": " Pacific/Ponape ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_port_moresby",
            "comment": " Pacific/Port_Moresby ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_rarotonga",
            "comment": " Pacific/Rarotonga ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_saipan",
            "comment": " Pacific/Saipan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_samoa",
            "comment": " Pacific/Samoa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_tahiti",
            "comment": " Pacific/Tahiti ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_tarawa",
            "comment": " Pacific/Tarawa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_tongatapu",
            "comment": " Pacific/Tongatapu ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_truk",
            "comment": " Pacific/Truk ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_wake",
            "comment": " Pacific/Wake ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_wallis",
            "comment": " Pacific/Wallis ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pacific_yap",
            "comment": " Pacific/Yap ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "poland",
            "comment": " Poland ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "portugal",
            "comment": " Portugal ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "prc",
            "comment": " PRC ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "pst8pdt",
            "comment": " PST8PDT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "roc",
            "comment": " ROC ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "rok",
            "comment": " ROK ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "singapore",
            "comment": " Singapore ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "turkey",
            "comment": " Turkey ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "uct",
            "comment": " UCT ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "universal",
            "comment": " Universal ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_alaska",
            "comment": " US/Alaska ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_aleutian",
            "comment": " US/Aleutian ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_arizona",
            "comment": " US/Arizona ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_central",
            "comment": " US/Central ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_east_indiana",
            "comment": " US/East-Indiana ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_eastern",
            "comment": " US/Eastern ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_hawaii",
            "comment": " US/Hawaii ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_indiana_starke",
            "comment": " US/Indiana-Starke ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_michigan",
            "comment": " US/Michigan ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_mountain",
            "comment": " US/Mountain ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_pacific",
            "comment": " US/Pacific ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_pacific_new",
            "comment": " US/Pacific-New ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "us_samoa",
            "comment": " US/Samoa ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "utc",
            "comment": " UTC ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "w_su",
            "comment": " W-SU ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "wet",
            "comment": " WET ",
            "type": "() -> Time.TimeZone.TimeZone"
          },
          {
            "name": "zulu",
            "comment": " Zulu ",
            "type": "() -> Time.TimeZone.TimeZone"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Time.DateTime",
        "comment": " This module defines a time representation based on a Date and the\ntime of day.\n\n# DateTimes\n@docs DateTime, zero, epoch, dateTime, date, year, month, day, weekday, hour, minute, second, millisecond\n\n# Manipulating DateTimes\n@docs setDate, setYear, setMonth, setDay, setHour, setMinute, setSecond, setMillisecond, addYears, addMonths, addDays, addHours, addMinutes, addSeconds, addMilliseconds\n\n# Comparing DateTimes\n@docs compare\n\n# Subtracting DateTimes\n@docs DateTimeDelta, delta\n\n# Helper functions\n@docs isValidTime, toTimestamp, fromTimestamp, toTuple, fromTuple, toISO8601, fromISO8601\n",
        "aliases": [
          {
            "name": "DateTimeDelta",
            "comment": " DateTimeDelta represents the relative difference between two\nDateTime values.\n",
            "args": [],
            "type": "{ years : Int , months : Int , days : Int , hours : Int , minutes : Int , seconds : Int , milliseconds : Int }"
          }
        ],
        "types": [
          {
            "name": "DateTime",
            "comment": " DateTime is the opaque type for all DateTime values.  Values of this\ntype represent a valid Date and a time offset from midnight.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "addDays",
            "comment": " addDays adds an absolute number of days to a DateTime value.\n\nSee also `Time.Date.addDays`.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "addHours",
            "comment": " addHours adds a relative number of hours to a DateTime value.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "addMilliseconds",
            "comment": " addMilliseconds adds an absolute number of milliseconds to a\nDateTime value.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "addMinutes",
            "comment": " addMinutes adds a relative number of minutes to a DateTime value.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "addMonths",
            "comment": " addMonths adds a relative number of months to a DateTime value.\n\nSee also `Time.Date.addMonths`.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "addSeconds",
            "comment": " addSeconds adds a relative number of seconds to a DateTime value.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "addYears",
            "comment": " addYears adds a relative number of years to a DateTime value.\n\nSee also `Time.Date.addYears`.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "compare",
            "comment": " compare two DateTimes.\n",
            "type": "Time.DateTime.DateTime -> Time.DateTime.DateTime -> Basics.Order"
          },
          {
            "name": "date",
            "comment": " date returns a DateTime's Date.\n",
            "type": "Time.DateTime.DateTime -> Time.Date.Date"
          },
          {
            "name": "dateTime",
            "comment": " dateTime constructs a DateTime value given a date and a time.\nInvalid values are clamped to the nearest valid date and time.\n",
            "type": "Time.Internal.DateTimeData -> Time.DateTime.DateTime"
          },
          {
            "name": "day",
            "comment": " day returns a DateTime's day.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "delta",
            "comment": " delta computes the relative difference between two DateTime values.\n",
            "type": "Time.DateTime.DateTime -> Time.DateTime.DateTime -> Time.DateTime.DateTimeDelta"
          },
          {
            "name": "epoch",
            "comment": " epoch is the instant in time that represents the first millisecond\nof the UNIX Epoch.\n",
            "type": "Time.DateTime.DateTime"
          },
          {
            "name": "fromISO8601",
            "comment": " fromISO8601 parses an ISO8601-formatted date time string into a\nDateTime object, adjusting for its offset.\n",
            "type": "String -> Result.Result String Time.DateTime.DateTime"
          },
          {
            "name": "fromTimestamp",
            "comment": " fromTimestamp converts the millisecond representation of a\nUNIX timestamp into a DateTime value.\n",
            "type": "Time.Time -> Time.DateTime.DateTime"
          },
          {
            "name": "fromTuple",
            "comment": " fromTuple converts a (year, month, day, hour, minute, second,\nmillisecond) tuple into a DateTime.\n",
            "type": "( Int, Int, Int, Int, Int, Int, Int ) -> Time.DateTime.DateTime"
          },
          {
            "name": "hour",
            "comment": " hour returns a DateTime's hour.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "isValidTime",
            "comment": " isValidTime returns True if the given hour, minute, second and\nmillisecond represent a valid time of day.\n",
            "type": "Int -> Int -> Int -> Time.Time -> Bool"
          },
          {
            "name": "millisecond",
            "comment": " millisecond returns a DateTime's millisecond.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "minute",
            "comment": " minute returns a DateTime's minute.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "month",
            "comment": " month returns a DateTime's month.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "second",
            "comment": " second returns a DateTime's second.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "setDate",
            "comment": " setDate sets a DateTime's Date.\n",
            "type": "Time.Date.Date -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setDay",
            "comment": " setDay sets a DateTime's day.\n\nSee also `Time.Date.setDay`.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setHour",
            "comment": " setHour sets a DateTime's hour.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setMillisecond",
            "comment": " setMillisecond sets a DateTime's millisecond, returning Nothing if\nthe updated time is invalid or Just the new DateTime.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setMinute",
            "comment": " setMinute sets a DateTime's minute, returning Nothing if the\nupdated time is invalid or Just the new DateTime.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setMonth",
            "comment": " setMonth sets a DateTime's month.\n\nSee also `Time.Date.setMonth`.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setSecond",
            "comment": " setSecond sets a DateTime's second, returning Nothing if the\nupdated time is invalid or Just the new DateTime.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "setYear",
            "comment": " setYear sets a DateTime's year.\n\nSee also `Time.Date.setYear`.\n",
            "type": "Int -> Time.DateTime.DateTime -> Time.DateTime.DateTime"
          },
          {
            "name": "toISO8601",
            "comment": " toISO8601 renders a DateTime in ISO8601 format.\n",
            "type": "Time.DateTime.DateTime -> String"
          },
          {
            "name": "toTimestamp",
            "comment": " toTimestamp converts a DateTime value to its UNIX timestamp\nrepresentation as milliseconds.\n",
            "type": "Time.DateTime.DateTime -> Time.Time"
          },
          {
            "name": "toTuple",
            "comment": " toTuple converts a DateTime into a (year, month, day, hour, miunte,\nsecond, millisecond) tuple.\n",
            "type": "Time.DateTime.DateTime -> ( Int, Int, Int, Int, Int, Int, Int )"
          },
          {
            "name": "weekday",
            "comment": " weekday returns a DateTime's day of the week.\n",
            "type": "Time.DateTime.DateTime -> Time.Date.Weekday"
          },
          {
            "name": "year",
            "comment": " year returns a DateTime's year.\n",
            "type": "Time.DateTime.DateTime -> Int"
          },
          {
            "name": "zero",
            "comment": " zero represents the first millisecond of the first day of the\ncurrent era.  Use it to construct `DateTime` values:\n\n    -- 0-01-01T00:00:00Z\n    dateTime zero\n\n    -- 2016-01-01T00:00:00Z\n    dateTime { zero | year = 2016 }\n\n    -- 2016-05-29T13:00:00Z\n    dateTime { zero | year = 2016, month = 5, day = 29, hour = 13 }\n\n",
            "type": "Time.Internal.DateTimeData"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Time.Date",
        "comment": " This module defines a timezone-independent Date type which can\nrepresent any date of the proleptic Gregorian calendar.\n\n# Dates\n@docs Date, date, year, month, day, Weekday, weekday\n\n# Manipulating Dates\n@docs setYear, setMonth, setDay, addYears, addMonths, addDays\n\n# Comparing Dates\n@docs compare\n\n# Subtracting Dates\n@docs DateDelta, delta\n\n# Helper functions\n@docs toISO8601, toTuple, fromTuple, isValidDate, isLeapYear, daysInMonth\n",
        "aliases": [
          {
            "name": "DateDelta",
            "comment": " DateDelta represents a delta between two dates.\n",
            "args": [],
            "type": "{ years : Int, months : Int, days : Int }"
          }
        ],
        "types": [
          {
            "name": "Date",
            "comment": " Date is the opaque type for all Date values.  Values of this type\nare guaranteed to represent valid proleptic Gregorian calendar dates.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Weekday",
            "comment": " Data type used to represent the days of the week.\n",
            "args": [],
            "cases": [
              [
                "Mon",
                []
              ],
              [
                "Tue",
                []
              ],
              [
                "Wed",
                []
              ],
              [
                "Thu",
                []
              ],
              [
                "Fri",
                []
              ],
              [
                "Sat",
                []
              ],
              [
                "Sun",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "addDays",
            "comment": " days adds an exact number (positive or negative) of days to a\nDate.  Adding or subtracting days always produces a valid Date so\nthere is no fuzzing logic here like there is in `add{Months,Years}`.\n",
            "type": "Int -> Time.Date.Date -> Time.Date.Date"
          },
          {
            "name": "addMonths",
            "comment": " addMonths adds a relative number (positive or negative) of months to\na Date, ensuring that the return value represents a valid Date.  Its\nsemantics are the same as `addYears`.\n",
            "type": "Int -> Time.Date.Date -> Time.Date.Date"
          },
          {
            "name": "addYears",
            "comment": " addYears adds a relative number (positive or negative) of years to\na Date, ensuring that the return value represents a valid Date.  If\nthe new date is not valid, days are subtracted from it until a valid\nDate can be produced.\n",
            "type": "Int -> Time.Date.Date -> Time.Date.Date"
          },
          {
            "name": "compare",
            "comment": " compare two Dates.\n",
            "type": "Time.Date.Date -> Time.Date.Date -> Basics.Order"
          },
          {
            "name": "date",
            "comment": " date constructs a Date value given a year, a month and a day.\nInvalid values are clamped to the nearest valid date.\n",
            "type": "Int -> Int -> Int -> Time.Date.Date"
          },
          {
            "name": "day",
            "comment": " day returns a Date's year as an Int. Guaranteed to be valid for\nthe Date's (year, month) pair and in the range [1, 31].\n",
            "type": "Time.Date.Date -> Int"
          },
          {
            "name": "daysInMonth",
            "comment": " daysInMonth returns the number of days in a month given a specific\nyear, taking leap years into account.\n\n* A regular year has 365 days and the corresponding February has 28 days.\n* A leap year has 366 days and the corresponding February has 29 days.\n",
            "type": "Int -> Int -> Maybe.Maybe Int"
          },
          {
            "name": "delta",
            "comment": " delta returns the relative number of years, months and days between two Dates.\n",
            "type": "Time.Date.Date -> Time.Date.Date -> Time.Date.DateDelta"
          },
          {
            "name": "fromTuple",
            "comment": " fromTuple converts a (year, month, day) tuple into a Date value.\n",
            "type": "( Int, Int, Int ) -> Time.Date.Date"
          },
          {
            "name": "isLeapYear",
            "comment": " isLeapYear returns True if the given year is a leap year.  The\nrules for leap years are as follows:\n\n* A year that is a multiple of 400 is a leap year.\n* A year that is a multiple of 100 but not of 400 is not a leap year.\n* A year that is a multiple of 4 but not of 100 is a leap year.\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isValidDate",
            "comment": " isValidDate returns True if the given year, month and day\nrepresent a valid date.\n",
            "type": "Int -> Int -> Int -> Bool"
          },
          {
            "name": "month",
            "comment": " month returns a Date's month as an Int. Guaranteed to be in the\nrange [1, 12].\n",
            "type": "Time.Date.Date -> Int"
          },
          {
            "name": "setDay",
            "comment": " setDay updates a Date's day.  Invalid values are clamped to the\nnearest valid date.\n",
            "type": "Int -> Time.Date.Date -> Time.Date.Date"
          },
          {
            "name": "setMonth",
            "comment": " setMonth updates a Date's month.  Invalid values are clamped to the\nnearest valid date.\n",
            "type": "Int -> Time.Date.Date -> Time.Date.Date"
          },
          {
            "name": "setYear",
            "comment": " setYear updates a Date's year.  Invalid values are clamped to the\nnearest valid date.\n",
            "type": "Int -> Time.Date.Date -> Time.Date.Date"
          },
          {
            "name": "toISO8601",
            "comment": " toISO8601 converts a Date into its string representation.\n",
            "type": "Time.Date.Date -> String"
          },
          {
            "name": "toTuple",
            "comment": " toTuple converts a Date value into a (year, month, day) tuple.\nThis is useful if you want to use Dates as Dict keys.\n",
            "type": "Time.Date.Date -> ( Int, Int, Int )"
          },
          {
            "name": "weekday",
            "comment": " weekday returns the day of week for a given Date.\n\nThis uses Sakamoto's method to determine the day of week.\n",
            "type": "Time.Date.Date -> Time.Date.Weekday"
          },
          {
            "name": "year",
            "comment": " year returns a Date's year as an Int.\n",
            "type": "Time.Date.Date -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Time.TimeZone",
        "comment": " This module defines a representations for Timezone information.\n\n# TimeZone values\n@docs TimeZone, name, abbreviation, offset, offsetString\n\n# Manipulating TimeZones\n@docs setName\n\n# Constructing TimeZones\n@docs unpack\n",
        "aliases": [],
        "types": [
          {
            "name": "TimeZone",
            "comment": " TimeZone represents the opaque type of timezone values.  These are\ngenerally loaded from an external source via `unpack`.\n\nSee also http://momentjs.com/timezone/docs/#/data-formats/packed-format/.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "abbreviation",
            "comment": " Given an arbitrary Time and a TimeZone, abbreviation returns the\nTimeZone's abbreviation at that Time.\n",
            "type": "Time.Time -> Time.TimeZone.TimeZone -> String"
          },
          {
            "name": "name",
            "comment": " name returns a TimeZone's name.\n",
            "type": "Time.TimeZone.TimeZone -> String"
          },
          {
            "name": "offset",
            "comment": " Given an arbitrary Time and a TimeZone, offset returns the\nTimeZone's UTC offset in milliseconds at that Time.\n",
            "type": "Time.Time -> Time.TimeZone.TimeZone -> Int"
          },
          {
            "name": "offsetString",
            "comment": " Given an arbitrary Time and TimeZone, offsetString returns an\nISO8601-formatted UTC offset for at that Time.\n",
            "type": "Time.Time -> Time.TimeZone.TimeZone -> String"
          },
          {
            "name": "setName",
            "comment": " setName updates a TimeZone's name.\n",
            "type": "String -> Time.TimeZone.TimeZone -> Time.TimeZone.TimeZone"
          },
          {
            "name": "unpack",
            "comment": " unpack decodes a packed zone data object into a TimeZone value.\n\nSee also http://momentjs.com/timezone/docs/#/data-formats/packed-format/\n",
            "type": "String -> Result.Result (List String) Time.TimeZone.TimeZone"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-decode-pipeline",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Json.Decode.Pipeline",
        "comment": " # Json.Decode.Pipeline\n\nUse the `(|>)` operator to build JSON decoders.\n\n## Decoding fields\n\n@docs required, requiredAt, optional, optionalAt, hardcoded, custom\n\n## Beginning and ending pipelines\n\n@docs decode, resolve\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "custom",
            "comment": " Run the given decoder and feed its result into the pipeline at this point.\n\nConsider this example.\n\n    import Json.Decode exposing (int, string, at, Decoder)\n    import Decode.Pipeline exposing (decode, required, custom)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> custom (at [ \"profile\", \"name\" ] string)\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\n            \"id\": 123,\n            \"email\": \"sam@example.com\",\n            \"profile\": {\"name\": \"Sam\"}\n          }\n        \"\"\"\n    -- Ok { id = 123, name = \"Sam\", email = \"sam@example.com\" }\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "decode",
            "comment": " Begin a decoding pipeline. This is a synonym for [Json.Decode.succeed](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#succeed),\nintended to make things read more clearly.\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , name : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> optional \"name\" string \"\"\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "hardcoded",
            "comment": " Rather than decoding anything, use a fixed value for the next step in the\npipeline. `harcoded` does not look at the JSON at all.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Decode.Pipeline exposing (decode, required)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , followers : Int\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> hardcoded 0\n\n\n    result : Result String User\n    result =\n      Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\"}\n        \"\"\"\n    -- Ok { id = 123, email = \"sam@example.com\", followers = 0 }\n",
            "type": "a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "optional",
            "comment": " Decode a field that may be missing or have a null value. If the field is\nmissing, then it decodes as the `fallback` value. If the field is present,\nthen `valDecoder` is used to decode its value. If `valDecoder` fails on a\n`null` value, then the `fallback` is used as if the field were missing\nentirely.\n\n    import Json.Decode exposing (int, string, null, oneOf, Decoder)\n    import Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> optional \"name\" string \"blah\"\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\" }\n        \"\"\"\n    -- Ok { id = 123, name = \"blah\", email = \"sam@example.com\" }\n\nBecause `valDecoder` is given an opportunity to decode `null` values before\nresorting to the `fallback`, you can distinguish between missing and `null`\nvalues if you need to:\n\n    userDecoder2 =\n        decode User\n            |> required \"id\" int\n            |> optional \"name\" (oneOf [ string, null \"NULL\" ]) \"MISSING\"\n            |> required \"email\" string\n\n",
            "type": "String -> Json.Decode.Decoder a -> a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "optionalAt",
            "comment": " Decode an optional nested field.\n",
            "type": "List String -> Json.Decode.Decoder a -> a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "required",
            "comment": " Decode a required field.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Decode.Pipeline exposing (decode, required)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"name\" string\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\", \"name\": \"Sam\"}\n        \"\"\"\n    -- Ok { id = 123, name = \"Sam\", email = \"sam@example.com\" }\n",
            "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "requiredAt",
            "comment": " Decode a required nested field.\n",
            "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "resolve",
            "comment": " Convert a `Decoder (Result x a)` into a `Decoder a`. Useful when you want\nto perform some custom processing just before completing the decoding operation.\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Decode.Pipeline exposing\n      (decode, required, resolve)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      let\n        -- toDecoder gets run *after* all the\n        -- (|> required ...) steps are done.\n        toDecoder : Int -> String -> Int -> Decoder User\n        toDecoder id email version =\n          if version > 2 then\n            succeed (User id email)\n          else\n            fail \"This JSON is from a deprecated source. Please upgrade!\"\n      in\n        decode toDecoder\n          |> required \"id\" int\n          |> required \"email\" string\n          |> required \"version\" int -- version is part of toDecoder,\n          |> resolve                -- but it is not a part of User\n\n\n    result : Result String User\n    result =\n      Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\", \"version\": 1}\n        \"\"\"\n    -- Err \"This JSON is from a deprecated source. Please upgrade!\"\n",
            "type": "Json.Decode.Decoder (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "Skinney/elm-array-exploration",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Array.Hamt",
        "comment": " Fast immutable arrays. The elements in an array must have the\nsame type.\n\n# Arrays\n@docs Array\n\n# Creation\n@docs empty, initialize, repeat, fromList\n\n# Query\n@docs isEmpty, length, get\n\n# Manipulate\n@docs set, push, append, slice\n\n# Lists\n@docs toList, toIndexedList\n\n# Transform\n@docs foldl, foldr, filter, map, indexedMap\n",
        "aliases": [
          {
            "name": "Array",
            "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n",
            "args": [
              "a"
            ],
            "type": "{ length : Int , startShift : Int , tree : Array.Hamt.Tree a , tail : Array.JsArray.JsArray a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "append",
            "comment": " Append one array onto another one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n",
            "type": "Array.Hamt.Array a -> Array.Hamt.Array a -> Array.Hamt.Array a"
          },
          {
            "name": "empty",
            "comment": " Return an empty array.\n\n    length empty == 0\n",
            "type": "Array.Hamt.Array a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate.\n\n    filter isEven (fromList [1..6]) == (fromList [2,4,6])\n",
            "type": "(a -> Bool) -> Array.Hamt.Array a -> Array.Hamt.Array a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an array from the left. Read `foldl` as fold from the left.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> Array.Hamt.Array a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an array from the right. Read `foldr` as fold from the right.\n\n    foldr (+) 0 (repeat 3 5) == 15\n",
            "type": "(a -> b -> b) -> b -> Array.Hamt.Array a -> b"
          },
          {
            "name": "fromList",
            "comment": " Create an array from a list.\n",
            "type": "List a -> Array.Hamt.Array a"
          },
          {
            "name": "get",
            "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Nothing\n",
            "type": "Int -> Array.Hamt.Array a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n",
            "type": "(Int -> a -> b) -> Array.Hamt.Array a -> Array.Hamt.Array b"
          },
          {
            "name": "initialize",
            "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n",
            "type": "Int -> (Int -> a) -> Array.Hamt.Array a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n",
            "type": "Array.Hamt.Array a -> Bool"
          },
          {
            "name": "length",
            "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n",
            "type": "Array.Hamt.Array a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n",
            "type": "(a -> b) -> Array.Hamt.Array a -> Array.Hamt.Array b"
          },
          {
            "name": "push",
            "comment": " Push an element onto the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n",
            "type": "a -> Array.Hamt.Array a -> Array.Hamt.Array a"
          },
          {
            "name": "repeat",
            "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n",
            "type": "Int -> a -> Array.Hamt.Array a"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n",
            "type": "Int -> a -> Array.Hamt.Array a -> Array.Hamt.Array a"
          },
          {
            "name": "slice",
            "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n",
            "type": "Int -> Int -> Array.Hamt.Array a -> Array.Hamt.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n",
            "type": "Array.Hamt.Array a -> List ( Int, a )"
          },
          {
            "name": "toList",
            "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n",
            "type": "Array.Hamt.Array a -> List a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "Skinney/fnv",
    "version": "1.0.2",
    "docs": [
      {
        "name": "FNV",
        "comment": " FNV hash function for hashing strings\n\n@docs hashString\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "hashString",
            "comment": " Takes a string. Produces a hash (integer).\n\n    hashString \"Turn me into a hash\" == 4138100590\n",
            "type": "String -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "avh4/elm-fifo",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Fifo",
        "comment": "\n\n# Creating FIFOs\n@docs Fifo, empty, fromList\n\n# Inserting/Removing\n@docs insert, remove\n\n# To List\n@docs toList\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Fifo",
            "comment": " A FIFO containing items of type `a`.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Creates an empty Fifo.\n\n    Fifo.empty\n        -- == Fifo.fromList []\n\n",
            "type": "Fifo.Fifo a"
          },
          {
            "name": "fromList",
            "comment": " Creates a Fifo from a List.\n\n    Fifo.fromList [3,4,5]\n    |> Fifo.remove\n    |> fst\n        -- == Just 3\n\n",
            "type": "List a -> Fifo.Fifo a"
          },
          {
            "name": "insert",
            "comment": " Inserts an item into a Fifo\n\n    Fifo.empty\n    |> Fifo.insert 7\n    |> Fifo.insert 8\n        -- == Fifo.fromList [7,8]\n\n",
            "type": "a -> Fifo.Fifo a -> Fifo.Fifo a"
          },
          {
            "name": "remove",
            "comment": " Removes the next (oldest) item from a Fifo, returning the item (if any), and the updated Fifo.\n\n    Fifo.fromList [3,7]\n    |> Fifo.remove\n        -- == (Just 3, Fifo.fromList [7])\n\n",
            "type": "Fifo.Fifo a -> ( Maybe.Maybe a, Fifo.Fifo a )"
          },
          {
            "name": "toList",
            "comment": " Converts a Fifo to a List.\n\n    Fifo.empty\n    |> Fifo.insert 7\n    |> Fifo.insert 9\n    |> Fifo.toList\n        -- == [7,9]\n",
            "type": "Fifo.Fifo a -> List a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "avh4/elm-meshes",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Meshes",
        "comment": " This is a collection use basic meshes.\n\n# Basic meshes\n@docs icosphere, icosahedron\n\n# Transforming meshes\n@docs subdivide\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "icosahedron",
            "comment": " An icosahedron mesh.\n",
            "type": "List ( Math.Vector3.Vec3, Math.Vector3.Vec3, Math.Vector3.Vec3 )"
          },
          {
            "name": "icosphere",
            "comment": " A sphere mesh made by subdiving an icosahedron.\n",
            "type": "Int -> List ( Math.Vector3.Vec3, Math.Vector3.Vec3, Math.Vector3.Vec3 )"
          },
          {
            "name": "subdivide",
            "comment": " Divide each triangle into four triangles.\n\nThe subdivision is performed `n` times.\n",
            "type": "Int -> List ( Math.Vector3.Vec3, Math.Vector3.Vec3, Math.Vector3.Vec3 ) -> List ( Math.Vector3.Vec3, Math.Vector3.Vec3, Math.Vector3.Vec3 )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "avh4/elm-transducers",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Transducer.Debug",
        "comment": " This module provides support for debugging transducers.\n\n# Logging\n@docs debug\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "debug",
            "comment": " Wrap an existing transducer such that input and output of the transducer\nwill be logged with `Debug.log`.\n\n    filter' pred = debug \"filter\" (filter pred)\n    main = show (transduceList (filter' ((/=) 2)) [1, 2, 3])\n    -- Console output:\n    --     filter: input: 3\n    --     filter: state: ()\n    --     filter -> : 3\n    --     filter: input: 2\n    --     filter: state: ()\n    --     filter: input: 1\n    --     filter: state: ()\n    --     filter -> : 1\n    --     filter: complete: ()\n",
            "type": "String -> Transducer.Transducer a b r s -> Transducer.Transducer a b r s"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Transducer",
        "comment": " A transducer is a composable way of processing a series of values.\nMany basic transducers correspond to functions you may be familiar with for\nprocessing `List`s.\n\n    import Maybe\n    import String\n    import Transducer exposing (..)\n\n    parseValidInts =\n        map String.toInt\n        >>> map toMaybe\n        >>> filter ((/=) Nothing)\n        >>> map (Maybe.withDefault 0)\n\n    exampleList : List Int\n    exampleList = transduceList parseValidInts [\"123\", \"-34\", \"35.0\", \"SDF\", \"7\"]\n\n# Definitions\n@docs Reducer, Transducer, Fold\n\n# Common transducers\n@docs map, filter, take, drop\n\n# More transducers\n@docs concatMap, dedupe, partition\n\n# Composing transducers\n@docs (>>>), comp\n\n# Applying transducers\n@docs transduce, transduceList, transduceSet, transduceArray\n",
        "aliases": [
          {
            "name": "Fold",
            "comment": " A fold is function that takes a Reducer, an initial value, and input source,\nand returns a final value.\n",
            "args": [
              "input",
              "result",
              "source"
            ],
            "type": "Transducer.Reducer input result -> result -> source -> result"
          },
          {
            "name": "Reducer",
            "comment": " A reducer is a function taking an input and a value and produces a new value.\n\n    List.foldl : Reducer a b -> b -> List a -> b\n",
            "args": [
              "input",
              "result"
            ],
            "type": "input -> result -> result"
          },
          {
            "name": "Transducer",
            "comment": " A transducer an `init` value for it's internal state, a `step` function that\ntransforms a Reducer into a Reducer of a new type, and a `complete` function that\ntransforms a Reducer into a function collapsing the internal state.\n\nWhen defining transducers, the type parameter `r` should be left free.\n",
            "args": [
              "a",
              "b",
              "r",
              "state"
            ],
            "type": "{ init : Transducer.Reducer b r -> r -> ( state, r ) , step : Transducer.Reducer b r -> Transducer.Reducer a ( state, r ) , complete : Transducer.Reducer b r -> ( state, r ) -> r }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ">>>",
            "comment": " Transducer composition\n",
            "type": "Transducer.Transducer a b ( s2, r ) s1 -> Transducer.Transducer b c r s2 -> Transducer.Transducer a c r ( s1, s2 )"
          },
          {
            "name": "comp",
            "comment": " An alias for (>>>).\n",
            "type": "Transducer.Transducer a b ( s2, r ) s1 -> Transducer.Transducer b c r s2 -> Transducer.Transducer a c r ( s1, s2 )"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a list and flatten the results.\n\n    transduceList (concatMap (\\x -> [x,x+10])) [1,2] == [1,10,2,20]\n",
            "type": "(a -> List b) -> Transducer.Transducer a b r ()"
          },
          {
            "name": "dedupe",
            "comment": " Drop values that repeat the previous value.\n\n    transduceList dedupe [1,1,2,2,1] == [1,2,1]\n",
            "type": "Transducer.Transducer a a r (Maybe.Maybe a)"
          },
          {
            "name": "drop",
            "comment": " Drop the first *n* values.\n\n    transduceList (drop 2) [1,2,3,4] == [3,4]\n",
            "type": "Int -> Transducer.Transducer a a r Int"
          },
          {
            "name": "filter",
            "comment": " Keep only values that satisfy the predicate.\n\n    transduceList (filter isEven) [1..6] == [2,4,6]\n",
            "type": "(a -> Bool) -> Transducer.Transducer a a r ()"
          },
          {
            "name": "map",
            "comment": " Apply a function to every value.\n\n    transduceList (map sqrt) [1,4,9] == [1,2,3]\n",
            "type": "(a -> b) -> Transducer.Transducer a b r ()"
          },
          {
            "name": "partition",
            "comment": " Group a series of values into Lists of size n.\n\n    transduceList (partition 2) [1,2,3,4,5] == [[1,2],[3,4],[5]]\n",
            "type": "Int -> Transducer.Transducer a (List a) r ( Int, List a )"
          },
          {
            "name": "take",
            "comment": " Take the first *n* values.\n\n    transduceList (take 2) [1,2,3,4] == [1,2]\n",
            "type": "Int -> Transducer.Transducer a a r Int"
          },
          {
            "name": "transduce",
            "comment": " Apply a transducer.\n",
            "type": "Transducer.Fold a ( s, r ) x -> Transducer.Reducer b r -> r -> Transducer.Transducer a b r s -> x -> r"
          },
          {
            "name": "transduceArray",
            "comment": " Apply a Transducer to an Array, producing an Array.\n\n    transduceArray t xs = transduce Array.foldl Array.push Array.empty t xs\n",
            "type": "Transducer.Transducer a b (Array.Array b) s -> Array.Array a -> Array.Array b"
          },
          {
            "name": "transduceList",
            "comment": " Apply a Transducer to a List, producing a List.\n\n    transduceList t xs == transduce List.foldr (::) [] t xs\n",
            "type": "Transducer.Transducer a b (List b) s -> List a -> List b"
          },
          {
            "name": "transduceSet",
            "comment": " Apply a Transducer to a Set, producing a Set.\n\n    transduceSet t xs = transduce Set.foldr Set.insert Set.empty t xs\n",
            "type": "Transducer.Transducer comparable comparable_ (Set.Set comparable__) s -> Set.Set comparable -> Set.Set comparable__"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "benansell/elm-geometric-transformation",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Transformer2D",
        "comment": " A library for manipulating points by applying geometric transformations\nusing homogeneous coordinates which can be useful in\n[`2D computer graphics`](https://en.wikipedia.org/wiki/2D_computer_graphics)\n\nMore complicated transforms can be created by using combine - as illustrated\nin the [elm-webpack-seed](https://github.com/benansell/elm-webpack-seed) project.\n\n# Working with Points\n@docs Point, toPoint, fromPoint\n\n# Creating Transformations\n@docs Transformation, identity, rotate, scale, scaleUniform, shear, translate\n\n# Applying and Combining Transformations\n@docs apply, combine\n\n# Misc\n@docs RotateDirection, ShearDirection\n\n\n",
        "aliases": [
          {
            "name": "Point",
            "comment": " Representation of a 2D point by its position\n",
            "args": [],
            "type": "{ x : Float, y : Float }"
          },
          {
            "name": "Transformation",
            "comment": " Representation of the 2D matrix used to transform points (x,y) in the view\nplane:\n\n    | x' |   | a  b  tx |   | x |\n    | y' | = | c  d  ty | * | y |\n    | 1  |   | 0  0  1  |   | 1 |\n\n",
            "args": [],
            "type": "{ a : Float , b : Float , c : Float , d : Float , tx : Float , ty : Float }"
          }
        ],
        "types": [
          {
            "name": "RotateDirection",
            "comment": " Direction of rotation\n",
            "args": [],
            "cases": [
              [
                "AntiClockwise",
                []
              ],
              [
                "Clockwise",
                []
              ]
            ]
          },
          {
            "name": "ShearDirection",
            "comment": " Direction of shearing\n",
            "args": [],
            "cases": [
              [
                "Horizontal",
                []
              ],
              [
                "Vertical",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "apply",
            "comment": " Apply the transformation to a point.\n",
            "type": "Transformer2D.Transformation -> Transformer2D.Point -> Transformer2D.Point"
          },
          {
            "name": "combine",
            "comment": " Combine ([compose](https://en.wikipedia.org/wiki/Transformation_matrix#Composing_and_inverting_transformations)) two transformations:\n\n    complexShapeMovement : ( Float, Float ) -> Float -> List Point -> List Point\n    complexShapeMovement offset angle points =\n        let\n            transform =\n                combine (translate offset) (rotate Clockwise angle)\n                    |> apply\n        in\n            List.map transform points\n\n",
            "type": "Transformer2D.Transformation -> Transformer2D.Transformation -> Transformer2D.Transformation"
          },
          {
            "name": "fromPoint",
            "comment": " Converts a point to a x,y coordinate tuple\n",
            "type": "Transformer2D.Point -> ( Float, Float )"
          },
          {
            "name": "identity",
            "comment": " Creates an identity transformation for the point. This is\noften used to create an initial transform that creates a local origin for a set\nof points that allows them to be transformed relative to the local origin.\n",
            "type": "Transformer2D.Point -> Transformer2D.Transformation"
          },
          {
            "name": "rotate",
            "comment": " Creates a transformation that will rotate each point around the origin\nby the specified direction and angle:\n\n    rotateShape : Float -> List Point -> List Point\n    rotateShape angle points =\n        let\n            transform =\n                rotate Clockwise angle\n                    |> apply\n        in\n            List.map transform points\n\n",
            "type": "Transformer2D.RotateDirection -> Float -> Transformer2D.Transformation"
          },
          {
            "name": "scale",
            "comment": " Creates a transformation that will scale each point x value by the width and\ny value by the height relative to the origin:\n\n    scaleShape : Float -> Float -> List Point -> List Point\n    scaleShape width height points =\n        let\n            transform =\n                scale width height\n                    |> apply\n        in\n            List.map transform points\n\n",
            "type": "Float -> Float -> Transformer2D.Transformation"
          },
          {
            "name": "scaleUniform",
            "comment": " Creates a transformation that will scale each point by a factor k relative\nto the origin\n",
            "type": "Float -> Transformer2D.Transformation"
          },
          {
            "name": "shear",
            "comment": " Creates a transformation that will shear each point in the given direction\nby a factor of k relative to the origin\n",
            "type": "Transformer2D.ShearDirection -> Float -> Transformer2D.Transformation"
          },
          {
            "name": "toPoint",
            "comment": " Converts a tuple of x,y coordinate values to a point\n",
            "type": "( Float, Float ) -> Transformer2D.Point"
          },
          {
            "name": "translate",
            "comment": " Creates a transformation that will move each point\nby the tx ty offset amounts\n",
            "type": "( Float, Float ) -> Transformer2D.Transformation"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "benansell/lobo-elm-test-extra",
    "version": "1.0.1",
    "docs": [
      {
        "name": "ElmTest.Extra",
        "comment": " Additions to [elm-test](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\nfor use with the [lobo](https://www.npmjs.com/package/lobo) test runner.\n\n    skippedTest : Test\n    skippedTest =\n        skip \"ignore test\" <|\n            test \"skippedTest\" <|\n                \\() ->\n                    Expect.fail \"Never runs\"\n\n\n    focusTest : Test\n    focusTest =\n        focus <|\n            test \"Example passing test\" <|\n                \\() ->\n                    Expect.pass\n\n## Migration from elm-test\nTo use this package you will need to use lobo with the \"elm-test-extra\"\nframework, and replace:\n\n    import Test\n\nwith\n\n    import ElmTest.Extra\n\nFurther information on using lobo can be found [here](https://www.npmjs.com/package/lobo)\n\nThe following elm-test functions are not available in elm-test-extra:\n* concat -> instead use `describe`\n* filter -> instead use `skip`\n\n## Extra\n\n@docs focus, skip\n\n## elm-test\n\nlobo compatible declarations of the elm-test Test API. In the first instance\nplease see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n\n@docs Test, test\n\n### Organizing Tests\n\n@docs describe\n\n### Fuzz Testing\n\n@docs fuzz, fuzz2, fuzz3, fuzz4, fuzz5, fuzzWith\n\n",
        "aliases": [
          {
            "name": "Test",
            "comment": " A test which has yet to be evaluated.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "args": [],
            "type": "ElmTest.Runner.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "describe",
            "comment": " Group a set of tests with a description.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "String -> List ElmTest.Extra.Test -> ElmTest.Extra.Test"
          },
          {
            "name": "focus",
            "comment": " Restrict the running of tests to only those that have `focus`:\nunfocused tests.\n\n    focusTest : Test\n    focusTest =\n        focus <|\n            test \"Example passing test\" <|\n                \\() ->\n                    Expect.pass\n\nThis will cause the lobo runner to ignore all other tests that don't have focus\napplied. focus can be applied to the following:\n* test\n* describe\n* fuzz, fuzzWith, fuzz2, fuzz3, fuzz4, fuzz5\n\nFocus cannot be used to force a skipped test to run.\n",
            "type": "ElmTest.Extra.Test -> ElmTest.Extra.Test"
          },
          {
            "name": "fuzz",
            "comment": " Run a test with random input provided by the fuzzer.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> ElmTest.Extra.Test"
          },
          {
            "name": "fuzz2",
            "comment": " Run a test with 2 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> String -> (a -> b -> Expect.Expectation) -> ElmTest.Extra.Test"
          },
          {
            "name": "fuzz3",
            "comment": " Run a test with 3 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> String -> (a -> b -> c -> Expect.Expectation) -> ElmTest.Extra.Test"
          },
          {
            "name": "fuzz4",
            "comment": " Run a test with 4 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> String -> (a -> b -> c -> d -> Expect.Expectation) -> ElmTest.Extra.Test"
          },
          {
            "name": "fuzz5",
            "comment": " Run a test with 5 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> Fuzz.Fuzzer e -> String -> (a -> b -> c -> d -> e -> Expect.Expectation) -> ElmTest.Extra.Test"
          },
          {
            "name": "fuzzWith",
            "comment": " Run a test with random input provide by a fuzzer using the supplied options.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "Test.FuzzOptions -> Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> ElmTest.Extra.Test"
          },
          {
            "name": "skip",
            "comment": " Prevent the running of tests with a reason for them to be skipped.\n\n    skippedTest : Test\n    skippedTest =\n        skip \"ignore test\" <|\n            test \"skippedTest\" <|\n                \\() ->\n                    Expect.fail \"Never runs\"\n\nThis will cause the lobo runner to skip this test. skip can be applied to the\nfollowing:\n* test\n* describe, concat\n* fuzz, fuzzWith, fuzz2, fuzz3, fuzz4, fuzz5\n\n",
            "type": "String -> ElmTest.Extra.Test -> ElmTest.Extra.Test"
          },
          {
            "name": "test",
            "comment": " A test that evaluates an expectation.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
            "type": "String -> (() -> Expect.Expectation) -> ElmTest.Extra.Test"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "ElmTest.Runner",
        "comment": " Declarations required by lobo. Generally only of interest when\nextending lobo.\n\n@docs Test\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Test",
            "comment": " Hierarchical representation of Tests\n",
            "args": [],
            "cases": [
              [
                "Test",
                [
                  "Test.Test"
                ]
              ],
              [
                "Labeled",
                [
                  "String",
                  "ElmTest.Runner.Test"
                ]
              ],
              [
                "Batch",
                [
                  "List ElmTest.Runner.Test"
                ]
              ],
              [
                "Skipped",
                [
                  "String",
                  "ElmTest.Runner.Test"
                ]
              ],
              [
                "Focus",
                [
                  "ElmTest.Runner.Test"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "billstclair/elm-bitwise-infix",
    "version": "1.0.2",
    "docs": [
      {
        "name": "BitwiseInfix",
        "comment": " This module provides infix versions of Elm's Bitwise module functions.\nThis greatly eases conversion of existing JavaScript code.\nIntead of changing infix to prefix, just prepend a twiddle (~)\nto the operators.\n\n```Bitwise.not``` has no infix operator, since Elm doesn't provide\nsingle argument \"infix\" operators. So I named it\n```BitwiseInfix.lognot```, in honor of its Common Lisp name.\n\nIt is intended to be imported exposing (..), so that the operators can\nappear unadorned in your code.\n\nAll the operators are left associative.\n\nI mirrored the JavaScript precedences, putting the shift operators at\nlower precedence than arithmetic, but higher than comparison, and the\nothers lower than comparison.\n\n```(~<<)```, ```(~>>)```, and ```(~>>>)``` have a precedence of 5.<br/>\n```(~&)``` has a precedence of 3.<br/>\n```(~^)``` has a precedence of 2.<br/>\n```(~|)``` has a precedence of 1.\n\nExamples:\n\n```\nimport BitwiseInfix exposing (..)\n\n3 ~& 1 ~| 4 ~& 12     -- 5\n3 ~& (1 ~| 4) ~& 12   -- 0\n2 ~<< 1 ~| 2          -- 6\n2 ~<< (1 ~| 2)        -- 16\n1 ~| 2 ~^ 2 ~| 1      -- 1\n(1 ~| 2) ~^ (2 ~| 1)  -- 0\n3 ~& 1 ~^ 4 ~& 12     -- 5\n3 ~& (1 ~^ 4) ~& 12   -- 0\n9 ~>> 1 ~<< 1         -- 8\n9 ~>> (1 ~<< 1)       -- 2\n```\n\n# Functions\n@docs (~&), (~|), (~^), lognot, (~<<), (~>>), (~>>>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lognot",
            "comment": " Alias for Bitwise.not.\nElm does not provide \"infix\" operators with only a single argument.\nThis name let's you import BitwiseInfix exposing (..), without\nworrying about name collisions.\n",
            "type": "Int -> Int"
          },
          {
            "name": "~&",
            "comment": " Infix for Bitwise.and\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 3
          },
          {
            "name": "~<<",
            "comment": " Infix for Bitwise.shiftLeftBy\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 5
          },
          {
            "name": "~>>",
            "comment": " Infix for Bitwise.shiftRightBy\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 5
          },
          {
            "name": "~>>>",
            "comment": " Infix for Bitwise.shiftRightLogical\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 5
          },
          {
            "name": "~^",
            "comment": " Infix for Bitwise.xor\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": "~|",
            "comment": " Infix for Bitwise.or\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 1
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "billstclair/elm-dynamodb",
    "version": "1.0.2",
    "docs": [
      {
        "name": "DynamoBackend",
        "comment": " This module provides an Elm backend to Amazon's DynamoDB.\n\nBy itself, in pure Elm, you can only access a simulation of the Dynamo\ndatabase, with key/value pairs that persist only for the current\nsession. The README for the GitHub archive tells how to hook up the\nJavaScript via ports to your application, and how to configure\nDynamoDB via Amazon's Web Services console for use with\n`DynamoBackend`.\n\nThere is a simple example that clearly illustrates the difference\nbetween the pure-Elm simulator and the real Amazon backend.\n\n`DynamoBackend` targets a single DynamoDB table with three\nattributes. It enables use of that table by multiple Amazon accounts,\nwith each account's data insulated from the others. It also allows\nmultiple different applications to store their data in that one\nbackend table, without interference.\n\nThe data store is a simple key/value store, mapping a string key to\nstring data. I expect that one common use will be to JSON encode\nstate, and store it by key. I built it to do that for my application.\n\nThe one drawback of Amazon's authentication mechanism that I was not\nable to work around is that a login session lasts only one hour. Each\nhour, your users will have to click on the \"OK\" button in the login\ndialog, to renew the session. I consider this to be a bug on Amazon's\npart.\n\n# Classes\n@docs Profile, Properties, StringDict, DynamoServerInfo, ResultDispatcher\n@docs Database, SimDb, DynamoDb\n@docs ErrorType, Error\n\n# Functions\n@docs formatError, getProp, setProp, removeProp, removeProps, mergeProps\n@docs makeDynamoDb, makeSimulatedDb, isRealDatabase, makeMsgCmd\n@docs installLoginScript, login, retry, put, remove, get, scan, logout\n@docs partialLogout, update\n\n",
        "aliases": [
          {
            "name": "DynamoDb",
            "comment": " Properties for a real `Dynamo` backend `Database`.\n\n`serverInfo` - The ServerInfo record sent in as the startup \"flags\" from\nthe JavaScript.\n\n`getProperties` - Your Model must contain a `Properties` list that the\n`DynamoBackend` code can use to store state. This function extracts that\nlist from your `Model`.\n\n`setProperties` - Set the `Properties` list in your `Model`.\n\n`backendPort` - your outgoing backend `port` to the JavaScript code.\n\n`backendMsg` - Create a message as if it came from the incoming backend\nport to the JavaScript code.\n\n`dispatcher` - The record of functions to call for return data from the\nbackend JavaScript.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "{ serverInfo : DynamoBackend.DynamoServerInfo , getProperties : model -> DynamoBackend.Properties , setProperties : DynamoBackend.Properties -> model -> model , backendPort : DynamoBackend.Properties -> Platform.Cmd.Cmd msg , backendMsg : DynamoBackend.Properties -> msg , dispatcher : DynamoBackend.ResultDispatcher model msg }"
          },
          {
            "name": "DynamoServerInfo",
            "comment": " This record is sent to Elm as the \"flags\" argument from the\nstartup code. It is stored internally by the JavaScript backend code,\nand isn't used by any of the Elm code, except that you store it in\nyour Dynamo database. Can be useful for debugging (though I'm tempted\nto leave it solely in the JavaScript code).\n\nThe properties are setup in Amazon's AWS Console for DynamoDB, and are\nstored in a JavaScript file that you create.\n\nThis is not secret information. It simply identifies your application\nand the table you use to store your key/value pairs.\n",
            "args": [],
            "type": "{ clientId : String , tableName : String , appName : String , roleArn : String , providerId : String , awsRegion : String }"
          },
          {
            "name": "Error",
            "comment": " DynamoBackend.update returns errors in an `Error` record.\n",
            "args": [],
            "type": "{ errorType : DynamoBackend.ErrorType, message : String }"
          },
          {
            "name": "Profile",
            "comment": " The application-level result of a successful login\n",
            "args": [],
            "type": "{ email : String, name : String, userId : String }"
          },
          {
            "name": "Properties",
            "comment": " The communication through the ports to the backend JavaScript\nhappens with `Properties` lists, lists of string pairs.\n",
            "args": [],
            "type": "List ( String, String )"
          },
          {
            "name": "ResultDispatcher",
            "comment": " When results return from the backend, they are passed to one of\nthese functions that you provide.\n\n`DynamoBackend.login` gives results to the `ResultDispatcher.login`\nfunction.\n\n`DynamoBackend.get` gives results to the `ResultDispatcher.get`\nfunction.\n\n`DynamoBackend.put` and `DynamoBackend.remove` give results to the\n`ResultDispatcher.put` function.\n\n`DynamoBackend.scan` gives results to the `ResultDispatcher.scan`\nfunction.\n\n`DynamoBackend.logout` results to the `ResultDispatcher.logout`\nfunction.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "{ login : DynamoBackend.Profile -> DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg ) , get : String -> Maybe.Maybe String -> DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg ) , put : String -> Maybe.Maybe String -> DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg ) , scan : List String -> List String -> DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg ) , logout : DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg ) }"
          },
          {
            "name": "SimDb",
            "comment": " Properties for a simulated backend `Database`.\n\n`profile` - A fake login `Profile`.\n\n`getDict` - Return from your `Model` an Elm `Dict` in which the\nsimulator can store its key/value pairs.\n\n`setDict` - Set the dictionary in your `Model`.\n\n`simulatedPort` - This simulates the return port from the real\nbackend. `DynamoBackend.makeMsgCmd` is often useful for turning one of\nyour messages into a `Cmd`.\n\n`dispatcher` - The `ResultDispatcher` that will handle the values returned\nthrough the `simulatedPort`.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "{ profile : DynamoBackend.Profile , getDict : model -> DynamoBackend.StringDict , setDict : DynamoBackend.StringDict -> model -> model , simulatedPort : DynamoBackend.Properties -> Platform.Cmd.Cmd msg , dispatcher : DynamoBackend.ResultDispatcher model msg }"
          },
          {
            "name": "StringDict",
            "comment": " An Elm `Dict` mapping `String` keys to `String` values.\n\nYou need to provide one of these in your Model for the simulated\nbackend.\n",
            "args": [],
            "type": "Dict.Dict String String"
          }
        ],
        "types": [
          {
            "name": "Database",
            "comment": " The generic type for a `Simulated` or `Dynamo` database\n",
            "args": [
              "model",
              "msg"
            ],
            "cases": []
          },
          {
            "name": "ErrorType",
            "comment": " Errors that can be returned in the errorType property of an Error\nrecord.\n\n`AccessExpired` - Happens when your Amazon login session expires. Your\napplication needs to call `DynamoBackend.login` again to establish a new\nsession.\n\n`FetchProfileError` - denotes a problem in turning an access token into a\nprofile.\n\n`AccessTokenError` - Either Amazon didn't return the state arg when\nlogging in, or a cross-site forgery made the state sent not match the\nstate received.\n\n`InternalError` - denotes a bug in the `DynamoBackend` code. Shouldn't\nhappen.\n\n`ReturnedProfileError` - Means that Amazon's return for profile lookup\nwas missing the email, name, or userId.\n\n`AwsError` - An error was returned by the Amazon AWS JavaScript\nlibrary. Usually denotes a network problem.\n\n`Other` - Shouldn't happen. Means that that the backend code neglected\nto tag an error with an \"errorType\".\n\n",
            "args": [],
            "cases": [
              [
                "FetchProfileError",
                []
              ],
              [
                "AccessTokenError",
                []
              ],
              [
                "InternalError",
                []
              ],
              [
                "ReturnedProfileError",
                []
              ],
              [
                "AccessExpired",
                [
                  "DynamoBackend.Properties"
                ]
              ],
              [
                "AwsError",
                [
                  "String",
                  "String",
                  "Bool"
                ]
              ],
              [
                "Other",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "formatError",
            "comment": " Format an `Error` record as a string\n",
            "type": "DynamoBackend.Error -> String"
          },
          {
            "name": "get",
            "comment": " Call this to get the value for a key from the database.\nThe `userId` comes from the `Profile` record.\n\n`get userId key database`\n",
            "type": "String -> String -> DynamoBackend.Database model msg -> model -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "getProp",
            "comment": " Lookup a key in a `Properties` list. Return `Nothing` if its not\nthere, or `Just value` if it is.\n",
            "type": "String -> DynamoBackend.Properties -> Maybe.Maybe String"
          },
          {
            "name": "installLoginScript",
            "comment": " The Amazon login code attaches a script to the `<div>` with an id of\n`\"amazon-root\"`. Your view code needs to create that `<div>`. Call this\nwhen your application starts to attach the login script. It will\nauto-login if a recent session in the same browser has not yet\nexpired.\n",
            "type": "DynamoBackend.Database model msg -> model -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "isRealDatabase",
            "comment": " Return `True` if the argument is a real datbase (the result of\ncalling `makeDynamoDb`) or `False` if it is simulated (from\n`makeSimulatedDb`).\n",
            "type": "DynamoBackend.Database model msg -> Bool"
          },
          {
            "name": "login",
            "comment": " Call this when the user clicks on your \"login\" button, or\nwhen you get an `AccessExpired` error.\n",
            "type": "DynamoBackend.Database model msg -> model -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "logout",
            "comment": " Call this to logout from Amazon.\nClears all state the could be used to create a session.\n",
            "type": "DynamoBackend.Database model msg -> model -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "makeDynamoDb",
            "comment": " Create a real `Dynamo` backend `Database`.\n\nThe arguments become the properties of the returned (wrapped) `DynamoDb` record.\n",
            "type": "DynamoBackend.DynamoServerInfo -> (model -> DynamoBackend.Properties) -> (DynamoBackend.Properties -> model -> model) -> (DynamoBackend.Properties -> Platform.Cmd.Cmd msg) -> (DynamoBackend.Properties -> msg) -> DynamoBackend.ResultDispatcher model msg -> DynamoBackend.Database model msg"
          },
          {
            "name": "makeMsgCmd",
            "comment": " Wrap a message as a `Cmd`.\n",
            "type": "msg -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "makeSimulatedDb",
            "comment": " Create a simulated backend `Database`.\n\nThe arguments become the properties of the returned (wrapped) `SimDb` record.\n",
            "type": "DynamoBackend.Profile -> (model -> DynamoBackend.StringDict) -> (DynamoBackend.StringDict -> model -> model) -> (DynamoBackend.Properties -> Platform.Cmd.Cmd msg) -> DynamoBackend.ResultDispatcher model msg -> DynamoBackend.Database model msg"
          },
          {
            "name": "mergeProps",
            "comment": " Merge two `Properties` lists.\n\nIf both contain a value for the same key, use the value from the first\nlist (`from`).\n\n`mergeProps from to`\n",
            "type": "DynamoBackend.Properties -> DynamoBackend.Properties -> DynamoBackend.Properties"
          },
          {
            "name": "partialLogout",
            "comment": " For testing. Invalidates the saved access tokens\n",
            "type": "DynamoBackend.Database model msg -> model -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "put",
            "comment": " Call this to store a key/value pair in the database.\nThe `userId` comes from the `Profile` record.\n\n`put userId key value database`\n",
            "type": "String -> String -> String -> DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "remove",
            "comment": " Call this to remove a key/value pair from the database.\nThe `userId` comes from the `Profile` record.\n\n`remove userId key database`\n",
            "type": "String -> String -> DynamoBackend.Database model msg -> model -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "removeProp",
            "comment": " Remove the property for a key from a `Properties` list.\n",
            "type": "String -> DynamoBackend.Properties -> DynamoBackend.Properties"
          },
          {
            "name": "removeProps",
            "comment": " Remove a list of keys from a `Properties` list.\n",
            "type": "List String -> DynamoBackend.Properties -> DynamoBackend.Properties"
          },
          {
            "name": "retry",
            "comment": " Call this to retry an operation that got an AccessExpired error\n",
            "type": "DynamoBackend.Database model msg -> DynamoBackend.Properties -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "scan",
            "comment": " Call this to scan the database for all keys. If `fetchValues` is\n`True`, will also return values.\n\nThe `userId` comes from the `Profile` record.\n\n`scan fetchValues userId database`\n",
            "type": "Bool -> String -> DynamoBackend.Database model msg -> model -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "setProp",
            "comment": " Set the value for a key to a value in a `Properties` list.\n\n`setProp key value properties`\n",
            "type": "String -> String -> DynamoBackend.Properties -> DynamoBackend.Properties"
          },
          {
            "name": "update",
            "comment": " This handles the `Properties` that are sent back from the backend\nJavaScript (real or simulated). Your application needs to map that\ncommand to a message, and handle that message by calling\n`DynamoBackend.update`, and then process the resulting `Err` or `Ok`\nvalue. Before returning, it will usually call one of the functions in\nthe database's `ResultSetDispatcher`.\n",
            "type": "DynamoBackend.Properties -> DynamoBackend.Database model msg -> model -> Result.Result DynamoBackend.Error ( model, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "billstclair/elm-versioned-json",
    "version": "1.0.2",
    "docs": [
      {
        "name": "VersionedJson",
        "comment": " A couple of functions to ease versioning of your JSON representations.\n\nSee the README for the [examples](https://github.com/billstclair/elm-versioned-json/tree/master/examples) directory for details.\n\n# Classes\n@docs ConverterDict\n\n# Functions\n@docs encodeVersionedJson, decodeVersionedJson\n",
        "aliases": [
          {
            "name": "ConverterDict",
            "comment": " An Elm Dict mapping version numbers to decoder functions\n",
            "args": [
              "x"
            ],
            "type": "Dict.Dict Int (String -> Result.Result String x)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "decodeVersionedJson",
            "comment": " Decode a string saved by `encodeVersionedJson` with the relavant converter function\nfrom a dictionary you provide.\n\nIf the string is not as encoded by `encodeVersionedJson`, use the converter function\nfor version 0.\n",
            "type": "String -> VersionedJson.ConverterDict x -> Result.Result String x"
          },
          {
            "name": "encodeVersionedJson",
            "comment": " Convert a value to a versioned Json string\n",
            "type": "Int -> x -> (x -> String) -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "bloom/elm-return",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Return",
        "comment": "\n## Type\nModeling the `update` tuple as a Monad similar to `Writer`\n@docs Return, ReturnF\n\n## Mapping\n@docs map, map2, map3, map4, map5, andMap, mapWith, mapCmd, mapBoth, dropCmd\n\n## Piping\n@docs piper, pipel, zero\n\n## Basics\n@docs singleton, andThen, (>>>), (<<<)\n\n## Write `Cmd`s\n@docs return, command, effect_\n\n## Fancy non-sense\n@docs sequence, flatten\n",
        "aliases": [
          {
            "name": "Return",
            "comment": " ",
            "args": [
              "msg",
              "model"
            ],
            "type": "( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "ReturnF",
            "comment": " ",
            "args": [
              "msg",
              "model"
            ],
            "type": "Return.Return msg model -> Return.Return msg model"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "<<<",
            "comment": "\n\nGo point free with `andThen` chaining. Looking at the example from `andThen`\n\n```elm\nresulting : Return msg { model | bar : Int }\nresulting = myReturn\n    |> andThen foo\n    |> andThen foo\n    |> andThen foo\n```\n\nthis code roughly becomes:\n\n```elm\ndoFoo3Times : { model | bar : Int } -> Return msg { model | bar : Int }\ndoFoo3Times =\n  foo >>> foo >>> foo\n```\n",
            "type": "(b -> Return.Return msg c) -> (a -> Return.Return msg b) -> a -> Return.Return msg c"
          },
          {
            "name": ">>>",
            "comment": " ",
            "type": "(a -> Return.Return msg b) -> (b -> Return.Return msg c) -> a -> Return.Return msg c"
          },
          {
            "name": "andMap",
            "comment": "\nMap an `Return` into a `Return` containing a `Model` function\n",
            "type": "Return.Return msg (a -> b) -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "andThen",
            "comment": "\nChain together expressions from `Model` to `Return`.\n\n```elm\n-- arbitrary function to demonstrate\nfoo : Model -> Return Msg Model\nfoo ({bar} as model) =\n  -- forking logic\n  if bar < 10\n  -- that side effects may be added\n  then (model, getAjaxThing)\n  -- that the model may be updated\n  else ({model | bar = model.bar - 2 }, Cmd.none)\n```\n\nThey are now chainable with `andThen`...\n\n```elm\nresulting : Return msg { model | bar : Int }\nresulting = myReturn\n    |> andThen foo\n    |> andThen foo\n    |> andThen foo\n```\n\nHere we changed up `foo` three times, but we can use any function of\ntype `(a -> Return msg b)`.\n\nCommands will be accumulated automatically as is the case with all\nfunctions in this library.\n",
            "type": "(a -> Return.Return msg b) -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "command",
            "comment": "\nAdd a `Cmd` to a `Return`, the `Model` is uneffected\n",
            "type": "Platform.Cmd.Cmd msg -> Return.ReturnF msg model"
          },
          {
            "name": "dropCmd",
            "comment": "\nDrop the current `Cmd` and replace with an empty thunk\n",
            "type": "Return.ReturnF msg model"
          },
          {
            "name": "effect_",
            "comment": "\nAdd a `Cmd` to a `Return` based on its `Model`, the `Model` will not be effected\n",
            "type": "Respond.Respond msg model -> Return.ReturnF msg model"
          },
          {
            "name": "flatten",
            "comment": " ",
            "type": "Return.Return msg (Return.Return msg model) -> Return.Return msg model"
          },
          {
            "name": "map",
            "comment": "\nTransform the `Model` the `Cmd` will be left untouched\n",
            "type": "(a -> b) -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "map2",
            "comment": "\nCombine 2 `Return`s with a function\n\n```elm\nmap2\n  (\\modelA modelB -> { modelA | foo = modelB.foo })\n  retA\n  retB\n```\n",
            "type": "(a -> b -> c) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> d) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c -> Return.Return msg d"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c -> Return.Return msg d -> Return.Return msg e"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c -> Return.Return msg d -> Return.Return msg e -> Return.Return msg f"
          },
          {
            "name": "mapBoth",
            "comment": "\nMap over both the model and the msg type of the `Return`.\nThis is useful for easily embedding a `Return` in a Union Type.\nFor example\n\n```elm\nimport Foo\n\ntype Msg = Foo Foo.Msg\ntype Model = FooModel Foo.Model\n\n...\n\nupdate : Msg -> Model -> Return Msg Model\nupdate msg model =\n   case msg of\n     Foo foo -> Foo.update foo model.foo\n      |> mapBoth Foo FooModel\n```\n",
            "type": "(a -> b) -> (c -> d) -> Return.Return a c -> Return.Return b d"
          },
          {
            "name": "mapCmd",
            "comment": "\nMap on the `Cmd`.\n",
            "type": "(a -> b) -> Return.Return a model -> Return.Return b model"
          },
          {
            "name": "mapWith",
            "comment": "\nTransform the `Model` of and add a new `Cmd` to the queue\n",
            "type": "(a -> b) -> Platform.Cmd.Cmd msg -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "pipel",
            "comment": " ",
            "type": "List (Return.ReturnF msg model) -> Return.ReturnF msg model"
          },
          {
            "name": "piper",
            "comment": " ",
            "type": "List (Return.ReturnF msg model) -> Return.ReturnF msg model"
          },
          {
            "name": "return",
            "comment": "\nConstruct a new `Return` from parts\n",
            "type": "model -> Platform.Cmd.Cmd msg -> Return.Return msg model"
          },
          {
            "name": "sequence",
            "comment": " ",
            "type": "List (Return.Return msg model) -> Return.Return msg (List model)"
          },
          {
            "name": "singleton",
            "comment": "\nCreate a `Return` from a given `Model`\n",
            "type": "model -> Return.Return msg model"
          },
          {
            "name": "zero",
            "comment": " ",
            "type": "Return.ReturnF msg model"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Respond",
        "comment": "\n@docs Respond, append, sum, zero, comap\n",
        "aliases": [
          {
            "name": "Respond",
            "comment": "\nA function from a model to a Cmd.\nBasically there are times where you want to\nhave a side effect on the world if the model\nhas a certain shape. `Respond` facilitates\nthis use case.\n",
            "args": [
              "msg",
              "a"
            ],
            "type": "a -> Platform.Cmd.Cmd msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "append",
            "comment": " ",
            "type": "Respond.Respond msg a -> Respond.Respond msg a -> Respond.Respond msg a"
          },
          {
            "name": "comap",
            "comment": "\nAdd a function to the front\n`b -> a >> a -> Cmd msg`\n",
            "type": "(b -> a) -> Respond.Respond msg a -> Respond.Respond msg b"
          },
          {
            "name": "sum",
            "comment": " ",
            "type": "List (Respond.Respond msg a) -> Respond.Respond msg a"
          },
          {
            "name": "zero",
            "comment": " ",
            "type": "Respond.Respond msg a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "bloom/remotedata",
    "version": "1.0.1",
    "docs": [
      {
        "name": "RemoteData",
        "comment": " A datatype representing fetched data.\n\nIf you find yourself continually using `Maybe (Result Error a)` to\nrepresent loaded data, or you have a habit of shuffling errors away to\nwhere they can be quietly ignored, consider using this. It makes it\neasier to represent the real state of a remote data fetch and handle\nit properly.\n\n\nFor more on the motivation, take a look at the blog post [How Elm Slays A UI Antipattern](http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html).\n\n\nTo use the datatype, let's look at an example that loads `News` from a feed.\n\nFirst you add to your model, wrapping the data you want in `WebData`:\n\n\n``` elm\ntype alias Model =\n    { news : WebData News }\n```\n\nThen add in a message that will deliver the response:\n\n``` elm\ntype alias Msg\n    = NewsResponse (WebData News)\n```\n\nNow we can create an HTTP get:\n\n``` elm\ngetNews : Cmd Msg\ngetNews =\n    Http.get decodeNews \"/news\"\n        |> RemoteData.asCmd\n        |> Cmd.map NewsResponse\n\n```\n\nWe trigger it in our `init` function:\n\n``` elm\ninit : ( Model, Cmd Msg)\ninit =\n    ( { news = Loading }\n    , getNews\n    )\n```\n\nWe handle it in our `update` function:\n\n``` elm\nupdate msg model =\n    case msg of\n        NewsResponse response ->\n            ( { model | news = response }\n            , Cmd.none\n            )\n```\n\n\nMost of this you'd already have in your app, and the changes are just\nwrapping the datatype in `Webdata`, and updating the `Http.get` call\nto add in `RemoteData.asCmd`.\n\nNow we get to where we really want to be, rendering the data and\nhandling the different states in the UI gracefully:\n\n\n``` elm\nview : Model -> Html msg\nview model =\n  case model.news of\n    NotAsked -> text \"Initialising.\"\n\n    Loading -> text \"Loading.\"\n\n    Failure err -> text (\"Error: \" ++ toString err)\n\n    Success news -> viewNews news\n\n\nviewNews : News -> Html msg\nviewNews news =\n    div []\n        [h1 [] [text \"Here is the news.\"]\n        , ...]\n```\n\nAnd that's it. A more accurate model of what's happening leads to a better UI.\n\n@docs RemoteData\n@docs WebData\n@docs map\n@docs mapFailure\n@docs mapBoth\n@docs andThen\n@docs withDefault\n@docs fromResult\n@docs toMaybe\n@docs asCmd\n@docs fromTask\n@docs append\n@docs isSuccess\n@docs isFailure\n@docs isLoading\n@docs isNotAsked\n@docs update\n@docs pure\n@docs apply\n@docs (<$>)\n@docs (<*>)\n@docs prism\n\n",
        "aliases": [
          {
            "name": "WebData",
            "comment": " While `RemoteData` can model any type of error, the most common\none you'll actually encounter is when you fetch data from a REST\ninterface, and get back `RemoteData Http.Error a`. Because that case\nis so common, `WebData` is provided as a useful alias.\n",
            "args": [
              "a"
            ],
            "type": "RemoteData.RemoteData Http.Error a"
          }
        ],
        "types": [
          {
            "name": "RemoteData",
            "comment": " Frequently when you're fetching data from an API, you want to represent four different states:\n  * `NotAsked` - We haven't asked for the data yet.\n  * `Loading` - We've asked, but haven't got an answer yet.\n  * `Failure` - We asked, but something went wrong. Here's the error.\n  * `Success` - Everything worked, and here's the data.\n",
            "args": [
              "e",
              "a"
            ],
            "cases": [
              [
                "NotAsked",
                []
              ],
              [
                "Loading",
                []
              ],
              [
                "Failure",
                [
                  "e"
                ]
              ],
              [
                "Success",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "<$>",
            "comment": " ",
            "type": "(a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "<*>",
            "comment": " ",
            "type": "RemoteData.RemoteData e (a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "andThen",
            "comment": " Chain together RemoteData function calls.\n",
            "type": "RemoteData.RemoteData e a -> (a -> RemoteData.RemoteData e b) -> RemoteData.RemoteData e b"
          },
          {
            "name": "append",
            "comment": " Append - join two `RemoteData` values together as though\nthey were one.\n\nIf either value is `NotAsked`, the result is `NotAsked`.\nIf either value is `Loading`, the result is `Loading`.\nIf both values are `Failure`, the left one wins.\n",
            "type": "RemoteData.RemoteData e a -> RemoteData.RemoteData e b -> RemoteData.RemoteData e ( a, b )"
          },
          {
            "name": "apply",
            "comment": " Applicative instance for `RemoteData`.\n\nIf you know what that means, then you know if you need this.\n\nIf not, this probably isn't the place for an applicatve tutorial, but\nthe gist is it makes it easy to create functions that merge several\n`RemoteData` values together. For example, `RemoteData.append` is\nimplemented as:\n\n    append a b =\n        (,) <$> a <*> b\n",
            "type": "RemoteData.RemoteData e (a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "asCmd",
            "comment": " Convert a web `Task`, probably produced from elm-http, to a `Cmd (RemoteData e a)`.\n",
            "type": "Task.Task e a -> Platform.Cmd.Cmd (RemoteData.RemoteData e a)"
          },
          {
            "name": "fromResult",
            "comment": " Convert a `Result Error`, probably produced from elm-http, to a RemoteData value.\n",
            "type": "Result.Result e a -> RemoteData.RemoteData e a"
          },
          {
            "name": "fromTask",
            "comment": " Convert from a `Task` that may succeed or fail, to one that always\nsucceeds with the `RemoteData` that captures any errors.\n",
            "type": "Task.Task e a -> Task.Task Basics.Never (RemoteData.RemoteData e a)"
          },
          {
            "name": "isFailure",
            "comment": " State-checking predicate. Returns true if we've failed to load some data.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "isLoading",
            "comment": " State-checking predicate. Returns true if we're loading.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "isNotAsked",
            "comment": " State-checking predicate. Returns true if we haven't asked for data yet.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "isSuccess",
            "comment": " State-checking predicate. Returns true if we've successfully loaded some data.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function into the `Success` value.\n",
            "type": "(a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "mapBoth",
            "comment": " Map function into both the `Success` and `Failure` value.\n",
            "type": "(a -> b) -> (e -> f) -> RemoteData.RemoteData e a -> RemoteData.RemoteData f b"
          },
          {
            "name": "mapFailure",
            "comment": " Map a function into the `Failure` value.\n",
            "type": "(e -> f) -> RemoteData.RemoteData e a -> RemoteData.RemoteData f a"
          },
          {
            "name": "prism",
            "comment": " A monocle-compatible Prism.\n\nIf you use Monocle, you'll want this, otherwise you can ignore it.\n\nThe type signature is actually:\n\n``` elm\nprism : Prism (RemoteData e a) a\n```\n\n...but we use the more verbose type here to avoid introducing a dependency on Monocle.\n",
            "type": "{ getOption : RemoteData.RemoteData e a -> Maybe.Maybe a , reverseGet : a -> RemoteData.RemoteData e a }"
          },
          {
            "name": "pure",
            "comment": " ",
            "type": "a -> RemoteData.RemoteData e a"
          },
          {
            "name": "toMaybe",
            "comment": " Convert a `RemoteData e a` to a `Maybe a`\n",
            "type": "RemoteData.RemoteData e a -> Maybe.Maybe a"
          },
          {
            "name": "update",
            "comment": " Apply an Elm update function - `Model -> (Model, Cmd Msg)` - to any `Successful`-ly loaded data.\n\nIt's quite common in Elm to want to run a model-update function, over\nsome remote data, but only once it's actually been loaded.\n\nFor example, we might want to handle UI messages changing the users\nsettings, but that only makes sense once those settings have been\nreturned from the server.\n\nThis function makes it more convenient to reach inside a\n`RemoteData.Success` value and apply an update. If the data is not\n`Success a`, it is returned unchanged with a `Cmd.none`.\n\n",
            "type": "(a -> ( b, Platform.Cmd.Cmd c )) -> RemoteData.RemoteData e a -> ( RemoteData.RemoteData e b, Platform.Cmd.Cmd c )"
          },
          {
            "name": "withDefault",
            "comment": " Return the `Success` value, or the default.\n",
            "type": "a -> RemoteData.RemoteData e a -> a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-css-basics",
    "version": "2.0.1",
    "docs": [
      {
        "name": "CssBasics",
        "comment": "\n## Some basic helpers for generating CSS style declarations\n\n# CSS Representation\n@docs Declaration, CssValue, UnitType, important\n\n# Encoding CSS Values and Declarations\n@docs encodeCssValue, encodeDeclaration\n\n# Rendering to a Style Attribute\n@docs toStyleAttribute\n\n",
        "aliases": [
          {
            "name": "Declaration",
            "comment": " A declaration is a key-value pair consisting of a style\n[property](http://www.w3schools.com/cssref/default.asp)\nname and the value assigned to that property. The property is given as a string\nand the value is given as a `CssValue`.\n",
            "args": [
              "number"
            ],
            "type": "( String, CssBasics.CssValue number )"
          }
        ],
        "types": [
          {
            "name": "CssValue",
            "comment": " Represents the types of values that may be assigned to a style property.\n\n__Examples:__\n\n    (\"text-align\", Str \"center\")\n      --> text-align:center;\n\n    (\"color\", Col (Color.rgb 0 102 255))\n      --> color:rgba(0,102,255,1);\n\n    (\"font-weight\", Num 700)\n      --> font-weight:700;\n\n    (\"font-size\", Unit 2 Em)\n      --> font-size:2em;\n\n    (\"font-family\", FontStack [\"Helvetica Neue\", \"Roboto\", \"sans-serif\"])\n      --> font-family:'Helvetica Neue',Roboto,sans-serif;\n\n    (\"margin\", Sides [Unit 10 Px, Unit 20 Px])\n      --> margin:10px 20px;\n\n    (\"border\", Multiple \" \" [Unit 2 Px, Str \"dashed\", Str \"green\"])\n      --> border:2px dashed green;\n\n    (\"padding\", Important (Unit 0 NoUnit))\n      --> padding:0!important;\n\n    (\"color\", Undefined)\n      --> color:inherit;\n\nNote that `Undefined` is not a null value, but a default used for error\nhandling. When rendered to a string or attribute, a property with an `Undefined`\nvalue will be assigned the value\n[`inherit`](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit).\n\n",
            "args": [
              "number"
            ],
            "cases": [
              [
                "Str",
                [
                  "String"
                ]
              ],
              [
                "Col",
                [
                  "Color.Color"
                ]
              ],
              [
                "Num",
                [
                  "number"
                ]
              ],
              [
                "Unit",
                [
                  "number",
                  "CssBasics.UnitType"
                ]
              ],
              [
                "FontStack",
                [
                  "List String"
                ]
              ],
              [
                "Sides",
                [
                  "List (CssBasics.CssValue number)"
                ]
              ],
              [
                "Multiple",
                [
                  "String",
                  "List (CssBasics.CssValue number)"
                ]
              ],
              [
                "Important",
                [
                  "CssBasics.CssValue number"
                ]
              ],
              [
                "Undefined",
                []
              ]
            ]
          },
          {
            "name": "UnitType",
            "comment": " Represents an absolute or relative unit of length. A length of zero may be\nrepresented as `Unit 0 NoUnit`, or simply as `Num 0`.\n",
            "args": [],
            "cases": [
              [
                "Percent",
                []
              ],
              [
                "Em",
                []
              ],
              [
                "Ex",
                []
              ],
              [
                "Ch",
                []
              ],
              [
                "Rem",
                []
              ],
              [
                "Px",
                []
              ],
              [
                "Cm",
                []
              ],
              [
                "Mm",
                []
              ],
              [
                "In",
                []
              ],
              [
                "Pt",
                []
              ],
              [
                "Pc",
                []
              ],
              [
                "Vh",
                []
              ],
              [
                "Vw",
                []
              ],
              [
                "Vmin",
                []
              ],
              [
                "Vmax",
                []
              ],
              [
                "NoUnit",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "encodeCssValue",
            "comment": " Convert a `CssValue` to a properly formatted string\n",
            "type": "CssBasics.CssValue number -> String"
          },
          {
            "name": "encodeDeclaration",
            "comment": " Convert a `Declaration` to a string of CSS code, formatted as\n`\"property:value;\"`\n",
            "type": "CssBasics.Declaration number -> String"
          },
          {
            "name": "important",
            "comment": " Add \"!important\" to a style declaration\n",
            "type": "CssBasics.Declaration number -> CssBasics.Declaration number"
          },
          {
            "name": "toStyleAttribute",
            "comment": " Given a list of declarations, return a `style` attribute that may be\napplied to an `Html` node\n",
            "type": "List (CssBasics.Declaration number) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-font-import",
    "version": "1.0.1",
    "docs": [
      {
        "name": "FontImport",
        "comment": "\n\n## Helpers for importing Google Fonts\n\n# Font Family Representation\n@docs FontFamily\n\n# Constructing a Font Family\n@docs newFontFamily, withVariants, addVariant, withSubsets, addSubset\n\n# Importing from Google Fonts\n@docs toImportDirective, toStyleNode\n\n",
        "aliases": [
          {
            "name": "FontFamily",
            "comment": " Represents a family of fonts that may have multiple variants and character\nsubsets. Used to construct import directives for Google Fonts.\n",
            "args": [],
            "type": "{ name : String, variants : List String, subsets : List String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addSubset",
            "comment": " Add a new character subset to a font family, *retaining* any existing\nsubsets\n",
            "type": "String -> FontImport.FontFamily -> FontImport.FontFamily"
          },
          {
            "name": "addVariant",
            "comment": " Add a new variant to a font family, *retaining* any existing variants\n",
            "type": "String -> FontImport.FontFamily -> FontImport.FontFamily"
          },
          {
            "name": "newFontFamily",
            "comment": " Initialize a new font family; the string argument provides the font name\n",
            "type": "String -> FontImport.FontFamily"
          },
          {
            "name": "toImportDirective",
            "comment": " Given a list of `FontFamily` records, generate an import directive\ncontaining an API query that will retreive the specified families/variants\nfrom Google Fonts\n",
            "type": "List FontImport.FontFamily -> String"
          },
          {
            "name": "toStyleNode",
            "comment": " Given a list of `FontFamily` records, generate a `<style>` node containing\nan import directive that will retreive the specified families/variants\nfrom Google Fonts.\n",
            "type": "List FontImport.FontFamily -> Html.Html msg"
          },
          {
            "name": "withSubsets",
            "comment": " Add a list of character subsets (e.g., \"cyrillic\") to a font family,\n*replacing* any existing subsets\n",
            "type": "List String -> FontImport.FontFamily -> FontImport.FontFamily"
          },
          {
            "name": "withVariants",
            "comment": " Add a list of variants to a font family, *replacing* any existing variants\n",
            "type": "List String -> FontImport.FontFamily -> FontImport.FontFamily"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-form-capture",
    "version": "1.0.1",
    "docs": [
      {
        "name": "FormCapture.Readers",
        "comment": " ## Read values captured from form input with type validation\n\n# Reading Input Values\n@docs readStringAt, readIntAt, readFloatAt, readBoolAt, readCustomAt\n\n# Converting `FormInput` to JSON\n@docs toJson\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "readBoolAt",
            "comment": " Given an `id` string and a `FormInput` dictionary, attempt to look up the\nvalue captured from the element with that `id` and decode it as a `Bool`.\n\nReturns an error message if no value was captured at that `id`, if the decoder\nfails, or if the value is a type other than BoolInput.\n\n",
            "type": "String -> FormCapture.FormInput a -> Result.Result String Bool"
          },
          {
            "name": "readCustomAt",
            "comment": " Given an `id` string and a `FormInput` dictionary, attempt to look up the\nvalue captured from the element with that `id` and decode it with a custom\ndecoder.\n\nReturns an error message if no value was captured at that `id`, if the decoder\nfails, or if the value is a type other than CustomInput.\n\n",
            "type": "String -> FormCapture.FormInput a -> Result.Result String a"
          },
          {
            "name": "readFloatAt",
            "comment": " Given an `id` string and a `FormInput` dictionary, attempt to look up the\nvalue captured from the element with that `id` and decode it as a `Float`.\n\nReturns an error message if no value was captured at that `id`, if the decoder\nfails, or if the value is a type other than FloatInput.\n\n",
            "type": "String -> FormCapture.FormInput a -> Result.Result String Float"
          },
          {
            "name": "readIntAt",
            "comment": " Given an `id` string and a `FormInput` dictionary, attempt to look up the\nvalue captured from the element with that `id` and decode it as an `Int`.\n\nReturns an error message if no value was captured at that `id`, if the decoder\nfails, or if the value is a type other than IntInput.\n\n",
            "type": "String -> FormCapture.FormInput a -> Result.Result String Int"
          },
          {
            "name": "readStringAt",
            "comment": " Given an `id` string and a `FormInput` dictionary, attempt to look up the\nvalue captured from the element with that `id` and decode it as a string.\n\nReturns an error message if no value was captured at that `id`, if the decoder\nfails, or if the value is a type other than StringInput.\n\n",
            "type": "String -> FormCapture.FormInput a -> Result.Result String String"
          },
          {
            "name": "toJson",
            "comment": " Given a `FormInput` dictionary, return a JSON object containing every\nkey-value pair in the dictionary, with values converted to corresponding\nJavaScript types.\n\n    --simulated input\n    input1 = ( \"userName\", StringInput (Json.Encode.string \"Bob\") )\n    input2 = (\"userAge\", IntInput (Json.Encode.string \"33\") )\n    formInput = Dict.fromList [ input1, input2 ]\n\n    formInput\n      |> toJson\n\n    --> { userAge = 33, userName = \"Bob\" } : Json.Decode.Value\n",
            "type": "FormCapture.FormInput a -> Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "FormCapture",
        "comment": "\n\n## Capture form input as a dictionary keyed by component id\n\nThe Elm `Html` package lacks a set of built-in functions for capturing input\nfrom a form with multiple fields, and implementing form capture from scratch\ncan be tricky. The `FormCapture` library makes it easy to capture form input by\nabstracting out a lot of the implementation details. You only need to specify an\n`id` string and input type key for each form element, and the rendering function\nuses that data to generate a decoder that will be applied on a `submit` event.\nThe HTML specification for each form element is entirely customizable using\nstandard `Html` or the alternative\n[`HtmlTree`](http://package.elm-lang.org/packages/danielnarey/elm-html-tree/)\nsyntax.\n\n# Input Representation\n@docs FormInput\n\n# Form Representation\n@docs Form, FormElement\n\n# Constructing Form Elements\n@docs elementFromHtml, elementFromHtmlTree\n\n# Constructing a Form\n@docs newForm, addFormElement\n\n# Rendering a Form\n@docs formToHtml, formToHtmlTree\n\nSee\n[examples/FormInput.elm](https://github.com/danielnarey/elm-form-capture/blob/master/examples/)\nfor a full working example.\n",
        "aliases": [
          {
            "name": "Form",
            "comment": " Represents an HTML form\n",
            "args": [
              "msg",
              "a"
            ],
            "type": "{ captureKey : FormCapture.FormInput a -> msg , elements : List (FormCapture.FormElement msg a) }"
          },
          {
            "name": "FormElement",
            "comment": " Represents an HTML form element\n",
            "args": [
              "msg",
              "a"
            ],
            "type": "{ id : String , inputKey : Json.Decode.Value -> InputValidation.TypedInput a , component : FormCapture.FormComponent msg }"
          },
          {
            "name": "FormInput",
            "comment": " Represents input captured from a form with multiple fields. Implemented as a\ndictionary, where the *key* is the `id` of the input element and the *value* is\nits captured value as\n[`TypedInput`](http://package.elm-lang.org/packages/danielnarey/elm-input-validation/latest/InputValidation#TypedInput).\n",
            "args": [
              "a"
            ],
            "type": "Dict.Dict String (InputValidation.TypedInput a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addFormElement",
            "comment": " Add a new element to a form, *retaining* any existing elements\n\n    let\n      myForm =\n        [\n          ...\n        ]\n          |> newForm Submit\n\n      newElement =\n        [\n          ...\n        ]\n          |> elementFromHtml (\"myId\", StringInput)\n\n    in\n      myForm\n        |> addElement newElement\n\n",
            "type": "FormCapture.FormElement msg a -> FormCapture.Form msg a -> FormCapture.Form msg a"
          },
          {
            "name": "elementFromHtml",
            "comment": " Create a form element by supplying a tuple containing an id string and a\n[`TypedInput`](http://package.elm-lang.org/packages/danielnarey/elm-input-validation/latest/InputValidation#TypedInput)\nkey as the first arugment and an `Html` node containing the input field or\nselector from which input will be captured as the second argument. For form\ncapture to succeed, the input or select element contained within the node\nmust be assigned an `id` attribute matching the one passed to this function.\n\nUse this function if you are generating your view components with the standard\n`Html` package.\n\n    import Html\n    import Html.Attributes as Attr\n    ...\n\n    [ Html.label [] [ \"What is your name?\" ]\n    , Html.input [ Attr.type' \"text\", Attr.id \"name\" ] []\n    ]\n      |> Html.div []\n      |> elementFromHtml (\"name\", StringInput)\n\n",
            "type": "( String, Json.Decode.Value -> InputValidation.TypedInput a ) -> Html.Html msg -> FormCapture.FormElement msg a"
          },
          {
            "name": "elementFromHtmlTree",
            "comment": " Create a form element by supplying a tuple containing an id string and a\n[`TypedInput`](http://package.elm-lang.org/packages/danielnarey/elm-input-validation/latest/InputValidation#TypedInput)\nkey as the first arugment and an\n[`HtmlTree`](http://package.elm-lang.org/packages/danielnarey/elm-html-tree/latest/HtmlTree)\ncontaining the input field or selector from which input will be captured as the\nsecond argument. For form capture to succeed, the input or select element\ncontained within the node must be assigned an `id` attribute matching the one\npassed to this function.\n\nUse this function if you you are generating your view components with the\nnon-standard\n[`HtmlTree`](http://package.elm-lang.org/packages/danielnarey/elm-html-tree/)\npackage.\n\n    import HtmlTree as Tree\n    ...\n\n    [ \"What is your name?\"\n      |> Tree.textWrapper \"label\"\n    , Tree.leaf \"input\"\n      |> Tree.withId \"name\"\n      |> Tree.addAttribute (\"type\", \"text\")\n    ]\n      |> Tree.container \"div\"\n      |> elementFromHtmlTree (\"name\", StringInput)\n\n",
            "type": "( String, Json.Decode.Value -> InputValidation.TypedInput a ) -> HtmlTree.HtmlTree msg -> FormCapture.FormElement msg a"
          },
          {
            "name": "formToHtml",
            "comment": " Render a form to standard `Html`. Use this function if you are generating\nyour view components with the standard `Html` package.\n\n    div [] [ myForm |> toHtml ]\n\nA submit button for the form will be added as the last form element when it is\nrendered to `Html`. The button is assigned class \"submit-button\" to make it\neasier to style with CSS.\n",
            "type": "FormCapture.Form msg a -> Html.Html msg"
          },
          {
            "name": "formToHtmlTree",
            "comment": " Convert a form to an\n[`HtmlTree`](http://package.elm-lang.org/packages/danielnarey/elm-html-tree/latest/HtmlTree).\nUse this function if you you are generating your view components with the\nnon-standard\n[`HtmlTree`](http://package.elm-lang.org/packages/danielnarey/elm-html-tree/)\npackage.\n\n    myForm\n      |> toHtmlTree\n      |> (\\n -> [n])\n      |> container \"div\"\n\nA submit button for the form will be added as the last form element when it is\nconverted to an `HtmlTree`. The button is assigned class \"submit-button\" to\nmake it easier to style with CSS.\n",
            "type": "FormCapture.Form msg a -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "newForm",
            "comment": " Create a `Form` object by supplying the type key of a message that accepts\n`FormInput` and a list of `FormElement` records.\n\n    type Msg a\n      = Submit (FormInput a)\n    ...\n\n    let\n      formElements =\n        [\n          ...\n        ]\n\n    in\n      formElements\n        |> newForm Submit\n\n",
            "type": "(FormCapture.FormInput a -> msg) -> List (FormCapture.FormElement msg a) -> FormCapture.Form msg a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-html-tree",
    "version": "1.0.2",
    "docs": [
      {
        "name": "HtmlTree.Modify",
        "comment": " ## Apply a modify function to every node of an `HtmlTree` matching a criterion\n\nThis package module provides functions for modifying the internal nodes of an\n`HtmlTree`. Nodes may be selected for modification by id, tag, class, or\nattribute value, or you can modify all nodes in the tree.\n\n@docs matchingId, matchingTag, matchingClass, matchingAttrValue, allNodes\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "allNodes",
            "comment": " Apply the modify function to every node in the tree\n\n      page\n        |> Modify.allNodes\n          ( addAttribute (\"hidden\", \"True\") )\n\n",
            "type": "(HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "matchingAttrValue",
            "comment": " Given a tuple containing an attribute name and value and a modify function,\napply the modify function to every node in the tree whose element has a matching\nvalue for the named attribute.\n\n      page\n        |> Modify.matchingAttrValue (\"disabled\", \"True\")\n          ( addAttribute (\"disabled\", \"False\") )\n\n",
            "type": "( String, String ) -> (HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "matchingClass",
            "comment": " Given a string representing a class name and a modify function, apply the\nmodify function to every node in the tree whose element has a matching class\nassignment.\n\n      page\n        |> Modify.matchingClass \"button\"\n          ( addClass \"large-button\" )\n",
            "type": "String -> (HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "matchingId",
            "comment": " Given an `id` string and a modify function, apply the modify function to\nevery node in the tree whose element has a matching `id`. Note that HTML\nelements should be assigned unique `id` strings, so in theory the modify\nfunction should only be applied to one node.\n\n    welcomeMessage =\n      \"Hello, World!\"\n        |> textWrapper \"p\"\n        |> withId \"messageText\"\n        |> (\\n -> [n])\n        |> container \"div\"\n\n    welcomeMessage\n      |> Modify.matchingId \"messageText\"\n        ( withText \"Hello, Universe!\" )\n\n",
            "type": "String -> (HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "matchingTag",
            "comment": " Given a string representing an HTML tag and a modify function, apply the\nmodify function to every node in the tree whose element has a matching HTML tag.\n\n      page\n        |> Modify.matchingTag \"button\"\n          ( addAttribute (\"disabled\", \"True\") )\n",
            "type": "String -> (HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "HtmlTree",
        "comment": "\n\n## An alternative syntax for generating HTML in Elm\n\n`HtmlTree` is an alternative syntax for generating HTML, built on top of the\nstandard `Html` and `VirtualDom` packages. This syntax enables a\n[\"pipeline\"](https://en.wikipedia.org/wiki/Pipeline_%28software%29)\napproach to HTML specification, and its implementation allows for downstream\nmodification of view components — something that is not possible when working\nwith the standard API. Once constructed, view components may be passed to modify\nfunctions as data, encouraging a design pattern for updating a program's view\nthat may result in more intuitive and readable code.\n\n\n# HTML DOM Representation\n@docs HtmlTree\n\n# Rendering an `HtmlTree` to standard `Html`\n@docs assembleHtml\n\n# Constructing `HtmlTree` nodes\n@docs leaf, textWrapper, container, opaque\n\n# Adding Text to a Node\n@docs withText, appendText, prependText, textAsMarkdown\n\n# Adding Attributes and Event Handlers to a Node\n@docs withAttributes, addAttribute, withActions, addAction, withObserver\n\n# Adding an Id Attribute, Class Names, and Style Declarations to a Node\n@docs withId, withClasses, addClass, removeClass, withStyles, addStyle\n\n# Modifying a Node's HTML tag\n@docs withTag\n\n# Replacing, Appending, or Prepending Child Nodes\n@docs withChildren, appendChild, prependChild\n\n",
        "aliases": [],
        "types": [
          {
            "name": "HtmlTree",
            "comment": " Represents a node in the DOM tree that may have some children or\nno children\n",
            "args": [
              "msg"
            ],
            "cases": [
              [
                "Opaque",
                [
                  "Html.Html msg"
                ]
              ],
              [
                "Leaf",
                [
                  "Internal.HtmlElement.HtmlElement msg"
                ]
              ],
              [
                "Stem",
                [
                  "Internal.HtmlElement.HtmlElement msg",
                  "List (HtmlTree.HtmlTree msg)"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "addAction",
            "comment": " Add a new action to the element at the root node of an `HtmlTree`. If a new\n*action-message* pair has the same *action* as an existing one, the new\n*message* replaces the old one; otherwise, existing *action-message* pairs are\nretained.\n\n    myTextElement\n      |> addAction (\"click\", HideMessage)\n\n",
            "type": "( String, msg ) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "addAttribute",
            "comment": " Add a new attribute (*name-value* pair) to the element at the root\nnode of an `HtmlTree`. If the new attribute has the same *name* as an existing\nattribute, the new *value* replaces the old one; otherwise, existing attributes\nare retained.\n\n    welcomeMessage\n      |> addAttribute (\"id\", \"welcomeMessage\")\n",
            "type": "( String, String ) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "addClass",
            "comment": " Add a new class assignment to the element at the root node of an `HtmlTree`,\n*retaining* any existing class assignments\n\n    welcomeMessage\n        |> addClass \"align-center\"\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "addStyle",
            "comment": " Add a new style declaration (*proprty-value* pair) to the element at the root\nnode of an `HtmlTree`. If a new declaration has the same *property* as an\nexisting declaration, the new *value* replaces the old one; otherwise, existing\nstyle declarations are retained.\n\n    welcomeMessage\n        |> addStyle (\"text-align\", \"center\")\n",
            "type": "( String, String ) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "appendChild",
            "comment": " Add a child node to the root node of an `HtmlTree`, *appended\nafter* any existing children.\n\n    fruit =\n      [ \"apple\"\n      , \"banana\"\n      , \"orange\"\n      ]\n        |> List.map textWrapper \"li\"\n        |> container \"ul\"\n\n    fruit\n      |> appendChild (\"watermelon\" |> textWrapper \"li\")\n\n    --> <ul>\n          <li>apple</li>\n          <li>banana</li>\n          <li>orange</li>\n          <li>watermelon</li>\n        </ul>\n",
            "type": "HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "appendText",
            "comment": " Add new text to the element at the root node of an `HtmlTree`, *appended\nafter* any existing text.\n\n    welcomeMessage\n        |> appendText \"!!\"\n\n    --> <p>Hello, World!!!</p>\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "assembleHtml",
            "comment": " Convert an `HtmlTree` containing one or more nodes to standard `Html`\n(an alias for `VirtualDom.Node`). This function must be called on the\nroot node of your `HtmlTree` in order for the tree to be rendered in your Elm\nprogram's view.\n",
            "type": "HtmlTree.HtmlTree msg -> Html.Html msg"
          },
          {
            "name": "container",
            "comment": " Initialize an `HtmlTree` node that has children, but has no attributes and\nno text.\n\n    \"Hello, World!\"\n      |> textWrapper \"p\"\n      |> container \"div\"\n\n    --> <div><p>Hello, World!</p></div>\n",
            "type": "String -> List (HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "leaf",
            "comment": " Initialize an `HtmlTree` node with no attributes, no text, and no children.\n\n    leaf \"br\"\n\n    --> <br>\n",
            "type": "String -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "opaque",
            "comment": " Convert a standard `Html` node to an opaque `HtmlTree` (\"opaque\" because its\ninternal attributes and children will not be accessible to modify functions).\n\nThis feature is included so that `HtmlTree` can be used flexibly with other\npackages that generate standard `Html`, but it should be used with caution\nbecause the presence of opaque nodes limits the functionality of the `HtmlTree`\npackage. Constructor and modify functions called on opaque nodes will return\nthe node without modification.\n",
            "type": "Html.Html msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "prependChild",
            "comment": " Add a child node to the root node of an `HtmlTree`, *prepended\nbefore* any existing children.\n\n    fruit\n      |> prependChild (\"watermelon\" |> textWrapper \"li\")\n\n    --> <ul>\n          <li>watermelon</li>\n          <li>apple</li>\n          <li>banana</li>\n          <li>orange</li>\n        </ul>\n\n",
            "type": "HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "prependText",
            "comment": " Add new text to the element at the root node of an `HtmlTree`, *prepended\nbefore* any existing text.\n\n    welcomeMessage\n        |> prependText \"#\"\n\n    --> <p>#Hello, World!</p>\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "removeClass",
            "comment": " Remove a class name from the element at the root node of an `HtmlTree`\n\n    welcomeMessage\n      |> removeClass \"large-text\"\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "textAsMarkdown",
            "comment": " Flag the text at the root node of an `HtmlTree` as\n[markdown](https://en.wikipedia.org/wiki/Markdown); when\n`assembleHtml` is called, the text will be rendered using\n[`Markdown.toHtml`](package.elm-lang.org/packages/evancz/elm-markdown/latest/Markdown#toHtml)\n",
            "type": "HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "textWrapper",
            "comment": " Initialize an `HtmlTree` node that contains text, but has no attributes and\nno children.\n\n    \"Hello, World!\"\n      |> textWrapper \"p\"\n\n    --> <p>Hello, World!</p>\n",
            "type": "String -> String -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withActions",
            "comment": " Add a list of actions to the element at the root node of an `HtmlTree`,\n*replacing* any existing actions. Actions must be encoded as *action-message*\npairs. As defined here, \"actions\" include all events that __do not__ capture\nform input. Following the typical pattern of an Elm program, a \"message\" is a\nuser-defined type that tells the program what updates to perform on the model\nvia pattern matching. Note that the action name should be given as a string\nwithout the \"on\" prefix.\n\n    \"Click here and see what happens!\"\n      |> textWrapper \"p\"\n      |> withAttributes\n        [ (\"hidden\", toString model) ]\n      |> withActions\n        [ (\"click\", HideMessage) ]\n\nSee [examples/Buttons.elm](https://github.com/danielnarey/elm-html-tree/tree/master/examples)\nfor a full working example.\n",
            "type": "List ( String, msg ) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withAttributes",
            "comment": " Add a list of attributes (*name-value* pairs) to the element at the root\nnode of an `HtmlTree`, *replacing* any existing attributes\n\n    welcomeMessage\n      |> withAttributes\n        [ (\"id\", \"welcomeMessage\")\n        , (\"title\", \"Hello again!\")\n        ]\n",
            "type": "List ( String, String ) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withChildren",
            "comment": " Add child nodes to the root node of an `HtmlTree`, *replacing* any existing\nchildren, and return the result. One use of this function is to convert a\n`Leaf` to a `Stem`, which is helpful when nesting text elements.\n\n    \"Hello, world!\"\n      |> textWrapper \"p\"\n      |> withChildren\n        [ leaf \"br\"\n        , \"Awesome!\" |> textWrapper \"strong\"\n        ]\n      |> container \"div\"\n\n    --> <div><p>Hello, world!<br><strong>Awesome!</strong></p></div>\n",
            "type": "List (HtmlTree.HtmlTree msg) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withClasses",
            "comment": " Add a list of class names to the element at the root node of an `HtmlTree`,\n*replacing* any existing class assignments\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> withClasses\n          [ \"large-text\"\n          , \"align-center\"\n          ]\n",
            "type": "List String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withId",
            "comment": " Convenience function to add an `id` attribute to the root element of an\n`HtmlTree`. Calls `addAttribute`.\n\n    welcomeMessage\n      |> withId \"welcomeMessage\"\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withObserver",
            "comment": " Add an observer to the element at the root node of an `HtmlTree`, encoded as\nan [`Html.Attribute`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#Attribute).\nAn \"observer\" differs from an \"action\" in that it captures one or more input\nvalues, and so requires a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nto read that input. The built-in observers in the `Html.Events` package\nare\n[`onInput`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#onInput)\nand\n[`onCheck`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#onCheck).\nCustom observers may be created using the\n[`Html.Events.on`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#on)\nfunction, which takes an\n[event name](http://www.w3schools.com/jsref/dom_obj_event.asp) (as a string,\nwithout the \"on\" prefix) and a\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nas arguments.\n\n    leaf \"input\"\n      |> withAttributes\n        [ (\"type\", \"checkbox\")\n        , (\"checked\", toString model)\n        ]\n      |> withObserver (Events.onCheck Checked)\n\nSee\n[examples/Checkboxes.elm](https://github.com/danielnarey/elm-html-tree/tree/master/examples)\nand\n[examples/RadioButtons.elm](https://github.com/danielnarey/elm-html-tree/tree/master/examples)\nfor full working examples.\n",
            "type": "Html.Attribute msg -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withStyles",
            "comment": " Add a list of style declarations (*name-value* pairs) to the element at the\nroot node of an `HtmlTree`, *replacing* any existing styles. Style declarations\nadded in this way are defined via the element's `style` attribute, which means\nthey override style declarations assigned to tag, class, and id selectors in\nglobal stylesheets.\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> withStyles\n          [ (\"font-size\", \"2em\")\n          , (\"text-align\", \"center\")\n          ]\n\nSee my\n[Stylesheet](http://package.elm-lang.org/packages/danielnarey/elm-stylesheet/latest/Stylesheet)\npackage for a more general approach to defining CSS rules and generating a\nglobal stylesheet in Elm.\n",
            "type": "List ( String, String ) -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withTag",
            "comment": " Modify the HTML tag of the element at the root node of an `HtmlTree`.\nReplaces the existing tag.\n\n    welcomeMessage\n      |> withTag \"span\"\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          },
          {
            "name": "withText",
            "comment": " Add text to the element at the root node of an `HtmlTree`, *replacing*\nany existing text\n\n    welcomeMessage =\n      leaf \"p\"\n        |> withText \"Hello, World!\"\n\n    --> <p>Hello, World!</p>\n\n    welcomeMessage\n      |> withText \"Hello, Universe!\"\n\n    --> <p>Hello, Universe!</p>\n",
            "type": "String -> HtmlTree.HtmlTree msg -> HtmlTree.HtmlTree msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-input-validation",
    "version": "1.0.1",
    "docs": [
      {
        "name": "InputValidation",
        "comment": " ## Type-validation for user input from text, numeric, and custom fields\n\nThis library provides a consistent way of handling type-validation for user\ninput. The type of input expected is specified when constructing an input\nelement in the Elm program's view, and the corresponding reader function is\ncalled when program updates in response to input. If the input does not match\nthe expected type, or the reader function called does not correspond to the type\nexpected, an error results.\n\n# Value Representation\n@docs TypedInput\n\n# Capturing Input\n@docs captureOnInput\n\n# Reading Input with Type Validation\n@docs readStringInput, readIntInput, readFloatInput, readBoolInput\n@docs readCustomInput\n\n# Reading Input without Type Validation\n@docs readInputAsString\n\n",
        "aliases": [],
        "types": [
          {
            "name": "TypedInput",
            "comment": " Represents a JavaScript value with a type specification.\n\n`BoolInput` requires an expression that takes a string and returns a `Bool`.\n`CustomInput` requires a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder).\n`Fail` captures no input and may be used for error handling.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "StringInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "IntInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "FloatInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "BoolInput",
                [
                  "String -> Bool",
                  "Json.Decode.Value"
                ]
              ],
              [
                "CustomInput",
                [
                  "Json.Decode.Decoder a",
                  "Json.Decode.Value"
                ]
              ],
              [
                "Fail",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "captureOnInput",
            "comment": " Capture input from a field as `TypedInput`\n\n    type Msg\n      = Name (TypedInput a)\n    ...\n\n    input [ type' \"text\", captureOnInput Name StringInput ] []\n\n",
            "type": "(InputValidation.TypedInput a -> msg) -> (Json.Decode.Value -> InputValidation.TypedInput a) -> Html.Attribute msg"
          },
          {
            "name": "readBoolInput",
            "comment": " Decode a `BoolInput` value as a string, then pass the string to a custom\nexpression that will return a `Bool`; return an error message if the string\ndecoder fails or if the argument is a type other than `BoolInput`.\n\n",
            "type": "InputValidation.TypedInput a -> Result.Result String Bool"
          },
          {
            "name": "readCustomInput",
            "comment": " Decode a `CustomInput` value with a custom `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder);\nreturn an error message if the decoder fails or if the argument is a type other\nthan `CustomInput`.\n",
            "type": "InputValidation.TypedInput a -> Result.Result String a"
          },
          {
            "name": "readFloatInput",
            "comment": " Decode a `FloatInput` value as a string, then attempt to convert the string\nto a `Float`; return an error message if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `FloatInput`.\n\n",
            "type": "InputValidation.TypedInput a -> Result.Result String Float"
          },
          {
            "name": "readInputAsString",
            "comment": " Decode any `TypedInput` value as a string, or return an error message if the\ndecoder fails. Useful for debugging.\n\n",
            "type": "InputValidation.TypedInput a -> Result.Result String String"
          },
          {
            "name": "readIntInput",
            "comment": " Decode an `IntInput` value as an string, then attempt to convert the string\nto an `Int`; return an error message if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `IntInput`.\n\n",
            "type": "InputValidation.TypedInput a -> Result.Result String Int"
          },
          {
            "name": "readStringInput",
            "comment": " Decode a `StringInput` value as a string; return an error message if the\ndecoder fails or if the argument is a type other than `StringInput`.\n\n",
            "type": "InputValidation.TypedInput a -> Result.Result String String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-stylesheet",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Stylesheet.Combinators",
        "comment": "\n\n## An alternative syntax for constructing combinator and pseudo selectors\n\n# Combinators\n@docs descendantOf, childOf, siblingOf, adjacentTo\n\n# Pseudo Classes and Elements\n@docs pseudoClass, pseudoElement\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adjacentTo",
            "comment": " Constructor function to create an adjacent selector; intended to be used\nsemantically as a pipeline function\n\n    Tag \"ul\" |> adjacentTo (Tag \"p\")\n",
            "type": "Stylesheet.Selector -> Stylesheet.Selector -> Stylesheet.Selector"
          },
          {
            "name": "childOf",
            "comment": " Constructor function to create a child selector; intended to be used\nsemantically as a pipeline function\n\n    Tag \"li\" |> childOf (Tag \"ul\")\n",
            "type": "Stylesheet.Selector -> Stylesheet.Selector -> Stylesheet.Selector"
          },
          {
            "name": "descendantOf",
            "comment": " Constructor function to create a descendent selector; intended to be\nused semantically as a pipeline function\n\n    Tag \"p\" |> descendantOf (Tag \"article\")\n",
            "type": "Stylesheet.Selector -> Stylesheet.Selector -> Stylesheet.Selector"
          },
          {
            "name": "pseudoClass",
            "comment": " Constructor function to create a pseudo class selector; intended to be used\nsemantically as a pipeline function\n\n    Tag \"li\" |> pseudoClass \"hover\"\n",
            "type": "Stylesheet.Selector -> String -> Stylesheet.Selector"
          },
          {
            "name": "pseudoElement",
            "comment": " Constructor function to create a pseudo element selector; intended to be\nused semantically as a pipeline function\n\n    Tag \"li\" |> pseudoElement \"after\"\n",
            "type": "Stylesheet.Selector -> String -> Stylesheet.Selector"
          },
          {
            "name": "siblingOf",
            "comment": " Constructor function to create a sibling selector; intended to be used\nsemantically as a pipeline function\n\n    Tag \"ul\" |> siblingOf (Tag \"p\")\n",
            "type": "Stylesheet.Selector -> Stylesheet.Selector -> Stylesheet.Selector"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Stylesheet",
        "comment": "\n\n## A CSS implementation with helpful constructors for generating a global stylesheet\n\nThis library builds off of\n[CssBasics](http://package.elm-lang.org/packages/danielnarey/elm-css-basics/latest)\nto allow you to generate a stylesheet and embed it in your Elm\nprogram's view. The basic workflow for using this library is (1) create your\nrule sets, consisting of selectors (identifying elements) and declarations\n(defining styles), (2) add your rule sets to a new stylesheet along with any\nimport URLs needed to access external resources (e.g., Google fonts), and (3)\nembed the stylesheet at the root level of your HTML DOM.\n\nSee\n[examples/BasicUse.elm](https://github.com/danielnarey/elm-stylesheet/tree/master/examples)\nfor a full working example.\n\n\n# CSS Representation\n@docs Stylesheet, RuleSet, Selector, MatchValue\n\n# Constructing Rule Sets\n@docs newRuleSet, withSelectors, addSelector, withDeclarations, addDeclaration\n\n# Constructing a Stylesheet\n@docs newStylesheet, withImports, addImport, withPrepends, addPrepend\n@docs withRules, withRuleSets, addRuleSet, scoped\n\n# Compiling/Rendering a Stylesheet\n@docs toCssString, toStyleNode\n\n",
        "aliases": [
          {
            "name": "RuleSet",
            "comment": " A rule set consists of one or more selectors that define a set of elements\n(and/or pseudo-elements) and one or more style declarations that apply to those\nelements.\n",
            "args": [
              "number"
            ],
            "type": "{ selectors : List Stylesheet.Selector , declarations : List (CssBasics.Declaration number) }"
          },
          {
            "name": "Stylesheet",
            "comment": " A stylesheet consists of one or more rule sets and, optionally: (1) a list\nof external style resources to import; (2) a list of inline CSS code snippets\nto prepend above the stylesheet's rule statements. By default, a stylesheet\napplies globally to the HTML document, but it also contains a `scoped` attribute\nthat can be set to `True` to take advantage of CSS scoping in HTML 5\n(currently only implemented in the Firefox browser).\n",
            "args": [
              "number"
            ],
            "type": "{ imports : List String , prepends : List String , rules : List (Stylesheet.RuleSet number) , scoped : Bool }"
          }
        ],
        "types": [
          {
            "name": "MatchValue",
            "comment": " Represents an expression that defines a set of matching values for a given\nHTML attribute. Specifications for attribute selectors may be found\n[here](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n`IsDefined` corresponds to [attr], `Exactly` corresponds to [attr=value],\n`Includes` corresponds to [attr~=value], `StartsWith` corresponds to\n[attr^=value], `EndsWith` corresponds to [attr$=value], `Contains`\ncorresponds to [attr*=value], and `Prefix` corresponds to [attr|=value].\n",
            "args": [],
            "cases": [
              [
                "IsDefined",
                []
              ],
              [
                "Exactly",
                [
                  "String"
                ]
              ],
              [
                "Includes",
                [
                  "String"
                ]
              ],
              [
                "StartsWith",
                [
                  "String"
                ]
              ],
              [
                "EndsWith",
                [
                  "String"
                ]
              ],
              [
                "Contains",
                [
                  "String"
                ]
              ],
              [
                "Prefix",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Selector",
            "comment": " A selector defines the set of elements (and/or pseudo-elements) to which a\nset of style declarations apply. Specifications for each of the selector types\nmay be found\n[here](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors).\nHere are some use examples:\n\n    Tag \"div\"\n      --> div\n\n    Id \"identifier\"\n      --> #identifier\n\n    Class \"class-name\"\n      --> .class-name\n\n    Attribute (Tag \"a\", \"href\", StartsWith \"#\")\n      --> a[href^=\"#\"]\n\n    Descendant (Tag \"article\", Tag \"p\")\n      --> article p\n\n    Child (Tag \"ul\", Tag \"li\")\n      --> ul > li\n\n    Sibling (Tag \"p\", Tag \"ul\")\n      --> p ~ ul\n\n    Adjacent (Tag \"p\", Tag \"ul\")\n      --> p + ul\n\n    PseudoClass (Tag \"li\", [ \"nth-child(1)\", \"hover\" ])\n      --> li:nth-child(1):hover\n\n    PseudoElement (Tag \"li\", \"after\")\n      --> li::after\n\n    At (\"media\", \"screen and (min-width: 700px)\")\n      --> @media screen and (min-width: 700px)\n\nOn occasion, it might be simpler and more readable just to define the selector\nusing CSS code. That is what the `CssCode` type is for:\n\n    CssCode \"article p ~ ul > li:nth-child(1)\"\n      --> article p ~ ul > li:nth-child(1)\n\nSee\n[Stylesheet.Combinators](http://package.elm-lang.org/packages/danielnarey/elm-stylesheet/latest/Stylesheet/Combinators)\nfor an alternative syntax that may be used to\nconstruct combinator selectors.\n\n",
            "args": [],
            "cases": [
              [
                "Any",
                []
              ],
              [
                "Tag",
                [
                  "String"
                ]
              ],
              [
                "Id",
                [
                  "String"
                ]
              ],
              [
                "Class",
                [
                  "String"
                ]
              ],
              [
                "Attribute",
                [
                  "( Stylesheet.Selector, String, Stylesheet.MatchValue )"
                ]
              ],
              [
                "Descendant",
                [
                  "( Stylesheet.Selector, Stylesheet.Selector )"
                ]
              ],
              [
                "Child",
                [
                  "( Stylesheet.Selector, Stylesheet.Selector )"
                ]
              ],
              [
                "Sibling",
                [
                  "( Stylesheet.Selector, Stylesheet.Selector )"
                ]
              ],
              [
                "Adjacent",
                [
                  "( Stylesheet.Selector, Stylesheet.Selector )"
                ]
              ],
              [
                "PseudoClass",
                [
                  "( Stylesheet.Selector, List String )"
                ]
              ],
              [
                "PseudoElement",
                [
                  "( Stylesheet.Selector, String )"
                ]
              ],
              [
                "At",
                [
                  "( String, String )"
                ]
              ],
              [
                "CssCode",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "addDeclaration",
            "comment": " Add a new style declaration to a rule set, *retaining* any existing\ndeclarations\n",
            "type": "CssBasics.Declaration number -> Stylesheet.RuleSet number -> Stylesheet.RuleSet number"
          },
          {
            "name": "addImport",
            "comment": " Add a new import to a stylesheet, *retaining* any existing imports\n",
            "type": "String -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "addPrepend",
            "comment": " Add a string of CSS code into a stylesheet after its imports (and after\nany existing prepends) and before its rule statements; this constructor will\n*retain* any existing prepends\n",
            "type": "String -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "addRuleSet",
            "comment": " Add a new rule set to a stylesheet, *retaining* any existing rule sets\n",
            "type": "Stylesheet.RuleSet number -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "addSelector",
            "comment": " Add a new selector to a rule set, *retaining* any existing selectors\n",
            "type": "Stylesheet.Selector -> Stylesheet.RuleSet number -> Stylesheet.RuleSet number"
          },
          {
            "name": "newRuleSet",
            "comment": " Initialize a new rule set\n",
            "type": "Stylesheet.RuleSet number"
          },
          {
            "name": "newStylesheet",
            "comment": " Initialize a new stylesheet\n",
            "type": "Stylesheet.Stylesheet number"
          },
          {
            "name": "scoped",
            "comment": " Set the stylesheet's `scoped` attribute to `True`. In an HTML 5 compliant\nbrowser, the stylesheet will only be applied to the element on which\n`embedStylesheet` is called and all of that element's children. As of October\n2016 this scoping feature is only embedded in the Firefox browser.\n",
            "type": "Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "toCssString",
            "comment": " Returns the compiled stylesheet as a string of CSS code\n",
            "type": "Stylesheet.Stylesheet number -> String"
          },
          {
            "name": "toStyleNode",
            "comment": " Returns an `Html.node` with a `<style>` tag, which contains the stylesheet\nrendered as a string of CSS code\n",
            "type": "Stylesheet.Stylesheet number -> Html.Html number"
          },
          {
            "name": "withDeclarations",
            "comment": " Add a list of style declarations to a rule set, *replacing* any existing\ndeclarations\n",
            "type": "List (CssBasics.Declaration number) -> Stylesheet.RuleSet number -> Stylesheet.RuleSet number"
          },
          {
            "name": "withImports",
            "comment": " Add a list of imports to a stylesheet, *replacing* any existing imports\n",
            "type": "List String -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "withPrepends",
            "comment": " Insert one or more strings of CSS code into a stylesheet after its imports\nand before its rule statements; this constructor will *replace* any existing\nprepends\n",
            "type": "List String -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "withRuleSets",
            "comment": " Alias for `withRules`\n",
            "type": "List (Stylesheet.RuleSet number) -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "withRules",
            "comment": " Add a list of rule sets to a stylesheet, *replacing* any existing rule sets\n",
            "type": "List (Stylesheet.RuleSet number) -> Stylesheet.Stylesheet number -> Stylesheet.Stylesheet number"
          },
          {
            "name": "withSelectors",
            "comment": " Add a list of selectors to a rule set, *replacing* any existing selectors\n",
            "type": "List Stylesheet.Selector -> Stylesheet.RuleSet number -> Stylesheet.RuleSet number"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-toolkit",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Toolkit.Operators",
        "comment": "\n\n## A small set of custom infix operators for maintaining a consistent, unidirectional coding style when working with lists, `Maybe` and `Result` values, and functions that take multiple arguments\n\nAt some point after I started working in Elm, it became clear to me that\ndebugging, refactoring, and extending existing code would be a lot easier if\nI conventionalized some stylistic choices so that code blocks would always be\nformatted in a consistent way. The built-in functional operators in Elm allow\nfor a lot of flexibility in how code is written, but some of that flexibility\nhas to be reined in if we want to emphasize readability as a virtue in\nfunctional programming.\n\nIn constructing some stylistic rules for my own code, the principle I decided to\nprioritize is what I call __unidirectionality__: *the idea that a programmer\nshould be able to readily discern the sequence of function calls in a code block\nby visually scanning the code from top to bottom, and then from left to right*.\n\nAccording to this principle, the \"data\" — that is, the value or set of values\nthat the function is called *on* — should always appear at the top of the code\nblock, with functions called on the data appearing on subsequent lines. A\nnested series of function calls can appear on one line, but more complex code\nchunks should be broken up into self-contained functions using `let..in`\nstatements. Nested list brackets and complex code chunks within list brackets\nshould generally be avoided.\n\nWith the above principle, the `|>` operator is used very liberally, the `>>`\noperator is used only in rare cases, and there is no use case for \"reverse\"\n(right-to-left) functional operators. In addition to liberal use of the `|>`\noperator, I have found use cases for a small set of custom operators that help\nto maintain consistent visual formatting and enhance readability of code blocks\nby reducing clutter. I have included them here in one module so that I can\neasily import them into other projects.\n\n\n# Appending Things\n@docs (|++), (|::), (:+:)\n\n# Function Application\n@docs (||>), (.|>), (:|>)\n\n# Error Handling with `Maybe` and `Result` Values\n@docs (?=), (!=), (?|>), (!|>)\n\n# Uncurry Operators\n@docs (@@|>), (@@@|>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "!=",
            "comment": " Forward operator for Result.withDefault\n\n    String.toInt \"123\" != 0   --> 123\n    String.toInt \"abc\" != 0   --> 0\n",
            "type": "Result.Result x a -> a -> a",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "!|>",
            "comment": " Forward operator for Result.map\n\n    Ok 4.0 !|> sqrt             --> Ok 2.0\n    Err \"bad input\" !|> sqrt    --> Err \"bad input\"\n\n",
            "type": "Result.Result x a -> (a -> value) -> Result.Result x value",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": ".|>",
            "comment": " Forward operator for List.map\n\n    [1,4,9] .|> sqrt    --> [1,2,3]\n",
            "type": "List a -> (a -> b) -> List b",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": ":+:",
            "comment": " Construct a list from the LHS and RHS; precedence is 5 and associativity is\nright (same as `++`)\n\n    1 :+: 2   --> [1, 2]\n",
            "type": "a -> a -> List a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": ":|>",
            "comment": " Wrap LHS in a list, then apply RHS function\n\n    1 :|> List.head   --> Just 1\n",
            "type": "a -> (List a -> b) -> b",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "?=",
            "comment": " Forward operator for Maybe.withDefault\n\n    Just 42 ?= 100    --> 42\n    Nothing ?= 100    --> 100\n",
            "type": "Maybe.Maybe a -> a -> a",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "?|>",
            "comment": " Forward operator for Maybe.map\n\n    Just 9 ?|> sqrt     --> Just 3\n    Nothing ?|> sqrt    --> Nothing\n\n",
            "type": "Maybe.Maybe a -> (a -> b) -> Maybe.Maybe b",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "@@@|>",
            "comment": " Forward operator for\n[`uncurry`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#uncurry)\nwith 3 parameters\n\n    (10, 20, 30) @@@|> clamp    --> 20\n",
            "type": "( a, b, c ) -> (a -> b -> c -> d) -> d",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "@@|>",
            "comment": " Forward operator for\n[`uncurry`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#uncurry)\nwith 2 parameters\n\n    (1,2) @@|> (+)    --> 3\n",
            "type": "( a, b ) -> (a -> b -> c) -> c",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "|++",
            "comment": " Append the RHS to the end of the LHS; equivalent to `++`, but\nleft-associative with precedence set to `0` (same as `|>`)\n\n    (\"ba\" |> String.reverse) ++ \"c\"       --> \"abc\"\n    \"ba\" |> String.reverse ++ \"c\"         --> ERROR\n    \"ba\" |> String.reverse |++ \"c\"        --> \"abc\"\n\n",
            "type": "appendable -> appendable -> appendable",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "|::",
            "comment": " Append the item on the RHS to the end of the list on the LHS\n\n    [1] |:: 2         --> [1,2]\n    [1] |:: 2 |:: 3   --> [1,2,3]\n",
            "type": "List a -> a -> List a",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "||>",
            "comment": " Forward function application with precedence set to 9. Allows you to avoid\nparentheses when you want the argument to appear before the function name in an\ninline expression. \n\n    1 ||> toString ++ 2 ||> toString    --> \"12\"\n",
            "type": "a -> (a -> b) -> b",
            "associativity": "left",
            "precedence": 9
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Toolkit.Helpers",
        "comment": "\n\n## Some generic helper functions for type conversion, error handling, and working with lists, tuples, and functions\n\nThis is my personal library of helper functions for writing clean,\nunidirectional, semantically pleasing Elm code. I've included all of these\nfunctions in one module so that I can easily import them into other projects.\n\n# String-to-Bool Conversion\n@docs toBool\n\n# Error Handling with Multiple `Maybe` Values\n@docs maybe2Tuple, maybe3Tuple, maybe4Tuple\n\n# Value-to-List and Value-From-List Conversions\n@docs wrapList, getNth\n\n# List-Tuple Conversions\n@docs take2Tuple, take3Tuple, take4Tuple, unzip3, unzip4, zip, zip3, zip4\n\n# Getting Values from Tuples\n@docs first3, second3, third3, first4, second4, third4, fourth4\n\n# Currying and Uncurrying\n@docs curry3, curry4, uncurry3, uncurry4\n\n# Applying Multiple Functions to Data\n@docs apply2, apply3, apply4, applyList\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply2",
            "comment": " Given a tuple containing two functions and a value accepted by both\nfunctions, return a tuple containing the two results\n",
            "type": "( a -> b, a -> c ) -> a -> ( b, c )"
          },
          {
            "name": "apply3",
            "comment": " Given a tuple containing three functions and a value accepted by all three\nfunctions, return a tuple containing the three results\n",
            "type": "( a -> b, a -> c, a -> d ) -> a -> ( b, c, d )"
          },
          {
            "name": "apply4",
            "comment": " Given a tuple containing four functions and a value accepted by all four\nfunctions, return a tuple containing the four results\n",
            "type": "( a -> b, a -> c, a -> d, a -> e ) -> a -> ( b, c, d, e )"
          },
          {
            "name": "applyList",
            "comment": " Given a list containing any number of functions and a value accepted by\nevery function in the list, return a list containing all of the results. Note\nthat to use `applyList`, all of the results must be of the same type, which is\nnot the case for the apply functions that return tuples.\n",
            "type": "List (a -> b) -> a -> List b"
          },
          {
            "name": "curry3",
            "comment": " [`curry`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#curry)\nwith 3 parameters\n",
            "type": "(( a, b, c ) -> d) -> a -> b -> c -> d"
          },
          {
            "name": "curry4",
            "comment": " [`curry`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#curry)\nwith 4 parameters\n",
            "type": "(( a, b, c, d ) -> e) -> a -> b -> c -> d -> e"
          },
          {
            "name": "first3",
            "comment": " Return the first value of a 3-tuple\n",
            "type": "( a, b, c ) -> a"
          },
          {
            "name": "first4",
            "comment": " Return the first value of a 4-tuple\n",
            "type": "( a, b, c, d ) -> a"
          },
          {
            "name": "fourth4",
            "comment": " Return the fourth value of a 4-tuple\n",
            "type": "( a, b, c, d ) -> d"
          },
          {
            "name": "getNth",
            "comment": " Get the value at the nth place of a list without converting the list to an\narray; returns `Nothing` if the list contains fewer than `n + 1` items, or if\n`n` is negative\n\n    getNth 0 [1, 3, 9, 27]    --> Just 1\n    getNth 3 [1, 3, 9, 27]    --> Just 27\n    getNth 4 [1, 3, 9, 27]    --> Nothing\n    getNth -1 [1, 3, 9, 27]   --> Nothing\n\n",
            "type": "Int -> List a -> Maybe.Maybe a"
          },
          {
            "name": "maybe2Tuple",
            "comment": " Given a 2-tuple of `Maybe` values, if both values are defined, return `Just`\nthe 2-tuple of values; otherwise, return `Nothing`\n\n    maybe2Tuple (Just 1, Just 2)    --> Just (1,2)\n    maybe2Tuple (Just 1, Nothing)    --> Nothing\n",
            "type": "( Maybe.Maybe a, Maybe.Maybe b ) -> Maybe.Maybe ( a, b )"
          },
          {
            "name": "maybe3Tuple",
            "comment": " Given a 3-tuple of `Maybe` values, if all three values are defined, return\n`Just` the 3-tuple of values; otherwise, return `Nothing`\n",
            "type": "( Maybe.Maybe a, Maybe.Maybe b, Maybe.Maybe c ) -> Maybe.Maybe ( a, b, c )"
          },
          {
            "name": "maybe4Tuple",
            "comment": " Given a 4-tuple of `Maybe` values, if all four values are defined, return\n`Just` the 4-tuple of values; otherwise, return `Nothing`\n",
            "type": "( Maybe.Maybe a, Maybe.Maybe b, Maybe.Maybe c, Maybe.Maybe d ) -> Maybe.Maybe ( a, b, c, d )"
          },
          {
            "name": "second3",
            "comment": " Return the second value of a 3-tuple\n",
            "type": "( a, b, c ) -> b"
          },
          {
            "name": "second4",
            "comment": " Return the second value of a 4-tuple\n",
            "type": "( a, b, c, d ) -> b"
          },
          {
            "name": "take2Tuple",
            "comment": " Returns the first two items in a list as a 2-tuple, or `Nothing` if the list\ncontains fewer than two items\n\n    take2Tuple [1,2]   --> Just (1,2)\n    take2Tuple [1,2,3]    --> Just (1,2)\n    take2Tuple [1]    --> Nothing\n",
            "type": "List a -> Maybe.Maybe ( a, a )"
          },
          {
            "name": "take3Tuple",
            "comment": " Returns the first three items in a list as a 3-tuple, or `Nothing` if the\nlist contains fewer than three items\n",
            "type": "List a -> Maybe.Maybe ( a, a, a )"
          },
          {
            "name": "take4Tuple",
            "comment": " Returns the first four items in a list as a 4-tuple, or `Nothing` if the\nlist contains fewer than four items\n",
            "type": "List a -> Maybe.Maybe ( a, a, a, a )"
          },
          {
            "name": "third3",
            "comment": " Return the third value of a 3-tuple\n",
            "type": "( a, b, c ) -> c"
          },
          {
            "name": "third4",
            "comment": " Return the third value of a 4-tuple\n",
            "type": "( a, b, c, d ) -> c"
          },
          {
            "name": "toBool",
            "comment": " Convert a boolean string to a `Bool`, ignoring case\n\n    toBool \"true\"     --> Ok True\n    toBool \"True\"     --> Ok True\n    toBool \"false\"    --> Ok False\n    toBool \"FALSE\"    --> Ok False\n    toBool \"blah\"     --> Err \"String argument must be 'true' or 'false' (case ignored)\"\n",
            "type": "String -> Result.Result String Bool"
          },
          {
            "name": "uncurry3",
            "comment": " [`uncurry`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#uncurry)\nwith 3 parameters\n",
            "type": "(a -> b -> c -> d) -> ( a, b, c ) -> d"
          },
          {
            "name": "uncurry4",
            "comment": " [`uncurry`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#uncurry)\nwith 4 parameters\n",
            "type": "(a -> b -> c -> d -> e) -> ( a, b, c, d ) -> e"
          },
          {
            "name": "unzip3",
            "comment": " Convert a 3-tuple of lists to a list of 3-tuples (see\n[List.unzip](package.elm-lang.org/packages/elm-lang/core/latest/List#unzip))\n",
            "type": "( List a, List b, List c ) -> List ( a, b, c )"
          },
          {
            "name": "unzip4",
            "comment": " Convert a 4-tuple of lists to a list of 4-tuples\n",
            "type": "( List a, List b, List c, List d ) -> List ( a, b, c, d )"
          },
          {
            "name": "wrapList",
            "comment": " Return a one-item list containing the argument\n\n    wrapList (\"key\", \"value\")\n\n    --> [ (\"key\", \"value\") ]\n",
            "type": "a -> List a"
          },
          {
            "name": "zip",
            "comment": " Convert a 2-tuple of lists to a list of 2-tuples\n\n    zip ([0,17,1337], [True,False,True])\n\n    --> [(0, True), (17, False), (1337, True)]\n\n",
            "type": "( List a, List b ) -> List ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " Convert a 3-tuple of lists to a list of 3-tuples\n",
            "type": "( List a, List b, List c ) -> List ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " Convert a 4-tuple of lists to a list of 4-tuples\n",
            "type": "( List a, List b, List c, List d ) -> List ( a, b, c, d )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "edvail/elm-polymer",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Polymer.Firebase",
        "comment": "\n@docs app\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "app",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Polymer.Attributes",
        "comment": "\n@docs attrForSelected\n@docs boolProperty\n@docs icon\n@docs label\n@docs path\n@docs selected\n@docs stringProperty\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "attrForSelected",
            "comment": " ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "boolProperty",
            "comment": " ",
            "type": "String -> Bool -> Html.Attribute msg"
          },
          {
            "name": "icon",
            "comment": " ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "label",
            "comment": " ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "path",
            "comment": " ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "selected",
            "comment": " ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "stringProperty",
            "comment": " ",
            "type": "String -> String -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Polymer.Paper",
        "comment": "\n#Material design status message for elements\n@docs badge\n#Common behaviors across the paper elements\n@docs behaviors\n#Material design button\n@docs button\n#Material design piece of paper with unique related data\n@docs card\n#A material design checkbox\n@docs checkbox\n#A Material Design dialog\n@docs dialog\n#Implements a behavior used for material design dialogs\n@docs dialogBehavior\n#A scrollable area used inside the material design dialog\n@docs dialogScrollable\n#A responsive drawer panel\n@docs drawerPanel\n#An element that works similarly to a native browser select\n@docs dropdownMenu\n#A material design floating action button\n@docs fab\n#A header and content wrapper for layout with headers\n@docs headerPanel\n#A material design icon button\n@docs iconButton\n#Material design text fields\n@docs input\n#A material-design styled list item\n@docs item, iconItem, itemBody\n#Implements an accessible material design listbox\n@docs listbox\n#A material design container that looks like a lifted sheet of paper\n@docs material\n#Implements an accessible material design menu\n@docs menu\n#A material design element that composes a trigger and a dropdown menu\n@docs menuButton\n#A material design progress bar\n@docs progress\n#A material design radio button\n@docs radioButton\n#A group of material design radio buttons\n@docs radioGroup\n#Adds a material design ripple to any container\n@docs ripple\n#A header bar with scrolling behavior\n@docs scrollHeaderPanel\n#A material design-style slider\n@docs slider\n#A material design spinner\n@docs spinner\n#Common (global) styles for Material Design elements.\n@docs styles\n#Material design tabs\n@docs tabs, tab\n#A material design notification toast\n@docs toast\n#A material design toggle button control\n@docs toggleButton\n#A material design toolbar that is easily customizable\n@docs toolbar\n#Material design tooltip popup for content\n@docs tooltip\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "badge",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "behaviors",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "button",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "card",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "checkbox",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dialog",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dialogBehavior",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dialogScrollable",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "drawerPanel",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dropdownMenu",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "fab",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "headerPanel",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "iconButton",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "iconItem",
            "comment": " `iconItem` is a convenience element to make an item with icon. It is an interactive list item with a fixed-width icon area, according to Material Design. This is useful if the icons are of varying widths, but you want the item bodies to line up. Use this like a <paper-item>. The child node with the attribute `itemIcon` is placed in the icon area.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "input",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "item",
            "comment": " Material design: Lists\n\n`item` is an interactive list item. By default, it is a horizontal flexbox.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "itemBody",
            "comment": " Use `itemBody` in a `item` or `iconItem` to make two- or three- line items. It is a flex item that is a vertical flexbox.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "listbox",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "material",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "menu",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "menuButton",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "progress",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "radioButton",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "radioGroup",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ripple",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "scrollHeaderPanel",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "slider",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "spinner",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "styles",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tab",
            "comment": " `tab` is styled to look like a tab. It should be used in conjunction with `tabs`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tabs",
            "comment": " Material design: Tabs\n\n`tabs` makes it easy to explore and switch between different views or functional aspects of an app, or to browse categorized data sets.\n\nUse selected property to get or set the selected tab.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "toast",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "toggleButton",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "toolbar",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tooltip",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Polymer.Events",
        "comment": "\n@docs onIronSelect\n@docs onSelectedChanged\n@docs onTap\n@docs onValueChanged\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onIronSelect",
            "comment": " ",
            "type": "(String -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onSelectedChanged",
            "comment": " ",
            "type": "(String -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onTap",
            "comment": " ",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onValueChanged",
            "comment": " ",
            "type": "(String -> msg) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Polymer.App",
        "comment": "\n@docs drawer\n@docs drawerLayout\n@docs header\n@docs headerLayout\n@docs route\n@docs toolbar\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "drawer",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "drawerLayout",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "header",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "headerLayout",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "route",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "toolbar",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Polymer.Iron",
        "comment": "\n@docs selector\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "selector",
            "comment": " ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "eeue56/elm-flat-matrix",
    "version": "3.0.2",
    "docs": [
      {
        "name": "Matrix.Extra",
        "comment": " Extra methods for Matricies\n\n# Element-wise computation\n@docs add, subtract, hadamard, power\n\n# Syntax aliases\n@docs (.*), (.^)\n\n# Interacting with other cells\n@docs neighbours, indexedNeighbours, diagonals, neighboursFour\n\n@docs prettyPrint\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": ".*",
            "comment": "\nelement wise multiplication\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": ".^",
            "comment": "\nelement wise power\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "add",
            "comment": "\nadd two matricies together element by element and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "diagonals",
            "comment": "\nGet the diagonal-neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "hadamard",
            "comment": "\ntake the product of every corresponding element in two matricies and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "indexedNeighbours",
            "comment": "\nGet the neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List ( ( Int, Int ), a )"
          },
          {
            "name": "neighbours",
            "comment": "\nGet the neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "neighboursFour",
            "comment": "\nGet the non-diagonal neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "power",
            "comment": "\nelement-wise power of elements\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "prettyPrint",
            "comment": "\nPrint out a matrix into a table\n",
            "type": "Matrix.Matrix a -> Html.Html msg"
          },
          {
            "name": "subtract",
            "comment": "\nsubtract two matricies together element by element and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Matrix",
        "comment": "\nA matrix implemention for Elm.\nInternally it uses a flat array for speed reasons.\n\n# The matrix type\n\n@docs Matrix\n\n# Creating a matrix\n\n@docs repeat, fromList, empty\n\n# Get matrix dimensions\n\n@docs height, width\n\n# Dealing with individual elements\n\n@docs get, set, update\n\n# Appending to an Matrix\n\n@docs concatVertical, concatHorizontal\n\n# Get rows/columns\n\n@docs getRow, getColumn\n\n# Applying functions\n@docs filter, map, map2, indexedMap, toIndexedArray\n",
        "aliases": [
          {
            "name": "Matrix",
            "comment": "\n  Matrix a has a given size, and data contained within\n",
            "args": [
              "a"
            ],
            "type": "{ size : ( Int, Int ), data : Array.Array a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "concatHorizontal",
            "comment": " Append a matrix to another matrix horizontally and return the result. Return Nothing if the heights don't match\n",
            "type": "Matrix.Matrix a -> Matrix.Matrix a -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "concatVertical",
            "comment": " Append a matrix to another matrix vertically and return the result. Return Nothing if the widths don't match\n",
            "type": "Matrix.Matrix a -> Matrix.Matrix a -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "empty",
            "comment": " Create an empty matrix\n",
            "type": "Matrix.Matrix a"
          },
          {
            "name": "filter",
            "comment": "\n  Keep only elements that return `True` when passed to the given function f\n",
            "type": "(a -> Bool) -> Matrix.Matrix a -> Array.Array a"
          },
          {
            "name": "fromList",
            "comment": "\n  Create a matrix from a list of lists.\n  If the lists within the list are not consistently sized, return `Nothing`\n  Otherwise return a matrix with the size as the size of the outer and nested lists\n",
            "type": "List (List a) -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "get",
            "comment": "\n  Get a value from a given `x y` and return `Just v` if it exists\n  Otherwise `Nothing`\n",
            "type": "Int -> Int -> Matrix.Matrix a -> Maybe.Maybe a"
          },
          {
            "name": "getColumn",
            "comment": " Get a row at a given i\n",
            "type": "Int -> Matrix.Matrix a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "getRow",
            "comment": " Get a row at a given j\n",
            "type": "Int -> Matrix.Matrix a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "height",
            "comment": " Height of a given matrix\n",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "indexedMap",
            "comment": "\n  Apply a function, taking the `x, y` of every element in the matrix\n",
            "type": "(Int -> Int -> a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "map",
            "comment": "\n  Apply a function of every element in the matrix\n",
            "type": "(a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two matricies at once\n",
            "type": "(a -> b -> c) -> Matrix.Matrix a -> Matrix.Matrix b -> Maybe.Maybe (Matrix.Matrix c)"
          },
          {
            "name": "repeat",
            "comment": "\n  Create a matrix of a given size `x y` with a default value of `v`\n",
            "type": "Int -> Int -> a -> Matrix.Matrix a"
          },
          {
            "name": "set",
            "comment": "\n  Set a value at a given `i, j` in the matrix and return the new matrix\n  If the `i, j` is out of bounds then return the unmodified matrix\n",
            "type": "Int -> Int -> a -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "toIndexedArray",
            "comment": " Convert a matrix to an indexed array\n",
            "type": "Matrix.Matrix a -> Array.Array ( ( Int, Int ), a )"
          },
          {
            "name": "update",
            "comment": "\n  Update an element at `x, y` with the given update function\n  If out of bounds, return the matrix unchanged\n",
            "type": "Int -> Int -> (a -> a) -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "width",
            "comment": " Width of a given matrix\n",
            "type": "Matrix.Matrix a -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/basics-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Basics.Extra",
        "comment": " Additional basic functions.\n\n# Tuples\n@docs (=>), swap\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "=>",
            "comment": " A shorthand for writing 2-tuples. Very commonly used when expressing key/value pairs\nin CSS or Json encoders.\n",
            "type": "a -> b -> ( a, b )"
          },
          {
            "name": "swap",
            "comment": " Swaps the elements in a pair.\n\n    swap ( 1, 2 ) == ( 2, 1 )\n\n",
            "type": "( a, b ) -> ( b, a )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/dict-extra",
    "version": "1.3.1",
    "docs": [
      {
        "name": "Dict.Extra",
        "comment": " Convenience functions for working with `Dict`\n\n# List operations\n@docs groupBy, fromListBy\n\n# Manipulation\n@docs removeWhen, removeMany, keepOnly, mapKeys\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromListBy",
            "comment": " Create a dictionary from a list of values, by passing a function that can get a key from any such value.\nIf the function does not return unique keys, earlier values are discarded.\nThis can, for instance, be useful when constructing Dicts from a List of records with `id` fields:\n\n    jack = {id=2, name=\"Jack\"}\n    jill = {id=1, name=\"Jill\"}\n    fromListBy .id [jack, jill] == Dict.fromList [(1, jack), (2, jill)]\n",
            "type": "(a -> comparable) -> List a -> Dict.Dict comparable a"
          },
          {
            "name": "groupBy",
            "comment": " Takes a key-fn and a list.\nCreates a `Dict` which maps the key to a list of matching elements.\n\n    mary = {id=1, name=\"Mary\"}\n    jack = {id=2, name=\"Jack\"}\n    jill = {id=1, name=\"Jill\"}\n    groupBy .id [mary, jack, jill] == Dict.fromList [(1, [jill, mary]), (2, [jack])]\n",
            "type": "(a -> comparable) -> List a -> Dict.Dict comparable (List a)"
          },
          {
            "name": "keepOnly",
            "comment": " Keep a key-value pair if its key appears in the set.\n",
            "type": "Set.Set comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "mapKeys",
            "comment": " Apply a function to all keys in a dictionary\n",
            "type": "(comparable -> comparable) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "removeMany",
            "comment": " Remove a key-value pair if its key appears in the set.\n",
            "type": "Set.Set comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "removeWhen",
            "comment": " Remove elements which satisfies the predicate.\n\n    removeWhen (\\c v -> v == 1) Dict.fromList [(\"Mary\", 1), (\"Jack\", 2), (\"Jill\", 1)] == Dict.fromList [(\"Jack\", 2)]\n",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/easing-functions",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Ease",
        "comment": " An easing function is used in animation to make a transition between two values appear more lifelike or interesting.\nEasing functions can make sliding panels or bouncing menus appear to be physical objects.\n\nAll easing functions expect inputs to be bewteen zero and one, and will typically output in that range. Easing \"in\"\nhappens at the start of the transition, easing \"out\" at the end, and \"inOut\" on both sides. The functions provided here\nare meant to match the graphical examples on [easings.net](http://easings.net/).\n\n```elm\nimport Ease\nn = 10\n\nList.map (\\i -> Ease.inQuad (i/n)) [0..n]\n> [0, 0.01, 0.04, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1]\n\nList.map (\\i -> Ease.outCubic (i/n)) [0..n]\n> [0, 0.271, 0.488, 0.657, 0.784, 0.875, 0.936, 0.973, 0.992, 0.999, 1]\n```\n\n# Easing functions\n@docs Easing,\n      bezier,\n      linear,\n      inQuad, outQuad, inOutQuad,\n      inCubic, outCubic, inOutCubic,\n      inQuart, outQuart, inOutQuart,\n      inQuint, outQuint, inOutQuint,\n      inSine, outSine, inOutSine,\n      inExpo, outExpo, inOutExpo,\n      inCirc, outCirc, inOutCirc,\n      inBack, outBack, inOutBack,\n      inBounce, outBounce, inOutBounce,\n      inElastic, outElastic, inOutElastic\n\n# Combining easing functions\n@docs reverse, flip , inOut, retour\n",
        "aliases": [
          {
            "name": "Easing",
            "comment": " A type alias to make it easier to refer to easing functions.\n",
            "args": [],
            "type": "Float -> Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "bezier",
            "comment": " A cubic bezier function using 4 parameters: x and y position of first control point, and x and y position of second control point.\n\nSee [here](http://greweb.me/glsl-transition/example/ \"glsl-transitions\") for examples or [here](http://cubic-bezier.com/ \"tester\") to test.\n",
            "type": "Float -> Float -> Float -> Float -> Ease.Easing"
          },
          {
            "name": "flip",
            "comment": " Flip an easing function. A transition that starts fast and continues slow now starts slow and continues fast.\n\nGraphically, this flips the function around x = 0.5 and then around y = 0.5.\n",
            "type": "Ease.Easing -> Ease.Easing"
          },
          {
            "name": "inBack",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inBounce",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inCirc",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inCubic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inElastic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inExpo",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOut",
            "comment": " Makes an easing function using two other easing functions. The first half the first `Easing` function is used, the other half the second.\n",
            "type": "Ease.Easing -> Ease.Easing -> Ease.Easing"
          },
          {
            "name": "inOutBack",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutBounce",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutCirc",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutCubic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutElastic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutExpo",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutQuad",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutQuart",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutQuint",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutSine",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inQuad",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inQuart",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inQuint",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inSine",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "linear",
            "comment": " A linear ease, equal to the identity function. Linear eases often appear mechanical and unphysical.\n",
            "type": "Ease.Easing"
          },
          {
            "name": "outBack",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outBounce",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outCirc",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outCubic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outElastic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outExpo",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outQuad",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outQuart",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outQuint",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outSine",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "retour",
            "comment": " Makes an `Easing` function go to the end first and then back to the start. A transition that starts low and goes\nhigh now starts low, goes high at halfway, and then goes low again.\n",
            "type": "Ease.Easing -> Ease.Easing"
          },
          {
            "name": "reverse",
            "comment": " Reverse an `Easing` function. If an object follows an easing function and then the reversed easing function, it\nretraces exactly the same path, backwards.\n\nGraphically, this flips the function around x = 0.5.\n",
            "type": "Ease.Easing -> Ease.Easing"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-check",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Check.Test",
        "comment": " This module provides integration with\n[`elm-test`](http://package.elm-lang.org/packages/deadfoxygrandpa/elm-test/latest/).\n\n# Convert to Tests\n@docs evidenceToTest\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "evidenceToTest",
            "comment": " Convert elm-check's Evidence into an elm-test Test. You can use elm-test's\nrunners to view the results of your property-based tests, alongside the results\nof unit tests.\n",
            "type": "Check.Evidence -> Test.Test"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Check",
        "comment": "\n\nA toolkit for writing property-based tests, which take the form of `Claim`s. A\n`Claim` is made using the provided domain-specific language (DSL). A single\n`Claim` can be written in one of these ways:\n\n1. claim - (string) - that - (actual) - is - (expected) - for - (producer)\n2. claim - (string) - true - (predicate) - for - (producer)\n3. claim - (string) - false - (predicate) - for - (producer)\n\n\nFor example,\n\n    claim_multiplication_identity =\n      claim\n        \"Multiplying by one does not change a number\"\n      `that`\n        (\\n -> n * 1)\n      `is`\n        identity\n      `for`\n        int\n\nSee the README for more information.\n\n*Warning: The DSL follows a very strict format. Deviating from this format will\nyield potentially unintelligible type errors. The following functions have\nhorrendous type signatures and you are better off ignoring them.*\n\n@docs claim, that, is, for, true, false\n\n# Group Claims\n@docs suite\n\n# Check a Claim\n@docs quickCheck, check\n\n# Types\n@docs Claim\n\n## Evidence\nThe results of checking a claim are given back in the types defined here. You\ncan examine them yourself, or see `Check.Test` to convert them into tests to use\nwith `elm-check`'s runners.\n@docs Evidence, UnitEvidence, SuccessOptions, FailureOptions\n",
        "aliases": [
          {
            "name": "FailureOptions",
            "comment": " FailureOptions is the concrete type returned in case evidence was found\ndisproving a Claim.\n\nFailureOptions contains:\n1. the `name` of the claim\n2. the minimal `counterExample` which serves as evidence that the claim is false\n3. the value `expected` to be returned by the claim\n4. the `actual` value returned by the claim\n5. the `seed` used in order to reproduce the results\n6. the number of checks performed\n7. the number of shrinking operations performed\n8. the original `counterExample`, `actual`, and `expected` values found prior\nto performing the shrinking operations.\n",
            "args": [],
            "type": "{ name : String , counterExample : String , actual : String , expected : String , original : { counterExample : String , actual : String , expected : String } , seed : Random.Seed , numberOfChecks : Int , numberOfShrinks : Int }"
          },
          {
            "name": "SuccessOptions",
            "comment": " SuccessOptions is the concrete type returned in case there is no evidence\nfound disproving a Claim.\n\nSuccessOptions contains:\n1. the `name` of the claim\n2. the number of checks performed\n3. the `seed` used in order to reproduce the check.\n",
            "args": [],
            "type": "{ name : String, seed : Random.Seed, numberOfChecks : Int }"
          },
          {
            "name": "UnitEvidence",
            "comment": " UnitEvidence is the concrete type returned by checking a single claim.\nA UnitEvidence can easily be converted to an assertion or can be considered\nas the result of an assertion.\n",
            "args": [],
            "type": "Result.Result Check.FailureOptions Check.SuccessOptions"
          }
        ],
        "types": [
          {
            "name": "Claim",
            "comment": " A Claim is an object that makes a claim of truth about a system.\nA claim is either a function which yields evidence regarding the claim\nor a list of such claims.\n",
            "args": [],
            "cases": [
              [
                "Claim",
                [
                  "String",
                  "Int -> Random.Seed -> Check.Evidence"
                ]
              ],
              [
                "Suite",
                [
                  "String",
                  "List Check.Claim"
                ]
              ]
            ]
          },
          {
            "name": "Evidence",
            "comment": " Evidence is the output from checking a claim or multiple claims.\n",
            "args": [],
            "cases": [
              [
                "Unit",
                [
                  "Check.UnitEvidence"
                ]
              ],
              [
                "Multiple",
                [
                  "String",
                  "List Check.Evidence"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "check",
            "comment": " Check a claim and produce evidence.\n\nTo check a claim, you need to provide the number of checks to perform, and a\nrandom seed. You can set up a CI server to run through a large number of checks\nwith a randomized seed.\n\n    aggressiveCheck : Claim -> Evidence\n    aggressiveCheck =\n      check 2000 (Random.initialSeed 0xFFFF)\n",
            "type": "Int -> Random.Seed -> Check.Claim -> Check.Evidence"
          },
          {
            "name": "claim",
            "comment": "\n",
            "type": "String -> (a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "false",
            "comment": " ",
            "type": "((a -> Bool) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "for",
            "comment": " ",
            "type": "(Check.Producer.Producer a -> Check.Claim) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "is",
            "comment": " ",
            "type": "((a -> b) -> Check.Producer.Producer a -> Check.Claim) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "quickCheck",
            "comment": " Quickly check a claim.\n\nThis function is very useful when checking claims in local development.\n`quickCheck` will perform 100 checks and use `Random.initialSeed 1` as the\nrandom seed.\n",
            "type": "Check.Claim -> Check.Evidence"
          },
          {
            "name": "suite",
            "comment": " Group a list of claims into a suite. This is very useful in order to\ngroup similar claims together.\n\n    suite nameOfSuite listOfClaims\n\nSuites can be nested as deep as you like.\n\n    suite \"All tests\"\n      [ someClaim\n      , suite \"Regression tests\" listOfClaims\n      ]\n",
            "type": "String -> List Check.Claim -> Check.Claim"
          },
          {
            "name": "that",
            "comment": " ",
            "type": "((a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim) -> (a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "true",
            "comment": " ",
            "type": "((a -> Bool) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Check.Producer",
        "comment": " This is a library of `Producer`s you can use to supply values to your tests.\nYou can typically pick out which ones you need according to their types.\n\nA `Producer a` knows how to create values of type `a`. It can create them\nrandomly, and it can shrink them to more minimal values. Producers can be\nfiltered and mapped over.\n\n# Common Producers\n@docs bool, int, rangeInt, float, rangeFloat, percentage, string, maybe, result, list, array\n\n## Tuple Producers\nIf your expected and actual functions need more than one input, pass them in as a tuple.\n@docs tuple, tuple3, tuple4, tuple5\n\n# Working with Producers\n@docs Producer, filter, convert, map\n\n# Uncommon Producers\n@docs unit, order\n\n## Character Producers\n@docs char, upperCaseChar, lowerCaseChar, ascii, unicode\n\n",
        "aliases": [
          {
            "name": "Producer",
            "comment": " An Producer type is a\n[Random](http://package.elm-lang.org/packages/elm-lang/core/latest/Random)\n`Generator` paired with a shrinking strategy, or `Shrinker`. Shrinkers are defined\nin [`elm-community/shrink`](http://package.elm-lang.org/packages/elm-community/shrink/latest/).\nYou will need to be familiar with both libraries to write custom producers for your own types.\nHere is an example for a record:\n\n    type alias Position =\n        { x : Int, y : Int }\n\n\n    position : Producer Position\n    position =\n        Producer\n            (Random.map2 Position (Random.int 0 1919) (Random.int 0 1079))\n            (\\{ x, y } -> Shrink.map Position (Shrink.int x) `Shrink.andMap` (Shrink.int y))\n\nHere is an example for a union type:\n\n    type Question\n        = Name String\n        | Age Int\n\n\n    question =\n        let\n            generator =\n                Random.bool `Random.andThen` (\\b ->\n                    if b then\n                        Random.map Name string.generator\n                    else\n                        Random.map Age (Random.int 0 120)\n                 )\n\n            shrinker question =\n                case question of\n                    Name n ->\n                        Shrink.string n |> Shrink.map Name\n\n                    Age i ->\n                        Shrink.int i |> Shrink.map Age\n        in\n            Producer generator shrinker\n",
            "args": [
              "a"
            ],
            "type": "{ generator : Random.Generator a, shrinker : Shrink.Shrinker a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Given a producer of a type, create a producer of an array of that type.\nGenerates random arrays of varying length, favoring shorter arrays.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (Array.Array a)"
          },
          {
            "name": "ascii",
            "comment": " A producer for ASCII char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "bool",
            "comment": " A producer for bool values.\n",
            "type": "Check.Producer.Producer Bool"
          },
          {
            "name": "char",
            "comment": " A producer for char values. Generates random ascii chars disregarding the control\ncharacters.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "convert",
            "comment": " Convert the output of one producer to another type. This is useful if\nyou're testing a function that expects a large model record, but you only need\nto randomize a few fields. You might do this several different ways for a single\nmodel, so you generate and shrink only the fields relevant to each test.\n\n    type alias Person =\n      { first : String, last : String, age : String }\n\n    spy : Producer Person\n    spy = convert (\\age -> Person \"James\" \"Bond\" age) .age (rangeInt 0 120)\n\nIn order for shrinking to work, you need to pass an inverse function of the\nfunction being mapped.\n",
            "type": "(a -> b) -> (b -> a) -> Check.Producer.Producer a -> Check.Producer.Producer b"
          },
          {
            "name": "filter",
            "comment": " Filter the values from a Producer. The resulting Producer will only generate\nrandom test values or shrunken values that satisfy the predicate. The predicate\nmust be satisfiable.\n",
            "type": "(a -> Bool) -> Check.Producer.Producer a -> Check.Producer.Producer a"
          },
          {
            "name": "float",
            "comment": " A producer for float values. It will never produce `NaN`, `Infinity`, or `-Infinity`.\n",
            "type": "Check.Producer.Producer Float"
          },
          {
            "name": "int",
            "comment": " A producer for int values.\n",
            "type": "Check.Producer.Producer Int"
          },
          {
            "name": "list",
            "comment": " Given a producer of a type, create a producer of a list of that type.\nGenerates random lists of varying length, favoring shorter lists.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (List a)"
          },
          {
            "name": "lowerCaseChar",
            "comment": " A producer for lowercase char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "map",
            "comment": " Map a function over an producer. This works exactly like `convert`,\nexcept it does not require an inverse function, and consequently does no\nshrinking.\n",
            "type": "(a -> b) -> Check.Producer.Producer a -> Check.Producer.Producer b"
          },
          {
            "name": "maybe",
            "comment": " Given a producer of a type, create a producer of a maybe for that type.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (Maybe.Maybe a)"
          },
          {
            "name": "order",
            "comment": " A producer for order values.\n",
            "type": "Check.Producer.Producer Basics.Order"
          },
          {
            "name": "percentage",
            "comment": " A producer for percentage values. Generates random floats between `0.0` and\n`1.0`.\n",
            "type": "Check.Producer.Producer Float"
          },
          {
            "name": "rangeFloat",
            "comment": " A producer for float values within between a given minimum and maximum\nvalue, inclusive. Shrunken values will also be within the range.\n",
            "type": "Float -> Float -> Check.Producer.Producer Float"
          },
          {
            "name": "rangeInt",
            "comment": " A producer for int values within between a given minimum and maximum value,\ninclusive. Shrunken values will also be within the range.\n",
            "type": "Int -> Int -> Check.Producer.Producer Int"
          },
          {
            "name": "result",
            "comment": " Given producers for an error type and a success type, createa a producer for\na result.\n",
            "type": "Check.Producer.Producer error -> Check.Producer.Producer value -> Check.Producer.Producer (Result.Result error value)"
          },
          {
            "name": "string",
            "comment": " A producer for string values. Generates random printable ascii strings whose\nlength is between 0 and 10.\n",
            "type": "Check.Producer.Producer String"
          },
          {
            "name": "tuple",
            "comment": " Turn a tuple of producers into a producer of tuples.\n",
            "type": "( Check.Producer.Producer a, Check.Producer.Producer b ) -> Check.Producer.Producer ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " Turn a 3-tuple of producers into a producer of 3-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c ) -> Check.Producer.Producer ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " Turn a 4-tuple of producers into a producer of 4-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c , Check.Producer.Producer d ) -> Check.Producer.Producer ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " Turn a 5-tuple of producers into a producer of 5-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c , Check.Producer.Producer d , Check.Producer.Producer e ) -> Check.Producer.Producer ( a, b, c, d, e )"
          },
          {
            "name": "unicode",
            "comment": " A producer for unicode char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "unit",
            "comment": " A producer for the unit value. Unit is a type with only one value, commonly\nused as a placeholder.\n",
            "type": "Check.Producer.Producer ()"
          },
          {
            "name": "upperCaseChar",
            "comment": " A producer for uppercase char values.\n",
            "type": "Check.Producer.Producer Char"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-test",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Test.Runner",
        "comment": " A collection of functions used by authors of test runners. To run your\nown tests, you should use these runners; see the `README` for more information.\n\n## Runner\n\n@docs Runner, fromTest\n\n## Runnable\n\n@docs Runnable, run\n\n## Formatting\n\n@docs formatLabels\n",
        "aliases": [],
        "types": [
          {
            "name": "Runnable",
            "comment": " An unevaluated test. Run it with [`run`](#run) to evaluate it into a\nlist of `Expectation`s.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Runner",
            "comment": " A structured test runner, incorporating:\n\n* The expectations to run\n* The hierarchy of description strings that describe the results\n",
            "args": [],
            "cases": [
              [
                "Runnable",
                [
                  "Test.Runner.Runnable"
                ]
              ],
              [
                "Labeled",
                [
                  "String",
                  "Test.Runner.Runner"
                ]
              ],
              [
                "Batch",
                [
                  "List Test.Runner.Runner"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "formatLabels",
            "comment": " A standard way to format descriptiona and test labels, to keep things\nconsistent across test runner implementations.\n\nThe HTML, Node, String, and Log runners all use this.\n\nWhat it does:\n\n* drop any labels that are empty strings\n* format the first label differently from the others\n* reverse the resulting list\n\n    [ \"the actual test that failed\"\n    , \"nested description failure\"\n    , \"top-level description failure\"\n    ]\n        |> formatLabels ((++) \"↓ \") ((++) \"✗ \")\n\n    {-\n        [ \"↓ top-level description failure\"\n        , \"↓ nested description failure\"\n        , \"✗ the actual test that failed\"\n        ]\n    -}\n\n",
            "type": "(String -> format) -> (String -> format) -> List String -> List format"
          },
          {
            "name": "fromTest",
            "comment": " Convert a `Test` into a `Runner`.\n\nIn order to run any fuzz tests that the `Test` may have, it requires a default run count as well\nas an initial `Random.Pcg.Seed`. `100` is a good run count. To obtain a good random seed, pass a\nrandom 32-bit integer to `Random.Pcg.initialSeed`. You can obtain such an integer by running\n`Math.floor(Math.random()*0xFFFFFFFF)` in Node. It's typically fine to hard-code this value into\nyour Elm code; it's easy and makes your tests reproducible.\n",
            "type": "Int -> Random.Pcg.Seed -> Test.Test -> Test.Runner.Runner"
          },
          {
            "name": "run",
            "comment": " Evaluate a [`Runnable`](#Runnable) to get a list of `Expectation`s.\n",
            "type": "Test.Runner.Runnable -> List Expect.Expectation"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Test",
        "comment": " A module containing functions for creating and managing tests.\n\n@docs Test, test\n\n## Organizing Tests\n\n@docs describe, concat, filter\n\n## Fuzz Testing\n\n@docs fuzz, fuzz2, fuzz3, fuzz4, fuzz5, fuzzWith, FuzzOptions\n",
        "aliases": [
          {
            "name": "FuzzOptions",
            "comment": " Options [`fuzzWith`](#fuzzWith) accepts. Currently there is only one but this\nAPI is designed so that it can accept more in the future.\n\n### `runs`\n\nThe number of times to run each fuzz test. (Default is 100.)\n\n    import Test exposing (fuzzWith)\n    import Fuzz exposing (list, int)\n    import Expect\n\n\n    fuzzWith { runs = 350 } (list int) \"List.length should always be positive\" <|\n        -- This anonymous function will be run 350 times, each time with a\n        -- randomly-generated fuzzList value. (It will always be a list of ints\n        -- because of (list int) above.)\n        \\fuzzList ->\n            fuzzList\n                |> List.length\n                |> Expect.atLeast 0\n",
            "args": [],
            "type": "{ runs : Int }"
          },
          {
            "name": "Test",
            "comment": " A test which has yet to be evaluated. When evaluated, it produces one\nor more [`Expectation`](../Expect#Expectation)s.\n\nSee [`test`](#test) and [`fuzz`](#fuzz) for some ways to create a `Test`.\n",
            "args": [],
            "type": "Test.Internal.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "concat",
            "comment": " Run each of the given tests.\n\n    concat [ testDecoder, testSorting ]\n",
            "type": "List Test.Test -> Test.Test"
          },
          {
            "name": "describe",
            "comment": " Apply a description to a list of tests.\n\n    import Test exposing (describe, test, fuzz)\n    import Fuzz exposing (int)\n    import Expect\n\n\n    describe \"List\"\n        [ describe \"reverse\"\n            [ test \"has no effect on an empty list\" <|\n                \\() ->\n                    List.reverse []\n                        |> Expect.toEqual []\n            , fuzz int \"has no effect on a one-item list\" <|\n                \\num ->\n                     List.reverse [ num ]\n                        |> Expect.toEqual [ num ]\n            ]\n        ]\n",
            "type": "String -> List Test.Test -> Test.Test"
          },
          {
            "name": "filter",
            "comment": " Remove any test unless its description satisfies the given predicate\nfunction. Nested descriptions added with [`describe`](#describe) are not considered.\n\n    describe \"String.reverse\"\n        [ test \"has no effect on a palindrome\" testGoesHere\n        , test \"reverses a known string\" anotherTest\n        , fuzz string \"restores the original string if you run it again\" oneMore\n        ]\n            |> Test.filter (String.contains \"original\")\n\n    -- only runs the final test\n\nYou can use this to focus on a specific test or two, silencing the failures of\ntests you don't want to work on yet, and then remove the call to `Test.filter`\nafter you're done working on the tests.\n",
            "type": "(String -> Bool) -> Test.Test -> Test.Test"
          },
          {
            "name": "fuzz",
            "comment": " Take a function that produces a test, and calls it several (usually 100) times, using a randomly-generated input\nfrom a [`Fuzzer`](http://package.elm-lang.org/packages/elm-community/elm-test/latest/Fuzz) each time. This allows you to\ntest that a property that should always be true is indeed true under a wide variety of conditions. The function also\ntakes a string describing the test.\n\nThese are called \"[fuzz tests](https://en.wikipedia.org/wiki/Fuzz_testing)\" because of the randomness.\nYou may find them elsewhere called [property-based tests](http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html),\n[generative tests](http://www.pivotaltracker.com/community/tracker-blog/generative-testing), or\n[QuickCheck-style tests](https://en.wikipedia.org/wiki/QuickCheck).\n\n    import Test exposing (fuzz)\n    import Fuzz exposing (list, int)\n    import Expect\n\n\n    fuzz (list int) \"List.length should always be positive\" <|\n        -- This anonymous function will be run 100 times, each time with a\n        -- randomly-generated fuzzList value.\n        \\fuzzList ->\n            fuzzList\n                |> List.length\n                |> Expect.atLeast 0\n",
            "type": "Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz2",
            "comment": " Run a [fuzz test](#fuzz) using two random inputs.\n\nThis is a convenience function that lets you skip calling [`Fuzz.tuple`](../Fuzz#tuple).\n\nSee [`fuzzWith`](#fuzzWith) for an example of writing this in tuple style.\n\n    import Test exposing (fuzz2)\n    import Fuzz exposing (list, int)\n\n\n    fuzz2 (list int) int \"List.reverse never influences List.member\" <|\n        \\nums target ->\n            List.member target (List.reverse nums)\n                |> Expect.toEqual (List.member target nums)\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> String -> (a -> b -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz3",
            "comment": " Run a [fuzz test](#fuzz) using three random inputs.\n\nThis is a convenience function that lets you skip calling [`Fuzz.tuple3`](../Fuzz#tuple3).\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> String -> (a -> b -> c -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz4",
            "comment": " Run a [fuzz test](#fuzz) using four random inputs.\n\nThis is a convenience function that lets you skip calling [`Fuzz.tuple4`](../Fuzz#tuple4).\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> String -> (a -> b -> c -> d -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz5",
            "comment": " Run a [fuzz test](#fuzz) using five random inputs.\n\nThis is a convenience function that lets you skip calling [`Fuzz.tuple5`](../Fuzz#tuple5).\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> Fuzz.Fuzzer e -> String -> (a -> b -> c -> d -> e -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzzWith",
            "comment": " Run a [`fuzz`](#fuzz) test with the given [`FuzzOptions`](#FuzzOptions).\n\nNote that there is no `fuzzWith2`, but you can always pass more fuzz values in\nusing [`Fuzz.tuple`](../Fuzz#tuple), [`Fuzz.tuple3`](../Fuzz#tuple3),\nfor example like this:\n\n    import Test exposing (fuzzWith)\n    import Fuzz exposing (tuple, list, int)\n    import Expect\n\n\n    fuzzWith { runs = 4200 }\n        (tuple ( list int, int ))\n        \"List.reverse never influences List.member\" <|\n            \\(nums, target) ->\n                List.member target (List.reverse nums)\n                    |> Expect.toEqual (List.member target nums)\n",
            "type": "Test.FuzzOptions -> Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "test",
            "comment": " Return a [`Test`](#Test) that evaluates a single\n[`Expectation`](../Expect#Expectation).\n\n    import Test exposing (fuzz)\n    import Expect\n\n\n    test \"the empty list has 0 length\" <|\n        \\() ->\n            List.length []\n                |> Expect.toEqual 0\n",
            "type": "String -> (() -> Expect.Expectation) -> Test.Test"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Fuzz",
        "comment": " This is a library of *fuzzers* you can use to supply values to your fuzz\ntests. You can typically pick out which ones you need according to their types.\n\nA `Fuzzer a` knows how to create values of type `a` in two different ways. It\ncan create them randomly, so that your test's expectations are run against many\nvalues. Fuzzers will often generate edge cases likely to find bugs. If the\nfuzzer can make your test fail, it also knows how to \"shrink\" that failing input\ninto more minimal examples, some of which might also cause the tests to fail. In\nthis way, fuzzers can usually find the smallest or simplest input that\nreproduces a bug.\n\n## Common Fuzzers\n@docs bool, int, intRange, float, floatRange, percentage, string, maybe, result, list, array\n\n## Working with Fuzzers\n@docs Fuzzer, constant, map, map2, map3,map4, map5, andMap, andThen, frequency, frequencyOrCrash\n\n## Tuple Fuzzers\nInstead of using a tuple, consider using `fuzzN`.\n@docs tuple, tuple3, tuple4, tuple5\n\n## Uncommon Fuzzers\n@docs custom, char, unit, order\n\n",
        "aliases": [
          {
            "name": "Fuzzer",
            "comment": " The representation of fuzzers is opaque. Conceptually, a `Fuzzer a`\nconsists of a way to randomly generate values of type `a`, and a way to shrink\nthose values.\n",
            "args": [
              "a"
            ],
            "type": "Fuzz.Internal.Fuzzer a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Map over many fuzzers. This can act as mapN for N > 5.\n\nThe argument order is meant to accomodate chaining:\n\n    map f aFuzzer\n        |> andMap anotherFuzzer\n        |> andMap aThirdFuzzer\n\nNote that shrinking may be better using mapN.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (a -> b) -> Fuzz.Fuzzer b"
          },
          {
            "name": "andThen",
            "comment": " Create a fuzzer based on the result of another fuzzer.\n",
            "type": "(a -> Fuzz.Fuzzer b) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b"
          },
          {
            "name": "array",
            "comment": " Given a fuzzer of a type, create a fuzzer of an array of that type.\nGenerates random arrays of varying length, favoring shorter arrays.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (Array.Array a)"
          },
          {
            "name": "bool",
            "comment": " A fuzzer for bool values.\n",
            "type": "Fuzz.Fuzzer Bool"
          },
          {
            "name": "char",
            "comment": " A fuzzer for char values. Generates random ascii chars disregarding the control\ncharacters.\n",
            "type": "Fuzz.Fuzzer Char"
          },
          {
            "name": "constant",
            "comment": " Create a fuzzer that only and always returns the value provided, and performs no shrinking. This is hardly random,\nand so this function is best used as a helper when creating more complicated fuzzers.\n",
            "type": "a -> Fuzz.Fuzzer a"
          },
          {
            "name": "custom",
            "comment": " Build a custom `Fuzzer a` by providing a `Generator a` and a `Shrinker a`.\nGenerators are defined in [`mgold/elm-random-pcg`](http://package.elm-lang.org/packages/mgold/elm-random-pcg/latest),\nwhich is not core's Random module but has a compatible interface. Shrinkers are\ndefined in [`elm-community/shrink`](http://package.elm-lang.org/packages/elm-community/shrink/latest/).\n\nHere is an example for a record:\n\n    import Random.Pcg as Random\n    import Shrink\n\n    type alias Position =\n        { x : Int, y : Int }\n\n    position : Fuzzer Position\n    position =\n        Fuzz.custom\n            (Random.map2 Position (Random.int -100 100) (Random.int -100 100))\n            (\\{ x, y } -> Shrink.map Position (Shrink.int x) |> Shrink.andMap (Shrink.int y))\n\nHere is an example for a custom union type, assuming there is already a `genName : Generator String` defined:\n\n    type Question\n        = Name String\n        | Age Int\n\n    question =\n        let\n            generator =\n                Random.bool |> Random.andThen (\\b ->\n                    if b then\n                        Random.map Name genName\n                    else\n                        Random.map Age (Random.int 0 120)\n                 )\n\n            shrinker question =\n                case question of\n                    Name n ->\n                        Shrink.string n |> Shrink.map Name\n                    Age i ->\n                        Shrink.int i |> Shrink.map Age\n        in\n            Fuzz.custom generator shrinker\n\nIt is not possible to extract the generator and shrinker from an existing fuzzer.\n",
            "type": "Random.Pcg.Generator a -> Shrink.Shrinker a -> Fuzz.Fuzzer a"
          },
          {
            "name": "float",
            "comment": " A fuzzer for float values. It will never produce `NaN`, `Infinity`, or `-Infinity`.\n\n\nIt's possible for this fuzzer to generate any other floating-point value, but it\nfavors numbers between -50 and 50, numbers between -1 and 1, and especially zero.\n",
            "type": "Fuzz.Fuzzer Float"
          },
          {
            "name": "floatRange",
            "comment": " A fuzzer for float values within between a given minimum and maximum\nvalue, inclusive. Shrunken values will also be within the range.\n",
            "type": "Float -> Float -> Fuzz.Fuzzer Float"
          },
          {
            "name": "frequency",
            "comment": " Create a new `Fuzzer` by providing a list of probabilistic weights to use\nwith other fuzzers.\n\nFor example, to create a `Fuzzer` that has a 1/4 chance of generating an int\nbetween -1 and -100, and a 3/4 chance of generating one between 1 and 100,\nyou could do this:\n\n    Fuzz.frequency\n        [ ( 1, Fuzz.intRange -100 -1 )\n        , ( 3, Fuzz.intRange 1 100 )\n        ]\n\nThis returns a `Result` because it can fail in a few ways:\n\n* If you provide an empy list of frequencies\n* If any of the weights are less than 0\n* If the weights sum to 0\n\nAny of these will lead to a result of `Err`, with a `String` explaining what\nwent wrong.\n",
            "type": "List ( Float, Fuzz.Fuzzer a ) -> Result.Result String (Fuzz.Fuzzer a)"
          },
          {
            "name": "frequencyOrCrash",
            "comment": " Calls `frequency` and handles `Err` results by crashing with the given\nerror message.\n\nThis is useful in tests, where a crash will simply cause the test run to fail.\nThere is no danger to a production system there.\n",
            "type": "List ( Float, Fuzz.Fuzzer a ) -> Fuzz.Fuzzer a"
          },
          {
            "name": "int",
            "comment": " A fuzzer for int values. It will never produce `NaN`, `Infinity`, or `-Infinity`.\n\nIt's possible for this fuzzer to generate any 32-bit integer, but it favors\nnumbers between -50 and 50 and especially zero.\n",
            "type": "Fuzz.Fuzzer Int"
          },
          {
            "name": "intRange",
            "comment": " A fuzzer for int values within between a given minimum and maximum value,\ninclusive. Shrunken values will also be within the range.\n\nRemember that [Random.maxInt](http://package.elm-lang.org/packages/elm-lang/core/latest/Random#maxInt)\nis the maximum possible int value, so you can do `intRange x Random.maxInt` to get all\nthe ints x or bigger.\n",
            "type": "Int -> Int -> Fuzz.Fuzzer Int"
          },
          {
            "name": "list",
            "comment": " Given a fuzzer of a type, create a fuzzer of a list of that type.\nGenerates random lists of varying length, favoring shorter lists.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (List a)"
          },
          {
            "name": "map",
            "comment": " Map a function over a fuzzer. This applies to both the generated and the shruken values.\n",
            "type": "(a -> b) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b"
          },
          {
            "name": "map2",
            "comment": " Map over two fuzzers.\n",
            "type": "(a -> b -> c) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c"
          },
          {
            "name": "map3",
            "comment": " Map over three fuzzers.\n",
            "type": "(a -> b -> c -> d) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d"
          },
          {
            "name": "map4",
            "comment": " Map over four fuzzers.\n",
            "type": "(a -> b -> c -> d -> e) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> Fuzz.Fuzzer e"
          },
          {
            "name": "map5",
            "comment": " Map over five fuzzers.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> Fuzz.Fuzzer e -> Fuzz.Fuzzer f"
          },
          {
            "name": "maybe",
            "comment": " Given a fuzzer of a type, create a fuzzer of a maybe for that type.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (Maybe.Maybe a)"
          },
          {
            "name": "order",
            "comment": " A fuzzer for order values.\n",
            "type": "Fuzz.Fuzzer Basics.Order"
          },
          {
            "name": "percentage",
            "comment": " A fuzzer for percentage values. Generates random floats between `0.0` and\n`1.0`. It will test zero and one about 10% of the time each.\n",
            "type": "Fuzz.Fuzzer Float"
          },
          {
            "name": "result",
            "comment": " Given fuzzers for an error type and a success type, create a fuzzer for\na result.\n",
            "type": "Fuzz.Fuzzer error -> Fuzz.Fuzzer value -> Fuzz.Fuzzer (Result.Result error value)"
          },
          {
            "name": "string",
            "comment": " Generates random printable ASCII strings of up to 1000 characters.\n\nShorter strings are more common, especially the empty string.\n",
            "type": "Fuzz.Fuzzer String"
          },
          {
            "name": "tuple",
            "comment": " Turn a tuple of fuzzers into a fuzzer of tuples.\n",
            "type": "( Fuzz.Fuzzer a, Fuzz.Fuzzer b ) -> Fuzz.Fuzzer ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " Turn a 3-tuple of fuzzers into a fuzzer of 3-tuples.\n",
            "type": "( Fuzz.Fuzzer a, Fuzz.Fuzzer b, Fuzz.Fuzzer c ) -> Fuzz.Fuzzer ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " Turn a 4-tuple of fuzzers into a fuzzer of 4-tuples.\n",
            "type": "( Fuzz.Fuzzer a, Fuzz.Fuzzer b, Fuzz.Fuzzer c, Fuzz.Fuzzer d ) -> Fuzz.Fuzzer ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " Turn a 5-tuple of fuzzers into a fuzzer of 5-tuples.\n",
            "type": "( Fuzz.Fuzzer a , Fuzz.Fuzzer b , Fuzz.Fuzzer c , Fuzz.Fuzzer d , Fuzz.Fuzzer e ) -> Fuzz.Fuzzer ( a, b, c, d, e )"
          },
          {
            "name": "unit",
            "comment": " A fuzzer for the unit value. Unit is a type with only one value, commonly\nused as a placeholder.\n",
            "type": "Fuzz.Fuzzer ()"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Expect",
        "comment": " A library to create `Expectation`s, which describe a claim to be tested.\n\n## Quick Reference\n\n* [`equal`](#equal) `(arg2 == arg1)`\n* [`notEqual`](#notEqual) `(arg2 /= arg1)`\n* [`lessThan`](#lessThan) `(arg2 < arg1)`\n* [`atMost`](#atMost) `(arg2 <= arg1)`\n* [`greaterThan`](#greaterThan) `(arg2 > arg1)`\n* [`atLeast`](#atLeast) `(arg2 >= arg1)`\n* [`true`](#true) `(arg == True)`\n* [`false`](#false) `(arg == False)`\n\n## Basic Expectations\n\n@docs Expectation, equal, notEqual\n\n## Comparisons\n\n@docs lessThan, atMost, greaterThan, atLeast\n\n## Booleans\n\n@docs true, false\n\n## Collections\n\n@docs equalLists, equalDicts, equalSets\n\n## Customizing\n\n@docs pass, fail, onFail, getFailure\n",
        "aliases": [
          {
            "name": "Expectation",
            "comment": " The result of a single test run: either a [`pass`](#pass) or a\n[`fail`](#fail).\n",
            "args": [],
            "type": "Test.Expectation.Expectation"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "atLeast",
            "comment": " Passes if the second argument is greater than or equal to the first.\n\n    Expect.atLeast -2 (List.length [])\n\n    -- Passes because (0 >= -2) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 >= 3) is False\n    List.length []\n        |> Expect.atLeast 3\n\n    {-\n\n    0\n    ╷\n    │ Expect.atLeast\n    ╵\n    3\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "atMost",
            "comment": " Passes if the second argument is less than or equal to the first.\n\n    Expect.atMost 1 (List.length [])\n\n    -- Passes because (0 <= 1) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 <= -3) is False\n    List.length []\n        |> Expect.atMost -3\n\n    {-\n\n    0\n    ╷\n    │ Expect.atMost\n    ╵\n    -3\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "equal",
            "comment": " Passes if the arguments are equal.\n\n    Expect.equal 0 (List.length [])\n\n    -- Passes because (0 == 0) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because the expected value didn't split the space in \"Betty Botter\"\n    String.split \" \" \"Betty Botter bought some butter\"\n        |> Expect.equal [ \"Betty Botter\", \"bought\", \"some\", \"butter\" ]\n\n    {-\n\n    [ \"Betty\", \"Botter\", \"bought\", \"some\", \"butter\" ]\n    ╷\n    │ Expect.equal\n    ╵\n    [ \"Betty Botter\", \"bought\", \"some\", \"butter\" ]\n\n    -}\n",
            "type": "a -> a -> Expect.Expectation"
          },
          {
            "name": "equalDicts",
            "comment": " Passes if the arguments are equal dicts.\n\n    -- Passes\n    (Dict.fromList [ ( 1, \"one\" ), ( 2, \"two\" ) ])\n        |> Expect.equalDicts (Dict.fromList [ ( 1, \"one\" ), ( 2, \"two\" ) ])\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which, and reports which keys were missing from\nor added to each dict:\n\n    -- Fails\n    (Dict.fromList [ ( 1, \"one\" ), ( 2, \"too\" ) ])\n        |> Expect.equalDicts (Dict.fromList [ ( 1, \"one\" ), ( 2, \"two\" ), ( 3, \"three\" ) ])\n\n    {-\n\n    Dict.fromList [(1,\"one\"),(2,\"too\")]\n    diff: -[ (2,\"two\"), (3,\"three\") ] +[ (2,\"too\") ]\n    ╷\n    │ Expect.equalDicts\n    ╵\n    diff: +[ (2,\"two\"), (3,\"three\") ] -[ (2,\"too\") ]\n    Dict.fromList [(1,\"one\"),(2,\"two\"),(3,\"three\")]\n\n    -}\n",
            "type": "Dict.Dict comparable a -> Dict.Dict comparable a -> Expect.Expectation"
          },
          {
            "name": "equalLists",
            "comment": " Passes if the arguments are equal lists.\n\n    -- Passes\n    [1, 2, 3]\n        |> Expect.equalLists [1, 2, 3]\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which, and reports which index the lists first\ndiffered at or which list was longer:\n\n    -- Fails\n    [ 1, 2, 4, 6 ]\n        |> Expect.equalLists [ 1, 2, 5 ]\n\n    {-\n\n    [1,2,4,6]\n    first diff at index index 2: +`4`, -`5`\n    ╷\n    │ Expect.equalLists\n    ╵\n    first diff at index index 2: +`5`, -`4`\n    [1,2,5]\n\n    -}\n",
            "type": "List a -> List a -> Expect.Expectation"
          },
          {
            "name": "equalSets",
            "comment": " Passes if the arguments are equal sets.\n\n    -- Passes\n    (Set.fromList [1, 2])\n        |> Expect.equalSets (Set.fromList [1, 2])\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which, and reports which keys were missing from\nor added to each set:\n\n    -- Fails\n    (Set.fromList [ 1, 2, 4, 6 ])\n        |> Expect.equalSets (Set.fromList [ 1, 2, 5 ])\n\n    {-\n\n    Set.fromList [1,2,4,6]\n    diff: -[ 5 ] +[ 4, 6 ]\n    ╷\n    │ Expect.equalSets\n    ╵\n    diff: +[ 5 ] -[ 4, 6 ]\n    Set.fromList [1,2,5]\n\n    -}\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Expect.Expectation"
          },
          {
            "name": "fail",
            "comment": " Fails with the given message.\n\n    import Json.Decode exposing (decodeString, int)\n    import Test exposing (test)\n    import Expect\n\n\n    test \"Json.Decode.int can decode the number 42.\" <|\n        \\() ->\n            case decodeString int \"42\" of\n                Ok _ ->\n                    Expect.pass\n\n                Err err ->\n                    Expect.fail err\n",
            "type": "String -> Expect.Expectation"
          },
          {
            "name": "false",
            "comment": " Passes if the argument is 'False', and otherwise fails with the given message.\n\n    Expect.false \"Expected the list not to be empty.\" (List.isEmpty [ 42 ])\n\n    -- Passes because (List.isEmpty [ 42 ]) is False\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (List.isEmpty []) is True\n    List.isEmpty []\n        |> Expect.false \"Expected the list not to be empty.\"\n\n    {-\n\n    Expected the list not to be empty.\n\n    -}\n",
            "type": "String -> Bool -> Expect.Expectation"
          },
          {
            "name": "getFailure",
            "comment": " Return `Nothing` if the given [`Expectation`](#Expectation) is a [`pass`](#pass).\n\nIf it is a [`fail`](#fail), return a record containing the failure message,\nalong with the given inputs if it was a fuzz test. (If no inputs were involved,\nthe record's `given` field will be `\"\"`).\n\nFor example, if a fuzz test generates random integers, this might return\n`{ message = \"it was supposed to be positive\", given = \"-1\" }`\n\n    getFailure (Expect.fail \"this failed\")\n    -- Just { message = \"this failed\", given = \"\" }\n\n    getFailure (Expect.pass)\n    -- Nothing\n",
            "type": "Expect.Expectation -> Maybe.Maybe { given : String, message : String }"
          },
          {
            "name": "greaterThan",
            "comment": " Passes if the second argument is greater than the first.\n\n    Expect.greaterThan -2 List.length []\n\n    -- Passes because (0 > -2) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 > 1) is False\n    List.length []\n        |> Expect.greaterThan 1\n\n    {-\n\n    0\n    ╷\n    │ Expect.greaterThan\n    ╵\n    1\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "lessThan",
            "comment": " Passes if the second argument is less than the first.\n\n    Expect.lessThan 1 (List.length [])\n\n    -- Passes because (0 < 1) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 < -1) is False\n    List.length []\n        |> Expect.lessThan -1\n\n\n    {-\n\n    0\n    ╷\n    │ Expect.lessThan\n    ╵\n    -1\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "notEqual",
            "comment": " Passes if the arguments are not equal.\n\n    -- Passes because (11 /= 100) is True\n    90 + 10\n        |> Expect.notEqual 11\n\n\n    -- Fails because (100 /= 100) is False\n    90 + 10\n        |> Expect.notEqual 100\n\n    {-\n\n    100\n    ╷\n    │ Expect.notEqual\n    ╵\n    100\n\n    -}\n",
            "type": "a -> a -> Expect.Expectation"
          },
          {
            "name": "onFail",
            "comment": " If the given expectation fails, replace its failure message with a custom one.\n\n    \"something\"\n        |> Expect.equal \"something else\"\n        |> Expect.onFail \"thought those two strings would be the same\"\n",
            "type": "String -> Expect.Expectation -> Expect.Expectation"
          },
          {
            "name": "pass",
            "comment": " Always passes.\n\n    import Json.Decode exposing (decodeString, int)\n    import Test exposing (test)\n    import Expect\n\n\n    test \"Json.Decode.int can decode the number 42.\" <|\n        \\() ->\n            case decodeString int \"42\" of\n                Ok _ ->\n                    Expect.pass\n\n                Err err ->\n                    Expect.fail err\n",
            "type": "Expect.Expectation"
          },
          {
            "name": "true",
            "comment": " Passes if the argument is 'True', and otherwise fails with the given message.\n\n    Expect.true \"Expected the list to be empty.\" (List.isEmpty [])\n\n    -- Passes because (List.isEmpty []) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because List.isEmpty returns False, but we expect True.\n    List.isEmpty [ 42 ]\n        |> Expect.true \"Expected the list to be empty.\"\n\n    {-\n\n    Expected the list to be empty.\n\n    -}\n",
            "type": "String -> Bool -> Expect.Expectation"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/html-extra",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Html.Events.Extra",
        "comment": " Additional decoders for use with event handlers in html.\n\n# Event decoders\n* TODO: `key`\n* TODO: `code`\n* TODO: `KeyEvent`, `keyEvent`\n@docs charCode\n\n# Typed event decoders\n@docs targetValueFloat, targetValueInt, targetValueMaybe, targetValueMaybeFloat, targetValueMaybeInt\n@docs targetValueFloatParse, targetValueIntParse, targetValueMaybeFloatParse, targetValueMaybeIntParse\n@docs targetSelectedIndex\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "charCode",
            "comment": " Character code for key board events.\nThis is being deprecated, but support for DOM3 Keyboard events is not yet present in most browsers.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Char)"
          },
          {
            "name": "targetSelectedIndex",
            "comment": " Parse the index of the selected option of a select.\nReturns Nothing in place of the spec's magic value -1.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          },
          {
            "name": "targetValueFloat",
            "comment": " Floating-point target value.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "targetValueFloatParse",
            "comment": " Parse a floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "targetValueInt",
            "comment": " Integer target value.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "targetValueIntParse",
            "comment": " Parse an integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "targetValueMaybe",
            "comment": " String or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe String)"
          },
          {
            "name": "targetValueMaybeFloat",
            "comment": " Floating-point or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
          },
          {
            "name": "targetValueMaybeFloatParse",
            "comment": " Parse an optional floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
          },
          {
            "name": "targetValueMaybeInt",
            "comment": " Integer or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          },
          {
            "name": "targetValueMaybeIntParse",
            "comment": " Parse an optional integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Html.Attributes.Extra",
        "comment": " Additional attributes for html\n\n# Embedding static attributes\n@docs static\n\n# Inputs\n@docs valueAsFloat, valueAsInt\n\n# Semantic web\n@docs role\n\n# Meter element\n@docs low, high, optimum\n\n# Media element\n@docs volume\n\n# Unescaped HTML\n@docs innerHtml\n\n# Custom Attributes\n@docs stringProperty\n@docs boolProperty\n@docs floatProperty\n@docs intProperty\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "boolProperty",
            "comment": " Create arbitrary bool *properties*.\n",
            "type": "String -> Bool -> Html.Attribute msg"
          },
          {
            "name": "floatProperty",
            "comment": " Create arbitrary floating-point *properties*.\n",
            "type": "String -> Float -> Html.Attribute msg"
          },
          {
            "name": "high",
            "comment": " The lower numeric bound of the high end of the measured range, used with the meter element.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "innerHtml",
            "comment": " Useful for inserting arbitrary unescaped HTML into an element. This function comes with some caveats.\n\n* **Security:** You should never pass untrusted strings (e.g. from user input) to this function. Doing so will lead to [XSS](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)) vulnerabilities.\n* **Performance:** The virtual DOM subsystem is not aware of HTML inserted in this manner, so these HTML fragments will be slower.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "intProperty",
            "comment": " Create arbitrary integer *properties*.\n",
            "type": "String -> Int -> Html.Attribute msg"
          },
          {
            "name": "low",
            "comment": " The upper numeric bound of the low end of the measured range, used with the meter element.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "optimum",
            "comment": " This attribute indicates the optimal numeric value, used with the meter element.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "role",
            "comment": " Used to annotate markup languages with machine-extractable semantic information about the purpose of an element.\nSee the [official specs](http://www.w3.org/TR/role-attribute/).\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "static",
            "comment": " Embedding static attributes.\n\nWorks alike to [`Html.Extra.static`](Html-Extra#static).\n",
            "type": "Html.Attribute Basics.Never -> Html.Attribute msg"
          },
          {
            "name": "stringProperty",
            "comment": " Create arbitrary string *properties*.\n",
            "type": "String -> String -> Html.Attribute msg"
          },
          {
            "name": "valueAsFloat",
            "comment": " Uses `valueAsNumber` to update an input with a floating-point value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that a floating point value will not necessarily overwrite the contents on an input element.\n\n    valueAsFloat 2.5 -- e.g. will not change the displayed value for input showing \"2.5000\"\n    valueAsFloat 0.4 -- e.g. will not change the displayed value for input showing \".4\"\n\n",
            "type": "Float -> Html.Attribute msg"
          },
          {
            "name": "valueAsInt",
            "comment": " Uses `valueAsNumber` to update an input with an integer value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that an integer value will not necessarily overwrite the contents on an input element.\n\n    valueAsInt 18 -- e.g. will not change the displayed value for input showing \"00018\"\n\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "volume",
            "comment": " Audio volume, starting from 0.0 (silent) up to 1.0 (loudest).\n",
            "type": "Float -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Html.Extra",
        "comment": " Convenience functionality on\n[`Html`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#Html)\n\n@docs static\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "static",
            "comment": " Embedding static html.\n\nThe type argument\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\nin `Html Never` tells us that the html has no event handlers attached,\nit will not generate any messages. We may want to embed such static\nhtml into arbitrary views, while using types to enforce the\nstaticness. That is what this function provides.\n\n*Note:* To call this function, the argument need not be literally of type\n`Html Never`. It suffices if it is a fully polymorphic (in the message type)\n`Html` value. For example, this works: `static (Html.text \"abcdef\")`.\n",
            "type": "Html.Html Basics.Never -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/intdict",
    "version": "2.0.0",
    "docs": [
      {
        "name": "IntDict.Safe",
        "comment": " Safe API wrappers for `IntDict`s build and query operators\nto prevent integer overflows with JavaScripts number type.\n\nPrior to delegating to their 'unsafe' equivalent, these functions verify\nthe validity of the key via `IntDict.isValidKey`.\n\n# Return type\n@docs InvalidKey, SafeKeyResult\n# Build\n@docs safeInsert, safeUpdate, safeRemove\n# Query\n@docs safeMember, safeGet\n\n",
        "aliases": [
          {
            "name": "SafeKeyResult",
            "comment": " A value of this type is returned by all functions in this module.\nSee the core libraries' `Result` documentation for how to cope with it. ",
            "args": [
              "a"
            ],
            "type": "Result.Result IntDict.Safe.InvalidKey a"
          }
        ],
        "types": [
          {
            "name": "InvalidKey",
            "comment": " An error type signaling an invalid key. ",
            "args": [],
            "cases": [
              [
                "InvalidKey",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "safeGet",
            "comment": " Version of `IntDict.get` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (Maybe.Maybe v)"
          },
          {
            "name": "safeInsert",
            "comment": " Version of `IntDict.insert` that validates the key. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeMember",
            "comment": " Version of `IntDict.member` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult Bool"
          },
          {
            "name": "safeRemove",
            "comment": " Version of `IntDict.remove` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeUpdate",
            "comment": " Version of `IntDict.update` that validates the key. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "IntDict",
        "comment": " # IntDict\n\nThis module exposes the same API as [`Dict`](http://package.elm-lang.org/packages/elm-lang/core/latest/Dict).\n\n# Technicalities\n\nSince JavaScript's number type is kind of messed up, Elm's `Int` is not particularly\nwell-behaved wrt. bitwise operations. Currently, JS supports 32 bit integers, so there is\nprobably enough room for key picks. **However, when sanitizing user input, it is mandatory\nthat a prior `isValidKey` or one of the safe versions in `IntDict.Safe` is used!** This is\nto prevent the overflow behavior.\n\nThis library is inspired by Haskells [IntMap](http://hackage.haskell.org/package/containers-0.2.0.1/docs/Data-IntMap.html),\nwhich in turn implements Okasaki and Gill's [Fast mergable integer maps](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf).\n\nAs noted in the [references](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf), here are some runtimes:\n\n*O(min(n, W))*: `insert`, `update`, `remove`, `get`, `member`\n\n*O(n + m)*: `uniteWith`, `union`, `intersection`, `diff`, `merge`\n\nwhere *n* and *m* are the sizes of the first and second dictionary respectively and *W*\nis the number of bits in `Int` (so a constant with current value 32).\n\nDictionary equality with `(==)` is unreliable and should not be used.\n\n# Data\n@docs IntDict, isValidKey\n# Build\n@docs empty, singleton, insert, update, remove\n# Query\n@docs isEmpty, size, member, get, findMin, findMax\n# Combine\n@docs uniteWith, union, intersect, diff, merge\n# Lists\n@docs keys, values, toList, fromList\n# Transform\n@docs map, foldl, foldr, filter, partition\n# String representation\n@docs toString\n\n",
        "aliases": [],
        "types": [
          {
            "name": "IntDict",
            "comment": " A dictionary mapping `Int`s to values of a type `v`. Analogous to\n`Dict Int v`.\n",
            "args": [
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "IntDict.IntDict a -> IntDict.IntDict b -> IntDict.IntDict a"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "IntDict.IntDict v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "findMax",
            "comment": " Find the maximum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "findMin",
            "comment": " Find the minimum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( Int, v ) -> IntDict.IntDict v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary. ",
            "type": "Int -> IntDict.IntDict v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n",
            "type": "IntDict.IntDict a -> IntDict.IntDict b -> IntDict.IntDict a"
          },
          {
            "name": "isEmpty",
            "comment": " Check if the dictionary contains no items. ",
            "type": "IntDict.IntDict v -> Bool"
          },
          {
            "name": "isValidKey",
            "comment": " Validates that a given integer is usable as a key.\nThis is necessary due to JavaScript's weird number type.\nBasically this assures that we can use the functions\nfrom `Bitwise` without risking integer overflow.\n\n**This function is a necessity for sanitizing user input!** Alternatively,\nuse the safe functions from `IntDict.Safe` which perform the check for you.\n\nAs with the current version of JavaScript (2015), only 32 bit signed integers are supported.\nIf this ever changes, contact me! Certain parts of the implementation depend on this! ",
            "type": "Int -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest. ",
            "type": "IntDict.IntDict v -> List Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary. ",
            "type": "(Int -> a -> b) -> IntDict.IntDict a -> IntDict.IntDict b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "Int -> IntDict.IntDict v -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\n\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n\nNote that `uniteWith`, `union`, `intersect` and `diff` could all be implemented\nin terms of this function. The only reason that's not the case is to have more\nsharing of substructure.\n\n    uniteWith merger l r =\n      merge insert merger insert l r empty\n    union l r =\n      merge insert (\\k a _ d -> insert k a d) insert l r empty\n    intersect l r =\n      merge (\\_ _ d -> d) (\\k a _ d -> insert k a d) (\\_ _ d -> d) l r empty\n    diff l r =\n      merge insert (\\_ _ _ d -> d) (\\_ _ d -> d) l r empty\n",
            "type": "(Int -> a -> result -> result) -> (Int -> a -> b -> result -> result) -> (Int -> b -> result -> result) -> IntDict.IntDict a -> IntDict.IntDict b -> result -> result"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> ( IntDict.IntDict v, IntDict.IntDict v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "Int -> v -> IntDict.IntDict v"
          },
          {
            "name": "size",
            "comment": " The number of items in the dictionary. `O(1)`.",
            "type": "IntDict.IntDict v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys. ",
            "type": "IntDict.IntDict v -> List ( Int, v )"
          },
          {
            "name": "toString",
            "comment": " Generates a string representation similar to what `toString`\ngenerates for `Dict`. ",
            "type": "IntDict.IntDict v -> String"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "uniteWith",
            "comment": " `uniteWith merger l r` combines two dictionaries. If there is a collision, `merger`\nis called with the conflicting key, the value from `l` and that from `r`. ",
            "type": "(Int -> v -> v -> v) -> IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys. ",
            "type": "IntDict.IntDict v -> List v"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/json-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Json.Decode.Extra",
        "comment": " Convenience functions for working with Json\n\n# Date\n@docs date\n\n# Incremental Decoding\n@docs andMap, (|:)\n\n# List\n@docs sequence\n\n# Set\n@docs set\n\n# Dict\n@docs dict2\n\n# Maybe\n@docs withDefault\n\n# Result\n@docs fromResult\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Can be helpful when decoding large objects incrementally.\n\nSee [the `andMap` docs](https://github.com/elm-community/json-extra/blob/2.0.0/docs/andMap.md)\nfor an explanation of how `andMap` works and how to use it.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "date",
            "comment": " Extract a date using [`Date.fromString`](http://package.elm-lang.org/packages/elm-lang/core/latest/Date#fromString)\n",
            "type": "Json.Decode.Decoder Date.Date"
          },
          {
            "name": "dict2",
            "comment": " Extract a dict using separate decoders for keys and values.\n",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "fromResult",
            "comment": " Transform a result into a decoder\n\nSometimes it can be useful to use functions that primarily operate on\n`Result` in decoders. An example of this is `Json.Decode.Extra.date`. It\nuses the built-in `Date.fromString` to parse a `String` as a `Date`, and\nthen converts the `Result` from that conversion into a decoder which has\neither already succeeded or failed based on the outcome.\n\n    date : Decoder Date\n    date =\n        string |> andThen (Date.fromString >> fromResult)\n",
            "type": "Result.Result String a -> Json.Decode.Decoder a"
          },
          {
            "name": "sequence",
            "comment": " This function turns a list of decoders into a decoder that returns a list.\n\nThe returned decoder will zip the list of decoders with a list of values, matching each decoder with exactly one value at the same position. This is most often useful in cases when you find yourself needing to dynamically generate a list of decoders based on some data, and decode some other data with this list of decoders. There are other functions that seem similar:\n\n- `Json.Decode.oneOf`, which will try every decoder for every value in the list, might be too lenient (e.g. a `4.0` will be interpreted as an `Int` just fine).\n- `Json.Decode.tuple1-8`, which do something similar, but have a hard-coded length. As opposed to these functions, where you can decode several different types and combine them, you'll need to manually unify all those types in one sum type to use `sequence`.\n\nNote that this function, unlike `List.map2`'s behaviour, expects the list of decoders to have the same length as the list of values in the JSON.\n\n    type FloatOrInt\n        = I Int\n        | F Float\n\n    -- we'd like a list like [I, F, I] from this\n    -- fairly contrived example, but data like this does exist!\n    json = \"[1, 2.0, 3]\"\n\n    intDecoder = Decode.map I Decode.int\n    floatDecoder = Decode.map F Decode.float\n\n    decoder : Decoder (List FloatOrInt)\n    decoder =\n        sequence [ intDecoder, floatDecoder, intDecoder ]\n\n    decoded = Decode.decodeString decoder json\n    -- Ok ([I 1,F 2,I 3]) : Result String (List FloatOrInt)\n\n",
            "type": "List (Json.Decode.Decoder a) -> Json.Decode.Decoder (List a)"
          },
          {
            "name": "set",
            "comment": " Extract a set.\n",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder (Set.Set comparable)"
          },
          {
            "name": "withDefault",
            "comment": " Try running the given decoder; if that fails, then succeed with the given\nfallback value.\n\n    -- If this field is missing or malformed, it will decode to [].\n    field \"optionalNames\" (list string)\n      |> (withDefault [])\n\n",
            "type": "a -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "|:",
            "comment": " Infix version of `andMap` that makes for a nice DSL when decoding objects.\n\nSee [the `(|:)` docs](https://github.com/elm-community/json-extra/blob/2.0.0/docs/infixAndMap.md)\nfor an explanation of how `(|:)` works and how to use it.\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Json.Encode.Extra",
        "comment": " Convenience functions for turning Elm values into Json values.\n\n# Maybe\n@docs maybe\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "maybe",
            "comment": " Encode a Maybe value. If the value is `Nothing` it will be encoded as `null`\n\n    maybe int Nothing == Value null\n    maybe int (Just 50) == Value 50\n\n",
            "type": "(a -> Json.Encode.Value) -> Maybe.Maybe a -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/lazy-list",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Lazy.List",
        "comment": " Lazy list implementation in Elm.\n\n# Types\n@docs LazyList, LazyListView\n\n# Constructors\n@docs cons, empty, singleton\n\n# Query operations\n@docs isEmpty, head, tail, headAndTail, member, length\n\n# Conversions\n@docs toList, fromList, toArray, fromArray\n\n# Map-reduce et al.\n@docs map, zip, reduce, flatten, append, foldl, foldr\n\n# Common operations\n@docs intersperse, interleave, reverse, cycle, iterate, repeat, take, takeWhile, drop, dropWhile\n\n# Filtering operations\n@docs keepIf, dropIf, filterMap, unique\n\n# Chaining operations\n@docs andMap, andThen\n\n# Useful math stuff\n@docs numbers, sum, product\n\n# All the maps!\n@docs map2, map3, map4, map5\n\n# All the zips!\n@docs zip3, zip4, zip5\n\n# All the Cartesian products!\n**Warning:** Calling these functions on large lists and then calling `toList` can easily overflow the stack. Consider\npassing the results to `take aConstantNumber`.\n\n@docs product2, product3, product4, product5\n\n# Infix Operators\n@docs (:::), (+++)\n\n",
        "aliases": [
          {
            "name": "LazyList",
            "comment": " Lazy List type.\n",
            "args": [
              "a"
            ],
            "type": "Lazy.Lazy (Lazy.List.LazyListView a)"
          }
        ],
        "types": [
          {
            "name": "LazyListView",
            "comment": " Analogous to `List` type. This is the actual implementation type for the\n`LazyList` type. This type is exposed to the user if the user so wishes to\ndo pattern matching or understand how the list type works. It is not\nrecommended to work with this type directly. Try working solely with the\nprovided functions in the package.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Nil",
                []
              ],
              [
                "Cons",
                [
                  "a",
                  "Lazy.List.LazyList a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "+++",
            "comment": " Alias for `append`. Analogous to `++` for lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": ":::",
            "comment": " Alias for `cons`. Analogous to `::` for lists.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "andMap",
            "comment": " Known as `mapN` in some circles. Allows you to apply `map` in cases\nwhere then number of arguments are greater than 5.\n\nThe argument order is such that it works well with `|>` chains.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList (a -> b) -> Lazy.List.LazyList b"
          },
          {
            "name": "andThen",
            "comment": " Chain list producing operations. Map then flatten.\n",
            "type": "(a -> Lazy.List.LazyList b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "append",
            "comment": " Append a list to another list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "cons",
            "comment": " Add a value to the front of a list.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "cycle",
            "comment": " Take a list and repeat it ad infinitum. This cycles a finite list\nby putting the front after the end of the list. This results in a no-op in\nthe case of an infinite list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "drop",
            "comment": " Drop at most `n` many values from a list.\n",
            "type": "Int -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "dropIf",
            "comment": " Drop all elements in a list that satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements from a list as long as the predicate is satisfied.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "empty",
            "comment": " Create an empty list.\n",
            "type": "Lazy.List.LazyList a"
          },
          {
            "name": "filterMap",
            "comment": " Map a function that may fail over a lazy list, keeping only\nthe values that were successfully transformed.\n",
            "type": "(a -> Maybe.Maybe b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "flatten",
            "comment": " Flatten a list of lists into a single list by appending all the inner\nlists into one big list.\n",
            "type": "Lazy.List.LazyList (Lazy.List.LazyList a) -> Lazy.List.LazyList a"
          },
          {
            "name": "foldl",
            "comment": " Analogous to `List.foldl`. Is an alias for `reduce`.\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "foldr",
            "comment": " Analogous to `List.foldr`.\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "fromArray",
            "comment": " Convert an array to a lazy list.\n",
            "type": "Array.Array a -> Lazy.List.LazyList a"
          },
          {
            "name": "fromList",
            "comment": " Convert a normal list to a lazy list.\n",
            "type": "List a -> Lazy.List.LazyList a"
          },
          {
            "name": "head",
            "comment": " Get the head of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe a"
          },
          {
            "name": "headAndTail",
            "comment": " Get the head and tail of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe ( a, Lazy.List.LazyList a )"
          },
          {
            "name": "interleave",
            "comment": " Interleave the elements of a list in another list. The two lists get\ninterleaved at the end.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "intersperse",
            "comment": " Places the given value between all members of the given list.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "isEmpty",
            "comment": " Detect if a list is empty or not.\n",
            "type": "Lazy.List.LazyList a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Create an infinite list of applications of a function on some value.\n\nEquivalent to:\n\n    x ::: f x ::: f (f x) ::: f (f (f x)) ::: ... -- etc...\n",
            "type": "(a -> a) -> a -> Lazy.List.LazyList a"
          },
          {
            "name": "keepIf",
            "comment": " Keep all elements in a list that satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "length",
            "comment": " Get the length of a lazy list.\n\nWarning: This will not terminate if the list is infinite.\n",
            "type": "Lazy.List.LazyList a -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function to a list.\n",
            "type": "(a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "map2",
            "comment": " ",
            "type": "(a -> b -> c) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> d) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList f"
          },
          {
            "name": "member",
            "comment": " Test if a value is a member of a list.\n",
            "type": "a -> Lazy.List.LazyList a -> Bool"
          },
          {
            "name": "numbers",
            "comment": " The infinite list of counting numbers.\n\ni.e.:\n\n    1 ::: 2 ::: 3 ::: 4 ::: 5 ::: ... -- etc...\n",
            "type": "Lazy.List.LazyList number"
          },
          {
            "name": "product",
            "comment": " Get the product of a list of numbers.\n",
            "type": "Lazy.List.LazyList number -> number"
          },
          {
            "name": "product2",
            "comment": " Create a lazy list containing all possible pairs in the given lazy lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList ( a, b )"
          },
          {
            "name": "product3",
            "comment": " Create a lazy list containing all possible triples in the given lazy lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList ( a, b, c )"
          },
          {
            "name": "product4",
            "comment": " Create a lazy list containing all possible 4-tuples in the given lazy lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList ( a, b, c, d )"
          },
          {
            "name": "product5",
            "comment": " Create a lazy list containing all possible 5-tuples in the given lazy lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList ( a, b, c, d, e )"
          },
          {
            "name": "reduce",
            "comment": " Reduce a list with a given reducer and an initial value.\n\nExample :\n    reduce (+) 0 (1 ::: 2 ::: 3 ::: 4 ::: empty) == 10\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "repeat",
            "comment": " Repeat a value ad infinitum.\nBe careful when you use this. The result of this is a truly infinite list.\nDo not try calling `reduce` or `toList` on an infinite list as it'll never\nfinish computing. Make sure you then filter it down to a finite list with `head`\nor `take` or something.\n",
            "type": "a -> Lazy.List.LazyList a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "singleton",
            "comment": " Create a singleton list.\n",
            "type": "a -> Lazy.List.LazyList a"
          },
          {
            "name": "sum",
            "comment": " Get the sum of a list of numbers.\n",
            "type": "Lazy.List.LazyList number -> number"
          },
          {
            "name": "tail",
            "comment": " Get the tail of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe (Lazy.List.LazyList a)"
          },
          {
            "name": "take",
            "comment": " Take at most `n` many values from a list.\n",
            "type": "Int -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements from a list as long as the predicate is satisfied.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "toArray",
            "comment": " Convert a lazy list to an array.\n",
            "type": "Lazy.List.LazyList a -> Array.Array a"
          },
          {
            "name": "toList",
            "comment": " Convert a lazy list to a normal list.\n",
            "type": "Lazy.List.LazyList a -> List a"
          },
          {
            "name": "unique",
            "comment": " Remove all duplicates from a list and return a list of distinct elements.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "zip",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/linear-algebra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Math.Matrix4",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All matrices are immutable.\n\nThis library uses the convention that the prefix `make` is creating a new\narray,as without the prefix, you are applying some transform to an\nexisting matrix.\n\n# Create\n\n@docs Mat4, identity\n\n# Operations\n\n@docs inverseOrthonormal, mul, mulAffine, transpose, makeBasis, transform\n\n# Projections\n\n@docs makeFrustum, makePerspective, makeOrtho, makeOrtho2D, makeLookAt\n\n# Apply Transformations\n\n@docs rotate, scale, scale3, translate, translate3\n\n# Create Transformations\n\n@docs makeRotate, makeScale, makeScale3, makeTranslate, makeTranslate3\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Mat4",
            "comment": " 4x4 matrix type ",
            "args": [],
            "cases": [
              [
                "Mat4",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "identity",
            "comment": " A matrix with all 0s, except 1s on the diagonal.\n",
            "type": "Math.Matrix4.Mat4"
          },
          {
            "name": "inverseOrthonormal",
            "comment": " Computes the inverse of the given matrix m, assuming that the matrix is\northonormal.\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeBasis",
            "comment": " Creates a transform from a basis consisting of 3 linearly independent vectors.\n",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeFrustum",
            "comment": " Creates a matrix for a projection frustum with the given parameters.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n * znear - the near z distance of the frustum\n * zfar - the far z distance of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeLookAt",
            "comment": "\nCreates a transformation matrix for a camera.\n\nParameters:\n\n * eye - The location of the camera\n * center - The location of the focused object\n * up - The \"up\" direction according to the camera\n",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeOrtho",
            "comment": "\nCreates a matrix for an orthogonal frustum projection with the given parameters.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n * znear - the near z distance of the frustum\n * zfar - the far z distance of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeOrtho2D",
            "comment": " Creates a matrix for a 2D orthogonal frustum projection with the given\nparameters. `znear` and `zfar` are assumed to be -1 and 1, respectively.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makePerspective",
            "comment": " Creates a matrix for a perspective projection with the given parameters.\n\nParameters:\n\n * fovy - field of view in the y axis, in degrees\n * aspect - aspect ratio\n * znear - the near z distance of the projection\n * zfar - the far z distance of the projection\n",
            "type": "Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeRotate",
            "comment": " Creates a transformation matrix for rotation in radians about the\n3-element vector axis.\n",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeScale",
            "comment": " Creates a transformation matrix for scaling each of the x, y, and z axes by\nthe amount given in the corresponding element of the 3-element vector.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeScale3",
            "comment": " Creates a transformation matrix for scaling by 3 scalar values, one for\neach of the x, y, and z directions.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeTranslate",
            "comment": " Creates a transformation matrix for translating each of the x, y, and z\naxes by the amount given in the corresponding element of the 3-element vector.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeTranslate3",
            "comment": "\nCreates a transformation matrix for translating by 3 scalar values, one for\neach of the x, y, and z directions.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "mul",
            "comment": " Matrix multiplcation: a * b\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "mulAffine",
            "comment": " Matrix multiplication, assuming a and b are affine: a * b\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "rotate",
            "comment": " Concatenates a rotation in radians about an axis to the given matrix.\n",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "scale",
            "comment": " Concatenates a scaling to the given matrix.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "scale3",
            "comment": " Concatenates a scaling to the given matrix.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "transform",
            "comment": " Multiply a vector by a 4x4 matrix: m * v\n",
            "type": "Math.Matrix4.Mat4 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "translate",
            "comment": "\nConcatenates a translation to the given matrix.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "translate3",
            "comment": "\nConcatenates a translation to the given matrix.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "transpose",
            "comment": " \"Flip\" the matrix across the diagonal by swapping row index and column\nindex.\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Math.Vector2",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec2, vec2\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, setX, setY\n\n# Operations\n@docs add, sub, negate, scale, dot, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec2",
            "comment": " Two dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec2",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float } -> Math.Vector2.Vec2"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float ) -> Math.Vector2.Vec2"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector2.Vec2 -> { x : Float, y : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector2.Vec2 -> ( Float, Float )"
          },
          {
            "name": "vec2",
            "comment": " Creates a new 2-element vector with the given values. ",
            "type": "Float -> Float -> Math.Vector2.Vec2"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Math.Vector4",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec4, vec4\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, getZ, getW, setX, setY, setZ, setW\n\n# Operations\n@docs add, sub, negate, scale, dot, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec4",
            "comment": " Four dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec4",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float, z : Float, w : Float } -> Math.Vector4.Vec4"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float, Float, Float ) -> Math.Vector4.Vec4"
          },
          {
            "name": "getW",
            "comment": " Extract the w component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getZ",
            "comment": " Extract the z component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setW",
            "comment": " Update the w component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setZ",
            "comment": " Update the z component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector4.Vec4 -> { x : Float, y : Float, z : Float, w : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector4.Vec4 -> ( Float, Float, Float, Float )"
          },
          {
            "name": "vec4",
            "comment": " Creates a new 4-element vector with the given x, y, z, and w values. ",
            "type": "Float -> Float -> Float -> Float -> Math.Vector4.Vec4"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Math.Vector3",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec3, vec3, i, j, k\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, getZ, setX, setY, setZ\n\n# Operations\n@docs add, sub, negate, scale, dot, cross, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec3",
            "comment": " Three dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec3",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "cross",
            "comment": " The cross product of a and b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float, z : Float } -> Math.Vector3.Vec3"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float, Float ) -> Math.Vector3.Vec3"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "getZ",
            "comment": " Extract the z component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "i",
            "comment": " The unit vector &icirc; which points in the x direction: `vec3 1 0 0` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "j",
            "comment": " The unit vector &jcirc; which points in the y direction: `vec3 0 1 0` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "k",
            "comment": " The unit vector k&#0770; which points in the z direction: `vec3 0 0 1` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setZ",
            "comment": " Update the z component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector3.Vec3 -> { x : Float, y : Float, z : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector3.Vec3 -> ( Float, Float, Float )"
          },
          {
            "name": "vec3",
            "comment": " Creates a new 3-element vector with the given values.\n",
            "type": "Float -> Float -> Float -> Math.Vector3.Vec3"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/list-extra",
    "version": "4.0.0",
    "docs": [
      {
        "name": "List.Extra",
        "comment": " Convenience functions for working with List\n\n# Basics\n@docs last, init, getAt, (!!), uncons, maximumBy, minimumBy, andMap, andThen, takeWhile, dropWhile, unique, uniqueBy, allDifferent, allDifferentBy, replaceIf, setAt, remove, updateIf, updateAt, updateIfIndex, singleton, removeAt, filterNot, swapAt, stableSortWith\n\n# List transformations\n@docs intercalate, transpose, subsequences, permutations, interweave\n\n# Folds\n@docs foldl1, foldr1, indexedFoldl, indexedFoldr\n\n# Building lists\n@docs scanl1, scanr, scanr1, unfoldr, iterate\n\n# Sublists\n@docs splitAt, takeWhileRight, dropWhileRight, span, break, stripPrefix, group, groupWhile, groupWhileTransitively, inits, tails, select, selectSplit\n\n# Predicates\n@docs isPrefixOf, isSuffixOf, isInfixOf, isSubsequenceOf, isPermutationOf\n\n# Searching\n@docs notMember, find, elemIndex, elemIndices, findIndex, findIndices\n\n# Zipping\n@docs zip, zip3, zip4, zip5\n\n# Lift functions onto multiple lists of arguments\n@docs lift2, lift3, lift4\n\n# Split to groups of given size\n@docs groupsOf, groupsOfWithStep, groupsOfVarying, greedyGroupsOf, greedyGroupsOfWithStep\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "!!",
            "comment": " Alias for getAt, but with the parameters flipped.\n",
            "type": "List a -> Int -> Maybe.Maybe a"
          },
          {
            "name": "allDifferent",
            "comment": " Indicate if list has duplicate values.\n\n    allDifferent [0,1,1,0,1] == True\n",
            "type": "List comparable -> Bool"
          },
          {
            "name": "allDifferentBy",
            "comment": " Indicate if list has duplicate values when supplied function are applyed on each values.\n",
            "type": "(a -> comparable) -> List a -> Bool"
          },
          {
            "name": "andMap",
            "comment": " Map functions taking multiple arguments over multiple lists. Each list should be of the same length.\n\n    ( (\\a b c -> a + b * c)\n        `map` [1,2,3]\n        `andMap` [4,5,6]\n        `andMap` [2,1,1]\n    ) == [9,7,9]\n",
            "type": "List (a -> b) -> List a -> List b"
          },
          {
            "name": "andThen",
            "comment": " Equivalent to `concatMap`. For example, suppose you want to have a cartesian product of [1,2] and [3,4]:\n\n    [1,2] |> andThen (\\x -> [3,4]\n          |> andThen (\\y -> [(x,y)]))\n\nwill give back the list:\n\n    [(1,3),(1,4),(2,3),(2,4)]\n\nNow suppose we want to have a cartesian product between the first list and the second list and its doubles:\n\n    [1,2] |> andThen (\\x -> [3,4]\n          |> andThen (\\y -> [y,y*2]\n          |> andThen (\\z -> [(x,z)])))\n\nwill give back the list:\n\n    [(1,3),(1,6),(1,4),(1,8),(2,3),(2,6),(2,4),(2,8)]\n\nAdvanced functional programmers will recognize this as the implementation of bind operator (>>=) for lists from the `Monad` typeclass.\n",
            "type": "(a -> List b) -> List a -> List b"
          },
          {
            "name": "break",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is the longest prefix of that list, for each element of which the predicate *does not* hold. The second part of the tuple is the remainder of the list. `break p xs` is equivalent to `(takeWhile (not p) xs, dropWhile (not p) xs)`.\n\n    break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\n    break (< 5) [1,2,3] == ([],[1,2,3])\n    break (> 5) [1,2,3] == ([1,2,3],[])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "dropWhileRight",
            "comment": " Drop elements from the right, while predicate still holds.\n\n    dropWhileRight ((<)5) [1..10] == [1,2,3,4,5]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "elemIndex",
            "comment": " Return the index of the first occurrence of the element. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    elemIndex 1 [1,2,3] == Just 0\n    elemIndex 4 [1,2,3] == Nothing\n    elemIndex 1 [1,2,1] == Just 0\n",
            "type": "a -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "elemIndices",
            "comment": " Return all indices of occurrences of the element. If element is not found, return empty list. Indexing starts from 0.\n\n    elemIndices 1 [1,2,3] == [0]\n    elemIndices 4 [1,2,3] == []\n    elemIndices 1 [1,2,1] == [0,2]\n",
            "type": "a -> List a -> List Int"
          },
          {
            "name": "filterNot",
            "comment": " Take a predicate and a list, and return a list that contains elements which fails to satisfy the predicate.\n    This is equivalent to `List.filter (not << predicate) list`.\n\n    filterNot isEven [1,2,3,4] == [1,3]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "find",
            "comment": " Find the first element that satisfies a predicate and return\nJust that element. If none match, return Nothing.\n\n    find (\\num -> num > 5) [2, 4, 6, 8] == Just 6\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "findIndex",
            "comment": " Take a predicate and a list, return the index of the first element that satisfies the predicate. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    findIndex isEven [1,2,3] == Just 1\n    findIndex isEven [1,3,5] == Nothing\n    findIndex isEven [1,2,4] == Just 1\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "findIndices",
            "comment": " Take a predicate and a list, return indices of all elements satisfying the predicate. Otherwise, return empty list. Indexing starts from 0.\n\n    findIndices isEven [1,2,3] == [1]\n    findIndices isEven [1,3,5] == []\n    findIndices isEven [1,2,4] == [1,2]\n",
            "type": "(a -> Bool) -> List a -> List Int"
          },
          {
            "name": "foldl1",
            "comment": " Variant of `foldl` that has no starting value argument and treats the head of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldl1 max [1,2,3,2,1] == Just 3\n    foldl1 max [] == Nothing\n    foldl1 (-) [1,2,3] == Just -4\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "foldr1",
            "comment": " Variant of `foldr` that has no starting value argument and treats the last element of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldr1 min [1,2,3,2,1] == Just 1\n    foldr1 min [] == Nothing\n    foldr1 (-) [1,2,3] == Just 2\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "getAt",
            "comment": " Returns `Just` the element at the given index in the list,\nor `Nothing` if the index is out of range.\n",
            "type": "Int -> List a -> Maybe.Maybe a"
          },
          {
            "name": "greedyGroupsOf",
            "comment": " Split list into groups of size given by the first argument \"greedily\" (don't throw the group away if not long enough).\n\n    greedyGroupsOf 3 [1..10]\n      == [[1,2,3],[4,5,6],[7,8,9],[10]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "greedyGroupsOfWithStep",
            "comment": " Split list into groups of size given by the first argument \"greedily\" (don't throw the group away if not long enough). After each group, drop a number of elements given by the second argumet before starting the next group.\n\n    greedyGroupsOfWithStep 3 2 [1..6]\n      == [[1,2,3],[3,4,5],[5,6]]\n",
            "type": "Int -> Int -> List a -> List (List a)"
          },
          {
            "name": "group",
            "comment": " Group similar elements together. `group` is equivalent to `groupWhile (==)`.\n\n    group [1,2,2,3,3,3,2,2,1] == [[1],[2,2],[3,3,3],[2,2],[1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "groupWhile",
            "comment": " Group elements together, using a custom equality test.\n\n    groupWhile (\\x y -> first x == first y) [(0,'a'),(0,'b'),(1,'c'),(1,'d')] == [[(0,'a'),(0,'b')],[(1,'c'),(1,'d')]]\n\nThe equality test should be an equivalent relationship, i.e. it should have the properties of reflexivity, symmetry, and transitivity. For non-equivalent relations it gives non-intuitive behavior:\n\n    groupWhile (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3,2,4],[1,3,2],[1]]\n\nFor grouping elements with a comparison test, which must only hold the property of transitivity, see `groupWhileTransitively`.\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupWhileTransitively",
            "comment": " Group elements together, using a custom comparison test. Start a new group each time the comparison test doesn't hold for two adjacent elements.\n\n    groupWhileTransitively (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3],[2,4],[1,3],[2],[1]]\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupsOf",
            "comment": " Split list into groups of size given by the first argument.\n\n    groupsOf 3 [1..10]\n      == [[1,2,3],[4,5,6],[7,8,9]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "groupsOfVarying",
            "comment": " `groupsOfVarying ns` takes `n` elements from a list for each `n` in `ns`, splitting the list into variably sized segments\n\n    groupsOfVarying [2, 3, 1] [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] == [[\"a\", \"b\"], [\"c\", \"d\", \"e\"], [\"f\"]]\n    groupsOfVarying [2] [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] == [[\"a\", \"b\"]]\n    groupsOfVarying [2, 3, 1, 5, 6] [\"a\", \"b\", \"c\", \"d\", \"e\"] == [[\"a\", \"b\"], [\"c\", \"d\", \"e\"]]\n",
            "type": "List Int -> List a -> List (List a)"
          },
          {
            "name": "groupsOfWithStep",
            "comment": " Split list into groups of size given by the first argument.  After each group, drop a number of elements given by the second argument before starting the next group.\n\n    groupsOfWithStep 2 1 [1..4]\n      == [[1,2],[2,3],[3,4]]\n",
            "type": "Int -> Int -> List a -> List (List a)"
          },
          {
            "name": "indexedFoldl",
            "comment": " Variant of `foldl` that passes the index of the current element to the step function. `indexedFoldl` is to `List.foldl` as `List.indexedMap` is to `List.map`.\n",
            "type": "(Int -> a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "indexedFoldr",
            "comment": " Variant of `foldr` that passes the index of the current element to the step function. `indexedFoldr` is to `List.foldr` as `List.indexedMap` is to `List.map`.\n",
            "type": "(Int -> a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "init",
            "comment": " Return all elements of the list except the last one.\n\n    init [1,2,3] == Just [1,2]\n    init [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "inits",
            "comment": " Return all initial segments of a list, from shortest to longest, empty list first, the list itself last.\n\n    inits [1,2,3] == [[],[1],[1,2],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "intercalate",
            "comment": " Take a list and a list of lists, insert that list between every list in the list of lists, concatenate the result. `intercalate xs xss` is equivalent to `concat (intersperse xs xss)`.\n\n    intercalate [0,0] [[1,2],[3,4],[5,6]] == [1,2,0,0,3,4,0,0,5,6]\n",
            "type": "List a -> List (List a) -> List a"
          },
          {
            "name": "interweave",
            "comment": " Return a list that contains elements from the two provided, in alternate order.\n    If one list runs out of items, append the items from the remaining list.\n\n    interweave [1,3] [2,4] == [1,2,3,4]\n    interweave [1,3,5,7] [2,4] == [1,2,3,4,5,7]\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "isInfixOf",
            "comment": " Take 2 lists and return True, if the first list is an infix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPermutationOf",
            "comment": " Take 2 lists and return True, if the first list is a permutation of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPrefixOf",
            "comment": " Take 2 lists and return True, if the first list is the prefix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSubsequenceOf",
            "comment": " Take 2 lists and return True, if the first list is a subsequence of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSuffixOf",
            "comment": " Take 2 lists and return True, if the first list is the suffix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Returns a list of repeated applications of `f`.\n\nIf `f` returns `Nothing` the iteration will stop. If it returns `Just y` then `y` will be added to the list and the iteration will continue with `f y`.\n    nextYear : Int -> Maybe Int\n    nextYear year =\n      if year >= 2030 then\n        Nothing\n      else\n        Just (year + 1)\n    -- Will evaluate to [2010, 2011, ..., 2030]\n    iterate nextYear 2010\n",
            "type": "(a -> Maybe.Maybe a) -> a -> List a"
          },
          {
            "name": "last",
            "comment": " Extract the last element of a list.\n\n    last [1,2,3] == Just 3\n    last [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "lift2",
            "comment": " Map functions taking multiple arguments over multiple lists, regardless of list length.\n  All possible combinations will be explored.\n\n  lift2 (+) [1,2,3] [4,5] == [5,6,6,7,7,8]\n",
            "type": "(a -> b -> c) -> List a -> List b -> List c"
          },
          {
            "name": "lift3",
            "comment": "\n",
            "type": "(a -> b -> c -> d) -> List a -> List b -> List c -> List d"
          },
          {
            "name": "lift4",
            "comment": "\n",
            "type": "(a -> b -> c -> d -> e) -> List a -> List b -> List c -> List d -> List e"
          },
          {
            "name": "maximumBy",
            "comment": " Find the first maximum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "minimumBy",
            "comment": " Find the first minimum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "notMember",
            "comment": " Negation of `member`.\n\n    1 `notMember` [1,2,3] == False\n    4 `notMember` [1,2,3] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "permutations",
            "comment": " Return the list of of all permutations of a list. The result is in lexicographic order.\n\n    permutations [1,2,3] == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "remove",
            "comment": " Remove the first occurrence of a value from a list.\n",
            "type": "a -> List a -> List a"
          },
          {
            "name": "removeAt",
            "comment": " Remove the element at an index from a list. If the index is out of range, this returns the original list unchanged. Otherwise, it returns the updated list.\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "replaceIf",
            "comment": " Replace all values that satisfy a predicate with a replacement value.\n",
            "type": "(a -> Bool) -> a -> List a -> List a"
          },
          {
            "name": "scanl1",
            "comment": " `scanl1` is a variant of `scanl` that has no starting value argument.\n\nCompare:\n\n    List.scanl (+) 0 [1,2,3] == [0,1,3,6]\n    scanl1 (+) [1,2,3] == [1,3,6]\n\n    List.scanl (-) 0 [1,2,3] == [0,1,1,2]\n    scanl1 (-) [1,2,3] == [1,1,2]\n\n    List.scanl (flip (-)) 0 [1,2,3] == [0,-1,-3,-6]\n    scanl1 (flip (-)) [1,2,3] == [1,-1,4]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "scanr",
            "comment": " `scanr` is a right-to-left dual of `scanl`. Note that:\n\n    head (scanr f z xs) == foldr f z xs\n\nExamples:\n\n    scanr (+) 0 [1,2,3] == [6,5,3,0]\n    scanr (-) 0 [1,2,3] == [2,-1,3,0]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "scanr1",
            "comment": " `scanr1` is a variant of `scanr` that has no starting value argument.\n\n    scanr1 (+) [1,2,3] == [6,5,3]\n    scanr1 (-) [1,2,3] == [2,-1,3]\n    scanr1 (flip (-)) [1,2,3] == [0,1,3]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "select",
            "comment": " Return all combinations in the form of (element, rest of the list). Read [Haskell Libraries proposal](https://mail.haskell.org/pipermail/libraries/2008-February/009270.html) for further ideas on how to use this function.\n\n    select [1,2,3,4] == [(1,[2,3,4]),(2,[1,3,4]),(3,[1,2,4]),(4,[1,2,3])]\n",
            "type": "List a -> List ( a, List a )"
          },
          {
            "name": "selectSplit",
            "comment": " Return all combinations in the form of (elements before, element, elements after).\n\n    selectSplit [1,2,3] == [([],1,[2,3]),([1],2,[3]),([1,2],3,[])]\n",
            "type": "List a -> List ( List a, a, List a )"
          },
          {
            "name": "setAt",
            "comment": " Set a value in a list by index. Returns the updated list if the index is in range, or Nothing if it is out of range.\n",
            "type": "Int -> a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "singleton",
            "comment": " Convert a value to a list containing one value.\n\n    singleton 3 == [3]\n",
            "type": "a -> List a"
          },
          {
            "name": "span",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is the longest prefix of that list, for each element of which the predicate holds. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(takeWhile p xs, dropWhile p xs)`.\n\n    span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])\n    span (< 5) [1,2,3] == ([1,2,3],[])\n    span (< 0) [1,2,3] == ([],[1,2,3])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "splitAt",
            "comment": " Take a number and a list, return a tuple of lists, where first part is prefix of the list of length equal the number, and second part is the remainder of the list. `splitAt n xs` is equivalent to `(take n xs, drop n xs)`.\n\n    splitAt 3 [1,2,3,4,5] == ([1,2,3],[4,5])\n    splitAt 1 [1,2,3] == ([1],[2,3])\n    splitAt 3 [1,2,3] == ([1,2,3],[])\n    splitAt 4 [1,2,3] == ([1,2,3],[])\n    splitAt 0 [1,2,3] == ([],[1,2,3])\n    splitAt (-1) [1,2,3] == ([],[1,2,3])\n",
            "type": "Int -> List a -> ( List a, List a )"
          },
          {
            "name": "stableSortWith",
            "comment": " Similar to List.sortWith, this sorts values with a custom comparison function.\n    Unlike List.sortWith, this sort is guaranteed to be a stable sort.\n    Note that List.sortWith is faster and is preferred if sort stability is not required.\n",
            "type": "(a -> a -> Basics.Order) -> List a -> List a"
          },
          {
            "name": "stripPrefix",
            "comment": " Drop the given prefix from the list. If the list doesn't start with that prefix, return `Nothing`.\n\n    stripPrefix [1,2] [1,2,3,4] == Just [3,4]\n    stripPrefix [1,2,3] [1,2,3,4,5] == Just [4,5]\n    stripPrefix [1,2,3] [1,2,3] == Just []\n    stripPrefix [1,2,3] [1,2] == Nothing\n    stripPrefix [3,2,1] [1,2,3,4,5] == Nothing\n",
            "type": "List a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "subsequences",
            "comment": " Return the list of all subsequences of a list.\n\n    subsequences [1,2,3] == [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "swapAt",
            "comment": " Swap two values in a list by index. Returns the updated list if both indices\nare in range, or Nothing if both are out of range. If the same index is\nsupplied twice the original list is returned.\n",
            "type": "Int -> Int -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "tails",
            "comment": " Return all final segments of a list, from longest to shortest, the list itself first, empty list last.\n\n    tails [1,2,3] == [[1,2,3],[2,3],[3],[]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "takeWhileRight",
            "comment": " Take elements from the right, while predicate still holds.\n\n    takeWhileRight ((<)5) [1..10] == [6,7,8,9,10]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "transpose",
            "comment": " Transpose rows and columns of the list of lists.\n\n    transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\n\nIf some rows are shorter than the following rows, their elements are skipped:\n\n    transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\n",
            "type": "List (List a) -> List (List a)"
          },
          {
            "name": "uncons",
            "comment": " Decompose a list into its head and tail. If the list is empty, return `Nothing`. Otherwise, return `Just (x, xs)`, where `x` is head and `xs` is tail.\n\n    uncons [1,2,3] == Just (1, [2,3])\n    uncons [] = Nothing\n",
            "type": "List a -> Maybe.Maybe ( a, List a )"
          },
          {
            "name": "unfoldr",
            "comment": " The `unfoldr` function is \"dual\" to `foldr`. `foldr` reduces a list to a summary value, `unfoldr` builds a list from a seed. The function takes a function and a starting element. It applies the function to the element. If the result is `Just (a, b)`, `a` is accumulated and the function is applied to `b`. If the result is `Nothing`, the list accumulated so far is returned.\n\n    unfoldr (\\b -> if b == 0 then Nothing else Just (b, b-1)) 5 == [5,4,3,2,1]\n",
            "type": "(b -> Maybe.Maybe ( a, b )) -> b -> List a"
          },
          {
            "name": "unique",
            "comment": " Remove duplicate values, keeping the first instance of each element which appears more than once.\n\n    unique [0,1,1,0,1] == [0,1]\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "uniqueBy",
            "comment": " Drop duplicates where what is considered to be a duplicate is the result of first applying the supplied function to the elements of the list.\n",
            "type": "(a -> comparable) -> List a -> List a"
          },
          {
            "name": "updateAt",
            "comment": " Replace a value at a specific index by calling an update function.\n",
            "type": "Int -> (a -> a) -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "updateIf",
            "comment": " Replace all values that satisfy a predicate by calling an update function.\n",
            "type": "(a -> Bool) -> (a -> a) -> List a -> List a"
          },
          {
            "name": "updateIfIndex",
            "comment": " Replace a value at an index that satisfies a predicate.\n",
            "type": "(Int -> Bool) -> (a -> a) -> List a -> List a"
          },
          {
            "name": "zip",
            "comment": " Take two lists and returns a list of corresponding pairs\n",
            "type": "List a -> List b -> List ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " Take three lists and returns a list of triples\n",
            "type": "List a -> List b -> List c -> List ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " Take four lists and returns a list of quadruples\n",
            "type": "List a -> List b -> List c -> List d -> List ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " Take five lists and returns a list of quintuples\n",
            "type": "List a -> List b -> List c -> List d -> List e -> List ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/maybe-extra",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Maybe.Extra",
        "comment": " Convenience functions for Maybe.\n\n# Common helpers\n@docs (?), join, isNothing, isJust, unwrap, unpack, filter\n\n# Applicative functions\n@docs andMap, next, prev\n\n# Alternatives\n@docs or, orLazy, orElseLazy, orElse\n\n# List and array functions\n@docs maybeToList, maybeToArray, traverse, combine, traverseArray, combineArray\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "?",
            "comment": " Flipped, infix version of `withDefault`.\n\n    head [] ? 0 == 0\n",
            "type": "Maybe.Maybe a -> a -> a"
          },
          {
            "name": "andMap",
            "comment": " Apply the function that is inside `Maybe` to a value that is inside `Maybe`. Return the result inside `Maybe`. If one of the `Maybe` arguments is `Nothing`, return `Nothing`.\n\n    Just ((+) 2) |> andMap (Just 3) == Just 5\n    Nothing |> andMap (Just 3) == Nothing\n    Just ((+) 2) |> andMap Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `<*>` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe (a -> b) -> Maybe.Maybe b"
          },
          {
            "name": "combine",
            "comment": " Take a list of `Maybe`s and return a `Maybe` with a list of values. `combine == traverse identity`.\n\n    combine [] == Just []\n    combine [Just 1, Just 2, Just 3] == Just [1,2,3]\n    combine [Just 1, Nothing, Just 3] == Nothing\n",
            "type": "List (Maybe.Maybe a) -> Maybe.Maybe (List a)"
          },
          {
            "name": "combineArray",
            "comment": " ",
            "type": "Array.Array (Maybe.Maybe a) -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "filter",
            "comment": " Take a `Maybe` and a predicate function and return a `Maybe` with the original value when a predicate matches.\n\n    filter (\\v -> v == 1) (Just 1) == Just 1\n    filter (\\v -> v == 2) (Just 1) == Nothing\n",
            "type": "(a -> Bool) -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "isJust",
            "comment": " Conveniently check if a `Maybe` matches `Just _`.\n\n    isJust (Just 42) == True\n    isJust (Just []) == True\n    isJust Nothing   == False\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "isNothing",
            "comment": " Conveniently check if a `Maybe` matches `Nothing`.\n\n    isNothing (Just 42) == False\n    isNothing (Just []) == False\n    isNothing Nothing   == True\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "join",
            "comment": " Flattens nested `Maybe`s\n\n    join (Just (Just 1)) == Just 1\n    join (Just Nothing)  == Nothing\n    join Nothing         == Nothing\n",
            "type": "Maybe.Maybe (Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "maybeToArray",
            "comment": " Return an empty array on `Nothing` or a list with one element, where the element is the value of `Just`.\n\n    maybeToArray Nothing == Array.fromList []\n    maybeToArray (Just 1) == Array.fromList [1]\n\n",
            "type": "Maybe.Maybe a -> Array.Array a"
          },
          {
            "name": "maybeToList",
            "comment": " Return an empty list on `Nothing` or a list with one element, where the element is the value of `Just`.\n\n    maybeToList Nothing == []\n    maybeToList (Just 1) == [1]\n",
            "type": "Maybe.Maybe a -> List a"
          },
          {
            "name": "next",
            "comment": " Take two `Maybe` values. If the first one equals `Nothing`, return `Nothing`. Otherwise return the second value.\n\n    next (Just 1) (Just 2) == Just 2\n    next Nothing (Just 2) == Nothing\n    next (Just 1) Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `*>` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe b"
          },
          {
            "name": "or",
            "comment": " Like the boolean `||` this will return the first value that is\npositive (`Just`). However, unlike with `||`, both values will be\ncomputed anyway (there is no short-circuiting).\n\n    Just 4 `or` Just 5    == Just 4\n    Just 4 `or` Nothing   == Just 4\n    Nothing `or` Just 5   == Just 5\n    Nothing `or` Nothing  == Nothing\n\nThis function sort of works like `oneOf` but on single `Maybe`s.\n\nAdvanced functional programmers will recognize this as the\nimplementation of `mplus` for `Maybe`s from the `MonadPlus` type\nclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "orElse",
            "comment": " Strict version of `orElseLazy` (and at the same time,\npiping-friendly version of `or`).\n\n    orElse (Just 4) (Just 5)  == Just 5  -- crucial difference from `or`\n    orElse (Just 4) Nothing   == Just 4\n    orElse Nothing  (Just 5)  == Just 5\n    orElse Nothing  Nothing   == Nothing\n\nAlso:\n\n    List.head []\n    |> orElse (List.head [4])\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "orElseLazy",
            "comment": " Piping-friendly version of `orLazy`. The first argument will only\nbe evaluated if the second argument is `Nothing`. Example use:\n\n    List.head []\n    |> orElseLazy (\\() -> List.head [4])\n",
            "type": "(() -> Maybe.Maybe a) -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "orLazy",
            "comment": " Non-strict version of `or`. The second argument will only be\nevaluated if the first argument is `Nothing`.\n",
            "type": "Maybe.Maybe a -> (() -> Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "prev",
            "comment": " Take two `Maybe` values. If the second one equals `Nothing`, return `Nothing`. Otherwise return the first value.\n\n    prev (Just 1) (Just 2) == Just 1\n    prev Nothing (Just 2) == Nothing\n    prev (Just 1) Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `<*` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe a"
          },
          {
            "name": "traverse",
            "comment": " Take a function that returns `Maybe` value and a list. Map a function over each element of the list. Collect the result in the list within `Maybe`.\n\n    traverse (\\x -> Just (x*10)) [1,2,3,4,5] == Just [10,20,30,40,50]\n",
            "type": "(a -> Maybe.Maybe b) -> List a -> Maybe.Maybe (List b)"
          },
          {
            "name": "traverseArray",
            "comment": " ",
            "type": "(a -> Maybe.Maybe b) -> Array.Array a -> Maybe.Maybe (Array.Array b)"
          },
          {
            "name": "unpack",
            "comment": " A version of `unwrap` that is non-strict in the default value (by\nhaving it passed in a thunk).\n",
            "type": "(() -> b) -> (a -> b) -> Maybe.Maybe a -> b"
          },
          {
            "name": "unwrap",
            "comment": " Take a default value, a function and a `Maybe`.\nReturn the default value if the `Maybe` is `Nothing`.\nIf the `Maybe` is `Just a`, apply the function on `a` and return the `b`.\nThat is, `unwrap d f` is equivalent to `Maybe.map f >> Maybe.withDefault d`.\n",
            "type": "b -> (a -> b) -> Maybe.Maybe a -> b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/random-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Random.Set",
        "comment": " Extra randomized functions on sets.\n\n# Create a Set\n@docs set\n\n# Create a Generator\n@docs sample\n\n# Modify a Generator\n@docs notInSet\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "notInSet",
            "comment": " Filter a generator of all values not in a given set.\n",
            "type": "Set.Set comparable -> Random.Generator comparable -> Random.Generator comparable"
          },
          {
            "name": "sample",
            "comment": " Select a value from a set uniformly at random, or `Nothing` for an empty set.\nAnalogous to `Random.Extra.sample` but with sets.\n",
            "type": "Set.Set comparable -> Random.Generator (Maybe.Maybe comparable)"
          },
          {
            "name": "set",
            "comment": " Generate a set of at most the given size from a generator.\n\nThe size of a generated set is limited both by the integer provided and the\nnumber of unique values the generator can produce. It is very likely, but not\nguaranteed, that generated sets will be as big as the smaller of these two limits.\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator (Set.Set comparable)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Order",
        "comment": " An extra random generator for the `Order` type.\n\n@docs order\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "order",
            "comment": " Generate a random order with equal probability.\n",
            "type": "Random.Generator Basics.Order"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.List",
        "comment": " Extra randomized functions on lists.\n\n# Work with a List\n@docs choose, shuffle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "choose",
            "comment": " Sample without replacement: produce a randomly selected element of the\nlist, and the list with that element omitted. If the list is empty, the\nselected element will be `Nothing`.\n",
            "type": "List a -> Random.Generator ( Maybe.Maybe a, List a )"
          },
          {
            "name": "shuffle",
            "comment": " Shuffle the list using the Fisher-Yates algorithm. Takes O(_n_ log _n_)\ntime and O(_n_) additional space.\n",
            "type": "List a -> Random.Generator (List a)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Char",
        "comment": " Extra randomized functions on characters.\n\n# Basic Generators\n@docs char, lowerCaseLatin, upperCaseLatin, latin, english, ascii, unicode\n\n# Unicode Generators (UTF-8)\n@docs basicLatin, latin1Supplement, latinExtendedA, latinExtendedB, ipaExtensions, spacingModifier, combiningDiacriticalMarks, greekAndCoptic, cyrillic, cyrillicSupplement, armenian, hebrew, arabic, syriac, arabicSupplement, thaana, nko, samaritan, mandaic, arabicExtendedA, devanagari, bengali, gurmukhi, gujarati, oriya, tamil, telugu, kannada, malayalam, sinhala, thai, lao, tibetan, myanmar, georgian, hangulJamo, ethiopic, ethiopicSupplement, cherokee, unifiedCanadianAboriginalSyllabic, ogham, runic, tagalog, hanunoo, buhid, tagbanwa, khmer, mongolian, unifiedCanadianAboriginalSyllabicExtended, limbu, taiLe, newTaiLue, khmerSymbol, buginese, taiTham, balinese, sundanese, batak, lepcha, olChiki, sundaneseSupplement, vedicExtensions, phoneticExtensions, phoneticExtensionsSupplement, combiningDiacriticalMarksSupplement, latinExtendedAdditional, greekExtended, generalPunctuation, superscriptOrSubscript, currencySymbol, combiningDiacriticalMarksForSymbols, letterlikeSymbol, numberForm, arrow, mathematicalOperator, miscellaneousTechnical, controlPicture, opticalCharacterRecognition, enclosedAlphanumeric, boxDrawing, blockElement, geometricShape, miscellaneousSymbol, dingbat, miscellaneousMathematicalSymbolA, supplementalArrowA, braillePattern, supplementalArrowB, miscellaneousMathematicalSymbolB, supplementalMathematicalOperator, miscellaneousSymbolOrArrow, glagolitic, latinExtendedC, coptic, georgianSupplement, tifinagh, ethiopicExtended, cyrillicExtendedA, supplementalPunctuation, cjkRadicalSupplement, kangxiRadical, ideographicDescription, cjkSymbolOrPunctuation, hiragana, katakana, bopomofo, hangulCompatibilityJamo, kanbun, bopomofoExtended, cjkStroke, katakanaPhoneticExtension, enclosedCJKLetterOrMonth, cjkCompatibility, cjkUnifiedIdeographExtensionA, yijingHexagramSymbol, cjkUnifiedIdeograph, yiSyllable, yiRadical, lisu, vai, cyrillicExtendedB, bamum, modifierToneLetter, latinExtendedD, sylotiNagri, commonIndicNumberForm, phagsPa, saurashtra, devanagariExtended, kayahLi, rejang, hangulJamoExtendedA, javanese, cham, myanmarExtendedA, taiViet, meeteiMayekExtension, ethiopicExtendedA, meeteiMayek, hangulSyllable, hangulJamoExtendedB, highSurrogate, highPrivateUseSurrogate, lowSurrogate, privateUseArea, cjkCompatibilityIdeograph, alphabeticPresentationForm, arabicPresentationFormA, variationSelector, verticalForm, combiningHalfMark, cjkCompatibilityForm, smallFormVariant, arabicPresentationFormB, halfwidthOrFullwidthForm, special, linearBSyllable, linearBIdeogram, aegeanNumber, ancientGreekNumber, ancientSymbol, phaistosDisc, lycian, carian, oldItalic, gothic, ugaritic, oldPersian, deseret, shavian, osmanya, cypriotSyllable, imperialAramaic, phoenician, lydian, meroiticHieroglyph, meroiticCursive, kharoshthi, oldSouthArabian, avestan, inscriptionalParthian, inscriptionalPahlavi, oldTurkic, rumiNumericalSymbol, brahmi, kaithi, soraSompeng, chakma, sharada, takri, cuneiform, cuneiformNumberOrPunctuation, egyptianHieroglyph, bamumSupplement, miao, kanaSupplement, byzantineMusicalSymbol, musicalSymbol, ancientGreekMusicalNotationSymbol, taiXuanJingSymbol, countingRodNumeral, mathematicalAlphanumericSymbol, arabicMathematicalAlphabeticSymbol, mahjongTile, dominoTile, playingCard, enclosedAlphanumericSupplement, enclosedIdeographicSupplement, miscellaneousSymbolOrPictograph, emoticon, transportOrMapSymbol, alchemicalSymbol, cjkUnifiedIdeographExtensionB, cjkUnifiedIdeographExtensionC, cjkUnifiedIdeographExtensionD, cjkCompatibilityIdeographSupplement, tag, variationSelectorSupplement, supplementaryPrivateUseAreaA, supplementaryPrivateUseAreaB\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "aegeanNumber",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "alchemicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "alphabeticPresentationForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekMusicalNotationSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekNumber",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicMathematicalAlphabeticSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "armenian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arrow",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ascii",
            "comment": " Generate a random ASCII Character\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "avestan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "balinese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamum",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamumSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "basicLatin",
            "comment": " UTF-8\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "batak",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bengali",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "blockElement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofoExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "boxDrawing",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "brahmi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "braillePattern",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "buginese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "buhid",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "byzantineMusicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "carian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "chakma",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "char",
            "comment": " Generate a random character within a certain keyCode range\n\n    lowerCaseLetter = char 65 90\n",
            "type": "Int -> Int -> Random.Generator Char"
          },
          {
            "name": "cherokee",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibility",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeographSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkRadicalSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkStroke",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkSymbolOrPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionC",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionD",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarks",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksForSymbols",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningHalfMark",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "commonIndicNumberForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "controlPicture",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "coptic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "countingRodNumeral",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiform",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiformNumberOrPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "currencySymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cypriotSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "deseret",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagari",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagariExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "dingbat",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "dominoTile",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "egyptianHieroglyph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "emoticon",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumeric",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumericSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedCJKLetterOrMonth",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedIdeographicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "english",
            "comment": " Generate a random English Letter (alias for `latin`)\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "generalPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "geometricShape",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgianSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "glagolitic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gothic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekAndCoptic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gujarati",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gurmukhi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "halfwidthOrFullwidthForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulCompatibilityJamo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hanunoo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hebrew",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "highPrivateUseSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "highSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hiragana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ideographicDescription",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "imperialAramaic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalPahlavi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalParthian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ipaExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "javanese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kaithi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanaSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanbun",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kangxiRadical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kannada",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakanaPhoneticExtension",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kayahLi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kharoshthi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmer",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmerSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lao",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin",
            "comment": " Generate a random Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin1Supplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedAdditional",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedC",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedD",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lepcha",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "letterlikeSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "limbu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBIdeogram",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lisu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowerCaseLatin",
            "comment": " Generate a random lower-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "lycian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lydian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mahjongTile",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "malayalam",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mandaic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalAlphanumericSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalOperator",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayek",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayekExtension",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticCursive",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticHieroglyph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miao",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrArrow",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrPictograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousTechnical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "modifierToneLetter",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mongolian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "musicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmar",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmarExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "newTaiLue",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "nko",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "numberForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ogham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "olChiki",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldItalic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldPersian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldSouthArabian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldTurkic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "opticalCharacterRecognition",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oriya",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "osmanya",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phagsPa",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phaistosDisc",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoenician",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensionsSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "playingCard",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "privateUseArea",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "rejang",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "rumiNumericalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "runic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "samaritan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "saurashtra",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sharada",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "shavian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sinhala",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "smallFormVariant",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "soraSompeng",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "spacingModifier",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "special",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundanese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundaneseSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "superscriptOrSubscript",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalMathematicalOperator",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sylotiNagri",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "syriac",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tag",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagalog",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagbanwa",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiLe",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiTham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiViet",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiXuanJingSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "takri",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tamil",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "telugu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "thaana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "thai",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tibetan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tifinagh",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "transportOrMapSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ugaritic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "unicode",
            "comment": " Generate a random Character in the valid unicode range.\nNote: This can produce garbage values as unicode doesn't use all valid values.\nTo test for specific languages and character sets, use the appropriate one\nfrom the list.\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabicExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "upperCaseLatin",
            "comment": " Generate a random upper-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "vai",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelector",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelectorSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "vedicExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "verticalForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiRadical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yijingHexagramSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Date",
        "comment": " Extra randomized functions on dates.\n\n# Generators\n@docs date, day, month, year, hour, hour24, hour12, minute, second\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "date",
            "comment": " Generate a random date given a start date and an end date.\n",
            "type": "Date.Date -> Date.Date -> Random.Generator Date.Date"
          },
          {
            "name": "day",
            "comment": " Generate a random day of the week.\n",
            "type": "Random.Generator Date.Day"
          },
          {
            "name": "hour",
            "comment": " Generate a random hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour12",
            "comment": " Generate a random 12-hour day hour (random int between 0 and 11 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour24",
            "comment": " Generate a random 24-hour day hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "minute",
            "comment": " Generate a random minute (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "month",
            "comment": " Generate a random month of the year.\n",
            "type": "Random.Generator Date.Month"
          },
          {
            "name": "second",
            "comment": " Generate a random second (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "year",
            "comment": " Generate a random year given a start year and end year (alias for `int`)\n",
            "type": "Int -> Int -> Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Array",
        "comment": " Extra randomized functions on arrays.\n\n# Create an Array\n@docs array, rangeLengthArray\n\n# Work with an Array\n@docs sample, choose, shuffle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Generate a random array of given size given a random generator\n\n    randomLength5IntArray = array 5 (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "choose",
            "comment": " Sample without replacement: produce a randomly selected element of the\narray, and the array with that element omitted (shifting all later elements\ndown). If the array is empty, the selected element will be `Nothing`.\n",
            "type": "Array.Array a -> Random.Generator ( Maybe.Maybe a, Array.Array a )"
          },
          {
            "name": "rangeLengthArray",
            "comment": " Generate a random array of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "sample",
            "comment": " Sample with replacement: produce a randomly selected element of the\narray, or `Nothing` for an empty array. Takes O(1) time.\n",
            "type": "Array.Array a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "shuffle",
            "comment": " Shuffle the array using the Fisher-Yates algorithm. Takes O(_n_ log _n_)\ntime and O(_n_) additional space.\n",
            "type": "Array.Array a -> Random.Generator (Array.Array a)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Float",
        "comment": " Extra randomized functions on floats.\n\n# Arithmetic Generators\n@docs anyFloat, positiveFloat, negativeFloat, floatGreaterThan, floatLessThan\n\n# Gaussian Generators\n@docs normal, standardNormal\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyFloat",
            "comment": " A generator that generates any float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "floatGreaterThan",
            "comment": " A generator that generates a float greater than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "floatLessThan",
            "comment": " A generator that generates a float less than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "negativeFloat",
            "comment": " A generator that generates any negative float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "normal",
            "comment": " Create a generator of floats that is normally distributed with\ngiven mean and standard deviation.\n",
            "type": "Float -> Float -> Random.Generator Float"
          },
          {
            "name": "positiveFloat",
            "comment": " A generator that generates any positive float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "standardNormal",
            "comment": " A generator that follows a standard normal distribution (as opposed to\na uniform distribution)\n",
            "type": "Random.Generator Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Dict",
        "comment": " Extra randomized functions on dicts.\n\n# Generators\n@docs dict, rangeLengthDict\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Generate a random dict with given length, key generator, and value generator\n\n    randomLength10StringIntDict = dict 10 (englishWord 10) (int 0 100)\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          },
          {
            "name": "rangeLengthDict",
            "comment": " Generate a random dict of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.String",
        "comment": " Extra randomized functions on strings.\n\n# Create a String\n@docs string, rangeLengthString\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "rangeLengthString",
            "comment": " Generates a random string of random length given the minimum length\nand maximum length and a given character generator.\n",
            "type": "Int -> Int -> Random.Generator Char -> Random.Generator String"
          },
          {
            "name": "string",
            "comment": " Generate a random string of a given length with a given character generator\n\n    fiveLetterEnglishWord = string 5 Random.Char.english\n",
            "type": "Int -> Random.Generator Char -> Random.Generator String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Int",
        "comment": " Extra randomized functions on ints.\n\n# Generators\n@docs anyInt, positiveInt, negativeInt, intGreaterThan, intLessThan\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyInt",
            "comment": " A generator that generates any int that can be generated by the\nrandom generator algorithm.\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "intGreaterThan",
            "comment": " A generator that generates an int greater than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "intLessThan",
            "comment": " A generator that generates an int less than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "negativeInt",
            "comment": " A generator that generates a negative int\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "positiveInt",
            "comment": " A generator that generates a positive int\n",
            "type": "Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Extra",
        "comment": " This module provides many common and general-purpose helper functions for\ncore's Random library. You can find even more useful functions for a particular\ntype in the other modules.\n\n# Constant Generators\n@docs constant\n\n# Maps\nFor `map` and `mapN` up through N=5, use the core library.\n@docs map6, andMap\n\n# New Generators\n@docs oneIn, maybe, result, choice\n\n# Working with Lists\n@docs choices, frequency, sample, combine, rangeLengthList\n\n# Filtered Generators\n@docs filter\n\n# andThenN\nThese functions are like `mapN` except the function you pass in does not return\nan exact value, but instead another generator. That means you can take in several\nrandom arguments to drive more randomness.\n@docs andThen2, andThen3, andThen4, andThen5, andThen6\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Map over any number of generators.\n\n    randomPerson : Generator Person\n    randomPerson =\n      map person genFirstName\n        |> andMap genLastName\n        |> andMap genBirthday\n        |> andMap genPhoneNumber\n        |> andMap genAddress\n        |> andMap genEmail\n",
            "type": "Random.Generator a -> Random.Generator (a -> b) -> Random.Generator b"
          },
          {
            "name": "andThen2",
            "comment": " ",
            "type": "(a -> b -> Random.Generator c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "andThen3",
            "comment": " ",
            "type": "(a -> b -> c -> Random.Generator d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "andThen4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> Random.Generator e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "andThen5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> Random.Generator f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "andThen6",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f -> Random.Generator g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "choice",
            "comment": " Choose between two values with equal probability.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n      choice Heads Tails\n\nNote that this function takes values, not generators. That's because it's meant\nto be a lightweight helper for a specific use. If you need to choose between two\ngenerators, use `choices [gen1, gen2]`.\n",
            "type": "a -> a -> Random.Generator a"
          },
          {
            "name": "choices",
            "comment": " Create a generator that chooses a generator from a list of generators\nwith equal probability.\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List (Random.Generator a) -> Random.Generator a"
          },
          {
            "name": "combine",
            "comment": " Turn a list of generators into a generator of lists.\n",
            "type": "List (Random.Generator a) -> Random.Generator (List a)"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always produces the value provided. This is useful\nwhen creating complicated chained generators and you need to handle a simple\ncase. It's also useful for the base case of recursive generators.\n",
            "type": "a -> Random.Generator a"
          },
          {
            "name": "filter",
            "comment": " Filter a generator so that all generated values satisfy the given predicate.\n\n    evens : Generator Int\n    evens =\n      filter (\\i -> i % 2 == 0) (int minInt maxInt)\n\n**Warning:** If the predicate is unsatisfiable, the generator will not\nterminate, your application will crash with a stack overflow, and you will be\nsad. You should also avoid predicates that are merely very difficult to satisfy.\n\n    badCrashingGenerator =\n      filter (\\_ -> False) anotherGenerator\n\n    likelyCrashingGenerator =\n      filter (\\i -> i % 2000 == 0) (int minInt maxInt)\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "frequency",
            "comment": " Create a generator that chooses a generator from a list of generators\nbased on the provided weight. The likelihood of a given generator being\nchosen is its weight divided by the total weight (which doesn't have to equal 1).\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List ( Float, Random.Generator a ) -> Random.Generator a"
          },
          {
            "name": "map6",
            "comment": " Map a function of six arguments over six generators.\n",
            "type": "(a -> b -> c -> d -> e -> f -> g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "maybe",
            "comment": " Produce `Just` a value on `True`, and `Nothing` on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.Generator Bool -> Random.Generator a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "oneIn",
            "comment": " Produce `True` one-in-n times on average.\n\nDo not pass a value less then one to this function.\n\n    flippedHeads = oneIn 2\n    rolled6 = oneIn 6\n",
            "type": "Int -> Random.Generator Bool"
          },
          {
            "name": "rangeLengthList",
            "comment": " Generate a random list of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (List a)"
          },
          {
            "name": "result",
            "comment": " Produce an `Ok` a value on `True`, and an `Err` value on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.Generator Bool -> Random.Generator err -> Random.Generator val -> Random.Generator (Result.Result err val)"
          },
          {
            "name": "sample",
            "comment": " Given a list, choose an element uniformly at random. `Nothing` is only\nproduced if the list is empty.\n\n    type Direction = North | South | East | West\n\n    direction : Generator Direction\n    direction =\n      sample [North, South, East, West]\n        |> map (Maybe.withDefault North)\n\n",
            "type": "List a -> Random.Generator (Maybe.Maybe a)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Color",
        "comment": " Extra randomized functions on colors.\n\n# Random Colors by Components\n@docs rgb, rgba, hsl, hsla\n\n# Random Colors by Shade\n@docs greyscale, grayscale, red, green, blue\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "blue",
            "comment": " Generate a random shade of blue.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Alias for greyscale.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "green",
            "comment": " Generate a random shade of green.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Generate a random shade of grey\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Generate a random non-transparent color by random HSL values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Generate a random transparent color by random HSLA values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "red",
            "comment": " Generate a random shade of red.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Generate a random non-transparent color by random RGB values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Generate a random transparent color by random RGBA values.\n",
            "type": "Random.Generator Color.Color"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/result-extra",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Result.Extra",
        "comment": " Convenience functions for working with `Result`.\n\n# Common Helpers\n@docs isOk, isErr, extract, unwrap, unpack, mapBoth, combine\n\n# Alternatives\n@docs or, orLazy, orElseLazy, orElse\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "combine",
            "comment": " Combine a list of results into a single result (holding a list).\n",
            "type": "List (Result.Result x a) -> Result.Result x (List a)"
          },
          {
            "name": "extract",
            "comment": " Turn a `Result e a` to an `a`, by applying the conversion\nfunction specified to the `e`.\n",
            "type": "(e -> a) -> Result.Result e a -> a"
          },
          {
            "name": "isErr",
            "comment": " Check whether the result is `Err` without unwrapping it.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "isOk",
            "comment": " Check whether the result is `Ok` without unwrapping it.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " Apply the first argument function to an `Err` and the second\nargument function to an `Ok` of a `Result`.\n",
            "type": "(e -> f) -> (a -> b) -> Result.Result e a -> Result.Result f b"
          },
          {
            "name": "or",
            "comment": " Like the Boolean `||` this will return the first value that is\npositive (`Ok`). However, unlike with `||`, both values will be\ncomputed anyway (there is no short-circuiting).\n\n    Ok 4      `or` Ok 5      == Ok 4\n    Err \"Oh!\" `or` Ok 5      == Ok 5\n    Ok 4      `or` Err \"No!\" == Ok 4\n    Err \"Oh!\" `or` Err \"No!\" == Err \"No!\"\n\nAs the last example line shows, the second error is returned if both\nresults are erroneous.\n",
            "type": "Result.Result e a -> Result.Result e a -> Result.Result e a"
          },
          {
            "name": "orElse",
            "comment": " Strict version of `orElseLazy` (and at the same time,\npiping-friendly version of `or`).\n\n    orElse (Ok 4)      (Ok 5)      == Ok 5  -- crucial difference from `or`\n    orElse (Err \"Oh!\") (Ok 5)      == Ok 5\n    orElse (Ok 4)      (Err \"No!\") == Ok 4\n    orElse (Err \"Oh!\") (Err \"No!\") == Err \"Oh!\"  -- also different from `or`\n\nAlso:\n\n    String.toInt \"Hello\"\n    |> orElse (String.toInt \"42\")\n",
            "type": "Result.Result e a -> Result.Result e a -> Result.Result e a"
          },
          {
            "name": "orElseLazy",
            "comment": " Piping-friendly version of `orLazy`. The first argument will only\nbe evaluated if the second argument is an `Err`. Example use:\n\n    String.toInt \"Hello\"\n    |> orElseLazy (\\() -> String.toInt \"42\")\n",
            "type": "(() -> Result.Result e a) -> Result.Result e a -> Result.Result e a"
          },
          {
            "name": "orLazy",
            "comment": " Non-strict version of `or`. The second argument will only be\nevaluated if the first argument is an `Err`.\n",
            "type": "Result.Result e a -> (() -> Result.Result e a) -> Result.Result e a"
          },
          {
            "name": "unpack",
            "comment": " Convert a `Result e a` to a `b` by applying either the first\nfunction if the `Result` is an `Err` or the second function if the\n`Result` is `Ok`. Both of these functions must return the same type.\n",
            "type": "(e -> b) -> (a -> b) -> Result.Result e a -> b"
          },
          {
            "name": "unwrap",
            "comment": " Convert a `Result e a` to a `b` by applying a function if\nthe `Result` is `Ok` or using the provided default value if it\nis an `Err`.\n",
            "type": "b -> (a -> b) -> Result.Result e a -> b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/shrink",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Shrink",
        "comment": " Library containing a collection of basic shrinking strategies and\nhelper functions to help you construct shrinking strategies.\n\n# Shrinking Basics\n@docs Shrinker, shrink\n\n# Shrinkers\n@docs noShrink, unit, bool, order, int, atLeastInt, float, atLeastFloat, char, atLeastChar, character, string, maybe, result, lazylist, list, array, tuple, tuple3, tuple4, tuple5\n\n# Functions on Shrinkers\n@docs convert, keepIf, dropIf, merge, map, andMap\n\n",
        "aliases": [
          {
            "name": "Shrinker",
            "comment": " The shrinker type.\nA shrinker is a function that takes a value and returns a list of values that\nare in some sense \"smaller\" than the given value. If there are no such values\nconceptually, then the shrinker should just return the empty list.\n",
            "args": [
              "a"
            ],
            "type": "a -> Lazy.List.LazyList a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Apply a lazy list of functions on a lazy list of values.\n\nThe argument order is so that it is easy to use in `|>` chains.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList (a -> b) -> Lazy.List.LazyList b"
          },
          {
            "name": "array",
            "comment": " Array shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Arrays.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Array.Array a)"
          },
          {
            "name": "atLeastChar",
            "comment": " Construct a shrinker of chars which considers the given char to\nbe most minimal.\n",
            "type": "Char -> Shrink.Shrinker Char"
          },
          {
            "name": "atLeastFloat",
            "comment": " Construct a shrinker of floats which considers the given float to\nbe most minimal.\n",
            "type": "Float -> Shrink.Shrinker Float"
          },
          {
            "name": "atLeastInt",
            "comment": " Construct a shrinker of ints which considers the given int to\nbe most minimal.\n",
            "type": "Int -> Shrink.Shrinker Int"
          },
          {
            "name": "bool",
            "comment": " Shrinker of bools.\n",
            "type": "Shrink.Shrinker Bool"
          },
          {
            "name": "char",
            "comment": " Shrinker of chars.\n",
            "type": "Shrink.Shrinker Char"
          },
          {
            "name": "character",
            "comment": " Shrinker of chars which considers the empty space as the most\nminimal char and omits the control key codes.\n\nEquivalent to:\n\n    atLeastChar (Char.fromCode 32)\n",
            "type": "Shrink.Shrinker Char"
          },
          {
            "name": "convert",
            "comment": " Convert a Shrinker of a's into a Shrinker of b's using two inverse functions.\n\nIf you use this function as follows:\n\n    shrinkerB = f g shrinkerA\n\nMake sure that\n\n    `f(g(x)) == x` for all x\n\nOr else this process will generate garbage.\n",
            "type": "(a -> b) -> (b -> a) -> Shrink.Shrinker a -> Shrink.Shrinker b"
          },
          {
            "name": "dropIf",
            "comment": " Filter out the results of a shrinker. The resulting shrinker\nwill only throw away shrinks which satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "float",
            "comment": " Shrinker of floats.\n",
            "type": "Shrink.Shrinker Float"
          },
          {
            "name": "int",
            "comment": " Shrinker of integers.\n",
            "type": "Shrink.Shrinker Int"
          },
          {
            "name": "keepIf",
            "comment": " Filter out the results of a shrinker. The resulting shrinker\nwill only produce shrinks which satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "lazylist",
            "comment": " Lazy List shrinker constructor. Takes a shrinker of values and returns a\nshrinker of Lazy Lists. The lazy list being shrunk must be finite. (I mean\nreally, how do you shrink infinity?)\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Lazy.List.LazyList a)"
          },
          {
            "name": "list",
            "comment": " List shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Lists.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (List a)"
          },
          {
            "name": "map",
            "comment": " Re-export of `Lazy.List.map`\nThis is useful in order to compose shrinkers, especially when used in\nconjunction with `andMap`. For example:\n\n    type alias Vector =\n      { x : Float\n      , y : Float\n      , z : Float\n      }\n\n    vector : Shrinker Vector\n    vector {x,y,z} =\n      Vector\n        `map`    float x\n        `andMap` float y\n        `andMap` float z\n",
            "type": "(a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "maybe",
            "comment": " Maybe shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Maybes.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Maybe.Maybe a)"
          },
          {
            "name": "merge",
            "comment": " Merge two shrinkers. Generates all the values in the first\nshrinker, and then all the non-duplicated values in the second\nshrinker.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "noShrink",
            "comment": " Perform no shrinking. Equivalent to the empty lazy list.\n",
            "type": "Shrink.Shrinker a"
          },
          {
            "name": "order",
            "comment": " Shrinker of `Order` values.\n",
            "type": "Shrink.Shrinker Basics.Order"
          },
          {
            "name": "result",
            "comment": " Result shrinker constructor. Takes a shrinker of errors and a shrinker of\nvalues and returns a shrinker of Results.\n",
            "type": "Shrink.Shrinker error -> Shrink.Shrinker value -> Shrink.Shrinker (Result.Result error value)"
          },
          {
            "name": "shrink",
            "comment": " Perform shrinking. Takes a predicate that returns `True` if you want\nshrinking to continue (e.g. the test failed). Also takes a shrinker and a value\nto shrink. It returns the shrunken value, or the input value if no shrunken\nvalues that satisfy the predicate are found.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> a -> a"
          },
          {
            "name": "string",
            "comment": " Shrinker of strings. Considers the empty string to be the most\nminimal string and the space to be the most minimal char.\n\nEquivalent to:\n\n    convert String.fromList String.toList (list character)\n",
            "type": "Shrink.Shrinker String"
          },
          {
            "name": "tuple",
            "comment": " 2-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a, Shrink.Shrinker b ) -> Shrink.Shrinker ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " 3-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a, Shrink.Shrinker b, Shrink.Shrinker c ) -> Shrink.Shrinker ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " 4-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a , Shrink.Shrinker b , Shrink.Shrinker c , Shrink.Shrinker d ) -> Shrink.Shrinker ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " 5-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a , Shrink.Shrinker b , Shrink.Shrinker c , Shrink.Shrinker d , Shrink.Shrinker e ) -> Shrink.Shrinker ( a, b, c, d, e )"
          },
          {
            "name": "unit",
            "comment": " Shrink the empty tuple. Equivalent to `noShrink`.\n",
            "type": "Shrink.Shrinker ()"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/string-extra",
    "version": "1.1.1",
    "docs": [
      {
        "name": "String.Extra",
        "comment": " Additional functions for working with Strings\n\n## Change words casing\n\n@docs toSentenceCase, toTitleCase, decapitalize\n\n## Inflector functions\n\nFunctions borrowed from the Rails Inflector class\n\n@docs camelize, classify, underscored, dasherize, humanize\n\n## Replace and Splice\n\n@docs replace, replaceSlice, insertAt, clean\n\n## Splitting\n\n@docs break, softBreak\n\n## Wrapping\n\n@docs wrap, wrapWith, softWrap, softWrapWith, quote, surround\n\n## Checks\n\n@docs isBlank, countOccurrences\n\n## Formatting\n\n@docs clean, unquote, unsurround, unindent, ellipsis, softEllipsis, ellipsisWith, stripTags\n\n## Converting Lists\n\n@docs toSentence, toSentenceOxford\n\n## Finding\n\n@docs rightOf, leftOf, rightOfBack, leftOfBack\n\n## Converting Numbers\n\n@docs fromInt, fromFloat\n\n## Converting UTF-32\n\n@docs toCodePoints, fromCodePoints\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "break",
            "comment": " Breaks a string into a list of strings of maximum the provided size.\n\n    break 10 \"The quick brown fox\" == [\"The quick \", \"brown fox\"]\n    break 2 \"\" == [\"\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "camelize",
            "comment": " Converts underscored or dasherized string to a camelized one.\n\n   camelize \"-moz-transform\" == \"MozTransform\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "classify",
            "comment": " Converts string to camelized string starting with an uppercase.\nAll non word characters will be stripped out of the original string.\n\n    classify \"some_class_name\" == \"SomeClassName\"\n    classify \"myLittleCamel.class.name\" == \"MyLittleCamelClassName\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "clean",
            "comment": " Trims the whitespace of both sides of the string and compresses\nreapeated whitespace internally to a single whitespace char.\n\n    clean \" The   quick brown   fox    \" == \"The quick brown fox\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "countOccurrences",
            "comment": " Returns the number of occurrences of a substring in another string\n\n    countOccurrences \"Hello\" \"Hello World\" == 1\n    countOccurrences \"o\" \"Hello World\" == 2\n",
            "type": "String -> String -> Int"
          },
          {
            "name": "dasherize",
            "comment": " Returns a string joined by dashes after separating it by its uppercase characters.\nAny sequence of spaces or underscored will also be converted to a single dash.\nThe final string will be lowercased\n\n    dasherize \"SomeClassName\" == \"-some-class-name\"\n    dasherize \"some_class_name\" = \"some-class-name\"\n    dasherize \"someClass name\" = \"some-class-name\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "decapitalize",
            "comment": " Make a string's first character lowercase.\n\n    decapitalize \"This is a phrase\" == \"this is a phrase\"\n    decapitalize \"Hello, World\" == \"hello, World\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "ellipsis",
            "comment": " Truncates the string at the specified length and appends\nthree dots only if the tructated string + the 3 dots have exactly\nthe desired lenght.\n\nThe resulting string will have at most the specified lenght\n\n    ellipsis 5 \"Hello World\" == \"Hello...\"\n    ellipsis 10 \"Hello World\" == \"Hello W...\"\n    ellipsis 10 \"Hello\" == \"Hello\"\n    ellipsis 8 \"Hello World\" == \"Hello World\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "ellipsisWith",
            "comment": " Truncates the string at the specified lenght and adds the append\nstring only if the combined lenght of the truncated string and the append\nstring have exactly the desired lenght.\n\nThe resulting string will have at most the specified lenght\n\n    ellipsisWith 5 \" ..\" \"Hello World\" == \"Hello ..\"\n    ellipsisWith 10 \" ..\"  \"Hello World\" == \"Hello W...\"\n    ellipsisWith 10 \" ..\" \"Hello\" == \"Hello\"\n    ellipsisWith 8 \" ..\" \"Hello World\" == \"Hello World\"\n\n",
            "type": "Int -> String -> String -> String"
          },
          {
            "name": "fromCodePoints",
            "comment": " Converts a list of UTF-32 code points into a String. Inverse of\n`toCodePoints`.\n\n    fromCodePoints [ 97, 98, 99 ] == \"abc\"\n    fromCodePoints [ 169, 167, 960 ] == \"©§π\"\n\nIf every code point is a valid UTF-16 code unit, `fromCodePoints` is equivalent\nto\n\n    List.map Char.fromCode >> String.fromList\n\nHowever, `fromCodePoints` additionally splits code points that do not fit in a\nsingle UTF-16 code unit into surrogate pairs, so that even code points outside\nthe Basic Multilingual Plane (BMP) can be included in the resulting string:\n\n    -- Code point 128169 is 💩, U+1F4A9 PILE OF POO\n    fromCodePoints [ 128169, 33 ] == \"💩!\"\n",
            "type": "List Int -> String"
          },
          {
            "name": "fromFloat",
            "comment": " Turns a Float into a String.\n\nThis works the same way as `Basics.toString` except its type is restricted,\nso if you accidentally pass it something other than a Float, you get an error.\n",
            "type": "Float -> String"
          },
          {
            "name": "fromInt",
            "comment": " Turn an Int into a String.\n\nThis works the same way as `Basics.toString` except its type is restricted,\nso if you accidentally pass it something other than an Int, you get an error.\n",
            "type": "Int -> String"
          },
          {
            "name": "humanize",
            "comment": " Converts an underscored, camelized, or dasherized string into one that can be read by humans.\nAlso removes beginning and ending whitespace, and removes the postfix '_id'.\nThe first character will be capitalized\n\n    humanize \"this_is_great\" == \"This is great\"\n    humanize \"ThisIsGreat\" = \"This is great\"\n    humanize \"this-is-great\" = \"This is great\"\n    humanize \"author_id\" = \"Author\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "insertAt",
            "comment": " Inserts a substring at the specified index.\n\n    insertAt \"world\" 6 \"Hello \" == \"Hello world\"\n",
            "type": "String -> Int -> String -> String"
          },
          {
            "name": "isBlank",
            "comment": " Tests if a string is empty or only contains whitespace\n\n    isBlank \"\" == True\n    isBlank \"\\n\" == True\n    isBlank \"  \" == True\n    isBlank \" a\" == False\n\n",
            "type": "String -> Bool"
          },
          {
            "name": "leftOf",
            "comment": " Searches a string from left to right for a pattern and returns a substring\nconsisting of the characters in the string that are to the left of the pattern.\n\n    leftOf \"_\" \"This_is_a_test_string\" == \"This\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "leftOfBack",
            "comment": " Searches a string from right to left for a pattern and returns a substring\nconsisting of the characters in the string that are to the right of the pattern.\n\n    leftOfBack \"_\" \"This_is_a_test_string\" == \"This_is_a_test\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "quote",
            "comment": " Adds quotes to a string.\n\n    quote \"foo\" == \"\\\"foo\\\"\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "replace",
            "comment": " Replace all occurrences of the search string with the substitution string.\n\n    replace \"Mary\" \"Sue\" \"Hello, Mary\" == \"Hello, Sue\"\n\n",
            "type": "String -> String -> String -> String"
          },
          {
            "name": "replaceSlice",
            "comment": " Replace text within a portion of a string given a substitution\nstring, a start index and an end index.\n\n    replaceSlice \"Sue\" 4 6 \"Hi, Bob\" == \"Hi, Sue\"\n    replaceSlice \"elephants\" 0  6 \"snakes on a plane!\" == \"elephants on a plane!\"\n    replaceSlice \"under\" 7  9 \"snakes on a plane!\" == \"snakes under a plane!\"\n\n",
            "type": "String -> Int -> Int -> String -> String"
          },
          {
            "name": "rightOf",
            "comment": " Searches a string from left to right for a pattern and returns a substring\nconsisting of the characters in the string that are to the right of the pattern.\n\n    rightOf \"_\" \"This_is_a_test_string\" == \"is_a_test_string\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "rightOfBack",
            "comment": " Searches a string from right to left for a pattern and returns a substring\nconsisting of the characters in the string that are to the right of the pattern.\n\n    rightOfBack \"_\" \"This_is_a_test_string\" == \"string\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "softBreak",
            "comment": " Breaks a string into a list of strings of maximum the provided size,\nwithout cutting words at the edge.\n\n    softBreak 6 \"The quick brown fox\" == [\"The quick\", \" brown\", \" fox\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "softEllipsis",
            "comment": " Truncates the string at the specified length and appends\nthree dots only if the tructated string + the 3 dots have exactly\nthe desired lenght.\n\nIn constrast to `ellipsis`, this method will produced unfinished words,\ninstead, it will find the closest complete word and apply the ellipsis from\nthere.\n\nAdditionally, it will remove any trailing whitespace and punctuation characters\nat the end of the truncated string.\n\nThe resulting stirng can in some cases exceed the specifed lenght, by at most\nthree characters.\n\n    softEllipsis 5 \"Hello, World\" == \"Hello...\"\n    softEllipsis 8 \"Hello, World\" == \"Hello...\"\n    softEllipsis 15 \"Hello, cruel world\" == \"Hello, cruel...\"\n    softEllipsis 10 \"Hello\" == \"Hello\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "softWrap",
            "comment": " Chops a given string into parts of a given width without breaking works apart,\nand then seperating them using a new line.\n\n    softWrap 7 \"My very long text\" === \"My very\\nlong text\"\n    softWrap 3 \"Hello World\" === \"Hello \\nWorld\"\n    softWrap 100 \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "softWrapWith",
            "comment": " Chops a given string into parts of a given width without breaking works apart,\nand then seperating them using the given separator.\n\n    softWrapWith 7 \"...\" \"My very long text\" === \"My very...long text\"\n    softWrapWith 3 \"\\n\" \"Hello World\" === \"Hello \\nWorld\"\n    softWrapWith 100 \"\\t\" \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String -> String"
          },
          {
            "name": "stripTags",
            "comment": " Removes all HTML tags from the string, preserving the text inside them.\n\n    stripTags \"a <a href=\\\"#\\\">link</a>\" == \"a link\"\n    stripTags \"<script>alert('hello world!')</script> == \"alert('hello world!')\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "surround",
            "comment": " Surrounds a string with another string.\n\n    surround \"bar\" \"foo\" == \"barfoobar\"\n\n",
            "type": "String -> String -> String"
          },
          {
            "name": "toCodePoints",
            "comment": " Converts a String into a list of UTF-32 code points.\n\n    toCodePoints \"abc\" == [ 97, 98, 99 ]\n    toCodePoints \"©§π\" == [ 169, 167, 960 ]\n\nIf every character in the string can be represented by a single UTF-16 code\nunit, `toCodePoints` is equivalent to\n\n    String.toList >> List.map Char.toCode\n\nHowever, for characters that do not fit into a single UTF-16 code unit and\nhave to be represented by a surrogate pair, the above will return each code\nunit in the surrogate pair separately:\n\n    -- 💩 is U+1F4A9 PILE OF POO\n    List.map Char.toCode (String.toList \"💩!\") == [ 55357, 56489, 33 ]\n\n`toCodePoints` detects and combines surrogate pairs of code units to return a\nlist of valid UTF-32 code points:\n\n    toCodePoints \"💩!\" == [ 128169, 33 ]\n\nNote that this still does not necessarily correspond to logical/visual\ncharacters, since it is possible for things like accented characters to be\nrepresented as two separate UTF-32 code points (a base character and a\ncombining accent).\n",
            "type": "String -> List Int"
          },
          {
            "name": "toSentence",
            "comment": " Converts a list of strings into a human formatted readable list\n\n    toSentence [] == \"\"\n    toSentence [\"lions\"] == \"lions\"\n    toSentence [\"lions\", \"tigers\"] == \"lions and tigers\"\n    toSentence [\"lions\", \"tigers\", \"bears\"] == \"lions, tigers and bears\"\n\n",
            "type": "List String -> String"
          },
          {
            "name": "toSentenceCase",
            "comment": " Make a string's first character uppercase\n\n    toSentenceCase \"this is a phrase\" == \"This is a phrase\"\n    toSentenceCase \"hello, world\" == \"Hello, world\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "toSentenceOxford",
            "comment": " Converts a list of strings into a human formatted readable list using an oxford comma\n\n    toSentenceOxford [] == \"\"\n    toSentenceOxford [\"lions\"] == \"lions\"\n    toSentenceOxford [\"lions\", \"tigers\"] == \"lions and tigers\"\n    toSentenceOxford [\"lions\", \"tigers\", \"bears\"] == \"lions, tigers, and bears\"\n\n",
            "type": "List String -> String"
          },
          {
            "name": "toTitleCase",
            "comment": " Uppercase the first character of each word in a string\n\n    toTitleCase \"this is a phrase\" == \"This Is A Phrase\"\n    toTitleCase \"hello, world\" == \"Hello, World\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "underscored",
            "comment": " Returns a string joined by underscores after separating it by its uppercase characters.\nAny sequence of spaces or dashes will also be converted to a single underscore.\nThe final string will be lowercased\n\n    underscore \"SomeClassName\" == \"some_class_name\"\n    underscore \"some-class-name\" == \"some_class_name\"\n    underscore \"SomeClass name\" == \"some_class_name\n\n",
            "type": "String -> String"
          },
          {
            "name": "unindent",
            "comment": " Removes the least sequence of leading spaces or tabs on each line\nof the string, so that at least one of the lines will not have any\nleading spaces nor tabs and the rest of the lines will have the same\namount of indentation removed.\n\n    unindent \"  Hello\\n    World \" == \"Hello\\n  World\"\n    unindent \"\\t\\tHello\\n\\t\\t\\t\\tWorld\" == \"Hello\\n\\t\\tWorld\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "unquote",
            "comment": " Removes quotes that surround a string.\n\n    unquote \"\\\"foo\\\"\" == \"foo\"\n    unquote \"\\\"foo\\\"bar\\\"\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "unsurround",
            "comment": " Removes surrounding strings from another string.\n\n    unsurround \"foo\" \"foobarfoo\" == \"bar\"\n\n",
            "type": "String -> String -> String"
          },
          {
            "name": "wrap",
            "comment": " Chops a given string into parts of a given width, seperating them using a\nnew line.\n\n    wrap 7 \"My very long text\" === \"My very\\nlong te\\nxt\"\n    wrap 100 \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "wrapWith",
            "comment": " Separates a string into parts of a given width, using a given seperator.\n\nLook at `wrap` if you just want to wrap using newlines.\n\n    wrapWith 7 \"\\n\" \"My very long text\" === \"My very\\nlong text\"\n    wrapWith 100 \"\\n\" \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/svg-extra",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Svg.Extra",
        "comment": " Convenience functionality on\n[`Svg`](http://package.elm-lang.org/packages/elm-lang/svg/latest/Svg#Svg)\n\n@docs static\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "static",
            "comment": " Embedding static svg.\n\nThe type argument\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\nin `Svg Never` tells us that the svg has no event handlers attached,\nit will not generate any messages. We may want such static svg to be\nembedded into or combined with arbitrary other svg, while using types\nto enforce the staticness. That is what this function provides.\n\n*Note:* To call this function, the argument need not be literally of type\n`Svg Never`. It suffices if it is a fully polymorphic (in the message type)\n`Svg` value. For example, this works: `static (Svg.text \"abcdef\")`.\n",
            "type": "Svg.Svg Basics.Never -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-community/undo-redo",
    "version": "2.0.0",
    "docs": [
      {
        "name": "UndoList.Shrink",
        "comment": " Shrink UndoList Submodule.\n\nProvides shrinking strategies for timelines and messages.\n\n# Shrinkers\n@docs undolist, msg\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Shrink an undo-list msg given an msg shrinker.\nConsiders `Reset` to be most minimal.\n",
            "type": "Shrink.Shrinker msg -> Shrink.Shrinker (UndoList.Msg msg)"
          },
          {
            "name": "undolist",
            "comment": " Shrink an undo-list of states given a shrinker of states.\n",
            "type": "Shrink.Shrinker state -> Shrink.Shrinker (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "UndoList.Random",
        "comment": " Random UndoList Submodule.\n\nProvides random undolist and undolist msg generators.\n\n# Generators\n@docs undolist, msg\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Generate random undolist msgs given an msg generator.\n\nGenerates msgs with the following probabilities:\n\n- Reset  : 5%\n- Forget : 5%\n- Undo   : 30%\n- Redo   : 30%\n- New    : 30%\n",
            "type": "Random.Generator msg -> Random.Generator (UndoList.Msg msg)"
          },
          {
            "name": "undolist",
            "comment": " Random UndoList Generator constructor.\nGiven a generator of state, a length for the past, and a length for the future,\ngenerate a random undolist of states.\n\n    undolist pastLength futureLength generator\n",
            "type": "Int -> Int -> Random.Generator state -> Random.Generator (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "UndoList.Decode",
        "comment": " Decode UndoList submodule.\n\nProvides JSON decoders for Timelines and UndoList Messages.\n\n# Decoders\n@docs undolist, msg\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Decode an undo-list msg given a decoder of messages.\n",
            "type": "Json.Decode.Decoder msg -> Json.Decode.Decoder (UndoList.Msg msg)"
          },
          {
            "name": "undolist",
            "comment": " Decode an undo-list given a decoder of state.\n",
            "type": "Json.Decode.Decoder state -> Json.Decode.Decoder (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "UndoList.Encode",
        "comment": " Encode UndoList submodule.\n\nProvides JSON encoders for Timelines and UndoList Messages.\n\n# Encoders\n@docs undolist, msg\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Encode an UndoList Msg of JSON values.\nBest paired with the `mapMsg` function from UndoList.\n\n    encodeMsg msgEncoder =\n      UndoList.mapMsg msgEncoder >> msg\n",
            "type": "UndoList.Msg Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "undolist",
            "comment": " Encode an undolist of JSON values.\nBest paired with the `map` function from UndoList.\n\n    encodeUndoList stateEncoder  =\n      UndoList.map stateEncoder >> undolist\n",
            "type": "UndoList.UndoList Json.Encode.Value -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "UndoList",
        "comment": " UndoList Data Structure.\n\n# Definition\n@docs UndoList\n\n# Basic Operations\n@docs undo, redo, fresh, new, forget, reset\n\n# Query UndoList\n@docs hasPast, hasFuture, length, lengthPast, lengthFuture\n\n# Messages\n@docs Msg, mapMsg\n\n# Functional Operations\n@docs map, mapPresent, update, connect, reduce, foldl, foldr, reverse, flatten, flatMap, andThen, map2, andMap\n\n# Shorthands\n@docs view\n\n# Conversions\n@docs toList, fromList\n",
        "aliases": [
          {
            "name": "UndoList",
            "comment": " The UndoList data structure.\nAn UndoList has:\n\n1. A list of past states\n2. A present state\n3. A list of future states\n\n\nThe head of the past list is the most recent state and the head of the future\nlist is the next state. (i.e., the tails of both lists point away from the\npresent)\n",
            "args": [
              "state"
            ],
            "type": "{ past : List state, present : state, future : List state }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Simple UndoList Msg type. This is a simple type that can be used for\nmost use cases. This works best when paired with the `update` function as\n`update` will perform the corresponding operations on the undolist automatically.\n\nConsider using your own data type only if you really need it.\n",
            "args": [
              "msg"
            ],
            "cases": [
              [
                "Reset",
                []
              ],
              [
                "Redo",
                []
              ],
              [
                "Undo",
                []
              ],
              [
                "Forget",
                []
              ],
              [
                "New",
                [
                  "msg"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Map a function over any number of undo-lists.\n\n    map f xs\n        |> andMap ys\n        |> andMap zs\n",
            "type": "UndoList.UndoList a -> UndoList.UndoList (a -> b) -> UndoList.UndoList b"
          },
          {
            "name": "andThen",
            "comment": " Chain undo-list operations. This is simply an alias of `flatMap`\n",
            "type": "(a -> UndoList.UndoList b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "connect",
            "comment": " Connect two undo-lists end to end. The present of the first undolist is\nconsidered the present of the output undolist.\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "flatMap",
            "comment": " Map over an undo-list and then flatten the result.\n",
            "type": "(a -> UndoList.UndoList b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "flatten",
            "comment": " Flatten an undo-list of undo-lists into a single undo-list.\n",
            "type": "UndoList.UndoList (UndoList.UndoList a) -> UndoList.UndoList a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an undo-list from the left (or from the past)\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an undo-list from the right (or from the future)\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "forget",
            "comment": " Forget the past and look to the future!\nThis simply clears the past list.\n\ni.e.\n    forget (UndoList [3,2,1] 4 [5,6]) == UndoList [] 4 [5,6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "fresh",
            "comment": " Turn a state into an undo-list with neither past nor future.\n",
            "type": "state -> UndoList.UndoList state"
          },
          {
            "name": "fromList",
            "comment": " Convert a list to undolist. The provided state is used as the present\nstate and the list is used as the future states.\n\n    fromList 1 [2,3,4] == UndoList [] 1 [2,3,4]\n",
            "type": "state -> List state -> UndoList.UndoList state"
          },
          {
            "name": "hasFuture",
            "comment": " Check if the undo-list has any future states.\n",
            "type": "UndoList.UndoList state -> Bool"
          },
          {
            "name": "hasPast",
            "comment": " Check if the undo-list has any past states.\n",
            "type": "UndoList.UndoList state -> Bool"
          },
          {
            "name": "length",
            "comment": " Get the full length of an undo-list\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "lengthFuture",
            "comment": " Get the length of the future\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "lengthPast",
            "comment": " Get the length of the past.\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function over an undo-list.\nBe careful with this. The function will be applied to the past and the future\nas well. If you just want to change the present, use `mapPresent`.\n\nA good use case for `map` is to encode an undo-list as JSON.\n\nExample:\n\n    import UndoList.Encode as Encode\n\n    encode encoder undolist =\n      map encoder undolist\n      |> Encode.undolist\n",
            "type": "(a -> b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "map2",
            "comment": " Map a function over a pair of undo-lists.\n",
            "type": "(a -> b -> c) -> UndoList.UndoList a -> UndoList.UndoList b -> UndoList.UndoList c"
          },
          {
            "name": "mapMsg",
            "comment": " Map a function over a msg.\n",
            "type": "(a -> b) -> UndoList.Msg a -> UndoList.Msg b"
          },
          {
            "name": "mapPresent",
            "comment": " Apply a function only to the present.\n",
            "type": "(a -> a) -> UndoList.UndoList a -> UndoList.UndoList a"
          },
          {
            "name": "new",
            "comment": " Add a new present state to the undo-list, turning the old\npresent state into a past state and erasing the future.\n",
            "type": "state -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "redo",
            "comment": " If the undo-list has any future states, set the next\nfuture state as the current state and turn the old present state\ninto a past state.\n\ni.e.\n\n    redo (UndoList [3,2,1] 4 [5,6]) == UndoList [4,3,2,1] 5 [6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "reduce",
            "comment": " Alias for `foldl`\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "reset",
            "comment": " Reset the undo-list by returning to the very first state\nand clearing all other states.\n\ni.e.\n\n    reset (UndoList [3,2,1] 4 [5,6]) == UndoList [] 1 []\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "reverse",
            "comment": " Reverse an undo-list.\n",
            "type": "UndoList.UndoList a -> UndoList.UndoList a"
          },
          {
            "name": "toList",
            "comment": " Convert an undo-list to a list :\n\n    toList (UndoList [3,2,1] 4 [5,6]) == [1,2,3,4,5,6]\n",
            "type": "UndoList.UndoList state -> List state"
          },
          {
            "name": "undo",
            "comment": " If the undolist has any past states, set the most recent past\nstate as the current state and turn the old present state into\na future state.\n\ni.e.\n\n    undo (UndoList [3,2,1] 4 [5,6]) == UndoList [2,1] 3 [4,5,6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "update",
            "comment": " Convert a function that updates the state to a function that updates an undo-list.\nThis is very useful to allow you to write update functions that only deal with\nthe individual states of your system and treat undo/redo as an add on.\n\n\nExample:\n\n    -- Your update function\n    update msg state =\n      case msg of\n        ... -- some implementation\n\n    -- Your new update function\n    update' = UndoList.update update\n\n",
            "type": "(msg -> state -> state) -> UndoList.Msg msg -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "view",
            "comment": " Function to help not having to deal with the full undolist from with\nyour actual view function.\n\nSuppose you define the following:\n\n    initial : model\n    update : msg -> model -> model\n    view : model -> Html (UndoList.Msg msg)\n\nThen, you could construct the main function as follows:\n\n    main =\n        Html.beginnerProgram\n            { model = UndoList.fresh initial\n            , update = UndoList.update update\n            , view = UndoList.view view\n            }\n\n",
            "type": "(state -> view) -> UndoList.UndoList state -> view"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/animation-frame",
    "version": "1.0.1",
    "docs": [
      {
        "name": "AnimationFrame",
        "comment": " Browsers have their own render loop, repainting things as fast as possible.\nIf you want smooth animations in your application, it is helpful to sync up\nwith the browsers natural refresh rate. The subscriptions in this library fire\nin step with the browser so you can make sure you are not doing extra animation\nframes.\n\n**Note:** The subscriptions in this library hook into JavaScript's\n`requestAnimationFrame` function.\n\n# Animation Subscriptions\n@docs times, diffs\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "diffs",
            "comment": " Subscribe to the time diffs between animation frames, given in lockstep\nwith the browser's natural rerender speed.\n",
            "type": "(Time.Time -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "times",
            "comment": " Subscribe to the current time, given in lockstep with the browser's natural\nrerender speed.\n",
            "type": "(Time.Time -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/core",
    "version": "5.0.0",
    "docs": [
      {
        "name": "Process",
        "comment": "\n\n# Processes\n@docs Id, spawn, sleep, kill\n\n## Future Plans\n\nRight now, this library is pretty sparse. For example, there is no public API\nfor processes to communicate with each other. This is a really important\nability, but it is also something that is extraordinarily easy to get wrong!\n\nI think the trend will be towards an Erlang style of concurrency, where every\nprocess has an “event queue” that anyone can send messages to. I currently\nthink the API will be extended to be more like this:\n\n    type Id exit msg\n\n    spawn : Task exit a -> Task x (Id exit Never)\n\n    kill : Id exit msg -> Task x ()\n\n    send : Id exit msg -> msg -> Task x ()\n\nA process `Id` will have two type variables to make sure all communication is\nvalid. The `exit` type describes the messages that are produced if the process\nfails because of user code. So if processes are linked and trapping errors,\nthey will need to handle this. The `msg` type just describes what kind of\nmessages this process can be sent by strangers.\n\nWe shall see though! This is just a draft that does not cover nearly everything\nit needs to, so the long-term vision for concurrency in Elm will be rolling out\nslowly as I get more data and experience.\n\nI ask that people bullish on compiling to node.js keep this in mind. I think we\ncan do better than the hopelessly bad concurrency model of node.js, and I hope\nthe Elm community will be supportive of being more ambitious, even if it takes\nlonger. That’s kind of what Elm is all about.\n",
        "aliases": [
          {
            "name": "Id",
            "comment": " A light-weight process that runs concurrently. You can use `spawn` to\nget a bunch of different tasks running in different processes. The Elm runtime\nwill interleave their progress. So if a task is taking too long, we will pause\nit at an `andThen` and switch over to other stuff.\n\n**Note:** We make a distinction between *concurrency* which means interleaving\ndifferent sequences and *parallelism* which means running different\nsequences at the exact same time. For example, a\n[time-sharing system](https://en.wikipedia.org/wiki/Time-sharing) is definitely\nconcurrent, but not necessarily parallel. So even though JS runs within a\nsingle OS-level thread, Elm can still run things concurrently.\n",
            "args": [],
            "type": "Platform.ProcessId"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "kill",
            "comment": " Sometimes you `spawn` a process, but later decide it would be a waste to\nhave it keep running and doing stuff. The `kill` function will force a process\nto bail on whatever task it is running. So if there is an HTTP request in\nflight, it will also abort the request.\n",
            "type": "Process.Id -> Task.Task x ()"
          },
          {
            "name": "sleep",
            "comment": " Block progress on the current process for a given amount of time. The\nJavaScript equivalent of this is [`setTimeout`][setTimeout] which lets you\ndelay work until later.\n\n[setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout\n",
            "type": "Time.Time -> Task.Task x ()"
          },
          {
            "name": "spawn",
            "comment": " Run a task in its own light-weight process. In the following example,\n`task1` and `task2` will be interleaved. If `task1` makes a long HTTP request\nor is just taking a long time, we can hop over to `task2` and do some work\nthere.\n\n    spawn task1\n      |> Task.andThen (\\_ -> spawn task2)\n\n**Note:** This creates a relatively restricted kind of `Process` because it\ncannot receive any messages. More flexibility for user-defined processes will\ncome in a later release!\n",
            "type": "Task.Task x a -> Task.Task y Process.Id"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random",
        "comment": " This library helps you generate pseudo-random values.\n\nThis library is all about building [`generators`](#Generator) for whatever\ntype of values you need. There are a bunch of primitive generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier\ngenerators with functions like [`list`](#list) and [`map`](#map).\n\nIt may be helpful to [read about JSON decoders][json] because they work very\nsimilarly.\n\n[json]: https://evancz.gitbooks.io/an-introduction-to-elm/content/interop/json.html\n\n> *Note:* This is an implementation of the Portable Combined Generator of\nL'Ecuyer for 32-bit computers. It is almost a direct translation from the\n[System.Random](http://hackage.haskell.org/package/random-1.0.1.1/docs/System-Random.html)\nmodule. It has a period of roughly 2.30584e18.\n\n# Generators\n@docs Generator\n\n# Primitive Generators\n@docs bool, int, float\n\n# Data Structure Generators\n@docs pair, list\n\n# Custom Generators\n@docs map, map2, map3, map4, map5, andThen\n\n# Generate Values\n@docs generate\n\n# Generate Values Manually\n@docs step, Seed, initialSeed\n\n# Constants\n@docs maxInt, minInt\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n\nTo actually *run* a generator and produce the random values, you need to use\nfunctions like [`generate`](#generate) and [`initialSeed`](#initialSeed).\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Seed",
            "comment": " A `Seed` is the source of randomness in this whole system. Whenever\nyou want to use a generator, you need to pair it with a seed.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain random operations, threading through the seed. In the following\nexample, we will generate a random letter by putting together uppercase and\nlowercase letters.\n\n    letter : Generator Char\n    letter =\n      bool\n        |> andThen upperOrLower\n\n    upperOrLower : Bool -> Generator Char\n    upperOrLower b =\n      if b then uppercaseLetter else lowercaseLetter\n\n    -- bool : Generator Bool\n    -- uppercaseLetter : Generator Char\n    -- lowercaseLetter : Generator Char\n",
            "type": "(a -> Random.Generator b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "bool",
            "comment": " Create a generator that produces boolean values. The following example\nsimulates a coin flip that may land heads or tails.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n        map (\\b -> if b then Heads else Tails) bool\n",
            "type": "Random.Generator Bool"
          },
          {
            "name": "float",
            "comment": " Generate floats in a given range. The following example is a generator\nthat produces decimals between 0 and 1.\n\n    probability : Generator Float\n    probability =\n        float 0 1\n",
            "type": "Float -> Float -> Random.Generator Float"
          },
          {
            "name": "generate",
            "comment": " Create a command that will generate random values.\n\nRead more about how to use this in your programs in [The Elm Architecture\ntutorial][arch] which has a section specifically [about random values][rand].\n\n[arch]: https://evancz.gitbooks.io/an-introduction-to-elm/content/architecture/index.html\n[rand]: https://evancz.gitbooks.io/an-introduction-to-elm/content/architecture/effects/random.html\n",
            "type": "(a -> msg) -> Random.Generator a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "initialSeed",
            "comment": " Create a &ldquo;seed&rdquo; of randomness which makes it possible to\ngenerate random values. If you use the same seed many times, it will result\nin the same thing every time! A good way to get an unexpected seed is to use\nthe current time.\n",
            "type": "Int -> Random.Seed"
          },
          {
            "name": "int",
            "comment": " Generate 32-bit integers in a given range.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n",
            "type": "Int -> Int -> Random.Generator Int"
          },
          {
            "name": "list",
            "comment": " Create a list of random values.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the values produced by a generator. The following examples show\nhow to generate booleans and letters based on a basic integer generator.\n\n    bool : Generator Bool\n    bool =\n      map ((==) 1) (int 0 1)\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n",
            "type": "(a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "map2",
            "comment": " Combine two generators.\n\nThis function is used to define things like [`pair`](#pair) where you want to\nput two generators together.\n\n    pair : Generator a -> Generator b -> Generator (a,b)\n    pair genA genB =\n      map2 (,) genA genB\n\n",
            "type": "(a -> b -> c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "map3",
            "comment": " Combine three generators. This could be used to produce random colors.\n\n    import Color\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (int 0 360)) (float 0 1) (float 0 1)\n",
            "type": "(a -> b -> c -> d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "map4",
            "comment": " Combine four generators.\n",
            "type": "(a -> b -> c -> d -> e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "map5",
            "comment": " Combine five generators.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "maxInt",
            "comment": " The maximum value for randomly generated 32-bit ints: 2147483647 ",
            "type": "Int"
          },
          {
            "name": "minInt",
            "comment": " The minimum value for randomly generated 32-bit ints: -2147483648 ",
            "type": "Int"
          },
          {
            "name": "pair",
            "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator ( a, b )"
          },
          {
            "name": "step",
            "comment": " Generate a random value as specified by a given `Generator`.\n\nIn the following example, we are trying to generate a number between 0 and 100\nwith the `int 0 100` generator. Each time we call `step` we need to provide a\nseed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\nSo here it is done right, where we get a new seed from each `step` call and\nthread that through.\n\n    seed0 = initialSeed 31415\n\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed1 ==> (31, seed2)\n    -- step (int 0 100) seed2 ==> (99, seed3)\n\nNotice that we use different seeds on each line. This is important! If you use\nthe same seed, you get the same results.\n\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed0 ==> (42, seed1)\n",
            "type": "Random.Generator a -> Random.Seed -> ( a, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date",
        "comment": " Library for working with dates. Email the mailing list if you encounter\nissues with internationalization or locale formatting.\n\n# Dates\n@docs Date, now\n\n# Conversions\n@docs fromString, toTime, fromTime\n\n# Extractions\n@docs year, month, Month, day, dayOfWeek, Day, hour, minute, second, millisecond\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Date",
            "comment": " Representation of a date.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Day",
            "comment": " Represents the days of the week.\n",
            "args": [],
            "cases": [
              [
                "Mon",
                []
              ],
              [
                "Tue",
                []
              ],
              [
                "Wed",
                []
              ],
              [
                "Thu",
                []
              ],
              [
                "Fri",
                []
              ],
              [
                "Sat",
                []
              ],
              [
                "Sun",
                []
              ]
            ]
          },
          {
            "name": "Month",
            "comment": " Represents the month of the year.\n",
            "args": [],
            "cases": [
              [
                "Jan",
                []
              ],
              [
                "Feb",
                []
              ],
              [
                "Mar",
                []
              ],
              [
                "Apr",
                []
              ],
              [
                "May",
                []
              ],
              [
                "Jun",
                []
              ],
              [
                "Jul",
                []
              ],
              [
                "Aug",
                []
              ],
              [
                "Sep",
                []
              ],
              [
                "Oct",
                []
              ],
              [
                "Nov",
                []
              ],
              [
                "Dec",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "day",
            "comment": " Extract the day of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `23`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "dayOfWeek",
            "comment": " Extract the day of the week for a given date. Given the date 23 June\n1990 at 11:45AM this returns the day `Sat` as defined below.\n",
            "type": "Date.Date -> Date.Day"
          },
          {
            "name": "fromString",
            "comment": " Attempt to read a date from a string.\n",
            "type": "String -> Result.Result String Date.Date"
          },
          {
            "name": "fromTime",
            "comment": " Convert a time in milliseconds into a `Date`.\n\nA time is the number of milliseconds since\n[the Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n",
            "type": "Time.Time -> Date.Date"
          },
          {
            "name": "hour",
            "comment": " Extract the hour of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `11`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "millisecond",
            "comment": " Extract the millisecond of a given date. Given the date 23 June 1990 at 11:45:30.123AM\nthis returns the integer `123`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "minute",
            "comment": " Extract the minute of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `45`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "month",
            "comment": " Extract the month of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the month `Jun` as defined below.\n",
            "type": "Date.Date -> Date.Month"
          },
          {
            "name": "now",
            "comment": " Get the `Date` at the moment when this task is run.\n",
            "type": "Task.Task x Date.Date"
          },
          {
            "name": "second",
            "comment": " Extract the second of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `0`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "toTime",
            "comment": " Convert a `Date` to a time in milliseconds.\n\nA time is the number of milliseconds since\n[the Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n",
            "type": "Date.Date -> Time.Time"
          },
          {
            "name": "year",
            "comment": " Extract the year of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `1990`.\n",
            "type": "Date.Date -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Json.Decode",
        "comment": " Turn JSON values into Elm values. Definitely check out this [intro to\nJSON decoders][guide] to get a feel for how this library works!\n\n[guide]: https://guide.elm-lang.org/interop/json.html\n\n# Primitives\n@docs Decoder, string, bool, int, float\n\n# Data Structures\n@docs nullable, list, array, dict, keyValuePairs\n\n# Object Primitives\n@docs field, at, index\n\n# Inconsistent Structure\n@docs maybe, oneOf\n\n# Run Decoders\n@docs decodeString, decodeValue, Value\n\n# Mapping\n\n**Note:** If you run out of map functions, take a look at [elm-decode-pipeline][pipe]\nwhich makes it easier to handle large objects, but produces lower quality type\nerrors.\n\n[pipe]: http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest\n\n@docs map, map2, map3, map4, map5, map6, map7, map8\n\n# Fancy Decoding\n@docs lazy, value, null, succeed, fail, andThen\n",
        "aliases": [
          {
            "name": "Value",
            "comment": " A JSON value.\n",
            "args": [],
            "type": "Json.Encode.Value"
          }
        ],
        "types": [
          {
            "name": "Decoder",
            "comment": " A value that knows how to decode JSON values.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Create decoders that depend on previous results. If you are creating\nversioned data, you might do something like this:\n\n    info : Decoder Info\n    info =\n      field \"version\" int\n        |> andThen infoHelp\n\n    infoHelp : Int -> Decoder Info\n    infoHelp version =\n      case version of\n        4 ->\n          infoDecoder4\n\n        3 ->\n          infoDecoder3\n\n        _ ->\n          fail <|\n            \"Trying to decode info, but version \"\n            ++ toString version ++ \" is not supported.\"\n\n    -- infoDecoder4 : Decoder Info\n    -- infoDecoder3 : Decoder Info\n",
            "type": "(a -> Json.Decode.Decoder b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          },
          {
            "name": "array",
            "comment": " Decode a JSON array into an Elm `Array`.\n\n    decodeString (array int) \"[1,2,3]\"       == Ok (Array.fromList [1,2,3])\n    decodeString (array bool) \"[true,false]\" == Ok (Array.fromList [True,False])\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Array.Array a)"
          },
          {
            "name": "at",
            "comment": " Decode a nested JSON object, requiring certain fields.\n\n    json = \"\"\"{ \"person\": { \"name\": \"tom\", \"age\": 42 } }\"\"\"\n\n    decodeString (at [\"person\", \"name\"] string) json  == Ok \"tom\"\n    decodeString (at [\"person\", \"age\" ] int   ) json  == Ok \"42\n\nThis is really just a shorthand for saying things like:\n\n    field \"person\" (field \"name\" string) == at [\"person\",\"name\"] string\n",
            "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "bool",
            "comment": " Decode a JSON boolean into an Elm `Bool`.\n\n    decodeString bool \"true\"              == Ok True\n    decodeString bool \"42\"                == Err ...\n    decodeString bool \"3.14\"              == Err ...\n    decodeString bool \"\\\"hello\\\"\"         == Err ...\n    decodeString bool \"{ \\\"hello\\\": 42 }\" == Err ...\n",
            "type": "Json.Decode.Decoder Bool"
          },
          {
            "name": "decodeString",
            "comment": " Parse the given string into a JSON value and then run the `Decoder` on it.\nThis will fail if the string is not well-formed JSON or if the `Decoder`\nfails for some reason.\n\n    decodeString int \"4\"     == Ok 4\n    decodeString int \"1 + 2\" == Err ...\n",
            "type": "Json.Decode.Decoder a -> String -> Result.Result String a"
          },
          {
            "name": "decodeValue",
            "comment": " Run a `Decoder` on some JSON `Value`. You can send these JSON values\nthrough ports, so that is probably the main time you would use this function.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Value -> Result.Result String a"
          },
          {
            "name": "dict",
            "comment": " Decode a JSON object into an Elm `Dict`.\n\n    decodeString (dict int) \"{ \\\"alice\\\": 42, \\\"bob\\\": 99 }\"\n      == Dict.fromList [(\"alice\", 42), (\"bob\", 99)]\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Dict.Dict String a)"
          },
          {
            "name": "fail",
            "comment": " Ignore the JSON and make the decoder fail. This is handy when used with\n`oneOf` or `andThen` where you want to give a custom error message in some\ncase.\n\nSee the [`andThen`](#andThen) docs for an example.\n",
            "type": "String -> Json.Decode.Decoder a"
          },
          {
            "name": "field",
            "comment": " Decode a JSON object, requiring a particular field.\n\n    decodeString (field \"x\" int) \"{ \\\"x\\\": 3 }\"            == Ok 3\n    decodeString (field \"x\" int) \"{ \\\"x\\\": 3, \\\"y\\\": 4 }\"  == Ok 3\n    decodeString (field \"x\" int) \"{ \\\"x\\\": true }\"         == Err ...\n    decodeString (field \"x\" int) \"{ \\\"y\\\": 4 }\"            == Err ...\n\n    decodeString (field \"name\" string) \"{ \\\"name\\\": \\\"tom\\\" }\" == Ok \"tom\"\n\nThe object *can* have other fields. Lots of them! The only thing this decoder\ncares about is if `x` is present and that the value there is an `Int`.\n\nCheck out [`map2`](#map2) to see how to decode multiple fields!\n",
            "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "float",
            "comment": " Decode a JSON number into an Elm `Float`.\n\n    decodeString float \"true\"              == Err ..\n    decodeString float \"42\"                == Ok 42\n    decodeString float \"3.14\"              == Ok 3.14\n    decodeString float \"\\\"hello\\\"\"         == Err ...\n    decodeString float \"{ \\\"hello\\\": 42 }\" == Err ...\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "index",
            "comment": " Decode a JSON array, requiring a particular index.\n\n    json = \"\"\"[ \"alice\", \"bob\", \"chuck\" ]\"\"\"\n\n    decodeString (index 0 string) json  == Ok \"alice\"\n    decodeString (index 1 string) json  == Ok \"bob\"\n    decodeString (index 2 string) json  == Ok \"chuck\"\n    decodeString (index 3 string) json  == Err ...\n",
            "type": "Int -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "int",
            "comment": " Decode a JSON number into an Elm `Int`.\n\n    decodeString int \"true\"              == Err ...\n    decodeString int \"42\"                == Ok 42\n    decodeString int \"3.14\"              == Err ...\n    decodeString int \"\\\"hello\\\"\"         == Err ...\n    decodeString int \"{ \\\"hello\\\": 42 }\" == Err ...\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "keyValuePairs",
            "comment": " Decode a JSON object into an Elm `List` of pairs.\n\n    decodeString (keyValuePairs int) \"{ \\\"alice\\\": 42, \\\"bob\\\": 99 }\"\n      == [(\"alice\", 42), (\"bob\", 99)]\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List ( String, a ))"
          },
          {
            "name": "lazy",
            "comment": " Sometimes you have JSON with recursive structure, like nested comments.\nYou can use `lazy` to make sure your decoder unrolls lazily.\n\n    type alias Comment =\n      { message : String\n      , responses : Responses\n      }\n\n    type Responses = Responses (List Comment)\n\n    comment : Decoder Comment\n    comment =\n      object Comment\n        |> required \"message\" string\n        |> required \"responses\" (map Responses (list (lazy (\\_ -> comment))))\n\nIf we had said `list comment` instead, we would start expanding the value\ninfinitely. What is a `comment`? It is a decoder for objects where the\n`responses` field contains comments. What is a `comment` though? Etc.\n\nBy using `list (lazy (\\_ -> comment))` we make sure the decoder only expands\nto be as deep as the JSON we are given. You can read more about recursive data\nstructures [here][].\n\n[here]: https://github.com/elm-lang/elm-compiler/blob/master/hints/recursive-alias.md\n",
            "type": "(() -> Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "list",
            "comment": " Decode a JSON array into an Elm `List`.\n\n    decodeString (list int) \"[1,2,3]\"       == Ok [1,2,3]\n    decodeString (list bool) \"[true,false]\" == Ok [True,False]\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"
          },
          {
            "name": "map",
            "comment": " Transform a decoder. Maybe you just want to know the length of a string:\n\n    import String\n\n    stringLength : Decoder Int\n    stringLength =\n      map String.length string\n\nIt is often helpful to use `map` with `oneOf`, like when defining `nullable`:\n\n    nullable : Decoder a -> Decoder (Maybe a)\n    nullable decoder =\n      oneOf\n        [ null Nothing\n        , map Just decoder\n        ]\n",
            "type": "(a -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder value"
          },
          {
            "name": "map2",
            "comment": " Try two decoders and then combine the result. We can use this to decode\nobjects with many fields:\n\n    type alias Point = { x : Float, y : Float }\n\n    point : Decoder Point\n    point =\n      map2 Point\n        (field \"x\" float)\n        (field \"y\" float)\n\n    -- decodeString point \"\"\"{ \"x\": 3, \"y\": 4 }\"\"\" == Ok { x = 3, y = 4 }\n\nIt tries each individual decoder and puts the result together with the `Point`\nconstructor.\n",
            "type": "(a -> b -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder value"
          },
          {
            "name": "map3",
            "comment": " Try three decoders and then combine the result. We can use this to decode\nobjects with many fields:\n\n    type alias Person = { name : String, age : Int, height : Float }\n\n    person : Decoder Person\n    person =\n      map3 Person\n        (at [\"name\"] string)\n        (at [\"info\",\"age\"] int)\n        (at [\"info\",\"height\"] float)\n\n    -- json = \"\"\"{ \"name\": \"tom\", \"info\": { \"age\": 42, \"height\": 1.8 } }\"\"\"\n    -- decodeString point json == Ok { name = \"tom\", age = 42, height = 1.8 }\n\nLike `map2` it tries each decoder in order and then give the results to the\n`Person` constructor. That can be any function though!\n",
            "type": "(a -> b -> c -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder value"
          },
          {
            "name": "map6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder value"
          },
          {
            "name": "map7",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder value"
          },
          {
            "name": "map8",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder h -> Json.Decode.Decoder value"
          },
          {
            "name": "maybe",
            "comment": " Helpful for dealing with optional fields. Here are a few slightly different\nexamples:\n\n    json = \"\"\"{ \"name\": \"tom\", \"age\": 42 }\"\"\"\n\n    decodeString (maybe (field \"age\"    int  )) json == Ok (Just 42)\n    decodeString (maybe (field \"name\"   int  )) json == Ok Nothing\n    decodeString (maybe (field \"height\" float)) json == Ok Nothing\n\n    decodeString (field \"age\"    (maybe int  )) json == Ok (Just 42)\n    decodeString (field \"name\"   (maybe int  )) json == Ok Nothing\n    decodeString (field \"height\" (maybe float)) json == Err ...\n\nNotice the last example! It is saying we *must* have a field named `height` and\nthe content *may* be a float. There is no `height` field, so the decoder fails.\n\nPoint is, `maybe` will make exactly what it contains conditional. For optional\nfields, this means you probably want it *outside* a use of `field` or `at`.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "null",
            "comment": " Decode a `null` value into some Elm value.\n\n    decodeString (null False) \"null\" == Ok False\n    decodeString (null 42) \"null\"    == Ok 42\n    decodeString (null 42) \"42\"      == Err ..\n    decodeString (null 42) \"false\"   == Err ..\n\nSo if you ever see a `null`, this will return whatever value you specified.\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "nullable",
            "comment": " Decode a nullable JSON value into an Elm value.\n\n    decodeString (nullable int) \"13\"    == Ok (Just 13)\n    decodeString (nullable int) \"42\"    == Ok (Just 42)\n    decodeString (nullable int) \"null\"  == Ok Nothing\n    decodeString (nullable int) \"true\"  == Err ..\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "oneOf",
            "comment": " Try a bunch of different decoders. This can be useful if the JSON may come\nin a couple different formats. For example, say you want to read an array of\nnumbers, but some of them are `null`.\n\n    import String\n\n    badInt : Decoder Int\n    badInt =\n      oneOf [ int, null 0 ]\n\n    -- decodeString (list badInt) \"[1,2,null,4]\" == Ok [1,2,0,4]\n\nWhy would someone generate JSON like this? Questions like this are not good\nfor your health. The point is that you can use `oneOf` to handle situations\nlike this!\n\nYou could also use `oneOf` to help version your data. Try the latest format,\nthen a few older ones that you still support. You could use `andThen` to be\neven more particular if you wanted.\n",
            "type": "List (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "string",
            "comment": " Decode a JSON string into an Elm `String`.\n\n    decodeString string \"true\"              == Err ...\n    decodeString string \"42\"                == Err ...\n    decodeString string \"3.14\"              == Err ...\n    decodeString string \"\\\"hello\\\"\"         == Ok \"hello\"\n    decodeString string \"{ \\\"hello\\\": 42 }\" == Err ...\n",
            "type": "Json.Decode.Decoder String"
          },
          {
            "name": "succeed",
            "comment": " Ignore the JSON and produce a certain Elm value.\n\n    decodeString (succeed 42) \"true\"    == Ok 42\n    decodeString (succeed 42) \"[1,2,3]\" == Ok 42\n    decodeString (succeed 42) \"hello\"   == Err ... -- this is not a valid JSON string\n\nThis is handy when used with `oneOf` or `andThen`.\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "value",
            "comment": " Do not do anything with a JSON value, just bring it into Elm as a `Value`.\nThis can be useful if you have particularly crazy data that you would like to\ndeal with later. Or if you are going to send it out a port and do not care\nabout its structure.\n",
            "type": "Json.Decode.Decoder Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Set",
        "comment": " A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Sets\n@docs Set\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Set",
            "comment": " Represents a set of unique values. So `(Set Int)` is a set of integers and\n`(Set String)` is a set of strings.\n",
            "args": [
              "t"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "empty",
            "comment": " Create an empty set.\n",
            "type": "Set.Set a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(comparable -> Bool) -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest.\n",
            "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest.\n",
            "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates.\n",
            "type": "List comparable -> Set.Set comparable"
          },
          {
            "name": "insert",
            "comment": " Insert a value into a set.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty.\n",
            "type": "Set.Set a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
            "type": "(comparable -> comparable2) -> Set.Set comparable -> Set.Set comparable2"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set.\n",
            "type": "comparable -> Set.Set comparable -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
            "type": "(comparable -> Bool) -> Set.Set comparable -> ( Set.Set comparable, Set.Set comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value.\n",
            "type": "comparable -> Set.Set comparable"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set.\n",
            "type": "Set.Set a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list, sorted from lowest to highest.\n",
            "type": "Set.Set comparable -> List comparable"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Time",
        "comment": " Library for working with time.\n\n# Time\n@docs Time, now, every\n\n# Units\n@docs millisecond, second, minute, hour,\n  inMilliseconds, inSeconds, inMinutes, inHours\n\n",
        "aliases": [
          {
            "name": "Time",
            "comment": " Type alias to make it clearer when you are working with time values.\nUsing the `Time` helpers like `second` and `inSeconds` instead of raw numbers\nis very highly recommended.\n",
            "args": [],
            "type": "Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "every",
            "comment": " Subscribe to the current time. First you provide an interval describing how\nfrequently you want updates. Second, you give a tagger that turns a time into a\nmessage for your `update` function. So if you want to hear about the current\ntime every second, you would say something like this:\n\n    type Msg = Tick Time | ...\n\n    subscriptions model =\n      every second Tick\n\nCheck out the [Elm Architecture Tutorial][arch] for more info on how\nsubscriptions work.\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n**Note:** this function is not for animation! You need to use something based\non `requestAnimationFrame` to get smooth animations. This is based on\n`setInterval` which is better for recurring tasks like “check on something\nevery 30 seconds”.\n",
            "type": "Time.Time -> (Time.Time -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "hour",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "inHours",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inMilliseconds",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inMinutes",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inSeconds",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "millisecond",
            "comment": " Units of time, making it easier to specify things like a half-second\n`(500 * millisecond)` without remembering Elm&rsquo;s underlying units of time.\n",
            "type": "Time.Time"
          },
          {
            "name": "minute",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "now",
            "comment": " Get the `Time` at the moment when this task is run.\n",
            "type": "Task.Task x Time.Time"
          },
          {
            "name": "second",
            "comment": "",
            "type": "Time.Time"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Json.Encode",
        "comment": " Library for turning Elm values into Json values.\n\n# Encoding\n@docs encode, Value\n\n# Primitives\n@docs string, int, float, bool, null\n\n# Arrays\n@docs list, array\n\n# Objects\n@docs object\n",
        "aliases": [],
        "types": [
          {
            "name": "Value",
            "comment": " Represents a JavaScript value.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "array",
            "comment": "",
            "type": "Array.Array Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "bool",
            "comment": "",
            "type": "Bool -> Json.Encode.Value"
          },
          {
            "name": "encode",
            "comment": " Convert a `Value` into a prettified string. The first argument specifies\nthe amount of indentation in the resulting string.\n\n    person =\n        object\n          [ (\"name\", string \"Tom\")\n          , (\"age\", int 42)\n          ]\n\n    compact = encode 0 person\n    -- {\"name\":\"Tom\",\"age\":42}\n\n    readable = encode 4 person\n    -- {\n    --     \"name\": \"Tom\",\n    --     \"age\": 42\n    -- }\n",
            "type": "Int -> Json.Encode.Value -> String"
          },
          {
            "name": "float",
            "comment": " Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n",
            "type": "Float -> Json.Encode.Value"
          },
          {
            "name": "int",
            "comment": "",
            "type": "Int -> Json.Encode.Value"
          },
          {
            "name": "list",
            "comment": "",
            "type": "List Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "null",
            "comment": "",
            "type": "Json.Encode.Value"
          },
          {
            "name": "object",
            "comment": "",
            "type": "List ( String, Json.Encode.Value ) -> Json.Encode.Value"
          },
          {
            "name": "string",
            "comment": "",
            "type": "String -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Dict",
        "comment": " A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Dictionaries\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n# Combine\n@docs union, intersect, diff, merge\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Dict",
            "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "Dict.Dict k v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( comparable, v ) -> Dict.Dict comparable v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "comparable -> Dict.Dict comparable v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "comparable -> v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "Dict.Dict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
            "type": "Dict.Dict comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(comparable -> a -> b) -> Dict.Dict comparable a -> Dict.Dict comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "comparable -> Dict.Dict comparable v -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\n\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n",
            "type": "(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> Dict.Dict comparable a -> Dict.Dict comparable b -> result -> result"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> ( Dict.Dict comparable v, Dict.Dict comparable v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "comparable -> v -> Dict.Dict comparable v"
          },
          {
            "name": "size",
            "comment": " Determine the number of key-value pairs in the dictionary. ",
            "type": "Dict.Dict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys. ",
            "type": "Dict.Dict comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
            "type": "Dict.Dict comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Task",
        "comment": " Tasks make it easy to describe asynchronous operations that may fail, like\nHTTP requests or writing to a database. For more information, see the [Elm\ndocumentation on Tasks](http://guide.elm-lang.org/error_handling/task.html).\n\n# Basics\n@docs Task, succeed, fail\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs andThen, sequence\n\n# Errors\n@docs onError, mapError\n\n# Commands\n@docs perform, attempt\n\n",
        "aliases": [
          {
            "name": "Task",
            "comment": " Represents asynchronous effects that may fail. It is useful for stuff like\nHTTP.\n\nFor example, maybe we have a task with the type (`Task String User`). This means\nthat when we perform the task, it will either fail with a `String` message or\nsucceed with a `User`. So this could represent a task that is asking a server\nfor a certain user.\n",
            "args": [
              "err",
              "ok"
            ],
            "type": "Platform.Task err ok"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together a task and a callback. The first task will run, and if it is\nsuccessful, you give the result to the callback resulting in another task. This\ntask then gets run.\n\n    succeed 2\n      |> andThen (\\n -> succeed (n + 2))\n      -- succeed 4\n\nThis is useful for chaining tasks together. Maybe you need to get a user from\nyour servers *and then* lookup their picture once you know their name.\n",
            "type": "(a -> Task.Task x b) -> Task.Task x a -> Task.Task x b"
          },
          {
            "name": "attempt",
            "comment": " Command the Elm runtime to attempt a task that might fail!\n",
            "type": "(Result.Result x a -> msg) -> Task.Task x a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "fail",
            "comment": " A task that fails immediately when run.\n\n    fail \"file not found\" : Task String a\n",
            "type": "x -> Task.Task x a"
          },
          {
            "name": "map",
            "comment": " Transform a task.\n\n    map sqrt (succeed 9) -- succeed 3\n",
            "type": "(a -> b) -> Task.Task x a -> Task.Task x b"
          },
          {
            "name": "map2",
            "comment": " Put the results of two tasks together. If either task fails, the whole\nthing fails. It also runs in order so the first task will be completely\nfinished before the second task starts.\n\n    map2 (+) (succeed 9) (succeed 3) -- succeed 12\n",
            "type": "(a -> b -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x e -> Task.Task x result"
          },
          {
            "name": "mapError",
            "comment": " Transform the error value. This can be useful if you need a bunch of error\ntypes to match up.\n\n    type Error = Http Http.Error | WebGL WebGL.Error\n\n    getResources : Task Error Resource\n    getResources =\n      sequence [ mapError Http serverTask, mapError WebGL textureTask ]\n",
            "type": "(x -> y) -> Task.Task x a -> Task.Task y a"
          },
          {
            "name": "onError",
            "comment": " Recover from a failure in a task. If the given task fails, we use the\ncallback to recover.\n\n    fail \"file not found\"\n      |> onError (\\msg -> succeed 42)\n      -- succeed 42\n\n    succeed 9\n      |> onError (\\msg -> succeed 42)\n      -- succeed 9\n",
            "type": "(x -> Task.Task y a) -> Task.Task x a -> Task.Task y a"
          },
          {
            "name": "perform",
            "comment": " The only way to *do* things in Elm is to give commands to the Elm runtime.\nSo we describe some complex behavior with a `Task` and then command the runtime\nto `perform` that task. For example, getting the current time looks like this:\n\n    import Task\n    import Time exposing (Time)\n\n    type Msg = Click | NewTime Time\n\n    update : Msg -> Model -> Model\n    update msg model =\n      case msg of\n        Click ->\n          ( model, Task.perform NewTime Time.now )\n\n        NewTime time ->\n          ...\n",
            "type": "(a -> msg) -> Task.Task Basics.Never a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "sequence",
            "comment": " Start with a list of tasks, and turn them into a single task that returns a\nlist. The tasks will be run in order one-by-one and if any task fails the whole\nsequence fails.\n\n    sequence [ succeed 1, succeed 2 ] -- succeed [ 1, 2 ]\n\nThis can be useful if you need to make a bunch of HTTP requests one-by-one.\n",
            "type": "List (Task.Task x a) -> Task.Task x (List a)"
          },
          {
            "name": "succeed",
            "comment": " A task that succeeds immediately when run.\n\n    succeed 42    -- results in 42\n",
            "type": "a -> Task.Task x a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Array",
        "comment": " A library for fast immutable arrays. The elements in an array must have the\nsame type. The arrays are implemented in Relaxed Radix Balanced-Trees for fast\nreads, updates, and appends.\n\n# Arrays\n@docs Array\n\n# Creating Arrays\n@docs empty, repeat, initialize, fromList\n\n# Basics\n@docs isEmpty, length, push, append\n\n# Get and Set\n@docs get, set\n\n# Taking Arrays Apart\n@docs slice, toList, toIndexedList\n\n# Mapping, Filtering, and Folding\n@docs map, indexedMap, filter, foldl, foldr\n",
        "aliases": [],
        "types": [
          {
            "name": "Array",
            "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "append",
            "comment": " Append two arrays to a new one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n",
            "type": "Array.Array a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "empty",
            "comment": " Return an empty array.\n\n    length empty == 0\n",
            "type": "Array.Array a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate:\n\n    filter isEven (fromList [1..6]) == (fromList [2,4,6])\n",
            "type": "(a -> Bool) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an array from the left. Read `foldl` as &ldquo;fold from the left&rdquo;.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> Array.Array a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an array from the right. Read `foldr` as &ldquo;fold from the right&rdquo;.\n\n    foldr (+) 0 (repeat 3 5) == 15\n",
            "type": "(a -> b -> b) -> b -> Array.Array a -> b"
          },
          {
            "name": "fromList",
            "comment": " Create an array from a list.\n",
            "type": "List a -> Array.Array a"
          },
          {
            "name": "get",
            "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,5,3]) == Just 0\n    get  2 (fromList [0,5,3]) == Just 3\n    get  5 (fromList [0,5,3]) == Nothing\n    get -1 (fromList [0,5,3]) == Nothing\n\n",
            "type": "Int -> Array.Array a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n",
            "type": "(Int -> a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "initialize",
            "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n",
            "type": "Int -> (Int -> a) -> Array.Array a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n",
            "type": "Array.Array a -> Bool"
          },
          {
            "name": "length",
            "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n",
            "type": "Array.Array a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n",
            "type": "(a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "push",
            "comment": " Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n",
            "type": "a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "repeat",
            "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n",
            "type": "Int -> a -> Array.Array a"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "slice",
            "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n",
            "type": "Int -> Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n",
            "type": "Array.Array a -> List ( Int, a )"
          },
          {
            "name": "toList",
            "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n",
            "type": "Array.Array a -> List a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "String",
        "comment": " A built-in representation for efficient string manipulation. String literals\nare enclosed in `\"double quotes\"`. Strings are *not* lists of characters.\n\n# Basics\n@docs isEmpty, length, reverse, repeat\n\n# Building and Splitting\n@docs cons, uncons, fromChar, append, concat, split, join, words, lines\n\n# Get Substrings\n@docs slice, left, right, dropLeft, dropRight\n\n# Check for Substrings\n@docs contains, startsWith, endsWith, indexes, indices\n\n# Conversions\n@docs toInt, toFloat, toList, fromList\n\n# Formatting\nCosmetic operations such as padding with extra characters or trimming whitespace.\n\n@docs toUpper, toLower,\n      pad, padLeft, padRight,\n      trim, trimLeft, trimRight\n\n# Higher-Order Functions\n@docs map, filter, foldl, foldr, any, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Determine whether *all* characters satisfy a predicate.\n\n    all isDigit \"90210\" == True\n    all isDigit \"R2-D2\" == False\n    all isDigit \"heart\" == False\n",
            "type": "(Char -> Bool) -> String -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine whether *any* characters satisfy a predicate.\n\n    any isDigit \"90210\" == True\n    any isDigit \"R2-D2\" == True\n    any isDigit \"heart\" == False\n",
            "type": "(Char -> Bool) -> String -> Bool"
          },
          {
            "name": "append",
            "comment": " Append two strings. You can also use [the `(++)` operator](Basics#++)\nto do this.\n\n    append \"butter\" \"fly\" == \"butterfly\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "concat",
            "comment": " Concatenate many strings into one.\n\n    concat [\"never\",\"the\",\"less\"] == \"nevertheless\"\n",
            "type": "List String -> String"
          },
          {
            "name": "cons",
            "comment": " Add a character to the beginning of a string.\n\n    cons 'T' \"he truth is out there\" == \"The truth is out there\"\n",
            "type": "Char -> String -> String"
          },
          {
            "name": "contains",
            "comment": " See if the second string contains the first one.\n\n    contains \"the\" \"theory\" == True\n    contains \"hat\" \"theory\" == False\n    contains \"THE\" \"theory\" == False\n\nUse [`Regex.contains`](Regex#contains) if you need something more flexible.\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "dropLeft",
            "comment": " Drop *n* characters from the left side of a string.\n\n    dropLeft 2 \"The Lone Gunmen\" == \"e Lone Gunmen\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "dropRight",
            "comment": " Drop *n* characters from the right side of a string.\n\n    dropRight 2 \"Cigarette Smoking Man\" == \"Cigarette Smoking M\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "endsWith",
            "comment": " See if the second string ends with the first one.\n\n    endsWith \"the\" \"theory\" == False\n    endsWith \"ory\" \"theory\" == True\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep only the characters that satisfy the predicate.\n\n    filter isDigit \"R2-D2\" == \"22\"\n",
            "type": "(Char -> Bool) -> String -> String"
          },
          {
            "name": "foldl",
            "comment": " Reduce a string from the left.\n\n    foldl cons \"\" \"time\" == \"emit\"\n",
            "type": "(Char -> b -> b) -> b -> String -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a string from the right.\n\n    foldr cons \"\" \"time\" == \"time\"\n",
            "type": "(Char -> b -> b) -> b -> String -> b"
          },
          {
            "name": "fromChar",
            "comment": " Create a string from a given character.\n\n    fromChar 'a' == \"a\"\n",
            "type": "Char -> String"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of characters into a String. Can be useful if you\nwant to create a string primarily by consing, perhaps for decoding\nsomething.\n\n    fromList ['a','b','c'] == \"abc\"\n",
            "type": "List Char -> String"
          },
          {
            "name": "indexes",
            "comment": " Get all of the indexes for a substring in another string.\n\n    indexes \"i\" \"Mississippi\"   == [1,4,7,10]\n    indexes \"ss\" \"Mississippi\"  == [2,5]\n    indexes \"needle\" \"haystack\" == []\n",
            "type": "String -> String -> List Int"
          },
          {
            "name": "indices",
            "comment": " Alias for `indexes`. ",
            "type": "String -> String -> List Int"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a string is empty.\n\n    isEmpty \"\" == True\n    isEmpty \"the world\" == False\n",
            "type": "String -> Bool"
          },
          {
            "name": "join",
            "comment": " Put many strings together with a given separator.\n\n    join \"a\" [\"H\",\"w\",\"ii\",\"n\"]        == \"Hawaiian\"\n    join \" \" [\"cat\",\"dog\",\"cow\"]       == \"cat dog cow\"\n    join \"/\" [\"home\",\"evan\",\"Desktop\"] == \"home/evan/Desktop\"\n",
            "type": "String -> List String -> String"
          },
          {
            "name": "left",
            "comment": " Take *n* characters from the left side of a string.\n\n    left 2 \"Mulder\" == \"Mu\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "length",
            "comment": " Get the length of a string.\n\n    length \"innumerable\" == 11\n    length \"\" == 0\n\n",
            "type": "String -> Int"
          },
          {
            "name": "lines",
            "comment": " Break a string into lines, splitting on newlines.\n\n    lines \"How are you?\\nGood?\" == [\"How are you?\", \"Good?\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "map",
            "comment": " Transform every character in a string\n\n    map (\\c -> if c == '/' then '.' else c) \"a/b/c\" == \"a.b.c\"\n",
            "type": "(Char -> Char) -> String -> String"
          },
          {
            "name": "pad",
            "comment": " Pad a string on both sides until it has a given length.\n\n    pad 5 ' ' \"1\"   == \"  1  \"\n    pad 5 ' ' \"11\"  == \"  11 \"\n    pad 5 ' ' \"121\" == \" 121 \"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "padLeft",
            "comment": " Pad a string on the left until it has a given length.\n\n    padLeft 5 '.' \"1\"   == \"....1\"\n    padLeft 5 '.' \"11\"  == \"...11\"\n    padLeft 5 '.' \"121\" == \"..121\"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "padRight",
            "comment": " Pad a string on the right until it has a given length.\n\n    padRight 5 '.' \"1\"   == \"1....\"\n    padRight 5 '.' \"11\"  == \"11...\"\n    padRight 5 '.' \"121\" == \"121..\"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "repeat",
            "comment": " Repeat a string *n* times.\n\n    repeat 3 \"ha\" == \"hahaha\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "reverse",
            "comment": " Reverse a string.\n\n    reverse \"stressed\" == \"desserts\"\n",
            "type": "String -> String"
          },
          {
            "name": "right",
            "comment": " Take *n* characters from the right side of a string.\n\n    right 2 \"Scully\" == \"ly\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "slice",
            "comment": " Take a substring given a start and end index. Negative indexes\nare taken starting from the *end* of the list.\n\n    slice  7  9 \"snakes on a plane!\" == \"on\"\n    slice  0  6 \"snakes on a plane!\" == \"snakes\"\n    slice  0 -7 \"snakes on a plane!\" == \"snakes on a\"\n    slice -6 -1 \"snakes on a plane!\" == \"plane\"\n",
            "type": "Int -> Int -> String -> String"
          },
          {
            "name": "split",
            "comment": " Split a string using a given separator.\n\n    split \",\" \"cat,dog,cow\"        == [\"cat\",\"dog\",\"cow\"]\n    split \"/\" \"home/evan/Desktop/\" == [\"home\",\"evan\",\"Desktop\", \"\"]\n\nUse [`Regex.split`](Regex#split) if you need something more flexible.\n",
            "type": "String -> String -> List String"
          },
          {
            "name": "startsWith",
            "comment": " See if the second string starts with the first one.\n\n    startsWith \"the\" \"theory\" == True\n    startsWith \"ory\" \"theory\" == False\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "toFloat",
            "comment": " Try to convert a string into a float, failing on improperly formatted strings.\n\n    String.toFloat \"123\" == Ok 123.0\n    String.toFloat \"-42\" == Ok -42.0\n    String.toFloat \"3.1\" == Ok 3.1\n    String.toFloat \"31a\" == Err \"could not convert string '31a' to a Float\"\n\nIf you are extracting a number from some raw user input, you will typically\nwant to use [`Result.withDefault`](Result#withDefault) to handle bad data:\n\n    Result.withDefault 0 (String.toFloat \"42.5\") == 42.5\n    Result.withDefault 0 (String.toFloat \"cats\") == 0\n",
            "type": "String -> Result.Result String Float"
          },
          {
            "name": "toInt",
            "comment": " Try to convert a string into an int, failing on improperly formatted strings.\n\n    String.toInt \"123\" == Ok 123\n    String.toInt \"-42\" == Ok -42\n    String.toInt \"3.1\" == Err \"could not convert string '3.1' to an Int\"\n    String.toInt \"31a\" == Err \"could not convert string '31a' to an Int\"\n\nIf you are extracting a number from some raw user input, you will typically\nwant to use [`Result.withDefault`](Result#withDefault) to handle bad data:\n\n    Result.withDefault 0 (String.toInt \"42\") == 42\n    Result.withDefault 0 (String.toInt \"ab\") == 0\n",
            "type": "String -> Result.Result String Int"
          },
          {
            "name": "toList",
            "comment": " Convert a string to a list of characters.\n\n    toList \"abc\" == ['a','b','c']\n",
            "type": "String -> List Char"
          },
          {
            "name": "toLower",
            "comment": " Convert a string to all lower case. Useful for case-insensitive comparisons.\n\n    toLower \"X-FILES\" == \"x-files\"\n",
            "type": "String -> String"
          },
          {
            "name": "toUpper",
            "comment": " Convert a string to all upper case. Useful for case-insensitive comparisons\nand VIRTUAL YELLING.\n\n    toUpper \"skinner\" == \"SKINNER\"\n",
            "type": "String -> String"
          },
          {
            "name": "trim",
            "comment": " Get rid of whitespace on both sides of a string.\n\n    trim \"  hats  \\n\" == \"hats\"\n",
            "type": "String -> String"
          },
          {
            "name": "trimLeft",
            "comment": " Get rid of whitespace on the left of a string.\n\n    trimLeft \"  hats  \\n\" == \"hats  \\n\"\n",
            "type": "String -> String"
          },
          {
            "name": "trimRight",
            "comment": " Get rid of whitespace on the right of a string.\n\n    trimRight \"  hats  \\n\" == \"  hats\"\n",
            "type": "String -> String"
          },
          {
            "name": "uncons",
            "comment": " Split a non-empty string into its head and tail. This lets you\npattern match on strings exactly as you would with lists.\n\n    uncons \"abc\" == Just ('a',\"bc\")\n    uncons \"\"    == Nothing\n",
            "type": "String -> Maybe.Maybe ( Char, String )"
          },
          {
            "name": "words",
            "comment": " Break a string into words, splitting on chunks of whitespace.\n\n    words \"How are \\t you? \\n Good?\" == [\"How\",\"are\",\"you?\",\"Good?\"]\n",
            "type": "String -> List String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Platform",
        "comment": "\n\n# Programs\n@docs Program, program, programWithFlags\n\n# Platform Internals\n\n## Tasks and Processes\n@docs Task, ProcessId\n\n## Effect Manager Helpers\n\nAn extremely tiny portion of library authors should ever write effect managers.\nFundamentally, Elm needs maybe 10 of them total. I get that people are smart,\ncurious, etc. but that is not a substitute for a legitimate reason to make an\neffect manager. Do you have an *organic need* this fills? Or are you just\ncurious? Public discussions of your explorations should be framed accordingly.\n\n@docs Router, sendToApp, sendToSelf\n",
        "aliases": [],
        "types": [
          {
            "name": "ProcessId",
            "comment": " Head over to the documentation for the [`Process`](Process) module for\ninformation on this. It is only defined here because it is a platform\nprimitive.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Program",
            "comment": " A `Program` describes how to manage your Elm app.\n\nYou can create [headless][] programs with the [`program`](#program) and\n[`programWithFlags`](#programWithFlags) functions. Similar functions exist in\n[`Html.App`][app] that let you specify a view.\n\n[headless]: https://en.wikipedia.org/wiki/Headless_software\n[app]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App\n\nHonestly, it is totally normal if this seems crazy at first. The best way to\nunderstand is to work through [guide.elm-lang.org](http://guide.elm-lang.org/).\nIt makes way more sense in context!\n",
            "args": [
              "flags",
              "model",
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Router",
            "comment": " An effect manager has access to a “router” that routes messages between\nthe main app and your individual effect manager.\n",
            "args": [
              "appMsg",
              "selfMsg"
            ],
            "cases": []
          },
          {
            "name": "Task",
            "comment": " Head over to the documentation for the [`Task`](Task) module for more\ninformation on this. It is only defined here because it is a platform\nprimitive.\n",
            "args": [
              "err",
              "ok"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "program",
            "comment": " Create a [headless][] program. This is great if you want to use Elm as the\n&ldquo;brain&rdquo; for something else. You can still communicate with JS via\nports and manage your model, you just do not have to specify a `view`.\n\n[headless]: https://en.wikipedia.org/wiki/Headless_software\n\nInitializing a headless program from JavaScript looks like this:\n\n```javascript\nvar app = Elm.MyThing.worker();\n```\n",
            "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never model msg"
          },
          {
            "name": "programWithFlags",
            "comment": " Same as [`program`](#program), but you can provide flags. Initializing a\nheadless program (with flags) from JavaScript looks like this:\n\n```javascript\nvar app = Elm.MyThing.worker({ user: 'Tom', token: 1234 });\n```\n\nWhatever argument you provide to `worker` will get converted to an Elm value,\nallowing you to configure your Elm program however you want from JavaScript!\n",
            "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags model msg"
          },
          {
            "name": "sendToApp",
            "comment": " Send the router a message for the main loop of your app. This message will\nbe handled by the overall `update` function, just like events from `Html`.\n",
            "type": "Platform.Router msg a -> msg -> Platform.Task x ()"
          },
          {
            "name": "sendToSelf",
            "comment": " Send the router a message for your effect manager. This message will\nbe routed to the `onSelfMsg` function, where you can update the state of your\neffect manager as necessary.\n\nAs an example, the effect manager for web sockets\n",
            "type": "Platform.Router a msg -> msg -> Platform.Task x ()"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Color",
        "comment": " Library for working with colors. Includes\n[RGB](https://en.wikipedia.org/wiki/RGB_color_model) and\n[HSL](http://en.wikipedia.org/wiki/HSL_and_HSV) creation, gradients, and\nbuilt-in names.\n\n# Colors\n@docs Color\n\n# Creation\n@docs rgb, rgba, hsl, hsla, greyscale, grayscale, complement\n\n# Gradients\n@docs Gradient, linear, radial\n\n# Extracting Colors\n@docs toRgb, toHsl\n\n# Built-in Colors\nThese colors come from the [Tango\npalette](http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines)\nwhich provides aesthetically reasonable defaults for colors. Each color also\ncomes with a light and dark version.\n\n### Standard\n@docs red, orange, yellow, green, blue, purple, brown\n\n### Light\n@docs lightRed, lightOrange, lightYellow, lightGreen, lightBlue, lightPurple, lightBrown\n\n### Dark\n@docs darkRed, darkOrange, darkYellow, darkGreen, darkBlue, darkPurple, darkBrown\n\n### Eight Shades of Grey\nThese colors are a compatible series of shades of grey, fitting nicely\nwith the Tango palette.\n@docs white, lightGrey, grey, darkGrey, lightCharcoal, charcoal, darkCharcoal, black\n\nThese are identical to the *grey* versions. It seems the spelling is regional, but\nthat has never helped me remember which one I should be writing.\n@docs lightGray, gray, darkGray\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Color",
            "comment": " Representation of colors.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Gradient",
            "comment": " Abstract representation of a color gradient.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "black",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "blue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "brown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "charcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "complement",
            "comment": " Produce a &ldquo;complementary color&rdquo;. The two colors will\naccent each other. This is the same as rotating the hue by 180&deg;.\n",
            "type": "Color.Color -> Color.Color"
          },
          {
            "name": "darkBlue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkBrown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkCharcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGreen",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGrey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkOrange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkPurple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkRed",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkYellow",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "gray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n",
            "type": "Float -> Color.Color"
          },
          {
            "name": "green",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "grey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n",
            "type": "Float -> Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives\nyou access to colors more like a color wheel, where all hues are arranged in a\ncircle that you specify with standard Elm angles (radians).\n\n    red   = hsl (degrees   0) 1 0.5\n    green = hsl (degrees 120) 1 0.5\n    blue  = hsl (degrees 240) 1 0.5\n\n    pastelRed = hsl (degrees 0) 0.7 0.7\n\nTo cycle through all colors, just cycle through degrees. The saturation level\nis how vibrant the color is, like a dial between grey and bright colors. The\nlightness level is a dial between white and black.\n",
            "type": "Float -> Float -> Float -> Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV)\nwith an alpha component for transparency.\n",
            "type": "Float -> Float -> Float -> Float -> Color.Color"
          },
          {
            "name": "lightBlue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightBrown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightCharcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGreen",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGrey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightOrange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightPurple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightRed",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightYellow",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "linear",
            "comment": " Create a linear gradient. Takes a start and end point and then a series of\n&ldquo;color stops&rdquo; that indicate how to interpolate between the start and\nend points. See [this example](http://elm-lang.org/examples/linear-gradient) for a\nmore visual explanation.\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> List ( Float, Color.Color ) -> Color.Gradient"
          },
          {
            "name": "orange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "purple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "radial",
            "comment": " Create a radial gradient. First takes a start point and inner radius.  Then\ntakes an end point and outer radius. It then takes a series of &ldquo;color\nstops&rdquo; that indicate how to interpolate between the inner and outer\ncircles. See [this example](http://elm-lang.org/examples/radial-gradient) for a\nmore visual explanation.\n",
            "type": "( Float, Float ) -> Float -> ( Float, Float ) -> Float -> List ( Float, Color.Color ) -> Color.Gradient"
          },
          {
            "name": "red",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Create RGB colors from numbers between 0 and 255 inclusive. ",
            "type": "Int -> Int -> Int -> Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Create RGB colors with an alpha component for transparency.\nThe alpha component is specified with numbers between 0 and 1. ",
            "type": "Int -> Int -> Int -> Float -> Color.Color"
          },
          {
            "name": "toHsl",
            "comment": " Extract the components of a color in the HSL format.\n",
            "type": "Color.Color -> { hue : Float , saturation : Float , lightness : Float , alpha : Float }"
          },
          {
            "name": "toRgb",
            "comment": " Extract the components of a color in the RGB format.\n",
            "type": "Color.Color -> { red : Int, green : Int, blue : Int, alpha : Float }"
          },
          {
            "name": "white",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "yellow",
            "comment": "",
            "type": "Color.Color"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "List",
        "comment": " A library for manipulating lists of values. Every value in a\nlist must have the same type.\n\n# Basics\n@docs isEmpty, length, reverse, member\n\n# Sub-lists\n@docs head, tail, filter, take, drop\n\n# Putting Lists Together\n@docs repeat, range, (::), append, concat, intersperse\n\n# Taking Lists Apart\n@docs partition, unzip\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\nIf you can think of a legitimate use of `mapN` where `N` is 6 or more, please\nlet us know on [the list](https://groups.google.com/forum/#!forum/elm-discuss).\nThe current sentiment is that it is already quite error prone once you get to\n4 and possibly should be approached another way.\n\n# Special Maps\n@docs filterMap, concatMap, indexedMap\n\n# Folding\n@docs foldr, foldl\n\n# Special Folds\n@docs sum, product, maximum, minimum, all, any, scanl\n\n# Sorting\n@docs sort, sortBy, sortWith\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "::",
            "comment": " Add an element to the front of a list. Pronounced *cons*.\n\n    1 :: [2,3] == [1,2,3]\n    1 :: [] == [1]\n",
            "type": "a -> List a -> List a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "all",
            "comment": " Determine if all elements satisfy the predicate.\n\n    all isEven [2,4] == True\n    all isEven [2,3] == False\n    all isEven [] == True\n",
            "type": "(a -> Bool) -> List a -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine if any elements satisfy the predicate.\n\n    any isEven [2,3] == True\n    any isEven [1,3] == False\n    any isEven [] == False\n",
            "type": "(a -> Bool) -> List a -> Bool"
          },
          {
            "name": "append",
            "comment": " Put two lists together.\n\n    append [1,1,2] [3,5,8] == [1,1,2,3,5,8]\n    append ['a','b'] ['c'] == ['a','b','c']\n\nYou can also use [the `(++)` operator](Basics#++) to append lists.\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "concat",
            "comment": " Concatenate a bunch of lists into a single list:\n\n    concat [[1,2],[3],[4,5]] == [1,2,3,4,5]\n",
            "type": "List (List a) -> List a"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a list and flatten the resulting lists.\n\n    concatMap f xs == concat (map f xs)\n",
            "type": "(a -> List b) -> List a -> List b"
          },
          {
            "name": "drop",
            "comment": " Drop the first *n* members of a list.\n\n    drop 2 [1,2,3,4] == [3,4]\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate.\n\n    filter isEven [1..6] == [2,4,6]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "filterMap",
            "comment": " Apply a function that may succeed to all values in the list, but only keep\nthe successes.\n\n    onlyTeens =\n      filterMap isTeen [3, 15, 12, 18, 24] == [15, 18]\n\n    isTeen : Int -> Maybe Int\n    isTeen n =\n      if 13 <= n && n <= 19 then\n        Just n\n\n      else\n        Nothing\n",
            "type": "(a -> Maybe.Maybe b) -> List a -> List b"
          },
          {
            "name": "foldl",
            "comment": " Reduce a list from the left.\n\n    foldl (::) [] [1,2,3] == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a list from the right.\n\n    foldr (+) 0 [1,2,3] == 6\n",
            "type": "(a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "head",
            "comment": " Extract the first element of a list.\n\n    head [1,2,3] == Just 1\n    head [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Same as `map` but the function is also applied to the index of each\nelement (starting at zero).\n\n    indexedMap (,) [\"Tom\",\"Sue\",\"Bob\"] == [ (0,\"Tom\"), (1,\"Sue\"), (2,\"Bob\") ]\n",
            "type": "(Int -> a -> b) -> List a -> List b"
          },
          {
            "name": "intersperse",
            "comment": " Places the given value between all members of the given list.\n\n    intersperse \"on\" [\"turtles\",\"turtles\",\"turtles\"] == [\"turtles\",\"on\",\"turtles\",\"on\",\"turtles\"]\n",
            "type": "a -> List a -> List a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a list is empty.\n\n    isEmpty [] == True\n",
            "type": "List a -> Bool"
          },
          {
            "name": "length",
            "comment": " Determine the length of a list.\n\n    length [1,2,3] == 3\n",
            "type": "List a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to every element of a list.\n\n    map sqrt [1,4,9] == [1,2,3]\n\n    map not [True,False,True] == [False,True,False]\n",
            "type": "(a -> b) -> List a -> List b"
          },
          {
            "name": "map2",
            "comment": " Combine two lists, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n\n    pairs : List a -> List b -> List (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights\n",
            "type": "(a -> b -> result) -> List a -> List b -> List result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> List a -> List b -> List c -> List result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> List a -> List b -> List c -> List d -> List result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> List a -> List b -> List c -> List d -> List e -> List result"
          },
          {
            "name": "maximum",
            "comment": " Find the maximum element in a non-empty list.\n\n    maximum [1,4,2] == Just 4\n    maximum []      == Nothing\n",
            "type": "List comparable -> Maybe.Maybe comparable"
          },
          {
            "name": "member",
            "comment": " Figure out whether a list contains a value.\n\n    member 9 [1,2,3,4] == False\n    member 4 [1,2,3,4] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "minimum",
            "comment": " Find the minimum element in a non-empty list.\n\n    minimum [3,2,1] == Just 1\n    minimum []      == Nothing\n",
            "type": "List comparable -> Maybe.Maybe comparable"
          },
          {
            "name": "partition",
            "comment": " Partition a list based on a predicate. The first list contains all values\nthat satisfy the predicate, and the second list contains all the value that do\nnot.\n\n    partition (\\x -> x < 3) [0..5] == ([0,1,2], [3,4,5])\n    partition isEven        [0..5] == ([0,2,4], [1,3,5])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "product",
            "comment": " Get the product of the list elements.\n\n    product [1..4] == 24\n",
            "type": "List number -> number"
          },
          {
            "name": "range",
            "comment": " Create a list of numbers, every element increasing by one.\nYou give the lowest and highest number that should be in the list.\n\n    range 3 6 == [3, 4, 5, 6]\n    range 3 3 == [3]\n    range 6 3 == []\n",
            "type": "Int -> Int -> List Int"
          },
          {
            "name": "repeat",
            "comment": " Create a list with *n* copies of a value:\n\n    repeat 3 (0,0) == [(0,0),(0,0),(0,0)]\n",
            "type": "Int -> a -> List a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a list.\n\n    reverse [1..4] == [4,3,2,1]\n",
            "type": "List a -> List a"
          },
          {
            "name": "scanl",
            "comment": " Reduce a list from the left, building up all of the intermediate results into a list.\n\n    scanl (+) 0 [1,2,3,4] == [0,1,3,6,10]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "sort",
            "comment": " Sort values from lowest to highest\n\n    sort [3,1,5] == [1,3,5]\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort values by a derived property.\n\n    alice = { name=\"Alice\", height=1.62 }\n    bob   = { name=\"Bob\"  , height=1.85 }\n    chuck = { name=\"Chuck\", height=1.76 }\n\n    sortBy .name   [chuck,alice,bob] == [alice,bob,chuck]\n    sortBy .height [chuck,alice,bob] == [alice,chuck,bob]\n\n    sortBy String.length [\"mouse\",\"cat\"] == [\"cat\",\"mouse\"]\n",
            "type": "(a -> comparable) -> List a -> List a"
          },
          {
            "name": "sortWith",
            "comment": " Sort values with a custom comparison function.\n\n    sortWith flippedComparison [1..5] == [5,4,3,2,1]\n\n    flippedComparison a b =\n        case compare a b of\n          LT -> GT\n          EQ -> EQ\n          GT -> LT\n\nThis is also the most general sort function, allowing you\nto define any other: `sort == sortWith compare`\n",
            "type": "(a -> a -> Basics.Order) -> List a -> List a"
          },
          {
            "name": "sum",
            "comment": " Get the sum of the list elements.\n\n    sum [1..4] == 10\n",
            "type": "List number -> number"
          },
          {
            "name": "tail",
            "comment": " Extract the rest of the list.\n\n    tail [1,2,3] == Just [2,3]\n    tail [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "take",
            "comment": " Take the first *n* members of a list.\n\n    take 2 [1,2,3,4] == [1,2]\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "unzip",
            "comment": " Decompose a list of tuples into a tuple of lists.\n\n    unzip [(0, True), (17, False), (1337, True)] == ([0,17,1337], [True,False,True])\n",
            "type": "List ( a, b ) -> ( List a, List b )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Char",
        "comment": " Functions for working with characters. Character literals are enclosed in\n`'a'` pair of single quotes.\n\n# Classification\n@docs isUpper, isLower, isDigit, isOctDigit, isHexDigit\n\n# Conversion\n@docs toUpper, toLower, toLocaleUpper, toLocaleLower\n\n# Key Codes\n@docs KeyCode, toCode, fromCode\n\n",
        "aliases": [
          {
            "name": "KeyCode",
            "comment": " Keyboard keys can be represented as integers. These are called *key codes*.\nYou can use [`toCode`](#toCode) and [`fromCode`](#fromCode) to convert between\nkey codes and characters.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "fromCode",
            "comment": " Convert from key code. ",
            "type": "Char.KeyCode -> Char"
          },
          {
            "name": "isDigit",
            "comment": " True for ASCII digits `[0-9]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isHexDigit",
            "comment": " True for ASCII hexadecimal digits `[0-9a-fA-F]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isLower",
            "comment": " True for lower case ASCII letters. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isOctDigit",
            "comment": " True for ASCII octal digits `[0-7]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isUpper",
            "comment": " True for upper case ASCII letters. ",
            "type": "Char -> Bool"
          },
          {
            "name": "toCode",
            "comment": " Convert to key code.\n",
            "type": "Char -> Char.KeyCode"
          },
          {
            "name": "toLocaleLower",
            "comment": " Convert to lower case, according to any locale-specific case mappings. ",
            "type": "Char -> Char"
          },
          {
            "name": "toLocaleUpper",
            "comment": " Convert to upper case, according to any locale-specific case mappings. ",
            "type": "Char -> Char"
          },
          {
            "name": "toLower",
            "comment": " Convert to lower case. ",
            "type": "Char -> Char"
          },
          {
            "name": "toUpper",
            "comment": " Convert to upper case. ",
            "type": "Char -> Char"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Result",
        "comment": " A `Result` is the result of a computation that may fail. This is a great\nway to manage errors in Elm.\n\n# Type and Constructors\n@docs Result\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs andThen\n\n# Handling Errors\n@docs withDefault, toMaybe, fromMaybe, mapError\n",
        "aliases": [],
        "types": [
          {
            "name": "Result",
            "comment": " A `Result` is either `Ok` meaning the computation succeeded, or it is an\n`Err` meaning that there was some failure.\n",
            "args": [
              "error",
              "value"
            ],
            "cases": [
              [
                "Ok",
                [
                  "value"
                ]
              ],
              [
                "Err",
                [
                  "error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together a sequence of computations that may fail. It is helpful\nto see its definition:\n\n    andThen : (a -> Result e b) -> Result e a -> Result e b\n    andThen callback result =\n        case result of\n          Ok value -> callback value\n          Err msg -> Err msg\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`toInt : String -> Result String Int`) to parse\na month and make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Result String Int\n    toValidMonth month =\n        if month >= 1 && month <= 12\n            then Ok month\n            else Err \"months must be between 1 and 12\"\n\n    toMonth : String -> Result String Int\n    toMonth rawString =\n        toInt rawString\n          |> andThen toValidMonth\n\n    -- toMonth \"4\" == Ok 4\n    -- toMonth \"9\" == Ok 9\n    -- toMonth \"a\" == Err \"cannot parse to an Int\"\n    -- toMonth \"0\" == Err \"months must be between 1 and 12\"\n\nThis allows us to come out of a chain of operations with quite a specific error\nmessage. It is often best to create a custom type that explicitly represents\nthe exact ways your computation may fail. This way it is easy to handle in your\ncode.\n",
            "type": "(a -> Result.Result x b) -> Result.Result x a -> Result.Result x b"
          },
          {
            "name": "fromMaybe",
            "comment": " Convert from a simple `Maybe` to interact with some code that primarily\nuses `Results`.\n\n    parseInt : String -> Maybe Int\n\n    resultParseInt : String -> Result String Int\n    resultParseInt string =\n        fromMaybe (\"error parsing string: \" ++ toString string) (parseInt string)\n",
            "type": "x -> Maybe.Maybe a -> Result.Result x a"
          },
          {
            "name": "map",
            "comment": " Apply a function to a result. If the result is `Ok`, it will be converted.\nIf the result is an `Err`, the same error value will propagate through.\n\n    map sqrt (Ok 4.0)          == Ok 2.0\n    map sqrt (Err \"bad input\") == Err \"bad input\"\n",
            "type": "(a -> value) -> Result.Result x a -> Result.Result x value"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two results, if both results are `Ok`. If not,\nthe first argument which is an `Err` will propagate through.\n\n    map2 (+) (String.toInt \"1\") (String.toInt \"2\") == Ok 3\n    map2 (+) (String.toInt \"1\") (String.toInt \"y\") == Err \"could not convert string 'y' to an Int\"\n    map2 (+) (String.toInt \"x\") (String.toInt \"y\") == Err \"could not convert string 'x' to an Int\"\n",
            "type": "(a -> b -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x value"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x e -> Result.Result x value"
          },
          {
            "name": "mapError",
            "comment": " Transform an `Err` value. For example, say the errors we get have too much\ninformation:\n\n    parseInt : String -> Result ParseError Int\n\n    type alias ParseError =\n        { message : String\n        , code : Int\n        , position : (Int,Int)\n        }\n\n    mapError .message (parseInt \"123\") == Ok 123\n    mapError .message (parseInt \"abc\") == Err \"char 'a' is not a number\"\n",
            "type": "(x -> y) -> Result.Result x a -> Result.Result y a"
          },
          {
            "name": "toMaybe",
            "comment": " Convert to a simpler `Maybe` if the actual error message is not needed or\nyou need to interact with some code that primarily uses maybes.\n\n    parseInt : String -> Result ParseError Int\n\n    maybeParseInt : String -> Maybe Int\n    maybeParseInt string =\n        toMaybe (parseInt string)\n",
            "type": "Result.Result x a -> Maybe.Maybe a"
          },
          {
            "name": "withDefault",
            "comment": " If the result is `Ok` return the value, but if the result is an `Err` then\nreturn a given default value. The following examples try to parse integers.\n\n    Result.withDefault 0 (String.toInt \"123\") == 123\n    Result.withDefault 0 (String.toInt \"abc\") == 0\n",
            "type": "a -> Result.Result x a -> a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Regex",
        "comment": " A library for working with regular expressions. It uses [the\nsame kind of regular expressions accepted by JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n# Create\n@docs Regex, regex, escape, caseInsensitive\n\n# Helpful Data Structures\n\nThese data structures are needed to help define functions like [`find`](#find)\nand [`replace`](#replace).\n\n@docs HowMany, Match\n\n# Use\n@docs contains, find, replace, split\n\n",
        "aliases": [
          {
            "name": "Match",
            "comment": " A `Match` represents all of the details about a particular match in a string.\nHere are details on each field:\n\n  * `match` &mdash; the full string of the match.\n  * `submatches` &mdash; a regex might have [subpatterns, surrounded by\n    parentheses](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Parenthesized_Substring_Matches).\n    If there are N subpatterns, there will be N elements in the `submatches` list.\n    Each submatch in this list is a `Maybe` because not all subpatterns may trigger.\n    For example, `(regex \"(a+)|(b+)\")` will either match many `a`&rsquo;s or\n    many `b`&rsquo;s, but never both.\n  * `index` &mdash; the index of the match in the original string.\n  * `number` &mdash; if you find many matches, you can think of each one\n    as being labeled with a `number` starting at one. So the first time you\n    find a match, that is match `number` one. Second time is match `number` two.\n    This is useful when paired with `replace All` if replacement is dependent on how\n    many times a pattern has appeared before.\n",
            "args": [],
            "type": "{ match : String , submatches : List (Maybe.Maybe String) , index : Int , number : Int }"
          }
        ],
        "types": [
          {
            "name": "HowMany",
            "comment": " `HowMany` is used to specify how many matches you want to make. So\n`replace All` would replace every match, but `replace (AtMost 2)` would\nreplace at most two matches (i.e. zero, one, two, but never three or more).\n",
            "args": [],
            "cases": [
              [
                "All",
                []
              ],
              [
                "AtMost",
                [
                  "Int"
                ]
              ]
            ]
          },
          {
            "name": "Regex",
            "comment": " A regular expression, describing a certain set of strings.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "caseInsensitive",
            "comment": " Make a regex case insensitive ",
            "type": "Regex.Regex -> Regex.Regex"
          },
          {
            "name": "contains",
            "comment": " Check to see if a Regex is contained in a string.\n\n    contains (regex \"123\") \"12345\" == True\n    contains (regex \"b+\") \"aabbcc\" == True\n\n    contains (regex \"789\") \"12345\" == False\n    contains (regex \"z+\") \"aabbcc\" == False\n",
            "type": "Regex.Regex -> String -> Bool"
          },
          {
            "name": "escape",
            "comment": " Escape strings to be regular expressions, making all special characters\nsafe. So `regex (escape \"^a+\")` will match exactly `\"^a+\"` instead of a series\nof `a`&rsquo;s that start at the beginning of the line.\n",
            "type": "String -> String"
          },
          {
            "name": "find",
            "comment": " Find matches in a string:\n\n    findTwoCommas = find (AtMost 2) (regex \",\")\n\n      -- map .index (findTwoCommas \"a,b,c,d,e\") == [1,3]\n      -- map .index (findTwoCommas \"a b c d e\") == []\n\n    places = find All (regex \"[oi]n a (\\\\w+)\") \"I am on a boat in a lake.\"\n\n      -- map .match places == [\"on a boat\", \"in a lake\"]\n      -- map .submatches places == [ [Just \"boat\"], [Just \"lake\"] ]\n",
            "type": "Regex.HowMany -> Regex.Regex -> String -> List Regex.Match"
          },
          {
            "name": "regex",
            "comment": " Create a Regex that matches patterns [as specified in JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Writing_a_Regular_Expression_Pattern).\n\nBe careful to escape backslashes properly! For example, `\"\\w\"` is escaping the\nletter `w` which is probably not what you want. You probably want `\"\\\\w\"`\ninstead, which escapes the backslash.\n",
            "type": "String -> Regex.Regex"
          },
          {
            "name": "replace",
            "comment": " Replace matches. The function from `Match` to `String` lets\nyou use the details of a specific match when making replacements.\n\n    devowel = replace All (regex \"[aeiou]\") (\\_ -> \"\")\n\n      -- devowel \"The quick brown fox\" == \"Th qck brwn fx\"\n\n    reverseWords = replace All (regex \"\\\\w+\") (\\{match} -> String.reverse match)\n\n      -- reverseWords \"deliver mined parts\" == \"reviled denim strap\"\n",
            "type": "Regex.HowMany -> Regex.Regex -> (Regex.Match -> String) -> String -> String"
          },
          {
            "name": "split",
            "comment": " Split a string, using the regex as the separator.\n\n    split (AtMost 1) (regex \",\") \"tom,99,90,85\" == [\"tom\",\"99,90,85\"]\n\n    split All (regex \",\") \"a,b,c,d\" == [\"a\",\"b\",\"c\",\"d\"]\n",
            "type": "Regex.HowMany -> Regex.Regex -> String -> List String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Platform.Cmd",
        "comment": "\n\n# Effects\n\nElm has **managed effects**, meaning that things like HTTP requests or writing\nto disk are all treated as *data* in Elm. When this data is given to the Elm\nruntime system, it can do some “query optimization” before actually performing\nthe effect. Perhaps unexpectedly, this managed effects idea is the heart of why\nElm is so nice for testing, reuse, reproducibility, etc.\n\nThere are two kinds of managed effects you will use in your programs: commands\nand subscriptions.\n\n@docs Cmd, map, batch, none, (!)\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Cmd",
            "comment": " A command is a way of telling Elm, “Hey, I want you to do this thing!”\nSo if you want to send an HTTP request, you would need to command Elm to do it.\nOr if you wanted to ask for geolocation, you would need to command Elm to go\nget it.\n\nEvery `Cmd` specifies (1) which effects you need access to and (2) the type of\nmessages that will come back into your application.\n\n**Note:** Do not worry if this seems confusing at first! As with every Elm user\never, commands will make more sense as you work through [the Elm Architecture\nTutorial](http://guide.elm-lang.org/architecture/index.html) and see how they\nfit into a real application!\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "!",
            "comment": "",
            "type": "model -> List (Platform.Cmd.Cmd msg) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "batch",
            "comment": "",
            "type": "List (Platform.Cmd.Cmd msg) -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "(a -> msg) -> Platform.Cmd.Cmd a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "none",
            "comment": "",
            "type": "Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Platform.Sub",
        "comment": "\n\n@docs Sub, map, batch, none\n",
        "aliases": [],
        "types": [
          {
            "name": "Sub",
            "comment": " A subscription is a way of telling Elm, “Hey, let me know if anything\ninteresting happens over there!” So if you want to listen for messages on a web\nsocket, you would tell Elm to create a subscription. If you want to get clock\nticks, you would tell Elm to subscribe to that. The cool thing here is that\nthis means *Elm* manages all the details of subscriptions instead of *you*.\nSo if a web socket goes down, *you* do not need to manually reconnect with an\nexponential backoff strategy, *Elm* does this all for you behind the scenes!\n\nEvery `Sub` specifies (1) which effects you need access to and (2) the type of\nmessages that will come back into your application.\n\n**Note:** Do not worry if this seems confusing at first! As with every Elm user\never, subscriptions will make more sense as you work through [the Elm Architecture\nTutorial](http://guide.elm-lang.org/architecture/index.html) and see how they fit\ninto a real application!\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "batch",
            "comment": "",
            "type": "List (Platform.Sub.Sub msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "(a -> msg) -> Platform.Sub.Sub a -> Platform.Sub.Sub msg"
          },
          {
            "name": "none",
            "comment": "",
            "type": "Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Basics",
        "comment": " Tons of useful functions that get imported by default.\n\n# Equality\n@docs (==), (/=)\n\n# Comparison\n\nThese functions only work on `comparable` types. This includes numbers,\ncharacters, strings, lists of comparable things, and tuples of comparable\nthings. Note that tuples with 7 or more elements are not comparable; why\nare your tuples so big?\n\n@docs (<), (>), (<=), (>=), max, min, Order, compare\n\n# Booleans\n@docs not, (&&), (||), xor\n\n# Mathematics\n@docs (+), (-), (*), (/), (^), (//), rem, (%), negate, abs, sqrt, clamp, logBase, e\n\n# Trigonometry\n@docs pi, cos, sin, tan, acos, asin, atan, atan2\n\n# Number Conversions\n@docs round, floor, ceiling, truncate, toFloat\n\n# Angle Conversions\nAll angle conversions result in &ldquo;standard Elm angles&rdquo;\nwhich happen to be radians.\n\n@docs degrees, radians, turns\n\n# Polar Coordinates\n@docs toPolar, fromPolar\n\n# Floating Point Checks\n@docs isNaN, isInfinite\n\n# Strings and Lists\n@docs toString, (++)\n\n# Higher-Order Helpers\n@docs identity, always, (<|), (|>), (<<), (>>), flip, curry, uncurry, Never, never\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Never",
            "comment": " A value that can never happen! For context:\n\n  - The boolean type `Bool` has two values: `True` and `False`\n  - The unit type `()` has one value: `()`\n  - The never type `Never` has no values!\n\nYou may see it in the wild in `Html Never` which means this HTML will never\nproduce any messages. You would need to write an event handler like\n`onClick ??? : Attribute Never` but how can we fill in the question marks?!\nSo there cannot be any event handlers on that HTML.\n\nYou may also see this used with tasks that never fail, like `Task Never ()`.\n\nThe `Never` type is useful for restricting *arguments* to a function. Maybe my\nAPI can only accept HTML without event handlers, so I require `Html Never` and\nusers can give `Html msg` and everything will go fine. Generally speaking, you\ndo not want `Never` in your return types though.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Order",
            "comment": " Represents the relative ordering of two things.\nThe relations are less than, equal to, and greater than.\n",
            "args": [],
            "cases": [
              [
                "LT",
                []
              ],
              [
                "EQ",
                []
              ],
              [
                "GT",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "%",
            "comment": " Perform [modular arithmetic](http://en.wikipedia.org/wiki/Modular_arithmetic).\n\n     7 % 2 == 1\n    -1 % 4 == 3\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "&&",
            "comment": " The logical AND operator. `True` if both inputs are `True`.\n\n**Note:** When used in the infix position, like `(left && right)`, the operator\nshort-circuits. This means if `left` is `False` we do not bother evaluating `right`\nand just return `False` overall.\n",
            "type": "Bool -> Bool -> Bool",
            "associativity": "right",
            "precedence": 3
          },
          {
            "name": "*",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "+",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 6
          },
          {
            "name": "++",
            "comment": " Put two appendable things together. This includes strings, lists, and text.\n\n    \"hello\" ++ \"world\" == \"helloworld\"\n    [1,1,2] ++ [3,5,8] == [1,1,2,3,5,8]\n",
            "type": "appendable -> appendable -> appendable",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "-",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 6
          },
          {
            "name": "/",
            "comment": " Floating point division. ",
            "type": "Float -> Float -> Float",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "//",
            "comment": " Integer division. The remainder is discarded. ",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "/=",
            "comment": " Check if values are not &ldquo;the same&rdquo;.\n\nSo `(a /= b)` is the same as `(not (a == b))`.\n",
            "type": "a -> a -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<<",
            "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    not << isEven << sqrt\n\nYou can think of this operator as equivalent to the following:\n\n    (g << f)  ==  (\\x -> g (f x))\n\nSo our example expands out to something like this:\n\n    \\n -> not (isEven (sqrt n))\n",
            "type": "(b -> c) -> (a -> b) -> a -> c",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "<=",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<|",
            "comment": " Backward function application `f <| x == f x`. This function is useful for\navoiding parentheses. Consider the following code to create a text element:\n\n    leftAligned (monospace (fromString \"code\"))\n\nThis can also be written as:\n\n    leftAligned <| monospace <| fromString \"code\"\n",
            "type": "(a -> b) -> a -> b",
            "associativity": "right",
            "precedence": 0
          },
          {
            "name": "==",
            "comment": " Check if values are &ldquo;the same&rdquo;.\n\n**Note:** Elm uses structural equality on tuples, records, and user-defined\nunion types. This means the values `(3, 4)` and `(3, 4)` are definitely equal.\nThis is not true in languages like JavaScript that use reference equality on\nobjects.\n\n**Note:** Equality (in the Elm sense) is not possible for certain types. For\nexample, the functions `(\\n -> n + 1)` and `(\\n -> 1 + n)` are &ldquo;the\nsame&rdquo; but detecting this in general is [undecidable][]. In a future\nrelease, the compiler will detect when `(==)` is used with problematic\ntypes and provide a helpful error message. This will require quite serious\ninfrastructure work that makes sense to batch with another big project, so the\nstopgap is to crash as quickly as possible. Problematic types include functions\nand JavaScript values like `Json.Encode.Value` which could contain functions\nif passed through a port.\n\n[undecidable]: https://en.wikipedia.org/wiki/Undecidable_problem\n",
            "type": "a -> a -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">=",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">>",
            "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    sqrt >> isEven >> not\n\nThis direction of function composition seems less pleasant than `(<<)` which\nreads nicely in expressions like: `filter (not << isRegistered) students`\n",
            "type": "(a -> b) -> (b -> c) -> a -> c",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "^",
            "comment": " Exponentiation\n\n    3^2 == 9\n",
            "type": "number -> number -> number",
            "associativity": "right",
            "precedence": 8
          },
          {
            "name": "abs",
            "comment": " Take the absolute value of a number. ",
            "type": "number -> number"
          },
          {
            "name": "acos",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "always",
            "comment": " Create a [constant function](http://en.wikipedia.org/wiki/Constant_function),\na function that *always* returns the same value regardless of what input you give.\nIt is defined as:\n\n    always a b = a\n\nIt totally ignores the second argument, so `always 42` is a function that always\nreturns 42. When you are dealing with higher-order functions, this comes in\nhandy more often than you might expect. For example, creating a zeroed out list\nof length ten would be:\n\n    map (always 0) [0..9]\n",
            "type": "a -> b -> a"
          },
          {
            "name": "asin",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "atan",
            "comment": " You probably do not want to use this. It takes `(y/x)` as the\nargument, so there is no way to know whether the negative signs comes from\nthe `y` or `x`. Thus, the resulting angle is always between &pi;/2 and -&pi;/2\n(in quadrants I and IV). You probably want to use `atan2` instead.\n",
            "type": "Float -> Float"
          },
          {
            "name": "atan2",
            "comment": " This helps you find the angle of a Cartesian coordinate.\nYou will almost certainly want to use this instead of `atan`.\nSo `atan2 y x` computes *atan(y/x)* but also keeps track of which\nquadrant the angle should really be in. The result will be between\n&pi; and -&pi;, giving you the full range of angles.\n",
            "type": "Float -> Float -> Float"
          },
          {
            "name": "ceiling",
            "comment": " Ceiling function, rounding up. ",
            "type": "Float -> Int"
          },
          {
            "name": "clamp",
            "comment": " Clamps a number within a given range. With the expression\n`clamp 100 200 x` the results are as follows:\n\n    100     if x < 100\n     x      if 100 <= x < 200\n    200     if 200 <= x\n",
            "type": "number -> number -> number -> number"
          },
          {
            "name": "compare",
            "comment": " Compare any two comparable values. Comparable values include `String`, `Char`,\n`Int`, `Float`, `Time`, or a list or tuple containing comparable values.\nThese are also the only values that work as `Dict` keys or `Set` members.\n",
            "type": "comparable -> comparable -> Basics.Order"
          },
          {
            "name": "cos",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "curry",
            "comment": " Change how arguments are passed to a function.\nThis splits paired arguments into two separate arguments.\n",
            "type": "(( a, b ) -> c) -> a -> b -> c"
          },
          {
            "name": "degrees",
            "comment": " Convert degrees to standard Elm angles (radians). ",
            "type": "Float -> Float"
          },
          {
            "name": "e",
            "comment": " An approximation of e. ",
            "type": "Float"
          },
          {
            "name": "flip",
            "comment": " Flip the order of the first two arguments to a function. ",
            "type": "(a -> b -> c) -> b -> a -> c"
          },
          {
            "name": "floor",
            "comment": " Floor function, rounding down. ",
            "type": "Float -> Int"
          },
          {
            "name": "fromPolar",
            "comment": " Convert polar coordinates (r,&theta;) to Cartesian coordinates (x,y). ",
            "type": "( Float, Float ) -> ( Float, Float )"
          },
          {
            "name": "identity",
            "comment": " Given a value, returns exactly the same value. This is called\n[the identity function](http://en.wikipedia.org/wiki/Identity_function).\n",
            "type": "a -> a"
          },
          {
            "name": "isInfinite",
            "comment": " Determine whether a float is positive or negative infinity.\n\n    isInfinite (0/0)     == False\n    isInfinite (sqrt -1) == False\n    isInfinite (1/0)     == True\n    isInfinite 1         == False\n\nNotice that NaN is not infinite! For float `n` to be finite implies that\n`not (isInfinite n || isNaN n)` evaluates to `True`.\n",
            "type": "Float -> Bool"
          },
          {
            "name": "isNaN",
            "comment": " Determine whether a float is an undefined or unrepresentable number.\nNaN stands for *not a number* and it is [a standardized part of floating point\nnumbers](http://en.wikipedia.org/wiki/NaN).\n\n    isNaN (0/0)     == True\n    isNaN (sqrt -1) == True\n    isNaN (1/0)     == False  -- infinity is a number\n    isNaN 1         == False\n",
            "type": "Float -> Bool"
          },
          {
            "name": "logBase",
            "comment": " Calculate the logarithm of a number with a given base.\n\n    logBase 10 100 == 2\n    logBase 2 256 == 8\n",
            "type": "Float -> Float -> Float"
          },
          {
            "name": "max",
            "comment": " Find the larger of two comparables. ",
            "type": "comparable -> comparable -> comparable"
          },
          {
            "name": "min",
            "comment": " Find the smaller of two comparables. ",
            "type": "comparable -> comparable -> comparable"
          },
          {
            "name": "negate",
            "comment": " Negate a number.\n\n    negate 42 == -42\n    negate -42 == 42\n    negate 0 == 0\n",
            "type": "number -> number"
          },
          {
            "name": "never",
            "comment": " A function that can never be called. Seems extremely pointless, but it\n*can* come in handy. Imagine you have some HTML that should never produce any\nmessages. And say you want to use it in some other HTML that *does* produce\nmessages. You could say:\n\n    import Html exposing (..)\n\n    embedHtml : Html Never -> Html msg\n    embedHtml staticStuff =\n      div []\n        [ text \"hello\"\n        , Html.map never staticStuff\n        ]\n\nSo the `never` function is basically telling the type system, make sure no one\never calls me!\n",
            "type": "Basics.Never -> a"
          },
          {
            "name": "not",
            "comment": " Negate a boolean value.\n\n    not True == False\n    not False == True\n",
            "type": "Bool -> Bool"
          },
          {
            "name": "pi",
            "comment": " An approximation of pi. ",
            "type": "Float"
          },
          {
            "name": "radians",
            "comment": " Convert radians to standard Elm angles (radians). ",
            "type": "Float -> Float"
          },
          {
            "name": "rem",
            "comment": " Find the remainder after dividing one number by another.\n\n    rem 11 4 == 3\n    rem 12 4 == 0\n    rem 13 4 == 1\n    rem -1 4 == -1\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "round",
            "comment": " Round a number to the nearest integer. ",
            "type": "Float -> Int"
          },
          {
            "name": "sin",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "sqrt",
            "comment": " Take the square root of a number. ",
            "type": "Float -> Float"
          },
          {
            "name": "tan",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "toFloat",
            "comment": " Convert an integer into a float. ",
            "type": "Int -> Float"
          },
          {
            "name": "toPolar",
            "comment": " Convert Cartesian coordinates (x,y) to polar coordinates (r,&theta;). ",
            "type": "( Float, Float ) -> ( Float, Float )"
          },
          {
            "name": "toString",
            "comment": " Turn any kind of value into a string. When you view the resulting string\nwith `Text.fromString` it should look just like the value it came from.\n\n    toString 42 == \"42\"\n    toString [1,2] == \"[1,2]\"\n    toString \"he said, \\\"hi\\\"\" == \"\\\"he said, \\\\\\\"hi\\\\\\\"\\\"\"\n",
            "type": "a -> String"
          },
          {
            "name": "truncate",
            "comment": " Truncate a number, rounding towards zero. ",
            "type": "Float -> Int"
          },
          {
            "name": "turns",
            "comment": " Convert turns to standard Elm angles (radians).\nOne turn is equal to 360&deg;.\n",
            "type": "Float -> Float"
          },
          {
            "name": "uncurry",
            "comment": " Change how arguments are passed to a function.\nThis combines two arguments into a single pair.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> c"
          },
          {
            "name": "xor",
            "comment": " The exclusive-or operator. `True` if exactly one input is `True`. ",
            "type": "Bool -> Bool -> Bool"
          },
          {
            "name": "|>",
            "comment": " Forward function application `x |> f == f x`. This function is useful\nfor avoiding parentheses and writing code in a more natural way.\nConsider the following code to create a pentagon:\n\n    scale 2 (move (10,10) (filled blue (ngon 5 30)))\n\nThis can also be written as:\n\n    ngon 5 30\n      |> filled blue\n      |> move (10,10)\n      |> scale 2\n",
            "type": "a -> (a -> b) -> b",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "||",
            "comment": " The logical OR operator. `True` if one or both inputs are `True`.\n\n**Note:** When used in the infix position, like `(left || right)`, the operator\nshort-circuits. This means if `left` is `True` we do not bother evaluating `right`\nand just return `True` overall.\n",
            "type": "Bool -> Bool -> Bool",
            "associativity": "right",
            "precedence": 2
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Tuple",
        "comment": " Some helpers for working with 2-tuples.\n\n**Note:** For larger chunks of data, it is best to switch to using records. So\ninstead of representing a 3D point as `(3,4,5)` and wondering why there are no\nhelper functions, represent it as `{ x = 3, y = 4, z = 5 }` and use all the\nbuilt-in syntax for records.\n\n@docs first, second, mapFirst, mapSecond\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "first",
            "comment": " Extract the first value from a tuple.\n\n    first (3, 4) == 3\n    first (\"john\", \"doe\") == \"john\"\n",
            "type": "( a1, a2 ) -> a1"
          },
          {
            "name": "mapFirst",
            "comment": " Transform the first value in a tuple.\n\n    import String\n\n    mapFirst String.reverse (\"stressed\", 16) == (\"desserts\", 16)\n    mapFirst String.length  (\"stressed\", 16) == (8, 16)\n",
            "type": "(a -> b) -> ( a, a2 ) -> ( b, a2 )"
          },
          {
            "name": "mapSecond",
            "comment": " Transform the second value in a tuple.\n\n    import String\n\n    mapSecond sqrt          (\"stressed\", 16) == (\"stressed\", 4)\n    mapSecond (\\x -> x + 1) (\"stressed\", 16) == (\"stressed\", 17)\n",
            "type": "(a -> b) -> ( a1, a ) -> ( a1, b )"
          },
          {
            "name": "second",
            "comment": " Extract the second value from a tuple.\n\n    second (3, 4) == 4\n    second (\"john\", \"doe\") == \"doe\"\n",
            "type": "( a1, a2 ) -> a2"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Bitwise",
        "comment": " Library for [bitwise operations](http://en.wikipedia.org/wiki/Bitwise_operation).\n\n# Basic Operations\n@docs and, or, xor, complement\n\n# Bit Shifts\n@docs shiftLeftBy, shiftRightBy, shiftRightZfBy\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "and",
            "comment": " Bitwise AND\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "complement",
            "comment": " Flip each bit individually, often called bitwise NOT\n",
            "type": "Int -> Int"
          },
          {
            "name": "or",
            "comment": " Bitwise OR\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftLeftBy",
            "comment": " Shift bits to the left by a given offset, filling new bits with zeros.\nThis can be used to multiply numbers by powers of two.\n\n    shiftLeftBy 1 5 == 10\n    shiftLeftBy 5 1 == 32\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftRightBy",
            "comment": " Shift bits to the right by a given offset, filling new bits with\nwhatever is the topmost bit. This can be used to divide numbers by powers of two.\n\n    shiftRightBy 1  32 == 16\n    shiftRightBy 2  32 == 8\n    shiftRightBy 1 -32 == -16\n\nThis is called an [arithmetic right shift][ars], often written (>>), and\nsometimes called a sign-propagating right shift because it fills empty spots\nwith copies of the highest bit.\n\n[ars]: http://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftRightZfBy",
            "comment": " Shift bits to the right by a given offset, filling new bits with zeros.\n\n    shiftRightZfBy 1  32 == 16\n    shiftRightZfBy 2  32 == 8\n    shiftRightZfBy 1 -32 == 2147483632\n\nThis is called an [logical right shift][lrs], often written (>>>), and\nsometimes called a zero-fill right shift because it fills empty spots with\nzeros.\n\n[lrs]: http://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "xor",
            "comment": " Bitwise XOR\n",
            "type": "Int -> Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Debug",
        "comment": " This library is for investigating bugs or performance problems. It should\n*not* be used in production code.\n\n# Debugging\n@docs log, crash\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "crash",
            "comment": " Crash the program with an error message. This is an uncatchable error,\nintended for code that is soon-to-be-implemented. For example, if you are\nworking with a large ADT and have partially completed a case expression, it may\nmake sense to do this:\n\n    type Entity = Ship | Fish | Captain | Seagull\n\n    drawEntity entity =\n      case entity of\n        Ship ->\n          ...\n\n        Fish ->\n          ...\n\n        _ ->\n          Debug.crash \"TODO\"\n\nThe Elm compiler recognizes each `Debug.crash` and when you run into it at\nruntime, the error will point to the corresponding module name and line number.\nFor `case` expressions that ends with a wildcard pattern and a crash, it will\nalso show the value that snuck through. In our example, that'd be `Captain` or\n`Seagull`.\n\n**Use this if** you want to do some testing while you are partway through\nwriting a function.\n\n**Do not use this if** you want to do some typical try-catch exception handling.\nUse the [`Maybe`](Maybe) or [`Result`](Result) libraries instead.\n",
            "type": "String -> a"
          },
          {
            "name": "log",
            "comment": " Log a tagged value on the developer console, and then return the value.\n\n    1 + log \"number\" 1        -- equals 2, logs \"number: 1\"\n    length (log \"start\" [])   -- equals 0, logs \"start: []\"\n\nNotice that `log` is not a pure function! It should *only* be used for\ninvestigating bugs or performance problems.\n",
            "type": "String -> a -> a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Maybe",
        "comment": " This library fills a bunch of important niches in Elm. A `Maybe` can help\nyou with optional arguments, error handling, and records with optional fields.\n\n# Definition\n@docs Maybe\n\n# Common Helpers\n@docs withDefault, map, map2, map3, map4, map5\n\n# Chaining Maybes\n@docs andThen\n",
        "aliases": [],
        "types": [
          {
            "name": "Maybe",
            "comment": " Represent values that may or may not exist. It can be useful if you have a\nrecord field that is only filled in sometimes. Or if a function takes a value\nsometimes, but does not absolutely need it.\n\n    -- A person, but maybe we do not know their age.\n    type alias Person =\n        { name : String\n        , age : Maybe Int\n        }\n\n    tom = { name = \"Tom\", age = Just 42 }\n    sue = { name = \"Sue\", age = Nothing }\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Just",
                [
                  "a"
                ]
              ],
              [
                "Nothing",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together many computations that may fail. It is helpful to see its\ndefinition:\n\n    andThen : (a -> Maybe b) -> Maybe a -> Maybe b\n    andThen callback maybe =\n        case maybe of\n            Just value ->\n                callback value\n\n            Nothing ->\n                Nothing\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`head : List Int -> Maybe Int`) to get the\nfirst month from a `List` and then make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Maybe Int\n    toValidMonth month =\n        if month >= 1 && month <= 12 then\n            Just month\n        else\n            Nothing\n\n    getFirstMonth : List Int -> Maybe Int\n    getFirstMonth months =\n        head months\n          |> andThen toValidMonth\n\nIf `head` fails and results in `Nothing` (because the `List` was `empty`),\nthis entire chain of operations will short-circuit and result in `Nothing`.\nIf `toValidMonth` results in `Nothing`, again the chain of computations\nwill result in `Nothing`.\n",
            "type": "(a -> Maybe.Maybe b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "map",
            "comment": " Transform a `Maybe` value with a given function:\n\n    map sqrt (Just 9) == Just 3\n    map sqrt Nothing == Nothing\n",
            "type": "(a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "map2",
            "comment": " Apply a function if all the arguments are `Just` a value.\n\n    map2 (+) (Just 3) (Just 4) == Just 7\n    map2 (+) (Just 3) Nothing == Nothing\n    map2 (+) Nothing (Just 4) == Nothing\n",
            "type": "(a -> b -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe value"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe value"
          },
          {
            "name": "withDefault",
            "comment": " Provide a default value, turning an optional value into a normal\nvalue.  This comes in handy when paired with functions like\n[`Dict.get`](Dict#get) which gives back a `Maybe`.\n\n    withDefault 100 (Just 42)   -- 42\n    withDefault 100 Nothing     -- 100\n\n    withDefault \"unknown\" (Dict.get \"Tom\" Dict.empty)   -- \"unknown\"\n\n",
            "type": "a -> Maybe.Maybe a -> a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/dom",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Dom.Scroll",
        "comment": " When you set `overflow-y: scroll` on an element, a scroll bar will appear\nwhen the content overflows the available space. When that happens, you may want\nto modify the scroll position yourself. For example, maybe you have a chat room\nthat autoscrolls as new messages come in. This module provides functions like\n`Dom.Scroll.toBottom` that let you do that kind of thing.\n\n# Vertical\n@docs toTop, toBottom, y, toY\n\n# Horizontal\n@docs toLeft, toRight, x, toX\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toBottom",
            "comment": " Find the node with the given `Id` and scroll it to the bottom.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toLeft",
            "comment": " Find the node with the given `Id` and scroll it to the far left.\n\nSo `toLeft id` is the same as `toX id 0`.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toRight",
            "comment": " Find the node with the given `Id` and scroll it to the far right.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toTop",
            "comment": " Find the node with the given `Id` and scroll it to the top.\n\nSo `toTop id` is the same as `toY id 0`.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toX",
            "comment": " Set the horizontal scroll to whatever offset you want.\n\nIt works just like `toY`, so check out those docs for a more complete example.\n",
            "type": "Dom.Id -> Float -> Task.Task Dom.Error ()"
          },
          {
            "name": "toY",
            "comment": " Set the vertical scroll to whatever offset you want.\n\nImagine you have a chat room and you want to control how it scrolls. Say the\nfull chat is 400 pixels long, but it is in a box that limits the visible height\nto 100 pixels.\n\n  - If we say `toY \"chat\" 0` it will scroll to the very top.\n  - If we say `toY \"chat\" 300` it will be at the bottom.\n\nIf we provide values outside that range, they just get clamped, so\n`toY \"chat\" 900` is also scrolled to the bottom.\n",
            "type": "Dom.Id -> Float -> Task.Task Dom.Error ()"
          },
          {
            "name": "x",
            "comment": " How much this element is scrolled horizontally.\n\nSay you have a node that does not fit in its container. A scroll bar shows up.\nInitially you are at the far left, which means `x` is `0`. If you scroll right\n300 pixels, `x` will be `300`.\n\nThis is roughly the same as saying [`document.getElementById(id).scrollLeft`][docs].\n\n[docs]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n",
            "type": "Dom.Id -> Task.Task Dom.Error Float"
          },
          {
            "name": "y",
            "comment": " How much this element is scrolled vertically.\n\nSay you have a node that does not fit in its container. A scroll bar shows up.\nInitially you are at the top, which means `y` is `0`. If you scroll down 300\npixels, `y` will be `300`.\n\nThis is roughly the same as saying [`document.getElementById(id).scrollTop`][docs].\n\n[docs]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n",
            "type": "Dom.Id -> Task.Task Dom.Error Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Dom.LowLevel",
        "comment": " This is not for general use. It backs libraries like `elm-lang/mouse` and\n`elm-lang/window` which should cover your needs in most cases. In the rare\ncase that those packages do not seem to cover your scenario, first bring it up\nwith the community. Ask around and learn stuff first! Only get into these\nfunctions after that.\n\n# Global Event Listeners\n@docs onDocument, onWindow\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onDocument",
            "comment": " Add an event handler on the `document`. The resulting task will never end,\nand when you kill the process it is on, it will detach the relevant JavaScript\nevent listener.\n",
            "type": "String -> Json.Decode.Decoder msg -> (msg -> Task.Task Basics.Never ()) -> Task.Task Basics.Never Basics.Never"
          },
          {
            "name": "onWindow",
            "comment": " Add an event handler on `window`. The resulting task will never end, and\nwhen you kill the process it is on, it will detach the relevant JavaScript\nevent listener.\n",
            "type": "String -> Json.Decode.Decoder msg -> (msg -> Task.Task Basics.Never ()) -> Task.Task Basics.Never Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Dom",
        "comment": "\n\n# Focus\n@docs focus, blur, Id\n\n# Errors\n@docs Error\n\n",
        "aliases": [
          {
            "name": "Id",
            "comment": " A unique identifier for a particular DOM node. When you create\n`<div id=\"my-thing\"></div>` you would refer to it with the `Id` `\"my-thing\"`.\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " All the functions here look up DOM nodes by ID. If you ask for an ID that\nis not currently attached to the DOM, you will get this error!\n",
            "args": [],
            "cases": [
              [
                "NotFound",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "blur",
            "comment": " On a website, there can only be one thing in focus at a time. A text field,\na check box, etc. Sometimes you want that thing to no longer be in focus. This\nis called &ldquo;blur&rdquo; for reasons that are unclear to almost everybody.\nSo this function tells a particular DOM node to lose focus.\n\n    Dom.blur \"my-thing\"\n\nThis is roughly the same as saying `document.getElementById(id).blur()`.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "focus",
            "comment": " On a website, there can only be one thing in focus at a time. A text field,\na check box, etc. This function tells the Elm runtime to move the focus to a\nparticular DOM node.\n\n    Dom.focus \"my-thing\"\n\nThis is roughly the same as saying `document.getElementById(id).focus()`.\n\nNOTE: setting focus can silently fail if the element is invisible. This could be captured as an error by checking to see\nif document.activeElement actually got updated to the element we selected. https://jsbin.com/xeletez/edit?html,js,output\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/geolocation",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Geolocation",
        "comment": " Find out about where a user’s device is located. [Geolocation API][geo].\n\n[geo]: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n\n# Location\n@docs Location, Altitude, Movement\n\n# Subscribe to Changes\n@docs changes\n\n# Get Current Location\n@docs now, Error\n\n# Options\n@docs nowWith, Options, defaultOptions\n\n# Low-level Helpers\n\nThere are very few excuses to use this. Any normal user should be using\n`changes` instead.\n\n@docs watch, watchWith\n\n",
        "aliases": [
          {
            "name": "Altitude",
            "comment": " The altitude in meters relative to sea level is held in `value`. The `accuracy` field\ndescribes how accurate `value` is, also in meters.\n",
            "args": [],
            "type": "{ value : Float, accuracy : Float }"
          },
          {
            "name": "Location",
            "comment": " All available details of the device's current location in the world.\n\n  * `latitude` &mdash; the latitude in decimal degrees.\n  * `longitude` &mdash; the longitude in decimal degrees.\n  * `accuracy` &mdash; the accuracy of the latitude and longitude, expressed in meters.\n  * `altitude` &mdash; altitude information, if available.\n  * `movement` &mdash; information about how the device is moving, if available.\n  * `timestamp` &mdash; the time that this location reading was taken in milliseconds.\n",
            "args": [],
            "type": "{ latitude : Float , longitude : Float , accuracy : Float , altitude : Maybe.Maybe Geolocation.Altitude , movement : Maybe.Maybe Geolocation.Movement , timestamp : Time.Time }"
          },
          {
            "name": "Options",
            "comment": " There are a couple options you can mess with when requesting location data.\n\n  * `enableHighAccuracy` &mdash; When enabled, the device will attempt to provide\n    a more accurate location. This can result in slower response times or\n    increased power consumption (with a GPS chip on a mobile device for example).\n    When disabled, the device can take the liberty to save resources by responding\n    more quickly and/or using less power.\n  * `timeout` &mdash; Requesting a location can take time, so you have the option\n    to provide an upper bound in milliseconds on that wait.\n  * `maximumAge` &mdash; This API can return cached locations. If this is set\n    to `Just 400` you may get cached locations as long as they were read in the\n    last 400 milliseconds. If this is `Nothing` then the device must attempt\n    to retrieve the current location every time.\n",
            "args": [],
            "type": "{ enableHighAccuracy : Bool , timeout : Maybe.Maybe Int , maximumAge : Maybe.Maybe Int }"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " The `now` and `watch` functions may fail for a variaty of reasons.\n\n    * The user may reject the request to use their location.\n    * It may be impossible to get a location.\n    * If you set a timeout in the `Options` the request may just take too long.\n\nIn each case, the browser will provide a string with additional information.\n",
            "args": [],
            "cases": [
              [
                "PermissionDenied",
                [
                  "String"
                ]
              ],
              [
                "LocationUnavailable",
                [
                  "String"
                ]
              ],
              [
                "Timeout",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Movement",
            "comment": " Describes the motion of the device. If the device is not moving, this will\njust be `Static`. If the device is moving, you will see the `speed` in meters\nper second and the `degreesFromNorth` in degrees.\n\n\n**Note:** The `degreesFromNorth` value goes clockwise: 0° represents true\nnorth, 90° is east, 180° is south, 270° is west, etc.\n",
            "args": [],
            "cases": [
              [
                "Static",
                []
              ],
              [
                "Moving",
                [
                  "{ speed : Float, degreesFromNorth : Float }"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "changes",
            "comment": " Subscribe to any location changes. You will only receive updates if the\nuser is moving around.\n",
            "type": "(Geolocation.Location -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "defaultOptions",
            "comment": " The options you will want in 99% of cases. This will get you faster\nresults, less battery drain, no surprise failures due to timeouts, and no\nsurprising cached results.\n\n    { enableHighAccuracy = False\n    , timeout = Nothing\n    , maximumAge = Nothing\n    }\n",
            "type": "Geolocation.Options"
          },
          {
            "name": "now",
            "comment": " Request the location of the user’s device.\n\nOn the first request, the user will need to give permission to access this\ninformation. This task will block until they make a choice. If they do not\ngive permission, the task will result in a `PermissionDenied` error.\n",
            "type": "Task.Task Geolocation.Error Geolocation.Location"
          },
          {
            "name": "nowWith",
            "comment": " Same as `now` but you can customize exactly how locations are reported.\n",
            "type": "Geolocation.Options -> Task.Task Geolocation.Error Geolocation.Location"
          },
          {
            "name": "watch",
            "comment": " This is a low-level API that is used to define things like `changes`.\nIt is really only useful if you need to make an effect manager of your own.\nI feel this will include about 5 people ever.\n\nYou provide two functions. One two take some action on movement and one to\ntake some action on failure. The resulting task will just block forever,\nreporting to these two functions. If you would like to kill a `watch` task,\ndo something like this:\n\n    import Process\n    import Task\n\n    killWatch =\n      Process.spawn (watch onMove onError)\n        |> Task.andThen Process.kill\n\n",
            "type": "(Geolocation.Location -> Task.Task Basics.Never ()) -> (Geolocation.Error -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"
          },
          {
            "name": "watchWith",
            "comment": " Same as `watch` but you can customize exactly how locations are reported.\n",
            "type": "Geolocation.Options -> (Geolocation.Location -> Task.Task Basics.Never ()) -> (Geolocation.Error -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/html",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Html.Lazy",
        "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Html` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> Html.Html msg) -> a -> Html.Html msg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> Html.Html msg) -> a -> b -> Html.Html msg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> Html.Html msg) -> a -> b -> c -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Html.Attributes",
        "comment": " Helper functions for HTML attributes. They are organized roughly by\ncategory. Each attribute is labeled with the HTML tags it can be used with, so\njust search the page for `video` if you want video stuff.\n\nIf you cannot find what you are looking for, go to the [Custom\nAttributes](#custom-attributes) section to learn how to create new helpers.\n\n# Primitives\n@docs style, property, attribute, map\n\n# Super Common Attributes\n@docs class, classList, id, title, hidden\n\n# Inputs\n@docs type_, value, defaultValue, checked, placeholder, selected\n\n## Input Helpers\n@docs accept, acceptCharset, action, autocomplete, autofocus,\n    disabled, enctype, formaction, list, maxlength, minlength, method, multiple,\n    name, novalidate, pattern, readonly, required, size, for, form\n\n## Input Ranges\n@docs max, min, step\n\n## Input Text Areas\n@docs cols, rows, wrap\n\n\n# Links and Areas\n@docs href, target, download, downloadAs, hreflang, media, ping, rel\n\n## Maps\n@docs ismap, usemap, shape, coords\n\n\n# Embedded Content\n@docs src, height, width, alt\n\n## Audio and Video\n@docs autoplay, controls, loop, preload, poster, default, kind, srclang\n\n## iframes\n@docs sandbox, seamless, srcdoc\n\n# Ordered Lists\n@docs reversed, start\n\n# Tables\n@docs align, colspan, rowspan, headers, scope\n\n# Header Stuff\n@docs async, charset, content, defer, httpEquiv, language, scoped\n\n# Less Common Global Attributes\nAttributes that can be attached to any HTML tag but are less commonly used.\n@docs accesskey, contenteditable, contextmenu, dir, draggable, dropzone,\n      itemprop, lang, spellcheck, tabindex\n\n# Key Generation\n@docs challenge, keytype\n\n# Miscellaneous\n@docs cite, datetime, pubdate, manifest\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accept",
            "comment": " List of types the server accepts, typically a file type.\nFor `form` and `input`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "acceptCharset",
            "comment": " List of supported charsets in a `form`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "accesskey",
            "comment": " Defines a keyboard shortcut to activate or add focus to the element. ",
            "type": "Char -> Html.Attribute msg"
          },
          {
            "name": "action",
            "comment": " The URI of a program that processes the information submitted via a `form`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "align",
            "comment": " Specifies the horizontal alignment of a `caption`, `col`, `colgroup`,\n`hr`, `iframe`, `img`, `table`, `tbody`,  `td`,  `tfoot`, `th`, `thead`, or\n`tr`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "alt",
            "comment": " Alternative text in case an image can't be displayed. Works with `img`,\n`area`, and `input`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "async",
            "comment": " Indicates that the `script` should be executed asynchronously. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "attribute",
            "comment": " Create *attributes*, like saying `domNode.setAttribute('class', 'greeting')`\nin JavaScript.\n\n    class : String -> Attribute msg\n    class name =\n      attribute \"class\" name\n\nRead more about the difference between properties and attributes [here][].\n\n[here]: https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md\n",
            "type": "String -> String -> Html.Attribute msg"
          },
          {
            "name": "autocomplete",
            "comment": " Indicates whether a `form` or an `input` can have their values automatically\ncompleted by the browser.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "autofocus",
            "comment": " The element should be automatically focused after the page loaded.\nFor `button`, `input`, `keygen`, `select`, and `textarea`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "autoplay",
            "comment": " The `audio` or `video` should play as soon as possible. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "challenge",
            "comment": " A challenge string that is submitted along with the public key in a `keygen`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "charset",
            "comment": " Declares the character encoding of the page or script. Common values include:\n\n  * UTF-8 - Character encoding for Unicode\n  * ISO-8859-1 - Character encoding for the Latin alphabet\n\nFor `meta` and `script`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "checked",
            "comment": " Indicates whether an `input` of type checkbox is checked. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "cite",
            "comment": " Contains a URI which points to the source of the quote or change in a\n`blockquote`, `del`, `ins`, or `q`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "class",
            "comment": " Often used with CSS to style elements with common properties. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "classList",
            "comment": " This function makes it easier to build a space-separated class attribute.\nEach class can easily be added and removed depending on the boolean value it\nis paired with. For example, maybe we want a way to view notices:\n\n    viewNotice : Notice -> Html msg\n    viewNotice notice =\n      div\n        [ classList\n            [ (\"notice\", True)\n            , (\"notice-important\", notice.isImportant)\n            , (\"notice-seen\", notice.isSeen)\n            ]\n        ]\n        [ text notice.content ]\n",
            "type": "List ( String, Bool ) -> Html.Attribute msg"
          },
          {
            "name": "cols",
            "comment": " Defines the number of columns in a `textarea`. ",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "colspan",
            "comment": " The colspan attribute defines the number of columns a cell should span.\nFor `td` and `th`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "content",
            "comment": " A value associated with http-equiv or name depending on the context. For\n`meta`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "contenteditable",
            "comment": " Indicates whether the element's content is editable. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "contextmenu",
            "comment": " Defines the ID of a `menu` element which will serve as the element's\ncontext menu.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "controls",
            "comment": " Indicates whether the browser should show playback controls for the `audio`\nor `video`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "coords",
            "comment": " A set of values specifying the coordinates of the hot-spot region in an\n`area`. Needs to be paired with a `shape` attribute to be meaningful.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "datetime",
            "comment": " Indicates the date and time associated with the element.\nFor `del`, `ins`, `time`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "default",
            "comment": " Indicates that the `track` should be enabled unless the user's preferences\nindicate something different.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "defaultValue",
            "comment": " Defines an initial value which will be displayed in an `input` when that\n`input` is added to the DOM. Unlike `value`, altering `defaultValue` after the\n`input` element has been added to the DOM has no effect.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "defer",
            "comment": " Indicates that a `script` should be executed after the page has been\nparsed.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "dir",
            "comment": " Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl\n(Right-To-Left).\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "disabled",
            "comment": " Indicates whether the user can interact with a `button`, `fieldset`,\n`input`, `keygen`, `optgroup`, `option`, `select` or `textarea`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "download",
            "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "downloadAs",
            "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly, and that the downloaded resource with have the given filename.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "draggable",
            "comment": " Defines whether the element can be dragged. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "dropzone",
            "comment": " Indicates that the element accept the dropping of content on it. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "enctype",
            "comment": " How `form` data should be encoded when submitted with the POST method.\nOptions include: application/x-www-form-urlencoded, multipart/form-data, and\ntext/plain.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "for",
            "comment": " The element ID described by this `label` or the element IDs that are used\nfor an `output`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "form",
            "comment": " Indicates the element ID of the `form` that owns this particular `button`,\n`fieldset`, `input`, `keygen`, `label`, `meter`, `object`, `output`,\n`progress`, `select`, or `textarea`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "formaction",
            "comment": " Indicates the action of an `input` or `button`. This overrides the action\ndefined in the surrounding `form`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "headers",
            "comment": " A space separated list of element IDs indicating which `th` elements are\nheaders for this cell. For `td` and `th`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "height",
            "comment": " Declare the height of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "hidden",
            "comment": " Indicates the relevance of an element. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "href",
            "comment": " The URL of a linked resource, such as `a`, `area`, `base`, or `link`. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "hreflang",
            "comment": " Two-letter language code of the linked resource of an `a`, `area`, or `link`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "httpEquiv",
            "comment": " This attribute is an indicator that is paired with the `content` attribute,\nindicating what that content means. `httpEquiv` can take on three different\nvalues: content-type, default-style, or refresh. For `meta`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "id",
            "comment": " Often used with CSS to style a specific element. The value of this\nattribute must be unique.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ismap",
            "comment": " When an `img` is a descendent of an `a` tag, the `ismap` attribute\nindicates that the click location should be added to the parent `a`'s href as\na query string.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "itemprop",
            "comment": "",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "keytype",
            "comment": " Specifies the type of key generated by a `keygen`. Possible values are:\nrsa, dsa, and ec.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "kind",
            "comment": " Specifies the kind of text `track`. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "lang",
            "comment": " Defines the language used in the element. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "language",
            "comment": " Defines the script language used in a `script`. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "list",
            "comment": " Associates an `input` with a `datalist` tag. The datalist gives some\npre-defined options to suggest to the user as they interact with an input.\nThe value of the list attribute must match the id of a `datalist` node.\nFor `input`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "loop",
            "comment": " Indicates whether the `audio` or `video` should start playing from the\nstart when it's finished.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "manifest",
            "comment": " Specifies the URL of the cache manifest for an `html` tag. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "map",
            "comment": " Transform the messages produced by an `Attribute`.\n",
            "type": "(a -> msg) -> Html.Attribute a -> Html.Attribute msg"
          },
          {
            "name": "max",
            "comment": " Indicates the maximum value allowed. When using an input of type number or\ndate, the max value must be a number or date. For `input`, `meter`, and `progress`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "maxlength",
            "comment": " Defines the maximum number of characters allowed in an `input` or\n`textarea`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "media",
            "comment": " Specifies a hint of the target media of a `a`, `area`, `link`, `source`,\nor `style`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "method",
            "comment": " Defines which HTTP method to use when submitting a `form`. Can be GET\n(default) or POST.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "min",
            "comment": " Indicates the minimum value allowed. When using an input of type number or\ndate, the min value must be a number or date. For `input` and `meter`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "minlength",
            "comment": " Defines the minimum number of characters allowed in an `input` or\n`textarea`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "multiple",
            "comment": " Indicates whether multiple values can be entered in an `input` of type\nemail or file. Can also indicate that you can `select` many options.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "name",
            "comment": " Name of the element. For example used by the server to identify the fields\nin form submits. For `button`, `form`, `fieldset`, `iframe`, `input`, `keygen`,\n`object`, `output`, `select`, `textarea`, `map`, `meta`, and `param`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "novalidate",
            "comment": " This attribute indicates that a `form` shouldn't be validated when\nsubmitted.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "pattern",
            "comment": " Defines a regular expression which an `input`'s value will be validated\nagainst.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ping",
            "comment": " Specify a URL to send a short POST request to when the user clicks on an\n`a` or `area`. Useful for monitoring and tracking.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "placeholder",
            "comment": " Provides a hint to the user of what can be entered into an `input` or\n`textarea`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "poster",
            "comment": " A URL indicating a poster frame to show until the user plays or seeks the\n`video`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "preload",
            "comment": " Control how much of an `audio` or `video` resource should be preloaded. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "property",
            "comment": " Create *properties*, like saying `domNode.className = 'greeting'` in\nJavaScript.\n\n    import Json.Encode as Encode\n\n    class : String -> Attribute msg\n    class name =\n      property \"className\" (Encode.string name)\n\nRead more about the difference between properties and attributes [here][].\n\n[here]: https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md\n",
            "type": "String -> Json.Encode.Value -> Html.Attribute msg"
          },
          {
            "name": "pubdate",
            "comment": " Indicates whether this date and time is the date of the nearest `article`\nancestor element. For `time`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "readonly",
            "comment": " Indicates whether an `input` or `textarea` can be edited. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "rel",
            "comment": " Specifies the relationship of the target object to the link object.\nFor `a`, `area`, `link`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "required",
            "comment": " Indicates whether this element is required to fill out or not.\nFor `input`, `select`, and `textarea`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "reversed",
            "comment": " Indicates whether an ordered list `ol` should be displayed in a descending\norder instead of a ascending.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "rows",
            "comment": " Defines the number of rows in a `textarea`. ",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "rowspan",
            "comment": " Defines the number of rows a table cell should span over.\nFor `td` and `th`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "sandbox",
            "comment": " A space separated list of security restrictions you'd like to lift for an\n`iframe`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "scope",
            "comment": " Specifies the scope of a header cell `th`. Possible values are: col, row,\ncolgroup, rowgroup.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "scoped",
            "comment": " Indicates that a `style` should only apply to its parent and all of the\nparents children.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "seamless",
            "comment": "  Make an `iframe` look like part of the containing document. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "selected",
            "comment": " Defines which `option` will be selected on page load. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "shape",
            "comment": " Declare the shape of the clickable area in an `a` or `area`. Valid values\ninclude: default, rect, circle, poly. This attribute can be paired with\n`coords` to create more particular shapes.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "size",
            "comment": " For `input` specifies the width of an input in characters.\n\nFor `select` specifies the number of visible options in a drop-down list.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "spellcheck",
            "comment": " Indicates whether spell checking is allowed for the element. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "src",
            "comment": " The URL of the embeddable content. For `audio`, `embed`, `iframe`, `img`,\n`input`, `script`, `source`, `track`, and `video`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "srcdoc",
            "comment": " An HTML document that will be displayed as the body of an `iframe`. It will\noverride the content of the `src` attribute if it has been specified.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "srclang",
            "comment": " A two letter language code indicating the language of the `track` text data.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "start",
            "comment": " Defines the first number of an ordered list if you want it to be something\nbesides 1.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "step",
            "comment": " Add a step size to an `input`. Use `step \"any\"` to allow any floating-point\nnumber to be used in the input.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "style",
            "comment": " Specify a list of styles.\n\n    myStyle : Attribute msg\n    myStyle =\n      style\n        [ (\"backgroundColor\", \"red\")\n        , (\"height\", \"90px\")\n        , (\"width\", \"100%\")\n        ]\n\n    greeting : Html msg\n    greeting =\n      div [ myStyle ] [ text \"Hello!\" ]\n\nThere is no `Html.Styles` module because best practices for working with HTML\nsuggest that this should primarily be specified in CSS files. So the general\nrecommendation is to use this function lightly.\n",
            "type": "List ( String, String ) -> Html.Attribute msg"
          },
          {
            "name": "tabindex",
            "comment": " Overrides the browser's default tab order and follows the one specified\ninstead.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "target",
            "comment": " Specify where the results of clicking an `a`, `area`, `base`, or `form`\nshould appear. Possible special values include:\n\n  * _blank &mdash; a new window or tab\n  * _self &mdash; the same frame (this is default)\n  * _parent &mdash; the parent frame\n  * _top &mdash; the full body of the window\n\nYou can also give the name of any `frame` you have created.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "title",
            "comment": " Text to be displayed in a tooltip when hovering over the element. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "type_",
            "comment": " Defines the type of a `button`, `input`, `embed`, `object`, `script`,\n`source`, `style`, or `menu`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "usemap",
            "comment": " Specify the hash name reference of a `map` that should be used for an `img`\nor `object`. A hash name reference is a hash symbol followed by the element's name or id.\nE.g. `\"#planet-map\"`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "value",
            "comment": " Defines a default value which will be displayed in a `button`, `option`,\n`input`, `li`, `meter`, `progress`, or `param`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "width",
            "comment": " Declare the width of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "wrap",
            "comment": " Indicates whether the text should be wrapped in a `textarea`. Possible\nvalues are \"hard\" and \"soft\".\n",
            "type": "String -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Html.Events",
        "comment": "\nIt is often helpful to create an [Union Type][] so you can have many different kinds\nof events as seen in the [TodoMVC][] example.\n\n[Union Type]: http://elm-lang.org/learn/Union-Types.elm\n[TodoMVC]: https://github.com/evancz/elm-todomvc/blob/master/Todo.elm\n\n# Mouse Helpers\n@docs onClick, onDoubleClick,\n      onMouseDown, onMouseUp,\n      onMouseEnter, onMouseLeave,\n      onMouseOver, onMouseOut\n\n# Form Helpers\n@docs onInput, onCheck, onSubmit\n\n# Focus Helpers\n@docs onBlur, onFocus\n\n# Custom Event Handlers\n@docs on, onWithOptions, Options, defaultOptions\n\n# Custom Decoders\n@docs targetValue, targetChecked, keyCode\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
            "args": [],
            "type": "{ stopPropagation : Bool, preventDefault : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n",
            "type": "Html.Events.Options"
          },
          {
            "name": "keyCode",
            "comment": " A `Json.Decoder` for grabbing `event.keyCode`. This helps you define\nkeyboard listeners like this:\n\n    import Json.Decode as Json\n\n    onKeyUp : (Int -> msg) -> Attribute msg\n    onKeyUp tagger =\n      on \"keyup\" (Json.map tagger keyCode)\n\n**Note:** It looks like the spec is moving away from `event.keyCode` and\ntowards `event.key`. Once this is supported in more browsers, we may add\nhelpers here for `onKeyUp`, `onKeyDown`, `onKeyPress`, etc.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "on",
            "comment": " Create a custom event listener. Normally this will not be necessary, but\nyou have the power! Here is how `onClick` is defined for example:\n\n    import Json.Decode as Json\n\n    onClick : msg -> Attribute msg\n    onClick message =\n      on \"click\" (Json.succeed message)\n\nThe first argument is the event name in the same format as with JavaScript's\n[`addEventListener`][aEL] function.\n\nThe second argument is a JSON decoder. Read more about these [here][decoder].\nWhen an event occurs, the decoder tries to turn the event object into an Elm\nvalue. If successful, the value is routed to your `update` function. In the\ncase of `onClick` we always just succeed with the given `message`.\n\nIf this is confusing, work through the [Elm Architecture Tutorial][tutorial].\nIt really does help!\n\n[aEL]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n[decoder]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial/\n",
            "type": "String -> Json.Decode.Decoder msg -> Html.Attribute msg"
          },
          {
            "name": "onBlur",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onCheck",
            "comment": " Capture [change](https://developer.mozilla.org/en-US/docs/Web/Events/change)\nevents on checkboxes. It will grab the boolean value from `event.target.checked`\non any input event.\n\nCheck out [targetChecked](#targetChecked) for more details on how this works.\n",
            "type": "(Bool -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onClick",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onDoubleClick",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onFocus",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onInput",
            "comment": " Capture [input](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevents for things like text fields or text areas.\n\nIt grabs the **string** value at `event.target.value`, so it will not work if\nyou need some other type of information. For example, if you want to track \ninputs on a range slider, make a custom handler with [`on`](#on).\n\nFor more details on how `onInput` works, check out [targetValue](#targetValue).\n",
            "type": "(String -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onMouseDown",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseEnter",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseLeave",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseOut",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseOver",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseUp",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onSubmit",
            "comment": " Capture a [submit](https://developer.mozilla.org/en-US/docs/Web/Events/submit)\nevent with [`preventDefault`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\nin order to prevent the form from changing the page’s location. If you need\ndifferent behavior, use `onWithOptions` to create a customized version of\n`onSubmit`.\n",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onWithOptions",
            "comment": " Same as `on` but you can set a few options.\n",
            "type": "String -> Html.Events.Options -> Json.Decode.Decoder msg -> Html.Attribute msg"
          },
          {
            "name": "targetChecked",
            "comment": " A `Json.Decoder` for grabbing `event.target.checked`. We use this to define\n`onCheck` as follows:\n\n    import Json.Decode as Json\n\n    onCheck : (Bool -> msg) -> Attribute msg\n    onCheck tagger =\n      on \"input\" (Json.map tagger targetChecked)\n",
            "type": "Json.Decode.Decoder Bool"
          },
          {
            "name": "targetValue",
            "comment": " A `Json.Decoder` for grabbing `event.target.value`. We use this to define\n`onInput` as follows:\n\n    import Json.Decode as Json\n\n    onInput : (String -> msg) -> Attribute msg\n    onInput tagger =\n      on \"input\" (Json.map tagger targetValue)\n\nYou probably will never need this, but hopefully it gives some insights into\nhow to make custom event handlers.\n",
            "type": "Json.Decode.Decoder String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Html.Keyed",
        "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This\nmakes it possible for the underlying diffing algorithm to reuse nodes more\nefficiently.\n\n# Keyed Nodes\n@docs node\n\n# Commonly Keyed Nodes\n@docs ol, ul\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "node",
            "comment": " Works just like `Html.node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n",
            "type": "String -> List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"
          },
          {
            "name": "ol",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"
          },
          {
            "name": "ul",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Html",
        "comment": " This file is organized roughly in order of popularity. The tags which you'd\nexpect to use frequently will be closer to the top.\n\n# Primitives\n@docs Html, Attribute, text, node, map\n\n# Programs\n@docs beginnerProgram, program, programWithFlags\n\n# Tags\n\n## Headers\n@docs h1, h2, h3, h4, h5, h6\n\n## Grouping Content\n@docs div, p, hr, pre, blockquote\n\n## Text\n@docs span, a, code, em, strong, i, b, u, sub, sup, br\n\n## Lists\n@docs ol, ul, li, dl, dt, dd\n\n## Emdedded Content\n@docs img, iframe, canvas, math\n\n## Inputs\n@docs form, input, textarea, button, select, option\n\n## Sections\n@docs section, nav, article, aside, header, footer, address, main_, body\n\n## Figures\n@docs figure, figcaption\n\n## Tables\n@docs table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th\n\n\n## Less Common Elements\n\n### Less Common Inputs\n@docs fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter\n\n### Audio and Video\n@docs audio, video, source, track\n\n### Embedded Objects\n@docs embed, object, param\n\n### Text Edits\n@docs ins, del\n\n### Semantic Text\n@docs small, cite, dfn, abbr, time, var, samp, kbd, s, q\n\n### Less Common Text Tags\n@docs mark, ruby, rt, rp, bdi, bdo, wbr\n\n## Interactive Elements\n@docs details, summary, menuitem, menu\n\n",
        "aliases": [
          {
            "name": "Attribute",
            "comment": " Set attributes on your `Html`. Learn more in the\n[`Html.Attributes`](Html-Attributes) module.\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Property msg"
          },
          {
            "name": "Html",
            "comment": " The core building block used to build up HTML. Here we create an `Html`\nvalue with no attributes and one child:\n\n    hello : Html msg\n    hello =\n      div [] [ text \"Hello!\" ]\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Node msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " Represents a hyperlink, linking to another resource. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "abbr",
            "comment": " Represents an abbreviation or an acronym; the expansion of the\nabbreviation can be represented in the title attribute.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "address",
            "comment": " Defines a section containing contact information. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "article",
            "comment": " Defines self-contained content that could exist independently of the rest\nof the content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "aside",
            "comment": " Defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "audio",
            "comment": " Represents a sound or audio stream. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "b",
            "comment": " Represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate\nvoice.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "bdi",
            "comment": " Represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "bdo",
            "comment": " Represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "beginnerProgram",
            "comment": " Create a [`Program`][program] that describes how your whole app works.\n\nRead about [The Elm Architecture][tea] to learn how to use this. Just do it.\nThe additional context is very worthwhile! (Honestly, it is best to just read\nthat guide from front to back instead of muddling around and reading it\npiecemeal.)\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[tea]: https://guide.elm-lang.org/architecture/\n",
            "type": "{ model : model , view : model -> Html.Html msg , update : msg -> model -> model } -> Platform.Program Basics.Never model msg"
          },
          {
            "name": "blockquote",
            "comment": " Represents a content that is quoted from another source. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "body",
            "comment": " Represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "br",
            "comment": " Represents a line break. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "button",
            "comment": " Represents a button. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "canvas",
            "comment": " Represents a bitmap area for graphics rendering. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "caption",
            "comment": " Represents the title of a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "cite",
            "comment": " Represents the title of a work. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "code",
            "comment": " Represents computer code. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "col",
            "comment": " Represents a column of a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colgroup",
            "comment": " Represents a set of one or more columns of a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "datalist",
            "comment": " Represents a set of predefined options for other controls. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dd",
            "comment": " Represents the definition of the terms immediately listed before it. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "del",
            "comment": " Defines a removal from the document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "details",
            "comment": " Represents a widget from which the user can obtain additional information\nor controls.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dfn",
            "comment": " Represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "div",
            "comment": " Represents a generic container with no special meaning. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dl",
            "comment": " Defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dt",
            "comment": " Represents a term defined by the next `dd`. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "em",
            "comment": " Represents emphasized text, like a stress accent. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "embed",
            "comment": " Represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "fieldset",
            "comment": " Represents a set of controls. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figcaption",
            "comment": " Represents the legend of a figure. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figure",
            "comment": " Represents a figure illustrated as part of the document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "footer",
            "comment": " Defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "form",
            "comment": " Represents a form, consisting of controls, that can be submitted to a\nserver for processing.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h1",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h2",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h3",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h4",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h5",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h6",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "header",
            "comment": " Defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "hr",
            "comment": " Represents a thematic break between paragraphs of a section or article or\nany longer content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "i",
            "comment": " Represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "iframe",
            "comment": " Embedded an HTML document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "img",
            "comment": " Represents an image. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "input",
            "comment": " Represents a typed data field allowing the user to edit the data. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ins",
            "comment": " Defines an addition to the document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "kbd",
            "comment": " Represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "keygen",
            "comment": " Represents a key-pair generator control. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "label",
            "comment": " Represents the caption of a form control. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "legend",
            "comment": " Represents the caption for a `fieldset`. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "li",
            "comment": " Defines a item of an enumeration list. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "main_",
            "comment": " Defines the main or important content in the document. There is only one\n`main` element in the document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "map",
            "comment": " Transform the messages produced by some `Html`. In the following example,\nwe have `viewButton` that produces `()` messages, and we transform those values\ninto `Msg` values in `view`.\n\n    type Msg = Left | Right\n\n    view : model -> Html Msg\n    view model =\n      div []\n        [ map (\\_ -> Left) (viewButton \"Left\")\n        , map (\\_ -> Right) (viewButton \"Right\")\n        ]\n\n    viewButton : String -> Html ()\n    viewButton name =\n      button [ onClick () ] [ text name ]\n\nThis should not come in handy too often. Definitely read [this][reuse] before\ndeciding if this is what you want.\n\n[reuse]: https://guide.elm-lang.org/reuse/\n",
            "type": "(a -> msg) -> Html.Html a -> Html.Html msg"
          },
          {
            "name": "mark",
            "comment": " Represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "math",
            "comment": " Defines a mathematical formula. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "menu",
            "comment": " Represents a list of commands. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "menuitem",
            "comment": " Represents a command that the user can invoke. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "meter",
            "comment": " Represents a scalar measurement (or a fractional value), within a known\nrange.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "nav",
            "comment": " Defines a section that contains only navigation links.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "node",
            "comment": " General way to create HTML nodes. It is used to define all of the helper\nfunctions in this library.\n\n    div : List (Attribute msg) -> List (Html msg) -> Html msg\n    div attributes children =\n        node \"div\" attributes children\n\nYou can use this to create custom nodes if you need to create something that\nis not covered by the helper functions in this library.\n",
            "type": "String -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "object",
            "comment": " Represents an external resource, which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ol",
            "comment": " Defines an ordered list of items. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "optgroup",
            "comment": " Represents a set of options, logically grouped. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "option",
            "comment": " Represents an option in a `select` element or a suggestion of a `datalist`\nelement.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "output",
            "comment": " Represents the result of a calculation. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "p",
            "comment": " Defines a portion that should be displayed as a paragraph. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "param",
            "comment": " Defines parameters for use by plug-ins invoked by `object` elements. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "pre",
            "comment": " Indicates that its content is preformatted and that this format must be\npreserved.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "program",
            "comment": " Create a [`Program`][program] that describes how your whole app works.\n\nRead about [The Elm Architecture][tea] to learn how to use this. Just do it.\nCommands and subscriptions make way more sense when you work up to them\ngradually and see them in context with examples.\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[tea]: https://guide.elm-lang.org/architecture/\n",
            "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program Basics.Never model msg"
          },
          {
            "name": "programWithFlags",
            "comment": " Create a [`Program`][program] that describes how your whole app works.\n\nIt works just like `program` but you can provide &ldquo;flags&rdquo; from\nJavaScript to configure your application. Read more about that [here][].\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[here]: https://guide.elm-lang.org/interop/javascript.html\n",
            "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program flags model msg"
          },
          {
            "name": "progress",
            "comment": " Represents the completion progress of a task. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "q",
            "comment": " Represents an inline quotation. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "rp",
            "comment": " Represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "rt",
            "comment": " Represents the text of a ruby annotation. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ruby",
            "comment": " Represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "s",
            "comment": " Represents content that is no longer accurate or relevant. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "samp",
            "comment": " Represents the output of a program or a computer. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "section",
            "comment": " Defines a section in a document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "select",
            "comment": " Represents a control allowing selection among a set of options. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "small",
            "comment": " Represents a side comment, that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "source",
            "comment": " Allows authors to specify alternative media resources for media elements\nlike `video` or `audio`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "span",
            "comment": " Represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like `class`, `lang`, or `dir`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "strong",
            "comment": " Represents especially important text. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "sub",
            "comment": " Represent a subscript. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "summary",
            "comment": " Represents a summary, caption, or legend for a given `details`. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "sup",
            "comment": " Represent a superscript. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "table",
            "comment": " Represents data with more than one dimension. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tbody",
            "comment": " Represents the block of rows that describes the concrete data of a table.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "td",
            "comment": " Represents a data cell in a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "text",
            "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n    text \"Hello World!\"\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "textarea",
            "comment": " Represents a multiline text edit control. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tfoot",
            "comment": " Represents the block of rows that describes the column summaries of a table.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "th",
            "comment": " Represents a header cell in a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "thead",
            "comment": " Represents the block of rows that describes the column labels of a table.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "time",
            "comment": " Represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tr",
            "comment": " Represents a row of cells in a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "track",
            "comment": " Allows authors to specify timed text track for media elements like `video`\nor `audio`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "u",
            "comment": " Represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ul",
            "comment": " Defines an unordered list of items. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "var",
            "comment": " Represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "video",
            "comment": " Represents a video, the associated audio and captions, and controls. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "wbr",
            "comment": " Represents a line break opportunity, that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/http",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Http.Progress",
        "comment": " Track the progress of an HTTP request. This can be useful if you are\nrequesting a large amount of data and want to show the user a progress bar\nor something.\n\nHere is an example usage: [demo][] and [code][].\n\n[demo]: https://hirafuji.com.br/elm/http-progress-example/\n[code]: https://gist.github.com/pablohirafuji/fa373d07c42016756d5bca28962008c4\n\n**Note:** If you stop tracking progress, you cancel the request.\n\n# Progress\n@docs Progress, track\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Progress",
            "comment": " The progress of an HTTP request.\n\nYou start with `None`. As data starts to come in, you will see `Some`. The\n`bytesExpected` field will match the `Content-Length` header, indicating how\nlong the response body is in bytes (8-bits). The `bytes` field indicates how\nmany bytes have been loaded so far, so if you want progress as a percentage,\nyou would say:\n\n    Some { bytes, bytesExpected } ->\n      toFloat bytes / toFloat bytesExpected\n\nYou will end up with `Fail` or `Done` depending on the success of the request.\n",
            "args": [
              "data"
            ],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Some",
                [
                  "{ bytes : Int, bytesExpected : Int }"
                ]
              ],
              [
                "Fail",
                [
                  "Http.Error"
                ]
              ],
              [
                "Done",
                [
                  "data"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "track",
            "comment": " Create a subscription that tracks the progress of an HTTP request.\n\nSee it in action in this example: [demo][] and [code][].\n\n[demo]: https://hirafuji.com.br/elm/http-progress-example/\n[code]: https://gist.github.com/pablohirafuji/fa373d07c42016756d5bca28962008c4\n",
            "type": "String -> (Http.Progress.Progress data -> msg) -> Http.Request data -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Http",
        "comment": " Create and send HTTP requests.\n\n# Send Requests\n@docs Request, send, Error\n\n# GET\n@docs getString, get\n\n# POST\n@docs post\n\n# Custom Requests\n@docs request\n\n## Headers\n@docs Header, header\n\n## Request Bodies\n@docs Body, emptyBody, jsonBody, stringBody, multipartBody, Part, stringPart\n\n## Responses\n@docs Expect, expectString, expectJson, expectStringResponse, Response\n\n# Low-Level\n@docs encodeUri, decodeUri, toTask\n\n",
        "aliases": [
          {
            "name": "Body",
            "comment": " Represents the body of a `Request`.\n",
            "args": [],
            "type": "Http.Internal.Body"
          },
          {
            "name": "Expect",
            "comment": " Logic for interpreting a response body.\n",
            "args": [
              "a"
            ],
            "type": "Http.Internal.Expect a"
          },
          {
            "name": "Header",
            "comment": " An HTTP header for configuring requests. See a bunch of common headers\n[here][].\n\n[here]: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\n",
            "args": [],
            "type": "Http.Internal.Header"
          },
          {
            "name": "Request",
            "comment": " Describes an HTTP request.\n",
            "args": [
              "a"
            ],
            "type": "Http.Internal.Request a"
          },
          {
            "name": "Response",
            "comment": " The response from a `Request`.\n",
            "args": [
              "body"
            ],
            "type": "{ url : String , status : { code : Int, message : String } , headers : Dict.Dict String String , body : body }"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " A `Request` can fail in a couple ways:\n\n  - `BadUrl` means you did not provide a valid URL.\n  - `Timeout` means it took too long to get a response.\n  - `NetworkError` means the user turned off their wifi, went in a cave, etc.\n  - `BadStatus` means you got a response back, but the [status code][sc]\n    indicates failure.\n  - `BadPayload` means you got a response back with a nice status code, but\n    the body of the response was something unexpected. The `String` in this\n    case is a debugging message that explains what went wrong with your JSON\n    decoder or whatever.\n\n[sc]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n",
            "args": [],
            "cases": [
              [
                "BadUrl",
                [
                  "String"
                ]
              ],
              [
                "Timeout",
                []
              ],
              [
                "NetworkError",
                []
              ],
              [
                "BadStatus",
                [
                  "Http.Response String"
                ]
              ],
              [
                "BadPayload",
                [
                  "String",
                  "Http.Response String"
                ]
              ]
            ]
          },
          {
            "name": "Part",
            "comment": " Contents of a multi-part body. Right now it only supports strings, but we\nwill support blobs and files when we get an API for them in Elm.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "decodeUri",
            "comment": " Use this to unescape query parameters. It converts things like `%2F` to\n`/`. It can fail in some cases. For example, there is no way to unescape `%`\nbecause it could never appear alone in a properly escaped string.\n\nIt works just like `decodeURIComponent` in JavaScript.\n",
            "type": "String -> Maybe.Maybe String"
          },
          {
            "name": "emptyBody",
            "comment": " Create an empty body for your `Request`. This is useful for GET requests\nand POST requests where you are not sending any data.\n",
            "type": "Http.Body"
          },
          {
            "name": "encodeUri",
            "comment": " Use this to escape query parameters. Converts characters like `/` to `%2F`\nso that it does not clash with normal URL\n\nIt work just like `encodeURIComponent` in JavaScript.\n",
            "type": "String -> String"
          },
          {
            "name": "expectJson",
            "comment": " Expect the response body to be JSON. You provide a `Decoder` to turn that\nJSON into an Elm value. If the body cannot be parsed as JSON or if the JSON\ndoes not match the decoder, the request will resolve to a `BadPayload` error.\n",
            "type": "Json.Decode.Decoder a -> Http.Expect a"
          },
          {
            "name": "expectString",
            "comment": " Expect the response body to be a `String`.\n",
            "type": "Http.Expect String"
          },
          {
            "name": "expectStringResponse",
            "comment": " Maybe you want the whole `Response`: status code, headers, body, etc. This\nlets you get all of that information. From there you can use functions like\n`Json.Decode.decodeString` to interpret it as JSON or whatever else you want.\n",
            "type": "(Http.Response String -> Result.Result String a) -> Http.Expect a"
          },
          {
            "name": "get",
            "comment": " Create a `GET` request and try to decode the response body from JSON to\nsome Elm value.\n\n    import Http\n    import Json.Decode exposing (list, string)\n\n    getBooks : Http.Request (List String)\n    getBooks =\n      Http.get \"https://example.com/books\" (list string)\n\nYou can learn more about how JSON decoders work [here][] in the guide.\n\n[here]: https://guide.elm-lang.org/interop/json.html\n",
            "type": "String -> Json.Decode.Decoder a -> Http.Request a"
          },
          {
            "name": "getString",
            "comment": " Create a `GET` request and interpret the response body as a `String`.\n\n    import Http\n\n    getWarAndPeace : Http.Request String\n    getWarAndPeace =\n      Http.getString \"https://example.com/books/war-and-peace\"\n",
            "type": "String -> Http.Request String"
          },
          {
            "name": "header",
            "comment": " Create a `Header`.\n\n    header \"If-Modified-Since\" \"Sat 29 Oct 1994 19:43:31 GMT\"\n    header \"Max-Forwards\" \"10\"\n    header \"X-Requested-With\" \"XMLHttpRequest\"\n\n**Note:** In the future, we may split this out into an `Http.Headers` module\nand provide helpers for cases that are common on the client-side. If this\nsounds nice to you, open an issue [here][] describing the helper you want and\nwhy you need it.\n\n[here]: https://github.com/elm-lang/http/issues\n",
            "type": "String -> String -> Http.Header"
          },
          {
            "name": "jsonBody",
            "comment": " Put some JSON value in the body of your `Request`. This will automatically\nadd the `Content-Type: application/json` header.\n",
            "type": "Json.Encode.Value -> Http.Body"
          },
          {
            "name": "multipartBody",
            "comment": " Create multi-part bodies for your `Request`, automatically adding the\n`Content-Type: multipart/form-data` header.\n",
            "type": "List Http.Part -> Http.Body"
          },
          {
            "name": "post",
            "comment": " Create a `POST` request and try to decode the response body from JSON to\nan Elm value. For example, if we want to send a POST without any data in the\nrequest body, it would be like this:\n\n    import Http\n    import Json.Decode exposing (list, string)\n\n    postBooks : Http.Request (List String)\n    postBooks =\n      Http.post \"https://example.com/books\" Http.emptyBody (list string)\n\nSee [`jsonBody`](#jsonBody) to learn how to have a more interesting request\nbody. And check out [this section][here] of the guide to learn more about\nJSON decoders.\n\n[here]: https://guide.elm-lang.org/interop/json.html\n\n",
            "type": "String -> Http.Body -> Json.Decode.Decoder a -> Http.Request a"
          },
          {
            "name": "request",
            "comment": " Create a custom request. For example, a custom PUT request would look like\nthis:\n\n    put : String -> Body -> Request ()\n    put url body =\n      request\n        { method = \"PUT\"\n        , headers = []\n        , url = url\n        , body = body\n        , expect = expectStringResponse (\\_ -> Ok ())\n        , timeout = Nothing\n        , withCredentials = False\n        }\n",
            "type": "{ method : String , headers : List Http.Header , url : String , body : Http.Body , expect : Http.Expect a , timeout : Maybe.Maybe Time.Time , withCredentials : Bool } -> Http.Request a"
          },
          {
            "name": "send",
            "comment": " Send a `Request`. We could get the text of “War and Peace” like this:\n\n    import Http\n\n    type Msg = Click | NewBook (Result Http.Error String)\n\n    update : Msg -> Model -> Model\n    update msg model =\n      case msg of\n        Click ->\n          ( model, getWarAndPeace )\n\n        NewBook (Ok book) ->\n          ...\n\n        NewBook (Err _) ->\n          ...\n\n    getWarAndPeace : Cmd Msg\n    getWarAndPeace =\n      Http.send NewBook <|\n        Http.getString \"https://example.com/books/war-and-peace.md\"\n",
            "type": "(Result.Result Http.Error a -> msg) -> Http.Request a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "stringBody",
            "comment": " Put some string in the body of your `Request`. Defining `jsonBody` looks\nlike this:\n\n    import Json.Encode as Encode\n\n    jsonBody : Encode.Value -> Body\n    jsonBody value =\n      stringBody \"application/json\" (Encode.encode 0 value)\n\nNotice that the first argument is a [MIME type][mime] so we know to add\n`Content-Type: application/json` to our request headers. Make sure your\nMIME type matches your data. Some servers are strict about this!\n\n[mime]: https://en.wikipedia.org/wiki/Media_type\n",
            "type": "String -> String -> Http.Body"
          },
          {
            "name": "stringPart",
            "comment": " A named chunk of string data.\n\n    body =\n      multipartBody\n        [ stringPart \"user\" \"tom\"\n        , stringPart \"payload\" \"42\"\n        ]\n",
            "type": "String -> String -> Http.Part"
          },
          {
            "name": "toTask",
            "comment": " Convert a `Request` into a `Task`. This is only really useful if you want\nto chain together a bunch of requests (or any other tasks) in a single command.\n",
            "type": "Http.Request a -> Task.Task Http.Error a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/keyboard",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Keyboard",
        "comment": " This library lets you listen to global keyboard events.\n\n# Key Codes\n@docs KeyCode\n\n# Subscriptions\n@docs presses, downs, ups\n\n",
        "aliases": [
          {
            "name": "KeyCode",
            "comment": " Keyboard keys can be represented as integers. These are called *key codes*.\nYou can use [`toCode`](http://package.elm-lang.org/packages/elm-lang/core/latest/Char#toCode)\nand [`fromCode`](http://package.elm-lang.org/packages/elm-lang/core/latest/Char#fromCode)\nto convert between key codes and characters.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "downs",
            "comment": " Subscribe to get codes whenever a key goes down.\n",
            "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "presses",
            "comment": " Subscribe to all key presses.\n",
            "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "ups",
            "comment": " Subscribe to get codes whenever a key goes up.\n",
            "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/lazy",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Lazy",
        "comment": " This library lets you delay a computation until later.\n\n# Basics\n@docs Lazy, lazy, force\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs apply, andThen\n",
        "aliases": [],
        "types": [
          {
            "name": "Lazy",
            "comment": " A wrapper around a value that will be lazily evaluated. ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Lazily chain together lazy computations, for when you have a series of\nsteps that all need to be performed lazily. This can be nice when you need to\npattern match on a value, for example, when appending lazy lists:\n\n    type List a = Empty | Node a (Lazy (List a))\n\n    cons : a -> Lazy (List a) -> Lazy (List a)\n    cons first rest =\n      Lazy.map (Node first) rest\n\n    append : Lazy (List a) -> Lazy (List a) -> Lazy (List a)\n    append lazyList1 lazyList2 =\n      let\n        appendHelp list1 =\n          case list1 of\n            Empty ->\n              lazyList2\n\n            Node first rest ->\n              cons first (append rest list2))\n      in\n        lazyList1\n          |> Lazy.andThen appendHelp\n\n\nBy using `andThen` we ensure that neither `lazyList1` or `lazyList2` are forced\nbefore they are needed. So as written, the `append` function delays the pattern\nmatching until later.\n",
            "type": "(a -> Lazy.Lazy b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "apply",
            "comment": " Lazily apply a lazy function to a lazy value. This is pretty rare on its\nown, but it lets you map as high as you want.\n\n    map3 f a b == f `map` a `apply` b `apply` c\n\nIt is not the most beautiful, but it is equivalent and will let you create\n`map9` quite easily if you really need it.\n",
            "type": "Lazy.Lazy (a -> b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "force",
            "comment": " Force the evaluation of a lazy value. This means we only pay for the\ncomputation when we need it. Here is a rather contrived example.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> List.sum [1..1000000])\n\n    sums : (Int, Int, Int)\n    sums =\n        (force lazySum, force lazySum, force lazySum)\n\nWe are forcing this computation three times. The cool thing is that the first\ntime you `force` a value, the result is stored. This means you pay the cost on\nthe first one, but all the rest are very cheap, basically just looking up a\nvalue in memory.\n",
            "type": "Lazy.Lazy a -> a"
          },
          {
            "name": "lazy",
            "comment": " Delay the evaluation of a value until later. For example, maybe we will\nneed to generate a very long list and find its sum, but we do not want to do\nit unless it is absolutely necessary.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> sum [1..1000000])\n\nNow we only pay for `lazySum` if we actually need it.\n",
            "type": "(() -> a) -> Lazy.Lazy a"
          },
          {
            "name": "map",
            "comment": " Lazily apply a function to a lazy value.\n\n    lazySum : Lazy Int\n    lazySum =\n        map List.sum (lazy (\\() -> [1..1000000]))\n\nThe resulting lazy value will create a big list and sum it up when it is\nfinally forced.\n",
            "type": "(a -> b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "map2",
            "comment": " Lazily apply a function to two lazy values.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> List.sum [1..1000000])\n\n    lazySumPair : Lazy (Int, Int)\n    lazySumPair =\n        map2 (,) lazySum lazySum\n\n",
            "type": "(a -> b -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy d -> Lazy.Lazy result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy d -> Lazy.Lazy e -> Lazy.Lazy result"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/mouse",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Mouse",
        "comment": " This library lets you listen to global mouse events. This is useful\nfor a couple tricky scenarios including:\n\n  - Detecting a \"click\" outside the current component.\n  - Supporting drag-and-drop interactions.\n\n# Mouse Position\n@docs Position, position\n\n# Subscriptions\n@docs clicks, moves, downs, ups\n\n",
        "aliases": [
          {
            "name": "Position",
            "comment": " The position of the mouse relative to the whole document. So if you are\nscrolled down a bunch, you are still getting a coordinate relative to the\nvery top left corner of the *whole* document.\n",
            "args": [],
            "type": "{ x : Int, y : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "clicks",
            "comment": " Subscribe to mouse clicks anywhere on screen.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "downs",
            "comment": " Get a position whenever the user *presses* the mouse button.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "moves",
            "comment": " Subscribe to mouse moves anywhere on screen. It is best to unsubscribe if\nyou do not need these events. Otherwise you will handle a bunch of events for\nno benefit.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "position",
            "comment": " The decoder used to extract a `Position` from a JavaScript mouse event.\n",
            "type": "Json.Decode.Decoder Mouse.Position"
          },
          {
            "name": "ups",
            "comment": " Get a position whenever the user *releases* the mouse button.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/navigation",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Navigation",
        "comment": " This is a library for managing browser navigation yourself.\n\nThe core functionality is the ability to &ldquo;navigate&rdquo; to new URLs,\nchanging the address bar of the broswer *without* the browser kicking off a\nrequest to your servers. Instead, you manage the changes yourself in Elm.\n\n\n# Change the URL\n@docs newUrl, modifyUrl\n\n# Navigation\n@docs back, forward\n\n# Programs with Locations\n@docs program, programWithFlags, Location\n\n",
        "aliases": [
          {
            "name": "Location",
            "comment": " A bunch of information about the address bar.\n\n**Note 1:** Almost everyone will want to use a URL parsing library like\n[`evancz/url-parser`][parse] to turn a `Location` into something more useful\nin your `update` function.\n\n[parse]: https://github.com/evancz/url-parser\n\n**Note 2:** These fields correspond exactly with the fields of `document.location`\nas described [here](https://developer.mozilla.org/en-US/docs/Web/API/Location).\n",
            "args": [],
            "type": "{ href : String , host : String , hostname : String , protocol : String , origin : String , port_ : String , pathname : String , search : String , hash : String , username : String , password : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "back",
            "comment": " Go back some number of pages. So `back 1` goes back one page, and `back 2`\ngoes back two pages.\n\n**Note:** You only manage the browser history that *you* created. Think of this\nlibrary as letting you have access to a small part of the overall history. So\nif you go back farther than the history you own, you will just go back to some\nother website!\n",
            "type": "Int -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "forward",
            "comment": " Go forward some number of pages. So `forward 1` goes forward one page, and\n`forward 2` goes forward two pages. If there are no more pages in the future,\nthis will do nothing.\n\n**Note:** You only manage the browser history that *you* created. Think of this\nlibrary as letting you have access to a small part of the overall history. So\nif you go forward farther than the history you own, the user will end up on\nwhatever website they visited next!\n",
            "type": "Int -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "modifyUrl",
            "comment": " Modify the current URL. This *will not* add a new entry to the browser\nhistory. It just changes the one you are on right now.\n",
            "type": "String -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "newUrl",
            "comment": " Step to a new URL. This will add a new entry to the browser history.\n\n**Note:** If the user has gone `back` a few pages, there will be &ldquo;future\npages&rdquo; that the user can go `forward` to. Adding a new URL in that\nscenario will clear out any future pages. It is like going back in time and\nmaking a different choice.\n",
            "type": "String -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "program",
            "comment": " Same as [`Html.program`][doc], but your `update` function gets messages\nwhenever the URL changes.\n\n[doc]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html#program\n\nThe first difference is the `Location -> msg` argument. This converts a\n[`Location`](#location) into a message whenever the URL changes. That message\nis fed into your `update` function just like any other one.\n\nThe second difference is that the `init` function takes `Location` as an\nargument. This lets you use the URL on the first frame.\n\n**Note:** A location message is produced every time the URL changes. This\nincludes things exposed by this library, like `back` and `newUrl`, as well as\nwhenever the user clicks the back or forward buttons of the browsers. So if\nthe URL changes, you will hear about it in your `update` function.\n",
            "type": "(Navigation.Location -> msg) -> { init : Navigation.Location -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never model msg"
          },
          {
            "name": "programWithFlags",
            "comment": " Works the same as [`program`](#program), but it can also handle flags.\nSee [`Html.programWithFlags`][doc] for more information.\n\n[doc]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html#programWithFlags\n",
            "type": "(Navigation.Location -> msg) -> { init : flags -> Navigation.Location -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags model msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/page-visibility",
    "version": "1.0.1",
    "docs": [
      {
        "name": "PageVisibility",
        "comment": "\n\n# Page Visibility\n@docs Visibility, visibility, isHidden, isVisible\n\n# Changes\n@docs visibilityChanges\n\n# Low Level\n@docs onVisibilityChange\n",
        "aliases": [],
        "types": [
          {
            "name": "Visibility",
            "comment": " Value describing whether the page is hidden or visible.\n",
            "args": [],
            "cases": [
              [
                "Visible",
                []
              ],
              [
                "Hidden",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "isHidden",
            "comment": " Is the page hidden?\n",
            "type": "Task.Task x Bool"
          },
          {
            "name": "isVisible",
            "comment": " Is the page visible?\n",
            "type": "Task.Task x Bool"
          },
          {
            "name": "onVisibilityChange",
            "comment": " A normal user should never need this. This should only be useful if you are\ncreating an effect manager that needs to track page visibility for some reason.\nThe boolean value is from calling `isHidden`.\n\nThis task never completes. Use `Process.spawn` and `Process.kill` to run it in\na separate process and kill it when it is no longer needed.\n",
            "type": "(Bool -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"
          },
          {
            "name": "visibility",
            "comment": " Get the current page visibility.\n",
            "type": "Task.Task x PageVisibility.Visibility"
          },
          {
            "name": "visibilityChanges",
            "comment": " Subscribe to any visibility changes. You will get updates about the current\nvisibility.\n",
            "type": "(PageVisibility.Visibility -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/svg",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Svg.Lazy",
        "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Svg` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> Svg.Svg msg) -> a -> Svg.Svg msg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> Svg.Svg msg) -> a -> b -> Svg.Svg msg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> Svg.Svg msg) -> a -> b -> c -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Svg.Events",
        "comment": "\n\n# Animation event attributes\n@docs onBegin, onEnd, onRepeat\n\n# Document event attributes\n@docs onAbort, onError, onResize, onScroll, onLoad, onUnload, onZoom\n\n# Graphical event attributes\n@docs onActivate, onClick, onFocusIn, onFocusOut, onMouseDown, onMouseMove,\n  onMouseOut, onMouseOver, onMouseUp\n\n# Custom Events\n@docs on\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "on",
            "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : msg -> Attribute msg\n    onClick msg =\n      on \"click\" (Json.succeed msg)\n\nYou first specify the name of the event in the same format as with JavaScript’s\n`addEventListener`. Next you give a JSON decoder, which lets you pull\ninformation out of the event object. If the decoder succeeds, it will produce\na message and route it to your `update` function.\n",
            "type": "String -> Json.Decode.Decoder msg -> Svg.Attribute msg"
          },
          {
            "name": "onAbort",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onActivate",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onBegin",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onClick",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onEnd",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onError",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onFocusIn",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onFocusOut",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onLoad",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseDown",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseMove",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseOut",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseOver",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseUp",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onRepeat",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onResize",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onScroll",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onUnload",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onZoom",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Svg.Attributes",
        "comment": "\n\n# Regular attributes\n@docs accentHeight, accelerate, accumulate, additive, alphabetic, allowReorder,\n  amplitude, arabicForm, ascent, attributeName, attributeType, autoReverse,\n  azimuth, baseFrequency, baseProfile, bbox, begin, bias, by, calcMode,\n  capHeight, class, clipPathUnits, contentScriptType, contentStyleType, cx, cy,\n  d, decelerate, descent, diffuseConstant, divisor, dur, dx, dy, edgeMode,\n  elevation, end, exponent, externalResourcesRequired, filterRes, filterUnits,\n  format, from, fx, fy, g1, g2, glyphName, glyphRef, gradientTransform,\n  gradientUnits, hanging, height, horizAdvX, horizOriginX, horizOriginY, id,\n  ideographic, in_, in2, intercept, k, k1, k2, k3, k4, kernelMatrix,\n  kernelUnitLength, keyPoints, keySplines, keyTimes, lang, lengthAdjust,\n  limitingConeAngle, local, markerHeight, markerUnits, markerWidth,\n  maskContentUnits, maskUnits, mathematical, max, media, method, min, mode,\n  name, numOctaves, offset, operator, order, orient, orientation, origin,\n  overlinePosition, overlineThickness, panose1, path, pathLength,\n  patternContentUnits, patternTransform, patternUnits, pointOrder, points,\n  pointsAtX, pointsAtY, pointsAtZ, preserveAlpha, preserveAspectRatio,\n  primitiveUnits, r, radius, refX, refY, renderingIntent, repeatCount,\n  repeatDur, requiredExtensions, requiredFeatures, restart, result, rotate,\n  rx, ry, scale, seed, slope, spacing, specularConstant, specularExponent,\n  speed, spreadMethod, startOffset, stdDeviation, stemh, stemv, stitchTiles,\n  strikethroughPosition, strikethroughThickness, string, style, surfaceScale,\n  systemLanguage, tableValues, target, targetX, targetY, textLength, title, to,\n  transform, type_, u1, u2, underlinePosition, underlineThickness, unicode,\n  unicodeRange, unitsPerEm, vAlphabetic, vHanging, vIdeographic, vMathematical,\n  values, version, vertAdvY, vertOriginX, vertOriginY, viewBox, viewTarget,\n  width, widths, x, xHeight, x1, x2, xChannelSelector, xlinkActuate,\n  xlinkArcrole, xlinkHref, xlinkRole, xlinkShow, xlinkTitle, xlinkType,\n  xmlBase, xmlLang, xmlSpace, y, y1, y2, yChannelSelector, z, zoomAndPan\n\n# Presentation attributes\n@docs alignmentBaseline, baselineShift, clipPath, clipRule, clip,\n  colorInterpolationFilters, colorInterpolation, colorProfile, colorRendering,\n  color, cursor, direction, display, dominantBaseline, enableBackground,\n  fillOpacity, fillRule, fill, filter, floodColor, floodOpacity, fontFamily,\n  fontSizeAdjust, fontSize, fontStretch, fontStyle, fontVariant, fontWeight,\n  glyphOrientationHorizontal, glyphOrientationVertical, imageRendering,\n  kerning, letterSpacing, lightingColor, markerEnd, markerMid, markerStart,\n  mask, opacity, overflow, pointerEvents, shapeRendering, stopColor,\n  stopOpacity, strokeDasharray, strokeDashoffset, strokeLinecap,\n  strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, stroke,\n  textAnchor, textDecoration, textRendering, unicodeBidi, visibility,\n  wordSpacing, writingMode\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accelerate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "accentHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "accumulate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "additive",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "alignmentBaseline",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "allowReorder",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "alphabetic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "amplitude",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "arabicForm",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "ascent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "attributeName",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "attributeType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "autoReverse",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "azimuth",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "baseFrequency",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "baseProfile",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "baselineShift",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "bbox",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "begin",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "bias",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "by",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "calcMode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "capHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "class",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clip",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clipPath",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clipPathUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clipRule",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "color",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorInterpolation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorInterpolationFilters",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorProfile",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "contentScriptType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "contentStyleType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "cursor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "cx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "cy",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "d",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "decelerate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "descent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "diffuseConstant",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "direction",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "display",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "divisor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dominantBaseline",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dur",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dy",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "edgeMode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "elevation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "enableBackground",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "end",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "exponent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "externalResourcesRequired",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fill",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fillOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fillRule",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "filterRes",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "filterUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "floodColor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "floodOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontFamily",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontSize",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontSizeAdjust",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontStretch",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontStyle",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontVariant",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontWeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "format",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "from",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fy",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "g1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "g2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphName",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphOrientationHorizontal",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphOrientationVertical",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphRef",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "gradientTransform",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "gradientUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "hanging",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "height",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "horizAdvX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "horizOriginX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "horizOriginY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "id",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "ideographic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "imageRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "in2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "in_",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "intercept",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k3",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k4",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "kernelMatrix",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "kernelUnitLength",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "kerning",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "keyPoints",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "keySplines",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "keyTimes",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lang",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lengthAdjust",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "letterSpacing",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lightingColor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "limitingConeAngle",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "local",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerEnd",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerMid",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerStart",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerWidth",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "mask",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "maskContentUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "maskUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "mathematical",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "max",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "media",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "method",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "min",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "mode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "name",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "numOctaves",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "offset",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "opacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "operator",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "order",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "orient",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "orientation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "origin",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "overflow",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "overlinePosition",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "overlineThickness",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "panose1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "path",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pathLength",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "patternContentUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "patternTransform",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "patternUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointOrder",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointerEvents",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "points",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointsAtX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointsAtY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointsAtZ",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "preserveAlpha",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "preserveAspectRatio",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "primitiveUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "r",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "radius",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "refX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "refY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "renderingIntent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "repeatCount",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "repeatDur",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "requiredExtensions",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "requiredFeatures",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "restart",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "result",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "rotate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "rx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "ry",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "scale",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "seed",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "shapeRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "slope",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "spacing",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "specularConstant",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "specularExponent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "speed",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "spreadMethod",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "startOffset",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stdDeviation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stemh",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stemv",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stitchTiles",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stopColor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stopOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strikethroughPosition",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strikethroughThickness",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "string",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stroke",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeDasharray",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeDashoffset",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeLinecap",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeLinejoin",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeMiterlimit",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeWidth",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "surfaceScale",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "systemLanguage",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "tableValues",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "target",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "targetX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "targetY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textAnchor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textDecoration",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textLength",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "title",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "to",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "transform",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "type_",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "u1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "u2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "underlinePosition",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "underlineThickness",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unicode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unicodeBidi",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unicodeRange",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unitsPerEm",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vAlphabetic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vHanging",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vIdeographic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vMathematical",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "values",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "version",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vertAdvY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vertOriginX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vertOriginY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "viewBox",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "viewTarget",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "visibility",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "width",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "widths",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "wordSpacing",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "writingMode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "x",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "x1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "x2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xChannelSelector",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkActuate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkArcrole",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkHref",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkRole",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkShow",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkTitle",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xmlBase",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xmlLang",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xmlSpace",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "y",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "y1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "y2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "yChannelSelector",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "z",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "zoomAndPan",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Svg.Keyed",
        "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This\nmakes it possible for the underlying diffing algorithm to reuse nodes more\nefficiently.\n\n# Keyed Nodes\n@docs node\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "node",
            "comment": " Works just like `Svg.node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n",
            "type": "String -> List (Svg.Attribute msg) -> List ( String, Svg.Svg msg ) -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Svg",
        "comment": "\n\n# SVG Nodes\n@docs Svg, Attribute, text, node, map\n\n# HTML Embedding\n@docs svg, foreignObject\n\n# Graphics elements\n@docs circle, ellipse, image, line, path, polygon, polyline, rect, use\n\n# Animation elements\n@docs animate, animateColor, animateMotion, animateTransform, mpath, set\n\n# Descriptive elements\n@docs desc, metadata, title\n\n# Containers\n@docs a, defs, g, marker, mask, pattern, switch, symbol\n\n# Text\n@docs altGlyph, altGlyphDef, altGlyphItem, glyph, glyphRef, textPath, text_,\n  tref, tspan\n\n# Fonts\n@docs font\n\n# Gradients\n@docs linearGradient, radialGradient, stop\n\n# Filters\n@docs feBlend, feColorMatrix, feComponentTransfer, feComposite,\n  feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feFlood, feFuncA,\n  feFuncB, feFuncG, feFuncR, feGaussianBlur, feImage, feMerge, feMergeNode,\n  feMorphology, feOffset, feSpecularLighting, feTile, feTurbulence\n\n# Light source elements\n@docs feDistantLight, fePointLight, feSpotLight\n\n# Miscellaneous\n@docs clipPath, colorProfile, cursor, filter, script, style, view\n",
        "aliases": [
          {
            "name": "Attribute",
            "comment": " Set attributes on your `Svg`.\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Property msg"
          },
          {
            "name": "Svg",
            "comment": " The core building block to create SVG. This library is filled with helper\nfunctions to create these `Svg` values.\n\nThis is backed by `VirtualDom.Node` in `evancz/virtual-dom`, but you do not\nneed to know any details about that to use this library!\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Node msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " The SVG Anchor Element defines a hyperlink.\n",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "altGlyph",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "altGlyphDef",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "altGlyphItem",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animate",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animateColor",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animateMotion",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animateTransform",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "circle",
            "comment": " The circle element is an SVG basic shape, used to create circles based on\na center point and a radius.\n\n    circle [ cx \"60\", cy \"60\", r \"50\" ] []\n",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "clipPath",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "colorProfile",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "cursor",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "defs",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "desc",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "ellipse",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feBlend",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feColorMatrix",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feComponentTransfer",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feComposite",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feConvolveMatrix",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feDiffuseLighting",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feDisplacementMap",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feDistantLight",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFlood",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncA",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncB",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncG",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncR",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feGaussianBlur",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feImage",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feMerge",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feMergeNode",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feMorphology",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feOffset",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fePointLight",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feSpecularLighting",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feSpotLight",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feTile",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feTurbulence",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "font",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "foreignObject",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Html.Html msg) -> Svg.Svg msg"
          },
          {
            "name": "g",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "glyph",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "glyphRef",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "image",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "line",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "linearGradient",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "map",
            "comment": " Transform the messages produced by some `Svg`.\n",
            "type": "(a -> msg) -> Svg.Svg a -> Svg.Svg msg"
          },
          {
            "name": "marker",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "mask",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "metadata",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "mpath",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "node",
            "comment": " Create any SVG node. To create a `<rect>` helper function, you would write:\n\n    rect : List (Attribute msg) -> List (Svg msg) -> Svg msg\n    rect attributes children =\n        node \"rect\" attributes children\n\nYou should always be able to use the helper functions already defined in this\nlibrary though!\n",
            "type": "String -> List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "path",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "pattern",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "polygon",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "polyline",
            "comment": " The polyline element is an SVG basic shape, used to create a series of\nstraight lines connecting several points. Typically a polyline is used to\ncreate open shapes.\n\n    polyline [ fill \"none\", stroke \"black\", points \"20,100 40,60 70,80 100,20\" ] []\n",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "radialGradient",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "rect",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "script",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "set",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "svg",
            "comment": " The root `<svg>` node for any SVG scene. This example shows a scene\ncontaining a rounded rectangle:\n\n    import Html\n    import Svg exposing (..)\n    import Svg.Attributes exposing (..)\n\n    roundRect : Html.Html msg\n    roundRect =\n        svg\n          [ width \"120\", height \"120\", viewBox \"0 0 120 120\" ]\n          [ rect [ x \"10\", y \"10\", width \"100\", height \"100\", rx \"15\", ry \"15\" ] [] ]\n",
            "type": "List (Html.Attribute msg) -> List (Svg.Svg msg) -> Html.Html msg"
          },
          {
            "name": "switch",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "symbol",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "text",
            "comment": " A simple text node, no tags at all.\n\nWarning: not to be confused with `text_` which produces the SVG `<text>` tag!\n",
            "type": "String -> Svg.Svg msg"
          },
          {
            "name": "textPath",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "text_",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "title",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "tref",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "tspan",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "use",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "view",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/trampoline",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Trampoline",
        "comment": " A [trampoline](http://en.wikipedia.org/wiki/Tail-recursive_function#Through_trampolining)\nmakes it possible to recursively call a function without growing the stack.\n\nPopular JavaScript implementations do not perform any tail-call elimination, so\nrecursive functions can cause a stack overflow if they go too deep. Trampolines\npermit unbounded recursion despite limitations in JavaScript.\n\nThis strategy may create many intermediate closures, which is very expensive in\nJavaScript, so use this library only when it is essential that you recurse deeply.\n\n# Trampolines\n@docs Trampoline, done, jump, evaluate\n",
        "aliases": [],
        "types": [
          {
            "name": "Trampoline",
            "comment": " A computation that has been broken up into a bunch of smaller chunks. The\nprogrammer explicitly adds \"pause points\" so each chunk of computation can be\nrun without making the stack any deeper.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "done",
            "comment": " When you do not want a computation to go through the trampoline.\n",
            "type": "a -> Trampoline.Trampoline a"
          },
          {
            "name": "evaluate",
            "comment": " Evaluate a trampolined value in constant space. ",
            "type": "Trampoline.Trampoline a -> a"
          },
          {
            "name": "jump",
            "comment": " When you want a computation to be delayed so that it is handled by the\ntrampoline.\n",
            "type": "(() -> Trampoline.Trampoline a) -> Trampoline.Trampoline a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/virtual-dom",
    "version": "2.0.0",
    "docs": [
      {
        "name": "VirtualDom",
        "comment": " API to the core diffing algorithm. Can serve as a foundation for libraries\nthat expose more helper functions for HTML or SVG.\n\n# Create\n@docs Node, text, node\n\n# Declare Properties and Attributes\n@docs Property, property, attribute, attributeNS, mapProperty\n\n# Styles\n@docs style\n\n# Events\n@docs on, onWithOptions, Options, defaultOptions\n\n# Routing Messages\n@docs map\n\n# Optimizations\n@docs lazy, lazy2, lazy3, keyedNode\n\n# Programs\n@docs program, programWithFlags\n\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
            "args": [],
            "type": "{ stopPropagation : Bool, preventDefault : Bool }"
          }
        ],
        "types": [
          {
            "name": "Node",
            "comment": " An immutable chunk of data representing a DOM node. This can be HTML or SVG.\n",
            "args": [
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Property",
            "comment": " When using HTML and JS, there are two ways to specify parts of a DOM node.\n\n  1. Attributes &mdash; You can set things in HTML itself. So the `class`\n     in `<div class=\"greeting\"></div>` is called an *attribute*.\n\n  2. Properties &mdash; You can also set things in JS. So the `className`\n     in `div.className = 'greeting'` is called a *property*.\n\nSo the `class` attribute corresponds to the `className` property. At first\nglance, perhaps this distinction is defensible, but it gets much crazier.\n*There is not always a one-to-one mapping between attributes and properties!*\nYes, that is a true fact. Sometimes an attribute exists, but there is no\ncorresponding property. Sometimes changing an attribute does not change the\nunderlying property. For example, as of this writing, the `webkit-playsinline`\nattribute can be used in HTML, but there is no corresponding property!\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "attribute",
            "comment": " Create arbitrary HTML *attributes*. Maps onto JavaScript’s `setAttribute`\nfunction under the hood.\n\n    greeting : Html\n    greeting =\n        node \"div\" [ attribute \"class\" \"greeting\" ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *attribute* name, so we use `class` as it would\nbe in HTML, not `className` as it would appear in JS.\n",
            "type": "String -> String -> VirtualDom.Property msg"
          },
          {
            "name": "attributeNS",
            "comment": " Would you believe that there is another way to do this?! This corresponds\nto JavaScript's `setAttributeNS` function under the hood. It is doing pretty\nmuch the same thing as `attribute` but you are able to have \"namespaced\"\nattributes. This is used in some SVG stuff at least.\n",
            "type": "String -> String -> String -> VirtualDom.Property msg"
          },
          {
            "name": "defaultOptions",
            "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n",
            "type": "VirtualDom.Options"
          },
          {
            "name": "keyedNode",
            "comment": " Works just like `node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n",
            "type": "String -> List (VirtualDom.Property msg) -> List ( String, VirtualDom.Node msg ) -> VirtualDom.Node msg"
          },
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> VirtualDom.Node msg) -> a -> VirtualDom.Node msg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> VirtualDom.Node msg) -> a -> b -> VirtualDom.Node msg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> VirtualDom.Node msg) -> a -> b -> c -> VirtualDom.Node msg"
          },
          {
            "name": "map",
            "comment": " This function is useful when nesting components with [the Elm\nArchitecture](https://github.com/evancz/elm-architecture-tutorial/). It lets\nyou transform the messages produced by a subtree.\n\nSay you have a node named `button` that produces `()` values when it is\nclicked. To get your model updating properly, you will probably want to tag\nthis `()` value like this:\n\n    type Msg = Click | ...\n\n    update msg model =\n      case msg of\n        Click ->\n          ...\n\n    view model =\n      map (\\_ -> Click) button\n\nSo now all the events produced by `button` will be transformed to be of type\n`Msg` so they can be handled by your update function!\n",
            "type": "(a -> msg) -> VirtualDom.Node a -> VirtualDom.Node msg"
          },
          {
            "name": "mapProperty",
            "comment": " Transform the messages produced by a `Property`.\n",
            "type": "(a -> b) -> VirtualDom.Property a -> VirtualDom.Property b"
          },
          {
            "name": "node",
            "comment": " Create a DOM node with a tag name, a list of HTML properties that can\ninclude styles and event listeners, a list of CSS properties like `color`, and\na list of child nodes.\n\n    import Json.Encode as Json\n\n    hello : Node msg\n    hello =\n      node \"div\" [] [ text \"Hello!\" ]\n\n    greeting : Node msg\n    greeting =\n      node \"div\"\n        [ property \"id\" (Json.string \"greeting\") ]\n        [ text \"Hello!\" ]\n",
            "type": "String -> List (VirtualDom.Property msg) -> List (VirtualDom.Node msg) -> VirtualDom.Node msg"
          },
          {
            "name": "on",
            "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : msg -> Property msg\n    onClick msg =\n      on \"click\" (Json.succeed msg)\n\nYou first specify the name of the event in the same format as with JavaScript’s\n`addEventListener`. Next you give a JSON decoder, which lets you pull\ninformation out of the event object. If the decoder succeeds, it will produce\na message and route it to your `update` function.\n",
            "type": "String -> Json.Decode.Decoder msg -> VirtualDom.Property msg"
          },
          {
            "name": "onWithOptions",
            "comment": " Same as `on` but you can set a few options.\n",
            "type": "String -> VirtualDom.Options -> Json.Decode.Decoder msg -> VirtualDom.Property msg"
          },
          {
            "name": "program",
            "comment": " Check out the docs for [`Html.App.program`][prog].\nIt works exactly the same way.\n\n[prog]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App#program\n",
            "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> VirtualDom.Node msg } -> Platform.Program Basics.Never model msg"
          },
          {
            "name": "programWithFlags",
            "comment": " Check out the docs for [`Html.App.programWithFlags`][prog].\nIt works exactly the same way.\n\n[prog]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App#programWithFlags\n",
            "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> VirtualDom.Node msg } -> Platform.Program flags model msg"
          },
          {
            "name": "property",
            "comment": " Create arbitrary *properties*.\n\n    import JavaScript.Encode as Json\n\n    greeting : Html\n    greeting =\n        node \"div\" [ property \"className\" (Json.string \"greeting\") ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *property* name, so we use `className` as it\nwould be in JavaScript, not `class` as it would appear in HTML.\n",
            "type": "String -> Json.Decode.Value -> VirtualDom.Property msg"
          },
          {
            "name": "style",
            "comment": " Specify a list of styles.\n\n    myStyle : Property msg\n    myStyle =\n      style\n        [ (\"backgroundColor\", \"red\")\n        , (\"height\", \"90px\")\n        , (\"width\", \"100%\")\n        ]\n\n    greeting : Node msg\n    greeting =\n      node \"div\" [ myStyle ] [ text \"Hello!\" ]\n\n",
            "type": "List ( String, String ) -> VirtualDom.Property msg"
          },
          {
            "name": "text",
            "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n    text \"Hello World!\"\n",
            "type": "String -> VirtualDom.Node msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/websocket",
    "version": "1.0.2",
    "docs": [
      {
        "name": "WebSocket",
        "comment": " Web sockets make it cheaper to talk to your servers.\n\nConnecting to a server takes some time, so with web sockets, you make that\nconnection once and then keep using. The major benefits of this are:\n\n  1. It faster to send messages. No need to do a bunch of work for every single\n  message.\n\n  2. The server can push messages to you. With normal HTTP you would have to\n  keep *asking* for changes, but a web socket, the server can talk to you\n  whenever it wants. This means there is less unnecessary network traffic.\n\nThe API here attempts to cover the typical usage scenarios, but if you need\nmany unique connections to the same endpoint, you need a different library.\n\n# Web Sockets\n@docs listen, keepAlive, send\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "keepAlive",
            "comment": " Keep a connection alive, but do not report any messages. This is useful\nfor keeping a connection open for when you only need to `send` messages. So\nyou might say something like this:\n\n    subscriptions model =\n      keepAlive \"ws://echo.websocket.org\"\n\n**Note:** If the connection goes down, the effect manager tries to reconnect\nwith an exponential backoff strategy. Any messages you try to `send` while the\nconnection is down are queued and will be sent as soon as possible.\n",
            "type": "String -> Platform.Sub.Sub msg"
          },
          {
            "name": "listen",
            "comment": " Subscribe to any incoming messages on a websocket. You might say something\nlike this:\n\n    type Msg = Echo String | ...\n\n    subscriptions model =\n      listen \"ws://echo.websocket.org\" Echo\n\n**Note:** If the connection goes down, the effect manager tries to reconnect\nwith an exponential backoff strategy. Any messages you try to `send` while the\nconnection is down are queued and will be sent as soon as possible.\n",
            "type": "String -> (String -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "send",
            "comment": " Send a message to a particular address. You might say something like this:\n\n    send \"ws://echo.websocket.org\" \"Hello!\"\n\n**Note:** It is important that you are also subscribed to this address with\n`listen` or `keepAlive`. If you are not, the web socket will be created to\nsend one message and then closed. Not good!\n",
            "type": "String -> String -> Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "WebSocket.LowLevel",
        "comment": " Low-level bindings to [the JavaScript API for web sockets][ws]. This is\nuseful primarily for making effect modules like [WebSocket](WebSocket). So\nif you happen to be the creator of Elixir’s Phoenix framework, and you want\nit to be super easy to use channels, this module will help you make a really\nnice subscription-based API. If you are someone else, you probably do not want\nthese things.\n\n[ws]: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n\n# WebSockets\n@docs WebSocket\n\n# Using WebSockets\n@docs open, Settings, send, close, closeWith, bytesQueued\n\n# Errors\n@docs BadOpen, BadClose, BadSend\n\n",
        "aliases": [
          {
            "name": "Settings",
            "comment": " The settings describe how a `WebSocket` works as long as it is still open.\n\nThe `onMessage` function gives you access to (1) the `WebSocket` itself so you\ncan use functions like `send` and `close` and (2) the `Message` from the server\nso you can decide what to do next.\n\nThe `onClose` function tells you everything about why the `WebSocket` is\nclosing. There are a ton of codes with standardized meanings, so learn more\nabout them [here](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent).\n\nYou will typically want to set up a channel before opening a WebSocket. That\nway the `onMessage` and `onClose` can communicate with the other parts of your\nprogram. **Ideally this is handled by the effect library you are using though.\nMost people should not be working with this stuff directly.**\n",
            "args": [],
            "type": "{ onMessage : WebSocket.LowLevel.WebSocket -> String -> Task.Task Basics.Never () , onClose : { code : Int, reason : String, wasClean : Bool } -> Task.Task Basics.Never () }"
          }
        ],
        "types": [
          {
            "name": "BadClose",
            "comment": " It is possible to provide invalid codes or reasons for closing a\nconnection. The connection will still be closed, but the `closeWith` function\nwill give you `BadCode` if an invalid code was specified or `BadReason` if your\nreason is too long or contains unpaired surrogates.\n",
            "args": [],
            "cases": [
              [
                "BadCode",
                []
              ],
              [
                "BadReason",
                []
              ]
            ]
          },
          {
            "name": "BadOpen",
            "comment": " Opening the websocket went wrong because:\n\n  1. Maybe you are on an `https://` domain trying to use an `ws://` websocket\n  instead of `wss://`.\n\n  2. You gave an invalid URL or something crazy.\n\n",
            "args": [],
            "cases": [
              [
                "BadSecurity",
                []
              ],
              [
                "BadArgs",
                []
              ]
            ]
          },
          {
            "name": "BadSend",
            "comment": " There are a few ways a send can go wrong. The send function will ultimately\ngive you a `NotOpen` if the connection is no longer open or a `BadString` if\nthe string has unpaired surrogates (badly formatted UTF-16).\n",
            "args": [],
            "cases": [
              [
                "NotOpen",
                []
              ],
              [
                "BadString",
                []
              ]
            ]
          },
          {
            "name": "WebSocket",
            "comment": " A value representing an open connection to a server. Normally every single\nHTTP request must establish a connection with the server, but here we just set\nit up once and keep using it. This means it is faster to send messages.\n\nThere is a request/response pattern for all HTTP requests. Client asks for\nsomething, server gives some response. With websockets, you can drive messages\nfrom the server instead.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bytesQueued",
            "comment": " The number of bytes of data queued by `send` but not yet transmitted to the\nnetwork. If you have been sending data to a closed connection, it will just\npile up on the queue endlessly.\n",
            "type": "WebSocket.LowLevel.WebSocket -> Task.Task x Int"
          },
          {
            "name": "close",
            "comment": " Close a `WebSocket`. If the connection is already closed, it does nothing.\n",
            "type": "WebSocket.LowLevel.WebSocket -> Task.Task x ()"
          },
          {
            "name": "closeWith",
            "comment": " Closes the `WebSocket`. If the connection is already closed, it does nothing.\n\nIn addition to providing the `WebSocket` you want to close, you must provide:\n\n  1. A status code explaining why the connection is being closed. The default\n  value is 1000, indicating indicates a normal \"transaction complete\" closure.\n  There are a ton of different status codes though. See them all\n  [here](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent).\n\n  2. A human-readable string explaining why the connection is closing. This\n  string must be no longer than 123 bytes of UTF-8 text (not characters).\n\n",
            "type": "Int -> String -> WebSocket.LowLevel.WebSocket -> Task.Task x (Maybe.Maybe WebSocket.LowLevel.BadClose)"
          },
          {
            "name": "open",
            "comment": " Attempt to open a connection to a particular URL.\n",
            "type": "String -> WebSocket.LowLevel.Settings -> Task.Task WebSocket.LowLevel.BadOpen WebSocket.LowLevel.WebSocket"
          },
          {
            "name": "send",
            "comment": " Send a string over the `WebSocket` to the server. If there is any problem\nwith the send, you will get some data about it as the result of running this\ntask.\n",
            "type": "WebSocket.LowLevel.WebSocket -> String -> Task.Task x (Maybe.Maybe WebSocket.LowLevel.BadSend)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "elm-lang/window",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Window",
        "comment": " Your application lives in some sort of window. This library helps you\nfigure out how big that window is.\n\n# Window Size\n@docs Size, size, width, height, resizes\n\n",
        "aliases": [
          {
            "name": "Size",
            "comment": " The size of the window in pixels.\n",
            "args": [],
            "type": "{ width : Int, height : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "height",
            "comment": " Get the current window height.\n",
            "type": "Task.Task x Int"
          },
          {
            "name": "resizes",
            "comment": " Subscribe to any changes in window size.\n",
            "type": "(Window.Size -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "size",
            "comment": " Get the current window size.\n",
            "type": "Task.Task x Window.Size"
          },
          {
            "name": "width",
            "comment": " Get the current window width.\n",
            "type": "Task.Task x Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-color-extra",
    "version": "3.2.3",
    "docs": [
      {
        "name": "Color.Gradient",
        "comment": "\n# Gradient\n@docs GradientStop, Gradient, Palette, gradient, gradientFromStops\n",
        "aliases": [
          {
            "name": "Gradient",
            "comment": " ",
            "args": [],
            "type": "List Color.Gradient.GradientStop"
          },
          {
            "name": "GradientStop",
            "comment": " A color and a stop value that indicates where the color appears in a gradient.\n The stop value must be between `0` and `1`.\n",
            "args": [],
            "type": "( Float, Color.Color )"
          },
          {
            "name": "Palette",
            "comment": " Create a new gradient `Palette` from a given `Palette`, with a given size.\n",
            "args": [],
            "type": "List Color.Color"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "gradient",
            "comment": " Create a new `Palette`  with gradient colors from a given `Palette`,\n with a given size.\n\n    p1 : Palette\n    p1 =\n      [ rgb 200 0 200\n      , rgb 0 100 100\n      , rgb 100 0 0\n      ]\n    gradient RGB p1 5 -- [RGBA 200 0 200 1,RGBA 100 50 150 1,RGBA 0 100 100 1,RGBA 50 50 50 1,RGBA 100 0 0 1]\n",
            "type": "Color.Interpolate.Space -> Color.Gradient.Palette -> Int -> Color.Gradient.Palette"
          },
          {
            "name": "gradientFromStops",
            "comment": " Create a new `Palette`  with gradient colors from a given `Gradient`,\n with a given size.\n\n    g : Gradient\n    g =\n      [ (0, rgb 200 0 200)\n      , (0.25, rgb 0 100 100)\n      , (1, rgb 150 175 160)\n      ]\n    gradientFromStops RGB g 5 -- [RGBA 200 0 200 1,RGBA 0 100 100 1,RGBA 50 125 120 1,RGBA 100 150 140 1,RGBA 150 175 160 1]\n",
            "type": "Color.Interpolate.Space -> Color.Gradient.Gradient -> Int -> Color.Gradient.Palette"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Color.Interpolate",
        "comment": "\n# Interpolate\nInterpolate between two colors\n\n@docs Space, interpolate\n",
        "aliases": [],
        "types": [
          {
            "name": "Space",
            "comment": " The color space that is used for the interpolation\n",
            "args": [],
            "cases": [
              [
                "RGB",
                []
              ],
              [
                "HSL",
                []
              ],
              [
                "LAB",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "interpolate",
            "comment": " Linear interpolation of two colors by a factor between `0` and `1`.\n",
            "type": "Color.Interpolate.Space -> Color.Color -> Color.Color -> Float -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Color.Manipulate",
        "comment": " A library for creating and manipulating colors.\n\n\n# Color adjustment\n@docs darken, lighten, saturate, desaturate, rotateHue, fadeIn, fadeOut, grayscale, scaleHsl, scaleRgb, mix, weightedMix\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "darken",
            "comment": " Decrease the lightning of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "desaturate",
            "comment": " Decrease the saturation of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeIn",
            "comment": " Increase the opacity of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeOut",
            "comment": " Decrease the opacity of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Convert the color to a greyscale version, aka set saturation to 0\n",
            "type": "Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": " Increase the lightning of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "mix",
            "comment": " Mixes two colors together.  This is the same as calling `weightedMix` with a weight of 0.5.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "rotateHue",
            "comment": " Change the hue of a color. The angle value must be in degrees\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "saturate",
            "comment": " Increase the saturation of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "scaleHsl",
            "comment": " Fluidly scale saturation, lightness and alpha channel.\n\nThat means that lightening an already-light color with `scaleHsl` won’t change the lightness much, but lightening\na dark color by the same amount will change it more dramatically.\n\nFor example, the lightness of a color can be anywhere between 0 and 1.0. If `scaleHsl (0, 0.4, 0) color` is called,\nthe resulting color’s lightness will be 40% of the way between its original lightness and 1.0. If\n`scaleHsl (0, -0.4, 0) color` is called instead, the lightness will be 40% of the way between the original\nand 0.\n\nThe values of the supplied tuple scale saturation, lightness, and opacity, respectively, and have a valid range of\n-1.0 to 1.0.\n\nThis function is inspired by the Sass function [scale-color](http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method).\n",
            "type": "( Float, Float, Float ) -> Color.Color -> Color.Color"
          },
          {
            "name": "scaleRgb",
            "comment": " Fluidly scale red, green, blue, and alpha channels.\n\nThat means that reddening a already-red color with `scaleRgb` won’t change the redness much, but reddening a color\nwith little or no red by the same amount will change it more dramatically.\n\nFor example, the redness of a color can be anywhere between 0 and 255. If `scaleRgb (0.4, 0, 0, 0) color` is called,\nthe resulting color’s redness will be 40% of the way between its original redness and 255. If\n`scaleRgb (-0.4, 0, 0, 0) color` is called instead, the redness will be 40% of the way between the original\nand 0.\n\nThe values of the supplied tuple scale red, green, blue, and alpha channels, respectively, and have a valid range of\n-1.0 to 1.0.\n\nThis function is inspired by the Sass function [scale-color](http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method).\n",
            "type": "( Float, Float, Float, Float ) -> Color.Color -> Color.Color"
          },
          {
            "name": "weightedMix",
            "comment": " Mixes two colors together.\n\nThis function takes the average of each of the RGB components, weighted by a provided value between 0 and 1.0. The\nopacity of the colors is also considered when weighting the components.\n\nThe weight specifies the amount of the first color that should be included in the returned color. For example, a weight\nof 0.5 means that half the first color and half the second color should be used. A weight of 0.25 means that a quarter\nof the first color and three quarters of the second color should be used.\n\nThis function uses the same algorithm as the [mix](http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method) function in Sass.\n",
            "type": "Color.Color -> Color.Color -> Float -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Color.Blending",
        "comment": "\n# Blending\nBased on the [Compositing and Blending Level 1](https://www.w3.org/TR/compositing-1/#blending)\n\n@docs multiply, screen, overlay, difference, exclusion, hardlight, softlight, colorBurn, colorDodge, lighten, darken\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "colorBurn",
            "comment": "\nDarkens the backdrop color to reflect the source color.\nPainting with white produces no change.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "colorDodge",
            "comment": "\nBrightens the backdrop color to reflect the source color.\nPainting with black produces no changes.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "darken",
            "comment": "\nSelects the darker of the backdrop and source colors.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "difference",
            "comment": "\nSubtracts the darker of the two constituent colors from the lighter color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "exclusion",
            "comment": "\nProduces an effect similar to that of the Difference mode but lower in contrast.\nPainting with white inverts the backdrop color; painting with black produces no change\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "hardlight",
            "comment": "\nMultiplies or screens the colors, depending on the source color value.\nThe effect is similar to shining a harsh spotlight on the backdrop.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": "\nSelects the lighter of the backdrop and source colors.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "multiply",
            "comment": "\nThe source color is multiplied by the destination color and replaces the destination.\n\nThe resultant color is always at least as dark as either the source or destination color.\nMultiplying any color with black results in black.\nMultiplying any color with white preserves the original color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "overlay",
            "comment": "\nMultiplies or screens the colors, depending on the backdrop color value.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "screen",
            "comment": "\nMultiplies the complements of the backdrop and source color values,\n then complements the result.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "softlight",
            "comment": "\nDarkens or lightens the colors, depending on the source color value.\nThe effect is similar to shining a diffused spotlight on the backdrop.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Color.Convert",
        "comment": "\n#Convert\nConvert colors to differnt string formats and hexadecimal strings to colors.\n\n@docs colorToCssRgb, colorToCssRgba, colorToCssHsl, colorToCssHsla, colorToHex, hexToColor, colorToLab, labToColor\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "colorToCssHsl",
            "comment": "\nConverts a color to an css hsl string.\n\n    colorToCssHsl (hsl 1 1 0.5) -- \"hsl(1, 1, 0.5)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssHsla",
            "comment": "\nConverts a color to an css hsla string.\n\n    colorToCssHsla (hsla 1 1 0.5 1) -- \"hsla(56, 100%, 50%, 1)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssRgb",
            "comment": "\nConverts a color to an css rgb string.\n\n    colorToCssRgb (rgb 255 0 0) -- \"rgb(255, 0, 0)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssRgba",
            "comment": "\nConverts a color to an css rgba string.\n\n    colorToCssRgba (rgba 255 0 0 0.5) -- \"rgba(255, 0, 0, 0.5)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToHex",
            "comment": "\nConverts a color to a hexadecimal string.\n\n    colorToHex (rgb 255 0 0) -- \"#ff0000\"\n\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToLab",
            "comment": " Convert color to CIELAB- color space\n",
            "type": "Color.Color -> { l : Float, a : Float, b : Float }"
          },
          {
            "name": "hexToColor",
            "comment": "\nConverts a string to `Maybe` of color.\n\n    hexToColor \"#ff0000\" -- \"Just RGB 255 0 0\"\n    hexToColor \"ff0000\" -- \"Just RGB 255 0 0\"\n    hexToColor \"1234\" -- \"Nothing\"\n\n",
            "type": "String -> Maybe.Maybe Color.Color"
          },
          {
            "name": "labToColor",
            "comment": " Convert a color in CIELAB- color space to Elm `Color`\n",
            "type": "{ l : Float, a : Float, b : Float } -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-simplex-noise",
    "version": "1.2.3",
    "docs": [
      {
        "name": "Noise",
        "comment": " This is a library to generate simplex noise in Elm.\n\nThe code is a port of the [simplex noise JavaScript version](https:--github.com/jwagner/simplex-noise.js) by Jonas Wagner.\n\n## Example usage\n\n    (perm, newSeed) = permutationTable (initialSeed 42) -- generate the permutation table\n    noiseValue = noise3d perm 1 1 1\n\n# Permutation tables\n@docs permutationTable, PermutationTable\n\n# Genarate noise\n@docs noise4d, noise3d, noise2d\n\n",
        "aliases": [
          {
            "name": "PermutationTable",
            "comment": "\nPermutation table that is needed to generate the noise value.\n",
            "args": [],
            "type": "{ perm : Array.Array Int, permMod12 : Array.Array Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "noise2d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x and y value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float"
          },
          {
            "name": "noise3d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x, y and z value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float -> Float"
          },
          {
            "name": "noise4d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x, y, z and w value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float -> Float -> Float"
          },
          {
            "name": "permutationTable",
            "comment": "\nGenrate the permutation tables that are needed to calculate the noise value.\nThe function takes a seed and returns the table and  a new seed.\n",
            "type": "Random.Seed -> ( Noise.PermutationTable, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-wallpaper",
    "version": "2.1.5",
    "docs": [
      {
        "name": "WallpaperGroup.Pattern",
        "comment": "\nCreates wallpaper group based pattern\n\n#create pattern\n@docs pattern\n@docs bounding\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bounding",
            "comment": "\n  get the bounding box for a specific pattern group\n\n",
            "type": "WallpaperGroup.Group.Group -> WallpaperGroup.Geom.BoundingBox.BoundingBox"
          },
          {
            "name": "pattern",
            "comment": "\n  Create pattern by passing a group the number of columns and rows and tiles.\n\n",
            "type": "WallpaperGroup.Group.Group -> Int -> Int -> List (List { x : Float, y : Float }) -> List (List (List { x : Float, y : Float }))"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "WallpaperGroup.Group",
        "comment": "\nThe predefined Groups according to\n[this](https://en.wikipedia.org/wiki/Wallpaper_group) Wikipedia entry\n\n@docs Group\n",
        "aliases": [],
        "types": [
          {
            "name": "Group",
            "comment": "\nCreate a pattern width the specific width and/or height.\nFor triangle shaped pattern only the width of the base line is needed.\n",
            "args": [],
            "cases": [
              [
                "P1",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Pm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Pg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Cm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2mg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2gg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "C2mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4mg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P3",
                [
                  "Float"
                ]
              ],
              [
                "P3m1",
                [
                  "Float"
                ]
              ],
              [
                "P31m",
                [
                  "Float"
                ]
              ],
              [
                "P6",
                [
                  "Float"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "WallpaperGroup.Geom.BoundingBox",
        "comment": "\nBounding box of a single pattern.\n\n@docs BoundingBox\n\n",
        "aliases": [],
        "types": [
          {
            "name": "BoundingBox",
            "comment": "\n  Bounding box can be a triangle oder a rect.\n\n",
            "args": [],
            "cases": [
              [
                "Triangle",
                [
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }"
                ]
              ],
              [
                "Rect",
                [
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "etaque/elm-response",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Response",
        "comment": "\nResponse utilities for Elm Architecture. Build responses from tasks, pipe them, map over.\n\n# Construct\n@docs Response, res, taskRes, withCmd, withTask, withNone\n\n# Transform\n@docs mapModel, mapCmd, mapBoth\n",
        "aliases": [
          {
            "name": "Response",
            "comment": " A response is an updated model and some cmd.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "( model, Platform.Cmd.Cmd msg )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "mapBoth",
            "comment": " Map over model and cmd.\n",
            "type": "(m -> n) -> (a -> b) -> Response.Response m a -> Response.Response n b"
          },
          {
            "name": "mapCmd",
            "comment": " Map over cmd.\n",
            "type": "(a -> b) -> Response.Response m a -> Response.Response m b"
          },
          {
            "name": "mapModel",
            "comment": " Map over model.\n",
            "type": "(m -> n) -> Response.Response m a -> Response.Response n a"
          },
          {
            "name": "res",
            "comment": " Canonical usage: construct a result from model and cmd.\n",
            "type": "model -> Platform.Cmd.Cmd msg -> Response.Response model msg"
          },
          {
            "name": "taskRes",
            "comment": " Construct a response from a model and task.\n",
            "type": "model -> (Result.Result x a -> msg) -> Task.Task x a -> Response.Response model msg"
          },
          {
            "name": "withCmd",
            "comment": " Construct a result from model and cmd, flipped for piping:\n\n    { model | foo = bar }\n      |> withCmd someCmd\n",
            "type": "Platform.Cmd.Cmd a -> m -> Response.Response m a"
          },
          {
            "name": "withNone",
            "comment": " Construct a result from model without cmd, flipped for piping:\n\n    { model | foo = bar }\n      |> withNone\n",
            "type": "m -> Response.Response m a"
          },
          {
            "name": "withTask",
            "comment": " Construct a result from model and task, flipped for piping:\n\n    { model | foo = bar }\n      |> withTask someTask\n",
            "type": "(Result.Result x a -> msg) -> Task.Task x a -> model -> Response.Response model msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "evancz/elm-graphics",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Collage",
        "comment": " The collage API is for freeform graphics. You can move, rotate, scale, etc.\nall sorts of forms including lines, shapes, images, and elements.\n\nCollages use the same coordinate system you might see in an algebra or physics\nproblem. The origin (0,0) is at the center of the collage, not the top left\ncorner as in some other graphics libraries. Furthermore, the y-axis points up,\nso moving a form 10 units in the y-axis will move it up on screen.\n\n# Unstructured Graphics\n@docs collage, Form\n\n# Creating Forms\n@docs toForm, filled, textured, gradient, outlined, traced, text, outlinedText\n\n# Transforming Forms\n@docs move, moveX, moveY, scale, rotate, alpha\n\n# Grouping Forms\nGrouping forms makes it easier to write modular graphics code. You can create\na form that is a composite of many subforms. From there it is easy to transform\nit as a single unit.\n\n@docs group, groupTransform\n\n# Shapes\n@docs Shape, rect, oval, square, circle, ngon, polygon\n\n# Paths\n@docs Path, segment, path\n\n# Line Styles\n@docs solid, dashed, dotted, LineStyle, LineCap, LineJoin, defaultLine\n\n",
        "aliases": [
          {
            "name": "LineStyle",
            "comment": " All of the attributes of a line style. This lets you build up a line style\nhowever you want. You can also update existing line styles with record updates.\n",
            "args": [],
            "type": "{ color : Color.Color , width : Float , cap : Collage.LineCap , join : Collage.LineJoin , dashing : List Int , dashOffset : Int }"
          }
        ],
        "types": [
          {
            "name": "Form",
            "comment": " A visual `Form` has a shape and texture. This can be anything from a red\nsquare to a circle textured with stripes.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LineCap",
            "comment": " The shape of the ends of a line. ",
            "args": [],
            "cases": [
              [
                "Flat",
                []
              ],
              [
                "Round",
                []
              ],
              [
                "Padded",
                []
              ]
            ]
          },
          {
            "name": "LineJoin",
            "comment": " The shape of the &ldquo;joints&rdquo; of a line, where each line segment\nmeets. `Sharp` takes an argument to limit the length of the joint. This\ndefaults to 10.\n",
            "args": [],
            "cases": [
              [
                "Smooth",
                []
              ],
              [
                "Sharp",
                [
                  "Float"
                ]
              ],
              [
                "Clipped",
                []
              ]
            ]
          },
          {
            "name": "Path",
            "comment": " A 2D path. Paths are a sequence of points. They do not have a color.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Shape",
            "comment": " A 2D shape. Shapes are closed polygons. They do not have a color or\ntexture, that information can be filled in later.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "alpha",
            "comment": " Set the alpha of a `Form`. The default is 1, and 0 is totally transparent. ",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "circle",
            "comment": " A circle with a given radius. ",
            "type": "Float -> Collage.Shape"
          },
          {
            "name": "collage",
            "comment": " Create a collage with certain dimensions and content. It takes width and height\narguments to specify dimensions, and then a list of 2D forms to decribe the content.\n\nUnlike with `Element`s, these 2D forms can be moved and rotated however you like.\nThe forms are drawn in the order of the list, i.e., `collage w h [a, b]` will\ndraw `b` on top of `a`.\n",
            "type": "Int -> Int -> List Collage.Form -> Element.Element"
          },
          {
            "name": "dashed",
            "comment": " Create a dashed line style with a given color. Dashing equals `[8,4]`. ",
            "type": "Color.Color -> Collage.LineStyle"
          },
          {
            "name": "defaultLine",
            "comment": " The default line style, which is solid black with flat caps and sharp joints.\nYou can use record updates to build the line style you\nwant. For example, to make a thicker line, you could say:\n\n    { defaultLine | width = 10 }\n",
            "type": "Collage.LineStyle"
          },
          {
            "name": "dotted",
            "comment": " Create a dotted line style with a given color. Dashing equals `[3,3]`. ",
            "type": "Color.Color -> Collage.LineStyle"
          },
          {
            "name": "filled",
            "comment": " Create a filled in shape. ",
            "type": "Color.Color -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "gradient",
            "comment": " Fill a shape with a [gradient](http://package.elm-lang.org/packages/elm-lang/core/latest/Color#linear). ",
            "type": "Color.Gradient -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "group",
            "comment": " Flatten many forms into a single `Form`. This lets you move and rotate them\nas a single unit, making it possible to build small, modular components.\nForms will be drawn in the order that they are listed, as in `collage`.\n",
            "type": "List Collage.Form -> Collage.Form"
          },
          {
            "name": "groupTransform",
            "comment": " Flatten many forms into a single `Form` and then apply a matrix\ntransformation. Forms will be drawn in the order that they are listed, as in\n`collage`.\n",
            "type": "Transform.Transform -> List Collage.Form -> Collage.Form"
          },
          {
            "name": "move",
            "comment": " Move a form by the given amount (x, y). This is a relative translation so\n`(move (5,10) form)` would move `form` five pixels to the right and ten pixels up.\n",
            "type": "( Float, Float ) -> Collage.Form -> Collage.Form"
          },
          {
            "name": "moveX",
            "comment": " Move a shape in the x direction. This is relative so `(moveX 10 form)` moves\n`form` 10 pixels to the right.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "moveY",
            "comment": " Move a shape in the y direction. This is relative so `(moveY 10 form)` moves\n`form` upwards by 10 pixels.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "ngon",
            "comment": " A regular polygon with N sides. The first argument specifies the number\nof sides and the second is the radius. So to create a pentagon with radius\n30 you would say:\n\n    ngon 5 30\n",
            "type": "Int -> Float -> Collage.Shape"
          },
          {
            "name": "outlined",
            "comment": " Outline a shape with a given line style. ",
            "type": "Collage.LineStyle -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "outlinedText",
            "comment": " Create some outlined text. Since we are just outlining the text, the color\nis taken from the `LineStyle` attribute instead of the `Text`.\n",
            "type": "Collage.LineStyle -> Text.Text -> Collage.Form"
          },
          {
            "name": "oval",
            "comment": " An oval with a given width and height. ",
            "type": "Float -> Float -> Collage.Shape"
          },
          {
            "name": "path",
            "comment": " Create a path that follows a sequence of points. ",
            "type": "List ( Float, Float ) -> Collage.Path"
          },
          {
            "name": "polygon",
            "comment": " Create an arbitrary polygon by specifying its corners in order.\n`polygon` will automatically close all shapes, so the given list\nof points does not need to start and end with the same position.\n",
            "type": "List ( Float, Float ) -> Collage.Shape"
          },
          {
            "name": "rect",
            "comment": " A rectangle with a given width and height. ",
            "type": "Float -> Float -> Collage.Shape"
          },
          {
            "name": "rotate",
            "comment": " Rotate a form by a given angle. Rotate takes standard Elm angles (radians)\nand turns things counterclockwise. So to turn `form` 30&deg; to the left\nyou would say, `(rotate (degrees 30) form)`.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "scale",
            "comment": " Scale a form by a given factor. Scaling by 2 doubles both dimensions,\nand quadruples the area.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "segment",
            "comment": " Create a path along a given line segment. ",
            "type": "( Float, Float ) -> ( Float, Float ) -> Collage.Path"
          },
          {
            "name": "solid",
            "comment": " Create a solid line style with a given color. ",
            "type": "Color.Color -> Collage.LineStyle"
          },
          {
            "name": "square",
            "comment": " A square with a given edge length. ",
            "type": "Float -> Collage.Shape"
          },
          {
            "name": "text",
            "comment": " Create some text. Details like size and color are part of the `Text` value\nitself, so you can mix colors and sizes and fonts easily.\n",
            "type": "Text.Text -> Collage.Form"
          },
          {
            "name": "textured",
            "comment": " Create a textured shape. The texture is described by some url and is\ntiled to fill the entire shape.\n",
            "type": "String -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "toForm",
            "comment": " Turn any `Element` into a `Form`. This lets you use text, gifs, and video\nin your collage. This means you can move, rotate, and scale\nan `Element` however you want.\n",
            "type": "Element.Element -> Collage.Form"
          },
          {
            "name": "traced",
            "comment": " Trace a path with a given line style. ",
            "type": "Collage.LineStyle -> Collage.Path -> Collage.Form"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Element",
        "comment": " Graphical elements that snap together to build complex widgets and layouts.\nEach Element is a rectangle with a known width and height, making them easy to\ncombine and position.\n\n# Elements\n@docs Element, toHtml\n\n# Show Anything\n@docs show\n\n# Images\n@docs image, fittedImage, croppedImage, tiledImage\n\n# Text\nEach of the following functions places [`Text`](Text) into a box. The function\nyou use determines the alignment of the text.\n\n@docs leftAligned, rightAligned, centered, justified\n\n# Styling\n@docs width, height, size, color, opacity, link, tag\n\n# Inspection\n@docs widthOf, heightOf, sizeOf\n\n# Layout\n@docs flow, Direction, up, down, left, right, inward, outward\n\n## Layout Aliases\nThere are also some convenience functions for working\nwith `flow` in specific cases:\n\n@docs layers, above, below, beside\n\n# Positioning\n@docs empty, spacer, container\n\n## Specific Positions\n\n@docs Position, middle, midTop, midBottom, midLeft, midRight, topLeft,\n  topRight, bottomLeft, bottomRight\n\nIf you need more precision, you can create custom positions.\n\n@docs Pos, absolute, relative, middleAt, midTopAt, midBottomAt, midLeftAt,\n      midRightAt, topLeftAt, topRightAt, bottomLeftAt, bottomRightAt\n",
        "aliases": [],
        "types": [
          {
            "name": "Direction",
            "comment": " Represents a `flow` direction for a list of elements.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Element",
            "comment": " A graphical element that can be rendered on screen. Every element is a\nrectangle with a known width and height, so they can be composed and stacked\neasily.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Pos",
            "comment": " Specifies a distance from a particular location within a `container`, like\n“20 pixels right and up from the center”. You can use `absolute` or `relative`\nto specify a `Pos` in pixels or as a percentage of the container.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Position",
            "comment": " Specifies a position for an element within a `container`, like “the top\nleft corner”.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "above",
            "comment": " Stack elements vertically.\nTo put `a` above `b` you would say: ``a `above` b``\n",
            "type": "Element.Element -> Element.Element -> Element.Element"
          },
          {
            "name": "absolute",
            "comment": " A position specified in pixels. If you want something 10 pixels to the\nright of the middle of a container, you would write this:\n\n    middleAt (absolute 10) (absolute 0)\n\n",
            "type": "Int -> Element.Pos"
          },
          {
            "name": "below",
            "comment": " Stack elements vertically.\nTo put `a` below `b` you would say: ``a `below` b``\n",
            "type": "Element.Element -> Element.Element -> Element.Element"
          },
          {
            "name": "beside",
            "comment": " Put elements beside each other horizontally.\nTo put `a` beside `b` you would say: ``a `beside` b``\n",
            "type": "Element.Element -> Element.Element -> Element.Element"
          },
          {
            "name": "bottomLeft",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "bottomLeftAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "bottomRight",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "bottomRightAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "centered",
            "comment": " Center text in the text block. There is equal spacing on either side of a\nline of text.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "color",
            "comment": " Create an `Element` with a given background color. ",
            "type": "Color.Color -> Element.Element -> Element.Element"
          },
          {
            "name": "container",
            "comment": " Put an element in a container. This lets you position the element really\neasily, and there are tons of ways to set the `Position`.\nTo center `element` exactly in a 300-by-300 square you would say:\n\n    container 300 300 middle element\n\nBy setting the color of the container, you can create borders.\n",
            "type": "Int -> Int -> Element.Position -> Element.Element -> Element.Element"
          },
          {
            "name": "croppedImage",
            "comment": " Create a cropped image. Take a rectangle out of the picture starting\nat the given top left coordinate. If you have a 140-by-140 image,\nthe following will cut a 100-by-100 square out of the middle of it.\n\n    croppedImage (20,20) 100 100 \"yogi.jpg\"\n",
            "type": "( Int, Int ) -> Int -> Int -> String -> Element.Element"
          },
          {
            "name": "down",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "empty",
            "comment": " An Element that takes up no space. Good for things that appear conditionally:\n\n    flow down [ img1, if showMore then img2 else empty ]\n",
            "type": "Element.Element"
          },
          {
            "name": "fittedImage",
            "comment": " Create a fitted image given a width, height, and image source.\nThis will crop the picture to best fill the given dimensions.\n\n    fittedImage 100 100 \"yogi.jpg\"\n",
            "type": "Int -> Int -> String -> Element.Element"
          },
          {
            "name": "flow",
            "comment": " Have a list of elements flow in a particular direction.\nThe `Direction` starts from the first element in the list.\n\n    flow right [a,b,c]\n\n        +---+---+---+\n        | a | b | c |\n        +---+---+---+\n",
            "type": "Element.Direction -> List Element.Element -> Element.Element"
          },
          {
            "name": "height",
            "comment": " Create an `Element` with a given height. ",
            "type": "Int -> Element.Element -> Element.Element"
          },
          {
            "name": "heightOf",
            "comment": " Get the height of an Element ",
            "type": "Element.Element -> Int"
          },
          {
            "name": "image",
            "comment": " Create an image given a width, height, and image source.\n\n    image 100 100 \"yogi.jpg\"\n",
            "type": "Int -> Int -> String -> Element.Element"
          },
          {
            "name": "inward",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "justified",
            "comment": " Align text along the left and right sides of the text block. Word spacing is\nadjusted to make this possible.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "layers",
            "comment": " Layer elements on top of each other, starting from the bottom:\n`layers == flow outward`\n",
            "type": "List Element.Element -> Element.Element"
          },
          {
            "name": "left",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "leftAligned",
            "comment": " Align text along the left side of the text block. This is sometimes known as\n*ragged right*.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "link",
            "comment": " Create an `Element` that is a hyper-link. ",
            "type": "String -> Element.Element -> Element.Element"
          },
          {
            "name": "midBottom",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midBottomAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "midLeft",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midLeftAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "midRight",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midRightAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "midTop",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midTopAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "middle",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "middleAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "opacity",
            "comment": " Create an `Element` with a given opacity. Opacity is a number between 0 and 1\nwhere 0 means totally clear.\n",
            "type": "Float -> Element.Element -> Element.Element"
          },
          {
            "name": "outward",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "relative",
            "comment": " A position specified as a percentage. If you want something 10% away from\nthe top left corner, you would say:\n\n    topLeftAt (relative 0.1) (relative 0.1)\n",
            "type": "Float -> Element.Pos"
          },
          {
            "name": "right",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "rightAligned",
            "comment": " Align text along the right side of the text block. This is sometimes known\nas *ragged left*.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "show",
            "comment": " Convert anything to its textual representation and make it displayable in\nthe browser. Excellent for debugging.\n\n    show value =\n      leftAligned (Text.monospace (Text.fromString (toString value)))\n",
            "type": "a -> Element.Element"
          },
          {
            "name": "size",
            "comment": " Create an `Element` with a new width and height. ",
            "type": "Int -> Int -> Element.Element -> Element.Element"
          },
          {
            "name": "sizeOf",
            "comment": " Get the width and height of an Element ",
            "type": "Element.Element -> ( Int, Int )"
          },
          {
            "name": "spacer",
            "comment": " Create an empty box. This is useful for getting your spacing right and\nfor making borders.\n",
            "type": "Int -> Int -> Element.Element"
          },
          {
            "name": "tag",
            "comment": " Create an `Element` with a tag. This lets you link directly to it.\nThe element `(tag \"all-about-badgers\" thirdParagraph)` can be reached\nwith a link like this: `/facts-about-animals.elm#all-about-badgers`\n",
            "type": "String -> Element.Element -> Element.Element"
          },
          {
            "name": "tiledImage",
            "comment": " Create a tiled image. Repeat the image to fill the given width and height.\n\n    tiledImage 100 100 \"yogi.jpg\"\n",
            "type": "Int -> Int -> String -> Element.Element"
          },
          {
            "name": "toHtml",
            "comment": " Convert an element into HTML, so it can be embedded anywhere in your\nprogram.\n",
            "type": "Element.Element -> Html.Html msg"
          },
          {
            "name": "topLeft",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "topLeftAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "topRight",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "topRightAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "up",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "width",
            "comment": " Create an `Element` with a given width. ",
            "type": "Int -> Element.Element -> Element.Element"
          },
          {
            "name": "widthOf",
            "comment": " Get the width of an Element ",
            "type": "Element.Element -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Transform",
        "comment": " A library for performing [2D matrix transformations][affine].  It\nis used primarily with the `groupTransform` function from\n[`Collage`](Collage) and allows you to do things\nlike rotation, scaling, translation, shearing, and reflection.\n\nNote that all the matrices in this library are 3x3 matrices of homogeneous\ncoordinates, used for [affine transformations][affine]. Since the bottom row as\nalways `0 0 1` in these matrices, it is omitted in the diagrams below.\n\n [affine]: http://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\n\n# Transforms\n@docs Transform, identity, matrix, rotation, translation, scale, scaleX, scaleY\n\n# Multiplication\n@docs multiply\n",
        "aliases": [],
        "types": [
          {
            "name": "Transform",
            "comment": " A matrix representing a 2D transformation.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "identity",
            "comment": " Create an identity transform. Transforming by the identity does\nnot change anything, but it can come in handy as a default or\nbase case.\n\n        / 1 0 0 \\\n        \\ 0 1 0 /\n",
            "type": "Transform.Transform"
          },
          {
            "name": "matrix",
            "comment": " Create a transformation matrix. This lets you create transforms\nsuch as scales, shears, reflections, and translations.\n\n    matrix a b c d x y\n\n        / a b x \\\n        \\ c d y /\n\nNote that `x` and `y` are the translation values.\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Transform.Transform"
          },
          {
            "name": "multiply",
            "comment": " Multiply two transforms together.\n\n    multiply m n\n\n        / ma mb mx \\     / na nb nx \\\n        | mc md my |  .  | nc nd ny |\n        \\  0  0  1 /     \\  0  0  1 /\n",
            "type": "Transform.Transform -> Transform.Transform -> Transform.Transform"
          },
          {
            "name": "rotation",
            "comment": " Create a [rotation matrix](http://en.wikipedia.org/wiki/Rotation_matrix).\nGiven an angle t, it creates a counterclockwise rotation matrix:\n\n    rotation t\n\n        / cos t  -sin t  0 \\\n        \\ sin t   cos t  0 /\n",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "scale",
            "comment": " Creates a transformation matrix for scaling by a all directions.\n\n    scale s\n\n      / s 0 0 \\\n      \\ 0 s 0 /\n",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "scaleX",
            "comment": " Create a transformation for horizontal scaling. ",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "scaleY",
            "comment": " Create a transformation for vertical scaling. ",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "translation",
            "comment": " Create a transformation matrix for translation.\n\n    translation x y\n\n        / 1 0 x \\\n        \\ 0 1 y /\n",
            "type": "Float -> Float -> Transform.Transform"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Text",
        "comment": " A library for styling and displaying text. While the\n[`String`](http://package.elm-lang.org/packages/elm-lang/core/latest/String) library focuses on representing and manipulating\nstrings of character strings, the `Text` library focuses on how those\nstrings should look on screen. It lets you make text bold or italic,\nset the typeface, set the text size, etc.\n\n# Text\n@docs Text\n\n# Creating Text\n@docs fromString, empty, append, concat, join\n\n# Links and Style\n@docs link, typeface, monospace, height, color, bold, italic, line, Line,\n    style, Style, defaultStyle\n\n",
        "aliases": [
          {
            "name": "Style",
            "comment": " Represents all the ways you can style `Text`. If the `typeface` list is\nempty or the `height` is `Nothing`, the users will fall back on their browser's\ndefault settings. The following `Style` is black, 16 pixel tall, underlined, and\nTimes New Roman (assuming that typeface is available on the user's computer):\n\n    { typeface = [ \"Times New Roman\", \"serif\" ]\n    , height   = Just 16\n    , color    = black\n    , bold     = False\n    , italic   = False\n    , line     = Just Under\n    }\n",
            "args": [],
            "type": "{ typeface : List String , height : Maybe.Maybe Float , color : Color.Color , bold : Bool , italic : Bool , line : Maybe.Maybe Text.Line }"
          }
        ],
        "types": [
          {
            "name": "Line",
            "comment": " Styles for lines on text. This allows you to add an underline, an overline,\nor a strike out text:\n\n    line Under   (fromString \"underline\")\n    line Over    (fromString \"overline\")\n    line Through (fromString \"strike out\")\n",
            "args": [],
            "cases": [
              [
                "Under",
                []
              ],
              [
                "Over",
                []
              ],
              [
                "Through",
                []
              ]
            ]
          },
          {
            "name": "Text",
            "comment": " Represents styled text. It can be rendered with collages or with elements.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "append",
            "comment": " Put two chunks of text together.\n\n    append (fromString \"hello \") (fromString \"world\") == fromString \"hello world\"\n",
            "type": "Text.Text -> Text.Text -> Text.Text"
          },
          {
            "name": "bold",
            "comment": " Make text bold.\n\n    fromString \"sometimes you want \" ++ bold (fromString \"emphasis\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "color",
            "comment": " Set the color of some text.\n\n    color red (fromString \"Red\")\n",
            "type": "Color.Color -> Text.Text -> Text.Text"
          },
          {
            "name": "concat",
            "comment": " Put many chunks of text together.\n\n    concat\n      [ fromString \"type \"\n      , bold (fromString \"Maybe\")\n      , fromString \" = Just a | Nothing\"\n      ]\n",
            "type": "List Text.Text -> Text.Text"
          },
          {
            "name": "defaultStyle",
            "comment": " Plain black text. It uses the browsers default typeface and text height.\nNo decorations are used.\n\n    { typeface = []\n    , height = Nothing\n    , color = black\n    , bold = False\n    , italic = False\n    , line = Nothing\n    }\n",
            "type": "Text.Style"
          },
          {
            "name": "empty",
            "comment": " Text with nothing in it.\n\n    empty = fromString \"\"\n",
            "type": "Text.Text"
          },
          {
            "name": "fromString",
            "comment": " Convert a string into text which can be styled and displayed. To show the\nstring `\"Hello World!\"` on screen in italics, you could say:\n\n    main = leftAligned (italic (fromString \"Hello World!\"))\n",
            "type": "String -> Text.Text"
          },
          {
            "name": "height",
            "comment": " Set the height of some text.\n\n    height 40 (fromString \"Title\")\n",
            "type": "Float -> Text.Text -> Text.Text"
          },
          {
            "name": "italic",
            "comment": " Make text italic.\n\n    fromString \"make it \" ++ italic (fromString \"important\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "join",
            "comment": " Put many chunks of text together with a separator.\n\n    chunks : List Text\n    chunks = List.map fromString [\"lions\",\"tigers\",\"bears\"]\n\n    join (fromString \", \") chunks == fromString \"lions, tigers, bears\"\n",
            "type": "Text.Text -> List Text.Text -> Text.Text"
          },
          {
            "name": "line",
            "comment": " Put lines on text.\n\n    line Under   (fromString \"underlined\")\n    line Over    (fromString \"overlined\")\n    line Through (fromString \"strike out\")\n",
            "type": "Text.Line -> Text.Text -> Text.Text"
          },
          {
            "name": "link",
            "comment": " Create a link by providing a URL and the text of the link.\n\n    link \"http://elm-lang.org\" (fromString \"Elm Website\")\n",
            "type": "String -> Text.Text -> Text.Text"
          },
          {
            "name": "monospace",
            "comment": " Switch to a monospace typeface. Good for code snippets.\n\n    monospace (fromString \"foldl (+) 0 [1,2,3]\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "style",
            "comment": " Set the style of some text. For example, if you design a `Style` called\n`footerStyle` that is specifically for the bottom of your page, you could apply\nit to text like this:\n\n    style footerStyle (fromString \"the old prince / 2007\")\n",
            "type": "Text.Style -> Text.Text -> Text.Text"
          },
          {
            "name": "typeface",
            "comment": " Provide a list of preferred typefaces for some text.\n\n    [\"helvetica\",\"arial\",\"sans-serif\"]\n\nNot every browser has access to the same typefaces, so rendering will use the\nfirst typeface in the list that is found on the user's computer. If there are\nno matches, it will use their default typeface. This works the same as the CSS\nfont-family property.\n",
            "type": "List String -> Text.Text -> Text.Text"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "evancz/elm-markdown",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Markdown",
        "comment": " A library for markdown parsing. This is just an Elm API built on top of the\n[marked](https://github.com/chjj/marked) project which focuses on speed.\n\n# Parsing Markdown\n@docs toHtml\n\n# Parsing with Custom Options\n@docs Options, defaultOptions, toHtmlWith\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Some parser options so you can tweak things for your particular case.\n\n  * `githubFlavored` &mdash; overall reasonable improvements on the original\n    markdown parser as described [here][gfm]. This includes stuff like [fenced\n    code blocks][fenced]. There are some odd parts though, such as [tables][]\n    and a setting to turn all newlines into newlines in the resulting output,\n    so there are settings to turn those on or off based on your preference.\n\n  * `defaultHighlighting` &mdash; a default language to use for code blocks that do\n    not have a language tag. So setting this to `Just \"elm\"` will treat all\n    unlabeled code blocks as Elm code. (This relies on [highlight.js][highlight]\n    as explained in the README [here](../#code-blocks).)\n\n  * `sanitize` &mdash; this determines if all HTML should be escaped. If you\n    are parsing user markdown or user input can somehow reach the markdown\n    parser, you should almost certainly turn on sanitation. If it is just you\n    writing markdown, turning sanitation off is a nice way to do some HTML\n    tricks if it is needed.\n\n  * `smartypants` &mdash; This will automatically upgrade quotes to the\n    prettier versions and turn dashes into [em dashes or en dashes][dash]\n\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown/\n[fenced]: https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks\n[tables]: https://help.github.com/articles/github-flavored-markdown/#tables\n[highlight]: https://highlightjs.org/\n[dash]: http://en.wikipedia.org/wiki/Dash\n",
            "args": [],
            "type": "{ githubFlavored : Maybe.Maybe { tables : Bool, breaks : Bool } , defaultHighlighting : Maybe.Maybe String , sanitize : Bool , smartypants : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " The `Options` used by the `toElement` and `toHtml` functions.\n\n    { githubFlavored = Just { tables = False, breaks = False }\n    , defaultHighlighting = Nothing\n    , sanitize = False\n    , smartypants = False\n    }\n",
            "type": "Markdown.Options"
          },
          {
            "name": "toHtml",
            "comment": " Turn a markdown string into an HTML element, using the `defaultOptions`.\n\n    recipe : Html msg\n    recipe =\n       Markdown.toHtml [class \"recipe\"] \"\"\"\n\n    # Apple Pie Recipe\n\n    First, invent the universe. Then bake an apple pie.\n\n    \"\"\"\n",
            "type": "List (Html.Attribute msg) -> String -> Html.Html msg"
          },
          {
            "name": "toHtmlWith",
            "comment": " Maybe you want to parse user input into markdown. To stop them from adding\n`<script>` tags, you can use modified parsing options.\n\n    options : Options\n    options =\n        { defaultOptions | sanitize = True }\n\n    toMarkdown : String -> Html\n    toMarkdown userInput =\n        Markdown.toHtmlWith options [] userInput\n",
            "type": "Markdown.Options -> List (Html.Attribute msg) -> String -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "evancz/elm-sortable-table",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Table",
        "comment": "\n\nThis library helps you create sortable tables. The crucial feature is that it\nlets you own your data separately and keep it in whatever format is best for\nyou. This way you are free to change your data without worrying about the table\n&ldquo;getting out of sync&rdquo; with the data. Having a single source of\ntruth is pretty great!\n\nI recommend checking out the [examples][] to get a feel for how it works.\n\n[examples]: https://github.com/evancz/elm-sortable-table/tree/master/examples\n\n# View\n\n@docs view\n\n# Configuration\n\n@docs config, stringColumn, intColumn, floatColumn\n\n# State\n\n@docs State, initialSort\n\n\n# Crazy Customization\n\nIf you are new to this library, you can probably stop reading here. After this\npoint are a bunch of ways to customize your table further. If it does not\nprovide what you need, you may just want to write a custom table yourself. It\nis not that crazy.\n\n## Custom Columns\n\n@docs Column, customColumn, veryCustomColumn,\n  Sorter, unsortable, increasingBy, decreasingBy,\n  increasingOrDecreasingBy, decreasingOrIncreasingBy\n\n## Custom Tables\n\n@docs Config, customConfig, Customizations, HtmlDetails, Status,\n  defaultCustomizations\n",
        "aliases": [
          {
            "name": "Customizations",
            "comment": " There are quite a lot of ways to customize the `<table>` tag. You can add\na `<caption>` which can be styled via CSS. You can do crazy stuff with\n`<thead>` to group columns in weird ways. You can have a `<tfoot>` tag for\nsummaries of various columns. And maybe you want to put attributes on `<tbody>`\nor on particular rows in the body. All these customizations are available to you.\n\n**Note:** The level of craziness possible in `<thead>` and `<tfoot>` are so\nhigh that I could not see how to provide the full functionality *and* make it\nimpossible to do bad stuff. So just be aware of that, and share any stories\nyou have. Stories make it possible to design better!\n",
            "args": [
              "data",
              "msg"
            ],
            "type": "{ tableAttrs : List (Html.Attribute msg) , caption : Maybe.Maybe (Table.HtmlDetails msg) , thead : List ( String, Table.Status, Html.Attribute msg ) -> Table.HtmlDetails msg , tfoot : Maybe.Maybe (Table.HtmlDetails msg) , tbodyAttrs : List (Html.Attribute msg) , rowAttrs : data -> List (Html.Attribute msg) }"
          },
          {
            "name": "HtmlDetails",
            "comment": " Sometimes you must use a `<td>` tag, but the attributes and children are up\nto you. This type lets you specify all the details of an HTML node except the\ntag name.\n",
            "args": [
              "msg"
            ],
            "type": "{ attributes : List (Html.Attribute msg) , children : List (Html.Html msg) }"
          }
        ],
        "types": [
          {
            "name": "Column",
            "comment": " Describes how to turn `data` into a column in your table.\n",
            "args": [
              "data",
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Config",
            "comment": " Configuration for your table, describing your columns.\n\n**Note:** Your `Config` should *never* be held in your model.\nIt should only appear in `view` code.\n",
            "args": [
              "data",
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Sorter",
            "comment": " Specifies a particular way of sorting data.\n",
            "args": [
              "data"
            ],
            "cases": []
          },
          {
            "name": "State",
            "comment": " Tracks which column to sort by.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Status",
            "comment": " The status of a particular column, for use in the `thead` field of your\n`Customizations`.\n\n  - If the column is unsortable, the status will always be `Unsortable`.\n  - If the column can be sorted in one direction, the status will be `Sortable`.\n    The associated boolean represents whether this column is selected. So it is\n    `True` if the table is currently sorted by this column, and `False` otherwise.\n  - If the column can be sorted in either direction, the status will be `Reversible`.\n    The associated maybe tells you whether this column is selected. It is\n    `Just isReversed` if the table is currently sorted by this column, and\n    `Nothing` otherwise. The `isReversed` boolean lets you know which way it\n    is sorted.\n\nThis information lets you do custom header decorations for each scenario.\n",
            "args": [],
            "cases": [
              [
                "Unsortable",
                []
              ],
              [
                "Sortable",
                [
                  "Bool"
                ]
              ],
              [
                "Reversible",
                [
                  "Maybe.Maybe Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "config",
            "comment": " Create the `Config` for your `view` function. Everything you need to\nrender your columns efficiently and handle selection of columns.\n\nSay we have a `List Person` that we want to show as a table. The table should\nhave a column for name and age. We would create a `Config` like this:\n\n    import Table\n\n    type Msg = NewTableState State | ...\n\n    config : Table.Config Person Msg\n    config =\n      Table.config\n        { toId = .name\n        , toMsg = NewTableState\n        , columns =\n            [ Table.stringColumn \"Name\" .name\n            , Table.intColumn \"Age\" .age\n            ]\n        }\n\nYou provide the following information in your table configuration:\n\n  - `toId` &mdash; turn a `Person` into a unique ID. This lets us use\n  [`Html.Keyed`][keyed] under the hood to make resorts faster.\n  - `columns` &mdash; specify some columns to show.\n  - `toMsg` &mdash; a way send new table states to your app as messages.\n\nSee the [examples][] to get a better feel for this!\n\n[keyed]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Keyed\n[examples]: https://github.com/evancz/elm-sortable-table/tree/master/examples\n",
            "type": "{ toId : data -> String , toMsg : Table.State -> msg , columns : List (Table.Column data msg) } -> Table.Config data msg"
          },
          {
            "name": "customColumn",
            "comment": " Perhaps the basic columns are not quite what you want. Maybe you want to\ndisplay monetary values in thousands of dollars, and `floatColumn` does not\nquite cut it. You could define a custom column like this:\n\n    import Table\n\n    dollarColumn : String -> (data -> Float) -> Column data msg\n    dollarColumn name toDollars =\n      Table.customColumn\n        { name = name\n        , viewData = \\data -> viewDollars (toDollars data)\n        , sorter = Table.decreasingBy toDollars\n        }\n\n    viewDollars : Float -> String\n    viewDollars dollars =\n      \"$\" ++ toString (round (dollars / 1000)) ++ \"k\"\n\nThe `viewData` field means we will displays the number `12345.67` as `$12k`.\n\nThe `sorter` field specifies how the column can be sorted. In `dollarColumn` we\nare saying that it can *only* be shown from highest-to-lowest monetary value.\nMore about sorters soon!\n",
            "type": "{ name : String , viewData : data -> String , sorter : Table.Sorter data } -> Table.Column data msg"
          },
          {
            "name": "customConfig",
            "comment": " Just like `config` but you can specify a bunch of table customizations.\n",
            "type": "{ toId : data -> String , toMsg : Table.State -> msg , columns : List (Table.Column data msg) , customizations : Table.Customizations data msg } -> Table.Config data msg"
          },
          {
            "name": "decreasingBy",
            "comment": " Create a sorter that can only display the data in decreasing order. If we\nwant a table of countries, sorted by population from highest to lowest, we\nwould say this:\n\n    sorter : Sorter { a | population : comparable }\n    sorter =\n      decreasingBy .population\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "decreasingOrIncreasingBy",
            "comment": " Sometimes you want to be able to sort data in increasing *or* decreasing\norder. Maybe you have a bunch of data about orange juice, and you want to know\nboth which has the most sugar, and which has the least sugar. Both interesting!\nThis function lets you see both, starting with decreasing order.\n\n    sorter : Sorter { a | sugar : comparable }\n    sorter =\n      decreasingOrIncreasingBy .sugar\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "defaultCustomizations",
            "comment": " The customizations used in `config` by default.\n",
            "type": "Table.Customizations data msg"
          },
          {
            "name": "floatColumn",
            "comment": "",
            "type": "String -> (data -> Float) -> Table.Column data msg"
          },
          {
            "name": "increasingBy",
            "comment": " Create a sorter that can only display the data in increasing order. If we\nwant a table of people, sorted alphabetically by name, we would say this:\n\n    sorter : Sorter { a | name : comparable }\n    sorter =\n      increasingBy .name\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "increasingOrDecreasingBy",
            "comment": " Sometimes you want to be able to sort data in increasing *or* decreasing\norder. Maybe you have race times for the 100 meter sprint. This function lets\nsort by best time by default, but also see the other order.\n\n    sorter : Sorter { a | time : comparable }\n    sorter =\n      increasingOrDecreasingBy .time\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "initialSort",
            "comment": " Create a table state. By providing a column name, you determine which\ncolumn should be used for sorting by default. So if you want your table of\nyachts to be sorted by length by default, you might say:\n\n    import Table\n\n    Table.initialSort \"Length\"\n",
            "type": "String -> Table.State"
          },
          {
            "name": "intColumn",
            "comment": "",
            "type": "String -> (data -> Int) -> Table.Column data msg"
          },
          {
            "name": "stringColumn",
            "comment": "",
            "type": "String -> (data -> String) -> Table.Column data msg"
          },
          {
            "name": "unsortable",
            "comment": " A sorter for columns that are unsortable. Maybe you have a column in your\ntable for delete buttons that delete the row. It would not make any sense to\nsort based on that column.\n",
            "type": "Table.Sorter data"
          },
          {
            "name": "veryCustomColumn",
            "comment": " It is *possible* that you want something crazier than `customColumn`. In\nthat unlikely scenario, this function lets you have full control over the\nattributes and children of each `<td>` cell in this column.\n\nSo maybe you want to a dollars column, and the dollar signs should be green.\n\n    import Html exposing (Html, Attribute, span, text)\n    import Html.Attributes exposing (style)\n    import Table\n\n    dollarColumn : String -> (data -> Float) -> Column data msg\n    dollarColumn name toDollars =\n      Table.veryCustomColumn\n        { name = name\n        , viewData = \\data -> viewDollars (toDollars data)\n        , sorter = Table.decreasingBy toDollars\n        }\n\n    viewDollars : Float -> Table.HtmlDetails msg\n    viewDollars dollars =\n      Table.HtmlDetails []\n        [ span [ style [(\"color\",\"green\")] ] [ text \"$\" ]\n        , text (toString (round (dollars / 1000)) ++ \"k\")\n        ]\n",
            "type": "{ name : String , viewData : data -> Table.HtmlDetails msg , sorter : Table.Sorter data } -> Table.Column data msg"
          },
          {
            "name": "view",
            "comment": " Take a list of data and turn it into a table. The `Config` argument is the\nconfiguration for the table. It describes the columns that we want to show. The\n`State` argument describes which column we are sorting by at the moment.\n\n**Note:** The `State` and `List data` should live in your `Model`. The `Config`\nfor the table belongs in your `view` code. I very strongly recommend against\nputting `Config` in your model. Describe any potential table configurations\nstatically, and look for a different library if you need something crazier than\nthat.\n",
            "type": "Table.Config data msg -> Table.State -> List data -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "evancz/url-parser",
    "version": "2.0.0",
    "docs": [
      {
        "name": "UrlParser",
        "comment": "\n\n# Primitives\n@docs Parser, string, int, s\n\n# Path Parses\n@docs (</>), map, oneOf, top, custom\n\n# Query Parameter Parsers\n@docs QueryParser, (<?>), stringParam, intParam, customParam\n\n# Run a Parser\n@docs parsePath, parseHash\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Parser",
            "comment": " Turn URLs like `/blog/42/cat-herding-techniques` into nice Elm data.\n",
            "args": [
              "a",
              "b"
            ],
            "cases": []
          },
          {
            "name": "QueryParser",
            "comment": " Turn query parameters like `?name=tom&age=42` into nice Elm data.\n",
            "args": [
              "a",
              "b"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "</>",
            "comment": " Parse a path with multiple segments.\n\n    parsePath (s \"blog\" </> int) location\n    -- /blog/35/  ==>  Just 35\n    -- /blog/42   ==>  Just 42\n    -- /blog/     ==>  Nothing\n    -- /42/       ==>  Nothing\n\n    parsePath (s \"search\" </> string) location\n    -- /search/cats/  ==>  Just \"cats\"\n    -- /search/frog   ==>  Just \"frog\"\n    -- /search/       ==>  Nothing\n    -- /cats/         ==>  Nothing\n",
            "type": "UrlParser.Parser a b -> UrlParser.Parser b c -> UrlParser.Parser a c",
            "associativity": "right",
            "precedence": 7
          },
          {
            "name": "<?>",
            "comment": " Parse some query parameters.\n\n    type Route = BlogList (Maybe String) | BlogPost Int\n\n    route : Parser (Route -> a) a\n    route =\n      oneOf\n        [ map BlogList (s \"blog\" <?> stringParam \"search\")\n        , map BlogPost (s \"blog\" </> int)\n        ]\n\n    parsePath route location\n    -- /blog/              ==>  Just (BlogList Nothing)\n    -- /blog/?search=cats  ==>  Just (BlogList (Just \"cats\"))\n    -- /blog/42            ==>  Just (BlogPost 42)\n",
            "type": "UrlParser.Parser a b -> UrlParser.QueryParser b c -> UrlParser.Parser a c",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "custom",
            "comment": " Create a custom path segment parser. Here is how it is used to define the\n`int` and `string` parsers:\n\n    int =\n      custom \"NUMBER\" String.toInt\n\n    string =\n      custom \"STRING\" Ok\n\nYou can use it to define something like “only CSS files” like this:\n\n    css : Parser (String -> a) a\n    css =\n      custom \"CSS_FILE\" <| \\segment ->\n        if String.endsWith \".css\" then\n          Ok segment\n        else\n          Err \"Does not end with .css\"\n",
            "type": "String -> (String -> Result.Result String a) -> UrlParser.Parser (a -> b) b"
          },
          {
            "name": "customParam",
            "comment": " Create a custom query parser. You could create parsers like these:\n\n    jsonParam : String -> Decoder a -> QueryParser (Maybe a -> b) b\n    enumParam : String -> Dict String a -> QueryParser (Maybe a -> b) b\n\nIt may be worthwhile to have these in this library directly. If you need\neither one in practice, please open an issue [here][] describing your exact\nscenario. We can use that data to decide if they should be added.\n\n[here]: https://github.com/evancz/url-parser/issues\n",
            "type": "String -> (Maybe.Maybe String -> a) -> UrlParser.QueryParser (a -> b) b"
          },
          {
            "name": "int",
            "comment": " Parse a segment of the path as an `Int`.\n\n    parsePath int location\n    -- /alice/  ==>  Nothing\n    -- /bob     ==>  Nothing\n    -- /42/     ==>  Just 42\n",
            "type": "UrlParser.Parser (Int -> a) a"
          },
          {
            "name": "intParam",
            "comment": " Parse a query parameter as an `Int`. Maybe you want to show paginated\nsearch results. You could have a `start` query parameter to say which result\nshould appear first.\n\n    parsePath (s \"results\" <?> intParam \"start\") location\n    -- /results           ==>  Just Nothing\n    -- /results?start=10  ==>  Just (Just 10)\n",
            "type": "String -> UrlParser.QueryParser (Maybe.Maybe Int -> a) a"
          },
          {
            "name": "map",
            "comment": " Transform a path parser.\n\n    type alias Comment = { author : String, id : Int }\n\n    rawComment : Parser (String -> Int -> a) a\n    rawComment =\n      s \"user\" </> string </> s \"comments\" </> int\n\n    comment : Parser (Comment -> a) a\n    comment =\n      map Comment rawComment\n\n    parsePath comment location\n    -- /user/bob/comments/42  ==>  Just { author = \"bob\", id = 42 }\n    -- /user/tom/comments/35  ==>  Just { author = \"tom\", id = 35 }\n    -- /user/sam/             ==>  Nothing\n",
            "type": "a -> UrlParser.Parser a b -> UrlParser.Parser (b -> c) c"
          },
          {
            "name": "oneOf",
            "comment": " Try a bunch of different path parsers.\n\n    type Route\n      = Search String\n      | Blog Int\n      | User String\n      | Comment String Int\n\n    route : Parser (Route -> a) a\n    route =\n      oneOf\n        [ map Search  (s \"search\" </> string)\n        , map Blog    (s \"blog\" </> int)\n        , map User    (s \"user\" </> string)\n        , map Comment (s \"user\" </> string </> \"comments\" </> int)\n        ]\n\n    parsePath route location\n    -- /search/cats           ==>  Just (Search \"cats\")\n    -- /search/               ==>  Nothing\n\n    -- /blog/42               ==>  Just (Blog 42)\n    -- /blog/cats             ==>  Nothing\n\n    -- /user/sam/             ==>  Just (User \"sam\")\n    -- /user/bob/comments/42  ==>  Just (Comment \"bob\" 42)\n    -- /user/tom/comments/35  ==>  Just (Comment \"tom\" 35)\n    -- /user/                 ==>  Nothing\n\n",
            "type": "List (UrlParser.Parser a b) -> UrlParser.Parser a b"
          },
          {
            "name": "parseHash",
            "comment": " Parse based on `location.hash` and `location.search`. This parser\nignores the normal path entirely.\n",
            "type": "UrlParser.Parser (a -> a) a -> Navigation.Location -> Maybe.Maybe a"
          },
          {
            "name": "parsePath",
            "comment": " Parse based on `location.pathname` and `location.search`. This parser\nignores the hash entirely.\n",
            "type": "UrlParser.Parser (a -> a) a -> Navigation.Location -> Maybe.Maybe a"
          },
          {
            "name": "s",
            "comment": " Parse a segment of the path if it matches a given string.\n\n    s \"blog\"  -- can parse /blog/\n              -- but not /glob/ or /42/ or anything else\n",
            "type": "String -> UrlParser.Parser a a"
          },
          {
            "name": "string",
            "comment": " Parse a segment of the path as a `String`.\n\n    parsePath string location\n    -- /alice/  ==>  Just \"alice\"\n    -- /bob     ==>  Just \"bob\"\n    -- /42/     ==>  Just \"42\"\n",
            "type": "UrlParser.Parser (String -> a) a"
          },
          {
            "name": "stringParam",
            "comment": " Parse a query parameter as a `String`.\n\n    parsePath (s \"blog\" <?> stringParam \"search\") location\n    -- /blog/              ==>  Just (Overview Nothing)\n    -- /blog/?search=cats  ==>  Just (Overview (Just \"cats\"))\n",
            "type": "String -> UrlParser.QueryParser (Maybe.Maybe String -> a) a"
          },
          {
            "name": "top",
            "comment": " A parser that does not consume any path segments.\n\n    type BlogRoute = Overview | Post Int\n\n    blogRoute : Parser (BlogRoute -> a) a\n    blogRoute =\n      oneOf\n        [ map Overview top\n        , map Post  (s \"post\" </> int)\n        ]\n\n    parsePath (s \"blog\" </> blogRoute) location\n    -- /blog/         ==>  Just Overview\n    -- /blog/post/42  ==>  Just (Post 42)\n",
            "type": "UrlParser.Parser a a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "fbonetti/elm-geodesy",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Geodesy",
        "comment": "\n\n# Types\n\n@docs Coordinate, DegreesMinutesSeconds, Unit\n\n# Helpers\n\n@docs decimalDegrees, degreesMinutesSeconds\n\n# Great-circle path (\"as the crow flies\")\n@docs distance, initialBearing, finalBearing, midpoint\n\n# Rhumb line\n@docs rhumbDistance, rhumbBearing, rhumbMidpoint\n\n",
        "aliases": [
          {
            "name": "Coordinate",
            "comment": " Latitude & longitude pair, in decimal degrees\n",
            "args": [],
            "type": "( Float, Float )"
          },
          {
            "name": "DegreesMinutesSeconds",
            "comment": " Representation of degrees in degrees, minutes, and seconds\n",
            "args": [],
            "type": "( Int, Int, Float )"
          }
        ],
        "types": [
          {
            "name": "Unit",
            "comment": " Distance can be returned as kilometers, meters, miles, or feet\n",
            "args": [],
            "cases": [
              [
                "Kilometers",
                []
              ],
              [
                "Meters",
                []
              ],
              [
                "Miles",
                []
              ],
              [
                "Feet",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "decimalDegrees",
            "comment": " Converts degrees, minutes, and seconds into decimal degrees\n",
            "type": "Geodesy.DegreesMinutesSeconds -> Float"
          },
          {
            "name": "degreesMinutesSeconds",
            "comment": " Converts decimal degrees into degrees, minutes, and seconds\n",
            "type": "Float -> Geodesy.DegreesMinutesSeconds"
          },
          {
            "name": "distance",
            "comment": " Great-circle distance between two points on a sphere\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Unit -> Float"
          },
          {
            "name": "finalBearing",
            "comment": " The final compass bearing of a great-circle path\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Float"
          },
          {
            "name": "initialBearing",
            "comment": " The initial compass bearing of a great-circle path\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Float"
          },
          {
            "name": "midpoint",
            "comment": " Half-way point along a great circle path\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Coordinate"
          },
          {
            "name": "rhumbBearing",
            "comment": " Constant compass bearing needed to traverse a rhumb line\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Float"
          },
          {
            "name": "rhumbDistance",
            "comment": " Rhumb line distance between two points\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Unit -> Float"
          },
          {
            "name": "rhumbMidpoint",
            "comment": " Half-way point along a rhumb line\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Coordinate"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "fbonetti/elm-phoenix-socket",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Phoenix.Socket",
        "comment": "\n\n# Socket\n@docs Socket, Msg, init, withDebug, withoutHeartbeat, withHeartbeatInterval, update, listen\n\n# Channels\n@docs join, leave\n\n# Events\n@docs on, off\n\n# Sending messages\n@docs push\n\n",
        "aliases": [
          {
            "name": "Socket",
            "comment": " Stores channels, event handlers, and configuration options\n",
            "args": [
              "msg"
            ],
            "type": "{ path : String , debug : Bool , channels : Dict.Dict String (Phoenix.Channel.Channel msg) , events : Dict.Dict ( String, String ) (Json.Encode.Value -> msg) , pushes : Dict.Dict Int (Phoenix.Push.Push msg) , ref : Int , heartbeatIntervalSeconds : Float , withoutHeartbeat : Bool }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " ",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initializes a `Socket` with the given path\n",
            "type": "String -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "join",
            "comment": " Joins a channel\n\n    payload = Json.Encode.object [ (\"user_id\", Json.Encode.string \"123\") ]\n    channel = Channel.init \"rooms:lobby\" |> Channel.withPayload payload\n    (socket_, cmd) = join channel socket\n\n",
            "type": "Phoenix.Channel.Channel msg -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "leave",
            "comment": " Leaves a channel\n\n    (socket_, cmd) = leave \"rooms:lobby\" socket\n\n",
            "type": "String -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "listen",
            "comment": " Listens for phoenix messages and converts them into type `msg`\n",
            "type": "Phoenix.Socket.Socket msg -> (Phoenix.Socket.Msg msg -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "off",
            "comment": " Removes an event handler\n\n    socket\n      |> off \"new:msg\" \"rooms:lobby\"\n      |> off \"alert:msg\" \"rooms:lobby\"\n\n",
            "type": "String -> String -> Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "on",
            "comment": " Registers an event handler\n\n    socket\n      |> on \"new:msg\" \"rooms:lobby\" ReceiveChatMessage\n      |> on \"alert:msg\" \"rooms:lobby\" ReceiveAlertMessage\n\n",
            "type": "String -> String -> (Json.Encode.Value -> msg) -> Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "push",
            "comment": " Pushes a message\n\n    push_ = Phoenix.Push.init \"new:msg\" \"rooms:lobby\"\n    (socket_, cmd) = push push_ socket\n\n",
            "type": "Phoenix.Push.Push msg -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "update",
            "comment": " ",
            "type": "Phoenix.Socket.Msg msg -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "withDebug",
            "comment": " When enabled, prints all incoming Phoenix messages to the console\n",
            "type": "Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "withHeartbeatInterval",
            "comment": " Sends the heartbeat every interval in seconds\n\n    Default is 30 seconds\n",
            "type": "Float -> Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "withoutHeartbeat",
            "comment": " Turns off the heartbeat\n",
            "type": "Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Phoenix.Push",
        "comment": "\n\n@docs Push, init, withPayload, onError, onOk\n\n",
        "aliases": [
          {
            "name": "Push",
            "comment": " Represents a message being pushed to the server\n",
            "args": [
              "msg"
            ],
            "type": "{ event : String , channel : String , payload : Json.Encode.Value , onOk : Maybe.Maybe (Json.Encode.Value -> msg) , onError : Maybe.Maybe (Json.Encode.Value -> msg) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "init",
            "comment": " Initializes a push with the given event and channel\n\n    init \"new:msg\" \"rooms:lobby\"\n\n",
            "type": "String -> String -> Phoenix.Push.Push msg"
          },
          {
            "name": "onError",
            "comment": " Attaches an error handler\n\n    init \"new:msg\" \"rooms:lobby\"\n      |> onError handlePushError\n\n",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Push.Push msg -> Phoenix.Push.Push msg"
          },
          {
            "name": "onOk",
            "comment": " Attaches a success handler\n\n    init \"new:msg\" \"rooms:lobby\"\n      |> onOk handlePushOk\n\n",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Push.Push msg -> Phoenix.Push.Push msg"
          },
          {
            "name": "withPayload",
            "comment": " Attaches a payload\n\n    payload = JE.object [ (\"body\", JE.string \"Hello World!\") ]\n    init \"new:msg\" \"rooms:lobby\"\n      |> withPayload payload\n\n",
            "type": "Json.Encode.Value -> Phoenix.Push.Push msg -> Phoenix.Push.Push msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Phoenix.Channel",
        "comment": "\n\n@docs Channel, State, init, withPayload, onError, onClose, onJoin, onJoinError, setState\n\n",
        "aliases": [
          {
            "name": "Channel",
            "comment": " Represents a phoenix channel\n",
            "args": [
              "msg"
            ],
            "type": "{ name : String , payload : Json.Encode.Value , state : Phoenix.Channel.State , onClose : Maybe.Maybe (Json.Encode.Value -> msg) , onError : Maybe.Maybe (Json.Encode.Value -> msg) , onJoin : Maybe.Maybe (Json.Encode.Value -> msg) , onJoinError : Maybe.Maybe (Json.Encode.Value -> msg) , joinRef : Int , leaveRef : Int }"
          }
        ],
        "types": [
          {
            "name": "State",
            "comment": " All possible states a channel can be in\n",
            "args": [],
            "cases": [
              [
                "Closed",
                []
              ],
              [
                "Errored",
                []
              ],
              [
                "Joined",
                []
              ],
              [
                "Joining",
                []
              ],
              [
                "Leaving",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initializes a channel\n\n    init \"rooms:lobby\"\n\n",
            "type": "String -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onClose",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onError",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onJoin",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onJoinError",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "setState",
            "comment": " Sets the state of a channel. Internal use only.\n",
            "type": "Phoenix.Channel.State -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "withPayload",
            "comment": " Attaches a payload that's used for authentication\n\n    payload = JE.object [ (\"user_id\", JE.string \"123\") ]\n    init \"rooms:lobby\"\n      |> withPayload payload\n\n",
            "type": "Json.Encode.Value -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "fredcy/elm-debouncer",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Debounce",
        "comment": "\n\nThis provides a component that can \"debounce\" a changing value: monitor a\ntime-varying sequence of values and output the latest value every time there is\nno further change for some minimum interval.\n\nThis implementation attempts to minimize the number of `update` calls by using\n`Process.sleep` to manage the settling time (rather than recalculating elapsed\ninterval on every fine-grained tick). An added tuple element in the `update`\nfunction's return value provides the notification to the parent of the settled\nvalue. It's also possible to poll the settled value.\n\n# Types\n@docs Model, Msg\n\n# Update\n@docs init, update\n\n# Read\n@docs settled\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Debouncer model. Each instance handles a single time-varying sequence of the\nsame type (the `datatype`).\n",
            "args": [
              "datatype"
            ],
            "type": "{ data : datatype , settled : datatype , sleepCount : Int , settleTime : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Use the `Change` message to pass a new value to debouncer.\n",
            "args": [
              "datatype"
            ],
            "cases": [
              [
                "Change",
                [
                  "datatype"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initialize the debouncer with the time to wait for changing values to settle\nand the initial settled value.\n",
            "type": "Time.Time -> datatype -> Debounce.Model datatype"
          },
          {
            "name": "settled",
            "comment": " Access the settled value.\n",
            "type": "Debounce.Model datatype -> datatype"
          },
          {
            "name": "update",
            "comment": " Update the debouncer as a typical TEA component. The return value adds a\nfinal tuple element that is `Nothing` while the value is still changing and\n`Just x` when the value has settled to `x`.\n",
            "type": "Debounce.Msg datatype -> Debounce.Model datatype -> ( Debounce.Model datatype , Platform.Cmd.Cmd (Debounce.Msg datatype) , Maybe.Maybe datatype )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "fredcy/elm-defer-command",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Defer",
        "comment": " Defer one or more commands to run after the browser render-loop has run at\nleast once.\n\nThis is useful such as when setting focus on a newly-created element as we can\nbe sure that the element is in the actual DOM and can be manipulated via port\ncommands.\n\n# Wiring\n@docs Model, Msg, init, update, subscriptions\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Holds commands to be deferred, if any.\n",
            "args": [],
            "type": "List (Platform.Cmd.Cmd Defer.Msg)"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " The `AddCmd` message is used by the parent module to add a command to be\ndeferred.\n",
            "args": [],
            "cases": [
              [
                "AddCmd",
                [
                  "Platform.Cmd.Cmd Defer.Msg"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initialize this component with a list of commands.\n",
            "type": "List (Platform.Cmd.Cmd Defer.Msg) -> Defer.Model"
          },
          {
            "name": "subscriptions",
            "comment": " Subscriptions used to manage deferred commands. Add this to the parent\nprogram's subscriptions.\n",
            "type": "Defer.Model -> Platform.Sub.Sub Defer.Msg"
          },
          {
            "name": "update",
            "comment": " Update the component model.\n",
            "type": "Defer.Msg -> Defer.Model -> ( Defer.Model, Platform.Cmd.Cmd Defer.Msg )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "fredcy/elm-parseint",
    "version": "2.0.0",
    "docs": [
      {
        "name": "ParseInt",
        "comment": " Convert String value to Int, or Int to String, with given radix.\n\n# Functions\n@docs parseInt, parseIntOct, parseIntHex, parseIntRadix, toRadix, toRadixUnsafe, toOct, toHex, intFromChar, charFromInt\n\n# Errors\n@docs Error\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " Possible Result.Err returns from these functions.\n",
            "args": [],
            "cases": [
              [
                "InvalidChar",
                [
                  "Char"
                ]
              ],
              [
                "OutOfRange",
                [
                  "Char"
                ]
              ],
              [
                "InvalidRadix",
                [
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "charFromInt",
            "comment": " Convert Int to corresponding Char representing it as a digit. Values from\n10..15 are represented as upper-case 'A'..'F'. Values 16 and above extend the\nhexadecimal characters in the natural way. This function assumes that the input\nvalue is in the range 0 .. 36.\n",
            "type": "Int -> Char"
          },
          {
            "name": "intFromChar",
            "comment": " Convert an alphanumeric character to an int value as a \"digit\", validating\nagainst the given radix. Alphabetic characters past \"F\" are extended in the\nnatural way: 'G' == 16, 'H' == 17, etc. Upper and lower case are treated the\nsame. Passing a non-alphanumeric character results in the `InvalidChar`\nerror. If the resulting value would be greater than the given radix, an\n`OutOfRange` error results instead.\n",
            "type": "Int -> Char -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseInt",
            "comment": " Convert String to Int assuming base 10.\n\n    parseInt \"314159\" == Ok 314159\n    parseInt \"foo\" = Err (OutOfRange 'o')\n\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntHex",
            "comment": " Convert String to Int assuming base 16 (hexadecimal). No leading characters\nare expected; input starting with \"0x\" (or any other out of range character)\nwill cause an `Err` return.\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntOct",
            "comment": " Convert String to Int assuming base 8 (octal). No leading '0' is required.\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntRadix",
            "comment": " Convert String to Int assuming given radix. Radix can be any of\n2..36. Leading zeroes are ignored. Valid characters are the alphanumerics: those\nin the ASCII range [0-9a-zA-Z]. Case does not matter. For radixes beyond 16 the\nnormal [A-F] range for hexadecimal is extended in the natural way. Any invalid\ncharacter results in a `Err` return. Any valid character outside of the range\ndefined by the radix also results in an `Err`. In particular, any initial '-' or\n' ' (space) is an error. An `Ok` return means that the entire input string was\nconsumed. The empty string results in `Ok 0`\n\n    parseIntRadix 16 \"DEADBEEF\" = Ok 3735928559\n",
            "type": "Int -> String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "toHex",
            "comment": " Convert Int to hexadecimal String.\n",
            "type": "Int -> String"
          },
          {
            "name": "toOct",
            "comment": " Convert Int to octal String.\n",
            "type": "Int -> String"
          },
          {
            "name": "toRadix",
            "comment": " Convert Int to String assuming given radix. Radix values from 2..36 are\nallowed; others result in an `Err InvalidRadix`. Negative numbers get an initial\n'-'.\n\n    toRadix 16 1234 == Ok \"4D2\"\n    toRadix 8 -99 == Ok \"-143\"\n",
            "type": "Int -> Int -> Result.Result ParseInt.Error String"
          },
          {
            "name": "toRadixUnsafe",
            "comment": " Convert Int to String assuming given radix. Radix value must be in 2..36\n(not checked, so it can crash).\n\n    toRadixUnsafe 16 3735928559 == \"DEADBEEF\"\n    toRadixUnsafe 37 36 --> crash\n",
            "type": "Int -> Int -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "ggb/numeral-elm",
    "version": "1.2.3",
    "docs": [
      {
        "name": "Numeral",
        "comment": " Elm module for (advanced) number formatting. It is a direct port of [Numeral.js](http://numeraljs.com/) and it is possible to use the same format strings. Manipulation and unformatting of numbers is not yet supported.\n\nIf you create a new language-file, please let me know or send a pull request.\n\n# Formatting\n\n@docs format, formatWithLanguage\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Same as formatWithLanguage, but English is set as default language.\n\n    format \"$0,0.00\" 1000.234 == \"$1,000.23\"\n",
            "type": "String -> Float -> String"
          },
          {
            "name": "formatWithLanguage",
            "comment": " Format a number with a given language.\n\n    import Language.Japanese as Japanese\n\n    myFormat = formatWithLanguage Japanese.lang \"0.0a\"\n\n    -- map myFormat [10123.12, 235798239.3242] == [\"10.1千\",\"235.8百万\"]\n",
            "type": "Language.Language -> String -> Float -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Languages.Japanese",
        "comment": " Japanese language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"千\"\n        , million=\"百万\"\n        , billion=\"十億\"\n        , trillion=\"兆\"\n        }\n      , ordinal=japaneseOrdinal\n      , currency=\n        { symbol=\"¥\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Languages.English",
        "comment": " English language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=englishOrdinal\n      , currency=\n        { symbol=\"$\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Languages.Italian",
        "comment": " Italian language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\".\"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"mila\"\n        , million=\"mln\"\n        , billion=\"mld\"\n        , trillion=\"bil\"\n        }\n      , ordinal=italianOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Languages.BritishEnglish",
        "comment": " British English language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=englishOrdinal\n      , currency=\n        { symbol=\"£\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Languages.French",
        "comment": " French language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\" \"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=frenchOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Languages.German",
        "comment": " German language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\" \"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=germanOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Language",
        "comment": " Type definition for language configurations.\n\nTo implement a new language configuration, copy an existing one and modify it.\n\n@docs Ordinal, Language\n\n",
        "aliases": [
          {
            "name": "Language",
            "comment": " Language defines the delimiters, abbreviations, ordinal and currency symbol.\n",
            "args": [],
            "type": "{ delimiters : Language.Delimiters , abbreviations : Language.Abbreviations , ordinal : Language.Ordinal , currency : Language.Currency }"
          },
          {
            "name": "Ordinal",
            "comment": " Type of a function that takes a float as input and returns an ordinal abbreviation string.\n",
            "args": [],
            "type": "Float -> String"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "justinmimbs/elm-date-extra",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Date.Extra",
        "comment": " A `Date` represents a moment in time, encoded by two essential pieces of\ninformation: the number of milliseconds since 1 January 1970 UTC, and the\noffset between UTC and the current machine's local time. Extractions of a\n`Date` (e.g. `Date.month`, `Date.hour`) return representations of the date in\nlocal time, while `Date.toTime` returns the UTC representation.\n\n# Common Constructors\n@docs fromParts, fromCalendarDate, fromIsoString\n\n# Formatted Strings\n@docs toFormattedString, toUtcFormattedString, toIsoString, toUtcIsoString\n\n# Operations\n## Dates as Atomic Values\n@docs equal, compare, isBetween, clamp\n\n## Dates as Composite Values\nThese functions work on dates within the context of a given interval of time.\n@docs Interval, equalBy, floor, ceiling, add, diff, range\n\n# Extractions\n@docs monthNumber, quarter, ordinalDay, fractionalDay, weekdayNumber, weekNumber, weekYear, offsetFromUtc\n\n# Detailed Specification\nIn some cases you may want to specify a date with a time zone offset or from\nweek-date or ordinal-date parts. The `fromSpec` function provides a way to\ndo this.\n@docs fromSpec\n\n## TimeZone\n@docs TimeZone, utc, offset, local\n\n## TimeSpec\n@docs TimeSpec, noTime, atTime\n\n## DateSpec\n@docs DateSpec, calendarDate, weekDate, ordinalDate\n",
        "aliases": [],
        "types": [
          {
            "name": "DateSpec",
            "comment": " Represents a day.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Interval",
            "comment": " Represents an interval of time.\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ],
              [
                "Quarter",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Monday",
                []
              ],
              [
                "Tuesday",
                []
              ],
              [
                "Wednesday",
                []
              ],
              [
                "Thursday",
                []
              ],
              [
                "Friday",
                []
              ],
              [
                "Saturday",
                []
              ],
              [
                "Sunday",
                []
              ]
            ]
          },
          {
            "name": "TimeSpec",
            "comment": " Represents a time of day.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "TimeZone",
            "comment": " Represents a time zone.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a number of whole intervals to a date.\n\n    Date.add Week 2 (Date.fromParts 2007 Mar 15 11 55 0 0)\n    -- <29 March 2007, 11:55>\n\nWhen adding Month, Quarter, or Year intervals, day values are clamped at the\nend of the month if necessary.\n\n    Date.add Month 1 (Date.fromParts 2000 Jan 31 0 0 0 0)\n    -- <29 February 2000>\n",
            "type": "Date.Extra.Interval -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "atTime",
            "comment": " Create a `TimeSpec` from time parts (hour, minute, second, millisecond).\n",
            "type": "Int -> Int -> Int -> Int -> Date.Extra.TimeSpec"
          },
          {
            "name": "calendarDate",
            "comment": " Create a `DateSpec` from calendar-date parts (year, month, day).\n",
            "type": "Int -> Date.Month -> Int -> Date.Extra.DateSpec"
          },
          {
            "name": "ceiling",
            "comment": " Round up a date to the beginning of the closest interval. The resulting\ndate will be greater than or equal to the one provided.\n\n    Date.ceiling Monday (Date.fromParts 1999 Dec 31 23 59 59 999)\n    -- <3 January 2000>\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date"
          },
          {
            "name": "clamp",
            "comment": " Clamp a date within a given range. The expression `Date.clamp min max x`\nreturns one of `min`, `max`, or `x`, ensuring the returned date is not before\n`min` and not after `max`.\n",
            "type": "Date.Date -> Date.Date -> Date.Date -> Date.Date"
          },
          {
            "name": "compare",
            "comment": " Compare two dates. This can be used as the compare function for\n`List.sortWith`.\n",
            "type": "Date.Date -> Date.Date -> Basics.Order"
          },
          {
            "name": "diff",
            "comment": " Find the difference, as a number of whole intervals, between two dates.\n\n    Date.diff Month\n      (Date.fromParts 2007 Mar 15 11 55 0 0)\n      (Date.fromParts 2007 Sep 1 0 0 0 0)\n    -- 5\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date -> Int"
          },
          {
            "name": "equal",
            "comment": " Test equality of two dates.\n",
            "type": "Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "equalBy",
            "comment": " Test if two dates fall within the same interval.\n\n    dec31 = Date.fromCalendarDate 1999 Dec 31\n    jan1 = Date.fromCalendarDate 2000 Jan 1\n\n    Date.equalBy Month dec31 jan1 -- False\n    Date.equalBy Week  dec31 jan1 -- True\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "floor",
            "comment": " Round down a date to the beginning of the closest interval. The resulting\ndate will be less than or equal to the one provided.\n\n    Date.floor Hour (Date.fromParts 1999 Dec 31 23 59 59 999)\n    -- <31 December 1999, 23:00>\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date"
          },
          {
            "name": "fractionalDay",
            "comment": " Extract the fractional day of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the float 0.4895833333333333.\n",
            "type": "Date.Date -> Float"
          },
          {
            "name": "fromCalendarDate",
            "comment": " Convenience function for creating a `Date` from only the year, month, and\nday parts.\n\n    Date.fromCalendarDate 2000 Jan 1\n",
            "type": "Int -> Date.Month -> Int -> Date.Date"
          },
          {
            "name": "fromIsoString",
            "comment": " Attempt to create a `Date` from a string representing a date in\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n\n    Date.fromIsoString \"2000-01-01\"\n    -- Just <1 January 2000, local time>\n\n    Date.fromIsoString \"2009-W01-1T00Z\"\n    -- Just <29 December 2008, UTC>\n\n    Date.fromIsoString \"2016-218T20:00-03:00\"\n    -- Just <5 August 2016, 23:00, UTC>\n\n    Date.fromIsoString \"1/1/2000\"\n    -- Nothing\n\nWhen a `Date` is created with a specified time zone offset (e.g. `\"-03:00\"`),\nits extractions still reflect the current machine's local time, and\n`Date.toTime` still reflects its UTC time.\n",
            "type": "String -> Maybe.Maybe Date.Date"
          },
          {
            "name": "fromParts",
            "comment": " Create a `Date` from the following parts, given in local time:\n\n- year\n- month\n- day\n- hour\n- minute\n- second\n- millisecond\n\n\n    import Date exposing (Month(..))\n    import Date.Extra as Date\n\n    Date.fromParts 1999 Dec 31 23 59 0 0\n    -- <31 December 1999, 23:59, local time>\n\nThe values of the parts are not checked to ensure a valid date representation,\nnor are they clamped to a valid range; instead, providing values outside a\nvalid range results in underflow or overflow.\n\n    Date.fromParts 2007 Feb 29 0 0 0 0\n    -- <1 March 2007>\n",
            "type": "Int -> Date.Month -> Int -> Int -> Int -> Int -> Int -> Date.Date"
          },
          {
            "name": "fromSpec",
            "comment": " Create a `Date` from a specified time zone, time of day, and day.\n\n    Date.fromSpec\n      local\n      noTime\n      (calendarDate 2000 Jan 1)\n    -- <1 January 2000, local time>\n\n    Date.fromSpec\n      utc\n      noTime\n      (weekDate 2009 1 1)\n    -- <29 December 2008, UTC>\n\n    Date.fromSpec\n      (offset -180)\n      (atTime 20 0 0 0)\n      (ordinalDate 2016 218)\n    -- <5 August 2016, 23:00, UTC>\n\nWhen a `Date` is created with a specified time zone offset (e.g. `offset -180`),\nits extractions still reflect the current machine's local time, and\n`Date.toTime` still reflects its UTC time.\n",
            "type": "Date.Extra.TimeZone -> Date.Extra.TimeSpec -> Date.Extra.DateSpec -> Date.Date"
          },
          {
            "name": "isBetween",
            "comment": " Test if a date is within a given range, inclusive of the range values. The\nexpression `Date.isBetween a b x` tests if `x` is between `a` and `b`.\n",
            "type": "Date.Date -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "local",
            "comment": " Do not specify a time zone, but use the local offset instead.\n",
            "type": "Date.Extra.TimeZone"
          },
          {
            "name": "monthNumber",
            "comment": " Extract the month number of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 6.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "noTime",
            "comment": " Do not specify a time of day (default to 00:00).\n",
            "type": "Date.Extra.TimeSpec"
          },
          {
            "name": "offset",
            "comment": " Create a `TimeZone` with a specific offset from UTC time, given in minutes.\n",
            "type": "Int -> Date.Extra.TimeZone"
          },
          {
            "name": "offsetFromUtc",
            "comment": " Extract the local offset from UTC time, in minutes, of a date. Given a date\nwith a local offset of UTC-05:00 this returns the integer -300.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "ordinalDate",
            "comment": " Create a `DateSpec` from ordinal-date parts (year, ordinalDay).\n",
            "type": "Int -> Int -> Date.Extra.DateSpec"
          },
          {
            "name": "ordinalDay",
            "comment": " Extract the ordinal day of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 174.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "quarter",
            "comment": " Extract the quarter of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 2.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "range",
            "comment": " Create a list of dates, at rounded intervals, increasing by a step value,\nbetween two dates. The list will start at or after the first date, and end\nbefore the second date.\n\n    Date.range Day 2\n      (Date.fromParts 2007 Mar 15 11 55 0 0)\n      (Date.fromParts 2007 Mar 22 0 0 0 0)\n    -- [<16 March 2007>, <18 March 2007>, <20 March 2007>]\n",
            "type": "Date.Extra.Interval -> Int -> Date.Date -> Date.Date -> List Date.Date"
          },
          {
            "name": "toFormattedString",
            "comment": " Convert a date to a string using a pattern as a template.\n\n    Date.toFormattedString\n      \"EEEE, MMMM d, y 'at' h:mm a\"\n      (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"Thursday, March 15, 2007 at 1:45 PM\"\n\nEach alphabetic character in the pattern represents date or time information;\nthe number of times a character is repeated specifies the form of the name to\nuse (e.g. \"Tue\", \"Tuesday\") or the padding of numbers (e.g. \"1\", \"01\").\nFormatting characters are escaped within single-quotes, and a single-quote is\nescaped as a sequence of two single-quotes, whether appearing inside or outside\nan escaped sequence.\n\nPatterns are based on Date Format Patterns in [Unicode Technical\nStandard #35](http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns).\nOnly the following subset of formatting characters are available:\n\n    \"y\" -- year\n    \"Y\" -- week-numbering year\n    \"Q\" -- quarter\n    \"M\" -- month\n    \"w\" -- week number\n    \"d\" -- day\n    \"D\" -- ordinal day\n    \"E\" -- day of week\n    \"e\" -- weekday number / day of week\n    \"a\" -- day period (AM, PM)\n    \"b\" -- day period (am, pm, noon, midnight)\n    \"h\" -- hour (12-hour clock)\n    \"H\" -- hour (24-hour clock)\n    \"m\" -- minute\n    \"s\" -- second\n    \"S\" -- fractional second\n    \"X\" -- time offset, using \"Z\" when offset is 0\n    \"x\" -- time offset\n\nThe non-standard pattern field \"ddd\" is available to indicate the day of the\nmonth with an ordinal suffix (e.g. \"1st\", \"15th\"), as the current standard does\nnot include such a field.\n\n    Date.toFormattedString\n      \"MMMM ddd, y\"\n      (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"March 15th, 2007\"\n",
            "type": "String -> Date.Date -> String"
          },
          {
            "name": "toIsoString",
            "comment": " Convenience function for formatting a date to ISO 8601 (extended\ndate and time format with local time offset).\n\n    Date.toIsoString (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"2007-03-15T13:45:56.067-04:00\"\n    -- (example has a local offset of UTC-04:00)\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "toUtcFormattedString",
            "comment": " Convert a date to a string just like `toFormattedString`, but using the UTC\nrepresentation instead of the local representation of the date.\n",
            "type": "String -> Date.Date -> String"
          },
          {
            "name": "toUtcIsoString",
            "comment": " Convenience function for formatting a date, in UTC representation, to ISO\n8601 (extended date and time format with \"Z\" for time offset).\n\n    Date.toUtcIsoString (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"2007-03-15T17:45:56.067Z\"\n    -- (example has a local offset of UTC-04:00)\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "utc",
            "comment": " UTC time zone.\n",
            "type": "Date.Extra.TimeZone"
          },
          {
            "name": "weekDate",
            "comment": " Create a `DateSpec` from week-date parts (weekYear, weekNumber, weekdayNumber).\n",
            "type": "Int -> Int -> Int -> Date.Extra.DateSpec"
          },
          {
            "name": "weekNumber",
            "comment": " Extract the week number of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 25.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "weekYear",
            "comment": " Extract the week-numbering year of a date. Given the date 23 June\n1990 at 11:45 a.m. this returns the integer 1990.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "weekdayNumber",
            "comment": " Extract the weekday number (beginning at 1 for Monday) of a date. Given\nthe date 23 June 1990 at 11:45 a.m. this returns the integer 6.\n",
            "type": "Date.Date -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Facts",
        "comment": " This module contains reference information that may be useful when working with\ndates, but it doesn't contain functions for working with the `Date` type directly.\n\n# Basics\n@docs isLeapYear, daysInMonth, daysBeforeStartOfMonth, months\n\n# Conversions\n@docs monthNumberFromMonth, monthFromMonthNumber, weekdayNumberFromDayOfWeek, dayOfWeekFromWeekdayNumber\n\n# Constants\nValues for the number of milliseconds per date part. These are equivalent to\nthe constants available in the `Time` core library, but typed as integers\ninstead of floats.\n@docs msPerSecond, msPerMinute, msPerHour, msPerDay\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayOfWeekFromWeekdayNumber",
            "comment": "\n    dayOfWeekFromWeekdayNumber 1 -- Mon\n",
            "type": "Int -> Date.Day"
          },
          {
            "name": "daysBeforeStartOfMonth",
            "comment": "\n    daysBeforeStartOfMonth 2000 Mar -- 60\n    daysBeforeStartOfMonth 2001 Mar -- 59\n",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "daysInMonth",
            "comment": "\n    daysInMonth 2000 Feb -- 29\n    daysInMonth 2001 Feb -- 28\n",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "isLeapYear",
            "comment": "",
            "type": "Int -> Bool"
          },
          {
            "name": "monthFromMonthNumber",
            "comment": "\n    monthFromMonthNumber 1 -- Jan\n",
            "type": "Int -> Date.Month"
          },
          {
            "name": "monthNumberFromMonth",
            "comment": "\n    monthNumberFromMonth Jan -- 1\n",
            "type": "Date.Month -> Int"
          },
          {
            "name": "months",
            "comment": " An ordered list of `Date.Month` values.\n",
            "type": "List Date.Month"
          },
          {
            "name": "msPerDay",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "msPerHour",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "msPerMinute",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "msPerSecond",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "weekdayNumberFromDayOfWeek",
            "comment": "\n    weekdayNumberFromDayOfWeek Mon -- 1\n",
            "type": "Date.Day -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "justinmimbs/elm-date-selector",
    "version": "1.0.2",
    "docs": [
      {
        "name": "DateSelectorDropdown",
        "comment": " Create a button that displays a `DateSelector` view below itself when\nclicked.\n\n## Default Button\n@docs view\n\n## Custom Button\n@docs viewWithButton\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "view",
            "comment": " The default button is a read-only text input that displays the selected\ndate in \"yyyy-mm-dd\" format.\n\nThe first argument is the message you want to receive to toggle the dropdown;\nthe second argument constructs a message from the user-selected date. The third\nargument indicates whether or not the `DateSelector` view should be displayed.\nThe final three arguments are used to create the `DateSelector` view if\nnecessary.\n\n    DateSelectorDropdown.view\n      toggleDropdownMsg\n      toSelectDateMsg\n      isOpen\n      minimum\n      maximum\n      selected\n",
            "type": "msg -> (Date.Date -> msg) -> Bool -> Date.Date -> Date.Date -> Maybe.Maybe Date.Date -> Html.Html msg"
          },
          {
            "name": "viewWithButton",
            "comment": " This function is almost the same as `view`, but takes, as its first\nargument, the function to create the custom button. The function to create the\ncustom button will receive _isOpen_ and _selected_, and the `Html` it creates\nis responsible for producing any `msg` needed to open the dropdown.\n\n    DateSelectorDropdown.viewWithButton\n      viewButton\n      closeDropdownMsg\n      toSelectDateMsg\n      isOpen\n      minimum\n      maximum\n      selected\n\nA full example is available [here](https://github.com/justinmimbs/elm-date-selector/blob/master/examples/3-custom-button.elm).\n",
            "type": "(Bool -> Maybe.Maybe Date.Date -> Html.Html msg) -> msg -> (Date.Date -> msg) -> Bool -> Date.Date -> Date.Date -> Maybe.Maybe Date.Date -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "DateSelector",
        "comment": " Create a user interface for selecting dates.\n\n@docs view\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "view",
            "comment": " Create a date selector by providing the minimum and maximum selectable\ndates, and a selected date if there is one.\n\n    DateSelector.view\n      minimum\n      maximum\n      selected\n\nThe resulting `Html` produces `Date` messages when the user selects a date. The\n`Date` values produced will always be within the bounds provided.\n",
            "type": "Date.Date -> Date.Date -> Maybe.Maybe Date.Date -> Html.Html Date.Date"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "jvoigtlaender/elm-memo",
    "version": "2.0.5",
    "docs": [
      {
        "name": "Memo",
        "comment": " Most basic memoization functionality.\n\nFor documentation, see the [README](.).\n\n@docs memo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "memo",
            "comment": "\n",
            "type": "(comparable -> b) -> List comparable -> comparable -> Maybe.Maybe b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "jvoigtlaender/elm-warshall",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Warshall",
        "comment": " The Warshall Algorithm, on type `Matrix` from the\n[`eeue56/elm-flat-matrix` package](http://package.elm-lang.org/packages/eeue56/elm-flat-matrix/latest).\n\n@docs warshall\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "warshall",
            "comment": " `warshall 4` on matrix\n\n    [ [ False, True,  False, False ]\n    , [ False, False, True,  False ]\n    , [ False, False, False, True  ]\n    , [ False, False, False, False ]\n    ]\n\ngives matrix\n\n    [ [ False, True,  True,  True  ]\n    , [ False, False, True,  True  ]\n    , [ False, False, False, True  ]\n    , [ False, False, False, False ]\n    ]\n",
            "type": "Int -> Matrix.Matrix Bool -> Matrix.Matrix Bool"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-astar",
    "version": "2.0.4",
    "docs": [
      {
        "name": "AStar",
        "comment": " The A-Star pathfinding algorithm.\n\n@docs Position\n@docs Path\n@docs findPath\n@docs straightLineCost\n@docs pythagoreanCost\n",
        "aliases": [
          {
            "name": "Path",
            "comment": " A path is a `List` of `Position`s.\n",
            "args": [],
            "type": "List AStar.Position"
          },
          {
            "name": "Position",
            "comment": " A position is just a pair of (x,y) coordinates.\n",
            "args": [],
            "type": "( Int, Int )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "findPath",
            "comment": " Find a path between the `start` and `end` `Position`s. You must\n  supply a cost function and a move function.\n\n  The cost function must estimate the distance between any two\n  positions. It doesn't really matter how accurate this estimate is,\n  as long as it *never* underestimates.\n\n  The move function takes a `Position` and returns a `Set` of possible\n  places you can move to in one step.\n\n  If this function returns `Nothing`, there is no path between the two\n  points. Otherwise it returns `Just` a `List` of steps from `start`\n  to `end`.\n\n  Example usage.\n\n     import AStar exposing (..)\n\n\n     type World =\n         ...your custom code...\n\n\n     movesFrom : World -> Position -> Set Position\n     movesFrom world (x,y) =\n         ...your custom code...\n\n\n     findPath\n         straightLineCost\n         (movesFrom currentWorld)\n         ( 0, 0 ) ( 2, 0 )\n     --> Just [ ( 1, 0 ), ( 2, 0 ) ]\n",
            "type": "(AStar.Position -> AStar.Position -> Float) -> (AStar.Position -> Set.Set AStar.Position) -> AStar.Position -> AStar.Position -> Maybe.Maybe AStar.Path"
          },
          {
            "name": "pythagoreanCost",
            "comment": " An alternative costing algorithm, which calculates pythagorean distance.\n",
            "type": "AStar.Position -> AStar.Position -> Float"
          },
          {
            "name": "straightLineCost",
            "comment": " A simple costing algorithm. Think of it as the number of moves a\nrook/castle would have to make on a chessboard. Even if your piece can\nmove diagonally it will still work! A-Star only requires that the cost\nfunction never *under*estimates.\n",
            "type": "AStar.Position -> AStar.Position -> Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-cdn",
    "version": "1.3.1",
    "docs": [
      {
        "name": "CDN",
        "comment": " CDN provides handy links to the web CSS frameworks you want at-hand.\n\nTo use, just put the stylesheet you want in your top-level view function, like so:\n\n    import CDN exposing (bootstrap)\n\n    rootView model =\n        div []\n            [ bootstrap.css\n            , ...\n            ]\n\n@docs bootstrap\n@docs skeleton\n@docs reset\n@docs foundation\n@docs fontAwesome\n@docs bulma\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bootstrap",
            "comment": " [Bootstrap 3](http://getbootstrap.com/)\n",
            "type": "{ css : Html.Html msg, theme : Html.Html msg, js : Html.Html msg }"
          },
          {
            "name": "bulma",
            "comment": " [Bulma 0.1.2](http://bulma.io/)\n",
            "type": "{ css : Html.Html msg }"
          },
          {
            "name": "fontAwesome",
            "comment": " [FontAwesome 4](http://fontawesome.io/)\n",
            "type": "{ css : Html.Html msg }"
          },
          {
            "name": "foundation",
            "comment": " [Foundation 6](http://foundation.zurb.com/)\n",
            "type": "{ css : Html.Html msg, js : Html.Html msg }"
          },
          {
            "name": "reset",
            "comment": " [Eric Meyer's CSS reset](http://meyerweb.com/eric/tools/css/reset/)\n",
            "type": "{ css : Html.Html msg }"
          },
          {
            "name": "skeleton",
            "comment": " [Skeleton 2](http://getskeleton.com/)\n",
            "type": "{ css : Html.Html msg }"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-dialog",
    "version": "4.0.2",
    "docs": [
      {
        "name": "Dialog",
        "comment": " Elm Modal Dialogs.\n\n@docs Config, view, map, mapMaybe\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration for the dialog you display. The `header`, `body`\nand `footer` are all `Maybe (Html msg)` blocks. Those `(Html msg)` blocks can\nbe as simple or as complex as any other view function.\n\nUse only the ones you want and set the others to `Nothing`.\n\nThe `closeMessage` is an optional `Signal.Message` we will send when the user\nclicks the 'X' in the top right. If you don't want that X displayed, use `Nothing`.\n",
            "args": [
              "msg"
            ],
            "type": "{ closeMessage : Maybe.Maybe msg , containerClass : Maybe.Maybe String , header : Maybe.Maybe (Html.Html msg) , body : Maybe.Maybe (Html.Html msg) , footer : Maybe.Maybe (Html.Html msg) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "map",
            "comment": "\nThis function is useful when nesting components with the Elm\nArchitecture. It lets you transform the messages produced by a\nsubtree.\n",
            "type": "(a -> b) -> Dialog.Config a -> Dialog.Config b"
          },
          {
            "name": "mapMaybe",
            "comment": " For convenience, a varient of `map` which assumes you're dealing with a `Maybe (Config a)`, which is often the case.\n",
            "type": "(a -> b) -> Maybe.Maybe (Dialog.Config a) -> Maybe.Maybe (Dialog.Config b)"
          },
          {
            "name": "view",
            "comment": " Renders a modal dialog whenever you supply a `Config msg`.\n\nTo use this, include this view in your *top-level* view function,\nright at the top of the DOM tree, like so:\n\n    type Message\n      = ...\n      | ...\n      | AcknowledgeDialog\n\n\n    view : -> Model -> Html Message\n    view model =\n      div\n        []\n        [ ...\n        , ...your regular view code....\n        , ...\n        , Dialog.view\n            (if model.shouldShowDialog then\n              Just { closeMessage = Just AcknowledgeDialog\n                   , containerClass = Just \"your-container-class\"\n                   , header = Just (text \"Alert!\"\n                   , body = Just (p [] [text \"Let me tell you something important...\"])\n                   , footer = Nothing\n                   }\n             else\n              Nothing\n            )\n        ]\n\n\nIt's then up to you to replace `model.shouldShowDialog` with whatever\nlogic should cause the dialog to be displayed, and to handle an\n`AcknowledgeDialog` message with whatever logic should occur when the user\ncloses the dialog.\n\nSee the `examples/` directory for examples of how this works for apps\nlarge and small.\n\n",
            "type": "Maybe.Maybe (Dialog.Config msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-exts",
    "version": "26.1.0",
    "docs": [
      {
        "name": "Exts.Html",
        "comment": " Extensions to the `Html` library.\n\n@docs matchText\n@docs nbsp\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matchText",
            "comment": " Highlight regex matches in a given piece of text. This is most easily explained with an example:\n\n    import Regex exposing (regex)\n    import Html.Attributes exposing (class)\n\n    matchText\n      [class \"match\"]\n      (regex \"the\")\n      \"the quick brown fox jumped over the lazy dog\"\n\n    =>\n\n    [span [class \"match\"] [text \"the\"]\n    ,text \" quick brown fox jumped over \"\n    ,span [class \"match\"] [text \"the\"]\n    ,text \" lazy dog\"]\n\n    Now you can add a CSS rule like `.match {background-color: yellow;}` to highlight matches\n    for the user.\n\n    (Note that you can supply any attributes you like for the matched sections, or an empty list.)\n\n",
            "type": "List (Html.Attribute msg) -> Regex.Regex -> String -> List (Html.Html msg)"
          },
          {
            "name": "nbsp",
            "comment": " A non-breaking space. elm-html doesn't support escape sequences\nlike `text \"&nbsp\"`, so use this string instead.\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Html.Events",
        "comment": " Extensions to the `Html.Events` library.\n\n@docs onEnter\n@docs onSelect\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onEnter",
            "comment": " Send a message when the user hits enter.\n",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onSelect",
            "comment": " An event handler for `<select>` tags. Set the child `<option>` tag's value to \"\" to get a `Nothing`.\n",
            "type": "(Maybe.Maybe String -> msg) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.List",
        "comment": " Extensions to the core `List` library.\n\n@docs chunk\n@docs mergeBy\n@docs singleton\n@docs maybeSingleton\n@docs firstMatch\n@docs rest\n@docs unique\n@docs exactlyOne\n@docs maximumBy\n@docs minimumBy\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chunk",
            "comment": " Split a list into chunks of length `n`.\n\n  Be aware that the last sub-list may be smaller than `n`-items long.\n\n  For example `chunk 3 [1..10] => [[1,2,3], [4,5,6], [7,8,9], [10]]`\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "exactlyOne",
            "comment": " Extract the first item from the `List`, demanding that there be exactly one element.\n\nFor example, `Json.Decode.customDecoder string exactlyOne` creates a\ndecoder that expects a list of strings, where there is only one\nelement in the `List`.\n\nIf you think that's weird, you haven't seen enough real-world JSON. ;-)\n",
            "type": "List a -> Result.Result String a"
          },
          {
            "name": "firstMatch",
            "comment": " Find the first element in the `List` that matches the given predicate.\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "maximumBy",
            "comment": " Like `List.maximum`, but it works on non-comparable types by taking a custom function.\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "maybeSingleton",
            "comment": " Wrap a maybe item into a `List`. If the item is `Nothing`, the `List` is empty.\n",
            "type": "Maybe.Maybe a -> List a"
          },
          {
            "name": "mergeBy",
            "comment": " Merge two lists. The first argument is a function which returns\nthe unique ID of each element. Where an element appears more than\nonce, the last won wins.\n",
            "type": "(a -> comparable) -> List a -> List a -> List a"
          },
          {
            "name": "minimumBy",
            "comment": " Like `List.minimum`, but it works on non-comparable types by taking a custom function.\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "rest",
            "comment": " Like List.tail, but if the list is empty it returns an empty list rather than `Nothing`.\n",
            "type": "List a -> List a"
          },
          {
            "name": "singleton",
            "comment": " Wrap a single item into a `List`.\n",
            "type": "a -> List a"
          },
          {
            "name": "unique",
            "comment": " Return a new list with duplicates removed. Order is preserved.\n",
            "type": "List comparable -> List comparable"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Function",
        "comment": " Extensions so generic they just operate on functions.\n\n@docs (>>>)\n@docs (<<<)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "<<<",
            "comment": " Right-to-left composition of functions that rely on an environment.\n",
            "type": "(env -> b -> c) -> (env -> a -> b) -> env -> a -> c"
          },
          {
            "name": ">>>",
            "comment": " Left-to-right composition of functions that rely on an environment.\n\nExample:\n\n    quux (bar (foo model x) model) model\n\nBecomes:\n\n    (foo >>> bar >>> quux) model x\n\nThe operator `>>>` mirrors Haskell's Control.Arrow, because really\nthis is an arrow specialised to Reader.\n",
            "type": "(env -> a -> b) -> (env -> b -> c) -> env -> a -> c"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Validation",
        "comment": " Simple tools for validation. See also [Richard Feldman's elm-validate](http://package.elm-lang.org/packages/rtfeldman/elm-validate/latest).\n\n@docs Validator\n@docs apply\n@docs (|:)\n@docs required\n@docs notBlank\n@docs matches\n@docs email\n@docs emailRegex\n",
        "aliases": [
          {
            "name": "Validator",
            "comment": " A validator is a function that takes a possibly-invalid form, and\neither returns an error message, or a form that is definitely valid. For example:\n\n    type alias Form =\n      { message : Maybe String\n      , email : Maybe String\n      , firstName : Maybe String\n      , age : Maybe Int\n      }\n\n    type alias ValidForm =\n      { message : String\n      , email : String\n      , firstName : String\n      , age : Int\n      }\n\n    validateForm : Form -> Result String ValidForm\n    validateForm form =\n      Ok ValidForm\n        |: notBlank \"Message is required and may not be blank.\" form.message\n        |: email \"Email is required and may not be blank.\" form.email\n        |: matches (caseInsensitive (regex \"^[a-z]+$\")) \"First name may only contain letters.\" form.firstName\n        |: required \"Age is required\" form.age\n\nAn error message is typically a `String`, but may be any type you choose.\n",
            "args": [
              "e",
              "a",
              "b"
            ],
            "type": "Maybe.Maybe a -> Result.Result e b"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Chain validators together.\n\n(Hat tip to CircuitHub, who inspired the syntax and guided the code with their [elm-json-extra](http://package.elm-lang.org/packages/circuithub/elm-json-extra/latest) library.)\n",
            "type": "Result.Result e (a -> b) -> Result.Result e a -> Result.Result e b"
          },
          {
            "name": "email",
            "comment": " A basic email regex. This is incredibly simplistic, but is\nincluded for convenience.\n\nRemember that the only real way to validate an email address is to\nsend something to it and get a reply.\n",
            "type": "e -> Exts.Validation.Validator e String String"
          },
          {
            "name": "emailRegex",
            "comment": " ",
            "type": "Regex.Regex"
          },
          {
            "name": "matches",
            "comment": " A field that must match the given regex.\n",
            "type": "Regex.Regex -> e -> Exts.Validation.Validator e String String"
          },
          {
            "name": "notBlank",
            "comment": " A field that might be `Nothing`, but is only valid if it is a non-empty `String`.\n",
            "type": "e -> Exts.Validation.Validator e String String"
          },
          {
            "name": "required",
            "comment": " A field that might be `Nothing`, but is only valid if it is `Just a`.\n",
            "type": "e -> Exts.Validation.Validator e a a"
          },
          {
            "name": "|:",
            "comment": " Convenient synonym for `apply`.\n",
            "type": "Result.Result e (a -> b) -> Result.Result e a -> Result.Result e b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Task",
        "comment": " Extensions to the core `Process` library.\n\n@docs delay\n@docs asCmd\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "asCmd",
            "comment": " Turn a `Task` into a `Cmd` which returns a `Result`.\n",
            "type": "Task.Task e a -> Platform.Cmd.Cmd (Result.Result e a)"
          },
          {
            "name": "delay",
            "comment": " Delay running the `Task` for a given `Time`.\n\nThis is just the example given in `Task.sleep` wrapped up, because it's o useful.\n",
            "type": "Time.Time -> Task.Task e a -> Task.Task e a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Set",
        "comment": " Extensions to the core `Set` library.\n\n@docs select\n@docs uniqueItems\n@docs toggle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "select",
            "comment": " Pull any items from a list where (f x) is in the given set.\n",
            "type": "(a -> comparable) -> Set.Set comparable -> List a -> List a"
          },
          {
            "name": "toggle",
            "comment": " If x is a member of the set, remove it. Otherwise, add it.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "uniqueItems",
            "comment": " Dive into a `List` to get a set of values.\n\n  For example, pulling a `Set` of countries from a `List` of users.\n",
            "type": "(a -> Maybe.Maybe comparable) -> List a -> Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Tuple",
        "comment": " Extensions for tuples.\n\n@docs indexedPair\n@docs mapFirst\n@docs mapSecond\n@docs both\n@docs pair\n@docs fork\n@docs onFirst\n@docs onSecond\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "both",
            "comment": " Update both components of a pair with a single function.\n",
            "type": "(a -> b) -> ( a, a ) -> ( b, b )"
          },
          {
            "name": "fork",
            "comment": " Generate a pair from a single value and a left & right function.\n",
            "type": "(a -> b) -> (a -> c) -> a -> ( b, c )"
          },
          {
            "name": "indexedPair",
            "comment": " Turn a items into a key-value pair.\n\n  See also `Exts.Dict.indexBy` and `Exts.Dict.groupBy`.\n",
            "type": "(a -> b) -> a -> ( b, a )"
          },
          {
            "name": "mapFirst",
            "comment": " Apply a function to the first component of a pair.\n",
            "type": "(a -> b) -> ( a, x ) -> ( b, x )"
          },
          {
            "name": "mapSecond",
            "comment": " Apply a function to the second component of a pair.\n",
            "type": "(x -> y) -> ( a, x ) -> ( a, y )"
          },
          {
            "name": "onFirst",
            "comment": " Apply a function that considers both elements of a pair and changes the first.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> ( c, b )"
          },
          {
            "name": "onSecond",
            "comment": " Apply a function that considers both elements of a pair and changes the second.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> ( a, c )"
          },
          {
            "name": "pair",
            "comment": " Update both components of a pair with two functions.\n",
            "type": "(a -> b) -> (x -> y) -> ( a, x ) -> ( b, y )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Maybe",
        "comment": " Extensions to the core `Maybe` library.\n\n@docs isJust\n@docs isNothing\n@docs maybe\n@docs mappend\n@docs catMaybes\n@docs join\n@docs maybeDefault\n@docs matches\n@docs validate\n@docs when\n@docs oneOf\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "catMaybes",
            "comment": " Extract all the `Just` values from a List of Maybes.\n",
            "type": "List (Maybe.Maybe a) -> List a"
          },
          {
            "name": "isJust",
            "comment": " Boolean checks.\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "isNothing",
            "comment": " ",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "join",
            "comment": " Join together two `Maybe` values using the supplied function. If\neither value is `Nothing`, the result is `Nothing`.\n",
            "type": "(a -> b -> c) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c"
          },
          {
            "name": "mappend",
            "comment": " Join two `Maybe`s together as though they were one.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe ( a, b )"
          },
          {
            "name": "matches",
            "comment": " Check the if value in the `Maybe` matches a predicate. If it does, pass it through, if not, return nothing.\n\n    matches isEven (Just 2) => Just 2\n    matches isEven (Just 3) => Nothing\n    matches isEven Nothing => Nothing\n",
            "type": "(a -> Bool) -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "maybe",
            "comment": " Apply a function to a value, returning the default if the value is `Nothing`.\n",
            "type": "b -> (a -> b) -> Maybe.Maybe a -> b"
          },
          {
            "name": "maybeDefault",
            "comment": " If `x` is a `Just _` value, return it, otherwise return `Just default`.\n",
            "type": "a -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "oneOf",
            "comment": " Return the first non-`Nothing` entry in the list.\n",
            "type": "List (Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "validate",
            "comment": " Validate a value against a predicate, returning a `Maybe`.\n\n    validate isEven 2 => Just 2\n    validate isEven 3 => Nothing\n",
            "type": "(a -> Bool) -> a -> Maybe.Maybe a"
          },
          {
            "name": "when",
            "comment": " When `test` returns true, return `Just value`, otherwise return `Nothing`.\n",
            "type": "Bool -> a -> Maybe.Maybe a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.String",
        "comment": " Extensions to the core `String` library.\n\n@docs removePrefix\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "removePrefix",
            "comment": " Strip a leading string from a `String`.\n",
            "type": "String -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Json.Encode",
        "comment": " Extensions to the core `Json.Encode` library.\n\n@docs set\n@docs dict\n@docs tuple2\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Encode a `Dict` to a JSON array .\n",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "set",
            "comment": " Encode a `Set` to a JSON array .\n",
            "type": "(comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value"
          },
          {
            "name": "tuple2",
            "comment": " Encode a pair to a JSON array .\n",
            "type": "(a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> ( a, b ) -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Result",
        "comment": " Extensions to the core `Result` library.\n\n@docs mapBoth\n@docs isOk\n@docs isErr\n@docs fromOk\n@docs fromErr\n@docs mappend\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromErr",
            "comment": " ",
            "type": "Result.Result e a -> Maybe.Maybe e"
          },
          {
            "name": "fromOk",
            "comment": " Convert a `Result` to a `Maybe`.\n",
            "type": "Result.Result e a -> Maybe.Maybe a"
          },
          {
            "name": "isErr",
            "comment": " ",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "isOk",
            "comment": " Boolean checks for success/failure.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " Apply functions to both sides of a `Result`, transforming the error and ok types.\n",
            "type": "(e -> f) -> (a -> b) -> Result.Result e a -> Result.Result f b"
          },
          {
            "name": "mappend",
            "comment": " Monoidal append - join two Results together as though they were one.\n",
            "type": "Result.Result e a -> Result.Result e b -> Result.Result e ( a, b )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.LatLng",
        "comment": " Calculations between points on the earth.\n\n@docs distanceBetween, bearingTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bearingTo",
            "comment": " Calculate the heading you'd need to travel on to get from point a to point b.\n",
            "type": "{ a | latitude : Float, longitude : Float } -> { b | latitude : Float, longitude : Float } -> Float"
          },
          {
            "name": "distanceBetween",
            "comment": " Calculate the distance in kilometers between two points.\n\n  Note that this assumes the earth is spherical, which is not true, but may be true enough for your purposes.\n",
            "type": "{ a | latitude : Float, longitude : Float } -> { b | latitude : Float, longitude : Float } -> Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Int",
        "comment": " Extensions to the core `Int` library.\n\n@docs floorBy\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "floorBy",
            "comment": " Round an int down to the nearest multiple of a factor.\n\n    floorBy  2 143 => Just 142\n    floorBy 50 143 => Just 100\n    floorBy  0 143 => Nothing\n",
            "type": "Int -> Int -> Maybe.Maybe Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Json.Decode",
        "comment": " Extensions to the core `Json.Decode` library.\n\n@docs stringIgnoringBlanks\n@docs decodeTime\n@docs decodeDate\n@docs parseWith\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decodeDate",
            "comment": " Decode a Date from a string, using the same format as the core\nfunction `Date.fromString`.\n",
            "type": "Json.Decode.Decoder Date.Date"
          },
          {
            "name": "decodeTime",
            "comment": " Decode a Date from seconds-since-the-epoch.\n",
            "type": "Json.Decode.Decoder Date.Date"
          },
          {
            "name": "parseWith",
            "comment": " Lift a function that parses things, returning a `Result`, into the world of decoders.\n\nIf you're looking for the pre-0.18 function `customDecoder`, you can\nuse something like this instead:\n\n``` elm\ndecodeUUID : Decoder UUID\ndecodeUUID =\n    string\n        |> andThen (parseWith UUID.fromString)\n```\n",
            "type": "(a -> Result.Result String b) -> a -> Json.Decode.Decoder b"
          },
          {
            "name": "stringIgnoringBlanks",
            "comment": " A decoder like `(maybe string)`, except an empty or whitespace string is treated as `Nothing`.\n\nUseful for dirty data-models.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe String)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Html.Bootstrap.Glyphicons",
        "comment": " Type-safe glyphicons for Twitter Bootstrap 3 users.\n\n@docs glyphicon\n@docs Glyphicon\n",
        "aliases": [],
        "types": [
          {
            "name": "Glyphicon",
            "comment": " A type-safe list of all available glyphicons in Bootstrap. To fit\nElm's syntax we convert from kebab-case to CamelCase, so\n`\"glyphicon-star-empty\"` becomes the type constructor `StarEmpty`.\n",
            "args": [],
            "cases": [
              [
                "Asterisk",
                []
              ],
              [
                "Plus",
                []
              ],
              [
                "Euro",
                []
              ],
              [
                "Eur",
                []
              ],
              [
                "Minus",
                []
              ],
              [
                "Cloud",
                []
              ],
              [
                "Envelope",
                []
              ],
              [
                "Pencil",
                []
              ],
              [
                "Glass",
                []
              ],
              [
                "Music",
                []
              ],
              [
                "Search",
                []
              ],
              [
                "Heart",
                []
              ],
              [
                "Star",
                []
              ],
              [
                "StarEmpty",
                []
              ],
              [
                "User",
                []
              ],
              [
                "Film",
                []
              ],
              [
                "ThLarge",
                []
              ],
              [
                "Th",
                []
              ],
              [
                "ThList",
                []
              ],
              [
                "Ok",
                []
              ],
              [
                "Remove",
                []
              ],
              [
                "ZoomIn",
                []
              ],
              [
                "ZoomOut",
                []
              ],
              [
                "Off",
                []
              ],
              [
                "Signal",
                []
              ],
              [
                "Cog",
                []
              ],
              [
                "Trash",
                []
              ],
              [
                "Home",
                []
              ],
              [
                "File",
                []
              ],
              [
                "Time",
                []
              ],
              [
                "Road",
                []
              ],
              [
                "DownloadAlt",
                []
              ],
              [
                "Download",
                []
              ],
              [
                "Upload",
                []
              ],
              [
                "Inbox",
                []
              ],
              [
                "PlayCircle",
                []
              ],
              [
                "Repeat",
                []
              ],
              [
                "Refresh",
                []
              ],
              [
                "ListAlt",
                []
              ],
              [
                "Lock",
                []
              ],
              [
                "Flag",
                []
              ],
              [
                "Headphones",
                []
              ],
              [
                "VolumeOff",
                []
              ],
              [
                "VolumeDown",
                []
              ],
              [
                "VolumeUp",
                []
              ],
              [
                "Qrcode",
                []
              ],
              [
                "Barcode",
                []
              ],
              [
                "Tag",
                []
              ],
              [
                "Tags",
                []
              ],
              [
                "Book",
                []
              ],
              [
                "Bookmark",
                []
              ],
              [
                "Print",
                []
              ],
              [
                "Camera",
                []
              ],
              [
                "Font",
                []
              ],
              [
                "Bold",
                []
              ],
              [
                "Italic",
                []
              ],
              [
                "TextHeight",
                []
              ],
              [
                "TextWidth",
                []
              ],
              [
                "AlignLeft",
                []
              ],
              [
                "AlignCenter",
                []
              ],
              [
                "AlignRight",
                []
              ],
              [
                "AlignJustify",
                []
              ],
              [
                "List",
                []
              ],
              [
                "IndentLeft",
                []
              ],
              [
                "IndentRight",
                []
              ],
              [
                "FacetimeVideo",
                []
              ],
              [
                "Picture",
                []
              ],
              [
                "MapMarker",
                []
              ],
              [
                "Adjust",
                []
              ],
              [
                "Tint",
                []
              ],
              [
                "Edit",
                []
              ],
              [
                "Share",
                []
              ],
              [
                "Check",
                []
              ],
              [
                "Move",
                []
              ],
              [
                "StepBackward",
                []
              ],
              [
                "FastBackward",
                []
              ],
              [
                "Backward",
                []
              ],
              [
                "Play",
                []
              ],
              [
                "Pause",
                []
              ],
              [
                "Stop",
                []
              ],
              [
                "Forward",
                []
              ],
              [
                "FastForward",
                []
              ],
              [
                "StepForward",
                []
              ],
              [
                "Eject",
                []
              ],
              [
                "ChevronLeft",
                []
              ],
              [
                "ChevronRight",
                []
              ],
              [
                "PlusSign",
                []
              ],
              [
                "MinusSign",
                []
              ],
              [
                "RemoveSign",
                []
              ],
              [
                "OkSign",
                []
              ],
              [
                "QuestionSign",
                []
              ],
              [
                "InfoSign",
                []
              ],
              [
                "Screenshot",
                []
              ],
              [
                "RemoveCircle",
                []
              ],
              [
                "OkCircle",
                []
              ],
              [
                "BanCircle",
                []
              ],
              [
                "ArrowLeft",
                []
              ],
              [
                "ArrowRight",
                []
              ],
              [
                "ArrowUp",
                []
              ],
              [
                "ArrowDown",
                []
              ],
              [
                "ShareAlt",
                []
              ],
              [
                "ResizeFull",
                []
              ],
              [
                "ResizeSmall",
                []
              ],
              [
                "ExclamationSign",
                []
              ],
              [
                "Gift",
                []
              ],
              [
                "Leaf",
                []
              ],
              [
                "Fire",
                []
              ],
              [
                "EyeOpen",
                []
              ],
              [
                "EyeClose",
                []
              ],
              [
                "WarningSign",
                []
              ],
              [
                "Plane",
                []
              ],
              [
                "Calendar",
                []
              ],
              [
                "Random",
                []
              ],
              [
                "Comment",
                []
              ],
              [
                "Magnet",
                []
              ],
              [
                "ChevronUp",
                []
              ],
              [
                "ChevronDown",
                []
              ],
              [
                "Retweet",
                []
              ],
              [
                "ShoppingCart",
                []
              ],
              [
                "FolderClose",
                []
              ],
              [
                "FolderOpen",
                []
              ],
              [
                "ResizeVertical",
                []
              ],
              [
                "ResizeHorizontal",
                []
              ],
              [
                "Hdd",
                []
              ],
              [
                "Bullhorn",
                []
              ],
              [
                "Bell",
                []
              ],
              [
                "Certificate",
                []
              ],
              [
                "ThumbsUp",
                []
              ],
              [
                "ThumbsDown",
                []
              ],
              [
                "HandRight",
                []
              ],
              [
                "HandLeft",
                []
              ],
              [
                "HandUp",
                []
              ],
              [
                "HandDown",
                []
              ],
              [
                "CircleArrowRight",
                []
              ],
              [
                "CircleArrowLeft",
                []
              ],
              [
                "CircleArrowUp",
                []
              ],
              [
                "CircleArrowDown",
                []
              ],
              [
                "Globe",
                []
              ],
              [
                "Wrench",
                []
              ],
              [
                "Tasks",
                []
              ],
              [
                "Filter",
                []
              ],
              [
                "Briefcase",
                []
              ],
              [
                "Fullscreen",
                []
              ],
              [
                "Dashboard",
                []
              ],
              [
                "Paperclip",
                []
              ],
              [
                "HeartEmpty",
                []
              ],
              [
                "Link",
                []
              ],
              [
                "Phone",
                []
              ],
              [
                "Pushpin",
                []
              ],
              [
                "Usd",
                []
              ],
              [
                "Gbp",
                []
              ],
              [
                "Sort",
                []
              ],
              [
                "SortByAlphabet",
                []
              ],
              [
                "SortByAlphabetAlt",
                []
              ],
              [
                "SortByOrder",
                []
              ],
              [
                "SortByOrderAlt",
                []
              ],
              [
                "SortByAttributes",
                []
              ],
              [
                "SortByAttributesAlt",
                []
              ],
              [
                "Unchecked",
                []
              ],
              [
                "Expand",
                []
              ],
              [
                "CollapseDown",
                []
              ],
              [
                "CollapseUp",
                []
              ],
              [
                "LogIn",
                []
              ],
              [
                "Flash",
                []
              ],
              [
                "LogOut",
                []
              ],
              [
                "NewWindow",
                []
              ],
              [
                "Record",
                []
              ],
              [
                "Save",
                []
              ],
              [
                "Open",
                []
              ],
              [
                "Saved",
                []
              ],
              [
                "Import",
                []
              ],
              [
                "Export",
                []
              ],
              [
                "Send",
                []
              ],
              [
                "FloppyDisk",
                []
              ],
              [
                "FloppySaved",
                []
              ],
              [
                "FloppyRemove",
                []
              ],
              [
                "FloppySave",
                []
              ],
              [
                "FloppyOpen",
                []
              ],
              [
                "CreditCard",
                []
              ],
              [
                "Transfer",
                []
              ],
              [
                "Cutlery",
                []
              ],
              [
                "Header",
                []
              ],
              [
                "Compressed",
                []
              ],
              [
                "Earphone",
                []
              ],
              [
                "PhoneAlt",
                []
              ],
              [
                "Tower",
                []
              ],
              [
                "Stats",
                []
              ],
              [
                "SdVideo",
                []
              ],
              [
                "HdVideo",
                []
              ],
              [
                "Subtitles",
                []
              ],
              [
                "SoundStereo",
                []
              ],
              [
                "SoundDolby",
                []
              ],
              [
                "Sound51",
                []
              ],
              [
                "Sound61",
                []
              ],
              [
                "Sound71",
                []
              ],
              [
                "CopyrightMark",
                []
              ],
              [
                "RegistrationMark",
                []
              ],
              [
                "CloudDownload",
                []
              ],
              [
                "CloudUpload",
                []
              ],
              [
                "TreeConifer",
                []
              ],
              [
                "TreeDeciduous",
                []
              ],
              [
                "Cd",
                []
              ],
              [
                "SaveFile",
                []
              ],
              [
                "OpenFile",
                []
              ],
              [
                "LevelUp",
                []
              ],
              [
                "Copy",
                []
              ],
              [
                "Paste",
                []
              ],
              [
                "Alert",
                []
              ],
              [
                "Equalizer",
                []
              ],
              [
                "King",
                []
              ],
              [
                "Queen",
                []
              ],
              [
                "Pawn",
                []
              ],
              [
                "Bishop",
                []
              ],
              [
                "Knight",
                []
              ],
              [
                "BabyFormula",
                []
              ],
              [
                "Tent",
                []
              ],
              [
                "Blackboard",
                []
              ],
              [
                "Bed",
                []
              ],
              [
                "Apple",
                []
              ],
              [
                "Erase",
                []
              ],
              [
                "Hourglass",
                []
              ],
              [
                "Lamp",
                []
              ],
              [
                "Duplicate",
                []
              ],
              [
                "PiggyBank",
                []
              ],
              [
                "Scissors",
                []
              ],
              [
                "Bitcoin",
                []
              ],
              [
                "Btc",
                []
              ],
              [
                "Xbt",
                []
              ],
              [
                "Yen",
                []
              ],
              [
                "Jpy",
                []
              ],
              [
                "Ruble",
                []
              ],
              [
                "Rub",
                []
              ],
              [
                "Scale",
                []
              ],
              [
                "IceLolly",
                []
              ],
              [
                "IceLollyTasted",
                []
              ],
              [
                "Education",
                []
              ],
              [
                "OptionHorizontal",
                []
              ],
              [
                "OptionVertical",
                []
              ],
              [
                "MenuHamburger",
                []
              ],
              [
                "ModalWindow",
                []
              ],
              [
                "Oil",
                []
              ],
              [
                "Grain",
                []
              ],
              [
                "Sunglasses",
                []
              ],
              [
                "TextSize",
                []
              ],
              [
                "TextColor",
                []
              ],
              [
                "TextBackground",
                []
              ],
              [
                "ObjectAlignTop",
                []
              ],
              [
                "ObjectAlignBottom",
                []
              ],
              [
                "ObjectAlignHorizontal",
                []
              ],
              [
                "ObjectAlignLeft",
                []
              ],
              [
                "ObjectAlignVertical",
                []
              ],
              [
                "ObjectAlignRight",
                []
              ],
              [
                "TriangleRight",
                []
              ],
              [
                "TriangleLeft",
                []
              ],
              [
                "TriangleBottom",
                []
              ],
              [
                "TriangleTop",
                []
              ],
              [
                "Console",
                []
              ],
              [
                "Superscript",
                []
              ],
              [
                "Subscript",
                []
              ],
              [
                "MenuLeft",
                []
              ],
              [
                "MenuRight",
                []
              ],
              [
                "MenuDown",
                []
              ],
              [
                "MenuUp",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "glyphicon",
            "comment": " Type-checked Glyphicons.\n",
            "type": "Exts.Html.Bootstrap.Glyphicons.Glyphicon -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Html.Table",
        "comment": " Helpers for simple data tables. Define how a list of items can be\nrendered as a table. The definition is a `List` of `(column-title,\ncolumn-value-accessor)` pairs.\n\n  I find this approach works well for simple tables, but breaks down\n  as soon as you need much customisation. Use it to get you started\n  quickly, but be ready to rewrite when this 80% case no longer suits.\n\n@docs CellDef\n@docs TableDef\n@docs simpleTable\n@docs simpleTableRow\n@docs titleGroup\n@docs valueGroup\n",
        "aliases": [
          {
            "name": "CellDef",
            "comment": " A table definition looks something like:\n\n    [(text \"Name\", .name >> text)\n    ,(text \"Name\", .age >> toString >> text)]\n\n",
            "args": [
              "a",
              "msg"
            ],
            "type": "( Html.Html msg, a -> Html.Html msg )"
          },
          {
            "name": "TableDef",
            "comment": " ",
            "args": [
              "a",
              "msg"
            ],
            "type": "List (Exts.Html.Table.CellDef a msg)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "simpleTable",
            "comment": " Given a table definition, render a list of elements as HTML.\n",
            "type": "Exts.Html.Table.TableDef a msg -> List a -> Html.Html msg"
          },
          {
            "name": "simpleTableRow",
            "comment": " Given a table definition, render an element to a <tr> tag. This is\nlower-level. Usually you will want `simpleTable` instead.\n",
            "type": "Exts.Html.Table.TableDef a msg -> a -> Html.Html msg"
          },
          {
            "name": "titleGroup",
            "comment": " titleGroup and valueGroup are used to create columns that stack multiple pairs. For example:\n\n    [(titleGroup [\"Latitude\", \"Longitude\"]\n     ,valueGroup [.location >> .lat >> toString >> text\n                 ,.location >> .lng >> toString >> text])\n\n",
            "type": "List String -> Html.Html msg"
          },
          {
            "name": "valueGroup",
            "comment": " ",
            "type": "List (a -> Html.Html msg) -> a -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Html.Attributes",
        "comment": " Extensions to the `Html.Attributes` library.\n\n@docs defaultValue\n@docs defaultString\n@docs defaultInt\n@docs defaultFloat\n@docs styleList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "defaultFloat",
            "comment": " Convenience version of `defaultValue`, for `Float`s.\n",
            "type": "Float -> Html.Attribute msg"
          },
          {
            "name": "defaultInt",
            "comment": " Convenience version of `defaultValue`, for `Int`s.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "defaultString",
            "comment": " Convenience version of `defaultValue`, for `String`s.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "defaultValue",
            "comment": " Set a default value for an input field.\n",
            "type": "Json.Encode.Value -> Html.Attribute msg"
          },
          {
            "name": "styleList",
            "comment": " This function makes it easier to specify a conditional set of styles.\n   This the style-equivalent of elm-html's classList.\n",
            "type": "List ( String, String, Bool ) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Html.Bootstrap",
        "comment": " Base classes for Twitter Bootstrap 3 users.\n\n@docs stylesheet\n@docs container\n@docs containerFluid\n@docs row\n@docs formGroup\n@docs empty\n@docs twoColumns\n@docs Ratio\n@docs video\n@docs popover\n@docs PopoverDirection\n@docs clearfix\n@docs well\n@docs jumbotron\n@docs badge\n",
        "aliases": [],
        "types": [
          {
            "name": "PopoverDirection",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Bottom",
                []
              ],
              [
                "Left",
                []
              ]
            ]
          },
          {
            "name": "Ratio",
            "comment": " Aspect ratios for responsive video embedding.\n",
            "args": [],
            "cases": [
              [
                "SixteenByNine",
                []
              ],
              [
                "FourByThree",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "badge",
            "comment": " Bootstrap badge component.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "clearfix",
            "comment": " Bootstrap clearfix.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "container",
            "comment": " Bootstrap grid container.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "containerFluid",
            "comment": " Bootstrap grid fluid container.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "empty",
            "comment": " The minimum markup - an empty span.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "formGroup",
            "comment": " Bootstrap form group.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "jumbotron",
            "comment": " Bootstrap jumbotron component.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "popover",
            "comment": " Interface to the bootstrap popover that does not require bootstrap.js.\n",
            "type": "Exts.Html.Bootstrap.PopoverDirection -> Bool -> List ( String, String ) -> Maybe.Maybe String -> Html.Html msg -> Html.Html msg"
          },
          {
            "name": "row",
            "comment": " Bootstrap grid row.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "stylesheet",
            "comment": " A tag that loads Bootstrap from a CDN.\n\nYou'll probably only want to use this to get you started. By the time you go\ninto production, you should probably be loading this file in the `<head>` tag\nof your page.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "twoColumns",
            "comment": " Two evenly-sized columns. Must be used within a row.\n",
            "type": "List (Html.Html msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "video",
            "comment": " Embed a responsive video.\n",
            "type": "Exts.Html.Bootstrap.Ratio -> String -> Html.Html msg"
          },
          {
            "name": "well",
            "comment": " Bootstrap well component.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Float",
        "comment": " Extensions to the core `Float` library.\n\n@docs roundTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "roundTo",
            "comment": " Round a `Float` to a given number of decimal places.\n",
            "type": "Int -> Float -> Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Date",
        "comment": " Extensions to the core `Date` library.\n\n@docs toISOString\n@docs toRFC3339\n@docs monthNumber\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "monthNumber",
            "comment": " Extract the month of a given date as an `Int`. January is 1.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "toISOString",
            "comment": " Format a `Date` as an ISO-standard string.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "toRFC3339",
            "comment": " Format a `Date` as an RFC-3339 standard string\n\n  This is useful for passing a `Date` as a value to an HTML input. (See [the W3 spec](https://www.w3.org/TR/html-markup/input.date.html#input.date.attrs.value) for details.)\n",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Delta",
        "comment": " A system for tracking players that enter and leave a stage, a-la D3.\n\nImplementation detail: This code is hampered by the lack of Elm's type classes. Note the following:\n1. Performance may degrade badly as the number of elements increases.\n2. It is up to you to ensure (a) implments Eq correctly.\n\n@docs Delta\n@docs empty\n@docs generation\n",
        "aliases": [
          {
            "name": "Delta",
            "comment": " A data-structure that maintains the difference list of entering, continuing and leaving players.\n",
            "args": [
              "a"
            ],
            "type": "{ entering : List a, continuing : List a, leaving : List a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " A default starting state for Deltas.\n",
            "type": "Exts.Delta.Delta a"
          },
          {
            "name": "generation",
            "comment": " Update the delta by inspecting a list of players.\n",
            "type": "List a -> Exts.Delta.Delta a -> Exts.Delta.Delta a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Dict",
        "comment": " Extensions to the core `Dict` library.\n\n@docs indexBy\n@docs groupBy\n@docs frequency\n@docs getWithDefault\n@docs foldToList\n@docs updateDict\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "foldToList",
            "comment": " Run a function over the dictionary entries, resulting in a list of the final results.\n",
            "type": "(comparable -> v -> b) -> Dict.Dict comparable v -> List b"
          },
          {
            "name": "frequency",
            "comment": " Create a frequency-map from the given list.\n",
            "type": "List comparable -> Dict.Dict comparable Int"
          },
          {
            "name": "getWithDefault",
            "comment": " Attempt to find a key, if it's not there, return a default value.\n",
            "type": "a -> comparable -> Dict.Dict comparable a -> a"
          },
          {
            "name": "groupBy",
            "comment": " Group a list of items by a key.\n\n  Supply an indexing function (eg. `.id`) and a list of\n  items. `groupBy` returns a dictionary of group-key/list-of-items.\n\n  If the indexing function returns a unique key for every item, consider `indexBy` instead.\n",
            "type": "(v -> comparable) -> List v -> Dict.Dict comparable (List v)"
          },
          {
            "name": "indexBy",
            "comment": " Turn a list of items into an indexed dictionary.\n\n  Supply an indexing function (eg. `.id`) and a list of\n  items. `indexBy` returns a dictionary with each item stored under\n  its index.\n\n  This code assumes each index is unique. If that is not the case, you\n  should use `groupBy` instead.\n",
            "type": "(v -> comparable) -> List v -> Dict.Dict comparable v"
          },
          {
            "name": "updateDict",
            "comment": " Apply an Elm update function - `Model -> (Model, Cmd Msg)` - to a `Dict` entry, if present.\n\nIt's quite common in Elm to want to run a model-update function, over\nsome dictionary of models, but only if that model is available.\n\nThis function makes it more convenient to reach inside a `Dict` and\napply an update. If the data is not there, the `Dict` is returned\nunchanged with a `Cmd.none`.\n\n",
            "type": "(a -> ( a, Platform.Cmd.Cmd cmd )) -> comparable -> Dict.Dict comparable a -> ( Dict.Dict comparable a, Platform.Cmd.Cmd cmd )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Array",
        "comment": " Extensions to the core `Array` library.\n\n@docs update\n@docs delete\n@docs unzip\n@docs singleton\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "delete",
            "comment": " 'Delete' the entry at position `n`.\nindex is out of range, the array is unaltered.\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "singleton",
            "comment": " Wrap a single item into an `Array`.\n",
            "type": "a -> Array.Array a"
          },
          {
            "name": "unzip",
            "comment": " Split an array of pairs into a pair of arrays.\n\nThe same as the core `List.unzip`.\n",
            "type": "Array.Array ( a, b ) -> ( Array.Array a, Array.Array b )"
          },
          {
            "name": "update",
            "comment": " 'Update' the entry at position `n`, by applying `f` to it. If the\nindex is out of range, the array is unaltered.\n",
            "type": "Int -> (a -> a) -> Array.Array a -> Array.Array a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Exts.Basics",
        "comment": " Extensions to the core `Basics` library.\n\n@docs compareBy\n@docs maxBy\n@docs minBy\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "compareBy",
            "comment": " Like `Basics.compare`, with a custom function. For example:\n\n``` elm\ncompareBy Date.toTime earlyDate laterDate\n--> LT\n```\n",
            "type": "(a -> comparable) -> a -> a -> Basics.Order"
          },
          {
            "name": "maxBy",
            "comment": " Like `Basics.max`, but it works on non-comparable types by taking a custom function. For example:\n\n``` elm\nmaxBy Date.toTime earlyDate laterDate\n--> laterDate\n```\n",
            "type": "(a -> comparable) -> a -> a -> a"
          },
          {
            "name": "minBy",
            "comment": " Like `Basics.min`, but it works on non-comparable types by taking a custom function. For example:\n\n``` elm\nminBy Date.toTime earlyDate laterDate\n--> earlyDate\n```\n",
            "type": "(a -> comparable) -> a -> a -> a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/formatting",
    "version": "4.0.6",
    "docs": [
      {
        "name": "Formatting",
        "comment": " A type-safe string formatting library. It fulfils the need for\nstring-interpolation or a `printf` function, without sacrificing Elm's\nruntime guarantees or requiring any language-level changes. It also\ncomposes well, to make building up complex formatters easy.\n\n@docs Format\n@docs (<>)\n@docs map\n@docs premap\n@docs apply\n@docs print\n@docs html\n@docs s\n@docs string\n@docs int\n@docs bool\n@docs float\n@docs any\n@docs wrap\n@docs pad\n@docs padLeft\n@docs padRight\n@docs dp\n@docs roundTo\n@docs uriFragment\n",
        "aliases": [],
        "types": [
          {
            "name": "Format",
            "comment": " A formatter. This type holds all the information we need to\ncreate a formatting function, wrapped up in a way that makes it easy\nto compose.\n\nBuild one of these up with primitives like `s`, `string` and `int`,\njoin them together with `<>`, and when you're done, generate the final\nprinting function with `print`.\n\n## Example\n\n    import Formatting exposing (..)\n\n    greeting =\n        s \"Hello \" <> string <> s \"!\"\n\n    print greeting \"Kris\"\n\n    --> \"Hello Kris!\"\n\n\n## Creating Custom Formatters\n\nImagine you have an existing formatting rule you'd like to turn into a formatter:\n\n``` elm\ntweetSummary : Int -> String -> String\ntweetSummary starCount body =\n    \"(\" ++ toString starCount ++ \") \" ++ body\n```\n\nFirst, wrap the type signature in brackets:\n\n``` elm\ntweetSummary : (Int -> String -> String)\n```\n\nThen change the result type to a variable. (That's where the magic\nbegins - the Formatting library gets control of the final result\ntype.):\n\n\n``` elm\ntweetSummary : (Int -> String -> r)\n```\n\nNow add `Format r` to the start.\n\n``` elm\ntweetSummary : Format r (Int -> String -> r)\n```\n\nAll very mechanical. Now for the function body. Let's recall what it\nlooked like at the start:\n\n``` elm\ntweetSummary starCount body =\n    \"(\" ++ toString starCount ++ \") \" ++ body\n```\n\nChange that into an anonymous function:\n\n\n``` elm\ntweetSummary =\n    (\\starCount body ->\n        \"(\" ++ toString starCount ++ \") \" ++ body\n    )\n```\n\nNow add in a `callback` function as the first argument:\n\n``` elm\ntweetSummary =\n    (\\callback starCount body ->\n        \"(\" ++ toString starCount ++ \") \" ++ body\n    )\n```\n\nPass your function's result to that callback (using `<|` is the easy way):\n\n``` elm\ntweetSummary =\n    (\\callback starCount body ->\n        callback <| \"(\" ++ toString starCount ++ \") \" ++ body\n    )\n```\n\nFinally, wrap that all up in a `Format` constructor:\n\n``` elm\ntweetSummary =\n    Format\n        (\\callback starCount body ->\n            callback <| \"(\" ++ toString starCount ++ \") \" ++ body\n        )\n```\n\nAnd you're done. You have a composable formatting function. It's a\nmechanical process that's probably a bit weird at first, but easy to\nget used to.\n\n",
            "args": [
              "r",
              "a"
            ],
            "cases": [
              [
                "Format",
                [
                  "(String -> r) -> a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "<>",
            "comment": " Compose two formatters together.\n",
            "type": "Formatting.Format b a -> Formatting.Format c b -> Formatting.Format c a",
            "associativity": "right",
            "precedence": 8
          },
          {
            "name": "any",
            "comment": " A placeholder for any value that we can call `toString` on.\n\n\nEagle-eyed readers of the source will notice that we use this same\nfunction to define `int` and `float`, since `toString` gives us the\nright result for both of those types.\n\nThe sole difference is, `int` and `float` have more restrictive type\nsignatures.\n",
            "type": "Formatting.Format r (a -> r)"
          },
          {
            "name": "apply",
            "comment": " Apply an argument to a Formatter. Useful when you want to supply\nan argument, but don't yet want to convert your formatter to a plain\nol' function (with `print`).\n",
            "type": "Formatting.Format r (a -> b -> r) -> a -> Formatting.Format r (b -> r)"
          },
          {
            "name": "bool",
            "comment": " A placeholder for an `Bool` argument.\n",
            "type": "Formatting.Format r (Bool -> r)"
          },
          {
            "name": "dp",
            "comment": " *DEPRECATED*: Use `roundTo` instead.\n",
            "type": "Int -> Formatting.Format r (Float -> r)"
          },
          {
            "name": "float",
            "comment": " A placeholder for a `Float` argument.\n",
            "type": "Formatting.Format r (Float -> r)"
          },
          {
            "name": "html",
            "comment": " Convenience function. Like `print`, but returns an `Html.text`\nnode as its final result, instead of a `String`.\n\nHint: If you're using any formatters where whitespace is sigificant,\nyou might well need one or both of these CSS rules:\n\n    font-family: monospace;\n    white-space: pre;\n",
            "type": "Formatting.Format (Html.Html msg) a -> a"
          },
          {
            "name": "int",
            "comment": " A placeholder for an `Int` argument.\n",
            "type": "Formatting.Format r (Int -> r)"
          },
          {
            "name": "map",
            "comment": " Create a new formatter by applying a function to the output of this formatter.\n\nFor example:\n\n    import String exposing (toUpper)\n\n    format = s \"Name: \" <> map toUpper string\n\n...produces a formatter that uppercases the name:\n\n    print format \"Kris\"\n\n    --> \"Name: KRIS\"\n\n",
            "type": "(String -> String) -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "pad",
            "comment": " `String.pad` lifted into the world of Formatters.\n\nFor example:\n\n    print (pad 10 '-' string) \"KRIS\"\n\n    --> \"---KRIS---\"\n\n",
            "type": "Int -> Char -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "padLeft",
            "comment": " `String.padLeft` lifted into the world of Formatters.\n\nFor example:\n\n    print (padLeft 10 '_' float) 1.72\n\n    --> \"______1.72\"\n\n",
            "type": "Int -> Char -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "padRight",
            "comment": " `String.padRight` lifted into the world of Formatters.\n\nFor example:\n\n    print (padRight 10 '.' int) 789\n\n    --> \"789.......\"\n\n",
            "type": "Int -> Char -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "premap",
            "comment": " Create a new formatter by applying a function to the input of this\nformatter. The dual of `map`.\n\nFor example:\n\n    format = s \"Height: \" <> premap .height float\n\n...produces a formatter that accesses a `.height` record field:\n\n    print format { height: 1.72 }\n\n    --> \"Height: 1.72\"\n\n",
            "type": "(a -> b) -> Formatting.Format r (b -> v) -> Formatting.Format r (a -> v)"
          },
          {
            "name": "print",
            "comment": " Turn your formatter into a function that's just waiting for its arguments.\n\nGiven this format:\n\n\n    orderFormat =\n        s \"FREE: \" <> int <> s \" x \" <> string  <> s \"!\"\n\n\n...we can either use it immediately:\n\n\n    order : String\n    order = print orderFormat 2 \"Ice Cream\"\n\n    --> \"FREE: 2 x Ice Cream!\"\n\n\n...or turn it into an ordinary function to be used later:\n\n\n    orderFormatter : Int -> String -> String\n    orderFormatter =\n        print orderFormat\n\n\n    ...elsewhere...\n\n\n    order : String\n    order = orderFormatter 2 \"Ice Cream\"\n\n    --> \"FREE: 2 x Ice Cream!\"\n",
            "type": "Formatting.Format String a -> a"
          },
          {
            "name": "roundTo",
            "comment": " A float rounded to `n` decimal places.\n",
            "type": "Int -> Formatting.Format r (Float -> r)"
          },
          {
            "name": "s",
            "comment": " A boilerplate string.\n",
            "type": "String -> Formatting.Format r r"
          },
          {
            "name": "string",
            "comment": " A placeholder for a `String` argument.\n",
            "type": "Formatting.Format r (String -> r)"
          },
          {
            "name": "uriFragment",
            "comment": " Format a URI fragment.\n\nFor example:\n\n    print uriFragment \"this string\"\n\n    --> \"this%20string\"\n",
            "type": "Formatting.Format r (String -> r)"
          },
          {
            "name": "wrap",
            "comment": " `wrap` one string with another. It's convenient for building strings\nlike `\"Invalid key '<keyname>'.\"  For example:\n\n    print (wrap \"'\" string) \"tester\"\n\n    --> \"'tester'\"\n",
            "type": "String -> Formatting.Format r a -> Formatting.Format r a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/history",
    "version": "1.1.1",
    "docs": [
      {
        "name": "History",
        "comment": " Manage browser history and link creation using the HTML5 history API.\n\n@docs History, Router, Parser, Path, create\n",
        "aliases": [
          {
            "name": "History",
            "comment": " History's prime concern is turning URIs into views, and views into URIs.\n",
            "args": [
              "view"
            ],
            "type": "{ parser : String -> view, router : view -> String }"
          },
          {
            "name": "Parser",
            "comment": " ",
            "args": [
              "view"
            ],
            "type": "String -> view"
          },
          {
            "name": "Path",
            "comment": " A path is just a URI split up into sections. For example\n`/account/1234/settings` would convert to the path\n`[\"account\", \"1234\", \"settings\"]`.\n",
            "args": [],
            "type": "List String"
          },
          {
            "name": "Router",
            "comment": " ",
            "args": [
              "view"
            ],
            "type": "view -> String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "create",
            "comment": " Create a history manager by supplying one function that goes from\n`Path` to `view`, and one that goes the other way from `view` to\n`Path`.\n",
            "type": "(History.Path -> view) -> (view -> History.Path) -> History.History view"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "krisajenkins/remotedata",
    "version": "3.0.0",
    "docs": [
      {
        "name": "RemoteData.Infix",
        "comment": " Convenience infix operators, for those that like them.\n\nAllows you do define a \"merge three values into a tuple\" function as:\n\n``` elm\nmerge3 a b c =\n    (,,) <$> a <*> b <*> c\n```\n\n@docs (<$>)\n@docs (<*>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "<$>",
            "comment": " Infix form of map. For those who like their applicative functors Haskell-style.\n",
            "type": "(a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "<*>",
            "comment": " Infix form of (flip andMap). For those who like their applicative functors Haskell-style.\n\n\n",
            "type": "RemoteData.RemoteData e (a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "RemoteData",
        "comment": " A datatype representing fetched data.\n\nIf you find yourself continually using `Maybe (Result Error a)` to\nrepresent loaded data, or you have a habit of shuffling errors away to\nwhere they can be quietly ignored, consider using this. It makes it\neasier to represent the real state of a remote data fetch and handle\nit properly.\n\n\nFor more on the motivation, take a look at the blog post [How Elm Slays A UI Antipattern](http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html).\n\n\nTo use the datatype, let's look at an example that loads `News` from a feed.\n\nFirst you add to your model, wrapping the data you want in `WebData`:\n\n\n``` elm\ntype alias Model =\n    { news : WebData News }\n```\n\nThen add in a message that will deliver the response:\n\n``` elm\ntype alias Msg\n    = NewsResponse (WebData News)\n```\n\nNow we can create an HTTP get:\n\n``` elm\ngetNews : Cmd Msg\ngetNews =\n    Http.get decodeNews \"/news\"\n        |> RemoteData.asCmd\n        |> Cmd.map NewsResponse\n\n```\n\nWe trigger it in our `init` function:\n\n``` elm\ninit : ( Model, Cmd Msg)\ninit =\n    ( { news = Loading }\n    , getNews\n    )\n```\n\nWe handle it in our `update` function:\n\n``` elm\nupdate msg model =\n    case msg of\n        NewsResponse response ->\n            ( { model | news = response }\n            , Cmd.none\n            )\n```\n\n\nMost of this you'd already have in your app, and the changes are just\nwrapping the datatype in `Webdata`, and updating the `Http.get` call\nto add in `RemoteData.asCmd`.\n\nNow we get to where we really want to be, rendering the data and\nhandling the different states in the UI gracefully:\n\n\n``` elm\nview : Model -> Html msg\nview model =\n  case model.news of\n    NotAsked -> text \"Initialising.\"\n\n    Loading -> text \"Loading.\"\n\n    Failure err -> text (\"Error: \" ++ toString err)\n\n    Success news -> viewNews news\n\n\nviewNews : News -> Html msg\nviewNews news =\n    div []\n        [h1 [] [text \"Here is the news.\"]\n        , ...]\n```\n\nAnd that's it. A more accurate model of what's happening leads to a better UI.\n\n@docs RemoteData\n@docs WebData\n@docs map\n@docs andMap\n@docs succeed\n@docs mapError\n@docs mapBoth\n@docs andThen\n@docs withDefault\n@docs fromResult\n@docs toMaybe\n@docs asCmd\n@docs append\n@docs isSuccess\n@docs isFailure\n@docs isLoading\n@docs isNotAsked\n@docs update\n@docs prism\n\n",
        "aliases": [
          {
            "name": "WebData",
            "comment": " While `RemoteData` can model any type of error, the most common\none you'll actually encounter is when you fetch data from a REST\ninterface, and get back `RemoteData Http.Error a`. Because that case\nis so common, `WebData` is provided as a useful alias.\n",
            "args": [
              "a"
            ],
            "type": "RemoteData.RemoteData Http.Error a"
          }
        ],
        "types": [
          {
            "name": "RemoteData",
            "comment": " Frequently when you're fetching data from an API, you want to represent four different states:\n  * `NotAsked` - We haven't asked for the data yet.\n  * `Loading` - We've asked, but haven't got an answer yet.\n  * `Failure` - We asked, but something went wrong. Here's the error.\n  * `Success` - Everything worked, and here's the data.\n",
            "args": [
              "e",
              "a"
            ],
            "cases": [
              [
                "NotAsked",
                []
              ],
              [
                "Loading",
                []
              ],
              [
                "Failure",
                [
                  "e"
                ]
              ],
              [
                "Success",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Put the results of two RemoteData calls together.\n\nFor example, if you were fetching three datasets, `a`, `b` and `c`,\nand wanted to end up with a tuple of all three, you could say:\n\n``` elm\nmerge3 :\n    RemoteData e a\n    -> RemoteData e b\n    -> RemoteData e c\n    -> RemoteData e ( a, b, c )\nmerge3 a b c =\n    map (,,) a\n        |> andMap b\n        |> andMap c\n```\n\nThe final tuple succeeds only if all its children succeeded.  It is\nstill `Loading` if _any_ of its children are still `Loading`. And if\nany child fails, the error is the leftmost `Failure` value.\n\nNote that this provides a general pattern for `map2`, `map3`, ..,\n`mapN`. If you find yourself wanting `map5`, just use:\n\n``` elm\nfoo f a b c d e =\n    map f a\n        |> andMap b\n        |> andMap c\n        |> andMap d\n        |> andMap e\n```\n\nIt's a general recipe that doesn't require us to ever have the\ndiscussion, \"Could you just add `map7`? Could you just add `map8`?\nCould you just...\".\n\nCategory theory points: This is `apply` with the arguments flipped.\n",
            "type": "RemoteData.RemoteData e a -> RemoteData.RemoteData e (a -> b) -> RemoteData.RemoteData e b"
          },
          {
            "name": "andThen",
            "comment": " Chain together RemoteData function calls.\n",
            "type": "RemoteData.RemoteData e a -> (a -> RemoteData.RemoteData e b) -> RemoteData.RemoteData e b"
          },
          {
            "name": "append",
            "comment": " Append - join two `RemoteData` values together as though\nthey were one.\n\nIf either value is `NotAsked`, the result is `NotAsked`.\nIf either value is `Loading`, the result is `Loading`.\nIf both values are `Failure`, the left one wins.\n",
            "type": "RemoteData.RemoteData e a -> RemoteData.RemoteData e b -> RemoteData.RemoteData e ( a, b )"
          },
          {
            "name": "asCmd",
            "comment": " Convert a web `Task`, probably produced from elm-http, to a `Cmd (RemoteData e a)`.\n",
            "type": "Task.Task e a -> Platform.Cmd.Cmd (RemoteData.RemoteData e a)"
          },
          {
            "name": "fromResult",
            "comment": " Convert a `Result Error`, probably produced from elm-http, to a RemoteData value.\n",
            "type": "Result.Result e a -> RemoteData.RemoteData e a"
          },
          {
            "name": "isFailure",
            "comment": " State-checking predicate. Returns true if we've failed to load some data.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "isLoading",
            "comment": " State-checking predicate. Returns true if we're loading.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "isNotAsked",
            "comment": " State-checking predicate. Returns true if we haven't asked for data yet.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "isSuccess",
            "comment": " State-checking predicate. Returns true if we've successfully loaded some data.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function into the `Success` value.\n",
            "type": "(a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "mapBoth",
            "comment": " Map function into both the `Success` and `Failure` value.\n",
            "type": "(a -> b) -> (e -> f) -> RemoteData.RemoteData e a -> RemoteData.RemoteData f b"
          },
          {
            "name": "mapError",
            "comment": " Map a function into the `Failure` value.\n",
            "type": "(e -> f) -> RemoteData.RemoteData e a -> RemoteData.RemoteData f a"
          },
          {
            "name": "prism",
            "comment": " A monocle-compatible Prism.\n\nIf you use Monocle, you'll want this, otherwise you can ignore it.\n\nThe type signature is actually:\n\n``` elm\nprism : Prism (RemoteData e a) a\n```\n\n...but we use the more verbose type here to avoid introducing a dependency on Monocle.\n",
            "type": "{ getOption : RemoteData.RemoteData e a -> Maybe.Maybe a , reverseGet : a -> RemoteData.RemoteData e a }"
          },
          {
            "name": "succeed",
            "comment": " Lift an ordinary value into the realm of RemoteData.\n\nCategory theory points: This is `pure`.\n",
            "type": "a -> RemoteData.RemoteData e a"
          },
          {
            "name": "toMaybe",
            "comment": " Convert a `RemoteData e a` to a `Maybe a`\n",
            "type": "RemoteData.RemoteData e a -> Maybe.Maybe a"
          },
          {
            "name": "update",
            "comment": " Apply an Elm update function - `Model -> (Model, Cmd Msg)` - to any `Successful`-ly loaded data.\n\nIt's quite common in Elm to want to run a model-update function, over\nsome remote data, but only once it's actually been loaded.\n\nFor example, we might want to handle UI messages changing the users\nsettings, but that only makes sense once those settings have been\nreturned from the server.\n\nThis function makes it more convenient to reach inside a\n`RemoteData.Success` value and apply an update. If the data is not\n`Success a`, it is returned unchanged with a `Cmd.none`.\n\n",
            "type": "(a -> ( b, Platform.Cmd.Cmd c )) -> RemoteData.RemoteData e a -> ( RemoteData.RemoteData e b, Platform.Cmd.Cmd c )"
          },
          {
            "name": "withDefault",
            "comment": " Return the `Success` value, or the default.\n",
            "type": "a -> RemoteData.RemoteData e a -> a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "labzero/elm-google-geocoding",
    "version": "4.0.1",
    "docs": [
      {
        "name": "Geocoding",
        "comment": " This library is an interface to Google's geocoding service\n\nhttps://developers.google.com/maps/documentation/geocoding/intro\n\nIt provides a pipline friendly, builder-like API, and ADTs that map as closely as possible to the Google API\n\nYou can start building a request one of two ways:\n\n    Geocoding.requestForAddress apiKey \"77 Battery St.\"\n    Geocoding.requestForComponents\n      [\n        (\"Spain\", Geocoding.CountryComponent)\n      ]\n\nor for reverse geocoding:\n    Geocoding.reverseRequestForLatLng apiKey ( 37.8489277, -122.4031502 )\n    Geocoding.reverseRequestForPlaceId apiKey \"ChIJrTLr-GyuEmsRBfy61i59si0\"\n\nOnce you've built your request, calling send will return a `Http.Request`, which you perform to generate your own msg types\n\n# Types\n@docs GeocodingResult, Status, Viewport, ApiKey, Component, LocationType, ComponentType, Response\n\n# Building a request\n@docs requestForAddress, requestForComponents, withAddress, withComponent, withLanguage, withRegion, withBounds\n\n# Building a reverse geocoding request\n@docs reverseRequestForLatLng, reverseRequestForPlaceId, reverseWithLanguage, withResultTypes, withLocationTypes\n\n# Sending a request\n@docs send, sendReverseRequest\n\n# Inspecting a request\n@docs requestUrl, reverseRequestUrl\n",
        "aliases": [
          {
            "name": "ApiKey",
            "comment": " alias for a Google API key\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "GeocodingResult",
            "comment": " an individual result\nhttps://developers.google.com/maps/documentation/geocoding/intro#Results\n",
            "args": [],
            "type": "{ addressComponents : List Geocoding.AddressComponent , formattedAddress : String , geometry : Geocoding.Geometry , types : List Geocoding.ComponentType , placeId : String }"
          },
          {
            "name": "Response",
            "comment": " response status and a list of results (list will be empty if status is other than OK)\nhttps://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n",
            "args": [],
            "type": "{ status : Geocoding.Status , results : List Geocoding.GeocodingResult }"
          },
          {
            "name": "Viewport",
            "comment": " a bounding box\n   https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n",
            "args": [],
            "type": "{ northeast : Geocoding.Location, southwest : Geocoding.Location }"
          }
        ],
        "types": [
          {
            "name": "Component",
            "comment": " components for request filtering\n   https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering\n",
            "args": [],
            "cases": [
              [
                "RouteComponent",
                []
              ],
              [
                "LocalityComponent",
                []
              ],
              [
                "AdministrativeAreaComponent",
                []
              ],
              [
                "PostalCodeComponent",
                []
              ],
              [
                "CountryComponent",
                []
              ]
            ]
          },
          {
            "name": "ComponentType",
            "comment": " address component types\n   https://developers.google.com/maps/documentation/geocoding/intro#Types\n",
            "args": [],
            "cases": [
              [
                "StreetAddress",
                []
              ],
              [
                "Route",
                []
              ],
              [
                "Intersection",
                []
              ],
              [
                "Political",
                []
              ],
              [
                "Country",
                []
              ],
              [
                "AdministrativeAreaLevel1",
                []
              ],
              [
                "AdministrativeAreaLevel2",
                []
              ],
              [
                "AdministrativeAreaLevel3",
                []
              ],
              [
                "AdministrativeAreaLevel4",
                []
              ],
              [
                "AdministrativeAreaLevel5",
                []
              ],
              [
                "ColloquialArea",
                []
              ],
              [
                "Locality",
                []
              ],
              [
                "Sublocality",
                []
              ],
              [
                "SublocalityLevel1",
                []
              ],
              [
                "SublocalityLevel2",
                []
              ],
              [
                "SublocalityLevel3",
                []
              ],
              [
                "SublocalityLevel4",
                []
              ],
              [
                "SublocalityLevel5",
                []
              ],
              [
                "Neighborhood",
                []
              ],
              [
                "Premise",
                []
              ],
              [
                "Subpremise",
                []
              ],
              [
                "PostalCode",
                []
              ],
              [
                "NaturalFeature",
                []
              ],
              [
                "Airport",
                []
              ],
              [
                "Park",
                []
              ],
              [
                "PostBox",
                []
              ],
              [
                "StreetNumber",
                []
              ],
              [
                "Floor",
                []
              ],
              [
                "Room",
                []
              ],
              [
                "Establishment",
                []
              ],
              [
                "PointOfInterest",
                []
              ],
              [
                "Parking",
                []
              ],
              [
                "PostalTown",
                []
              ],
              [
                "BusStation",
                []
              ],
              [
                "TrainStation",
                []
              ],
              [
                "TransitStation",
                []
              ],
              [
                "PostalCodeSuffix",
                []
              ],
              [
                "OtherComponent",
                []
              ]
            ]
          },
          {
            "name": "LocationType",
            "comment": " additional data about a location\n   https://developers.google.com/maps/documentation/geocoding/intro#Result\n",
            "args": [],
            "cases": [
              [
                "Rooftop",
                []
              ],
              [
                "RangeInterpolated",
                []
              ],
              [
                "GeometricCenter",
                []
              ],
              [
                "Approximate",
                []
              ],
              [
                "OtherLocationType",
                []
              ]
            ]
          },
          {
            "name": "Status",
            "comment": " mapping of Google API response statuses\nhttps://developers.google.com/maps/documentation/geocoding/intro#StatusCodes\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "requestForAddress",
            "comment": " Build a request for an address\n\n    Geocoding.requestForAddress apiKey \"77 Battery St\"\n",
            "type": "Geocoding.ApiKey -> String -> Geocoding.GeocodingRequest"
          },
          {
            "name": "requestForComponents",
            "comment": " Build a request for a list of component filters\n\n    Geocoding.requestForComponents apiKey\n      [\n        (\"Spain\", Geocoding.CountryComponent)\n      , (\"Toledo\", Geocoding.AdministrativeAreaComponent)\n      ]\n",
            "type": "Geocoding.ApiKey -> List ( String, Geocoding.Component ) -> Geocoding.GeocodingRequest"
          },
          {
            "name": "requestUrl",
            "comment": " for inspecting the request URL for testing purposes\n",
            "type": "Geocoding.GeocodingRequest -> String"
          },
          {
            "name": "reverseRequestForLatLng",
            "comment": " Build a reverse geocoding request for an location\n\n    Geocoding.reverseRequestForLatLng apiKey (37.8489277,-122.4031502)\n",
            "type": "Geocoding.ApiKey -> ( Float, Float ) -> Geocoding.ReverseGeocodingRequest"
          },
          {
            "name": "reverseRequestForPlaceId",
            "comment": " Build a reverse geocoding request for Google place_id\n\n    Geocoding.reverseRequestForLatLng apiKey \"ChIJrTLr-GyuEmsRBfy61i59si0\"\n",
            "type": "Geocoding.ApiKey -> String -> Geocoding.ReverseGeocodingRequest"
          },
          {
            "name": "reverseRequestUrl",
            "comment": " for inspecting the request URL for testing purposes\n",
            "type": "Geocoding.ReverseGeocodingRequest -> String"
          },
          {
            "name": "reverseWithLanguage",
            "comment": " Set the language for the request\n\n    Geocoding.reverseRequestForLatLng apiKey \"ChIJrTLr-GyuEmsRBfy61i59si0\"\n      |> Geocoding.reverseWithLanguage(\"FR\")\n",
            "type": "String -> Geocoding.ReverseGeocodingRequest -> Geocoding.ReverseGeocodingRequest"
          },
          {
            "name": "send",
            "comment": " transform a GeocodingRequest into a Cmd\n\n    Geocoding.requestForAddress apiKey \"77 Battery St\"\n      |> Geocoding.send MyGeocoderResult\n",
            "type": "(Result.Result Http.Error Geocoding.Response -> msg) -> Geocoding.GeocodingRequest -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "sendReverseRequest",
            "comment": "\n  transform a reverse geocoding request into a Cmd\n\n    Geocoding.requestForLatLng apiKey (37.8489277,-122.4031502)\n      |> Geocoding.sendReverseRequest MyReverseGeocoderResult\n\n",
            "type": "(Result.Result Http.Error Geocoding.Response -> msg) -> Geocoding.ReverseGeocodingRequest -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "withAddress",
            "comment": " set the address to a request. If called more than once, the later call overwrites the earlier\n\n    Geocoding.requestForComponents apiKey\n      [\n        (\"Spain\", Geocoding.CountryComponent)\n      , (\"Toledo\", Geocoding.AdministrativeAreaComponent)\n      ]\n        |> Geocoding.withAddress \"Toledo\"\n",
            "type": "String -> Geocoding.GeocodingRequest -> Geocoding.GeocodingRequest"
          },
          {
            "name": "withBounds",
            "comment": " Specify a viewport bias for the request\n\n    Geocoding.requestForAddress apiKey \"Belmont\"\n      |> Geocoding.withBounds (41, -74) (42, -70)\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> Geocoding.GeocodingRequest -> Geocoding.GeocodingRequest"
          },
          {
            "name": "withComponent",
            "comment": " add a component filter to a request (can be called more than once for a request)\n\n    Geocoding.requestForAddress apiKey \"Toledo\"\n      |> Geocoding.withComponent (\"Spain\", Geocoding.CountryComponent)\n",
            "type": "( String, Geocoding.Component ) -> Geocoding.GeocodingRequest -> Geocoding.GeocodingRequest"
          },
          {
            "name": "withLanguage",
            "comment": " Specify the language for the request\n\n    Geocoding.requestForAddress apiKey \"77 Battery St\"\n      |> Geocoding.withLanguage(\"FR\")\n",
            "type": "String -> Geocoding.GeocodingRequest -> Geocoding.GeocodingRequest"
          },
          {
            "name": "withLocationTypes",
            "comment": " Set the location type filters for the request\n\n    Geocoding.reverseRequestForLatLng apiKey (37.8489277,-122.4031502)\n      |> Geocoding.withLocationTypes [Approximate]\n\n",
            "type": "List Geocoding.LocationType -> Geocoding.ReverseGeocodingRequest -> Geocoding.ReverseGeocodingRequest"
          },
          {
            "name": "withRegion",
            "comment": " specify region biasing for request\n\n    Geocoding.requestForAddress apiKey \"Toledo\"\n      |> Geocoding.withRegion \"ES\"\n",
            "type": "String -> Geocoding.GeocodingRequest -> Geocoding.GeocodingRequest"
          },
          {
            "name": "withResultTypes",
            "comment": " Set the result type(s) for the request\n\n    Geocoding.reverseRequestForLatLng apiKey (37.8489277,-122.4031502)\n      |> Geocoding.withResultTypes [Country, PostalCode]\n",
            "type": "List Geocoding.ComponentType -> Geocoding.ReverseGeocodingRequest -> Geocoding.ReverseGeocodingRequest"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "lukewestby/elm-http-builder",
    "version": "4.0.0",
    "docs": [
      {
        "name": "HttpBuilder",
        "comment": " Extra helpers for more easily building Http requests that require greater\nconfiguration than what is provided by `elm-http` out of the box.\n\n# Start a request\n@docs RequestBuilder, get, post, put, patch, delete, options, trace, head\n\n# Configure request properties\n@docs withHeader, withHeaders, withStringBody, withJsonBody, withMultipartStringBody, withUrlEncodedBody, withTimeout, withCredentials, withQueryParams, withExpect\n\n# Make the request\n@docs toRequest, send\n",
        "aliases": [],
        "types": [
          {
            "name": "RequestBuilder",
            "comment": " A type for chaining request configuration\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "delete",
            "comment": " Start building a DELETE request with a given URL\n\n    delete \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "get",
            "comment": " Start building a GET request with a given URL\n\n    get \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "head",
            "comment": " Start building a HEAD request with a given URL\n\n    head \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "options",
            "comment": " Start building a OPTIONS request with a given URL\n\n    options \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "patch",
            "comment": " Start building a PATCH request with a given URL\n\n    patch \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "post",
            "comment": " Start building a POST request with a given URL\n\n    post \"https://example.com/api/items\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "put",
            "comment": " Start building a PUT request with a given URL\n\n    put \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "send",
            "comment": " Send the request using Http.send\n",
            "type": "(Result.Result Http.Error a -> msg) -> HttpBuilder.RequestBuilder a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "toRequest",
            "comment": " Extract the Http.Request component of the builder, for introspection and\ntesting\n",
            "type": "HttpBuilder.RequestBuilder a -> Http.Request a"
          },
          {
            "name": "trace",
            "comment": " Start building a TRACE request with a given URL\n\n    trace \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder ()"
          },
          {
            "name": "withCredentials",
            "comment": " Set the `withCredentials` flag on the request to True. Works via\n[`XMLHttpRequest#withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n\n    get \"https://example.com/api/items/1\"\n        |> withCredentials\n",
            "type": "HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withExpect",
            "comment": " Choose an `Expect` for the request\n\n    get \"https://example.com/api/items/1\"\n        |> withExpect (Http.expectJson itemsDecoder)\n",
            "type": "Http.Expect b -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder b"
          },
          {
            "name": "withHeader",
            "comment": " Add a single header to a request\n\n    get \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n",
            "type": "String -> String -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withHeaders",
            "comment": " Add many headers to a request\n\n    get \"https://example.com/api/items/1\"\n        |> withHeaders [(\"Content-Type\", \"application/json\"), (\"Accept\", \"application/json\")]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withJsonBody",
            "comment": " Convenience function for adding a JSON body to a request\n\n    params = Json.Encode.object\n        [ (\"sortBy\", Json.Encode.string \"coolness\")\n        , (\"take\", Json.Encode.int 10)\n        ]\n\n    post \"https://example.com/api/items/1\"\n        |> withJsonBody params\n",
            "type": "Json.Encode.Value -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withMultipartStringBody",
            "comment": " Convience function for adding multipart bodies composed of String, String\nkey-value pairs. Since `Http.stringData` is currently the only `Http.Data`\ncreator having this function removes the need to use the `Http.Data` type in\nyour type signatures.\n\n    post \"https://example.com/api/items/1\"\n        |> withMultipartStringBody [(\"user\", JS.encode user)]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withQueryParams",
            "comment": " Add some query params to the url for the request\n\n    get \"https://example.com/api/items/1\"\n        |> withQueryParams [(\"hello\", \"world\"), (\"foo\", \"bar\")]\n        |> withQueryParams [(\"baz\", \"qux\")]\n    -- sends a request to https://example.com/api/items/1?hello=world&foo=bar&baz=qux\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withStringBody",
            "comment": " Convenience function for adding a string body to a request\n\n    post \"https://example.com/api/items/1\"\n        |> withStringBody \"application/json\" \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\"\n",
            "type": "String -> String -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withTimeout",
            "comment": " Set the `timeout` setting on the request\n\n    get \"https://example.com/api/items/1\"\n        |> withTimeout (10 * Time.second)\n",
            "type": "Time.Time -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          },
          {
            "name": "withUrlEncodedBody",
            "comment": " Convenience function for adding url encoded bodies\n\n    post \"https://example.com/api/whatever\"\n        |> withUrlEncodedBody [(\"user\", \"Luke\"), (\"pwd\", \"secret\")]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "marcosh/elm-html-to-unicode",
    "version": "1.0.2",
    "docs": [
      {
        "name": "ElmEscapeHtml",
        "comment": " This library allows to escape html string and unescape named and numeric\ncharacter references (e.g. &gt;, &#62;, &x3e;) to the corresponding unicode\ncharacters\n\n#Definition\n@docs escape, unescape\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "escape",
            "comment": " Escapes a string converting characters that could be used to inject XSS\nvectors (http://wonko.com/post/html-escaping). At the moment we escape &, <, >,\n\", ', `, , !, @, $, %, (, ), =, +, {, }, [ and ]\n\nfor example\n\nescape \"&<>\\\"\" == \"&amp;&lt;&gt;&quot;\"\n",
            "type": "String -> String"
          },
          {
            "name": "unescape",
            "comment": " Unescapes a string, converting all named and numeric character references\n(e.g. &gt;, &#62;, &x3e;) to their corresponding unicode characters.\n\nfor example\n\nunescape \"&quot;&amp;&lt;&gt;\" == \"\\\"&<>\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "mgold/elm-animation",
    "version": "1.0.5",
    "docs": [
      {
        "name": "Animation",
        "comment": " A library for animating between two `Float` values. For example, animate a panel's width from 100px to 300px over 2\nseconds, or make a button spin and grow on hover. Everything is a pure function (no signals or tasks), so you can use it\neasily within your architecture. You can also inspect animations to determine if they are still running and for how\nlong, and even smoothly retarget a different destination midflight.\n\nThe library encapsulates a 3-stage animation pipeline:\n\n* **Timekeeping:** Creating and running an animation requires the current time, which is best obtained with\n    [`AnimationFrame.times`](http://package.elm-lang.org/packages/elm-lang/animation-frame/latest/AnimationFrame#times).\n    You can also specify the duration of animation, and delay it prior to starting.\n\n* **Easing:** An easing function makes an animation come alive with acceleration or even elasticity. You can find all\n    kinds of crazy easing functions in [this library](http://package.elm-lang.org/packages/elm-community/easing-functions/latest/Ease).\n\n* **Interpolation:** It wouldn't be very useful is all animations went from 0 to 1 (the default), would it? You can\n    specify values to animate `from` and `to`. Furthermore, you can set the average speed (distance between these two\n    values per milisecond) instead of a duration.\n\nOnce you have your value at the current time, you can render it to any frontend you choose: Collage, Element, Html,\n[Turtles](http://package.elm-lang.org/packages/mgold/elm-turtle-graphics/latest)...\n\n## Basic Usage\n`animation` creates an animation starting at the given time (usually the current time). `animate` takes the current time\nand an animation, and produces the current value. Animations go through three phases (not related to the three stages of\nrendering): they are scheduled, they run, and then they are done.\n\n````elm\nimport Animation exposing (..)\nimport Time exposing (second)\n\nmyAnim = animation 0 |> from 100 |> to 300 |> duration (4*second) |> delay (1*second)\nList.map (\\t -> animate (t*second) myAnim) [0..6]\n-- [100, 100, 129.29, 200, 270.71, 300, 300]\n````\n\nNotice that the value remains constant during the delay and after the animation is done. You can also use `static` to\ncreate animations of constant value. By using these two degenerate cases, you ought to be able to keep animations in\nyour model without worrying about when they aren't actually animating.\n\n# Create\n@docs animation, static\n\n# Run\n@docs animate\n\n# Modify\n## Settings\nYou may set an animation's duration or speed but not both, since one determines the other.\n@docs duration, speed, delay, ease, from, to\n\n## Interruptions\n@docs undo, retarget\n\n# Inspect\n## Equality\n@docs equals\n\n## Lifecycle\n@docs isScheduled, isRunning, isDone\n\n## Physics\n@docs timeElapsed, timeRemaining, velocity\n\n## Settings\n@docs getStart, getDuration, getSpeed, getDelay, getEase, getFrom, getTo\n\n# The Animation Type\n@docs Animation\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Animation",
            "comment": " An Animation is an opaque type that represents a time-varying number (floating point value).\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "animate",
            "comment": " Produce the value of an animation at a given time.\n",
            "type": "Time.Time -> Animation.Animation -> Float"
          },
          {
            "name": "animation",
            "comment": " Create an animation that begins at the given time. By default, animations have no delay, last 750ms, and interpolate\nbetween 0 and 1 with a sinusoidal easing function. All of these can be changed.\n",
            "type": "Time.Time -> Animation.Animation"
          },
          {
            "name": "delay",
            "comment": " Set the delay of an animation to the time specified. An animation will not start until after the delay. The default\ndelay is 0. Note that the `Time` argument is _not_ the current running time but the delay to be set.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "duration",
            "comment": " Set the duration of an animation to the time specified. Note that the `Time` argument is _not_ the current running\ntime but the duration to be set.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "ease",
            "comment": " Set the easing function of an animation. It is expected that `f 0 == 0` and `f 1 == 1`. The default is a sinusoidal\nin-out.\n",
            "type": "(Float -> Float) -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "equals",
            "comment": " Equality on animations. Compared to `(==)` (which should not be used), this\nfunction handles the conversion of speed and duration, and start and delay. It\nalso samples the easing functions, which may produce false positives (but\nusually not in practice).\n\n    -- These are True\n    animation 0 `equals` animation 0\n    (animation 0 |> delay 10) `equals` animation 10\n    (animation 0 |> duration 1000) `equals` (animation 0 |> speed 0.001)\n\n    -- These are False\n    static 0 `equals` animation 0\n    (animation 0 |> from -1) `equals` animation 0\n    (animation 0 |> ease identity) `equals` animation 0\n",
            "type": "Animation.Animation -> Animation.Animation -> Bool"
          },
          {
            "name": "from",
            "comment": " Set the initial value of an animation. The default is 0.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "getDelay",
            "comment": " Get the delay of the animation.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getDuration",
            "comment": " Get the duration of the animation, not counting delay.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getEase",
            "comment": " Get the easing function of the animation.\n",
            "type": "Animation.Animation -> Float -> Float"
          },
          {
            "name": "getFrom",
            "comment": " Get the initial value of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "getSpeed",
            "comment": " Get the average speed of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "getStart",
            "comment": " Get the start time of the animation, not accounting for delay. For animations created with `animate`, this is the\nargument that was passed. For interrupted animations, this is when the interruption occured.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getTo",
            "comment": " Get the final value of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "isDone",
            "comment": " Determine if an animation is done, meaning that it has arrived at its final value. Static animations are always\ndone.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "isRunning",
            "comment": " Determine if an animation is running, meaning that it is currently changing value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "isScheduled",
            "comment": " Determine if an animation is scheduled, meaning that it has not yet changed value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "retarget",
            "comment": " Change the `to` value of a running animation, without an abrupt change in velocity. The easing function will be\nretained (but you can change it with `ease`). The animation will retain its average speed (but not necessarily\nduration). If you retarget multiple animations at once (e.g. x and y), you will need to sync their durations (perhaps to\nthe `timeRemaining` in the old animations).\n\nIf the retargeted animation is still scheduled, the `to` value is replaced. If it's already done, `from` becomes the\nold `to`, `to` and `start` are set to the values provided, and the delay is set to zero. If the old and new `to` values\nare the same, the animation is unchanged.\n",
            "type": "Time.Time -> Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "speed",
            "comment": " Set the _average_ speed of an animation. Speed is the rate at which the animation progresses between the `from` and\n`to` values per milisecond. Most easing functions will deviate from the average speed. You do not need to worry about\nthe sign. It is safe to alter the `from` and `to` values after setting speed.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "static",
            "comment": " Create a static animation that is always the given value.\n",
            "type": "Float -> Animation.Animation"
          },
          {
            "name": "timeElapsed",
            "comment": " Get the time elapsed since the animation started playing (after the end of delay). Will be zero for animations that\nare still scheduled, and is not bounded for animations that are already done.\n",
            "type": "Time.Time -> Animation.Animation -> Time.Time"
          },
          {
            "name": "timeRemaining",
            "comment": " Get the time that the animation has yet to play (or be delayed) before becoming done. Will be zero for animations\nthat are already done.\n",
            "type": "Time.Time -> Animation.Animation -> Time.Time"
          },
          {
            "name": "to",
            "comment": " Set the final value of an animation. The default is 1.\n\nFor animations that are already running, use `retarget`.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "undo",
            "comment": " Run an animation in reverse from its current state, beginning immediately (even if the animation was delayed or has\nbeen done for a while).\n\nUsually you don't want to undo an animation that has been retargeted; just retarget it again. Similarly, undoing an\nundone animation is frequently not what you want.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "velocity",
            "comment": " Get the _current_ velocity of the animation, aproximated by looking 10ms forwards and backwards (the central\ndifference). The velocity may be negative.\n",
            "type": "Time.Time -> Animation.Animation -> Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "mgold/elm-random-pcg",
    "version": "4.0.2",
    "docs": [
      {
        "name": "Random.Pcg.Interop",
        "comment": " Provides a function to create a PCG seed from a seed in the core library.\nThis is useful for library writers who need a splittable or most robust PRNG but\ndon't want to require client code to use the PCG implementation.\n\n```elm\nimport Random\nimport Random.Pcg\nimport Random.Pcg.Interop as Random.Pcg\n```\n\n@docs fission\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fission",
            "comment": " Use the core library's random seed to produce a PCG random seed.\n\nIt seems that the package website doesn't show modules in type annotations, so here it is in full:\n\n    fission : Random.Generator (Random.Pcg.Seed)\n\n",
            "type": "Random.Generator Random.Pcg.Seed"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Random.Pcg",
        "comment": " Generate psuedo-random numbers and values, by constructing\n[generators](#Generator) for them. There are a bunch of basic generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier generators\nwith functions like [`list`](#list) and [`map`](#map).\n\nYou run a `Generator` by calling the [`step`](#step) function, which\nalso takes a random [`Seed`](#Seed), and passes back a new seed. You should\nnever use the same seed twice because you will get the same result! If you need\nrandom values over time, you should store the most recent seed in your model.\nAlternatively, use [`generate`](#generate) to obtain random values from the Elm\nruntime.\n\nThis is an implementation of [PCG](http://www.pcg-random.org/) by M. E. O'Neil,\nand is not cryptographically secure.\n\n# Getting Started\n@docs initialSeed, step, generate\n\n# Basic Generators\n@docs Generator, bool, int, float, oneIn, sample\n\n# Combining Generators\n@docs pair, list, maybe, choice, choices, frequency\n\n# Custom Generators\n@docs constant, map, map2, map3, map4, map5, andMap, andThen, filter\n\n# Working With Seeds\n@docs Seed, independentSeed, fastForward, toJson, fromJson\n\n# Constants\n@docs minInt, maxInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Seed",
            "comment": " A `Seed` is the source of randomness in the whole system. It hides the\ncurrent state of the random number generator.\n\nGenerators, not seeds, are the primary data structure for generating random\nvalues. Generators are much easier to chain and combine than functions that take\nand return seeds. Creating and managing seeds should happen \"high up\" in your\nprogram.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Map over any number of generators.\n\n    randomPerson : Generator Person\n    randomPerson =\n      person `map` genFirstName\n          `andMap` genLastName\n          `andMap` genBirthday\n          `andMap` genPhoneNumber\n          `andMap` genAddress\n          `andMap` genEmail\n",
            "type": "Random.Pcg.Generator (a -> b) -> Random.Pcg.Generator a -> Random.Pcg.Generator b"
          },
          {
            "name": "andThen",
            "comment": " Chain random operations by providing a callback that accepts a\nrandomly-generated value. The random value can be used to drive more randomness.\n\nThis example shows how we can use `andThen` to generate a list of random values\n*and* random length. Then we use `map` to apply a stateless function to that\nlist. Assume we already have `genName : Generator String` defined.\n\n    authors : Generator String\n    authors =\n      int 1 5 -- number of authors\n      |> andThen (\\i -> list i genName)\n      |> map (\\ns ->\n        case ns of\n          [n] ->\n            \"Author: \" ++ n\n          n::ns ->\n            \"Authors: \" ++ String.join \", \" ns ++ \" and \" ++ n\n          [] ->\n            \"This can't happen\"\n        )\n\nIf you find yourself calling `constant` in every branch of the callback, you can\nprobably use `map` instead.\n",
            "type": "(a -> Random.Pcg.Generator b) -> Random.Pcg.Generator a -> Random.Pcg.Generator b"
          },
          {
            "name": "bool",
            "comment": " Create a generator that produces boolean values with equal probability. This\nexample simulates flipping three coins and checking if they're all heads.\n\n    threeHeads : Generator Bool\n    threeHeads =\n      map3 (\\a b c -> a && b && c) bool bool bool\n",
            "type": "Random.Pcg.Generator Bool"
          },
          {
            "name": "choice",
            "comment": " Choose between two values with equal probability.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n      choice Heads Tails\n",
            "type": "a -> a -> Random.Pcg.Generator a"
          },
          {
            "name": "choices",
            "comment": " Create a generator that chooses a generator from a list of generators\nwith equal probability.\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List (Random.Pcg.Generator a) -> Random.Pcg.Generator a"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always produces the value provided. This is useful\nwhen creating complicated chained generators and you need to handle a simple\ncase. It's also useful for the base case of recursive generators.\n",
            "type": "a -> Random.Pcg.Generator a"
          },
          {
            "name": "fastForward",
            "comment": " Fast forward a seed the given number of steps, which may be negative (the\nseed will be \"rewound\"). This allows a single seed to serve as a random-access\nlookup table of random numbers. (To be sure no one else uses the seed, use\n`step independentSeed` to split off your own.)\n\n    diceRollTable : Int -> Int\n    diceRollTable i =\n      fastForward i mySeed |> step (int 1 6) |> Tuple.first\n",
            "type": "Int -> Random.Pcg.Seed -> Random.Pcg.Seed"
          },
          {
            "name": "filter",
            "comment": " Filter a generator so that all generated values satisfy the given predicate.\n\n    evens : Generator Int\n    evens =\n      filter (\\i -> i % 2 == 0) (int minInt maxInt)\n\n**Warning:** If the predicate is unsatisfiable, the generator will not terminate, your\napplication will hang with an infinite loop, and you will be sad. You should\nalso avoid predicates that are merely very difficult to satisfy.\n\n    badCrashingGenerator =\n      filter (\\_ -> False) anotherGenerator\n\n    verySlowGenerator =\n      filter (\\i -> i % 2000 == 0) (int minInt maxInt)\n",
            "type": "(a -> Bool) -> Random.Pcg.Generator a -> Random.Pcg.Generator a"
          },
          {
            "name": "float",
            "comment": " Generate floats in a given range. The following example is a generator\nthat produces numbers between 0 and 1.\n\n    probability : Generator Float\n    probability =\n      float 0 1\n",
            "type": "Float -> Float -> Random.Pcg.Generator Float"
          },
          {
            "name": "frequency",
            "comment": " Create a generator that chooses a generator from a list of generators\nbased on the provided weight. The likelihood of a given generator being\nchosen is its weight divided by the total weight (which doesn't have to equal 1).\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List ( Float, Random.Pcg.Generator a ) -> Random.Pcg.Generator a"
          },
          {
            "name": "fromJson",
            "comment": " A JSON decoder that can recover seeds encoded using `toJson`. Alternatively,\npass an integer to create a seed using `initialSeed`.\n\n    Json.Decode.decodeValue fromJson (toJson mySeed) == Ok mySeed\n",
            "type": "Json.Decode.Decoder Random.Pcg.Seed"
          },
          {
            "name": "generate",
            "comment": " Create a Command that will generate random values according to the supplied\n`Generator`.\n\nThink of this function as an alternative to `step`, since they both provide a\nway to actually get the random values that you want. This function frees you\nfrom worrying about seeds entirely, but as a tradeoff, you get your random\nvalues asynchronously, in their own Message. Additionally, due to constraints on\nthird-party packages, it's possible that multiple commands sent at the same\nmoment will return the same values.\n\nYou can also think of this function as an alternative to `independentSeed`,\nsince they both allow you to use randomness in deeply nested components. In the\ncase of this function, it's through sending Commands up the chain that you have\nto set up anyway.\n",
            "type": "(a -> msg) -> Random.Pcg.Generator a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "independentSeed",
            "comment": " A generator that produces a seed that is independent of any other seed in\nthe program. These seeds will generate their own unqiue sequences of random\nvalues. They are useful when you need an unknown amount of randomness *later*\nbut can request only a fixed amount of randomness *now*.\n\nLet's say you write a component that uses some randomness to initialize itself\nand then never needs randomness again. You can easily write a `Generator\nComponent` by mapping over the generators it needs. But if component requires\nrandomness after initialization, it should keep its own independent seed, which\nit can get by mapping over *this* generator.\n\n    type alias Component = { seed : Seed }\n\n    genComponent : Generator Component\n    genComponent = map Component independentSeed\n\nIf you have a lot of components, you can initialize them like so:\n\n    genComponents : List (Seed -> a) -> Generator (List a)\n    genComponents constructors =\n        list (List.length constructors) independentSeed\n            |> map (List.map2 (<|) constructors)\n\nThe independent seeds are extremely likely to be distinct for all practical\npurposes. However, it is not proven that there are no pathological cases.\n",
            "type": "Random.Pcg.Generator Random.Pcg.Seed"
          },
          {
            "name": "initialSeed",
            "comment": " Initialize the state of the random number generator. The input should be\na randomly chosen 32-bit integer. You can generate and copy random integers to\ncreate a reproducible psuedo-random generator.\n\n    $ node\n    > Math.floor(Math.random()*0xFFFFFFFF)\n    227852860\n\n    -- Elm\n    seed0 : Seed\n    seed0 = initialSeed 227852860\n\nAlternatively, you can generate the random integers on page load and pass them\nthrough a port. The program will be different every time.\n\n    -- Elm\n    port randomSeed : Int\n\n    seed0 : Seed\n    seed0 = initialSeed randomSeed\n\n    -- JS\n    Elm.ModuleName.fullscreen(\n      { randomSeed: Math.floor(Math.random()*0xFFFFFFFF) })\n\nEither way, you should initialize a random seed only once. After that, whenever\nyou use a seed, you'll get another one back.\n",
            "type": "Int -> Random.Pcg.Seed"
          },
          {
            "name": "int",
            "comment": " Generate 32-bit integers in a given range, inclusive.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n\n*Performance note:* This function will be ~1.5x faster if the range (i.e. `max - min + 1`) is a power of two. The\neffect will only be noticable if you are generating tens of thousands of random integers.\n\n",
            "type": "Int -> Int -> Random.Pcg.Generator Int"
          },
          {
            "name": "list",
            "comment": " Create a list of random values of a given length.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n",
            "type": "Int -> Random.Pcg.Generator a -> Random.Pcg.Generator (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the values produced by a generator using a stateless function as a\ncallback.\n\nThese examples show how to generate letters based on a basic integer generator.\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n",
            "type": "(a -> b) -> Random.Pcg.Generator a -> Random.Pcg.Generator b"
          },
          {
            "name": "map2",
            "comment": " Combine two generators. This is useful when you have a function with two\narguments that both need to be given random inputs.\n\n    pointInCircle : Float -> Generator (Float, Float)\n    pointInCircle radius =\n      let\n        r = float 0 radius\n        theta = map degrees (float 0 360)\n      in\n        map2 (curry fromPolar) r theta\n\n",
            "type": "(a -> b -> c) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c"
          },
          {
            "name": "map3",
            "comment": " Combine three generators. This could be used to produce random colors.\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (float 0 360)) (float 0 1) (float 0 1)\n",
            "type": "(a -> b -> c -> d) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c -> Random.Pcg.Generator d"
          },
          {
            "name": "map4",
            "comment": " Combine four generators. This could be used to produce random transparent\ncolors.\n\n    rgba : Generator Color.Color\n    rgba =\n      map4 Color.rgba (int 0 255) (int 0 255) (int 0 255) (float 0 1)\n",
            "type": "(a -> b -> c -> d -> e) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c -> Random.Pcg.Generator d -> Random.Pcg.Generator e"
          },
          {
            "name": "map5",
            "comment": " Combine five generators.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c -> Random.Pcg.Generator d -> Random.Pcg.Generator e -> Random.Pcg.Generator f"
          },
          {
            "name": "maxInt",
            "comment": " The maximum value for randomly generated 32-bit ints.\n",
            "type": "Int"
          },
          {
            "name": "maybe",
            "comment": " Produce `Just` a value on `True`, and `Nothing` on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.Pcg.Generator Bool -> Random.Pcg.Generator a -> Random.Pcg.Generator (Maybe.Maybe a)"
          },
          {
            "name": "minInt",
            "comment": " The minimum value for randomly generated 32-bit ints.\n",
            "type": "Int"
          },
          {
            "name": "oneIn",
            "comment": " Produce `True` one-in-n times on average.\n\nDo not pass a value less then one to this function.\n\n    flippedHeads = oneIn 2\n    rolled6 = oneIn 6\n    criticalHit = oneIn 20\n",
            "type": "Int -> Random.Pcg.Generator Bool"
          },
          {
            "name": "pair",
            "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n",
            "type": "Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator ( a, b )"
          },
          {
            "name": "sample",
            "comment": " Given a list, choose an element uniformly at random. `Nothing` is only\nproduced if the list is empty.\n\n    type Direction = North | South | East | West\n\n    direction : Generator Direction\n    direction =\n      sample [North, South, East, West]\n        |> map (Maybe.withDefault North)\n\n",
            "type": "List a -> Random.Pcg.Generator (Maybe.Maybe a)"
          },
          {
            "name": "step",
            "comment": " Generate a random value as specified by a given `Generator`, using a `Seed`\nand returning a new one.\n\nIn the following example, we are trying to generate numbers between 0 and 100\nwith the `int 0 100` generator. Each time we call `generate` we need to provide\na seed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\n    (x, seed1) = step (int 0 100) seed0\n    (y, seed2) = step (int 0 100) seed1\n    (z, seed3) = step (int 0 100) seed2\n    [x, y, z] -- [85, 0, 38]\n\nNotice that we use different seeds on each line. This is important! If you reuse\nthe same seed, you get the same results.\n\n    (x, _) = step (int 0 100) seed0\n    (y, _) = step (int 0 100) seed0\n    (z, _) = step (int 0 100) seed0\n    [x,y,z] -- [85, 85, 85]\n\nAs you can see, threading seeds through many calls to `step` is tedious and\nerror-prone. That's why this library includes many functions to build more\ncomplicated generators, allowing you to call `step` only a small number of\ntimes.\n\nOur example is best written as:\n\n    (xs, newSeed) = step (list 3 <| int 0 100) seed0\n    xs -- [85, 0, 38]\n\n",
            "type": "Random.Pcg.Generator a -> Random.Pcg.Seed -> ( a, Random.Pcg.Seed )"
          },
          {
            "name": "toJson",
            "comment": " Serialize a seed as a [JSON\nvalue](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode#Value)\nto be sent out a port, stored in local storage, and so on. The seed can be\nrecovered using `fromJson`.\n\nDo not inspect or change the resulting JSON value.\n",
            "type": "Random.Pcg.Seed -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "myrho/elm-round",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Round",
        "comment": " This library empowers you to convert a `Float` to a `String` with ultimate \ncontrol how many digits after the decimal point are shown and how the remaining \ndigits are rounded. You can round, round up and round down the mathematical or \nthe commerical way. For example:\n\n    x = 3.141592653589793\n\n    round 2 x -- \"3.14\"\n    round 4 x -- \"3.1416\"\n    \n    ceiling 2 x -- \"3.15\"\n    floor 4 x -- \"3.1415\"\n\n[Commercial \nrounding](https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero) \nmeans that negative and positive numbers are treated symmetrically. It affects \nnumbers whose last digit equals 5. For example:\n\n    x = -0.5\n\n    round 0 x -- \"0\"\n    roundCom 0 x -- \"-1\"\n\n    floor 0 x -- \"-1\"\n    floorCom 0 x -- \"0\"\n\n    ceiling 0 x -- \"0\"\n    ceilingCom 0 x -- \"-1\"\n\nHave a look at the tests for more examples!\n\nUnder the hood the `Float` is \n\n  * converted to a string\n  * normalized (if it is in scientific notation, eg `1.234e-23`)\n  * splitted at the comma.\n  * Then the part after comma is truncated to the number of desired digits + 1\n  * inserting a comma before the last digit,\n  * turning this into a `Float` again,\n  * apply a rounding function on it,\n  * attach it the part before comma again.\n  * By the way handles cases with already rounded numbers, zero and the sign.\n\nWhy aren't we just doing `x * 1000 |> round |> toFloat |> (flip (/)) 1000` in \norder to round to 3 digits after comma? Because due to floating point \narithmetic it might happen that it outputs someting like `3.1416000000001`, \nalthough we just wanted `3.1416`. Ugly.\n\n# Round to String\n@docs round, ceiling, floor, roundCom, ceilingCom, floorCom\n\n# Round to Float\n@docs roundNum, ceilingNum, floorNum, roundNumCom, ceilingNumCom, floorNumCom\n\n# Utility functions\n@docs toDecimal, truncate\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "ceiling",
            "comment": " Turns a `Float` into a `String` and rounds it up to the given number of \ndigits after decimal point.\n\n    x = 3.141592653589793\n\n    ceiling 2 x -- \"3.15\"\n    ceiling 4 x -- \"3.1416\"\n",
            "type": "Int -> Float -> String"
          },
          {
            "name": "ceilingCom",
            "comment": " Turns a `Float` into a `String` and rounds it up to the given number of \ndigits after decimal point the commercial way.\n\n    x = -0.5\n\n    ceiling 0 x -- \"0\"\n    ceilingCom 0 x -- \"-1\"\n",
            "type": "Int -> Float -> String"
          },
          {
            "name": "ceilingNum",
            "comment": " As `ceiling` but turns the resulting `String` back to a `Float`.\n",
            "type": "Int -> Float -> Float"
          },
          {
            "name": "ceilingNumCom",
            "comment": " As `ceilingCom` but turns the resulting `String` back to a `Float`.\n",
            "type": "Int -> Float -> Float"
          },
          {
            "name": "floor",
            "comment": " Turns a `Float` into a `String` and rounds it down to the given number of \ndigits after decimal point.\n\n    x = 3.141592653589793\n\n    floor 2 x -- \"3.14\"\n    floor 4 x -- \"3.1415\"\n",
            "type": "Int -> Float -> String"
          },
          {
            "name": "floorCom",
            "comment": " Turns a `Float` into a `String` and rounds it down to the given number of \ndigits after decimal point the commercial way.\n\n    x = -0.5\n\n    floor 0 x -- \"-1\"\n    floorCom 0 x -- \"0\"\n",
            "type": "Int -> Float -> String"
          },
          {
            "name": "floorNum",
            "comment": " As `floor` but turns the resulting `String` back to a `Float`.\n",
            "type": "Int -> Float -> Float"
          },
          {
            "name": "floorNumCom",
            "comment": " As `floorCom` but turns the resulting `String` back to a `Float`.\n",
            "type": "Int -> Float -> Float"
          },
          {
            "name": "round",
            "comment": " Turns a `Float` into a `String` and rounds it to the given number of digits \nafter decimal point.\n\n    x = 3.141592653589793\n\n    round 2 x -- \"3.14\"\n    round 4 x -- \"3.1416\"\n",
            "type": "Int -> Float -> String"
          },
          {
            "name": "roundCom",
            "comment": " Turns a `Float` into a `String` and rounds it to the given number of digits \nafter decimal point the commercial way.\n\n    x = -0.5\n\n    round 0 x -- \"0\"\n    roundCom 0 x -- \"-1\"\n",
            "type": "Int -> Float -> String"
          },
          {
            "name": "roundNum",
            "comment": " As `round` but turns the resulting `String` back to a `Float`.\n",
            "type": "Int -> Float -> Float"
          },
          {
            "name": "roundNumCom",
            "comment": " As `roundCom` but turns the resulting `String` back to a `Float`.\n",
            "type": "Int -> Float -> Float"
          },
          {
            "name": "toDecimal",
            "comment": " Transforms a `Float` in scientific notation into its decimal representation \nas a `String`.\n\n    x = 1e30\n    toDecimal x -- outputs \"1000000000000000000000000000000\"\n\n    x = 1.2345e-30\n    toDecimal x -- outputs \"0.0000000000000000000000000000012345\"\n",
            "type": "Float -> String"
          },
          {
            "name": "truncate",
            "comment": " Like Elm's basic `truncate` but works on the full length of a float's 64 \nbits. So it's more precise.\n\n    x = 9007199254740.99\n\n    Basics.truncate x -- 652835028 (which is not correct)\n    Round.truncate x -- 9007199254740 (which is)\n",
            "type": "Float -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "nphollon/update-clock",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Clock",
        "comment": " Clock is designed to work with [elm-lang/animation-frame](package.elm-lang.org/packages/elm-lang/animation-frame/latest/AnimationFrame). Your model will get consistently-paced updates, despite fluctuations in frame diffs.\n\n@docs Clock, withPeriod, setPeriod, update\n",
        "aliases": [],
        "types": [
          {
            "name": "Clock",
            "comment": " A clock.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "setPeriod",
            "comment": " Change a clock's period to the given value.\n",
            "type": "Time.Time -> Clock.Clock -> Clock.Clock"
          },
          {
            "name": "update",
            "comment": " Called like so:\n\n    update up diff clock model\n\nThe diff is a real-time diff, such as what is given by AnimationFrame.diffs. This function will pass the diff to the clock. If the diff causes the clock's counter to increment, then `up` will be called with the counter and the model.\n",
            "type": "(Int -> a -> a) -> Time.Time -> Clock.Clock -> a -> ( Clock.Clock, a )"
          },
          {
            "name": "withPeriod",
            "comment": " Create a clock that updates with the given real-time period.\n\n    withDelta 0.1 -- calls the tick function ten times per second\n",
            "type": "Time.Time -> Clock.Clock"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "prikhi/elm-http-builder",
    "version": "1.0.0",
    "docs": [
      {
        "name": "HttpBuilder",
        "comment": " Extra helpers for more easily building Http requests that require greater\nconfiguration than what is provided by `elm-http` out of the box.\n\n# Send a request\n@docs send\n\n# Start a request\n@docs RequestBuilder, url, get, post, put, patch, delete, options, trace, head\n\n# Configure request properties\n@docs withHeader, withHeaders, withBody, withStringBody, withJsonBody, withMultipartBody, withMultipartStringBody, withUrlEncodedBody\n\n# Configure settings\n@docs withTimeout, withCredentials\n\n# Custom configurations\n@docs withCacheBuster, withZeroStatusAllowed\n\n# Parse the response\n@docs BodyReader, stringReader, jsonReader, unitReader, Error, Response\n\n# Inspect the request\n@docs toRequest, toRequestRecord, toSettings, Request, Settings\n",
        "aliases": [
          {
            "name": "BodyReader",
            "comment": " A function for transforming raw response bodies into a useful value. Plain\nstring and JSON decoding readers are provided, and the string reader can be\nused as a basis for more custom readers. When future Http value types become\nsupported matching readers will be added to extract them.\n",
            "args": [
              "a"
            ],
            "type": "String -> Result.Result String a"
          },
          {
            "name": "Request",
            "comment": " A `Request` represents an HTTP request to some url.\n",
            "args": [
              "a"
            ],
            "type": "{ method : String , headers : List Http.Header , url : String , body : Http.Body , expect : Http.Expect a }"
          },
          {
            "name": "Response",
            "comment": " Represents a response from the server, including both a decoded JSON payload\nand basic network information.\n",
            "args": [
              "a"
            ],
            "type": "{ data : a , status : Int , statusText : String , headers : Dict.Dict String String , url : String }"
          },
          {
            "name": "Settings",
            "comment": " Configurable settings for Requests.\n",
            "args": [],
            "type": "{ timeout : Time.Time, withCredentials : Bool }"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " Indicates that _some_ kind of failure occured along the path of making and\nreceiving the request. This includes a timeout or network issue, a failure to\nparse the response body, or a status code outside the 200 range. In the case\nthat the error is due to a non-2xx response code, the full response is provided\nand the data decoded as JSON using the decoder for errors passed to `send`.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "BadUrl",
                [
                  "String"
                ]
              ],
              [
                "Timeout",
                []
              ],
              [
                "NetworkError",
                []
              ],
              [
                "BadStatus",
                [
                  "HttpBuilder.Response a"
                ]
              ],
              [
                "BadPayload",
                [
                  "String",
                  "HttpBuilder.Response a"
                ]
              ],
              [
                "DecodingFailure",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "RequestBuilder",
            "comment": " A type for chaining request configuration\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "delete",
            "comment": " Start building a DELETE request with a given URL\n\n    delete \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "get",
            "comment": " Start building a GET request with a given URL\n\n    get \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "head",
            "comment": " Start building a HEAD request with a given URL\n\n    head \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "jsonReader",
            "comment": " Attempts to decode the raw response body with the given\n`Json.Decode.Decoder`, failing if the body is malformed or not readable as a\nstring.\n",
            "type": "Json.Decode.Decoder a -> HttpBuilder.BodyReader a"
          },
          {
            "name": "options",
            "comment": " Start building a OPTIONS request with a given URL\n\n    options \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "patch",
            "comment": " Start building a PATCH request with a given URL\n\n    patch \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "post",
            "comment": " Start building a POST request with a given URL\n\n    post \"https://example.com/api/items\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "put",
            "comment": " Start building a PUT request with a given URL\n\n    put \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "send",
            "comment": " Once you're finished building up a request, send it with readers for the\nsuccessful response value as well as the server error response value.\n\n    -- In this example a succesful response from the server looks like\n    -- [\"string\", \"string\", \"string\"], and an error body might look like\n    -- \"Bad Request\" or something similar, such that it is a string that is\n    -- not valid JSON (it would need to look like \"\\\"Bad Request\\\"\" to be\n    -- decodable as JSON).\n\n    successDecoder : Json.Decode.Decoder (List String)\n    successDecoder =\n        Json.Decode.list Json.Decode.string\n\n    get \"https://example.com/api/items\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withTimeout (10 * Time.second)\n        |> send (jsonReader successDecoder) stringReader\n",
            "type": "HttpBuilder.BodyReader a -> HttpBuilder.BodyReader b -> HttpBuilder.RequestBuilder -> Task.Task (HttpBuilder.Error b) (HttpBuilder.Response a)"
          },
          {
            "name": "stringReader",
            "comment": " Attempts to read a raw response body as a plain text string, failing if the\nbody is not readable as a string.\n",
            "type": "HttpBuilder.BodyReader String"
          },
          {
            "name": "toRequest",
            "comment": " Extract the Http.Request component of the builder, for introspection and\ntesting\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.BodyReader a -> Http.Request (HttpBuilder.Response a)"
          },
          {
            "name": "toRequestRecord",
            "comment": " Extract a record used to create an Http.Request from the HttpBuilder.\n",
            "type": "HttpBuilder.BodyReader a -> HttpBuilder.RequestBuilder -> { body : Http.Body , expect : Http.Expect (HttpBuilder.Response a) , headers : List Http.Header , method : String , timeout : Maybe.Maybe Time.Time , url : String , withCredentials : Bool }"
          },
          {
            "name": "toSettings",
            "comment": " Extract the Http.Settings component of the builder, for introspection and\ntesting\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.Settings"
          },
          {
            "name": "trace",
            "comment": " Start building a TRACE request with a given URL\n\n    trace \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "unitReader",
            "comment": " Totally discards the content of a raw response body and reads nothing,\nreturning `()` as the data value. Great for discarding error response bodies if\nthey just look like `\"Not Found\"` or whatever and aren't really useful.\n",
            "type": "HttpBuilder.BodyReader ()"
          },
          {
            "name": "url",
            "comment": " Construct a url using String, String key value pairs for the query string.\nSee `Http.url`.\n\n    googleUrl =\n        url \"https://google.com\" [(\"q\", \"elm\")]\n",
            "type": "String -> List ( String, String ) -> String"
          },
          {
            "name": "withBody",
            "comment": " Add a body to a request for requests that allow bodies.\n\n    post \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withBody (Http.string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "Http.Body -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withCacheBuster",
            "comment": " Injects a cache busting url param into the url with the current timestamp as\nthe value to prevent the server from caching responses\n    get \"https://example.com/api/items/1\"\n        |> withCredentials\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withCredentials",
            "comment": " Set the `withCredentials` flag on the request to True. Works via\n[`XMLHttpRequest#withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n\n    get \"https://example.com/api/items/1\"\n        |> withCredentials\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withHeader",
            "comment": " Add a single header to a request\n\n    get \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n",
            "type": "String -> String -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withHeaders",
            "comment": " Add many headers to a request\n\n    get \"https://example.com/api/items/1\"\n        |> withHeaders [(\"Content-Type\", \"application/json\"), (\"Accept\", \"application/json\")]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withJsonBody",
            "comment": " Convenience function for adding a JSON body to a request\n\n    params = Json.Encode.object\n        [ (\"sortBy\", Json.Encode.string \"coolness\")\n        , (\"take\", Json.Encode.int 10)\n        ]\n\n    post \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withJsonBody params\n",
            "type": "Json.Encode.Value -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withMultipartBody",
            "comment": " Convenience function for adding a multiplart body to a request\n\n    post \"https://example.com/api/items/1\"\n        |> withMultipartBody [Http.stringData \"user\" (JS.encode user)]\n",
            "type": "List Http.Part -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withMultipartStringBody",
            "comment": " Convience function for adding multipart bodies composed of String, String\nkey-value pairs. Since `Http.stringData` is currently the only `Http.Data`\ncreator having this function removes the need to use the `Http.Data` type in\nyour type signatures.\n\n    post \"https://example.com/api/items/1\"\n        |> withMultipartStringBody [(\"user\", JS.encode user)]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withStringBody",
            "comment": " Convenience function for adding a string body to a request\n\n    post \"https://example.com/api/items/1\"\n        |> withStringBody \"application/json\" \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\"\n",
            "type": "String -> String -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withTimeout",
            "comment": " Set the `timeout` setting on the request\n\n    get \"https://example.com/api/items/1\"\n        |> withTimeout (10 * Time.second)\n",
            "type": "Time.Time -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withUrlEncodedBody",
            "comment": " Convenience function for adding url encoded bodies\n\n    post \"https://example.com/api/whatever\"\n        |> withUrlEncodedBody [(\"user\", \"Evan\"), (\"pwd\", \"secret\")]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withZeroStatusAllowed",
            "comment": " Explicitly allows a require for a file:// url with a response status code\nof 0 to pass through successfully. This is a common issue when dealing with\nfile:// urls in environments like cordova, and using this function will allow\nyou to work around the problem on an opt-in basis.\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rluiten/elm-date-extra",
    "version": "8.1.2",
    "docs": [
      {
        "name": "Date.Extra.Utils",
        "comment": " Date Utils.\n\n2016/14/23 `fromString` was removed as its extra date validity checking had problems in\nmany timezones so it became the same as `Date.fromString`.\n\n## Date parsing\n**Be careful with unsafeFromString it will Debug.crash() if it cant parse date.**\n@docs unsafeFromString\n\n## Utility\n@docs dayList\n@docs isoWeek\n@docs isoWeekOne\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayList",
            "comment": " Return a list of days dayLength long for successive days\nstarting from startDate.\n",
            "type": "Int -> Date.Date -> List Date.Date"
          },
          {
            "name": "isoWeek",
            "comment": " Return iso week values year, week, isoDayOfWeek.\nInput date is expected to be in local time zone of vm.\n",
            "type": "Date.Date -> ( Int, Int, Int )"
          },
          {
            "name": "isoWeekOne",
            "comment": " Return date of start of ISO week one for given year. ",
            "type": "Int -> Date.Date"
          },
          {
            "name": "unsafeFromString",
            "comment": " Utility for known input string date creation cases.\nChecks for a fail just in case and calls Debug.crash().\n",
            "type": "String -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.TimeUnit",
        "comment": " Reduce or Increase a date to a given start or end of a TimeUnit granularity.\n\nThis allows you to modify a date to reset to minimum or maximum values\nall values below a given TimeUnit granulariy.\n\nThis operates in local time zone so if you are not in UTC time zone\nand you output date in UTC time zone the datefields will not be to the start\nor end of the TimeUnit.\n\nExample `TimeUnit.startOfTime Hour date` will return a modified date with\n* Minutes to 0\n* Seconds to 0\n* Milliseconds to 0\n\nExample `TimeUnit.endOfTime Hour date` will return a modified date with\n* Minutes to 59\n* Seconds to 59\n* Milliseconds to 999\n\n\n@docs startOfTime\n@docs endOfTime\n@docs TimeUnit\n\n**Warning about using endOfTime for date ranges**\n\nIn the past when I have encountered people using a function like endOfTime\n(max date at a given granularity) it was being used in ways that could introduce\nproblems.\n\nHere is why.\n\n* You want to do a date range comparison between the minimum date\n(or current date) and this maximum date. In all the cases I can\nremember they were doing a date range comparison using\nGreater Than Or Equal To minimum date and Less Than or Equal To maximum date.\n * I can't state strongly enough that this is not the way to do date ranges\n it leads to missed matches that fall between the generated maximum date\n and the following date at the same granularity in systems were you are\n working at a granularity larger than the underlying stored granularity.\n Even if you are working at the smallest granularity of the system its a\n not a good way to think about ranges.\n * When comparing date ranges I strongly suggest you always use a\n half closed interval. This means always build date ranges using\n Greater Than or Equal To minimum date and Less Than maximum date.\n (This applies to floating point numbers as well).\n  * Its equivalently safe to go Greater Than minimum and\n  Less Than or Equal to maximum, in my experience business understanding\n  nearly always dictated include minimum excluded maximum.\n * Once you do this there is no possible gap and it becomes easier to think about.\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "TimeUnit",
            "comment": " Date granularity of operations. ",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "endOfTime",
            "comment": " Return a date created by increasing to maximum value all values below\na given TimeUnit granularity.\n\nThis modifies in local time zone values, as the date element parts\nare pulled straight from the local time zone date values.\n",
            "type": "Date.Extra.TimeUnit.TimeUnit -> Date.Date -> Date.Date"
          },
          {
            "name": "startOfTime",
            "comment": " Return a date created by reducing to minimum value all values below\na given TimeUnit granularity.\n\nThis modifies date in local time zone values, as the date element parts\nare pulled straight from the local time zone date values.\n",
            "type": "Date.Extra.TimeUnit.TimeUnit -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Field",
        "comment": " Setting a date field on a date.\n\n@docs fieldToDate\n@docs fieldToDateClamp\n@docs Field\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Field",
            "comment": " Configured Field and Value to set on date.\n\nAll field values are applied Modulus there maximum value.\n\n\n* DayOfWeek\n * The week keeps the same start of week day as passed in and changes day.\n* Month\n * Will not change year only the month of year.\n\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                [
                  "Int"
                ]
              ],
              [
                "Second",
                [
                  "Int"
                ]
              ],
              [
                "Minute",
                [
                  "Int"
                ]
              ],
              [
                "Hour",
                [
                  "Int"
                ]
              ],
              [
                "DayOfWeek",
                [
                  "( Date.Day, Date.Day )"
                ]
              ],
              [
                "DayOfMonth",
                [
                  "Int"
                ]
              ],
              [
                "Month",
                [
                  "Date.Month"
                ]
              ],
              [
                "Year",
                [
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "fieldToDate",
            "comment": " Set a field on a date to a specific value.\n\nIf your value in field is out side of valid range for\nthe date field this function will return Nothing.\n\n* DayOfWeek cannot be invalid input range\n* Month cannot be invalid\n\nValid ranges\n* Millisecond 0 to 999\n* Second 0 to 59\n* Minute 0 to 59\n* Hour 0 to 23\n* DayOfMonth 1 to max day of month for year\n* Year >= 0\n\n",
            "type": "Date.Extra.Field.Field -> Date.Date -> Maybe.Maybe Date.Date"
          },
          {
            "name": "fieldToDateClamp",
            "comment": "  Set a field on a date to a specific value.\n\nThis version clamps any input Field values to valid ranges as\ndescribed in the doc for fieldToDate function.\n",
            "type": "Date.Extra.Field.Field -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Duration",
        "comment": " A Duration is a length of time that may vary with with calendar date\nand time. It can be used to modify a date.\n\nWhen modify dates using Durations (Day | Month | Week | Year) this module\ncompensates for day light saving hour variations to minimise the scenarios\nthat cause the Hour field in the result to be different to the input date.\nIt can't completely avoid the hour changing as some hours are not a real\nworld date and hence will modify the hour more than the Duration modified.\n\nThis behaviour is modelled on momentjs so any observed behaviour that is\nnot the same as momentjs should be raised as in issue.\n\nNote adding or subtracting 24 * Hour units from a date may produce a\ndifferent answer to adding or subtracting a Day if day light saving\ntransitions occur as part of the date change.\n\n**Warning**\n\nBe careful if you add Duration Delta to a Date as Duration contains months\nand Years which are not fixed elapsed times like Period Delta, however if\nyou really need a relative number of months or years then it may meet\nyour needs.\n\n@docs add\n@docs Duration\n@docs DeltaRecord\n@docs zeroDelta\n@docs diff\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "DeltaRecord",
            "comment": " A multi granularity duration delta.\n\nThis does not contain week like Period.DeltaRecord.\nIt does contain month and year.\n",
            "args": [],
            "type": "{ year : Int , month : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int }"
          }
        ],
        "types": [
          {
            "name": "Duration",
            "comment": " A Duration is time period that may vary with with calendar and time.\n\nUsing `Duration` adding 24 hours can produce different result to adding 1 day.\n\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ],
              [
                "Delta",
                [
                  "Date.Extra.Duration.DeltaRecord"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add duration * count to date. ",
            "type": "Date.Extra.Duration.Duration -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "diff",
            "comment": " Return a Period representing date difference. date1 - date2.\n\nIf  you add the result of this function to date2 with addend of 1\nwill return date1.\n\n**Differences to Period.diff**\n\n* Duration DeltaRecord excludes week field\n* Duration DeltaRecord includes month field\n* Duration DeltaRecord includes year field\n* Day is number of days difference between months.\n\nWhen adding a Duration DeltaRecord to a date.\nThe larger granularity fields are added before lower granularity fields\nso Years are added before Months before Days etc.\n\n* Very different behaviour to Period diff\n * If date1 > date2 then all fields in DeltaRecord will be positive or zero.\n * If date1 < date2 then all fields in DeltaRecord will be negative or zero.\n* Because it deals with non fixed length periods of time\n\nExample 1.\n  days in 2016/05 (May) = 31\n  days in 2016/04 (Apr) = 30\n  days in 2016/03 (Mar) = 31\n\n  days in 2015/03 (Mar) = 31\n\n  diff of \"2016/05/15\" \"2015/03/20\"\n  result naive field diff.\n    year 1, month 2, day -5\n\n  days \"2015/03/20\" to \"2015/04/01\" (31 - 20) = 11 days (12). still in march with 11.\n  days \"2015/04/01\" to \"2016/04/15\" (15 - 1) = 14 days\n  months \"2016/04/15\" to \"2016/05/15\" 1 months\n  result field diff\n    year 1, month 1, day 26\n\n  This logic applies all the way down to milliseconds.\n\n\n\n ",
            "type": "Date.Date -> Date.Date -> Date.Extra.Duration.DeltaRecord"
          },
          {
            "name": "zeroDelta",
            "comment": " All zero delta.\nUseful as a starting point if you want to set a few fields only.\n",
            "type": "Date.Extra.Duration.DeltaRecord"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Format",
        "comment": " Date Format, turning dates into strings.\n\nThe format code originally came from and was modified and extended from.\nhttps://github.com/mgold/elm-date-format/blob/1.0.4/src/Date/Format.elm\n\n## Date presentation\n@docs format\n@docs formatUtc\n@docs formatOffset\n\n## Extra presentation convenience\n@docs isoString\n@docs isoStringNoOffset\n@docs utcIsoString\n\n## Low level formats used in specific places in library.\n@docs isoDateString\n@docs utcIsoDateString\n\n## Useful strings for format\n@docs isoFormat\n@docs isoMsecFormat\n@docs isoOffsetFormat\n@docs isoMsecOffsetFormat\n@docs isoDateFormat\n@docs isoTimeFormat\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Use a format string to format a date.\nThis gets time zone offset from provided date.\n",
            "type": "Date.Extra.Config.Config -> String -> Date.Date -> String"
          },
          {
            "name": "formatOffset",
            "comment": " This adjusts date for offset, and renders with the offset ",
            "type": "Date.Extra.Config.Config -> Int -> String -> Date.Date -> String"
          },
          {
            "name": "formatUtc",
            "comment": " Convert date to utc then format it with offset set to 0 if rendered. ",
            "type": "Date.Extra.Config.Config -> String -> Date.Date -> String"
          },
          {
            "name": "isoDateFormat",
            "comment": " ISO Date. ",
            "type": "String"
          },
          {
            "name": "isoDateString",
            "comment": " Return date as string.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoFormat",
            "comment": " ISO date time, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoMsecFormat",
            "comment": " ISO Date time with milliseconds, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoMsecOffsetFormat",
            "comment": " ISO Date time with milliseconds and timezone, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoOffsetFormat",
            "comment": " ISO Date time with timezone, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoString",
            "comment": " Return date and time as string in local zone. ",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoStringNoOffset",
            "comment": " Return date and time as string in local zone, without\na timezone offset as otuput by `Format.isoString`.\nIntroduced to deal with dates assuming local time zone.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoTimeFormat",
            "comment": " ISO Time 24hr. ",
            "type": "String"
          },
          {
            "name": "utcIsoDateString",
            "comment": " Utc variant of isoDateString.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "utcIsoString",
            "comment": " Return date and time as string in ISO form with Z for UTC offset. ",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Create",
        "comment": " Create dates and offsets.\n\n@docs getTimezoneOffset\n@docs dateFromFields\n@docs timeFromFields\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dateFromFields",
            "comment": " Create a date in current time zone from given fields.\nAll field values are clamped to there allowed range values.\nHours are input in 24 hour time range 0 to 23 valid.\nReturns dates in current time zone.\n\nUsing algorithm from http://howardhinnant.github.io/date_algorithms.html\nSpecifically days_from_civil function.\n\nThe two `<*>Compensate` values adjust for the zone offset time\nintroduced by `epochDate` as starting point.\n",
            "type": "Int -> Date.Month -> Int -> Int -> Int -> Int -> Int -> Date.Date"
          },
          {
            "name": "getTimezoneOffset",
            "comment": " Return the time zone offset of current javascript environment underneath\nElm in Minutes. This should produce the same result getTimezoneOffset()\nfor a given date in the same javascript VM.\n\nTime zone offset is always for a given date and time so an input date is required.\n\nGiven that timezones change (though slowly) this is not strictly pure, but\nI suspect it is sufficiently pure to be useful. Is is dependent on the timezone\nmechanics of the javascript VM.\n\n### Example zone stuff.\nFor an offset of -600 minutes, in +10:00 time zone offset.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "timeFromFields",
            "comment": " Create a time in current time zone from given fields, for\nwhen you dont care about the date part but need time part anyway.\n\nAll field values are clamped to there allowed range values.\nThis can only return dates in current time zone.\n\nHours are input in 24 hour time range 0 to 23 valid.\n\nThis defaults to year 1970, month Jan, day of month 1 for date part.\n",
            "type": "Int -> Int -> Int -> Int -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Configs",
        "comment": " Get a Date Extra Config based up on a locale code.\n\n@docs getConfig\n@docs configs\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "configs",
            "comment": " Built in configurations. ",
            "type": "Dict.Dict String Date.Extra.Config.Config"
          },
          {
            "name": "getConfig",
            "comment": " Get a Date Extra Config for a locale id.\n\nLower case matches strings and accepts \"-\" or \"_\" to seperate\nthe characters in code.\n\nReturns \"en_us\" config if it can't find a match in configs.\n",
            "type": "String -> Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_fr_fr",
        "comment": " This is the French config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Bruno Girin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for fr-fr. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_pl_pl",
        "comment": " This is the Polish config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Bartosz Sokół\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for pl-pl. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Period",
        "comment": " Period is a fixed length of time. It is an elapsed time concept, which\ndoes not include the concept of Years Months or Daylight saving variations.\n\nName of type concept copied from NodaTime.\n\n@docs add\n@docs diff\n@docs Period\n@docs DeltaRecord\n@docs zeroDelta\n@docs toTicks\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "DeltaRecord",
            "comment": " A multi granularity period delta. ",
            "args": [],
            "type": "{ week : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int }"
          }
        ],
        "types": [
          {
            "name": "Period",
            "comment": " A Period.\n\nWeek is a convenience for users if they want to use it, it does\njust scale Day in functionality so is not strictly required.\n\nDELTARECORD values are multiplied addend on application.\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Delta",
                [
                  "Date.Extra.Period.DeltaRecord"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add Period count to date. ",
            "type": "Date.Extra.Period.Period -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "diff",
            "comment": " Return a Period representing date difference. date1 - date2.\n\nIf  you add the result of this function to date2 with addend of 1\nwill return date1.\n ",
            "type": "Date.Date -> Date.Date -> Date.Extra.Period.DeltaRecord"
          },
          {
            "name": "toTicks",
            "comment": " Return tick counts for periods.\nUseful to get total ticks in a Delta.\n",
            "type": "Date.Extra.Period.Period -> Int"
          },
          {
            "name": "zeroDelta",
            "comment": " All zero delta.\nUseful as a starting point if you want to set a few fields only.\n",
            "type": "Date.Extra.Period.DeltaRecord"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Compare",
        "comment": " Compare dates.\n\n@docs is\n@docs is3\n@docs Compare2\n@docs Compare3\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "Compare2",
            "comment": " Date comparison type for 2 dates.\n\n* After\n * Return True if date1 is after date2.\n* Before\n * Return True if date1 is before date2.\n* Same\n * Return True if date1 is same as date2.\n* SameOrAfter\n * Return True if date1 is same or after date2.\n* SameOrBefore\n * Return True if date1 is same or before date2.\n",
            "args": [],
            "cases": [
              [
                "After",
                []
              ],
              [
                "Before",
                []
              ],
              [
                "Same",
                []
              ],
              [
                "SameOrAfter",
                []
              ],
              [
                "SameOrBefore",
                []
              ]
            ]
          },
          {
            "name": "Compare3",
            "comment": " Date comparison type for 3 dates.\n\nBetween does not care if date2 > date3 or date2 < date3.\n\n* Between\n * Return True if date1 is After date2 and Before date3\n * Return True if date1 is After date3 and Before date2\n* BetweenOpenStart\n * Return True if date1 is SameOrAfter date2 and Before date3\n* BetweenOpenEnd\n * Return True if date1 is After date2 and SameOrBefore date3\n* BetweenOpen\n * Return True if date1 is SameOrAfter date2 and SameOrBefore date3\n",
            "args": [],
            "cases": [
              [
                "Between",
                []
              ],
              [
                "BetweenOpenStart",
                []
              ],
              [
                "BetweenOpenEnd",
                []
              ],
              [
                "BetweenOpen",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "is",
            "comment": " Compare two dates.\n",
            "type": "Date.Extra.Compare.Compare2 -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "is3",
            "comment": " Compare three dates.\n\nThis figures out the low and high bounds from date2\nand date3 using minimum and maximum of them respectively.\n",
            "type": "Date.Extra.Compare.Compare3 -> Date.Date -> Date.Date -> Date.Date -> Bool"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_fi_fi",
        "comment": " This is the Finnish config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Ossi Hanhinen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for fi-fi. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_us",
        "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-us. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_gb",
        "comment": " This is the UK english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Bruno Girin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-gb. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_au",
        "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-au. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config.Config_ro_ro",
        "comment": " This is the Romanian config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Cezar Halmagean\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for ro_ro. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.I18n.I_fr_fr",
        "comment": " French values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Bruno Girin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " Returns a common French idiom for days of month.\nPad indicates space pad the day of month value so single\ndigit outputs have space padding to make them same\nlength as double digit days of month.\n\nNote that the French idiom is to use the ordinal number\nfor the first day of the month (1er janvier) and\ncardinal numbers for all other days (15 janvier). This\nmethod doesn't pad the value on the right even if the\n`pad` argument is `true`.\n",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.I18n.I_pl_pl",
        "comment": " Polish values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Bartosz Sokół\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " This may not do anything in French ",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Core",
        "comment": " Date core.\n\n## Info\n@docs monthToInt\n@docs intToMonth\n@docs daysInMonth\n@docs monthList\n@docs daysInNextMonth\n@docs daysInPrevMonth\n@docs daysInMonthDate\n@docs isLeapYear\n@docs isLeapYearDate\n@docs yearToDayLength\n@docs isoDayOfWeek\n\n## Utility\n@docs toFirstOfMonth\n@docs firstOfNextMonthDate\n@docs lastOfMonthDate\n@docs lastOfPrevMonthDate\n@docs daysBackToStartOfWeek\n\n## Conversion\n@docs fromTime\n@docs toTime\n\n## Iteration Utility\n@docs nextDay\n@docs prevDay\n@docs nextMonth\n@docs prevMonth\n\n## Date constants\n@docs epochDateStr\n\n## Date constants\n@docs ticksAMillisecond\n@docs ticksASecond\n@docs ticksAMinute\n@docs ticksAnHour\n@docs ticksADay\n@docs ticksAWeek\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "daysBackToStartOfWeek",
            "comment": " Days back to start of week day. ",
            "type": "Date.Day -> Date.Day -> Int"
          },
          {
            "name": "daysInMonth",
            "comment": " Return days in month for year month. ",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "daysInMonthDate",
            "comment": " Days in month for given date. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "daysInNextMonth",
            "comment": " Return days in next calendar month. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "daysInPrevMonth",
            "comment": " Return days in previous calendar month. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "epochDateStr",
            "comment": " Epoch starting point for tick 0. ",
            "type": "String"
          },
          {
            "name": "firstOfNextMonthDate",
            "comment": " Return first of next month date. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "fromTime",
            "comment": " Convenience fromTime as time ticks are Elm Ints in this library. ",
            "type": "Int -> Date.Date"
          },
          {
            "name": "intToMonth",
            "comment": " Return integer as month. Jan <= 1 Feb == 2 up to Dec > 11. ",
            "type": "Int -> Date.Month"
          },
          {
            "name": "isLeapYear",
            "comment": " Return True if Year is a leap year. ",
            "type": "Int -> Bool"
          },
          {
            "name": "isLeapYearDate",
            "comment": " Return True if Year of Date is a leap year. ",
            "type": "Date.Date -> Bool"
          },
          {
            "name": "isoDayOfWeek",
            "comment": " Return the Iso DayOfWeek Monday 1, to Sunday 7. ",
            "type": "Date.Day -> Int"
          },
          {
            "name": "lastOfMonthDate",
            "comment": " Resturn date of last day of month. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "lastOfPrevMonthDate",
            "comment": " Return last of previous month date. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "monthList",
            "comment": " List of months in order from Jan to Dec. ",
            "type": "List Date.Month"
          },
          {
            "name": "monthToInt",
            "comment": " Return month as integer. Jan = 1 to Dec = 12. ",
            "type": "Date.Month -> Int"
          },
          {
            "name": "nextDay",
            "comment": " Return next day in calendar sequence. ",
            "type": "Date.Day -> Date.Day"
          },
          {
            "name": "nextMonth",
            "comment": " Return next month in calendar sequence. ",
            "type": "Date.Month -> Date.Month"
          },
          {
            "name": "prevDay",
            "comment": " Return previous day in calendar sequence. ",
            "type": "Date.Day -> Date.Day"
          },
          {
            "name": "prevMonth",
            "comment": " Return previous month in calendar sequence. ",
            "type": "Date.Month -> Date.Month"
          },
          {
            "name": "ticksADay",
            "comment": " Ticks in a day. ",
            "type": "Int"
          },
          {
            "name": "ticksAMillisecond",
            "comment": " Ticks in a millisecond. (this is 1 on Win 7 in Chrome) ",
            "type": "Int"
          },
          {
            "name": "ticksAMinute",
            "comment": " Ticks in a minute. ",
            "type": "Int"
          },
          {
            "name": "ticksASecond",
            "comment": " Ticks in a second. ",
            "type": "Int"
          },
          {
            "name": "ticksAWeek",
            "comment": " Ticks in a week. ",
            "type": "Int"
          },
          {
            "name": "ticksAnHour",
            "comment": " Ticks in an hour. ",
            "type": "Int"
          },
          {
            "name": "toFirstOfMonth",
            "comment": " Return date of first of month. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "toTime",
            "comment": " Convenience toTime as time ticks are Elm Ints in this library. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "yearToDayLength",
            "comment": " Return number of days in a year. ",
            "type": "Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.I18n.I_fi_fi",
        "comment": " Finnish values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Ossi Hanhinen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " This may not do anything in Finish ",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.I18n.I_en_us",
        "comment": " English values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " Returns a common english idiom for days of month.\nPad indicates space pad the day of month value so single\ndigit outputs have space padding to make them same\nlength as double digit days of monnth.\n",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Date.Extra.Config",
        "comment": " Date configuration.\n\nFor i18n for day and month names.\nParameter to Format.format* functions.\n\nThere is scope to put in some default format strings here.\n\n@docs Config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Configuration for formatting dates. ",
            "args": [],
            "type": "{ i18n : { dayShort : Date.Day -> String , dayName : Date.Day -> String , monthShort : Date.Month -> String , monthName : Date.Month -> String , dayOfMonthWithSuffix : Bool -> Int -> String } , format : { date : String , longDate : String , time : String , longTime : String , dateTime : String , firstDayOfWeek : Date.Day } }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rluiten/stringdistance",
    "version": "1.0.3",
    "docs": [
      {
        "name": "StringDistance",
        "comment": " A library to calculate a metric indicating the string distance between two strings.\n\nThis library was extracted from the Elm implementation of mailcheck http://package.elm-lang.org/packages/rluiten/mailcheck/latest.\n\nThe `lcs` and `lcsLimit` functions are more general and support more than just\nChar as list elements.\n\n\n## Functions\n\n@docs sift3Distance\n@docs lcs\n@docs lcsLimit\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lcs",
            "comment": " Longest Common Subsequence\n\nThis is a simple implementation and would benefit from memoization if\nperformance is a problem. It does not limit look ahead\nwhich can be very costly see lcsLimit for a limited look ahead version.\n\nWarning this gets very slow very quickly with increases in list lengths even\n17 character lists can cause things to bog down.\n\nThis implementation is based on http://rosettacode.org/wiki/Longest_common_subsequence#Haskell\n\n```elm\n    lcs [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n ",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "lcsLimit",
            "comment": " Return function which returns lcs with limited look ahead.\n\nWarning maxLookAhead quickly makes the returned function costly stay\nbelow 8 if you want responsiveness.\n\n```elm\n    lcsLimit 5 [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n",
            "type": "Int -> List a -> List a -> List a"
          },
          {
            "name": "sift3Distance",
            "comment": " Calculate sift3 string distance between candidate strings.\n\n```elm\n    sift3Distance \"\" \"abc\" == 3.0\n    sift3Distance \"ab\" \"\" == 2.0\n    sift3Distance \"abc\" \"abc\" == 0\n    sift3Distance \"abc\" \"ab\"  == 0.5\n```\n\n",
            "type": "String -> String -> Float"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css",
    "version": "7.0.0",
    "docs": [
      {
        "name": "Css.File",
        "comment": " Functions for writing CSS files from elm-css.\n\n@docs compile, compiler, toFileStructure, CssFileStructure, CssCompilerProgram\n",
        "aliases": [
          {
            "name": "CssCompilerProgram",
            "comment": " A prorgam that compiles a CSS file.\n\nSee [`compiler`](#compiler).\n",
            "args": [],
            "type": "Platform.Program Basics.Never () Basics.Never"
          },
          {
            "name": "CssFileStructure",
            "comment": " A description of CSS files that will be created by elm-css.\n",
            "args": [],
            "type": "List { filename : String, content : String, success : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compile",
            "comment": " Convenience re-export of Css.compile\n",
            "type": "List Css.Stylesheet -> { css : String, warnings : List String }"
          },
          {
            "name": "compiler",
            "comment": " Create a program that compiles an elm-css stylesheet to a CSS file.\n\n    port module Stylesheets exposing (..)\n\n    import Css.File exposing (CssFileStructure, CssCompilerProgram)\n    import HomepageCss as Homepage\n\n\n    port files : CssFileStructure -> Cmd msg\n\n\n    fileStructure : CssFileStructure\n    fileStructure =\n        Css.File.toFileStructure\n            [ ( \"homepage.css\", Css.File.compile [ Homepage.css ] ) ]\n\n\n    main : CssCompilerProgram\n    main =\n        Css.File.compiler files fileStructure\n",
            "type": "(Css.File.CssFileStructure -> Platform.Cmd.Cmd Basics.Never) -> Css.File.CssFileStructure -> Css.File.CssCompilerProgram"
          },
          {
            "name": "toFileStructure",
            "comment": " Translate a list of filenames and [`prettyPrint`](#prettyPrint) results\nto a list of tuples suitable for being sent to a port in a Stylesheets.elm file.\n",
            "type": "List ( String, { css : String, warnings : List String } ) -> Css.File.CssFileStructure"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Css",
        "comment": " Functions for building stylesheets.\n\n# Misc\n@docs Stylesheet, asPairs, absolute, all, allPetiteCaps, allSmallCaps, withClass, auto, baseline, block, bold, bolder, border, border2, border3, borderBlockEnd, borderBlockEnd2, borderBlockEnd3, borderBlockEndColor, borderBlockEndStyle, borderBlockStart, borderBlockStart2, borderBlockStart3, borderBlockStartColor, borderBlockStartStyle, borderBottom, borderBottom2, borderBottom3, borderBottomColor, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderBottomStyle, borderBottomWidth, borderBox, borderColor, borderColor2, borderColor3, borderColor4, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, borderInlineEnd, borderInlineEnd2, borderInlineEnd3, borderInlineEndColor, borderInlineEndStyle, borderInlineEndWidth, borderInlineStart, borderInlineStart2, borderInlineStart3, borderInlineStartColor, borderInlineStartStyle, borderLeft, borderLeft2, borderLeft3, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderRight, borderRight2, borderRight3, borderRightColor, borderRightStyle, borderRightWidth, borderStyle, borderCollapse, borderTop, borderTop2, borderTop3, borderTopColor, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderTopStyle, borderTopWidth, bottom, column, columnReverse, commonLigatures, content, contentBox, contextual, cursive, dashed, diagonalFractions, discretionaryLigatures, dotted, double, fantasy, fillBox, fixed, flat, displayFlex, flexEnd, flexStart, groove, hex, hidden, historicalLigatures, hsl, hsla, important, inherit, initial, inline, inlineBlock, inlineListItem, inset, italic, large, larger, lighter, liningNums, listItem, matrix, matrix3d, middle, monospace, noCommonLigatures, noContextual, noDiscretionaryLigatures, noHistoricalLigatures, noWrap, none, normal, oblique, oldstyleNums, ordinal, outset, perspective, petiteCaps, position, float, preserve3d, proportionalNums, relative, rgb, rgba, ridge, rotate, rotate3d, rotateX, rotateY, rotateZ, row, rowReverse, sansSerif, scale, scale2, scale3d, scaleX, scaleY, scroll, serif, skew, skew2, skewX, skewY, slashedZero, small, smallCaps, smaller, solid, stackedFractions, static, sticky, stretch, sub, super, tabularNums, textBottom, textTop, titlingCaps, top, translate, translate2, translate3d, translateX, translateY, translateZ, transparent, unicase, unset, viewBox, visible, wavy, wrap, wrapReverse, xLarge, xSmall, xxLarge, xxSmall, backgroundRepeat, backgroundRepeat2, repeatX, repeatY, repeat, space, round, noRepeat, backgroundAttachment, local, backgroundBlendMode, multiply, overlay, darken, lighten, colorDodge, colorBurn, hardLight, softLight, difference, exclusion, hue, saturation, luminosity, screenBlendMode, backgroundClip, paddingBox, backgroundImage, url, backgroundPosition, backgroundPosition2, backgroundOrigin, backgroundSize, backgroundSize2, cover, contain\n@docs listStyleType, disc, circle, square, decimal, decimalLeadingZero, lowerRoman, upperRoman, lowerGreek, lowerAlpha, lowerLatin, upperAlpha, upperLatin, arabicIndic, armenian, bengali, cjkEarthlyBranch, cjkHeavenlyStem, devanagari, georgian, gujarati, gurmukhi, kannada, khmer, lao, malayalam, myanmar, oriya, telugu, thai\n@docs listStylePosition, inside, outside\n@docs listStyle, listStyle2, listStyle3\n\n# Style\n@docs Snippet, Mixin, mixin, stylesheet, compile\n\n# Statements\n@docs (#), (.), selector, everything\n\n# Combinators\n@docs children, descendants, adjacentSiblings, generalSiblings\n\n# Media Queries\n@docs screen, tv, projection, print\n\n# Properties\n@docs property, flex, flex2, flex3, medium, alignSelf, alignItems, order, flexDirection, flexFlow1, flexFlow2, flexWrap, flexBasis, flexGrow, flexShrink, transformStyle, transformBox, transform, transforms, currentColor, underline, overline, lineThrough, textOrientation, textDecoration, textDecoration2, textDecoration3, textDecorationLine, textDecorations, textDecorations2, textDecorations3, textDecorationLine, textDecorationLines, textDecorationStyle, textEmphasisColor, capitalize, uppercase, lowercase, fullWidth, hanging, eachLine, textIndent, textIndent2, textIndent3, clip, ellipsis, textOverflow, optimizeSpeed, optimizeLegibility, geometricPrecision, textRendering, textTransform, textAlign, textAlignLast, left, right, center, textJustify, justifyAll, start, end, matchParent, true, verticalAlign, display, opacity, minContent, maxContent, fitContent, fillAvailable, width, minWidth, maxWidth, height, minHeight, maxHeight, padding, padding2, padding3, padding4, paddingTop, paddingBottom, paddingRight, paddingLeft, paddingBlockStart, paddingBlockEnd, paddingInlineStart, paddingInlineEnd, margin, margin2, margin3, margin4, marginTop, marginBottom, marginRight, marginLeft, marginBlockStart, marginBlockEnd, marginInlineStart, marginInlineEnd, boxSizing, overflow, overflowX, overflowY, whiteSpace, backgroundColor, color, withMedia, each, media, mediaQuery, textShadow, textShadow2, textShadow3, textShadow4, boxShadow, boxShadow2, boxShadow3, boxShadow4, boxShadow5, lineHeight, letterSpacing, fontFace, fontFamily, fontSize, fontStyle, fontWeight, fontVariant, fontVariant2, fontVariant3, fontVariantLigatures, fontVariantCaps, fontVariantNumeric, fontVariantNumeric2, fontVariantNumeric3, fontFamilies, fontVariantNumerics, fontFeatureSettings, fontFeatureSettingsList, cursor, outline, outline3, outlineColor, outlineWidth, outlineStyle, outlineOffset\n\n# Values\n\n## Color values\n@docs Color all, important, custom, solid, transparent, rgb, rgba, hsl, hsla, hex\n\n## Font values\n@docs featureTag, featureTag2, featureOn, featureOff\n\n## Other values\n@docs borderCollapse, borderColor, borderColor2, borderColor3, borderColor4, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderBottomWidth, borderInlineEndWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderBlockEndStyle, borderBlockStartStyle, borderInlineEndStyle, borderBottomStyle, borderInlineStartStyle, borderLeftStyle, borderRightStyle, borderTopStyle, borderStyle, borderBlockStartColor, borderBlockEndColor, borderBottomColor, borderInlineStartColor, borderInlineEndColor, borderLeftColor, borderRightColor, borderTopColor, borderBox, contentBox, border, border2, border3, borderTop, borderTop2, borderTop3, borderBottom, borderBottom2, borderBottom3, borderLeft, borderLeft2, borderLeft3, borderRight, borderRight2, borderRight3, borderBlockEnd, borderBlockEnd2, borderBlockEnd3, borderBlockStart, borderBlockStart2, borderBlockStart3, borderInlineEnd, borderInlineEnd2, borderInlineEnd3, borderInlineStart, borderInlineStart2, borderInlineStart3, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, scroll, visible, block, inlineBlock, inline, none, auto, inherit, unset, initial, noWrap, top, static, fixed, sticky, relative, absolute, position, float, bottom, middle, baseline, sub, super, textTop, textBottom, hidden, wavy, dotted, dashed, solid, double, groove, ridge, inset, outset, matrix, matrix3d, perspective, rotate3d, rotateX, rotateY, rotateZ, scale, scale2, scale3d, scaleX, scaleY, skew, skew2, skewX, skewY, translate, translate2, translate3d, translateX, translateY, translateZ, rotate, fillBox, viewBox, flat, preserve3d, content, wrapReverse, wrap, flexStart, flexEnd, stretch, row, rowReverse, column, columnReverse, serif, sansSerif, monospace, cursive, fantasy, xxSmall, xSmall, small, large, xLarge, xxLarge, smaller, larger, normal, italic, oblique, bold, lighter, bolder, smallCaps, allSmallCaps, petiteCaps, allPetiteCaps, unicase, titlingCaps, commonLigatures, noCommonLigatures, discretionaryLigatures, noDiscretionaryLigatures, historicalLigatures, noHistoricalLigatures, contextual, noContextual, liningNums, oldstyleNums, proportionalNums, tabularNums, diagonalFractions, stackedFractions, ordinal, slashedZero, default, pointer, crosshair, contextMenu, help, progress, wait, cell, text, verticalText, cursorAlias, copy, move, noDrop, notAllowed, eResize, nResize, neResize, nwResize, sResize, seResize, swResize, wResize, ewResize, nsResize, neswResize, nwseResize, colResize, rowResize, allScroll, zoomIn, zoomOut, grab, grabbing\n\n# Length\n@docs Length, pct, px, em, pt, ex, ch, rem, vh, vw, vmin, vmax, mm, cm, inches, pc, int, num, zero, (|+|), (|-|), (|*|), (|/|)\n\n# Length Units\n@docs Px, Em, Rem, Pct, Ex, Ch, Vh, Vw, Vmin, Vmax,  Mm, Cm, In, Pt, Pc\n\n# Angle\n@docs deg, rad, grad, turn\n\n# Pseudo-Classes\n@docs active, any, checked, dir, disabled, empty, enabled, first, firstChild, firstOfType, fullscreen, focus, hover, indeterminate, invalid, lang, lastChild, lastOfType, link, nthChild, nthLastChild, nthLastOfType, nthOfType, onlyChild, onlyOfType, optional, outOfRange, readWrite, required, root, scope, target, valid\n\n# Pseudo-Elements\n@docs after, before, firstLetter, firstLine, selection\n\n# Media Queries\n@docs MediaQuery, screen, print, tv, projection\n\n# Source\n@docs src\n\n# Quoting\n@docs qt\n\n# Types\n\n@docs FontSize, ColorValue\n\n# Intentionally Unsupported\n\nThese are features you might expect to be in elm-css (because they are in the\nCSS specification) but which have been omitted because their use is either\ndeprecated or discouraged.\n\n@docs thin, medium, thick, blink\n",
        "aliases": [
          {
            "name": "Ch",
            "comment": " [`ch`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ch) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.ChUnits"
          },
          {
            "name": "Cm",
            "comment": " [`cm`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#cm) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.CMUnits"
          },
          {
            "name": "Color",
            "comment": " ",
            "args": [],
            "type": "Css.ColorValue { red : Int, green : Int, blue : Int, alpha : Float }"
          },
          {
            "name": "ColorValue",
            "comment": " https://developer.mozilla.org/en-US/docs/Web/CSS/color#Values\n",
            "args": [
              "compatible"
            ],
            "type": "{ compatible | value : String, color : Css.Compatible, warnings : List String }"
          },
          {
            "name": "Em",
            "comment": " [`em`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#em) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.EmUnits"
          },
          {
            "name": "Ex",
            "comment": " [`ex`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ex) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.ExUnits"
          },
          {
            "name": "FontSize",
            "comment": " A font size\n",
            "args": [
              "compatible"
            ],
            "type": "{ compatible | value : String, fontSize : Css.Compatible }"
          },
          {
            "name": "In",
            "comment": " [`in`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#in) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.InchUnits"
          },
          {
            "name": "Length",
            "comment": " https://developer.mozilla.org/en-US/docs/Web/CSS/length\n",
            "args": [
              "compatible",
              "units"
            ],
            "type": "{ compatible | value : String, length : Css.Compatible, numericValue : Float, units : units, unitLabel : String }"
          },
          {
            "name": "MediaQuery",
            "comment": " ",
            "args": [],
            "type": "Css.Structure.MediaQuery"
          },
          {
            "name": "Mixin",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Mixin"
          },
          {
            "name": "Mm",
            "comment": " [``](https://developer.mozilla.org/en-US/docs/Web/CSS/length#mm) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.MMUnits"
          },
          {
            "name": "Pc",
            "comment": " [`pc`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pc) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.PcUnits"
          },
          {
            "name": "Pct",
            "comment": " [`pct`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pct) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.PercentageUnits"
          },
          {
            "name": "Pt",
            "comment": " [`pt`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pt) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.PtUnits"
          },
          {
            "name": "Px",
            "comment": " [`px`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#px) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.PxUnits"
          },
          {
            "name": "Rem",
            "comment": " [`rem`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#rem) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.RemUnits"
          },
          {
            "name": "Snippet",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Snippet"
          },
          {
            "name": "Stylesheet",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Stylesheet"
          },
          {
            "name": "Vh",
            "comment": " [`vh`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vh) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.VhUnits"
          },
          {
            "name": "Vmax",
            "comment": " [`vmax`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmax) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.VMaxUnits"
          },
          {
            "name": "Vmin",
            "comment": " [`vmin`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmin) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.VMinUnits"
          },
          {
            "name": "Vw",
            "comment": " [`vw`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vw) units.\n",
            "args": [],
            "type": "Css.ExplicitLength Css.VwUnits"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "#",
            "comment": " An [id selector](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors).\n\n    stylesheet\n        [ (#) NavBar\n            [ width 960 px\n            , backgroundColor (rgb 123 42 208)\n            ]\n        ]\n",
            "type": "id -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": ".",
            "comment": " A [class selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors).\n\n    stylesheet\n        [ (.) LoginFormButton\n            [ fontWeight normal\n            , color (rgb 128 64 32)\n            ]\n        ]\n",
            "type": "class -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "absolute",
            "comment": " An `absolute` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position absolute\n",
            "type": "Css.Position {}"
          },
          {
            "name": "active",
            "comment": " An [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aactive)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "adjacentSiblings",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "after",
            "comment": " An [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aafter)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "alignItems",
            "comment": " Sets [`align-items`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items).\n\n  **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n  use this workaround:\n\n  property \"align-items\" \"auto\"\n\n  If this is annoying, please file an issue, so adding support for \"auto\"\n  can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "alignSelf",
            "comment": " Sets [`align-self`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self).\n\n  **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n  use this workaround:\n\n  property \"align-self\" \"auto\"\n\n  If this is annoying, please file an issue, so adding support for \"auto\"\n  can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "all",
            "comment": " An [`all`](https://developer.mozilla.org/en-US/docs/Web/CSS/all) property.\n",
            "type": "Css.All compatible -> Css.Mixin"
          },
          {
            "name": "allPetiteCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "allScroll",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "allSmallCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "any",
            "comment": " An [`:any`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aany)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "arabicIndic",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "armenian",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "asPairs",
            "comment": " Take a list of mixins and return a list of key-value pairs that\ncan then be passed to a `style` attribute.\n\n    styles = asPairs >> Html.Attributes.style\n\n    button\n      [ styles [ position absolute, left (px 5) ] ]\n      [ text \"Whee!\" ]\n",
            "type": "List Css.Mixin -> List ( String, String )"
          },
          {
            "name": "auto",
            "comment": " ",
            "type": "{ lengthOrAuto : Css.Compatible , overflow : Css.Compatible , textRendering : Css.Compatible , flexBasis : Css.Compatible , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible , alignItemsOrAuto : Css.Compatible , cursor : Css.Compatible , value : String , lengthOrAutoOrCoverOrContain : Css.Compatible }"
          },
          {
            "name": "backgroundAttachment",
            "comment": " Sets ['background-attachment'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment)\n\n    backgroundAttachment fixed\n",
            "type": "Css.BackgroundAttachment compatible -> Css.Mixin"
          },
          {
            "name": "backgroundBlendMode",
            "comment": " Sets ['background-blend-mode'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode)\n\n    backgroundBlendMode darken\n",
            "type": "(Css.ColorValue Css.NonMixable -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "backgroundClip",
            "comment": " Sets ['background-clip'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip)\n\n    backgroundClip borderBox\n",
            "type": "Css.BackgroundClip compatible -> Css.Mixin"
          },
          {
            "name": "backgroundColor",
            "comment": " ",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "backgroundImage",
            "comment": " Sets ['background-image'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image)\n\n    backgroundImage (url \"http://www.example.com/chicken.jpg\")\n",
            "type": "Css.BackgroundImage compatible -> Css.Mixin"
          },
          {
            "name": "backgroundOrigin",
            "comment": " Sets ['background-origin'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin)\n\n    backgroundOrigin borderBox\n",
            "type": "Css.BackgroundOrigin compatible -> Css.Mixin"
          },
          {
            "name": "backgroundPosition",
            "comment": " Sets ['background-position'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)\n\n    backgroundPosition top\n\nOnly supports keywords values like \"top\" or \"center\". If you want to pass a single length, use `backgroundPosition2`:\n\n    backgroundPosition2 (px 10) zero\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "backgroundPosition2",
            "comment": " Sets ['background-position'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)\n\n    backgroundPosition2 (px 10) zero\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "backgroundRepeat",
            "comment": " Sets ['background-repeat'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)\n\n    backgroundRepeat repeatX\n",
            "type": "Css.BackgroundRepeatShorthand compatible -> Css.Mixin"
          },
          {
            "name": "backgroundRepeat2",
            "comment": " Sets ['background-repeat'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)\n\n    backgroundRepeat2 repeat noRepeat\n",
            "type": "Css.BackgroundRepeat compatibleA -> Css.BackgroundRepeat compatibleB -> Css.Mixin"
          },
          {
            "name": "backgroundSize",
            "comment": " Sets ['background-size'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)\n\n    backgroundSize cover\n",
            "type": "Css.LengthOrAutoOrCoverOrContain compatible -> Css.Mixin"
          },
          {
            "name": "backgroundSize2",
            "comment": " Sets ['background-size'](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)\n\n    backgroundSize2 50% auto\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.Mixin"
          },
          {
            "name": "baseline",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign baseline\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "before",
            "comment": " A [`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Abefore)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "bengali",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "blink",
            "comment": " [`blink`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\nis ~~totally rad~~ deprecated, and as such has been ~~reluctantly~~ omitted\nfrom elm-css.\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "block",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "bold",
            "comment": " ",
            "type": "Css.FontWeight {}"
          },
          {
            "name": "bolder",
            "comment": " ",
            "type": "Css.FontWeight {}"
          },
          {
            "name": "border",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "border2",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "border3",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd2",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd3",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockEndColor",
            "comment": " Sets [`border-block-end-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color)\n\n    borderBlockEndColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockEndStyle",
            "comment": " Sets [`border-block-end-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style)\n\n    borderBlockEndStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockStart",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBlockStart2",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBlockStart3",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA units -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockStartColor",
            "comment": " Sets [`border-block-start-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color)\n\n    borderBlockStartColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockStartStyle",
            "comment": " Sets [`border-block-start-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style)\n\n    borderBlockStartStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBottom",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottom2",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBottom3",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBottomColor",
            "comment": " Sets [`border-bottom-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color)\n\n    borderBottomColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBottomLeftRadius",
            "comment": " Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n\n    borderBottomLeftRadius  (em 4)\n    borderBottomLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottomLeftRadius2",
            "comment": " Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n\n    borderBottomLeftRadius  (em 4)\n    borderBottomLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderBottomRightRadius",
            "comment": " Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n\n    borderBottomRightRadius  (em 4)\n    borderBottomRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottomRightRadius2",
            "comment": " Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n\n    borderBottomRightRadius  (em 4)\n    borderBottomRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderBottomStyle",
            "comment": " Sets [`border-bottom-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style)\n\n    borderBottomStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBottomWidth",
            "comment": " Sets [`border-bottom-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width)\n\n    borderBottomWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBox",
            "comment": " The `border-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.\nCan also be used as `border-box` value for the [`background-clip`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) property.\n",
            "type": "Css.BoxSizing (Css.BackgroundClip {})"
          },
          {
            "name": "borderCollapse",
            "comment": " Sets [`border-collapse`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse)\n\n    borderCollapse collapse\n",
            "type": "Css.BorderCollapse compatible -> Css.Mixin"
          },
          {
            "name": "borderColor",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderColor2",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.Mixin"
          },
          {
            "name": "borderColor3",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderColor4",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.ColorValue compatibleC -> Css.ColorValue compatibleD -> Css.Mixin"
          },
          {
            "name": "borderImageOutset",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "borderImageOutset2",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "borderImageOutset3",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.Mixin"
          },
          {
            "name": "borderImageOutset4",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.LengthOrNumber compatibleD -> Css.Mixin"
          },
          {
            "name": "borderImageWidth",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "borderImageWidth2",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "borderImageWidth3",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.Mixin"
          },
          {
            "name": "borderImageWidth4",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.LengthOrNumber compatibleD -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd2",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd3",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderInlineEndColor",
            "comment": " Sets [`border-inline-end-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color)\n\n    borderInlineEndColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineEndStyle",
            "comment": " Sets [`border-inline-end-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style)\n\n    borderInlineEndStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineEndWidth",
            "comment": " Sets [`border-inline-end-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width)\n\n    borderInlineEndWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineStart",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineStart2",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderInlineStart3",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderInlineStartColor",
            "comment": " Sets [`border-inline-start-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color)\n\n    borderInlineStartColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineStartStyle",
            "comment": " Sets [`border-inline-start-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style)\n\n    borderInlineStartStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderLeft",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderLeft2",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderLeft3",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderLeftColor",
            "comment": " Sets [`border-left-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color)\n\n    borderLeftColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderLeftStyle",
            "comment": " Sets [`border-left-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style)\n\n    borderLeftStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderLeftWidth",
            "comment": " Sets [`border-left-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width)\n\n    borderLeftWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRadius",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRadius2",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderRadius3",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Mixin"
          },
          {
            "name": "borderRadius4",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleB unitsB -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatibleD unitsD -> Css.Mixin"
          },
          {
            "name": "borderRight",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRight2",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderRight3",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderRightColor",
            "comment": " Sets [`border-right-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color)\n\n    borderRightColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderRightStyle",
            "comment": " Sets [`border-right-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style)\n\n    borderRightStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderRightWidth",
            "comment": " Sets [`border-right-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width)\n\n    borderRightWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderStyle",
            "comment": " Sets [`border-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)\n\n    borderStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderTop",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTop2",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderTop3",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderTopColor",
            "comment": " Sets [`border-top-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color)\n\n    borderTopColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderTopLeftRadius",
            "comment": " Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n\n    borderTopLeftRadius  (em 4)\n    borderTopLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTopLeftRadius2",
            "comment": " Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n\n    borderTopLeftRadius  (em 4)\n    borderTopLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderTopRightRadius",
            "comment": " Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n\n    borderTopRightRadius  (em 4)\n    borderTopRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTopRightRadius2",
            "comment": " Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n\n    borderTopRightRadius  (em 4)\n    borderTopRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderTopStyle",
            "comment": " Sets [`border-top-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style)\n\n    borderTopStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderTopWidth",
            "comment": " Sets [`border-top-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width)\n\n    borderTopWidth  (em 4)\n    borderTopWidth2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "bottom",
            "comment": " The [`bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/bottom) property.\n\n    position absolute\n    bottom (px 5)\n\nThis can also be used as a `bottom` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:\n\n    verticalAlign bottom\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "boxShadow",
            "comment": " Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).\n\n    boxShadow  none\n    boxShadow2 (px 1) (px 2)\n    boxShadow3 (px 1) (px 2) (rgb 211 121 112)\n    boxShadow3 (px 1) (px 2) (px 3)\n    boxShadow3 inset (px 2) (px 3)\n    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 (px 1) (px 2) (px 3) (px 4)\n    boxShadow4 inset (px 2) (px 3) (px 4)\n    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)\n    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)\n\n",
            "type": "Css.None compatible -> Css.Mixin"
          },
          {
            "name": "boxShadow2",
            "comment": " Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).\n\n    boxShadow  none\n    boxShadow2 (px 1) (px 2)\n    boxShadow3 (px 1) (px 2) (rgb 211 121 112)\n    boxShadow3 (px 1) (px 2) (px 3)\n    boxShadow3 inset (px 2) (px 3)\n    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 (px 1) (px 2) (px 3) (px 4)\n    boxShadow4 inset (px 2) (px 3) (px 4)\n    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)\n    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "boxShadow3",
            "comment": " Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).\n\n    boxShadow  none\n    boxShadow2 (px 1) (px 2)\n    boxShadow3 (px 1) (px 2) (rgb 211 121 112)\n    boxShadow3 (px 1) (px 2) (px 3)\n    boxShadow3 inset (px 2) (px 3)\n    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 (px 1) (px 2) (px 3) (px 4)\n    boxShadow4 inset (px 2) (px 3) (px 4)\n    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)\n    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)\n\n",
            "type": "Css.Value a -> Css.Length compatibleB unitsB -> Css.Value c -> Css.Mixin"
          },
          {
            "name": "boxShadow4",
            "comment": " Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).\n\n    boxShadow  none\n    boxShadow2 (px 1) (px 2)\n    boxShadow3 (px 1) (px 2) (rgb 211 121 112)\n    boxShadow3 (px 1) (px 2) (px 3)\n    boxShadow3 inset (px 2) (px 3)\n    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 (px 1) (px 2) (px 3) (px 4)\n    boxShadow4 inset (px 2) (px 3) (px 4)\n    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)\n    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)\n\n",
            "type": "Css.Value a -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Value d -> Css.Mixin"
          },
          {
            "name": "boxShadow5",
            "comment": " Sets [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).\n\n    boxShadow  none\n    boxShadow2 (px 1) (px 2)\n    boxShadow3 (px 1) (px 2) (rgb 211 121 112)\n    boxShadow3 (px 1) (px 2) (px 3)\n    boxShadow3 inset (px 2) (px 3)\n    boxShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 inset (px 2) (px 3) (rgb 211 121 112)\n    boxShadow4 (px 1) (px 2) (px 3) (px 4)\n    boxShadow4 inset (px 2) (px 3) (px 4)\n    boxShadow5 (px 1) (px 2) (px 3) (px 4) (rgb 211 121 112)\n    boxShadow5 inset (px 2) (px 3) (px 4) (rgb 211 121 112)\n\n",
            "type": "Css.Value a -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatibleD unitsD -> Css.ColorValue compatibleE -> Css.Mixin"
          },
          {
            "name": "boxSizing",
            "comment": " Sets [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)\n\n    boxSizing borderBox\n",
            "type": "Css.BoxSizing compatible -> Css.Mixin"
          },
          {
            "name": "capitalize",
            "comment": " `capitalize` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "cell",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "center",
            "comment": " `center` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\nCan also be used with flex-box's align-items property to apply the value of center\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "ch",
            "comment": " [`ch`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ch) units.\n",
            "type": "Float -> Css.Ch"
          },
          {
            "name": "checked",
            "comment": " A [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Achecked)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "children",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "circle",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "cjkEarthlyBranch",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "cjkHeavenlyStem",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "clip",
            "comment": " `clip` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value\n",
            "type": "Css.TextOverflow {}"
          },
          {
            "name": "cm",
            "comment": " [`cm`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#cm) units.\n",
            "type": "Float -> Css.Cm"
          },
          {
            "name": "colResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "color",
            "comment": " ",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "colorBurn",
            "comment": " The `color-burn` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#color-burn).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "colorDodge",
            "comment": " The `color-dodge` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#color-dodge).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "column",
            "comment": " The[`column`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "columnReverse",
            "comment": " The[`column-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "commonLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "compile",
            "comment": " Compile the given stylesheets to a CSS string, or to an error\nmessage if it could not be compiled.\n",
            "type": "List Css.Stylesheet -> { css : String, warnings : List String }"
          },
          {
            "name": "contain",
            "comment": " The `contain` [`background-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size) value.\n",
            "type": "{ value : String, lengthOrAutoOrCoverOrContain : Css.Compatible }"
          },
          {
            "name": "content",
            "comment": " The [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis#Values) value for the\n  flex-basis property.\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent (Css.FlexBasis {})"
          },
          {
            "name": "contentBox",
            "comment": " The `content-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.\nCan also be used as `content-box` value for the [`background-clip`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) property.\n",
            "type": "Css.BoxSizing (Css.BackgroundClip {})"
          },
          {
            "name": "contextMenu",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "contextual",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "copy",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "cover",
            "comment": " The `cover` [`background-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size) value.\n",
            "type": "{ value : String, lengthOrAutoOrCoverOrContain : Css.Compatible }"
          },
          {
            "name": "crosshair",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "currentColor",
            "comment": " The [`currentColor`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword)\n    value.\n",
            "type": "Css.ColorValue Css.NonMixable"
          },
          {
            "name": "cursive",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "cursor",
            "comment": " A [`cursor`](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values)\nspecifies the mouse cursor displayed when mouse pointer is over an element.\n",
            "type": "Css.Cursor compatible -> Css.Mixin"
          },
          {
            "name": "cursorAlias",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "darken",
            "comment": " The `darken` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#darken).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "dashed",
            "comment": " A `dashed` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "decimal",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "decimalLeadingZero",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "default",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "deg",
            "comment": " [`deg`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#deg) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "descendants",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "devanagari",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "diagonalFractions",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "difference",
            "comment": " The `difference` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#difference).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "dir",
            "comment": " A [`:dir`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adir)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "Css.Directionality -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "disabled",
            "comment": " A [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adisabled)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "disc",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "discretionaryLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "display",
            "comment": " For `display: flex`, use [`displayFlex`](#displayFlex).\n",
            "type": "Css.Display compatible -> Css.Mixin"
          },
          {
            "name": "displayFlex",
            "comment": " `display: flex`. This works around the fact that\n[`flex` is already taken](#flex).\n",
            "type": "Css.Mixin"
          },
          {
            "name": "dotted",
            "comment": " A `dotted` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "double",
            "comment": " A `double` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "eResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "each",
            "comment": " ",
            "type": "List (List Css.Mixin -> Css.Snippet) -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "eachLine",
            "comment": " `each-line` [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent#Values) value\n",
            "type": "Css.TextIndent {}"
          },
          {
            "name": "ellipsis",
            "comment": " `ellipsis` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value\n",
            "type": "Css.TextOverflow {}"
          },
          {
            "name": "em",
            "comment": " [`em`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#em) units.\n",
            "type": "Float -> Css.Em"
          },
          {
            "name": "empty",
            "comment": " An [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aempty)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "enabled",
            "comment": " An [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aenabled)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "end",
            "comment": " `end` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "everything",
            "comment": " A [`*` selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors).\n\n    (.) Foo\n      [ children\n          [ everything\n              [ color (rgb 14 15 16)\n              , borderRadius (px 5)\n              ]\n          ]\n      ]\n\n...compiles to:\n\n    .Foo > * {\n      color: rgb(14, 15, 16);\n      border-radius: 5px;\n    }\n\n",
            "type": "List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "ewResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "ex",
            "comment": " [`ex`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ex) units.\n",
            "type": "Float -> Css.Ex"
          },
          {
            "name": "exclusion",
            "comment": " The `exclusion` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#exclusion).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "fantasy",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "featureOff",
            "comment": " Alias for `off` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)\n",
            "type": "Int"
          },
          {
            "name": "featureOn",
            "comment": " Alias for `on` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)\n",
            "type": "Int"
          },
          {
            "name": "featureTag",
            "comment": " Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)\nwith the default value of `1`\n\n    fontFeatureSettings (featureTag \"hist\")\n",
            "type": "String -> Css.FeatureTagValue {}"
          },
          {
            "name": "featureTag2",
            "comment": " Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)\nwith a particular integer value\n\n    fontFeatureSettings (featureTag2 \"smcp\" on)\n    fontFeatureSettings (featureTag2 \"swsh\" 2)\n",
            "type": "String -> Int -> Css.FeatureTagValue {}"
          },
          {
            "name": "fillAvailable",
            "comment": " The `fill-available` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "fillBox",
            "comment": " The `fill-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox {}"
          },
          {
            "name": "first",
            "comment": " A [`:first`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstChild",
            "comment": " A [`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstLetter",
            "comment": " A [`::first-letter`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-letter)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstLine",
            "comment": " A [`::first-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-line)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstOfType",
            "comment": " A [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "fitContent",
            "comment": " The `fit-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "fixed",
            "comment": " A `fixed` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\nThis can also represent a `fixed` [`background-attachment`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) value.\n\n    position fixed\n",
            "type": "Css.Position (Css.BackgroundAttachment {})"
          },
          {
            "name": "flat",
            "comment": " The `flat` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle {}"
          },
          {
            "name": "flex",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent compatible -> Css.Mixin"
          },
          {
            "name": "flex2",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.Number compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "flex3",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.Number compatibleA -> Css.Number compatibleB -> Css.LengthOrNumber compatbileC -> Css.Mixin"
          },
          {
            "name": "flexBasis",
            "comment": " Sets [`flex-basis`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.FlexBasis compatible -> Css.Mixin"
          },
          {
            "name": "flexDirection",
            "comment": " Sets [`flex-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) property.}\n",
            "type": "Css.FlexDirection compatible -> Css.Mixin"
          },
          {
            "name": "flexEnd",
            "comment": " The[`flex-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "flexFlow1",
            "comment": " Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.}\n\nflexFlow1 (wrap | wrapReverse | noWrap)\nflexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)\n\nOr vice versa, order is not important for flex-flow\n",
            "type": "Css.FlexDirectionOrWrap compatible -> Css.Mixin"
          },
          {
            "name": "flexFlow2",
            "comment": " Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.}\n\nflexFlow1 (wrap | wrapReverse | noWrap)\nflexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)\n\nOr vice versa, order is not important for flex-flow\n",
            "type": "Css.FlexDirectionOrWrap compatibleA -> Css.FlexDirectionOrWrap compatibleB -> Css.Mixin"
          },
          {
            "name": "flexGrow",
            "comment": " Sets [`flex-grow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "flexShrink",
            "comment": " Sets [`flex-shrink`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "flexStart",
            "comment": " The[`flex-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "flexWrap",
            "comment": " Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.}\n",
            "type": "Css.FlexWrap compatible -> Css.Mixin"
          },
          {
            "name": "float",
            "comment": " Sets ['float'](https://developer.mozilla.org/en-US/docs/Web/CSS/float)\nfloat : Float compatible -> Mixin\n\n    float right\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "focus",
            "comment": " A [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afocus)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "fontFace",
            "comment": " ",
            "type": "String -> String"
          },
          {
            "name": "fontFamilies",
            "comment": " For multiple font families:\n\n    fontFamilies  [\"Verdana\", \"Arial\"]\n    fontFamilies  [(qt \"Gill Sans Extrabold\"), \"Helvetica\", .value sansSerif]\n",
            "type": "List String -> Css.Mixin"
          },
          {
            "name": "fontFamily",
            "comment": " For when your font is one of [`serif`](#serif), [`sansSerif`](#sansSerif), [`monospace`](#monospace), [`cursive`](#cursive) or [`fantasy`](#fantasy).\nIf you want to refer to a font by its name (like Helvetica or Arial), use [`fontFamilies`](#fontFamilies) instead.\n",
            "type": "Css.FontFamily a -> Css.Mixin"
          },
          {
            "name": "fontFeatureSettings",
            "comment": " Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n    fontFeatureSettings (featureTag \"hist\")\n    fontFeatureSettings (featureTag2 \"smcp\" on)\n    fontFeatureSettings (featureTag2 \"swsh\" 2)\n",
            "type": "Css.FeatureTagValue a -> Css.Mixin"
          },
          {
            "name": "fontFeatureSettingsList",
            "comment": " Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n    fontFeatureSettingsList [featureTag \"c2sc\", featureTag \"smcp\"]\n",
            "type": "List (Css.FeatureTagValue a) -> Css.Mixin"
          },
          {
            "name": "fontSize",
            "comment": " Sets [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)\n\n    fontSize  xxSmall\n    fontSize  (px 12)\n",
            "type": "Css.FontSize a -> Css.Mixin"
          },
          {
            "name": "fontStyle",
            "comment": " Sets [`font-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\n\n    fontStyle  italic\n",
            "type": "Css.FontStyle a -> Css.Mixin"
          },
          {
            "name": "fontVariant",
            "comment": " Sets [`font-variant`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant)\n\n    fontVariant   smallCaps\n    fontVariant2  commonLigatures smallCaps\n    fontVariant3  commonLigatures smallCaps slashedZero\n    fontVariants  [ oldstyleNums tabularNums stackedFractions ordinal slashedZero ]\n",
            "type": "Css.FontVariant a -> Css.Mixin"
          },
          {
            "name": "fontVariant2",
            "comment": " ",
            "type": "Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.Mixin"
          },
          {
            "name": "fontVariant3",
            "comment": " ",
            "type": "Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.FontVariant compatibleC -> Css.Mixin"
          },
          {
            "name": "fontVariantCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps a -> Css.Mixin"
          },
          {
            "name": "fontVariantLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures a -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric",
            "comment": " ",
            "type": "Css.FontVariantNumeric a -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric2",
            "comment": " ",
            "type": "Css.FontVariantNumeric compatibleA -> Css.FontVariantNumeric compatibleB -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric3",
            "comment": " ",
            "type": "Css.FontVariantNumeric compatibleA -> Css.FontVariantNumeric compatibleB -> Css.FontVariantNumeric compatibleC -> Css.Mixin"
          },
          {
            "name": "fontVariantNumerics",
            "comment": " ",
            "type": "List (Css.FontVariantNumeric compatible) -> Css.Mixin"
          },
          {
            "name": "fontWeight",
            "comment": " Sets [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)\n\n    fontWeight  bold\n    fontWeight  (int 300)\n",
            "type": "Css.FontWeight a -> Css.Mixin"
          },
          {
            "name": "fullWidth",
            "comment": " `full-width` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "fullscreen",
            "comment": " A [`:fullscreen`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afullscreen)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "generalSiblings",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "geometricPrecision",
            "comment": " `geometricPrecision` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "georgian",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "grab",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "grabbing",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "grad",
            "comment": " [`grad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#grad) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "groove",
            "comment": " A `groove` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "gujarati",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "gurmukhi",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "hanging",
            "comment": " `hanging` [`hanging`](https://developer.mozilla.org/en-US/docs/Web/CSS/hanging#Values) value\n",
            "type": "Css.TextIndent {}"
          },
          {
            "name": "hardLight",
            "comment": " The `hard-light` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#hard-light).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "height",
            "comment": " Sets [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n\n    height (px 800)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "help",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "hex",
            "comment": " [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())\nin hexadecimal notation. You can optionally include `#` as the first character,\nfor benefits like syntax highlighting in editors, ease of copy/pasting from\ntools which express these as e.g. `#abcdef0`, etc.\n",
            "type": "String -> Css.Color"
          },
          {
            "name": "hidden",
            "comment": " `hidden` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.\n\nThis can also represent a `hidden` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.Overflow (Css.BorderStyle {})"
          },
          {
            "name": "historicalLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "hover",
            "comment": " An [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ahover)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "hsl",
            "comment": " [HSL color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl())\n`s` and `l` values are expressed as a number between 0 and 1 and are converted\nto the appropriate percentage at compile-time\n",
            "type": "Float -> Float -> Float -> Css.Color"
          },
          {
            "name": "hsla",
            "comment": " [HSLA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsla())\n`s` and `l` values are expressed as a number between 0 and 1 and are converted\nto the appropriate percentage at compile-time\n",
            "type": "Float -> Float -> Float -> Float -> Css.Color"
          },
          {
            "name": "hue",
            "comment": " The `hue` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#hue).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "important",
            "comment": " Transforms the given property by adding !important to the end of its\ndeclaration.\n",
            "type": "Css.Mixin -> Css.Mixin"
          },
          {
            "name": "inches",
            "comment": " [`in`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#in) units.\n\n(This is `inches` instead of `in` because `in` is a reserved keyword in Elm.)\n",
            "type": "Float -> Css.In"
          },
          {
            "name": "indeterminate",
            "comment": " An [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aindeterminate)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "inherit",
            "comment": " The [`inherit`](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "initial",
            "comment": " The [`initial`](https://developer.mozilla.org/en-US/docs/Web/CSS/initial) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "inline",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inlineBlock",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inlineListItem",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inset",
            "comment": " An `inset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "inside",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStylePosition {})"
          },
          {
            "name": "int",
            "comment": " A unitless integer. Useful with properties like [`borderImageOutset`](#borderImageOutset)\nwhich accept either length units or unitless numbers for some properties.\n",
            "type": "Int -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.FontWeight (Css.Number { numericValue : Float , unitLabel : String , units : Css.UnitlessInteger })))"
          },
          {
            "name": "invalid",
            "comment": " An [`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ainvalid)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "italic",
            "comment": " ",
            "type": "Css.FontStyle {}"
          },
          {
            "name": "justifyAll",
            "comment": " `justify-all` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "kannada",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "khmer",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "lang",
            "comment": " A [`:lang`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alang)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "lao",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "large",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "larger",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "lastChild",
            "comment": " A [`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "lastOfType",
            "comment": " A [`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "left",
            "comment": " The [`left`](https://developer.mozilla.org/en-US/docs/Web/CSS/left) property.\n\n    position absolute\n    left (px 5)\n\nThis can also be used as a `left` [text alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:\n\n    textAlign left\n\n\nIt can also be used as a `left` [float](https://developer.mozilla.org/en-US/docs/Web/CSS/float) value :\n\n    float left\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "letterSpacing",
            "comment": " Sets [`letter-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing)\n\n    letterSpacing (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "lighten",
            "comment": " The `lighten` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#lighten).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "lighter",
            "comment": " ",
            "type": "Css.FontWeight {}"
          },
          {
            "name": "lineHeight",
            "comment": " Sets [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\n\n    lineHeight (px 10)\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "lineThrough",
            "comment": " A [`line-through`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "liningNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "link",
            "comment": " A [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alink)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "listItem",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "listStyle",
            "comment": " The [`list-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style) shorthand property.\n",
            "type": "Css.ListStyle compatible -> Css.Mixin"
          },
          {
            "name": "listStyle2",
            "comment": " The [`list-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style) shorthand property.\n",
            "type": "Css.ListStyle compatible1 -> Css.ListStyle compatible2 -> Css.Mixin"
          },
          {
            "name": "listStyle3",
            "comment": " The [`list-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style) shorthand property.\n",
            "type": "Css.ListStyle compatible1 -> Css.ListStyle compatible2 -> Css.ListStyle compatible3 -> Css.Mixin"
          },
          {
            "name": "listStylePosition",
            "comment": " The [`list-style-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position) property.\n",
            "type": "Css.ListStylePosition compatible -> Css.Mixin"
          },
          {
            "name": "listStyleType",
            "comment": " The [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type) property.\n",
            "type": "Css.ListStyleType compatible -> Css.Mixin"
          },
          {
            "name": "local",
            "comment": " The `local` [`background-attachment`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) value.\n",
            "type": "Css.BackgroundAttachment {}"
          },
          {
            "name": "lowerAlpha",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "lowerGreek",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "lowerLatin",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "lowerRoman",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "lowercase",
            "comment": " `lowercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "luminosity",
            "comment": " The `luminosity` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#luminosity).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "malayalam",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "margin",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "margin2",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.Mixin"
          },
          {
            "name": "margin3",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.LengthOrAuto compatibleC -> Css.Mixin"
          },
          {
            "name": "margin4",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.LengthOrAuto compatibleC -> Css.LengthOrAuto compatibleD -> Css.Mixin"
          },
          {
            "name": "marginBlockEnd",
            "comment": " Sets [`margin-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end)\n\n    marginBlockEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginBlockStart",
            "comment": " Sets [`margin-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start)\n\n    marginBlockStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginBottom",
            "comment": " Sets [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom)\n\n    marginBottom (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginInlineEnd",
            "comment": " Sets [`margin-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end)\n\n    marginInlineEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginInlineStart",
            "comment": " Sets [`margin-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start)\n\n    marginInlineStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginLeft",
            "comment": " Sets [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left)\n\n    marginLeft (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginRight",
            "comment": " Sets [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right)\n\n    marginRight (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginTop",
            "comment": " Sets [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top)\n\n    marginTop (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "matchParent",
            "comment": " `match-parent` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "matrix",
            "comment": " The [`matrix()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix()) transform-function.\n\n    transform (matrix 0.5 1 1.5 2 2.5 3)\n",
            "type": "number -> number -> number -> number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "matrix3d",
            "comment": " The [`matrix3d()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix3d()) transform-function.\n\n    transform (matrix3d 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3)\n",
            "type": "number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "maxContent",
            "comment": " The `max-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "maxHeight",
            "comment": " Sets [`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\n\n    maxHeight (px 1024)\n\n",
            "type": "Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "maxWidth",
            "comment": " Sets [`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\n\n    maxWidth (px 960)\n",
            "type": "Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "media",
            "comment": " ",
            "type": "List Css.Structure.MediaQuery -> List Css.Snippet -> Css.Snippet"
          },
          {
            "name": "mediaQuery",
            "comment": " ",
            "type": "String -> List Css.Snippet -> Css.Snippet"
          },
          {
            "name": "medium",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "middle",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign middle\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "minContent",
            "comment": " The `min-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "minHeight",
            "comment": " Sets [`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)\n\n    minHeight (px 100)\n\n",
            "type": "Css.LengthOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "minWidth",
            "comment": " Sets [`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)\n\n    minWidth (px 100)\n",
            "type": "Css.LengthOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "mixin",
            "comment": " A Mixin allowing you to modularly reuse common styles in other styles.\nThe return value of `mixin` can be used like any other property, since all\nproperties in elm-css are implemented as mixins.\n\n    underlineOnHover =\n        mixin\n            [ textDecoration none\n\n            , hover\n                [ textDecoration underline ]\n            ]\n\n    stylesheet\n      [ (.) FancyLink\n          [ color (rgb 128 64 32)\n          , underlineOnHover\n          ]\n      ]\n\n...has the same result as:\n\n    stylesheet\n      [ (.) FancyLink\n          [ color (rgb 128 64 32)\n          , textDecoration none\n          , hover\n            [ textDecoration underline ]\n          ]\n      ]\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "mm",
            "comment": " [``](https://developer.mozilla.org/en-US/docs/Web/CSS/length#mm) units.\n",
            "type": "Float -> Css.Mm"
          },
          {
            "name": "monospace",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "move",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "multiply",
            "comment": " The `multiply` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#multiply).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "myanmar",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "nResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "neResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "neswResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "noCommonLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noContextual",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noDiscretionaryLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noDrop",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "noHistoricalLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noRepeat",
            "comment": " The `no-repeat` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.\n",
            "type": "Css.BackgroundRepeat {}"
          },
          {
            "name": "noWrap",
            "comment": " ",
            "type": "Css.WhiteSpace (Css.FlexDirectionOrWrap (Css.FlexWrap {}))"
          },
          {
            "name": "none",
            "comment": " ",
            "type": "{ borderStyle : Css.Compatible , cursor : Css.Compatible , display : Css.Compatible , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible , none : Css.Compatible , lengthOrNone : Css.Compatible , lengthOrNoneOrMinMaxDimension : Css.Compatible , listStyleType : Css.Compatible , listStyleTypeOrPositionOrImage : Css.Compatible , outline : Css.Compatible , textDecorationLine : Css.Compatible , transform : Css.Compatible , value : String }"
          },
          {
            "name": "normal",
            "comment": " ",
            "type": "Css.FontStyleOrFeatureTagValue (Css.FontWeight {})"
          },
          {
            "name": "notAllowed",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nsResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nthChild",
            "comment": " An [`:nth-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthLastChild",
            "comment": " An [`:nth-last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthLastOfType",
            "comment": " An [`:nth-last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthOfType",
            "comment": " An [`:nth`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "num",
            "comment": " A unitless number. Useful with properties like [`flexGrow`](#flexGrow)\nwhich accept unitless numbers.\n",
            "type": "Float -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.Number { numericValue : Float , unitLabel : String , units : Css.UnitlessFloat }))"
          },
          {
            "name": "nwResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nwseResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "oblique",
            "comment": " ",
            "type": "Css.FontStyle {}"
          },
          {
            "name": "oldstyleNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "onlyChild",
            "comment": " An [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "onlyOfType",
            "comment": " An [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "opacity",
            "comment": " ",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "optimizeLegibility",
            "comment": " `optimizeLegibility` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "optimizeSpeed",
            "comment": " `optimizeSpeed` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "optional",
            "comment": " An [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aoptional)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "order",
            "comment": " Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "ordinal",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "oriya",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "outOfRange",
            "comment": " An [`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aout-of-range)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "outline",
            "comment": " Sets [`outline`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline)\n\n    outline  zero\n    outline  initial\n    outline3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Outline compatible -> Css.Mixin"
          },
          {
            "name": "outline3",
            "comment": " Sets [`outline`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline)\n\n    outline  zero\n    outline  initial\n    outline3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "outlineColor",
            "comment": " Sets [`outline-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-color)\n\n    outlineColor (rgb 11 14 17)\n    outlineColor (hex \"#ffffff\")\n    outlineColor (hsla 120 0.5 0.5 0.5)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "outlineOffset",
            "comment": " Sets [`outline-offset`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset)\n\n    outlineOffset (px 10)\n    outlineOffset (em 1.4)\n    outlineOffset (pct 50)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "outlineStyle",
            "comment": " Sets [`outline-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style)\n\n    outlineStyle dashed\n    outlineStyle solid\n    outlineStyle outset\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "outlineWidth",
            "comment": " Sets [`outline-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-width)\n\n    outlineWidth (px 10)\n    outlineWidth (em 1.4)\n    outlineWidth none\n",
            "type": "Css.LengthOrNone compatible -> Css.Mixin"
          },
          {
            "name": "outset",
            "comment": " An `outset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "outside",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStylePosition {})"
          },
          {
            "name": "overflow",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overflowX",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overflowY",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overlay",
            "comment": " The `overlay` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#overlay).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "overline",
            "comment": " An [`overline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "padding",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "padding2",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "padding3",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Mixin"
          },
          {
            "name": "padding4",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingBlockEnd",
            "comment": " Sets [`padding-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end)\n\n    paddingBlockEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingBlockStart",
            "comment": " Sets [`padding-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start)\n\n    paddingBlockStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingBottom",
            "comment": " Sets [`padding-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom)\n\n    paddingBottom (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingBox",
            "comment": " The `padding-box` [`background-clip`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip) value.\n",
            "type": "Css.BackgroundClip {}"
          },
          {
            "name": "paddingInlineEnd",
            "comment": " Sets [`padding-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end)\n\n    paddingInlineEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingInlineStart",
            "comment": " Sets [`padding-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start)\n\n    paddingInlineStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingLeft",
            "comment": " Sets [`padding-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left)\n\n    paddingLeft (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingRight",
            "comment": " Sets [`padding-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right)\n\n    paddingRight (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingTop",
            "comment": " Sets [`padding-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top)\n\n    paddingTop (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "pc",
            "comment": " [`pc`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pc) units.\n",
            "type": "Float -> Css.Pc"
          },
          {
            "name": "pct",
            "comment": " [`pct`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pct) units.\n",
            "type": "Float -> Css.Pct"
          },
          {
            "name": "perspective",
            "comment": " The [`perspective()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#perspective()) transform-function.\n\n     transform (perspective 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "petiteCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "pointer",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "position",
            "comment": " The [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property.\n",
            "type": "Css.Position compatible -> Css.Mixin"
          },
          {
            "name": "preserve3d",
            "comment": " The `preserve-3d` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle {}"
          },
          {
            "name": "print",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "progress",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "projection",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "property",
            "comment": " Define a custom property.\n\n    stylesheet\n      [ body\n          [ property \"-webkit-font-smoothing\" \"none\" ]\n      ]\n\n...outputs\n\n    body {\n        -webkit-font-smoothing: none;\n    }\n",
            "type": "String -> String -> Css.Mixin"
          },
          {
            "name": "proportionalNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "pt",
            "comment": " [`pt`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pt) units.\n",
            "type": "Float -> Css.Pt"
          },
          {
            "name": "px",
            "comment": " [`px`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#px) units.\n",
            "type": "Float -> Css.Px"
          },
          {
            "name": "qt",
            "comment": " For use with [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)\n\n    fontFamily    serif\n    fontFamilies  [(qt \"Gill Sans Extrabold\"), \"Helvetica\", .value sansSerif]\n",
            "type": "String -> String"
          },
          {
            "name": "rad",
            "comment": " [`rad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#rad) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "readWrite",
            "comment": " A [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aread-write)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "relative",
            "comment": " A `relative` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position relative\n",
            "type": "Css.Position {}"
          },
          {
            "name": "rem",
            "comment": " [`rem`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#rem) units.\n",
            "type": "Float -> Css.Rem"
          },
          {
            "name": "repeat",
            "comment": " The `repeat` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.\n",
            "type": "Css.BackgroundRepeat {}"
          },
          {
            "name": "repeatX",
            "comment": " The `repeat-x` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.\n",
            "type": "Css.BackgroundRepeatShorthand {}"
          },
          {
            "name": "repeatY",
            "comment": " The `repeat-y` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.\n",
            "type": "Css.BackgroundRepeatShorthand {}"
          },
          {
            "name": "required",
            "comment": " A [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Arequired)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "rgb",
            "comment": " [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())\n    in functional notation.\n",
            "type": "Int -> Int -> Int -> Css.Color"
          },
          {
            "name": "rgba",
            "comment": " [RGBA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgba()).\n",
            "type": "Int -> Int -> Int -> Float -> Css.Color"
          },
          {
            "name": "ridge",
            "comment": " A `ridge` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "right",
            "comment": " Sets [`right`](https://developer.mozilla.org/en-US/docs/Web/CSS/right).\n\n    position absolute\n    right (px 5)\n\nThis can also be used as a `right` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:\n\n    textAlign right\n\n\nIt can also be used as a `right` [float](https://developer.mozilla.org/en-US/docs/Web/CSS/float) value :\n\n    float right\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "root",
            "comment": " A [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aroot)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "rotate",
            "comment": " The [`rotate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()) transform-function.\n\n     transform (rotate (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotate3d",
            "comment": " The [`rotate3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate3d()) transform-function.\n\n     transform (rotate3d 1 1 1 (deg 90))\n",
            "type": "number -> number -> number -> Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateX",
            "comment": " The [`rotateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateX()) transform-function.\n\n     transform (rotateX (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateY",
            "comment": " The [`rotateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateY()) transform-function.\n\n     transform (rotateY (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateZ",
            "comment": " The [`rotateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateZ()) transform-function.\n\n     transform (rotateZ (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "round",
            "comment": " The `round` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.\n",
            "type": "Css.BackgroundRepeat {}"
          },
          {
            "name": "row",
            "comment": " The[`row`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "rowResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "rowReverse",
            "comment": " The[`row-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "sResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "sansSerif",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "saturation",
            "comment": " The `saturation` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#saturation).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "scale",
            "comment": " The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.\n\n     transform (scale 0.5)\n     transform (scale2 0.5 0.7)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scale2",
            "comment": " The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.\n\n     transform (scale 0.5)\n     transform (scale2 0.5 0.7)\n",
            "type": "number -> number -> Css.Transform {}"
          },
          {
            "name": "scale3d",
            "comment": " The [`scale3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale3d()) transform-function.\n\n     transform (scale3d 0.5 0.5 1)\n",
            "type": "number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "scaleX",
            "comment": " The [`scaleX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleX()) transform-function.\n\n     transform (scaleX 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scaleY",
            "comment": " The [`scaleY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleY()) transform-function.\n\n     transform (scaleY 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scope",
            "comment": " A [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ascope)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "screen",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "screenBlendMode",
            "comment": " The `screen` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#screen).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "scroll",
            "comment": " The `scroll` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.\nThis can also represent a `scroll` [`background-attachment`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) value.\n",
            "type": "Css.Overflow (Css.BackgroundAttachment {})"
          },
          {
            "name": "seResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "selection",
            "comment": " A [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aselection)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "selector",
            "comment": " A custom selector. Use this for things like\n[attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)\nand [universal selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors).\n\n    stylesheet \"homepage\"\n        [ selector \"* [lang^=en]\"\n            [ textDecoration underline\n            , color (rgb 7 7 7)\n            ]\n        ]\n",
            "type": "String -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "serif",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "skew",
            "comment": " The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.\n\n     transform (skew (deg 90))\n     transform (skew2 (deg 90) (deg 45))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "skew2",
            "comment": " The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.\n\n     transform (skew (deg 90))\n     transform (skew2 (deg 90) (deg 45))\n",
            "type": "Css.Angle compatibleA -> Css.Angle compatibleB -> Css.Transform {}"
          },
          {
            "name": "skewX",
            "comment": " The [`skewX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewX()) transform-function.\n\n     transform (skewX (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "skewY",
            "comment": " The [`skewY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewY()) transform-function.\n\n    transform (skewY (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "slashedZero",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "small",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "smallCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "smaller",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "softLight",
            "comment": " The `soft-light` [`blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode#soft-light).\n",
            "type": "Css.BackgroundBlendMode compatible"
          },
          {
            "name": "solid",
            "comment": " A `solid` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "space",
            "comment": " The `space` [`background-repeat`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) value.\n",
            "type": "Css.BackgroundRepeat {}"
          },
          {
            "name": "square",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "src",
            "comment": " ",
            "type": "Css.ImportType compatible -> String"
          },
          {
            "name": "stackedFractions",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "start",
            "comment": " `start` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "static",
            "comment": " A `static` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position static\n",
            "type": "Css.Position {}"
          },
          {
            "name": "sticky",
            "comment": " A `sticky` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position sticky\n",
            "type": "Css.Position {}"
          },
          {
            "name": "stretch",
            "comment": " The[`stretch`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "stylesheet",
            "comment": " A stylesheet.\n\n    stylesheet\n        [ body\n            [ width (px 960)\n            , color (rgb 7 7 7)\n            ]\n        ]\n",
            "type": "List Css.Snippet -> Css.Stylesheet"
          },
          {
            "name": "sub",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign sub\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "super",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign super\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "swResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "tabularNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "target",
            "comment": " A [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Atarget)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "telugu",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "text",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "textAlign",
            "comment": " Sets [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "textAlignLast",
            "comment": " Sets [`text-align-last`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last).\n    **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n    use this workaround:\n\n    property \"text-align-last\" \"auto\"\n\n    If this is annoying, please file an issue, so adding support for \"auto\"\n    can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "textBottom",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign textBottom\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "textDecoration",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine a -> Css.Mixin"
          },
          {
            "name": "textDecoration2",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine compatibleA -> Css.TextDecorationStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "textDecoration3",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine compatibleA -> Css.TextDecorationStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textDecorationLine",
            "comment": " Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n\n    textDecorationLine underline\n\nYou can specify multiple line decorations with `textDecorationLines`.\n\n    textDecorationLines  [ underline, overline ]\n",
            "type": "Css.TextDecorationLine compatible -> Css.Mixin"
          },
          {
            "name": "textDecorationLines",
            "comment": " Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n\n    textDecorationLines  [ underline, overline ]\n",
            "type": "List (Css.TextDecorationLine compatible) -> Css.Mixin"
          },
          {
            "name": "textDecorationStyle",
            "comment": " Sets [`text-decoration-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n\n    textDecorationStyle dotted\n",
            "type": "Css.TextDecorationStyle compatible -> Css.Mixin"
          },
          {
            "name": "textDecorations",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatible) -> Css.Mixin"
          },
          {
            "name": "textDecorations2",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatibleA) -> Css.TextDecorationStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "textDecorations3",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatibleA) -> Css.TextDecorationStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textEmphasisColor",
            "comment": " Sets ['text-emphasis-color'](https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-color)\n\n     textEmphasisColor (rgb 100 100 100)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "textIndent",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "textIndent2",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.Mixin"
          },
          {
            "name": "textIndent3",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.TextIndent compatibleC -> Css.Mixin"
          },
          {
            "name": "textJustify",
            "comment": " `text-justify` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "textOrientation",
            "comment": " Sets [`text-orientation`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation).\n\n    text-orientation mixed\n",
            "type": "Css.TextOrientation compatible -> Css.Mixin"
          },
          {
            "name": "textOverflow",
            "comment": " Sets [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow).\n\n    textOverflow ellipsis\n",
            "type": "Css.TextOverflow compatible -> Css.Mixin"
          },
          {
            "name": "textRendering",
            "comment": " Sets [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering).\n",
            "type": "Css.TextRendering a -> Css.Mixin"
          },
          {
            "name": "textShadow",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.None compatible -> Css.Mixin"
          },
          {
            "name": "textShadow2",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "textShadow3",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textShadow4",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.ColorValue compatibleD -> Css.Mixin"
          },
          {
            "name": "textTop",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign textTop\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "textTransform",
            "comment": " Sets [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform).\n",
            "type": "Css.TextTransform compatible -> Css.Mixin"
          },
          {
            "name": "thai",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "thick",
            "comment": " The\n[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\nof `thin`, `medium`, and `thick` have unspecified behavior according to the\nCSS specification, and as such are intentionally unsupported.\n\nUsing them is a bad idea, but if the fate of the world depends on it, you can\nfall back on something like this:\n\n    stylesheet\n        [ button\n            [ property \"border-left\" \"thick\" ]\n        ]\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "thin",
            "comment": " The\n[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\nof `thin`, `medium`, and `thick` have unspecified behavior according to the\nCSS specification, and as such are intentionally unsupported.\n\nUsing them is a bad idea, but if the fate of the world depends on it, you can\nfall back on something like this:\n\n    stylesheet\n        [ button\n            [ property \"border-left\" \"thin\" ]\n        ]\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "titlingCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "top",
            "comment": " The [`top`](https://developer.mozilla.org/en-US/docs/Web/CSS/top) property.\n\n    position absolute\n    top (px 5)\n\nThis can also be used as a `top` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:\n\n    verticalAlign top\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "transform",
            "comment": " Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\nwith a single explicit transform value. If you need to set the transform\nproperty to `none`, use the `transforms` function with an empty list. See\n`transforms` for more details.\n\n    transform (scaleX 1.4)\n",
            "type": "Css.Transform compatible -> Css.Mixin"
          },
          {
            "name": "transformBox",
            "comment": " The [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox compatible -> Css.Mixin"
          },
          {
            "name": "transformStyle",
            "comment": " The [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle compatible -> Css.Mixin"
          },
          {
            "name": "transforms",
            "comment": " Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\nwith a series of transform-functions. If an empty list is provided, the CSS\noutput will be `none`, as if to state directly that the set of transforms\napplied to the current selector is empty:\n\n    transforms [] -- transform: none;\n\nIn the case that only one transform is needed, the `transform` function may be\nused instead for convenience. `transform` expects exactly one transform-function\nand cannot be passed `none`:\n\n    transform (matrix 1 2 3 4 5 6) -- transform: matrix(1, 2, 3, 4, 5, 6);\n\nIf a collection of transforms is needed, use the `transforms` function with a\npopulated list:\n\n    transforms [ perspective 1, scale2 1 1.4 ]\n",
            "type": "List (Css.Transform compatible) -> Css.Mixin"
          },
          {
            "name": "translate",
            "comment": " The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.\n\n    transform (translate (px 100))\n    transform (translate2 (px 100) (pct -45))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translate2",
            "comment": " The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.\n\n    transform (translate (px 100))\n    transform (translate2 (px 100) (pct -45))\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Transform {}"
          },
          {
            "name": "translate3d",
            "comment": " The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.\n\n    transform (translate3d (px 100) (px 100) (px 100))\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Transform {}"
          },
          {
            "name": "translateX",
            "comment": " The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.\n\n    transform (translateX (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translateY",
            "comment": " The [`translateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateY()) transform-function.\n\n    transform (translateY (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translateZ",
            "comment": " The [`translateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateZ()) transform-function.\n\n    transform (translateZ (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "transparent",
            "comment": " A [`transparent`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#transparent_keyword) color.\n",
            "type": "Css.ColorValue Css.NonMixable"
          },
          {
            "name": "true",
            "comment": " `true` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "turn",
            "comment": " [`turn`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#tr) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "tv",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "underline",
            "comment": " An [`underline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "unicase",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "unset",
            "comment": " The [`unset`](https://developer.mozilla.org/en-US/docs/Web/CSS/unset) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "upperAlpha",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "upperLatin",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "upperRoman",
            "comment": " ",
            "type": "Css.ListStyle (Css.ListStyleType {})"
          },
          {
            "name": "uppercase",
            "comment": " `uppercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "url",
            "comment": " The `url` [`background-image`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image) value.\n",
            "type": "String -> Css.BackgroundImage {}"
          },
          {
            "name": "valid",
            "comment": " A [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avalid)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "verticalAlign",
            "comment": " Sets [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align).\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "verticalText",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "vh",
            "comment": " [`vh`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vh) units.\n",
            "type": "Float -> Css.Vh"
          },
          {
            "name": "viewBox",
            "comment": " The `view-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox {}"
          },
          {
            "name": "visible",
            "comment": " The `visible` value for the [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) property.\n",
            "type": "Css.Overflow {}"
          },
          {
            "name": "vmax",
            "comment": " [`vmax`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmax) units.\n",
            "type": "Float -> Css.Vmax"
          },
          {
            "name": "vmin",
            "comment": " [`vmin`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmin) units.\n",
            "type": "Float -> Css.Vmin"
          },
          {
            "name": "vw",
            "comment": " [`vw`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vw) units.\n",
            "type": "Float -> Css.Vw"
          },
          {
            "name": "wResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "wait",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "wavy",
            "comment": " A `wavy` [text decoration style](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style#Values).\n",
            "type": "Css.TextDecorationStyle {}"
          },
          {
            "name": "whiteSpace",
            "comment": " ",
            "type": "Css.WhiteSpace compatible -> Css.Mixin"
          },
          {
            "name": "width",
            "comment": " Sets [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width)\n\n    width (px 960)\n\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "withClass",
            "comment": " ",
            "type": "class -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "withMedia",
            "comment": " ",
            "type": "List Css.Structure.MediaQuery -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "wrap",
            "comment": " The[`wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the\n  flex-wrap property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexWrap {})"
          },
          {
            "name": "wrapReverse",
            "comment": " The[`wrap-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the\n  flex-wrap property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexWrap {})"
          },
          {
            "name": "xLarge",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xSmall",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xxLarge",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xxSmall",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "zero",
            "comment": " Convenience length value that compiles to 0 with no units.\n\n    stylesheet\n      [ ul\n          [ padding zero ]\n      ]\n\n...compiles to:\n\n    ul {\n        padding: 0;\n    }\n",
            "type": "{ value : String , length : Css.Compatible , lengthOrNumber : Css.Compatible , lengthOrNone : Css.Compatible , lengthOrAuto : Css.Compatible , lengthOrMinMaxDimension : Css.Compatible , lengthOrNoneOrMinMaxDimension : Css.Compatible , number : Css.Compatible , outline : Css.Compatible , units : Css.UnitlessInteger , unitLabel : String , numericValue : Float , lengthOrAutoOrCoverOrContain : Css.Compatible }"
          },
          {
            "name": "zoomIn",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "zoomOut",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "|*|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|+|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|-|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|/|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Css.Namespace",
        "comment": " Namespacing\n@docs namespace\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "namespace",
            "comment": "\ntakes an identifier, namespaces the list of snippets given with that identifier\n",
            "type": "a -> List Css.Preprocess.Snippet -> List Css.Preprocess.Snippet"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Css.Elements",
        "comment": " Selectors for HTML elements.\n\n# Basic elements\n@docs html, body\n\n# Content sectioning\n@docs article, header, footer, h1, h2, h3, h4, h5, h6, nav, section\n\n# Text content\n@docs div, hr, li, main_, ol, p, ul, pre\n\n# Inline text semantics\n@docs a, code, small, span, strong\n\n# Image and multimedia\n@docs img, audio, video, canvas\n\n# Table content\n@docs caption, col, colgroup, table, tbody, td, tfoot, th, thead, tr\n\n# Forms\n@docs button, fieldset, form, input, label, legend, optgroup, option, progress, select\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " Selector for an `<a>` element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "article",
            "comment": " Selector for an article element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "audio",
            "comment": " Selector for an audio element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "body",
            "comment": " Selector for a body element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "button",
            "comment": " Selector for a button element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "canvas",
            "comment": " Selector for a canvas element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "caption",
            "comment": " Selector for a caption element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "code",
            "comment": " Selector for a code element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "col",
            "comment": " Selector for a col element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "colgroup",
            "comment": " Selector for a colgroup element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "div",
            "comment": " Selector for a div element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "fieldset",
            "comment": " Selector for a fieldset element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "footer",
            "comment": " Selector for a footer element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "form",
            "comment": " Selector for a form element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h1",
            "comment": " Selector for an h1 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h2",
            "comment": " Selector for an h2 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h3",
            "comment": " Selector for an h3 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h4",
            "comment": " Selector for an h4 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h5",
            "comment": " Selector for an h5 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h6",
            "comment": " Selector for an h6 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "header",
            "comment": " Selector for a header element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "hr",
            "comment": " Selector for an hr element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "html",
            "comment": " Selector for a html element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "img",
            "comment": " Selector for a img element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "input",
            "comment": " Selector for an input element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "label",
            "comment": " Selector for a label element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "legend",
            "comment": " Selector for a legend element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "li",
            "comment": " Selector for an li element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "main_",
            "comment": " Selector for a main element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "nav",
            "comment": " Selector for a nav element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "ol",
            "comment": " Selector for an ol element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "optgroup",
            "comment": " Selector for an optgroup element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "option",
            "comment": " Selector for an option element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "p",
            "comment": " Selector for a p element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "pre",
            "comment": " Selector for a pre element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "progress",
            "comment": " Selector for a progress element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "section",
            "comment": " Selector for a section element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "select",
            "comment": " Selector for a select element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "small",
            "comment": " Selector for a small element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "span",
            "comment": " Selector for a span element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "strong",
            "comment": " Selector for a strong element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "table",
            "comment": " Selector for a table element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tbody",
            "comment": " Selector for a tbody element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "td",
            "comment": " Selector for a td element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tfoot",
            "comment": " Selector for a tfoot element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "th",
            "comment": " Selector for a th element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "thead",
            "comment": " Selector for a thead element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tr",
            "comment": " Selector for a thead element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "ul",
            "comment": " Selector for a ul element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "video",
            "comment": " Selector for a video element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css-helpers",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Html.CssHelpers",
        "comment": " Helper functions for using elm-css with elm-html.\n\n@docs withNamespace, style, stylesheetLink\n\n@docs Helpers, Namespace\n",
        "aliases": [
          {
            "name": "Helpers",
            "comment": " Helpers for working on a given class/id\n",
            "args": [
              "class",
              "id",
              "msg"
            ],
            "type": "{ class : List class -> Html.Attribute msg , classList : List ( class, Bool ) -> Html.Attribute msg , id : id -> Html.Attribute msg }"
          },
          {
            "name": "Namespace",
            "comment": " namespaced helpers for working on a given class/id\n",
            "args": [
              "name",
              "class",
              "id",
              "msg"
            ],
            "type": "{ class : List class -> Html.Attribute msg , classList : List ( class, Bool ) -> Html.Attribute msg , id : id -> Html.Attribute msg , name : name }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "style",
            "comment": " Create an inline style from CSS\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "stylesheetLink",
            "comment": " Link in a stylesheet from a url\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "withNamespace",
            "comment": " Takes a namespace and returns helper functions for `id`, `class`, and\n`classList` which work just like their equivalents in `elm-html` except that\nthey accept union types and automatically incorporate the given namespace. Also\nnote that `class` accepts a `List` instead of a single element; this is so you\ncan specify multiple classes without having to call `classList` passing tuples\nthat all end in `True`.\n\n    -- Put this before your view code to specify a namespace.\n    { id, class, classList } = withNamespace \"homepage\"\n\n    view =\n        h1 [ id Hero, class [ Fancy ] ] [ text \"Hello, World!\" ]\n\n    type HomepageIds = Hero | SomethingElse | AnotherId\n    type HomepageClasses = Fancy | AnotherClass | SomeOtherClass\n\nThe above would generate this DOM element:\n\n    <h1 id=\"Hero\" class=\"homepage_Fancy\">Hello, World!</h1>\n",
            "type": "name -> Html.CssHelpers.Namespace name class id msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css-util",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Css.Helpers",
        "comment": " Utility functions for elm-css.\n\n@docs toCssIdentifier, identifierToString\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "identifierToString",
            "comment": " Converts an arbitrary identifier to a valid CSS identifier, then prepends\nthe given namespace.\n",
            "type": "a -> b -> String"
          },
          {
            "name": "toCssIdentifier",
            "comment": " Converts an arbitrary value to a valid CSS identifier by calling\n`toString` on it, trimming it, replacing chunks of whitespace with `-`,\nand stripping out invalid characters.\n",
            "type": "a -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rtfeldman/legacy-elm-test",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Legacy.Check.Test",
        "comment": " An implementation of the legacy `Check.Test` module for backwards compatibility.\n\nIf you are currently using `Check.Test` and want to upgrade your version of\n`elm-test` to access the improved test runners, but still want your existing\ncode to compile, just replace your current `import Check.Test` with this:\n\n    import Legacy.Check.Test as CheckTest\n\nThat's it! (Well, you may also need to find/replace `Check.Test` with `CheckTest`.)\n\nThis module provides integration with\n[`elm-test`](http://package.elm-lang.org/packages/elm-community/elm-test/latest/).\n\n# Convert to Tests\n@docs evidenceToTest\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "evidenceToTest",
            "comment": " Convert elm-check's Evidence into an elm-test Test. You can use elm-test's\nrunners to view the results of your property-based tests, alongside the results\nof unit tests.\n",
            "type": "Check.Evidence -> Legacy.ElmTest.Test"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Legacy.ElmTest",
        "comment": " An implementation of the legacy `ElmTest` module for backwards compatibility.\n\nIf you are currently using `ElmTest` and want to upgrade your version of\n`elm-test` to access the improved test runners, but still want your existing\ncode to compile, just replace your current `import ElmTest` with this:\n\n    import Legacy.ElmTest as ElmTest\n\nThat's it!\n\nThis implementation of the old `ElmTest` API has been done entirely\nin terms of the new API. All of the logic should work the same way, although\nfailure reports will be formatted differently. They are most different for\n`stringRunner` and `defaultTest`, so take a look at the docs for those to see\nwhat's changed.\n\nNote that unlike `elm-test`, this API is synchronous, meaning tests cannot be\nrun in parallel. (That was a big part of the motivation for changing the API!)\nUnfortunately, there is no workaround for this. Upgrading is the only way.\n\n# Tests\n@docs Test, test, defaultTest, equals, suite\n\n# Assertions\n@docs Assertion, assert, assertEqual, assertNotEqual, lazyAssert, assertionList, pass, fail\n\n# Run tests in-program\n@docs stringRunner\n\n# Run tests as an app\n@docs runSuite, runSuiteHtml\n",
        "aliases": [
          {
            "name": "Assertion",
            "comment": " The basic unit of testability.\n",
            "args": [],
            "type": "Expect.Expectation"
          },
          {
            "name": "Test",
            "comment": " The core unit representing a runnable test, or a group of tests called a\nsuite.\n",
            "args": [],
            "type": "Test.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "assert",
            "comment": " Basic function to assert that some expression is True\n",
            "type": "Bool -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "assertEqual",
            "comment": " Basic function to assert that two expressions are equal in value.\n",
            "type": "a -> a -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "assertNotEqual",
            "comment": " Basic function to assert that two expressions are not equal.\n",
            "type": "a -> a -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "assertionList",
            "comment": " Given a list of values and another list of expected values, generates a\nlist of assertions that these values are equal.\n",
            "type": "List a -> List a -> List Legacy.ElmTest.Assertion"
          },
          {
            "name": "defaultTest",
            "comment": " In the original elm-test API, this would create a `Test` with a default name automatically chosen based on the inputs.\nFor example, `defaultTest (assertEqual 5 5)` would have be named \"5 == 5\".\n\nIn this version, it creates a `Test` with no name instead.\n",
            "type": "Legacy.ElmTest.Assertion -> Legacy.ElmTest.Test"
          },
          {
            "name": "equals",
            "comment": " Create a `Test` which asserts equality between two expressions.\nFor example, `(7 + 10) `equals` (1 + 16)` will create a `Test` which tests for\nequality between the statements `(7 + 10)` and `(1 + 16)`.\n",
            "type": "a -> a -> Legacy.ElmTest.Test"
          },
          {
            "name": "fail",
            "comment": " Create an assertion that always fails, for reasons described by the given\nstring.\n",
            "type": "String -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "lazyAssert",
            "comment": " A lazy version of `assert`. Delays execution of the expression until tests\nare run.\n",
            "type": "(() -> Bool) -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "pass",
            "comment": " An assertion that always passes. This is useful when you have test results\nfrom another library but want to use ElmTest runners.\n",
            "type": "Legacy.ElmTest.Assertion"
          },
          {
            "name": "runSuite",
            "comment": " Run a suite as a program. Useful for tests run from the command line:\n    module Tests exposing (..)\n    import ElmTest exposing (..)\n\n    tests : Test\n    tests =\n        suite \"A Test Suite\"\n            [ test \"Addition\" (assertEqual (3 + 7) 10)\n            , test \"Subtraction\" (assertEqual (7 - 3) 4)\n            , test \"This test should fail\" (assert False)\n            ]\n\n    main : Program Never\n    main =\n        runSuite tests\nAnd then:\n    $ elm-make Tests.elm --output tests.js\n    $ node tests.js\n",
            "type": "Test.Test -> Platform.Program Basics.Never () msg"
          },
          {
            "name": "runSuiteHtml",
            "comment": " Run a suite as program with Html output.\n",
            "type": "Test.Test -> Test.Runner.Html.TestProgram"
          },
          {
            "name": "stringRunner",
            "comment": " Run a test or a test suite and return the results as a `String`. Mostly\nuseful if you want to implement a different type of output for your test\nresults. If you aren't sure whether or not to use this function, you should\nprobably use `elementRunner`.\n",
            "type": "Legacy.ElmTest.Test -> String"
          },
          {
            "name": "suite",
            "comment": " Convert a list of `Test`s to a test suite. Test suites are used to group\ntests into logical units, simplifying the management and running of many tests.\nTakes a name and a list of `Test`s. Since suites are also of type `Test`, they\ncan contain other suites, allowing for a more complex tree structure.\n",
            "type": "String -> List Legacy.ElmTest.Test -> Legacy.ElmTest.Test"
          },
          {
            "name": "test",
            "comment": " A basic function to create a `Test`. Takes a name and an `Assertion`.\n",
            "type": "String -> Legacy.ElmTest.Assertion -> Legacy.ElmTest.Test"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "rtfeldman/node-test-runner",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Test.Runner.Node",
        "comment": " # Node Runner\n\nRuns a test and outputs its results to the console. Exit code is 0 if tests\npassed and 1 if any failed.\n\n@docs run, runWithOptions, TestProgram\n",
        "aliases": [
          {
            "name": "TestProgram",
            "comment": " A program which will run tests and report their results.\n",
            "args": [],
            "type": "Platform.Program Json.Encode.Value (Test.Runner.Node.App.Model Test.Runner.Node.Msg Test.Runner.Node.Model) (Test.Runner.Node.App.Msg Test.Runner.Node.Msg)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "run",
            "comment": " Run the test and report the results.\n\nFuzz tests use a default run count of 100, and an initial seed based on the\nsystem time when the test runs begin.\n",
            "type": "Test.Runner.Node.Emitter Test.Runner.Node.Msg -> Test.Test -> Test.Runner.Node.TestProgram"
          },
          {
            "name": "runWithOptions",
            "comment": " Run the test using the provided options. If `Nothing` is provided for either\n`runs` or `seed`, it will fall back on the options used in [`run`](#run).\n",
            "type": "{ a | runs : Int, seed : Maybe.Maybe Int } -> Test.Runner.Node.Emitter Test.Runner.Node.Msg -> Test.Test -> Test.Runner.Node.TestProgram"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "sporto/erl",
    "version": "10.0.2",
    "docs": [
      {
        "name": "Erl",
        "comment": " Library for parsing and constructing URLs\n\n# Types\n@docs Url, Query\n\n# Parse\n@docs parse\n\n# Parse helpers\n@docs extractHash, extractHost, extractPath, extractProtocol, extractPort, extractQuery\n\n# Construct\n@docs new\n\n# Mutation helpers\n@docs addQuery, setQuery, removeQuery, clearQuery, appendPathSegments\n\n# Serialize\n@docs toString\n\n# Serialization helpers\n@docs queryToString\n\n",
        "aliases": [
          {
            "name": "Query",
            "comment": " A Dict that holds keys and values for the query string\n",
            "args": [],
            "type": "Dict.Dict String String"
          },
          {
            "name": "Url",
            "comment": " Record that holds url attributes\n",
            "args": [],
            "type": "{ protocol : String , username : String , password : String , host : List String , port_ : Int , path : List String , hasLeadingSlash : Bool , hasTrailingSlash : Bool , hash : String , query : Erl.Query }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addQuery",
            "comment": " Set key/value in query string\n\n    Erl.addQuery key value url\n",
            "type": "String -> String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "appendPathSegments",
            "comment": " Append some path segments to a url\n\n    Erl.appendPathSegments [\"hello\", \"world\"] url\n",
            "type": "List String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "clearQuery",
            "comment": " Clears the current query string\n\n    Erl.clearQuery url\n",
            "type": "Erl.Url -> Erl.Url"
          },
          {
            "name": "extractHash",
            "comment": " Extract the hash (hash) from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractHost",
            "comment": " Extract the host from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractPath",
            "comment": " Extract the path from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractPort",
            "comment": " Extract the port from the url\n\nIf no port is included in the url then Erl will attempt to add a default port:\n\nHttp -> 80\nHttps -> 443\nFTP -> 21\nSFTP -> 22\n\n",
            "type": "String -> Int"
          },
          {
            "name": "extractProtocol",
            "comment": " Extract the protocol from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractQuery",
            "comment": " Extract the query string from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "new",
            "comment": " Generate an empty Erl.Url record\n\n    Erl.new ==\n\n    { protocol = \"\"\n    , username = \"\"\n    , password = \"\"\n    , host = []\n    , path = []\n    , hasLeadingSlash = False\n    , hasTrailingSlash = False\n    , port_ = 0\n    , hash = \"\"\n    , query = Dict.empty\n    }\n\n",
            "type": "Erl.Url"
          },
          {
            "name": "parse",
            "comment": " Parse a url string, returns an Erl.Url record\n\n    Erl.parse \"http://api.example.com/users/1#x/1?a=1\" == Erl.Url{...}\n",
            "type": "String -> Erl.Url"
          },
          {
            "name": "queryToString",
            "comment": " Convert to a string only the query component of an url, this includes '?'\n\n    Erl.queryToString url == \"?a=1&b=2\"\n",
            "type": "Erl.Url -> String"
          },
          {
            "name": "removeQuery",
            "comment": " Removes key from query string\n\n    Erl.removeQuery key url\n",
            "type": "String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "setQuery",
            "comment": " Set key/value in query string, removes any existing ones\n\n    Erl.setQuery key value url\n",
            "type": "String -> String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "toString",
            "comment": " Generate url string from an Erl.Url record\n\n    url = { protocol = \"http\",\n          , username = \"\",\n          , password = \"\",\n          , host = [\"www\", \"foo\", \"com\"],\n          , path = [\"users\", \"1\"],\n          , hasLeadingSlash = False\n          , hasTrailingSlash = False\n          , port_ = 2000,\n          , hash = \"a/b\",\n          , query = Dict.empty |> Dict.insert \"q\" \"1\" |> Dict.insert \"k\" \"2\"\n          }\n\n    Erl.toString url == \"http://www.foo.com:2000/users/1?k=2&q=1#a/b\"\n\n",
            "type": "Erl.Url -> String"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "stil4m/elm-aui-css",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Aui.Dropdown",
        "comment": " Functions to present AUI buttons and groups.\n\n\n# Alignment\n\n@docs Alignment, leftAlignment, rightAlignment\n\n# Types\n\n@docs Config\n\n# Model\n\n@docs Model, Msg, initialModel, open, close\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs dropdown, dropdownSection\n\n# Utility\n\n@docs baseConfig, withAlignment, withStyle\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the dropdown component.\n",
            "args": [],
            "type": "{ open : Bool }"
          }
        ],
        "types": [
          {
            "name": "Alignment",
            "comment": " Alignment relative to the button for the dropdown container.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Config",
            "comment": " Configuration type to show a dropdown component.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the dropdown component\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Create a base configuration with a Msg mapping function.\n\n    type Msg = DropdownMsg Aui.Dropdown.Msg\n\n    dropdown (baseConfig DropdownMsg) ...\n",
            "type": "(Aui.Dropdown.Msg -> a) -> Aui.Dropdown.Config a"
          },
          {
            "name": "close",
            "comment": " Change a dropdown to a closed state. Convenient when you handle an action from an item in the dropdown in your own update function.\n",
            "type": "Aui.Dropdown.Model -> Aui.Dropdown.Model"
          },
          {
            "name": "dropdown",
            "comment": " Present a dropdown given a configuration, button content, dropdown content and a model.\n\n    dropdown (baseConfig DropdownMsg |> withStyle Primary |> withAlignment Right)\n        [ text \"Open me\"]\n        [ dropdownSection (Just \"Section Title\")\n            [ ul []\n                [ li [] a [] [text \"Item 1\"]\n                , li [] a [] [text \"Item 2\"]\n                ]\n            ]\n        ]\n        dropdownModel\n",
            "type": "Aui.Dropdown.Config a -> List (Html.Html Aui.Dropdown.Msg) -> List (Html.Html a) -> Aui.Dropdown.Model -> Html.Html a"
          },
          {
            "name": "dropdownSection",
            "comment": " Creates a section for within a dropdown container.\n",
            "type": "Maybe.Maybe String -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "initialModel",
            "comment": " Default model for a dropdown component\n",
            "type": "Aui.Dropdown.Model"
          },
          {
            "name": "leftAlignment",
            "comment": " Left alignment of the dropdown respectively to the button\n",
            "type": "Aui.Dropdown.Alignment"
          },
          {
            "name": "open",
            "comment": " Change a dropdown to an opened state.\n",
            "type": "Aui.Dropdown.Model -> Aui.Dropdown.Model"
          },
          {
            "name": "rightAlignment",
            "comment": " Right alignment of the dropdown respectively to the button\n",
            "type": "Aui.Dropdown.Alignment"
          },
          {
            "name": "update",
            "comment": " Update function for the dropdown component. This should be called from within your update function when handling `Msg`\n",
            "type": "Aui.Dropdown.Msg -> Aui.Dropdown.Model -> Aui.Dropdown.Model"
          },
          {
            "name": "withAlignment",
            "comment": " Align the container for the dropdown to the side of the dropdown button.\n",
            "type": "Aui.Dropdown.Alignment -> Aui.Dropdown.Config a -> Aui.Dropdown.Config a"
          },
          {
            "name": "withStyle",
            "comment": " Set the style of the dropdown button.\n",
            "type": "Aui.Buttons.Style -> Aui.Dropdown.Config a -> Aui.Dropdown.Config a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Select",
        "comment": " Functions to present AUI select.\n\n# Type\n\n@docs Msg, Config\n\n# Model\n\n@docs Model, initialModel\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs singleSelect\n\n# Config\n\n@docs Config, baseConfig, withPlaceholder, withZIndex\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the select component.\n",
            "args": [],
            "type": "{ open : Bool , query : Maybe.Maybe String , items : List String , value : Maybe.Maybe String , identifier : String , highlighted : Maybe.Maybe String }"
          }
        ],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration record to show a dropdown component.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the select component\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Create a base configuration for presenting a select.\n",
            "type": "Aui.Select.Config"
          },
          {
            "name": "initialModel",
            "comment": " Initial model for a select.\n",
            "type": "String -> List String -> ( Aui.Select.Model, Platform.Cmd.Cmd Aui.Select.Msg )"
          },
          {
            "name": "singleSelect",
            "comment": " Create a single select with a configuration and a model.\n",
            "type": "Aui.Select.Config -> Aui.Select.Model -> Html.Html Aui.Select.Msg"
          },
          {
            "name": "update",
            "comment": " Update function for the select component. This should be called from within your update function when handling `Msg`\n",
            "type": "Aui.Select.Msg -> Aui.Select.Model -> ( Aui.Select.Model, Platform.Cmd.Cmd Aui.Select.Msg )"
          },
          {
            "name": "withPlaceholder",
            "comment": " Change placeholder of select\n",
            "type": "String -> Aui.Select.Config -> Aui.Select.Config"
          },
          {
            "name": "withZIndex",
            "comment": " Change backdrop z index of select\n",
            "type": "Int -> Aui.Select.Config -> Aui.Select.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Toolbar",
        "comment": " Functions to present AUI toolbars.\n\n# Presentation\n\n@docs toolbar, toolbarPrimary, toolbarSecondary, toolbarGroup\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toolbar",
            "comment": " Create a toolbar:\n\n    toolbar\n        [ toolbarPrimary\n            [ buttonGroup [ button baseConfig Edit [ text \"Edit\" ] ]\n            , buttonGroup\n                [ button baseConfig Assign [ text \"Assign\" ]\n                , button baseConfig AssignMe [ text \"Assign to me\" ]\n                ]\n            ]\n        , toolbarSecondary [ button baseConfig Configure [ icon Small Configure ] ]\n        ]\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "toolbarGroup",
            "comment": " Create toolbar button group\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "toolbarPrimary",
            "comment": " Create primary part of toolbar.\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "toolbarSecondary",
            "comment": " Create secondary part of toolbar.\n",
            "type": "List (Html.Html a) -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Toggle",
        "comment": " Functions to present AUI toggle.\n\n# Presentation\n\n@docs toggle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toggle",
            "comment": " Create a toggle with if it is enabled, a message and its state.\n\n    toggle isEnabled\n        ToggleClicked\n        isOn\n",
            "type": "Bool -> (Bool -> a) -> Bool -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Tabs",
        "comment": " Functions to present AUI tabs.\n\n# Types\n\n@docs Msg, Config\n\n# Model\n\n@docs Model, modelWithActive\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs tabs\n\n# ITems\n\n@docs Item, item\n\n\n# Config\n\n@docs Config, baseConfig, horizontal, vertical, withItems\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the tabs component.\n",
            "args": [
              "itemId"
            ],
            "type": "Maybe.Maybe itemId"
          }
        ],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration record to show a tabs component.\n",
            "args": [
              "a",
              "itemId"
            ],
            "cases": []
          },
          {
            "name": "Item",
            "comment": " Representation of a single tab.\n",
            "args": [
              "itemId"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the tabs component\n",
            "args": [
              "itemId"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Basic configuration for the tabs\n",
            "type": "(Aui.Tabs.Msg itemId -> a) -> Aui.Tabs.Config a itemId"
          },
          {
            "name": "horizontal",
            "comment": " Make configuration have horizontal tabs\n",
            "type": "Aui.Tabs.Config a itemId -> Aui.Tabs.Config a itemId"
          },
          {
            "name": "item",
            "comment": " Creates an item\n",
            "type": "itemId -> String -> Aui.Tabs.Item itemId"
          },
          {
            "name": "modelWithActive",
            "comment": " Create a model with a active item\n",
            "type": "itemId -> Aui.Tabs.Model itemId"
          },
          {
            "name": "tabs",
            "comment": " Create a tabs component with a given configuration, a mapper from itemId to tab content and a model\n",
            "type": "Aui.Tabs.Config a itemId -> (itemId -> Html.Html a) -> Aui.Tabs.Model itemId -> Html.Html a"
          },
          {
            "name": "update",
            "comment": " Update function for the tabs component. This should be called from within your update function when handling `Msg`.\n",
            "type": "Aui.Tabs.Msg itemId -> Aui.Tabs.Model itemId -> Aui.Tabs.Model itemId"
          },
          {
            "name": "vertical",
            "comment": " Make configuration have vertical tabs\n",
            "type": "Aui.Tabs.Config a itemId -> Aui.Tabs.Config a itemId"
          },
          {
            "name": "withItems",
            "comment": " Set items for tab\n",
            "type": "List (Aui.Tabs.Item itemId) -> Aui.Tabs.Config a itemId -> Aui.Tabs.Config a itemId"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Messages",
        "comment": " Functions to present AUI messages.\n\n\n# Presentation\n\n@docs message, closableMessage\n\n# Types\n\n@docs Type, generic, error, warning, success, info, hint\n\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Type",
            "comment": " Different message types\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "closableMessage",
            "comment": " Create a message dialog that has a close button and triggers a message.\n\n    closableMessage Warning\n        Closed\n        [ text \"Title\" ]\n        [ text \"There is a warning\" ]\n",
            "type": "Aui.Messages.Type -> a -> List (Html.Html a) -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "error",
            "comment": " Error type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "generic",
            "comment": " Generic type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "hint",
            "comment": " Hint type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "info",
            "comment": " Info type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "message",
            "comment": " Create a message.\n\n    message Warning\n        [ text \"Title\" ]\n        [ text \"There is a warning\" ]\n",
            "type": "Aui.Messages.Type -> List (Html.Html a) -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "success",
            "comment": " Success type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "warning",
            "comment": " Warning type for message\n",
            "type": "Aui.Messages.Type"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.ProgressIndicator",
        "comment": " Functions to present AUI progress indicator.\n\n\n# Presentation\n\n@docs progressIndicator, activeProgressIndicator\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "activeProgressIndicator",
            "comment": " Create a progress indicator that represents an active loading state.\n",
            "type": "Html.Html a"
          },
          {
            "name": "progressIndicator",
            "comment": " Create a progress indicator with a value between 0.0 and 1.0.\n",
            "type": "Float -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.ProgressTracker",
        "comment": " Functions to present AUI progress tracker.\n\n\n# Presentation\n\n@docs progressTracker, invertedProgressTracker\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "invertedProgressTracker",
            "comment": " Create an inverted progress tracker with items and a given active index.\n",
            "type": "List String -> Int -> Html.Html a"
          },
          {
            "name": "progressTracker",
            "comment": " Create a progress tracker with items and a given active index (zero based).\n\n    progressTracker [\"Step 1\", \"Step 2\", \"Step 3\"] 1\n",
            "type": "List String -> Int -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Expander",
        "comment": " Functions to present AUI expander.\n\n\n# Config\n\n@docs Config, withMinHeight, withMoreText, withLessText`\n\n# Model\n\n@docs Model, Msg, initialModel\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs expander\n\n# Utility\n\n@docs baseConfig\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the expander comonent.\n",
            "args": [],
            "type": "Bool"
          }
        ],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration record for presenting an expander.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the expander component.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Create a default configuration with sane defaults to present an expander.\n",
            "type": "(Aui.Expander.Msg -> a) -> Aui.Expander.Config a"
          },
          {
            "name": "expander",
            "comment": " Present a expander given a configuration, content and model.\n\n    view model =\n        expander (baseConfig ExpanderMsg)\n            \"Lorem ipsum...\"\n            model.expander\n",
            "type": "Aui.Expander.Config a -> String -> Aui.Expander.Model -> Html.Html a"
          },
          {
            "name": "initialModel",
            "comment": " Default model for a expander component\n",
            "type": "Aui.Expander.Model"
          },
          {
            "name": "update",
            "comment": " Update function for the expander component. This should be called from within your update function when handling `Msg`\n",
            "type": "Aui.Expander.Msg -> Aui.Expander.Model -> Aui.Expander.Model"
          },
          {
            "name": "withLessText",
            "comment": " Set less text for configuration\n",
            "type": "String -> Aui.Expander.Config a -> Aui.Expander.Config a"
          },
          {
            "name": "withMinHeight",
            "comment": " Set less text for configuration\n",
            "type": "String -> Aui.Expander.Config a -> Aui.Expander.Config a"
          },
          {
            "name": "withMoreText",
            "comment": " Set more text for configuration\n",
            "type": "String -> Aui.Expander.Config a -> Aui.Expander.Config a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Icons",
        "comment": " Functions to present AUI icons.\n\n\n# Types\n\n@docs Icon, customIcon, Size, large, small\n\n# Presentation\n\n@docs icon, iconSmall, iconLarge\n\n# Predefined Icons\n\n@docs addIcon, addCommentIcon, addSmallIcon, approveIcon, appswitcherIcon, arrowsDownIcon, arrowsLeftIcon, arrowsRightIcon, arrowsUpIcon, attachmentIcon, attachmentSmallIcon, autocompleteDateIcon, backPageIcon, blogrollIcon, bpDecisionsIcon, bpDefaultIcon, bpFilesIcon, bpRequirementsIcon, bpHowtoIcon, bpJiraIcon, bpMeetingIcon, bpRetrospectiveIcon, bpSharedlinksIcon, bpTroubleshootingIcon, buildIcon, calendarIcon, closeDialogIcon, collapsedIcon, commentIcon, configureIcon, confluenceIcon, copyClipboardIcon, customBulletIcon, deleteIcon, deployIcon, detailsIcon, docIcon, downIcon, dragVerticalIcon, editIcon, editSmallIcon, emailIcon, errorIcon, expandedIcon, fileCodeIcon, fileDocIcon, fileJavaIcon, filePdfIcon, filePptIcon, fileTxtIcon, fileWavIcon, fileXlsIcon, fileZipIcon, flagIcon, focusIcon, groupIcon, handleHorizontalIcon, helpIcon, hipchatIcon, homepageIcon, imageIcon, imageExtrasmallIcon, imageSmallIcon, infoIcon, likeIcon, likeSmallIcon, weblinkIcon, linkIcon, listAddIcon, listRemoveIcon, lockedIcon, lockedSmallIcon, macroCodeIcon, macroDefaultIcon, macroGalleryIcon, macroStatusIcon, moreIcon, navChildrenIcon, pageBlankIcon, pageBlogpostIcon, pageDefaultIcon, pageTemplateIcon, pagesIcon, quoteIcon, redoIcon, removeIcon, removeLabelIcon, reviewIcon, rssIcon, searchIcon, searchSmallIcon, shareIcon, sidebarLinkIcon, sourcetreeIcon, spaceDefaultIcon, spacePersonalIcon, starIcon, successIcon, tableBgIcon, tableColLeftIcon, tableColRemoveIcon, tableColRightIcon, tableCopyRowIcon, tableCutRowIcon, tableHeaderColumnIcon, tableHeaderRowIcon, tableMergeIcon, tableNoBgIcon, tablePasteRowIcon, tableRemoveIcon, tableRowDownIcon, tableRowRemoveIcon, tableRowUpIcon, tableSplitIcon, teamcalsIcon, timeIcon, undoIcon, unfocusIcon, unlockedIcon, unstarIcon, unwatchIcon, upIcon, userIcon, userStatusIcon, viewIcon, viewCardIcon, viewListIcon, viewTableIcon, warningIcon, watchIcon, workboxIcon, workboxEmptyIcon, configureColumnsIcon, exportIcon, exportListIcon, fileImageIcon, adminFusionIcon, adminJiraFieldsIcon, adminIssueIcon, adminNotificationsIcon, adminRolesIcon, adminJiraScreensIcon, pauseIcon, priorityHighestIcon, priorityHighIcon, priorityMediumIcon, priorityLowIcon, priorityLowestIcon, refreshSmallIcon, shareListIcon, switchSmallIcon, versionIcon, workflowIcon, adminJiraSettingsIcon, componentIcon, reopenIcon, roadmapIcon, deploySuccessIcon, deployFailIcon, fileGenericIcon, arrowDownIcon, arrowUpIcon, fileVideoIcon, blogrollLargeIcon, emailLargeIcon, layout1ColLargeIcon, layout2ColLargeIcon, layout2ColLeftLargeIcon, layout2ColRightLargeIcon, layout3ColCenterLargeIcon, layout3ColLargeIcon, navChildrenLargeIcon, pagesLargeIcon, sidebarLinkLargeIcon, teamcalsLargeIcon, userLargeIcon, jiraIssuesIcon, devtoolsArrowLeftIcon, devtoolsArrowRightIcon, devtoolsBranchIcon, devtoolsBranchSmallIcon, devtoolsBrowseUpIcon, devtoolsCheckoutIcon, devtoolsCloneIcon, devtoolsCommitIcon, devtoolsCompareIcon, devtoolsFileIcon, devtoolsFileBinaryIcon, devtoolsFileCommentedIcon, devtoolsFolderClosedIcon, devtoolsFolderOpenIcon, devtoolsForkIcon, devtoolsPullRequestIcon, devtoolsRepositoryIcon, devtoolsRepositoryForkedIcon, devtoolsRepositoryLockedIcon, devtoolsSideDiffIcon, devtoolsSubmoduleIcon, devtoolsTagIcon, devtoolsTagSmallIcon, devtoolsTaskCancelledIcon, devtoolsTaskDisabledIcon, devtoolsTaskInProgressIcon, bitbucketIcon, editorAlignCenterIcon, editorAlignLeftIcon, editorAlignRightIcon, editorBoldIcon, editorColorIcon, editorEmoticonIcon, editorHelpIcon, editorHrIcon, editorIndentIcon, editorItalicIcon, editorLayoutIcon, editorListBulletIcon, editorListNumberIcon, editorMacroTocIcon, editorMentionIcon, editorOutdentIcon, editorStylesIcon, editorSymbolIcon, editorTableIcon, editorTaskIcon, editorUnderlineIcon, jiraIcon, jiraCompletedTaskIcon, jiraTestSessionIcon\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Icon",
            "comment": " Opaque icon type\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Size",
            "comment": " Sizes for icon\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "addCommentIcon",
            "comment": " Predefined icon for add-comment\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "addIcon",
            "comment": " Predefined icon for add\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "addSmallIcon",
            "comment": " Predefined icon for add-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminFusionIcon",
            "comment": " Predefined icon for admin-fusion\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminIssueIcon",
            "comment": " Predefined icon for admin-issue\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminJiraFieldsIcon",
            "comment": " Predefined icon for admin-jira-fields\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminJiraScreensIcon",
            "comment": " Predefined icon for admin-jira-screens\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminJiraSettingsIcon",
            "comment": " Predefined icon for admin-jira-settings\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminNotificationsIcon",
            "comment": " Predefined icon for admin-notifications\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "adminRolesIcon",
            "comment": " Predefined icon for admin-roles\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "approveIcon",
            "comment": " Predefined icon for approve\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "appswitcherIcon",
            "comment": " Predefined icon for appswitcher\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "arrowDownIcon",
            "comment": " Predefined icon for arrow-down\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "arrowUpIcon",
            "comment": " Predefined icon for arrow-up\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "arrowsDownIcon",
            "comment": " Predefined icon for arrows-down\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "arrowsLeftIcon",
            "comment": " Predefined icon for arrows-left\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "arrowsRightIcon",
            "comment": " Predefined icon for arrows-right\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "arrowsUpIcon",
            "comment": " Predefined icon for arrows-up\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "attachmentIcon",
            "comment": " Predefined icon for attachment\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "attachmentSmallIcon",
            "comment": " Predefined icon for attachment-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "autocompleteDateIcon",
            "comment": " Predefined icon for autocomplete-date\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "backPageIcon",
            "comment": " Predefined icon for back-page\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bitbucketIcon",
            "comment": " Predefined icon for bitbucket\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "blogrollIcon",
            "comment": " Predefined icon for blogroll\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "blogrollLargeIcon",
            "comment": " Predefined icon for blogroll-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpDecisionsIcon",
            "comment": " Predefined icon for bp-decisions\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpDefaultIcon",
            "comment": " Predefined icon for bp-default\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpFilesIcon",
            "comment": " Predefined icon for bp-files\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpHowtoIcon",
            "comment": " Predefined icon for bp-howto\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpJiraIcon",
            "comment": " Predefined icon for bp-jira\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpMeetingIcon",
            "comment": " Predefined icon for bp-meeting\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpRequirementsIcon",
            "comment": " Predefined icon for bp-requirements\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpRetrospectiveIcon",
            "comment": " Predefined icon for bp-retrospective\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpSharedlinksIcon",
            "comment": " Predefined icon for bp-sharedlinks\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "bpTroubleshootingIcon",
            "comment": " Predefined icon for bp-troubleshooting\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "buildIcon",
            "comment": " Predefined icon for build\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "calendarIcon",
            "comment": " Predefined icon for calendar\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "closeDialogIcon",
            "comment": " Predefined icon for close-dialog\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "collapsedIcon",
            "comment": " Predefined icon for collapsed\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "commentIcon",
            "comment": " Predefined icon for comment\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "componentIcon",
            "comment": " Predefined icon for component\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "configureColumnsIcon",
            "comment": " Predefined icon for configure-columns\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "configureIcon",
            "comment": " Predefined icon for configure\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "confluenceIcon",
            "comment": " Predefined icon for confluence\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "copyClipboardIcon",
            "comment": " Predefined icon for copy-clipboard\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "customBulletIcon",
            "comment": " Predefined icon for custom-bullet\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "customIcon",
            "comment": " Create an icon with a custom icon class. You loose the safety that you have with the predefined icons.\n    Only use this when there are new items that are not yet predefined.\n\n    customIcon \"my-custom-icon\"\n",
            "type": "String -> Aui.Icons.Icon"
          },
          {
            "name": "deleteIcon",
            "comment": " Predefined icon for delete\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "deployFailIcon",
            "comment": " Predefined icon for deploy-fail\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "deployIcon",
            "comment": " Predefined icon for deploy\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "deploySuccessIcon",
            "comment": " Predefined icon for deploy-success\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "detailsIcon",
            "comment": " Predefined icon for details\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsArrowLeftIcon",
            "comment": " Predefined icon for devtools-arrow-left\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsArrowRightIcon",
            "comment": " Predefined icon for devtools-arrow-right\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsBranchIcon",
            "comment": " Predefined icon for devtools-branch\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsBranchSmallIcon",
            "comment": " Predefined icon for devtools-branch-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsBrowseUpIcon",
            "comment": " Predefined icon for devtools-browse-up\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsCheckoutIcon",
            "comment": " Predefined icon for devtools-checkout\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsCloneIcon",
            "comment": " Predefined icon for devtools-clone\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsCommitIcon",
            "comment": " Predefined icon for devtools-commit\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsCompareIcon",
            "comment": " Predefined icon for devtools-compare\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsFileBinaryIcon",
            "comment": " Predefined icon for devtools-file-binary\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsFileCommentedIcon",
            "comment": " Predefined icon for devtools-file-commented\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsFileIcon",
            "comment": " Predefined icon for devtools-file\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsFolderClosedIcon",
            "comment": " Predefined icon for devtools-folder-closed\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsFolderOpenIcon",
            "comment": " Predefined icon for devtools-folder-open\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsForkIcon",
            "comment": " Predefined icon for devtools-fork\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsPullRequestIcon",
            "comment": " Predefined icon for devtools-pull-request\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsRepositoryForkedIcon",
            "comment": " Predefined icon for devtools-repository-forked\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsRepositoryIcon",
            "comment": " Predefined icon for devtools-repository\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsRepositoryLockedIcon",
            "comment": " Predefined icon for devtools-repository-locked\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsSideDiffIcon",
            "comment": " Predefined icon for devtools-side-diff\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsSubmoduleIcon",
            "comment": " Predefined icon for devtools-submodule\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsTagIcon",
            "comment": " Predefined icon for devtools-tag\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsTagSmallIcon",
            "comment": " Predefined icon for devtools-tag-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsTaskCancelledIcon",
            "comment": " Predefined icon for devtools-task-cancelled\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsTaskDisabledIcon",
            "comment": " Predefined icon for devtools-task-disabled\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "devtoolsTaskInProgressIcon",
            "comment": " Predefined icon for devtools-task-in-progress\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "docIcon",
            "comment": " Predefined icon for doc\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "downIcon",
            "comment": " Predefined icon for down\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "dragVerticalIcon",
            "comment": " Predefined icon for drag-vertical\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editIcon",
            "comment": " Predefined icon for edit\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editSmallIcon",
            "comment": " Predefined icon for edit-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorAlignCenterIcon",
            "comment": " Predefined icon for editor-align-center\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorAlignLeftIcon",
            "comment": " Predefined icon for editor-align-left\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorAlignRightIcon",
            "comment": " Predefined icon for editor-align-right\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorBoldIcon",
            "comment": " Predefined icon for editor-bold\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorColorIcon",
            "comment": " Predefined icon for editor-color\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorEmoticonIcon",
            "comment": " Predefined icon for editor-emoticon\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorHelpIcon",
            "comment": " Predefined icon for editor-help\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorHrIcon",
            "comment": " Predefined icon for editor-hr\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorIndentIcon",
            "comment": " Predefined icon for editor-indent\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorItalicIcon",
            "comment": " Predefined icon for editor-italic\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorLayoutIcon",
            "comment": " Predefined icon for editor-layout\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorListBulletIcon",
            "comment": " Predefined icon for editor-list-bullet\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorListNumberIcon",
            "comment": " Predefined icon for editor-list-number\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorMacroTocIcon",
            "comment": " Predefined icon for editor-macro-toc\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorMentionIcon",
            "comment": " Predefined icon for editor-mention\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorOutdentIcon",
            "comment": " Predefined icon for editor-outdent\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorStylesIcon",
            "comment": " Predefined icon for editor-styles\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorSymbolIcon",
            "comment": " Predefined icon for editor-symbol\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorTableIcon",
            "comment": " Predefined icon for editor-table\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorTaskIcon",
            "comment": " Predefined icon for editor-task\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "editorUnderlineIcon",
            "comment": " Predefined icon for editor-underline\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "emailIcon",
            "comment": " Predefined icon for email\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "emailLargeIcon",
            "comment": " Predefined icon for email-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "errorIcon",
            "comment": " Predefined icon for error\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "expandedIcon",
            "comment": " Predefined icon for expanded\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "exportIcon",
            "comment": " Predefined icon for export\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "exportListIcon",
            "comment": " Predefined icon for export-list\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileCodeIcon",
            "comment": " Predefined icon for file-code\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileDocIcon",
            "comment": " Predefined icon for file-doc\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileGenericIcon",
            "comment": " Predefined icon for file-generic\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileImageIcon",
            "comment": " Predefined icon for file-image\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileJavaIcon",
            "comment": " Predefined icon for file-java\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "filePdfIcon",
            "comment": " Predefined icon for file-pdf\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "filePptIcon",
            "comment": " Predefined icon for file-ppt\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileTxtIcon",
            "comment": " Predefined icon for file-txt\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileVideoIcon",
            "comment": " Predefined icon for file-video\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileWavIcon",
            "comment": " Predefined icon for file-wav\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileXlsIcon",
            "comment": " Predefined icon for file-xls\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "fileZipIcon",
            "comment": " Predefined icon for file-zip\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "flagIcon",
            "comment": " Predefined icon for flag\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "focusIcon",
            "comment": " Predefined icon for focus\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "groupIcon",
            "comment": " Predefined icon for group\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "handleHorizontalIcon",
            "comment": " Predefined icon for handle-horizontal\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "helpIcon",
            "comment": " Predefined icon for help\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "hipchatIcon",
            "comment": " Predefined icon for hipchat\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "homepageIcon",
            "comment": " Predefined icon for homepage\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "icon",
            "comment": " Create an icon with a given size and type.\n\n    icon Small Configure\n",
            "type": "Aui.Icons.Size -> Aui.Icons.Icon -> Html.Html a"
          },
          {
            "name": "iconLarge",
            "comment": " Shortcut for `icon Large`\n",
            "type": "Aui.Icons.Icon -> Html.Html a"
          },
          {
            "name": "iconSmall",
            "comment": " Shortcut for `icon Small`\n",
            "type": "Aui.Icons.Icon -> Html.Html a"
          },
          {
            "name": "imageExtrasmallIcon",
            "comment": " Predefined icon for image-extrasmall\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "imageIcon",
            "comment": " Predefined icon for image\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "imageSmallIcon",
            "comment": " Predefined icon for image-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "infoIcon",
            "comment": " Predefined icon for info\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "jiraCompletedTaskIcon",
            "comment": " Predefined icon for jira-completed-task\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "jiraIcon",
            "comment": " Predefined icon for jira\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "jiraIssuesIcon",
            "comment": " Predefined icon for jira-issues\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "jiraTestSessionIcon",
            "comment": " Predefined icon for jira-test-session\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "large",
            "comment": " Large sized icon\n",
            "type": "Aui.Icons.Size"
          },
          {
            "name": "layout1ColLargeIcon",
            "comment": " Predefined icon for layout-1col-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "layout2ColLargeIcon",
            "comment": " Predefined icon for layout-2col-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "layout2ColLeftLargeIcon",
            "comment": " Predefined icon for layout-2col-left-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "layout2ColRightLargeIcon",
            "comment": " Predefined icon for layout-2col-right-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "layout3ColCenterLargeIcon",
            "comment": " Predefined icon for layout-3col-center-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "layout3ColLargeIcon",
            "comment": " Predefined icon for layout-3col-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "likeIcon",
            "comment": " Predefined icon for like\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "likeSmallIcon",
            "comment": " Predefined icon for like-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "linkIcon",
            "comment": " Predefined icon for link\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "listAddIcon",
            "comment": " Predefined icon for list-add\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "listRemoveIcon",
            "comment": " Predefined icon for list-remove\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "lockedIcon",
            "comment": " Predefined icon for locked\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "lockedSmallIcon",
            "comment": " Predefined icon for locked-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "macroCodeIcon",
            "comment": " Predefined icon for macro-code\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "macroDefaultIcon",
            "comment": " Predefined icon for macro-default\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "macroGalleryIcon",
            "comment": " Predefined icon for macro-gallery\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "macroStatusIcon",
            "comment": " Predefined icon for macro-status\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "moreIcon",
            "comment": " Predefined icon for more\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "navChildrenIcon",
            "comment": " Predefined icon for nav-children\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "navChildrenLargeIcon",
            "comment": " Predefined icon for nav-children-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pageBlankIcon",
            "comment": " Predefined icon for page-blank\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pageBlogpostIcon",
            "comment": " Predefined icon for page-blogpost\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pageDefaultIcon",
            "comment": " Predefined icon for page-default\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pageTemplateIcon",
            "comment": " Predefined icon for page-template\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pagesIcon",
            "comment": " Predefined icon for pages\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pagesLargeIcon",
            "comment": " Predefined icon for pages-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "pauseIcon",
            "comment": " Predefined icon for pause\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "priorityHighIcon",
            "comment": " Predefined icon for priority-high\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "priorityHighestIcon",
            "comment": " Predefined icon for priority-highest\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "priorityLowIcon",
            "comment": " Predefined icon for priority-low\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "priorityLowestIcon",
            "comment": " Predefined icon for priority-lowest\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "priorityMediumIcon",
            "comment": " Predefined icon for priority-medium\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "quoteIcon",
            "comment": " Predefined icon for quote\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "redoIcon",
            "comment": " Predefined icon for redo\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "refreshSmallIcon",
            "comment": " Predefined icon for refresh-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "removeIcon",
            "comment": " Predefined icon for remove\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "removeLabelIcon",
            "comment": " Predefined icon for remove-label\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "reopenIcon",
            "comment": " Predefined icon for reopen\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "reviewIcon",
            "comment": " Predefined icon for review\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "roadmapIcon",
            "comment": " Predefined icon for roadmap\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "rssIcon",
            "comment": " Predefined icon for rss\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "searchIcon",
            "comment": " Predefined icon for search\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "searchSmallIcon",
            "comment": " Predefined icon for search-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "shareIcon",
            "comment": " Predefined icon for share\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "shareListIcon",
            "comment": " Predefined icon for share-list\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "sidebarLinkIcon",
            "comment": " Predefined icon for sidebar-link\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "sidebarLinkLargeIcon",
            "comment": " Predefined icon for sidebar-link-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "small",
            "comment": " Small sized icon\n",
            "type": "Aui.Icons.Size"
          },
          {
            "name": "sourcetreeIcon",
            "comment": " Predefined icon for sourcetree\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "spaceDefaultIcon",
            "comment": " Predefined icon for space-default\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "spacePersonalIcon",
            "comment": " Predefined icon for space-personal\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "starIcon",
            "comment": " Predefined icon for star\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "successIcon",
            "comment": " Predefined icon for success\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "switchSmallIcon",
            "comment": " Predefined icon for switch-small\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableBgIcon",
            "comment": " Predefined icon for table-bg\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableColLeftIcon",
            "comment": " Predefined icon for table-col-left\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableColRemoveIcon",
            "comment": " Predefined icon for table-col-remove\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableColRightIcon",
            "comment": " Predefined icon for table-col-right\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableCopyRowIcon",
            "comment": " Predefined icon for table-copy-row\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableCutRowIcon",
            "comment": " Predefined icon for table-cut-row\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableHeaderColumnIcon",
            "comment": " Predefined icon for table-header-column\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableHeaderRowIcon",
            "comment": " Predefined icon for table-header-row\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableMergeIcon",
            "comment": " Predefined icon for table-merge\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableNoBgIcon",
            "comment": " Predefined icon for table-no-bg\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tablePasteRowIcon",
            "comment": " Predefined icon for table-paste-row\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableRemoveIcon",
            "comment": " Predefined icon for table-remove\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableRowDownIcon",
            "comment": " Predefined icon for table-row-down\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableRowRemoveIcon",
            "comment": " Predefined icon for table-row-remove\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableRowUpIcon",
            "comment": " Predefined icon for table-row-up\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "tableSplitIcon",
            "comment": " Predefined icon for table-split\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "teamcalsIcon",
            "comment": " Predefined icon for teamcals\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "teamcalsLargeIcon",
            "comment": " Predefined icon for teamcals-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "timeIcon",
            "comment": " Predefined icon for time\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "undoIcon",
            "comment": " Predefined icon for undo\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "unfocusIcon",
            "comment": " Predefined icon for unfocus\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "unlockedIcon",
            "comment": " Predefined icon for unlocked\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "unstarIcon",
            "comment": " Predefined icon for unstar\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "unwatchIcon",
            "comment": " Predefined icon for unwatch\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "upIcon",
            "comment": " Predefined icon for up\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "userIcon",
            "comment": " Predefined icon for user\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "userLargeIcon",
            "comment": " Predefined icon for user-large\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "userStatusIcon",
            "comment": " Predefined icon for user-status\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "versionIcon",
            "comment": " Predefined icon for version\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "viewCardIcon",
            "comment": " Predefined icon for view-card\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "viewIcon",
            "comment": " Predefined icon for view\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "viewListIcon",
            "comment": " Predefined icon for view-list\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "viewTableIcon",
            "comment": " Predefined icon for view-table\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "warningIcon",
            "comment": " Predefined icon for warning\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "watchIcon",
            "comment": " Predefined icon for watch\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "weblinkIcon",
            "comment": " Predefined icon for weblink\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "workboxEmptyIcon",
            "comment": " Predefined icon for workbox-empty\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "workboxIcon",
            "comment": " Predefined icon for workbox\n",
            "type": "Aui.Icons.Icon"
          },
          {
            "name": "workflowIcon",
            "comment": " Predefined icon for workflow\n",
            "type": "Aui.Icons.Icon"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Lozenge",
        "comment": " Functions to present AUI lozenges.\n\n# Presentation\n\n@docs lozenge\n\n# Types\n\n@docs Type, generic, success, error, current, complete, moved\n\n# Presense\n\n@docs Presense, normal,subtle\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Presense",
            "comment": " Presense style for a lozenge\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Type",
            "comment": " Types for a lozenge\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "complete",
            "comment": " Comlete type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "current",
            "comment": " Current type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "error",
            "comment": " Error type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "generic",
            "comment": " Generic type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "lozenge",
            "comment": " Create a lozenge with presense and type\n",
            "type": "Aui.Lozenge.Presense -> Aui.Lozenge.Type -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "moved",
            "comment": " Moved type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "normal",
            "comment": " Normal presence\n",
            "type": "Aui.Lozenge.Presense"
          },
          {
            "name": "subtle",
            "comment": " Subtle presence\n",
            "type": "Aui.Lozenge.Presense"
          },
          {
            "name": "success",
            "comment": " Success type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Labels",
        "comment": " Functions to present AUI labels.\n\n\n# Presentation\n\n@docs label\n\n# Actions\n\n@docs Action, navigate, trigger\n# Types\n\n@docs Config\n\n# Utility\n\n@docs baseConfig, onClick, onRemove\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " Actions that can be bound to a label\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Config",
            "comment": " Configuration to present a label.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Base configuration to show a label. No actions are bound by default.\n",
            "type": "Aui.Labels.Config a"
          },
          {
            "name": "label",
            "comment": " Show a label with a given configuration and content .\n\n    label (baseConfig\n            |> withNavigate \"http://elm-lang.org/\"\n            |> withRemove RemovedLabel)\n        [ text \"Please remove or click me!\" ]\n",
            "type": "Aui.Labels.Config a -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "navigate",
            "comment": " Action to navigate to an url\n",
            "type": "String -> Aui.Labels.Action a"
          },
          {
            "name": "onClick",
            "comment": " Bind action to click on label\n",
            "type": "Aui.Labels.Action a -> Aui.Labels.Config a -> Aui.Labels.Config a"
          },
          {
            "name": "onRemove",
            "comment": " Allow the label to be removed triggering the given message.\n",
            "type": "a -> Aui.Labels.Config a -> Aui.Labels.Config a"
          },
          {
            "name": "trigger",
            "comment": " Action to trigger an action on click\n",
            "type": "a -> Aui.Labels.Action a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Buttons",
        "comment": " Functions to present AUI buttons and groups.\n\n\n# Style\n\n@docs Style, primaryStyle, normalStyle, subtleStyle, lightStyle, linkStyle\n\n# Config\n\n@docs Config, baseConfig, disable, withStyle, withHref, withAction, withActive, withAdditionalClass, forceAnchor\n\n# Config\n\n# Presentation\n\n@docs button, buttonGroup\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration type for presenting a button.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Style",
            "comment": " Different styles available for a button.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " A configuration with sane defaults (no style, no anchor, enable, ect.).\n",
            "type": "Aui.Buttons.Config a"
          },
          {
            "name": "button",
            "comment": " Render an AUI button.\n\n    button (baseConfig |> withStyle Primary |> withHref \"http://elm-lang.org/\")\n        ButtonClicked\n        [ text \"Click me!\"]\n",
            "type": "Aui.Buttons.Config a -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "buttonGroup",
            "comment": " Button container that will add the correct classes to make a button group.\n\n    buttonGroup\n        [ button config Clicked1 [text \"First\"]\n        , button config Clicked2 [text \"Second\"]\n        , button config Clicked3 [text \"Third\"]\n        ]\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "disable",
            "comment": " Add the disabled state to a button.\n\n    baseConfig |> disable\n",
            "type": "Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "forceAnchor",
            "comment": " Forces the anchor tag to be used instead of the default button tag (only if no href is specified).\n\n    baseConfig |> forceAnchor\n",
            "type": "Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "lightStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "linkStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "normalStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "primaryStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "subtleStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "withAction",
            "comment": " Add an action to the buttons configuration.\n\n    baseConfig |> withAction MyAction\n",
            "type": "a -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withActive",
            "comment": " Make a button active or not active.\n\n    baseConfig |> withActive True\n",
            "type": "Bool -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withAdditionalClass",
            "comment": " Add additional classes to the button\n\n    baseConfig |> additionalClass \"my-button\"\n",
            "type": "String -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withHref",
            "comment": " Add a href to the buttons configuration.\n\n    baseConfig |> withHref \"http://elm-lang.org/\"\n",
            "type": "String -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withStyle",
            "comment": " Add a button style to the configuration.\n\n    baseConfig |> withStyle Subtle\n",
            "type": "Aui.Buttons.Style -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Avatars",
        "comment": " Functions to present AUI avatars.\n\n\n# Types\n\n@docs Config\n\n# Presentation\n\n@docs avatar\n\n# Utiltity\n\n@docs config, xsmall, small, medium, large, xlarge, xxlarge, xxxlarge, project\n",
        "aliases": [],
        "types": [
          {
            "name": "Config",
            "comment": " A type for rendering an avatar\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "avatar",
            "comment": " Function to convert a configuration record and an source url to an HTML element\n\n    avatar {size = Large, project = False}\n        \"http://myimage.net\"\n",
            "type": "Aui.Avatars.Config -> String -> Html.Html msg"
          },
          {
            "name": "config",
            "comment": " Default configuration for an avatar\n",
            "type": "Aui.Avatars.Config"
          },
          {
            "name": "large",
            "comment": " Set the configuration to render a large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "medium",
            "comment": " Set the configuration to render a medium avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "project",
            "comment": " Set the configuration to render as a project avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "small",
            "comment": " Set the configuration to render a small avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xlarge",
            "comment": " Set the configuration to render a extra large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xsmall",
            "comment": " Set the configuration to render an extra small avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xxlarge",
            "comment": " Set the configuration to render a extra-extra large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xxxlarge",
            "comment": " Set the configuration to render a extra-extra-extra large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Backdrop",
        "comment": " Functions to create a backdrop that is needed for several AUI Components.\n\n# Presentation\n\n@docs backdrop\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "backdrop",
            "comment": " Present a backdrop with a click handler.\n\n    backdrop 1000 ClickedBackdrop True\n",
            "type": "Int -> a -> Bool -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Aui.Badges",
        "comment": " Functions to present AUI badges.\n\n\n# Presentation\n\n@docs badge\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "badge",
            "comment": " Present a badge with a given content\n\n    badge \"Hello world!\"\n",
            "type": "String -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "terezka/elm-plot",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Plot",
        "comment": "\n This library aims to allow you to visualize a variety of graphs in\n an intuitve manner without comprimising flexibility regarding configuration.\n It is insprired by the elm-html api, using the `element attrs children` pattern.\n\n# Elements\n@docs Element, plot, line, area, xAxis, yAxis, Point, Style\n\n# Configuration\n\n## Meta configuration\n@docs MetaAttr, size, padding, plotStyle\n\n## Line configuration\n@docs LineAttr, lineStyle\n\n## Area configuration\n@docs AreaAttr, areaStyle\n\n## Axis configuration\n@docs AxisAttr, axisStyle, axisLineStyle\n\n### Tick values configuration\n@docs tickValues, tickDelta, tickRemoveZero\n\n### Tick view configuration\n@docs TickViewAttr, tickConfigView, tickConfigViewFunc, tickLength, tickWidth, tickStyle, tickCustomView, tickCustomViewIndexed\n\n### Label values configuration\n@docs labelValues, labelFilter\n\n### Label values configuration\n@docs LabelViewAttr, labelConfigView, labelConfigViewFunc, labelFormat, labelDisplace, labelStyle, labelCustomView, labelCustomViewIndexed\n\n## Grid configuration\n@docs verticalGrid, horizontalGrid, gridMirrorTicks, gridValues, gridStyle\n\n",
        "aliases": [
          {
            "name": "AreaAttr",
            "comment": " The type representing an area configuration.\n",
            "args": [],
            "type": "Plot.AreaConfig -> Plot.AreaConfig"
          },
          {
            "name": "AxisAttr",
            "comment": " The type representing an axis configuration.\n",
            "args": [
              "msg"
            ],
            "type": "Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "LabelViewAttr",
            "comment": " Type representing a label view configuration attribute.\n",
            "args": [],
            "type": "Plot.LabelViewConfig -> Plot.LabelViewConfig"
          },
          {
            "name": "LineAttr",
            "comment": " The type representing a line configuration.\n",
            "args": [],
            "type": "Plot.LineConfig -> Plot.LineConfig"
          },
          {
            "name": "MetaAttr",
            "comment": " The type representing an a meta configuration.\n",
            "args": [],
            "type": "Plot.MetaConfig -> Plot.MetaConfig"
          },
          {
            "name": "Point",
            "comment": " Convinience type to represent coordinates.\n",
            "args": [],
            "type": "( Float, Float )"
          },
          {
            "name": "Style",
            "comment": " Convinience type to represent style.\n",
            "args": [],
            "type": "List ( String, String )"
          },
          {
            "name": "TickViewAttr",
            "comment": " Type representing a tick view configuration attribute.\n",
            "args": [],
            "type": "Plot.TickViewConfig -> Plot.TickViewConfig"
          }
        ],
        "types": [
          {
            "name": "Element",
            "comment": " Represents child element of the plot.\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "area",
            "comment": " This returns an area element resulting in an area serie rendered in your plot.\n\n    main =\n        plot [] [ area []  [ ( 0, -2 ), ( 2, 0 ), ( 3, 1 ) ] ]\n",
            "type": "List Plot.AreaAttr -> List Plot.Point -> Plot.Element msg"
          },
          {
            "name": "areaStyle",
            "comment": " Add styles to your area serie.\n\n    main =\n        plot\n            []\n            [ area\n                [ areaStyle\n                    [ ( \"fill\", \"deeppink\" )\n                    , ( \"stroke\", \"deeppink\" )\n                    , ( \"opacity\", \"0.5\" ) ]\n                    ]\n                ]\n                areaDataPoints\n            ]\n",
            "type": "Plot.Style -> Plot.AreaConfig -> Plot.AreaConfig"
          },
          {
            "name": "axisLineStyle",
            "comment": " Add styling to the axis line.\n\n    main =\n        plot\n            []\n            [ xAxis [ axisLineStyle [ ( \"stroke\", \"blue\" ) ] ] ]\n\n Default: `[]`\n",
            "type": "Plot.Style -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "axisStyle",
            "comment": " Add style to the container holding your axis. Most properties are\n conveniently inherited by your ticks and labels.\n\n    main =\n        plot\n            []\n            [ xAxis [ axisStyle [ ( \"stroke\", \"red\" ) ] ] ]\n\n Default: `[]`\n",
            "type": "Plot.Style -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "gridMirrorTicks",
            "comment": " Adds grid lines where the ticks on the corresponding axis are.\n\n    main =\n        plot\n            []\n            [ verticalGrid [ gridMirrorTicks ]\n            , xAxis []\n            ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `gridValues` attribute, then this attribute will have no effect.\n",
            "type": "Plot.GridConfig -> Plot.GridConfig"
          },
          {
            "name": "gridStyle",
            "comment": " Specify styles for the gridlines.\n\n    plot\n        []\n        [ verticalGrid\n            [ gridMirrorTicks\n            , gridStyle myGridStyles\n            ]\n        ]\n\n Remember that if you do not specify either `gridMirrorTicks`\n or `gridValues`, then we will default to not showing any grid lines.\n",
            "type": "Plot.Style -> Plot.GridConfig -> Plot.GridConfig"
          },
          {
            "name": "gridValues",
            "comment": " Specify a list of ticks where you want grid lines drawn.\n\n    plot [] [ verticalGrid [ gridValues [ 1, 2, 4, 8 ] ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `gridMirrorTicks` attribute, then this attribute will have no effect.\n",
            "type": "List Float -> Plot.GridConfig -> Plot.GridConfig"
          },
          {
            "name": "horizontalGrid",
            "comment": " This returns an grid element resulting in vertical grid lines being rendered in your plot.\n\n    main =\n        plot [] [ horizontalGrid [] ]\n",
            "type": "List Plot.GridAttr -> Plot.Element msg"
          },
          {
            "name": "labelConfigView",
            "comment": " Configure the label view specifying a list of label view attributes.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ labelConfigView\n                    [ labelFormat (\\t -> toString t ++ \" s\") ]\n                ]\n            ]\n",
            "type": "List Plot.LabelViewAttr -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "labelConfigViewFunc",
            "comment": " Configure the label view specifying a function returning a list of label view attributes.\n The function will be passed:\n 1) An integer representing the amount of ticks away from the origin, the current tick is.\n 2) A float value represeting the value of the tick.\n\n    toLabelConfig : Int -> Float -> List TickViewAttr\n    toLabelConfig index tick =\n        if isOdd index then\n            [ labelFormat (\\t -> toString t ++ \" s\") ]\n        else\n            [ labelFormat (always \"\") ]\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ labelConfigViewFunc toLabelConfig ]\n            ]\n",
            "type": "Plot.LabelAttrFunc -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "labelCustomView",
            "comment": " Add a custom view for rendering your label.\n\n    viewLabel : Float -> Svg.Svg a\n    viewLabel tick =\n        text_ mySpecialAttributes mySpecialLabelDisplay\n\n    main =\n        plot\n            []\n            [ xAxis [ labelCustomView viewLabel ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `labelFormat` attribute, then this attribute will have no effect.\n",
            "type": "(Float -> Svg.Svg msg) -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "labelCustomViewIndexed",
            "comment": " Same as `labelCustomView`, except this view is also passed the value being\n the amount of ticks the current tick is away from zero.\n\n    viewLabel : Int -> Float -> Svg.Svg a\n    viewLabel fromZero tick =\n        let\n            attrs =\n                if isOdd fromZero then oddAttrs\n                else evenAttrs\n        in\n            text_ attrs labelHtml\n\n    main =\n        plot\n            []\n            [ xAxis [ labelCustomViewIndexed viewLabel ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `labelFormat` attribute, then this attribute will have no effect.\n",
            "type": "(Int -> Float -> Svg.Svg msg) -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "labelDisplace",
            "comment": " Move the position of the label.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ labelConfigView [ labelDisplace ( 0, 27 ) ] ]\n            ]\n",
            "type": "( Int, Int ) -> Plot.LabelViewConfig -> Plot.LabelViewConfig"
          },
          {
            "name": "labelFilter",
            "comment": " Add a filter determining which of the ticks are added a label. The first argument passed\n to the filter is a number describing how many ticks a way the current tick is. The second argument\n is the value of the tick.\n\n    onlyEvenTicks : Int -> Float -> Bool\n    onlyEvenTicks index value =\n        rem 2 index == 0\n\n    main =\n        plot\n            []\n            [ xAxis [ labelValues onlyEvenTicks ] ]\n\n Default: `(\\a b -> True)`\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `labelValues` attribute, then this attribute will have no effect.\n",
            "type": "(Int -> Float -> Bool) -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "labelFormat",
            "comment": " Format the label based on its value.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ labelConfigView\n                    [ labelFormat (\\l -> toString l ++ \" DKK\") ]\n                ]\n            ]\n",
            "type": "(Float -> String) -> Plot.LabelViewConfig -> Plot.LabelViewConfig"
          },
          {
            "name": "labelStyle",
            "comment": " Move the position of the label.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ labelConfigView\n                    [ labelStyle [ (\"stroke\", \"blue\" ) ] ]\n                ]\n            ]\n",
            "type": "Plot.Style -> Plot.LabelViewConfig -> Plot.LabelViewConfig"
          },
          {
            "name": "labelValues",
            "comment": " Add a list of values where labels will be added.\n\n    main =\n        plot\n            []\n            [ xAxis [ labelValues [ 20, 40, 60 ] ] ]\n",
            "type": "List Float -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "line",
            "comment": " This returns a line element resulting in an line serie rendered in your plot.\n\n    main =\n        plot [] [ line [] [ ( 0, 1 ), ( 2, 2 ), ( 3, 4 ) ] ]\n",
            "type": "List Plot.LineAttr -> List Plot.Point -> Plot.Element msg"
          },
          {
            "name": "lineStyle",
            "comment": " Add styles to your line serie.\n\n    main =\n        plot\n            []\n            [ line\n                [ lineStyle [ ( \"fill\", \"deeppink\" ) ] ]\n                lineDataPoints\n            ]\n",
            "type": "Plot.Style -> Plot.LineConfig -> Plot.LineConfig"
          },
          {
            "name": "padding",
            "comment": " Add padding to your plot, meaning extra space below\n and above the lowest and highest point in your plot.\n The unit is pixels.\n\n Default: `( 0, 0 )`\n",
            "type": "( Int, Int ) -> Plot.MetaConfig -> Plot.MetaConfig"
          },
          {
            "name": "plot",
            "comment": " This is the function processing your entire plot configuration.\n Pass your meta attributes and plot elements to this function and\n a svg plot will be returned!\n",
            "type": "List Plot.MetaAttr -> List (Plot.Element msg) -> Svg.Svg msg"
          },
          {
            "name": "plotStyle",
            "comment": " Add styles to the svg element.\n\n Default: `[ ( \"padding\", \"30px\" ), ( \"stroke\", \"#000\" ) ]`\n",
            "type": "Plot.Style -> Plot.MetaConfig -> Plot.MetaConfig"
          },
          {
            "name": "size",
            "comment": " Specify the size of your plot in pixels.\n\n Default: `( 800, 500 )`\n",
            "type": "( Int, Int ) -> Plot.MetaConfig -> Plot.MetaConfig"
          },
          {
            "name": "tickConfigView",
            "comment": " Defines how the tick will be displayed by specifying a list of tick view attributes.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ tickConfigView\n                    [ tickLength 10\n                    , tickWidth 2\n                    , tickStyle [ ( \"stroke\", \"red\" ) ]\n                    ]\n                ]\n            ]\n\n If you do not define another view configuration,\n the default will be `[ tickLength 7, tickWidth 1, tickStyle [] ]`\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `tickCustomView`, `tickConfigViewFunc` or a `tickCustomViewIndexed` attribute,\n then this attribute will have no effect.\n",
            "type": "List Plot.TickViewAttr -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickConfigViewFunc",
            "comment": " Defines how the tick will be displayed by specifying a list of tick view attributes.\n\n    toTickConfig : Int -> Float -> List TickViewAttr\n    toTickConfig index tick =\n        if isOdd index then\n            [ tickLength 7\n            , tickStyle [ ( \"stroke\", \"#e4e3e3\" ) ]\n            ]\n        else\n            [ tickLength 10\n            , tickStyle [ ( \"stroke\", \"#b9b9b9\" ) ]\n            ]\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ tickConfigViewFunc toTickConfig ]\n            ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `tickConfigView`, `tickCustomView` or a `tickCustomViewIndexed` attribute,\n then this attribute will have no effect.\n",
            "type": "Plot.TickAttrFunc -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickCustomView",
            "comment": " Defines how the tick will be displayed by specifying a function which returns your tick html.\n\n    viewTick : Float -> Svg.Svg a\n    viewTick tick =\n        text_\n            [ transform (\"translate(-5, 10)\") ]\n            [ tspan [] [ text \"✨\" ] ]\n\n    main =\n        plot [] [ xAxis [ tickCustomView viewTick ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `tickConfigView` or a `tickCustomViewIndexed` attribute, then this attribute will have no effect.\n",
            "type": "(Float -> Svg.Svg msg) -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickCustomViewIndexed",
            "comment": " Same as `tickCustomConfig`, but the functions is also passed a value\n which is how many ticks away the current tick is from the zero tick.\n\n    viewTick : Int -> Float -> Svg.Svg a\n    viewTick index tick =\n        text_\n            [ transform (\"translate(-5, 10)\") ]\n            [ tspan\n                []\n                [ text (if isOdd index then \"🌟\" else \"⭐\") ]\n            ]\n\n    main =\n        plot [] [ xAxis [ tickCustomViewIndexed viewTick ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `tickConfigView` or a `tickCustomView` attribute, then this attribute will have no effect.\n",
            "type": "(Int -> Float -> Svg.Svg msg) -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickDelta",
            "comment": " Defines what ticks will be shown on the axis by specifying the delta between the ticks.\n The delta will be added from zero.\n\n    main =\n        plot\n            []\n            [ xAxis [ tickDelta 4 ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `tickValues` attribute, then this attribute will have no effect.\n",
            "type": "Float -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickLength",
            "comment": " Set the length of the tick.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ tickConfigView [ tickLength 10 ] ]\n            ]\n",
            "type": "Int -> Plot.TickViewConfig -> Plot.TickViewConfig"
          },
          {
            "name": "tickRemoveZero",
            "comment": " Remove tick at origin. Useful when two axis' are crossing and you do not\n want the origin the be cluttered with labels.\n\n    main =\n        plot\n            []\n            [ xAxis [ tickRemoveZero ] ]\n",
            "type": "Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickStyle",
            "comment": " Sets the style of the tick\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ tickConfigView\n                    [ tickStyle [ ( \"stroke\", \"blue\" ) ] ]\n                ]\n            ]\n",
            "type": "Plot.Style -> Plot.TickViewConfig -> Plot.TickViewConfig"
          },
          {
            "name": "tickValues",
            "comment": " Defines what ticks will be shown on the axis by specifying a list of values.\n\n    main =\n        plot\n            []\n            [ xAxis [ tickValues [ 0, 1, 2, 4, 8 ] ] ]\n\n **Note:** If in the list of axis attributes, this attribute is followed by a\n `tickDelta` attribute, then this attribute will have no effect.\n",
            "type": "List Float -> Plot.AxisConfig msg -> Plot.AxisConfig msg"
          },
          {
            "name": "tickWidth",
            "comment": " Set the width of the tick.\n\n    main =\n        plot\n            []\n            [ xAxis\n                [ tickConfigView [ tickWidth 2 ] ]\n            ]\n",
            "type": "Int -> Plot.TickViewConfig -> Plot.TickViewConfig"
          },
          {
            "name": "verticalGrid",
            "comment": " This returns an axis element resulting in horizontal grid lines being rendered in your plot.\n\n    main =\n        plot [] [ verticalGrid [] ]\n",
            "type": "List Plot.GridAttr -> Plot.Element msg"
          },
          {
            "name": "xAxis",
            "comment": " This returns an axis element resulting in an x-axis being rendered in your plot.\n\n    main =\n        plot [] [ xAxis [] ]\n",
            "type": "List (Plot.AxisAttr msg) -> Plot.Element msg"
          },
          {
            "name": "yAxis",
            "comment": " This returns an axis element resulting in an y-axis being rendered in your plot.\n\n    main =\n        plot [] [ yAxis [] ]\n",
            "type": "List (Plot.AxisAttr msg) -> Plot.Element msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "tesk9/elm-html-textup",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Main",
        "comment": " A library for going from strings to fancily-formatted Html.\n\n@docs Config, TextUpString, toHtml\n\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " `Config` is for defining whatever style rules you want. The only\n    requirement is that there must be a default `plain` style.\n\n```\nconfig : Config { attn1 : Css.Mixin, attn2 : Css.Mixin }\nconfig =\n    { plain = Css.fontFamily Css.cursive\n    , attn1 = Css.mixin [ Css.fontFamily Css.fantasy, Css.textTransform Css.uppercase, Css.color (Css.hex \"fff987\") ]\n    , attn2 = Css.mixin [ Css.fontFamily Css.monospace, Css.textDecoration Css.overline ]\n    }\n```\n",
            "args": [
              "a"
            ],
            "type": "{ a | plain : Css.Mixin }"
          },
          {
            "name": "TextUpString",
            "comment": " `TextUpString` specifies how a specific string should be formatted.\n\n```\nconfig : Config {}\nconfig =\n    { plain = Css.fontFamily Css.cursive }\n\n\ntextUpString : TextUpString {}\ntextUpString =\n    ( \"I'm a plain string.\", .plain )\n```\n",
            "args": [
              "a"
            ],
            "type": "( String, Main.Config a -> Css.Mixin )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "toHtml",
            "comment": " `toHtml` produces a span whose inner spans are formatted with inline styles.\n\n```\nconfig : Config { attn1 : Css.Mixin, attn2 : Css.Mixin }\nconfig =\n    { plain = Css.fontFamily Css.cursive\n    , attn1 = Css.mixin [ Css.fontFamily Css.fantasy, Css.textTransform Css.uppercase, Css.color (Css.hex \"fff987\") ]\n    , attn2 = Css.mixin [ Css.fontFamily Css.monospace, Css.textDecoration Css.overline ]\n    }\n\n\nviewHtml : Html.Html msg\nviewHtml =\n   [ ( \"I'm a plain string.\", .plain )\n   , ( \"....here are some more thoughts....\", .attn1 )\n   , ( \"Attention 2!!!\", .attn2 )\n   , ( \"blah blah blah\", .attn1 )\n   ]\n       |> toHtml config\n```\n",
            "type": "Main.Config a -> List (Main.TextUpString a) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "thomasloh/elm-phone",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Phone",
        "comment": " A library for converting plain number to desired country's phone format.\n    Supports ISO2 codes for 232 countries/\n\n@docs format\n@docs getAllCountries\n@docs getCountryByISO2\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Formats a phone number by country (in form of iso2)\n\nFor example:\n\n    import Phone\n\n    output = Phone.format \"us\" \"2345678912\"\n\n    --> output == \"+1 (234) 567-8912\"\n\n    -----------------------------------------------\n\n    import Phone\n\n    output = Phone.format \"gb\" \"2345678912\"\n\n    --> output == \"+44 2345 678912\"\n\n",
            "type": "String -> String -> String"
          },
          {
            "name": "getAllCountries",
            "comment": " Get all countries\n",
            "type": "List ( String, String, String, Maybe.Maybe String )"
          },
          {
            "name": "getCountryByISO2",
            "comment": " Get country tuple by ISO2\n",
            "type": "String -> Maybe.Maybe ( String, String, String, Maybe.Maybe String )"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "toastal/either",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Either",
        "comment": "\nA generic structure for a type with two possibilities: a `Left a` or\na `Right b`.\n\n\n# Definition\n@docs Either\n\n# Mapping (Functor)\n@docs map, map2, map3, map4, mapLeft, mapRight, mapBoth\n\n# Applying (Applicative)\n@docs singleton, andMap, andMapLeft, andMapRight\n\n\n# Folding (Foldable)\n@docs length, foldr\n\n# Chaining (Monad)\n@docs andThen, andThenLeft, andThenRight\n\n# List Helpers\n@docs lefts, rights, partition\n\n# Maybe Helpers\n@docs toMaybe, leftToMaybe, rightToMaybe, fromMaybe, leftFromMaybe, rightFromMaybe\n\n# Result Helpers\n@docs toResult, fromResult\n\n# Rest of the Helpers\n@docs isLeft, isRight, fromLeft, fromRight, withDefault, unpack, unwrap, swap\n",
        "aliases": [],
        "types": [
          {
            "name": "Either",
            "comment": " ",
            "args": [
              "a",
              "b"
            ],
            "cases": [
              [
                "Left",
                [
                  "a"
                ]
              ],
              [
                "Right",
                [
                  "b"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Apply the function that is inside `Either` to a value that is inside\n`Either`. Return the result inside `Either`. If one of the `Either`\narguments is `Left x`, return `Left x`. Also known as `apply`.\n\n    Left \"Hello\" |> andMap (Left \"World\")  == Left \"Hello\"\n    Left \"Hello\" |> andMap (Right 2)       == Left \"Hello\"\n    Right ((+) 1) |> andMap (Left \"World\") == Left \"World\"\n    Right ((+) 1) |> andMap (Right 2)      == Right 3\n",
            "type": "Either.Either x a -> Either.Either x (a -> b) -> Either.Either x b"
          },
          {
            "name": "andMapLeft",
            "comment": " Apply the function that is inside `Either` to a value that is inside\n`Either`. Return the result inside `Either`. If one of the `Either`\narguments is `Right x`, return `Right x`. Also known as `apply`.\n\n    Left (flip (++) \"!!\" ) |> andMap Left \"Hello\" == Left \"Hello!!\"\n    Left (flip (++) \"!!\" ) |> andMap Right 2      == Right 2\n    Right 99 |> andMap (Left \"World\")             == Right 99\n    Right 99 |> andMap (Right 2)                  == Right 99\n",
            "type": "Either.Either a x -> Either.Either (a -> b) x -> Either.Either b x"
          },
          {
            "name": "andMapRight",
            "comment": " Alias for `andMap`.\n",
            "type": "Either.Either x a -> Either.Either x (a -> b) -> Either.Either x b"
          },
          {
            "name": "andThen",
            "comment": " Chain together in many computations that will stop computing if\na chain is on a `Left`. Also known as `bind`.\n\n    Left \"Hello\" |> andThen ((+) 1 >> Right) == Left \"Hello\"\n    Right 2 |> andThen ((+) 1 >> Right)      == Right 3\n",
            "type": "(a -> Either.Either x b) -> Either.Either x a -> Either.Either x b"
          },
          {
            "name": "andThenLeft",
            "comment": " Chain together in many computations that will stop computing if\na chain is on a `Right`. Also known as `bind`.\n\n    Left \"Hello\" |> andThen (flip (++) \"!!\" >> Left) == Left \"Hello!!\"\n    Right 2 |> andThen (flip (++) \"!!\" >> Left)      == Right 2\n",
            "type": "(a -> Either.Either b x) -> Either.Either a x -> Either.Either b x"
          },
          {
            "name": "andThenRight",
            "comment": " Alias for `andThen`.\n",
            "type": "(a -> Either.Either x b) -> Either.Either x a -> Either.Either x b"
          },
          {
            "name": "foldr",
            "comment": " Folds an `Either` over a function with an accumulator. If\nit is a `Right` the function is applied with the accumulator.\nIf it is a `Left` only the accumulator is returned.\n\n    foldr (*) 2 <| Left 3  == 2\n    foldr (*) 2 <| Right 3 == 6\n",
            "type": "(a -> b -> b) -> b -> Either.Either a a -> b"
          },
          {
            "name": "fromLeft",
            "comment": " Extract left value or a default.\n\n    fromLeft \"World\" <| Left \"Hello\" == \"Hello\"\n    fromLeft \"World\" <| Right 2      == \"World\"\n",
            "type": "a -> Either.Either a b -> a"
          },
          {
            "name": "fromMaybe",
            "comment": " Convert from a `Maybe` to `Either` with a default value\nfor `Left` for `Nothing`.\n\n    fromMaybe \"Hello\" <| Just 2 == Right 2\n    fromMaybe \"Hello\" Nothing   == Left \"Hello\"\n",
            "type": "a -> Maybe.Maybe b -> Either.Either a b"
          },
          {
            "name": "fromResult",
            "comment": " Convert from `Result` to `Either`.\n\n    fromResult <| Err \"World\" == Left \"World\"\n    fromResult <| Ok 2        == Right 2\n",
            "type": "Result.Result a b -> Either.Either a b"
          },
          {
            "name": "fromRight",
            "comment": " Extract right value or a default.\n\n    fromRight 3 <| Left \"Hello\" == 3\n    fromRight 3 <| Right 2      == 2\n",
            "type": "b -> Either.Either a b -> b"
          },
          {
            "name": "isLeft",
            "comment": " Returns `True` if argument is `Left _`\n\n    isLeft <| Left \"World\" == True\n    isLeft <| Right 2      == False\n",
            "type": "Either.Either a b -> Bool"
          },
          {
            "name": "isRight",
            "comment": " Returns `True` if argument is `Right _`\n\n    isRight <| Left \"World\" == False\n    isRight <| Right 2      == True\n",
            "type": "Either.Either a b -> Bool"
          },
          {
            "name": "leftFromMaybe",
            "comment": " Convert from a `Maybe` to `Either` with a default value\nfor `Right` for `Nothing`.\n\n    leftFromMaybe 3 <| Just \"World\" == Left \"World\"\n    leftFromMaybe 3 Nothing         == Right 3\n",
            "type": "b -> Maybe.Maybe a -> Either.Either a b"
          },
          {
            "name": "leftToMaybe",
            "comment": " `Maybe` get the `Left` side of an `Either`.\n\n    leftToMaybe <| Left \"World\" == Just \"World\"\n    leftToMaybe <| Right 2 == Nothing\n",
            "type": "Either.Either a x -> Maybe.Maybe a"
          },
          {
            "name": "lefts",
            "comment": " Converts a `List` of `Either a x` to a List of `a`.\n\n    lefts [ Left \"Hello\", Right 2 ] == [ \"Hello\" ]\n",
            "type": "List (Either.Either a x) -> List a"
          },
          {
            "name": "length",
            "comment": " Returns the length of an `Either`. This happens to be `0` for a\n`Left` and `1` for a `Right`.\n\n    length <| Left 2         == 0\n    length <| Right \"Sharks\" == 1\n",
            "type": "Either.Either a b -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to an `Either`. If the argument is `Right`, it\nwill be converted.  If the argument is an `Left`, the same left value\nwill propogate through.\n\n    map ((+) 1) <| Left \"Hello\" == Left \"Hello\"\n    map ((+) 1) <| Right 2      == Right 3\n",
            "type": "(a -> b) -> Either.Either x a -> Either.Either x b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two eithers, if both arguments are `Right`.\nIf not, the first argument which is a `Left` will propagate through.\nAlso known as `liftA2`.\n\n    map2 (+) (Left \"Hello\") <| Left \"World\" == Left \"Hello\"\n    map2 (+) (Left \"Hello\") <| Right 3      == Left \"Hello\"\n    map2 (+) (Right 2) <| Left \"World\"      == Left \"World\"\n    map2 (+) (Right 2) <| Right 3           == Right 5\n",
            "type": "(a -> b -> c) -> Either.Either x a -> Either.Either x b -> Either.Either x c"
          },
          {
            "name": "map3",
            "comment": " Like `map2`, but with 3 eithers. Also known as `liftA3`\n",
            "type": "(a -> b -> c -> d) -> Either.Either x a -> Either.Either x b -> Either.Either x c -> Either.Either x d"
          },
          {
            "name": "map4",
            "comment": " Like `map2`, but with 4 eithers. Also known as `liftA4`\n",
            "type": "(a -> b -> c -> d -> e) -> Either.Either x a -> Either.Either x b -> Either.Either x c -> Either.Either x d -> Either.Either x e"
          },
          {
            "name": "mapBoth",
            "comment": " Apply the first argument function to a `Left` and the second\nargument function to a `Right` of an `Either`.\n\n    mapBoth (flip (++) \"!!\") ((+) 1) <| Left \"Hello\" == Left \"Hello!!\"\n    mapBoth (flip (++) \"!!\") ((+) 1) <| Right 2      == Right 3\n",
            "type": "(a -> b) -> (c -> d) -> Either.Either a c -> Either.Either b d"
          },
          {
            "name": "mapLeft",
            "comment": " Apply a function to the `Left` of an `Either`.\n\n    mapLeft ((+) 1) <| Left 2  == Left 3\n    mapLeft ((+) 1) <| Right 2 == Right 2\n",
            "type": "(a -> b) -> Either.Either a x -> Either.Either b x"
          },
          {
            "name": "mapRight",
            "comment": " Alias for `map`.\n",
            "type": "(a -> b) -> Either.Either x a -> Either.Either x b"
          },
          {
            "name": "partition",
            "comment": " Converts a `List` of `Either a b`, into a tuple2 where\nthe first value is a `List a` and the second is `List b`.\n\n    partition [ Left \"Hello\", Right 2 ] == ( [ \"Hello\" ], [ 2 ] )\n",
            "type": "List (Either.Either a b) -> ( List a, List b )"
          },
          {
            "name": "rightFromMaybe",
            "comment": " Alias for `fromMaybe`.\n",
            "type": "a -> Maybe.Maybe b -> Either.Either a b"
          },
          {
            "name": "rightToMaybe",
            "comment": " Alias for `toMaybe`.\n",
            "type": "Either.Either x b -> Maybe.Maybe b"
          },
          {
            "name": "rights",
            "comment": " Converts a `List` of `Either x b` to a List of `b`.\n\n    rights [ Left \"Hello\", Right 2 ] == [ 2 ]\n",
            "type": "List (Either.Either x b) -> List b"
          },
          {
            "name": "singleton",
            "comment": " Create a `singleton` from a value to an `Either` with a `Right`\nof the same type.  Also known as `pure`. Use the `Left` constructor\nfor a singleton of the `Left` variety.\n\n    singleton 2 == Right 2\n",
            "type": "b -> Either.Either x b"
          },
          {
            "name": "swap",
            "comment": " Swap the `Left` and `Right` sides of an `Either`.\n\n    swap <| Left \"World\" == Right \"World\"\n    swap <| Right 2      == Left 2\n",
            "type": "Either.Either a b -> Either.Either b a"
          },
          {
            "name": "toMaybe",
            "comment": " `Maybe` get the `Right` side of an `Either`.\n\n    toMaybe <| Left \"World\" == Nothing\n    toMaybe <| Right 2      == Just 2\n",
            "type": "Either.Either x b -> Maybe.Maybe b"
          },
          {
            "name": "toResult",
            "comment": " Convert from `Either` to `Result`.\n\n    toResult <| Left \"World\" == Err \"World\"\n    toResult <| Right 2      == Ok 2\n",
            "type": "Either.Either a b -> Result.Result a b"
          },
          {
            "name": "unpack",
            "comment": " Given a function for both `Left` and `Right` to to type a generic\ntype `c`, collapse down the `Either` to a value of that type.\n\n    unpack identity toString <| Left \"World\" == \"World\"\n    unpack identity toString <| Right 2      == \"2\"\n",
            "type": "(a -> c) -> (b -> c) -> Either.Either a b -> c"
          },
          {
            "name": "unwrap",
            "comment": " Apply a function to `Right` value. If argument was a `Left` use the\ndefault value. Equivalent to `Either.map >> Either.fromRight`.\n\n    unwrap 99 ((+) 1) <| Left \"Hello\" == 99\n    unwrap 99 ((+) 1) <| Right 2      == 3\n",
            "type": "c -> (b -> c) -> Either.Either x b -> c"
          },
          {
            "name": "withDefault",
            "comment": " Alias for `fromRight`.\n",
            "type": "b -> Either.Either a b -> b"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "toastal/trinary",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Trinary",
        "comment": "\nTrinary logic using `T`, `M`, `F` for `True`, `Maybe`, `False`.\nInfixes are prefixed with `#` because `Shift + 3`.\n\n# Definition\n@docs Trit\n\n# Logic\n@docs not, and, or, implies, eq\n\n# Infixes\n@docs (#!), (#&), (#|), (#>), (#=)\n",
        "aliases": [],
        "types": [
          {
            "name": "Trit",
            "comment": " Trinary logic has three truth values. The first letter is used\nbecause `True` and `False` are reserved and `Maybe` is a default\nimport.\n",
            "args": [],
            "cases": [
              [
                "T",
                []
              ],
              [
                "M",
                []
              ],
              [
                "F",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "#!",
            "comment": " Infix for `not`\n",
            "type": "Trinary.Trit -> Trinary.Trit",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": "#&",
            "comment": " Infix for `and`\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": "#=",
            "comment": " Infix for `eq`\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": "#>",
            "comment": " Infix for `implies`\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": "#|",
            "comment": " Infix for `or`\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": "and",
            "comment": "\n```\n| ∧     | True  | Maybe | False |\n| ----- | ----- | ----- | ----- |\n| True  | True  | Maybe | False |\n| Maybe | Maybe | Maybe | False |\n| False | False | False | False |\n```\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit"
          },
          {
            "name": "eq",
            "comment": "\n```\n| ≡     | True  | Maybe | False |\n| ----- | ----- | ----- | ----- |\n| True  | True  | Maybe | False |\n| Maybe | Maybe | Maybe | Maybe |\n| False | False | Maybe | True  |\n```\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit"
          },
          {
            "name": "implies",
            "comment": "\n```\n| ⊃     | True | Maybe | False |\n|------ | ---- | ----- |------ |\n| True  | True | Maybe | False |\n| Maybe | True | Maybe | Maybe |\n| False | True | True  | True  |\n```\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit"
          },
          {
            "name": "not",
            "comment": "\n```\n| ¬             |\n| ------------- |\n| True  | False |\n| Maybe | Maybe |\n| False | True  |\n```\n",
            "type": "Trinary.Trit -> Trinary.Trit"
          },
          {
            "name": "or",
            "comment": "\n```\n| ∨     | True | Maybe | False |\n| ----- | ---- | ----- | ----- |\n| True  | True | True  | True  |\n| Maybe | True | Maybe | Maybe |\n| False | True | Maybe | False |\n```\n",
            "type": "Trinary.Trit -> Trinary.Trit -> Trinary.Trit"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  },
  {
    "name": "tortus/elm-array-2d",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Array2D.Json",
        "comment": " JSON decoding/encoding utilities for Array2D.\n\n# Decoding 2D arrays\n@docs decoder\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " JSON decoder to turn nested arrays into an Array2D.\n\nIf the rows are jagged, all rows will be truncated to the\nsame length as the shortest row!\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Array2D.Array2D a)"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      },
      {
        "name": "Array2D",
        "comment": " Implements 2D array using nested Arrays. Useful for implementing data grids,\nas it specifically provides row and column operations.\n\nCells are accessed by row, then column. Otherwise, it works very similarly to the\nArray class. The documentation examples usually omit converting Lists to Arrays\nfor brevity.\n\nArray2D's can be constructed from an Array or List of rows, where each\nrow is an Array or List of cells.\n\n    Array2D.fromList\n      [ [\"Row 1-Col 1\", \"Row 1-Col 2\"]\n      , [\"Row 2-Col 1\", \"Row 2-Col 2\"]\n      ]\n\nIf the nested arrays happen to be jagged, all rows will be truncated to the\nlength of the smallest row! Be careful!\n\n    Array2D.fromList\n      [ [0, 1]\n      , [0, 1, 2]\n      ]\n    -- Becomes:\n      [ [0, 1]\n      , [0, 1]\n      ]\n\n\n## Drawbacks and caveats\n\nMost examples of nested Elm components use Lists of elements with a\nunique, constant ID. This allows messages to always be routed to the correct\nsub-component, even if components are removed or added. If you use the index\nof the sub-component instead and the sub-component triggers a Task that takes\ntime to complete during which the Array is modified, the completion message\nmay be routed to the wrong sub-component.\n\nThis is hypothetical though. If your sub-components don't trigger long tasks\nor you don't allow rows or columns to be manipulated until the task returns,\nyou should be fine. I think!\n\n\n@docs Array2D\n\n# Initialization\n@docs empty, fromArray, fromList, repeat\n\n# Getting info\n@docs rows, columns, isEmpty\n\n# Fetching/updating individual cells\n@docs get, set\n\n# Adding/removing rows\n@docs getRow, appendRow, deleteRow\n\n# Adding/removing columns\n@docs getColumn, appendColumn, deleteColumn\n\n# Mapping cell data\n@docs map, indexedMap\n",
        "aliases": [
          {
            "name": "Array2D",
            "comment": " Base Array2D type\n",
            "args": [
              "a"
            ],
            "type": "{ data : Array.Array (Array.Array a), columns : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "appendColumn",
            "comment": " Append a column. Filler will be used if the column length\nis less than the number of rows in the Array2D. If it is longer,\nit will be truncated.\n\n    appendColumn [2, 2] [[1], [1]] == [[1, 2], [1,2]]\n",
            "type": "Array.Array a -> a -> Array2D.Array2D a -> Array2D.Array2D a"
          },
          {
            "name": "appendRow",
            "comment": " Append a row. If the row is too long, it will be truncated,\ntoo short and it will be expanded with filler elements.\n\n    appendRow [3, 4] [[1, 2]] == [[1, 2], [3, 4]]\n",
            "type": "Array.Array a -> a -> Array2D.Array2D a -> Array2D.Array2D a"
          },
          {
            "name": "columns",
            "comment": " Get the number of columns in an Array2D\n\n    columns [[1, 2, 3], [4, 5, 6]] == 3\n",
            "type": "Array2D.Array2D a -> Int"
          },
          {
            "name": "deleteColumn",
            "comment": " Delete a column. If the index is invalid, nothing will happen.\n",
            "type": "Int -> Array2D.Array2D a -> Array2D.Array2D a"
          },
          {
            "name": "deleteRow",
            "comment": " Delete a row\n",
            "type": "Int -> Array2D.Array2D a -> Array2D.Array2D a"
          },
          {
            "name": "empty",
            "comment": " Create an empty Array2D\n",
            "type": "Array2D.Array2D a"
          },
          {
            "name": "fromArray",
            "comment": " Create an Array2D from an Array of Arrays. All rows will\nbe truncated to the length of the shortest row.\n\n    let\n      row1 = Array.fromList [1, 2]\n      row2 = Array.fromList [2, 3]\n    in\n      fromArray (Array.fromList [row1, row2])\n",
            "type": "Array.Array (Array.Array a) -> Array2D.Array2D a"
          },
          {
            "name": "fromList",
            "comment": " Create an Array2D from a List of Lists.\n\n    fromList [[1, 2, 3], [4, 5, 6]]\n",
            "type": "List (List a) -> Array2D.Array2D a"
          },
          {
            "name": "get",
            "comment": " Get a cell.\n\n    get 1 1 [[1, 2], [3, 4]] == Just 4\n",
            "type": "Int -> Int -> Array2D.Array2D a -> Maybe.Maybe a"
          },
          {
            "name": "getColumn",
            "comment": " get column-th cell of each row as an Array\n\n    getColumn 1 [[1, 2], [3, 4]] == [Just 2, Just 4]\n",
            "type": "Int -> Array2D.Array2D a -> Array.Array (Maybe.Maybe a)"
          },
          {
            "name": "getRow",
            "comment": " Get an individual row\n\n    getRow 1 [[1, 2], [3, 4]] == Just [3, 4]\n",
            "type": "Int -> Array2D.Array2D a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "indexedMap",
            "comment": " 2D version of Array.indexedMap. First two arguments of map function are the row and column.\n\n    indexedMap (\\row column cell -> toString row) [[1, 2], [3, 4]] == [[\"0\", \"0\"], [\"1\", \"1\"]]\n",
            "type": "(Int -> Int -> a -> b) -> Array2D.Array2D a -> Array2D.Array2D b"
          },
          {
            "name": "isEmpty",
            "comment": " Check if an Array2D is empty.\n\n    isEmpty [] == True\n",
            "type": "Array2D.Array2D a -> Bool"
          },
          {
            "name": "map",
            "comment": " 2D version of Array.map.\n\n    map (\\cell -> toString cell) [[1, 2], [3, 4]] == [[\"1\", \"2\"], [\"3\", \"4\"]]\n",
            "type": "(a -> b) -> Array2D.Array2D a -> Array2D.Array2D b"
          },
          {
            "name": "repeat",
            "comment": " Create a 2D of a given size, filled with a default element.\nSimilar to Array.repeat\n\n    repeat 2 3 0 == [[0, 0, 0], [0, 0, 0]]\n",
            "type": "Int -> Int -> a -> Array2D.Array2D a"
          },
          {
            "name": "rows",
            "comment": " Get the number of rows in an Array2D\n\n    rows [[1, 2, 3], [4, 5, 6]] == 2\n",
            "type": "Array2D.Array2D a -> Int"
          },
          {
            "name": "set",
            "comment": " Update a cell, returning the changed Array2D.\n\n    set 0 0 -100 [[1, 2], [3, 4]] == [[-100, 2], [3, 4]]\n",
            "type": "Int -> Int -> a -> Array2D.Array2D a -> Array2D.Array2D a"
          }
        ],
        "generated-with-elm-version": "0.18.0"
      }
    ]
  }
]
