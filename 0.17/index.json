[
  {
    "name": "Bogdanp/elm-combine",
    "version": "2.2.1",
    "docs": [
      {
        "name": "Combine.Num",
        "comment": " This module contains Parsers specific to parsing numbers.\n\n# Parsers\n@docs sign, digit, int, float\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "digit",
            "comment": " Parse a digit. ",
            "type": "Combine.Parser Int"
          },
          {
            "name": "float",
            "comment": " Parse a float. ",
            "type": "Combine.Parser Float"
          },
          {
            "name": "int",
            "comment": " Parse an integer. ",
            "type": "Combine.Parser Int"
          },
          {
            "name": "sign",
            "comment": " Parse a numeric sign, returning `1` for positive numbers and `-1`\nfor negative numbers. ",
            "type": "Combine.Parser Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Combine.Char",
        "comment": " This module contains `Char`-specific Parsers.\n\n# Parsers\n@docs satisfy, char, anyChar, oneOf, noneOf, space, tab, newline, crlf, eol, lower, upper, digit, octDigit, hexDigit\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyChar",
            "comment": " Parse any character.\n\n    parse anyChar \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse anyChar \"\" ==\n      (Err [\"expected any character\"], { input = \"\", position = 0 })\n",
            "type": "Combine.Parser Char"
          },
          {
            "name": "char",
            "comment": " Parse an exact character match.\n\n    parse (char 'a') \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse (char 'a') \"b\" ==\n      (Err [\"expected 'a'\"], { input = \"b\", position = 0 })\n",
            "type": "Char -> Combine.Parser Char"
          },
          {
            "name": "crlf",
            "comment": " Parse a `\\r\\n` sequence, returning a `\\n` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "digit",
            "comment": " Parse any base 10 digit. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "eol",
            "comment": " Parse an end of line character or sequence, returning a `\\n` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "hexDigit",
            "comment": " Parse any base 16 digit. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "lower",
            "comment": " Parse any lowercase character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "newline",
            "comment": " Parse a `\\n` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "noneOf",
            "comment": " Parse a character that is not in the given list.\n\n    parse (noneOf ['a', 'b']) \"c\" ==\n      (Ok 'c', { input = \"\", position = 1 })\n\n    parse (noneOf ['a', 'b']) \"a\" ==\n      (Err [\"expected none of ['a','b']\"], { input = \"a\", position = 0 })\n",
            "type": "List Char -> Combine.Parser Char"
          },
          {
            "name": "octDigit",
            "comment": " Parse any base 8 digit. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "oneOf",
            "comment": " Parse a character from the given list.\n\n    parse (oneOf ['a', 'b']) \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse (oneOf ['a', 'b']) \"c\" ==\n      (Err [\"expected one of ['a','b']\"], { input = \"c\", position = 0 })\n",
            "type": "List Char -> Combine.Parser Char"
          },
          {
            "name": "satisfy",
            "comment": " Parse a character matching the predicate.\n\n    parse (satisfy ((==) 'a')) \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse (satisfy ((==) 'a')) \"b\" ==\n      (Err [\"could not satisfy predicate\"], { input = \"b\", position = 0 })\n",
            "type": "(Char -> Bool) -> Combine.Parser Char"
          },
          {
            "name": "space",
            "comment": " Parse a space character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "tab",
            "comment": " Parse a `\\t` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "upper",
            "comment": " Parse any uppercase character. ",
            "type": "Combine.Parser Char"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Combine.Infix",
        "comment": " This module provides infix versions of various functions from the\n`Combine` module.\n\n# Transforming Parsers\n@docs (<$>), (<$), (<?>)\n\n# Chaining Parsers\n@docs (<*>), (*>), (<*)\n\n# Parsers\n@docs (<|>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "*>",
            "comment": " Join two parsers, ignoring the result of the one on the left.\n\n    unprefix : Parser String\n    unprefix = string \">\" *> while ((==) ' ') *> while ((/=) ' ')\n\n    parse unprefix \"> a\" == (Ok \"a\", { input = \"\", position = 3 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "<$",
            "comment": " Variant of `Combine.map` that ignores the Parser's result. ",
            "type": "res -> Combine.Parser x -> Combine.Parser res"
          },
          {
            "name": "<$>",
            "comment": " Synonym for `Combine.map`. ",
            "type": "(res -> res') -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "<*",
            "comment": " Join two parsers, ignoring the result of the one on the right.\n\n    unsuffix : Parser String\n    unsuffix = regex \"[a-z]\" <* regex \"[!?]\"\n\n    parse unsuffix \"a!\" == (Ok \"a\", { input = \"\", position = 2 })\n",
            "type": "Combine.Parser res -> Combine.Parser x -> Combine.Parser res"
          },
          {
            "name": "<*>",
            "comment": " Synonym for `Combine.andMap`. ",
            "type": "Combine.Parser (res -> res') -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "<?>",
            "comment": " Variant of `Combine.mapError` that replaces the Parser's error\nwith a List of a single string.\n\n    parse (string \"a\" <?> \"gimme an 'a'\") \"b\" ==\n      (Err [\"gimme an 'a'\"], { input = \"b\", position = 0 })\n",
            "type": "Combine.Parser res -> String -> Combine.Parser res"
          },
          {
            "name": "<|>",
            "comment": " Synonym for `or`. ",
            "type": "Combine.Parser res -> Combine.Parser res -> Combine.Parser res"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Combine",
        "comment": " This library provides reasonably fast parser combinators.\n\n@docs Parser, Context\n\n# Constructing Parsers\n@docs primitive\n\n# Running a Parser\n@docs parse, app, rec\n\n# Transforming Parsers\n@docs bimap, map, mapError\n\n# Chaining Parsers\n@docs andThen, andMap, sequence\n\n# Parsers\n@docs fail, succeed, string, regex, while, end, or, choice, optional, maybe, many, many1, manyTill, sepBy, sepBy1, sepEndBy, sepEndBy1, skip, skipMany, skipMany1, chainl, chainr, count, between, parens, braces, brackets\n",
        "aliases": [
          {
            "name": "Context",
            "comment": " The contex over which `Parser`s operate. ",
            "args": [],
            "type": "{ input : String, position : Int }"
          }
        ],
        "types": [
          {
            "name": "Parser",
            "comment": " The Parser type.\n\nAt their core, `Parser`s simply wrap functions from a `Context` to a\ntuple of a `Result res` and a new `Context`. ",
            "args": [
              "res"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Sequence two parsers.\n\n    import Maybe\n    import Result\n    import String\n\n    num : Parser Int\n    num = (Maybe.withDefault 0 << Result.toMaybe << String.toInt) `map` regex \"[0-9]+\"\n\n    sum : Parser Int\n    sum = (+) `map` (num <* string \"+\") `andMap` num\n\n    parse sum \"1+2\" ==\n      (Ok 3, { input = \"\", position = 3 })\n",
            "type": "Combine.Parser (a -> res) -> Combine.Parser a -> Combine.Parser res"
          },
          {
            "name": "andThen",
            "comment": " Sequence two parsers, passing the result of the first parser to a\nfunction that returns the second parser. The value of the second\nparser is returned on success.\n\n    import Combine.Num exposing (int)\n\n    choosy : Parser String\n    choosy =\n      int\n        `andThen` \\x -> if x % 2 == 0\n                        then string \" is even\"\n                        else string \" is odd\"\n\n    parse choosy \"1 is odd\" ==\n      (Ok \" is odd\", { input = \"\", position = 8 })\n\n    parse choosy \"1 is even\" ==\n      (Err [\"expected \\\" is odd\\\"\"], { input = \" is even\", position = 1 })\n",
            "type": "Combine.Parser res -> (res -> Combine.Parser res') -> Combine.Parser res'"
          },
          {
            "name": "app",
            "comment": " Unwrap a parser so it can be applied to a context. ",
            "type": "Combine.Parser res -> Combine.Context -> ( Combine.Result res, Combine.Context )"
          },
          {
            "name": "between",
            "comment": " Parse something between two other parsers.\n\nThe parser\n\n    between (string \"(\") (string \")\") (string \"a\")\n\nis equivalent to the parser\n\n    string \"(\" *> string \"a\" <* string \")\"\n",
            "type": "Combine.Parser left -> Combine.Parser right -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "bimap",
            "comment": " Transform both the result and error message of a parser. ",
            "type": "(res -> res') -> (List String -> List String) -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "braces",
            "comment": " Parse something between braces `{}`. ",
            "type": "Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "brackets",
            "comment": " Parse something between square brackets `[]`. ",
            "type": "Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "chainl",
            "comment": " Parse one or more occurences of `p` separated by `op`, recursively\napply all functions returned by `op` to the values returned by `p`. See\nthe `examples/Calc.elm` file for an example.\n",
            "type": "Combine.Parser res -> Combine.Parser (res -> res -> res) -> Combine.Parser res"
          },
          {
            "name": "chainr",
            "comment": " Similar to `chainl` but functions of `op` are applied in\nright-associative order to the values of `p`. ",
            "type": "Combine.Parser res -> Combine.Parser (res -> res -> res) -> Combine.Parser res"
          },
          {
            "name": "choice",
            "comment": " Choose between a list of parsers.\n\n    parse (choice [string \"a\", string \"b\"]) \"a\" ==\n      (Ok \"a\", { input = \"\", position = 1 })\n\n    parse (choice [string \"a\", string \"b\"]) \"b\" ==\n      (Ok \"b\", { input = \"\", position = 1 })\n",
            "type": "List (Combine.Parser res) -> Combine.Parser res"
          },
          {
            "name": "count",
            "comment": " Parse `n` occurences of `p`. ",
            "type": "Int -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "end",
            "comment": " Fail when the input is not empty.\n\n    parse end \"\" == (Ok (), { input = \"\", position = 0 })\n    parse end \"a\" == (Err [\"expected end of input\"], { input = \"a\", position = 0 })\n",
            "type": "Combine.Parser ()"
          },
          {
            "name": "fail",
            "comment": " Fail without consuming any input. ",
            "type": "List String -> Combine.Parser res"
          },
          {
            "name": "many",
            "comment": " Apply a parser until it fails and return a list of the results.\n\n    parse (many (string \"a\")) \"aaab\" ==\n      (Ok [\"a\", \"a\", \"a\"], { input = \"b\", position = 3 })\n\n    parse (many (string \"a\")) \"\" ==\n      (Ok [], { input = \"\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "many1",
            "comment": " Parse at least one result.\n\n    parse (many1 (string \"a\")) \"a\" ==\n      (Ok [\"a\"], { input = \"\", position = 1 })\n\n    parse (many1 (string \"a\")) \"\" ==\n      (Err [\"expected \\\"a\\\"\"], { input = \"\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "manyTill",
            "comment": " Apply parser `p` zero or more times until parser `end`\nsucceeds. On success, the list of `p`'s results is returned.\n\n    string \"<!--\" *> manyTill anyChar (string \"-->\")\n",
            "type": "Combine.Parser res -> Combine.Parser end -> Combine.Parser (List res)"
          },
          {
            "name": "map",
            "comment": " Transform the result of a parser.\n\n    parse (map String.toUpper (string \"a\")) \"a\" ==\n      (Ok \"A\", { input = \"\", position = 1 })\n",
            "type": "(res -> res') -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "mapError",
            "comment": " Transform the error of a parser.\n\n    parse (mapError (\\_ -> [\"bad input\"]) (string \"a\")) \"b\" ==\n      (Err [\"bad input\"], { input = \"b\", position = 0 })\n",
            "type": "(List String -> List String) -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "maybe",
            "comment": " Wrap the return value into a `Maybe`. Returns `Nothing` on failure.\n\n    parse (maybe (string \"a\")) \"a\" ==\n      (Ok (Just \"a\"), { input = \"\", position = 1 })\n\n    parse (maybe (string \"a\")) \"b\" ==\n      (Ok Nothing, { input = \"b\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser (Maybe.Maybe res)"
          },
          {
            "name": "optional",
            "comment": " Return a default value when the given parser fails.\n\n    letterA : Parser String\n    letterA = optional \"a\" (string \"a\")\n\n    parse letterA \"a\" == (Ok \"a\", { input = \"\", position = 1 })\n    parse letterA \"b\" == (Ok \"a\", { input = \"b\", position = 0 })\n",
            "type": "res -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "or",
            "comment": " Choose between two parsers.\n\n    parse (string \"a\" `or` string \"b\") \"a\" ==\n      (Ok \"a\", { input = \"\", position = 1 })\n\n    parse (string \"a\" `or` string \"b\") \"b\" ==\n      (Ok \"b\", { input = \"\", position = 1 })\n\n    parse (string \"a\" `or` string \"b\") \"c\" ==\n      (Err [\"expected \\\"a\\\"\", \"expected \\\"b\\\"\"], { input = \"c\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "parens",
            "comment": " Parse something between parentheses. ",
            "type": "Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "parse",
            "comment": " Parse a string.\n\n    import Combine.Num exposing (int)\n\n    parse int \"123\" ==\n      (Ok 123, { input = \"\", position = 3 })\n\n    parse int \"abc\" ==\n      (Err [\"expected an integer\"], { input = \"abc\", position = 0 })\n ",
            "type": "Combine.Parser res -> String -> ( Combine.Result res, Combine.Context )"
          },
          {
            "name": "primitive",
            "comment": " Construct a new primitive Parser.\n\nIf you find yourself reaching for this function often consider opening\na [Github issue](https://github.com/Bogdanp/elm-combine/issues) with\nthe library to have your custom Parsers included in the standard\ndistribution. ",
            "type": "(Combine.Context -> ( Combine.Result res, Combine.Context )) -> Combine.Parser res"
          },
          {
            "name": "rec",
            "comment": " Defer a parser's evaluation.\n\n    type E = ETerm String | EList (List E)\n\n    whitespace : Parser String\n    whitespace = regex \"[ \\t\\r\\n]*\"\n\n    term : Parser E\n    term = ETerm `map` (whitespace *> regex \"[a-zA-Z]+\" <* whitespace)\n\n    list : Parser E\n    list = rec (\\() -> EList `map` (string \"(\" *> many (term `or` list) <* string \")\"))\n\n    parse list \"\" ==\n      (Err [\"expected \\\"(\\\"\"], { input = \"\", position = 0 })\n\n    parse list \"()\" ==\n      (Ok (EList []), { input = \"\", position = 2 })\n\n    parse list \"(a (b c))\" ==\n      (Ok (EList [ETerm \"a\", EList [ETerm \"b\", ETerm \"c\"]]), { input = \"\", position = 9 })\n",
            "type": "(() -> Combine.Parser res) -> Combine.Parser res"
          },
          {
            "name": "regex",
            "comment": " Parse a Regex match.\n\nRegular expressions must match from the beginning of the input and their\nsubgroups are ignored. A `^` is added implicitly to the beginning of\nevery pattern unless one already exists.\n\n    parse (regex \"a+\") \"aaaaab\" ==\n      (Ok \"aaaaa\", { input = \"b\", position = 5 })\n",
            "type": "String -> Combine.Parser String"
          },
          {
            "name": "sepBy",
            "comment": " Parser zero or more occurences of one parser separated by another.\n\n    parse (sepBy (string \",\") (string \"a\")) \"b\" ==\n      (Ok [], { input = \"b\", position = 0 })\n\n    parse (sepBy (string \",\") (string \"a\")) \"a,a,a\" ==\n      (Ok [\"a\", \"a\", \"a\"], { input = \"\", position = 5 })\n\n    parse (sepBy (string \",\") (string \"a\")) \"a,a,b\" ==\n      (Ok [\"a\", \"a\"], { input = \",b\", position = 3 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sepBy1",
            "comment": " Parse one or more occurences of one parser separated by another. ",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sepEndBy",
            "comment": " Parse zero or more occurences of one parser separated and\noptionally ended by another.\n\n    parse (sepEndBy (string \",\") (string \"a\")) \"a,a,a,\" ==\n      (Ok [\"a\", \"a\", \"a\"], { input = \"\", position = 6 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sepEndBy1",
            "comment": " Parse one or more occurences of one parser separated and\noptionally ended by another.\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"\" ==\n      (Err [\"expected \\\"a\\\"\"], { input = \"\", position = 0 })\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"a\" ==\n      (Ok [\"a\"], { input = \"\", position = 1 })\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"a,\" ==\n      (Ok [\"a\"], { input = \"\", position = 2 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sequence",
            "comment": " Run a list of parsers in sequence, accumulating the results.\n\n    parse (sequence [string \"a\", string \"b\"]) \"ab\" ==\n      (Ok [\"a\", \"b\"], { input = \"\", position = 2 })\n\n    parse (sequence [string \"a\", string \"b\"]) \"ac\" ==\n      (Err [\"expected \\\"b\\\"\", { input = \"c\", position = 1 })\n\n ",
            "type": "List (Combine.Parser res) -> Combine.Parser (List res)"
          },
          {
            "name": "skip",
            "comment": " Apply a parser and skip its result. ",
            "type": "Combine.Parser x -> Combine.Parser ()"
          },
          {
            "name": "skipMany",
            "comment": " Apply a parser and skip its result many times. ",
            "type": "Combine.Parser x -> Combine.Parser ()"
          },
          {
            "name": "skipMany1",
            "comment": " Apply a parser and skip its result at least once. ",
            "type": "Combine.Parser x -> Combine.Parser ()"
          },
          {
            "name": "string",
            "comment": " Parse an exact string match.\n\n    parse (string \"hello\") \"hello world\" ==\n      (Ok \"hello\", { input = \" world\", position = 5 })\n\n    parse (string \"hello\") \"goodbye\" ==\n      (Err [\"expected \\\"hello\\\"\"], { input = \"goodbye\", position = 0 })\n",
            "type": "String -> Combine.Parser String"
          },
          {
            "name": "succeed",
            "comment": " Return a value without consuming any input.\n\n    parse (succeed 1) \"a\" ==\n      (Ok 1, { input = \"a\", position = 0 })\n",
            "type": "res -> Combine.Parser res"
          },
          {
            "name": "while",
            "comment": " Consume input while the predicate matches.\n\n    parse (while ((/=) ' ')) \"test 123\" ==\n      (Ok \"test\", { input = \" 123\", position = 4 })\n",
            "type": "(Char -> Bool) -> Combine.Parser String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-datepicker",
    "version": "3.0.1",
    "docs": [
      {
        "name": "DatePicker",
        "comment": " A customizable date picker component.\n\n# Tea ☕\n@docs Msg, DatePicker\n@docs init, update, view\n\n# Settings\n@docs Settings, defaultSettings\n",
        "aliases": [
          {
            "name": "Settings",
            "comment": " The type of date picker settings.\n",
            "args": [],
            "type": "{ placeholder : String , classNamespace : String , inputClassList : List ( String, Bool ) , inputName : Maybe.Maybe String , isDisabled : Date.Date -> Bool , dateFormatter : Date.Date -> String , dayFormatter : Date.Day -> String , monthFormatter : Date.Month -> String , yearFormatter : Int -> String , firstDayOfWeek : Date.Day , pickedDate : Maybe.Maybe Date.Date }"
          }
        ],
        "types": [
          {
            "name": "DatePicker",
            "comment": " The DatePicker model.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " An opaque type representing messages that are passed inside the DatePicker.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultSettings",
            "comment": " A record of default settings for the date picker.  Extend this if\nyou want to customize your date picker.\n\n\n    import DatePicker exposing (defaultSettings)\n\n    DatePicker.init { defaultSettings | placeholder = \"Pick a date\" }\n\n\nTo disable certain dates:\n\n\n    import Date exposing (Day(..), dayOfWeek)\n    import DatePicker exposing (defaultSettings)\n\n    DatePicker.init { defaultSettings | isDisabled = \\d -> dayOfWeek d `List.member` [ Sat, Sun ] }\n\n",
            "type": "DatePicker.Settings"
          },
          {
            "name": "init",
            "comment": " Initialize a DatePicker given a Settings record.  You must execute\nthe returned command for the date picker to behave correctly.\n\n\n    init =\n      let\n         (datePicker, datePickerFx) =\n           DatePicker.init defaultSettings\n      in\n         { picker = datePicker } ! [ Cmd.map ToDatePicker datePickerfx ]\n\n",
            "type": "DatePicker.Settings -> ( DatePicker.DatePicker, Platform.Cmd.Cmd DatePicker.Msg )"
          },
          {
            "name": "update",
            "comment": " The date picker update function.  The third value in the returned\ntuple represents the picked date, it is `Nothing` if no date was\npicked or if the previously-picked date has not changed and `Just`\nsome date if it has.\n",
            "type": "DatePicker.Msg -> DatePicker.DatePicker -> ( DatePicker.DatePicker , Platform.Cmd.Cmd DatePicker.Msg , Maybe.Maybe Date.Date )"
          },
          {
            "name": "view",
            "comment": " The date picker view.\n",
            "type": "DatePicker.DatePicker -> Html.Html DatePicker.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-route",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Route",
        "comment": " This module exposes combinators for creating route parsers.\n\n@docs Route, Router\n\n## Routing\n@docs route, (:=), router, child, match, reverse\n\n## Route combinators\n@docs prefix, (<//>), and, (</>), suffix, (<>), static, custom, string, int\n",
        "aliases": [],
        "types": [
          {
            "name": "Route",
            "comment": " Routes represent concrete parsers for paths. Routes can be combined\nand they keep track of their path components in order to provide\nautomatic reverse routing.\n ",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Router",
            "comment": " A Router is, at its core, a List of Routes.\n\n    sitemap = router [routeA, routeB]\n\n ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": ":=",
            "comment": " A synonym for `route`.\n\n    type Sitemap\n      = HomeR ()\n\n    homeR : Route Sitemap\n    homeR = HomeR := static \"\"\n\n ",
            "type": "(a -> res) -> Route.Route a -> Route.Route res",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "<//>",
            "comment": " A synonym for `prefix`.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := \"users\" <//> int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route res -> Route.Route res",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "</>",
            "comment": " A synonym for `and`.\n\n    type Sitemap\n      = AddR (Int, Int)\n\n    addR = AddR := int </> int\n    sitemap = router [addR]\n\n    > match sitemap \"/1/2\"\n    Just (AddR (1,2)) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route a -> Route.Route b -> Route.Route ( a, b )",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "<>",
            "comment": " A synonym for `suffix`.\n\n    type Sitemap\n      = UserEmailsR Int\n      = UserEmailsR' (Int, ())\n\n    userEmailsR = UserEmailsR := \"users\" <//> int <> \"emails\"\n    userEmailsR' = UserEmailsR' := \"users\" <//> int </> static \"emails\"\n    sitemap = router [userEmailsR, userEmailsR']\n\n    > match sitemap \"/users/1/emails\"\n    Just (UserEmailsR 1) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1/emails-static\"\n    Just (UserEmailsR' (1,())) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route res -> String -> Route.Route res",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "and",
            "comment": " Compose two Routes.\n\n    type Sitemap\n      = AddR (Int, Int)\n\n    addR = AddR := int `and` int\n    sitemap = router [addR]\n\n    > match sitemap \"/1/2\"\n    Just (AddR (1,2)) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route a -> Route.Route b -> Route.Route ( a, b )"
          },
          {
            "name": "child",
            "comment": " Routers may be nested. This function is useful in situations\nwhere you want to split your routes into multiple types while still\nmaintaining a single top-level \"site map\".\n\n    type AdminSitemap\n      = AdminHomeR ()\n      | AdminUsersR ()\n\n    adminHomeR = AdminHomeR := static \"admin\"\n    adminUsersR = AdminHomeR := \"admin\" <//> static \"users\"\n    adminSitemap = router [adminHomeR, adminUsersR]\n\n    type Sitemap\n      = HomeR ()\n      | BlogR ()\n      | AdminR AdminSitemap\n\n    homeR = HomeR := static \"\"\n    blogR = BlogR := static \"blog\"\n    sitemap = router [homeR, blogR, child AdminR adminSitemap]\n\nSee `examples/Reuse.elm` for a more advanced use case of this.\n\n ",
            "type": "(a -> b) -> Route.Router a -> Route.Route b"
          },
          {
            "name": "custom",
            "comment": " Create a Route with a custom Parser.\n\n    import Combine exposing (..)\n    import Combine.Infix exposing (..)\n\n    type Category\n      = Snippet\n      | Post\n\n    type Sitemap\n      = CategoryR Category\n\n    categoryR = CategoryR := \"categories\" <//> custom categoryParser\n    sitemap = router [categoryR]\n\n    > match sitemap \"/categories/a\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/categories/Post\"\n    Just (CategoryR Post) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/categories/Snippet\"\n    Just (CategoryR Snippet) : Maybe.Maybe Sitemap\n\nSee `examples/Custom.elm` for a complete example.\n\n ",
            "type": "Combine.Parser a -> Route.Route a"
          },
          {
            "name": "int",
            "comment": " A Route that matches any integer.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := \"users\" <//> int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/a\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/-1\"\n    Just (UserR -1) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route Int"
          },
          {
            "name": "match",
            "comment": " Given a Router and an arbitrary String representing a path, this\nfunction will return the first Route that matches that path.\n\n    type Sitemap\n      = HomeR ()\n      | UsersR ()\n      | UserR Int\n\n    homeR = HomeR := static \"\"\n    usersR = UsersR := static \"users\"\n    usersR = UserR := \"users\" <//> int\n    sitemap = router [homeR, userR, usersR]\n\n    > match siteMap \"/a\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match siteMap \"/\"\n    Just (HomeR ()) : Maybe.Maybe Sitemap\n\n    > match siteMap \"/users\"\n    Just (UsersR ()) : Maybe.Maybe Sitemap\n\n    > match siteMap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n    > match siteMap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Router a -> String -> Maybe.Maybe a"
          },
          {
            "name": "prefix",
            "comment": " Prefix a `Route` with a string.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := prefix \"users\" int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route res -> Route.Route res"
          },
          {
            "name": "reverse",
            "comment": " Render a path given a route and a list of route components.\n\n    type Sitemap\n      = HomeR ()\n      | UsersR ()\n      | UserR Int\n\n    homeR = HomeR := static \"\"\n    usersR = UsersR := static \"users\"\n    usersR = UserR := \"users\" <//> int\n    sitemap = router [homeR, userR, usersR]\n\n    > reverse homeR []\n    \"/\"\n\n    > reverse usersR []\n    \"/users\"\n\n    > reverse userR [\"1\"]\n    \"/users/1\"\n\nIf you are willing to write some boilerplate, this function can be used\nto construct a reasonably-safe reverse routing function specific to your\napplication:\n\n    render : Sitemap -> String\n    render r =\n      case r of\n        HomeR () -> reverse homeR []\n        UsersR () -> reverse usersR []\n        UserR uid -> reverse userR [toString uid]\n\n    > render (HomeR ())\n    \"/\"\n\n    > render (UsersR ())\n    \"/users\"\n\n    > render (UserR 1)\n    \"/users/1\"\n\nThis function will crash at runtime if there is a mismatch between the\nroute and the list of arguments that is passed in. For example:\n\n    > reverse deepR []\n    Error: Ran into a `Debug.crash` in module `Route`\n\n    This was caused by the `case` expression between lines 145 and 175.\n    One of the branches ended with a crash and the following value got through:\n\n        ([],[CInt,CInt,CInt])\n\n    The message provided by the code author is:\n\n        'reverse' called with an unexpected number of arguments\n\n    > reverse deepR [\"a\"]\n    Error: Ran into a `Debug.crash` in module `Route`\n\n    This was caused by the `case` expression between lines 171 and 176.\n    One of the branches ended with a crash and the following value got through:\n\n        Err (\"could not convert string 'a' to an Int\")\n\n    The message provided by the code author is:\n\n        could not convert string 'a' to an Int in a call to 'reverse'\n\n ",
            "type": "Route.Route a -> List String -> String"
          },
          {
            "name": "route",
            "comment": " Declare a Route.\n\n    type Sitemap\n      = HomeR ()\n\n    homeR : Route Sitemap\n    homeR = route HomeR (static \"\")\n\n ",
            "type": "(a -> res) -> Route.Route a -> Route.Route res"
          },
          {
            "name": "router",
            "comment": " Construct a Router from a list of Routes.\n\n    type Sitemap\n      = HomeR ()\n      | BlogR ()\n\n    homeR = HomeR := static \"\"\n    blogR = BlogR := static \"blog\"\n    sitemap = router [homeR, blogR]\n\n ",
            "type": "List (Route.Route a) -> Route.Router a"
          },
          {
            "name": "static",
            "comment": " Create a Route that matches a static String.\n\n    type Sitemap\n      = BlogR ()\n\n    blogR = BlogR := static \"blog\"\n    sitemap = router [blogR]\n\n    > match sitemap \"/blog\"\n    Just (BlogR ()) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route ()"
          },
          {
            "name": "string",
            "comment": " A Route that matches any string.\n\n    type Sitemap\n      = PostR String\n\n    postR = PostR := \"posts\" <//> string\n    sitemap = router [postR]\n\n    > match sitemap \"/posts/\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/posts/hello-world/test\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/posts/hello-world\"\n    Just (PostR \"hello-world\") : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route String"
          },
          {
            "name": "suffix",
            "comment": " Suffix a `Route` with a string. This can be used in place\nof `static` when there are static path components at the end of a\npath.\n\n    type Sitemap\n      = UserEmailsR Int\n      = UserEmailsR' (Int, ())\n\n    userEmailsR = UserEmailsR := suffix \"emails\" (prefix \"users\" int)\n    userEmailsR' = UserEmailsR' := prefix \"users\" int `and` static \"emails-static\"\n    sitemap = router [userEmailsR, userEmailsR']\n\n    > match sitemap \"/users/1/emails\"\n    Just (UserEmailsR 1) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1/emails-static\"\n    Just (UserEmailsR' (1,())) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route res -> Route.Route res"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Route.QueryString",
        "comment": " This module exposes functions for working with query strings.\n\nYou can manipulate query strings:\n\n    empty\n      |> add \"a\" \"hello\"\n      |> add \"a\" \"goodbye\"\n      |> add \"b\" \"1\"\n      |> render\n\nAnd you can parse and extract their parameters:\n\n    let\n      qs = parse \"?a=1&a=2&a=test&b=hello\"\n      a = many int qs\n      b = one string qs |> Maybe.withDefault \"goodbye\"\n    in\n      (a, b)\n\n## Types\n@docs QueryString\n\n## Constructing QueryStrings\n@docs parse, empty\n\n## Manipulating parameters\n@docs render, add, remove, filter\n\n## Extracting parameters\n@docs all, one, many\n\n### Parsers\n@docs string, int\n",
        "aliases": [],
        "types": [
          {
            "name": "QueryString",
            "comment": " Represents a parsed query string. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a value to a key.\n\n    > parse \"?a=1&b=a&a=c\" |> add \"a\" \"2\" |> render\n    \"?a=2&a=1&a=c&b=a\" : String\n\n    > parse \"?a=1&b=a&a=c\" |> add \"d\" \"hello\" |> render\n    \"?a=1&a=c&b=a&d=hello\" : String\n\n ",
            "type": "String -> String -> Route.QueryString.QueryString -> Route.QueryString.QueryString"
          },
          {
            "name": "all",
            "comment": " Retrieve all of the values for a given key.\n\n    > parse \"?a=1&a=2\" |> all \"a\"\n    [\"1\",\"2\"] : List String\n\n    > parse \"?a=1&a=2\" |> all \"b\"\n    [] : List String\n\n ",
            "type": "String -> Route.QueryString.QueryString -> List String"
          },
          {
            "name": "empty",
            "comment": " Construct an empty QueryString. ",
            "type": "Route.QueryString.QueryString"
          },
          {
            "name": "filter",
            "comment": " Filter a key's values.\n\n    > parse \"?a=1&b=a&a=c\" |> filter \"a\" ((==) \"1\") |> render\n    \"?a=1&b=a\" : String\n\n ",
            "type": "String -> (String -> Bool) -> Route.QueryString.QueryString -> Route.QueryString.QueryString"
          },
          {
            "name": "int",
            "comment": " A Parser that accepts any integer. ",
            "type": "Combine.Parser Int"
          },
          {
            "name": "many",
            "comment": " Retrieve zero or more values for some key. Values are funneled\nthrough the given parser before being returned.\n\n    > parse \"?a=1&a=c&a=2\" |> many int \"a\"\n    [1,2] : List Int\n\n ",
            "type": "Combine.Parser a -> String -> Route.QueryString.QueryString -> List a"
          },
          {
            "name": "one",
            "comment": " Retrieve a single value for a given key. Values are funneled through\nthe given parser before being returned.\n\n    > parse \"?a=1&a=2\" |> one string \"a\"\n    Just \"2\" : Maybe.Maybe String\n\n    > parse \"?a=1&a=2\" |> one int \"a\"\n    Just 2 : Maybe.Maybe Int\n\n    > parse \"?a=1&a=c\" |> one int \"a\"\n    Just 1 : Maybe.Maybe Int\n\n ",
            "type": "Combine.Parser a -> String -> Route.QueryString.QueryString -> Maybe.Maybe a"
          },
          {
            "name": "parse",
            "comment": " Turn a String into a QueryString. The initial `?` is optional.\n\n    > parse \"\"\n    QueryString (Dict.fromList []) : Route.QueryString.QueryString\n\n    > parse \"?a=1&b=c&a=2\"\n    QueryString (Dict.fromList [(\"a\",[\"1\",\"2\"]),(\"b\",[\"c\"])])\n        : Route.QueryString.QueryString\n\n    > parse \"a=1&b=c&a=2\"\n    QueryString (Dict.fromList [(\"a\",[\"1\",\"2\"]),(\"b\",[\"c\"])])\n        : Route.QueryString.QueryString\n\n ",
            "type": "String -> Route.QueryString.QueryString"
          },
          {
            "name": "remove",
            "comment": " Remove a key.\n\n    > parse \"?a=1&b=a&a=c\" |> remove \"a\" |> render\n    \"?b=a\" : String\n\n    > parse \"?a=1&b=a&a=c\" |> remove \"c\" |> render\n    \"?a=1&a=c&b=a\" : String\n\n ",
            "type": "String -> Route.QueryString.QueryString -> Route.QueryString.QueryString"
          },
          {
            "name": "render",
            "comment": " Render a QueryString to a String.\n\n    > parse \"?a=1&b=a&a=c\" |> render\n    \"?a=1&a=c&b=a\" : String\n\n ",
            "type": "Route.QueryString.QueryString -> String"
          },
          {
            "name": "string",
            "comment": " A Parser that accepts any string. ",
            "type": "Combine.Parser String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Dandandan/parser",
    "version": "6.2.5",
    "docs": [
      {
        "name": "Parser.Char",
        "comment": " Parsing characters\n\n@docs upper, lower, between, parenthesized, bracketed, braced, quoted, singleQuoted\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "between",
            "comment": " Parse a parser between two `Chars` ",
            "type": "Char -> Char -> Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "braced",
            "comment": " Parses a parser between braces `{` and `}`",
            "type": "Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "bracketed",
            "comment": " Parses a parser between brackets `[` and `]` ",
            "type": "Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "lower",
            "comment": " Parse a lower case character ",
            "type": "Parser.Parser Char"
          },
          {
            "name": "parenthesized",
            "comment": " Parse a parser between parentheses `(` and `)`",
            "type": "Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "quoted",
            "comment": " Parses a parser between quotes `\"` and `\"`",
            "type": "Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "singleQuoted",
            "comment": " Parses a parser between quotes `'` and `'`",
            "type": "Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "upper",
            "comment": " Parse a upper case character ",
            "type": "Parser.Parser Char"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Parser.Number",
        "comment": " Parsing numbers\n\n@docs digit, natural, integer, float, sign\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "digit",
            "comment": " Parse a digit ",
            "type": "Parser.Parser Int"
          },
          {
            "name": "float",
            "comment": " Parse a float with optional sign ",
            "type": "Parser.Parser Float"
          },
          {
            "name": "integer",
            "comment": " Parse an integer with optional sign ",
            "type": "Parser.Parser Int"
          },
          {
            "name": "natural",
            "comment": " Parse a natural number ",
            "type": "Parser.Parser Int"
          },
          {
            "name": "sign",
            "comment": " Parse a optional sign, succeeds with a -1 if it matches a minus `Char`, otherwise it returns 1 ",
            "type": "Parser.Parser Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Parser",
        "comment": " A simple parser combinator library.\n\n@docs Parser\n\n#Running the parser\n@docs parse, parseAll\n\n#Core functions\n@docs map, or, andMap, andThen, and\n\n#Combinators\n@docs succeed, satisfy, empty, symbol, token, choice, optional, many, some, separatedBy, end\n\n#Writing recursive grammars\n@docs recursively\n\n#Core functions (infix operators)\n@docs (<*), (*>), (<$)\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Parser",
            "comment": " Parser type\n",
            "args": [
              "result"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "*>",
            "comment": " Variant of `and` that ignores the result of the parser at the left ",
            "type": "Parser.Parser x -> Parser.Parser result -> Parser.Parser result"
          },
          {
            "name": "<$",
            "comment": " Variant of `map` that ignores the result of the parser ",
            "type": "result -> Parser.Parser x -> Parser.Parser result"
          },
          {
            "name": "<*",
            "comment": " Variant of `and` that ignores the result of the parser at the right ",
            "type": "Parser.Parser result -> Parser.Parser x -> Parser.Parser result"
          },
          {
            "name": "and",
            "comment": " Sequence two parsers (infix version)\n\n    type Date = Date Int Int Int\n    date = Date `map` year `and` month `and` day\n",
            "type": "Parser.Parser (result -> result2) -> Parser.Parser result -> Parser.Parser result2",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "andMap",
            "comment": " Sequence two parsers\n\n    type Date = Date Int Int Int\n    date =\n        map Date year\n        |> andMap month\n        |> andMap day\n",
            "type": "Parser.Parser result -> Parser.Parser (result -> result2) -> Parser.Parser result2"
          },
          {
            "name": "andThen",
            "comment": " Sequence two parsers, but pass the result of the first parser to the second parser.\n    This is useful for creating context sensitive parsers like XML.\n\n    tag = openTag\n        |> andThen (tagLiteral)\n",
            "type": "Parser.Parser result -> (result -> Parser.Parser result2) -> Parser.Parser result2"
          },
          {
            "name": "choice",
            "comment": " Combine a list of parsers ",
            "type": "List (Parser.Parser result) -> Parser.Parser result"
          },
          {
            "name": "empty",
            "comment": " Parser that always fails ",
            "type": "Parser.Parser result"
          },
          {
            "name": "end",
            "comment": " Succeeds when input is empty ",
            "type": "Parser.Parser ()"
          },
          {
            "name": "many",
            "comment": " Parses zero or more occurences of a parser ",
            "type": "Parser.Parser result -> Parser.Parser (List result)"
          },
          {
            "name": "map",
            "comment": " Map a function over the result of the parser\n      -- Counts the amount of digits\n      count : Parser Int\n      count = map length (many digit)\n\n",
            "type": "(result -> result2) -> Parser.Parser result -> Parser.Parser result2",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "optional",
            "comment": " Parses an optional element ",
            "type": "Parser.Parser result -> result -> Parser.Parser result"
          },
          {
            "name": "or",
            "comment": " Choice between two parsers\n\n      oneOrTwo = symbol '1' `or` symbol '2'\n",
            "type": "Parser.Parser result -> Parser.Parser result -> Parser.Parser result",
            "associativity": "right",
            "precedence": 3
          },
          {
            "name": "parse",
            "comment": " Parse a `String` using a parser, return first result ",
            "type": "Parser.Parser result -> String -> Result.Result String result"
          },
          {
            "name": "parseAll",
            "comment": " Parse a `String` using a parser, return list of results ",
            "type": "Parser.Parser result -> String -> Result.Result String (List result)"
          },
          {
            "name": "recursively",
            "comment": " For realizing otherwise inexpressible recursive grammars. For\nexample, while\n\n    bbbba = (symbol 'a') `or` (symbol 'b' *> bbbba)\n\nwill fail at runtime with a non-termination issue, the replacement\n\n    bbbba = (symbol 'a') `or` (symbol 'b' *> recursively (\\() -> bbbba))\n\nis safe.\n",
            "type": "(() -> Parser.Parser result) -> Parser.Parser result"
          },
          {
            "name": "satisfy",
            "comment": " Parser that satisfies a given predicate ",
            "type": "(Char -> Bool) -> Parser.Parser Char"
          },
          {
            "name": "separatedBy",
            "comment": " Parses a sequence of the first parser, separated by the second parser\n```\nnaturals = separatedBy Number.natural (symbol ',')\n```\n ",
            "type": "Parser.Parser result -> Parser.Parser result2 -> Parser.Parser (List result)"
          },
          {
            "name": "some",
            "comment": " Parses one or more occurences of a parser ",
            "type": "Parser.Parser result -> Parser.Parser (List result)"
          },
          {
            "name": "succeed",
            "comment": " Parser that always succeeds without consuming input ",
            "type": "result -> Parser.Parser result"
          },
          {
            "name": "symbol",
            "comment": " Parses a symbol ",
            "type": "Char -> Parser.Parser Char"
          },
          {
            "name": "token",
            "comment": " Parses a token of symbols ",
            "type": "String -> Parser.Parser String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-animate-css",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Animate.Css",
        "comment": "\n@docs animated, Preset, bounce, flash, pulse, rubberBand, shake, headShake, swing, tada, wobble, jello, bounceIn, bounceInDown, bounceInLeft, bounceInRight, bounceInUp, bounceOut, bounceOutDown, bounceOutLeft, bounceOutRight, bounceOutUp, fadeIn, fadeInDown, fadeInDownBig, fadeInLeft, fadeInLeftBig, fadeInRight, fadeInRightBig, fadeInUp, fadeInUpBig, fadeOut, fadeOutDown, fadeOutDownBig, fadeOutLeft, fadeOutLeftBig, fadeOutRight, fadeOutRightBig, fadeOutUp, fadeOutUpBig, flipInX, flipInY, flipOutX, flipOutY, lightSpeedIn, lightSpeedOut, rotateIn, rotateInDownLeft, rotateInDownRight, rotateInUpLeft, rotateInUpRight, rotateOut, rotateOutDownLeft, rotateOutDownRight, rotateOutUpLeft, rotateOutUpRight, hinge, rollIn, rollOut, zoomIn, zoomInDown, zoomInLeft, zoomInRight, zoomInUp, zoomOut, zoomOutDown, zoomOutLeft, zoomOutRight, zoomOutUp, slideInDown, slideInLeft, slideInRight, slideInUp, slideOutDown, slideOutLeft, slideOutUp, slideOutRight\n",
        "aliases": [
          {
            "name": "Preset",
            "comment": " An animate.css class ",
            "args": [],
            "type": "String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "animated",
            "comment": " this class must be present for an animation to occur ",
            "type": "String"
          },
          {
            "name": "bounce",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceIn",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceInDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceInLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceInRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceInUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceOut",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceOutDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceOutLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceOutRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "bounceOutUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeIn",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInDownBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInLeftBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInRightBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeInUpBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOut",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutDownBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutLeftBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutRightBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "fadeOutUpBig",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "flash",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "flipInX",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "flipInY",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "flipOutX",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "flipOutY",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "headShake",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "hinge",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "jello",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "lightSpeedIn",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "lightSpeedOut",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "pulse",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rollIn",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rollOut",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateIn",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateInDownLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateInDownRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateInUpLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateInUpRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateOut",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateOutDownLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateOutDownRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateOutUpLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rotateOutUpRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "rubberBand",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "shake",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideInDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideInLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideInRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideInUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideOutDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideOutLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideOutRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "slideOutUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "swing",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "tada",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "wobble",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomIn",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomInDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomInLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomInRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomInUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomOut",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomOutDown",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomOutLeft",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomOutRight",
            "comment": "",
            "type": "Animate.Css.Preset"
          },
          {
            "name": "zoomOutUp",
            "comment": "",
            "type": "Animate.Css.Preset"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-font-awesome",
    "version": "2.0.0",
    "docs": [
      {
        "name": "FontAwesome.Brand",
        "comment": "\n# Icons as Html\n@docs fiveHundredPX, adn, amazon, android, angellist, apple, behance, behance_square, bitbucket, bitbucket_square, bitcoin, black_tie, bluetooth, bluetooth_b, btc, buysellads, cc_amex, cc_diners_club, cc_discover, cc_jcb, cc_mastercard, cc_paypal, cc_stripe, cc_visa, chrome, codepen, codiepie, connectdevelop, contao, css3, dashcube, delicious, deviantart, digg, dribbble, dropbox, drupal, edge, empire, envira, expeditedssl, fa, facebook, facebook_f, facebook_official, facebook_square, firefox, first_order, flickr, font_awesome, fonticons, fort_awesome, forumbee, foursquare, ge, get_pocket, gg, gg_circle, git, git_square, github, github_alt, github_square, gitlab, gittip, glide, glide_g, google, google_plus, google_plus_circle, google_plus_official, google_plus_square, google_wallet, gratipay, hacker_news, houzz, html5, instagram, internet_explorer, ioxhost, joomla, jsfiddle, lastfm, lastfm_square, leanpub, linkedin, linkedin_square, linux, maxcdn, meanpath, medium, mixcloud, modx, odnoklassniki, odnoklassniki_square, opencart, openid, opera, optin_monster, pagelines, paypal, pied_piper, pied_piper_alt, pied_piper_pp, pinterest, pinterest_p, pinterest_square, product_hunt, qq, ra, rebel, reddit, reddit_alien, reddit_square, renren, resistance, safari, scribd, sellsy, share_alt, share_alt_square, shirtsinbulk, simplybuilt, skyatlas, skype, slack, slideshare, snapchat, snapchat_ghost, snapchat_square, soundcloud, spotify, stack_exchange, stack_overflow, steam, steam_square, stumbleupon, stumbleupon_circle, tencent_weibo, themeisle, trello, tripadvisor, tumblr, tumblr_square, twitch, twitter, twitter_square, usb, viacoin, viadeo, viadeo_square, vimeo, vimeo_square, vine, vk, wechat, weibo, weixin, whatsapp, wikipedia_w, windows, wordpress, wpbeginner, wpforms, xing, xing_square, y_combinator, y_combinator_square, yahoo, yc, yc_square, yelp, yoast, youtube, youtube_play, youtube_square\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adn",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "amazon",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "android",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "angellist",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "apple",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "behance",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "behance_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bitbucket",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bitbucket_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bitcoin",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "black_tie",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bluetooth_b",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "btc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "buysellads",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_amex",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_diners_club",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_discover",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_jcb",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_mastercard",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_paypal",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_stripe",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc_visa",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "chrome",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "codepen",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "codiepie",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "connectdevelop",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "contao",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "css3",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "dashcube",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "delicious",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "deviantart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "digg",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "dribbble",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "dropbox",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "drupal",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "edge",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "empire",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "envira",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "expeditedssl",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fa",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "facebook",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "facebook_f",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "facebook_official",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "facebook_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "firefox",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "first_order",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fiveHundredPX",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "flickr",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "font_awesome",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fonticons",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fort_awesome",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "forumbee",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "foursquare",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ge",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "get_pocket",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gg",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gg_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "git",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "git_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "github",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "github_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "github_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gitlab",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gittip",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "glide",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "glide_g",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "google",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "google_plus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "google_plus_circle",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "google_plus_official",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "google_plus_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "google_wallet",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gratipay",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hacker_news",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "houzz",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "html5",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "instagram",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "internet_explorer",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ioxhost",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "joomla",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "jsfiddle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "lastfm",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "lastfm_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "leanpub",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "linkedin",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "linkedin_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "linux",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "maxcdn",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "meanpath",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "medium",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "mixcloud",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "modx",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "odnoklassniki",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "odnoklassniki_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "opencart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "openid",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "opera",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "optin_monster",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pagelines",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "paypal",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pied_piper",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pied_piper_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pied_piper_pp",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pinterest",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pinterest_p",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pinterest_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "product_hunt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "qq",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ra",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "rebel",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "reddit",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "reddit_alien",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "reddit_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "renren",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "resistance",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "safari",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "scribd",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sellsy",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share_alt_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "shirtsinbulk",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "simplybuilt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "skyatlas",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "skype",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "slack",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "slideshare",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "snapchat",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "snapchat_ghost",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "snapchat_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "soundcloud",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "spotify",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "stack_exchange",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "stack_overflow",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "steam",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "steam_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "stumbleupon",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "stumbleupon_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tencent_weibo",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "themeisle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "trello",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tripadvisor",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tumblr",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tumblr_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "twitch",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "twitter",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "twitter_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "usb",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "viacoin",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "viadeo",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "viadeo_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "vimeo",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "vimeo_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "vine",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "vk",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wechat",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "weibo",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "weixin",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "whatsapp",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wikipedia_w",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "windows",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wordpress",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wpbeginner",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wpforms",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "xing",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "xing_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "y_combinator",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "y_combinator_square",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "yahoo",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "yc",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "yc_square",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "yelp",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "yoast",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "youtube",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "youtube_play",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "youtube_square",
            "comment": "",
            "type": "Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "FontAwesome.Web",
        "comment": "\n# Icons as Html\n@docs adjust, american_sign_language_interpreting, anchor, archive, area_chart, arrows, arrows_h, arrows_v, asl_interpreting, assistive_listening_systems, asterisk, at, audio_description, automobile, balance_scale, ban, bank, bar_chart, bar_chart_o, barcode, bars, battery_0, battery_1, battery_2, battery_3, battery_4, battery_empty, battery_full, battery_half, battery_quarter, battery_three_quarters, bed, beer, bell, bell_o, bell_slash, bell_slash_o, bicycle, binoculars, birthday_cake, blind, bluetooth, bluetooth_b, bolt, bomb, book, bookmark, bookmark_o, braille, briefcase, bug, building, building_o, bullhorn, bullseye, bus, cab, calculator, calendar, calendar_check_o, calendar_minus_o, calendar_o, calendar_plus_o, calendar_times_o, camera, camera_retro, car, caret_square_o_down, caret_square_o_left, caret_square_o_right, caret_square_o_up, cart_arrow_down, cart_plus, cc, certificate, check, check_circle, check_circle_o, check_square, check_square_o, child, circle, circle_o, circle_o_notch, circle_thin, clock_o, clone, close, cloud, cloud_download, cloud_upload, code, code_fork, coffee, cog, cogs, comment, comment_o, commenting, commenting_o, comments, comments_o, compass, copyright, creative_commons, credit_card, credit_card_alt, crop, crosshairs, cube, cubes, cutlery, dashboard, database, deaf, deafness, desktop, diamond, dot_circle_o, download, edit, ellipsis_h, ellipsis_v, envelope, envelope_o, envelope_square, eraser, exchange, exclamation, exclamation_circle, exclamation_triangle, external_link, external_link_square, eye, eye_slash, eyedropper, fax, feed, female, fighter_jet, file_archive_o, file_audio_o, file_code_o, file_excel_o, file_image_o, file_movie_o, file_pdf_o, file_photo_o, file_picture_o, file_powerpoint_o, file_sound_o, file_video_o, file_word_o, file_zip_o, film, filter, fire, fire_extinguisher, flag, flag_checkered, flag_o, flash, flask, folder, folder_o, folder_open, folder_open_o, frown_o, futbol_o, gamepad, gavel, gear, gears, gift, glass, globe, graduation_cap, group, hand_grab_o, hand_lizard_o, hand_paper_o, hand_peace_o, hand_pointer_o, hand_rock_o, hand_scissors_o, hand_spock_o, hand_stop_o, hard_of_hearing, hashtag, hdd_o, headphones, heart, heart_o, heartbeat, history, home, hotel, hourglass, hourglass_1, hourglass_2, hourglass_3, hourglass_end, hourglass_half, hourglass_o, hourglass_start, i_cursor, image, inbox, industry, info, info_circle, institution, key, keyboard_o, language, laptop, leaf, legal, lemon_o, level_down, level_up, life_bouy, life_buoy, life_ring, life_saver, lightbulb_o, line_chart, location_arrow, lock, low_vision, magic, magnet, mail_forward, mail_reply, mail_reply_all, male, map, map_marker, map_o, map_pin, map_signs, meh_o, microphone, microphone_slash, minus, minus_circle, minus_square, minus_square_o, mobile, mobile_phone, money, moon_o, mortar_board, motorcycle, mouse_pointer, music, navicon, newspaper_o, object_group, object_ungroup, paint_brush, paper_plane, paper_plane_o, paw, pencil, pencil_square, pencil_square_o, percent, phone, phone_square, photo, picture_o, pie_chart, plane, plug, plus, plus_circle, plus_square, plus_square_o, power_off, print, puzzle_piece, qrcode, question, question_circle, question_circle_o, quote_left, quote_right, random, recycle, refresh, registered, remove, reorder, reply, reply_all, retweet, road, rocket, rss, rss_square, search, search_minus, search_plus, send, send_o, server, share, share_alt, share_alt_square, share_square, share_square_o, shield, ship, shopping_bag, shopping_basket, shopping_cart, sign_in, sign_language, sign_out, signal, signing, sitemap, sliders, smile_o, soccer_ball_o, sort, sort_alpha_asc, sort_alpha_desc, sort_amount_asc, sort_amount_desc, sort_asc, sort_desc, sort_down, sort_numeric_asc, sort_numeric_desc, sort_up, space_shuttle, spinner, spoon, square, square_o, star, star_half, star_half_empty, star_half_full, star_half_o, star_o, sticky_note, sticky_note_o, street_view, suitcase, sun_o, support, tablet, tachometer, tag, tags, tasks, taxi, television, terminal, thumb_tack, thumbs_down, thumbs_o_down, thumbs_o_up, thumbs_up, ticket, times, times_circle, times_circle_o, tint, toggle_down, toggle_left, toggle_off, toggle_on, toggle_right, toggle_up, trademark, trash, trash_o, tree, trophy, truck, tty, tv, umbrella, universal_access, university, unlock, unlock_alt, unsorted, upload, user, user_plus, user_secret, user_times, users, video_camera, volume_control_phone, volume_down, volume_off, volume_up, warning, wheelchair, wheelchair_alt, wifi, wrench\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adjust",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "american_sign_language_interpreting",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "anchor",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "archive",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "area_chart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "arrows",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "arrows_h",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "arrows_v",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "asl_interpreting",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "assistive_listening_systems",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "asterisk",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "at",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "audio_description",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "automobile",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "balance_scale",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ban",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bank",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "bar_chart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bar_chart_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "barcode",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bars",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_0",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_1",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_2",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_3",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_4",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_empty",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_full",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_half",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_quarter",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "battery_three_quarters",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bed",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "beer",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bell",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bell_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bell_slash",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bell_slash_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bicycle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "binoculars",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "birthday_cake",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "blind",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bluetooth_b",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bolt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bomb",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "book",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bookmark",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bookmark_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "braille",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "briefcase",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bug",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "building",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "building_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bullhorn",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bullseye",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "bus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cab",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "calculator",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "calendar",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "calendar_check_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "calendar_minus_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "calendar_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "calendar_plus_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "calendar_times_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "camera",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "camera_retro",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "car",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "caret_square_o_down",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "caret_square_o_left",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "caret_square_o_right",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "caret_square_o_up",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cart_arrow_down",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cart_plus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "certificate",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "check",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "check_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "check_circle_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "check_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "check_square_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "child",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "circle_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "circle_o_notch",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "circle_thin",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "clock_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "clone",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "close",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "cloud",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cloud_download",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cloud_upload",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "code",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "code_fork",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "coffee",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cog",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cogs",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "comment",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "comment_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "commenting",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "commenting_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "comments",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "comments_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "compass",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "copyright",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "creative_commons",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "credit_card",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "credit_card_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "crop",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "crosshairs",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cube",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cubes",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "cutlery",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "dashboard",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "database",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "deaf",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "deafness",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "desktop",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "diamond",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "dot_circle_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "download",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "edit",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "ellipsis_h",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ellipsis_v",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "envelope",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "envelope_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "envelope_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "eraser",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "exchange",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "exclamation",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "exclamation_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "exclamation_triangle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "external_link",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "external_link_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "eye",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "eye_slash",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "eyedropper",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fax",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "feed",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "female",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fighter_jet",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_archive_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_audio_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_code_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_excel_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_image_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_movie_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "file_pdf_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_photo_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "file_picture_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "file_powerpoint_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_sound_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "file_video_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_word_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "file_zip_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "film",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fire",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "fire_extinguisher",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "flag",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "flag_checkered",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "flag_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "flash",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "flask",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "folder",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "folder_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "folder_open",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "folder_open_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "frown_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "futbol_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gamepad",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gavel",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "gear",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "gears",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "gift",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "glass",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "globe",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "graduation_cap",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "group",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_grab_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_lizard_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_paper_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_peace_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_pointer_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_rock_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_scissors_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_spock_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hand_stop_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hard_of_hearing",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hashtag",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hdd_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "headphones",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "heart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "heart_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "heartbeat",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "history",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "home",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hotel",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_1",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_2",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_3",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_end",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_half",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "hourglass_start",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "i_cursor",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "image",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "inbox",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "industry",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "info",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "info_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "institution",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "key",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "keyboard_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "language",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "laptop",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "leaf",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "legal",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "lemon_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "level_down",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "level_up",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "life_bouy",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "life_buoy",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "life_ring",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "life_saver",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "lightbulb_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "line_chart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "location_arrow",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "lock",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "low_vision",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "magic",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "magnet",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "mail_forward",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "mail_reply",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "mail_reply_all",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "male",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "map_marker",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "map_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "map_pin",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "map_signs",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "meh_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "microphone",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "microphone_slash",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "minus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "minus_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "minus_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "minus_square_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "mobile",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "mobile_phone",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "money",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "moon_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "mortar_board",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "motorcycle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "mouse_pointer",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "music",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "navicon",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "newspaper_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "object_group",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "object_ungroup",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "paint_brush",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "paper_plane",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "paper_plane_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "paw",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pencil",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pencil_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pencil_square_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "percent",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "phone",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "phone_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "photo",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "picture_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "pie_chart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "plane",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "plug",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "plus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "plus_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "plus_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "plus_square_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "power_off",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "print",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "puzzle_piece",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "qrcode",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "question",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "question_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "question_circle_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "quote_left",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "quote_right",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "random",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "recycle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "refresh",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "registered",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "remove",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "reorder",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "reply",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "reply_all",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "retweet",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "road",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "rocket",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "rss",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "rss_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "search",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "search_minus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "search_plus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "send",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "send_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "server",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share_alt_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share_square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "share_square_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "shield",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ship",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "shopping_bag",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "shopping_basket",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "shopping_cart",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sign_in",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sign_language",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sign_out",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "signal",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "signing",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "sitemap",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sliders",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "smile_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "soccer_ball_o",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "sort",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_alpha_asc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_alpha_desc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_amount_asc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_amount_desc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_asc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_desc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_down",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_numeric_asc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_numeric_desc",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sort_up",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "space_shuttle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "spinner",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "spoon",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "square",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "square_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "star",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "star_half",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "star_half_empty",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "star_half_full",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "star_half_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "star_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sticky_note",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sticky_note_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "street_view",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "suitcase",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "sun_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "support",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "tablet",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tachometer",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tag",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tags",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tasks",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "taxi",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "television",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "terminal",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "thumb_tack",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "thumbs_down",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "thumbs_o_down",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "thumbs_o_up",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "thumbs_up",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "ticket",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "times",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "times_circle",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "times_circle_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tint",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "toggle_down",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "toggle_left",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "toggle_off",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "toggle_on",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "toggle_right",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "toggle_up",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "trademark",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "trash",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "trash_o",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tree",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "trophy",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "truck",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tty",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "tv",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "umbrella",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "universal_access",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "university",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "unlock",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "unlock_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "unsorted",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "upload",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "user",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "user_plus",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "user_secret",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "user_times",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "users",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "video_camera",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "volume_control_phone",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "volume_down",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "volume_off",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "volume_up",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "warning",
            "comment": " alias ",
            "type": "Html.Html msg"
          },
          {
            "name": "wheelchair",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wheelchair_alt",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wifi",
            "comment": "",
            "type": "Html.Html msg"
          },
          {
            "name": "wrench",
            "comment": "",
            "type": "Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "FontAwesome.Brand.Class",
        "comment": "\n# FontAwesome classes raw (no `\"fa-\"` prefix)\n@docs fiveHundredPX, adn, amazon, android, angellist, apple, behance, behance_square, bitbucket, bitbucket_square, bitcoin, black_tie, bluetooth, bluetooth_b, btc, buysellads, cc_amex, cc_diners_club, cc_discover, cc_jcb, cc_mastercard, cc_paypal, cc_stripe, cc_visa, chrome, codepen, codiepie, connectdevelop, contao, css3, dashcube, delicious, deviantart, digg, dribbble, dropbox, drupal, edge, empire, envira, expeditedssl, fa, facebook, facebook_f, facebook_official, facebook_square, firefox, first_order, flickr, font_awesome, fonticons, fort_awesome, forumbee, foursquare, ge, get_pocket, gg, gg_circle, git, git_square, github, github_alt, github_square, gitlab, gittip, glide, glide_g, google, google_plus, google_plus_circle, google_plus_official, google_plus_square, google_wallet, gratipay, hacker_news, houzz, html5, instagram, internet_explorer, ioxhost, joomla, jsfiddle, lastfm, lastfm_square, leanpub, linkedin, linkedin_square, linux, maxcdn, meanpath, medium, mixcloud, modx, odnoklassniki, odnoklassniki_square, opencart, openid, opera, optin_monster, pagelines, paypal, pied_piper, pied_piper_alt, pied_piper_pp, pinterest, pinterest_p, pinterest_square, product_hunt, qq, ra, rebel, reddit, reddit_alien, reddit_square, renren, resistance, safari, scribd, sellsy, share_alt, share_alt_square, shirtsinbulk, simplybuilt, skyatlas, skype, slack, slideshare, snapchat, snapchat_ghost, snapchat_square, soundcloud, spotify, stack_exchange, stack_overflow, steam, steam_square, stumbleupon, stumbleupon_circle, tencent_weibo, themeisle, trello, tripadvisor, tumblr, tumblr_square, twitch, twitter, twitter_square, usb, viacoin, viadeo, viadeo_square, vimeo, vimeo_square, vine, vk, wechat, weibo, weixin, whatsapp, wikipedia_w, windows, wordpress, wpbeginner, wpforms, xing, xing_square, y_combinator, y_combinator_square, yahoo, yc, yc_square, yelp, yoast, youtube, youtube_play, youtube_square\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adn",
            "comment": "",
            "type": "String"
          },
          {
            "name": "amazon",
            "comment": "",
            "type": "String"
          },
          {
            "name": "android",
            "comment": "",
            "type": "String"
          },
          {
            "name": "angellist",
            "comment": "",
            "type": "String"
          },
          {
            "name": "apple",
            "comment": "",
            "type": "String"
          },
          {
            "name": "behance",
            "comment": "",
            "type": "String"
          },
          {
            "name": "behance_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bitbucket",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bitbucket_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bitcoin",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "black_tie",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bluetooth_b",
            "comment": "",
            "type": "String"
          },
          {
            "name": "btc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "buysellads",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_amex",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_diners_club",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_discover",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_jcb",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_mastercard",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_paypal",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_stripe",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc_visa",
            "comment": "",
            "type": "String"
          },
          {
            "name": "chrome",
            "comment": "",
            "type": "String"
          },
          {
            "name": "codepen",
            "comment": "",
            "type": "String"
          },
          {
            "name": "codiepie",
            "comment": "",
            "type": "String"
          },
          {
            "name": "connectdevelop",
            "comment": "",
            "type": "String"
          },
          {
            "name": "contao",
            "comment": "",
            "type": "String"
          },
          {
            "name": "css3",
            "comment": "",
            "type": "String"
          },
          {
            "name": "dashcube",
            "comment": "",
            "type": "String"
          },
          {
            "name": "delicious",
            "comment": "",
            "type": "String"
          },
          {
            "name": "deviantart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "digg",
            "comment": "",
            "type": "String"
          },
          {
            "name": "dribbble",
            "comment": "",
            "type": "String"
          },
          {
            "name": "dropbox",
            "comment": "",
            "type": "String"
          },
          {
            "name": "drupal",
            "comment": "",
            "type": "String"
          },
          {
            "name": "edge",
            "comment": "",
            "type": "String"
          },
          {
            "name": "empire",
            "comment": "",
            "type": "String"
          },
          {
            "name": "envira",
            "comment": "",
            "type": "String"
          },
          {
            "name": "expeditedssl",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fa",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "facebook",
            "comment": "",
            "type": "String"
          },
          {
            "name": "facebook_f",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "facebook_official",
            "comment": "",
            "type": "String"
          },
          {
            "name": "facebook_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "firefox",
            "comment": "",
            "type": "String"
          },
          {
            "name": "first_order",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fiveHundredPX",
            "comment": "",
            "type": "String"
          },
          {
            "name": "flickr",
            "comment": "",
            "type": "String"
          },
          {
            "name": "font_awesome",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fonticons",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fort_awesome",
            "comment": "",
            "type": "String"
          },
          {
            "name": "forumbee",
            "comment": "",
            "type": "String"
          },
          {
            "name": "foursquare",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ge",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "get_pocket",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gg",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gg_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "git",
            "comment": "",
            "type": "String"
          },
          {
            "name": "git_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "github",
            "comment": "",
            "type": "String"
          },
          {
            "name": "github_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "github_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gitlab",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gittip",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "glide",
            "comment": "",
            "type": "String"
          },
          {
            "name": "glide_g",
            "comment": "",
            "type": "String"
          },
          {
            "name": "google",
            "comment": "",
            "type": "String"
          },
          {
            "name": "google_plus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "google_plus_circle",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "google_plus_official",
            "comment": "",
            "type": "String"
          },
          {
            "name": "google_plus_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "google_wallet",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gratipay",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hacker_news",
            "comment": "",
            "type": "String"
          },
          {
            "name": "houzz",
            "comment": "",
            "type": "String"
          },
          {
            "name": "html5",
            "comment": "",
            "type": "String"
          },
          {
            "name": "instagram",
            "comment": "",
            "type": "String"
          },
          {
            "name": "internet_explorer",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ioxhost",
            "comment": "",
            "type": "String"
          },
          {
            "name": "joomla",
            "comment": "",
            "type": "String"
          },
          {
            "name": "jsfiddle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "lastfm",
            "comment": "",
            "type": "String"
          },
          {
            "name": "lastfm_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "leanpub",
            "comment": "",
            "type": "String"
          },
          {
            "name": "linkedin",
            "comment": "",
            "type": "String"
          },
          {
            "name": "linkedin_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "linux",
            "comment": "",
            "type": "String"
          },
          {
            "name": "maxcdn",
            "comment": "",
            "type": "String"
          },
          {
            "name": "meanpath",
            "comment": "",
            "type": "String"
          },
          {
            "name": "medium",
            "comment": "",
            "type": "String"
          },
          {
            "name": "mixcloud",
            "comment": "",
            "type": "String"
          },
          {
            "name": "modx",
            "comment": "",
            "type": "String"
          },
          {
            "name": "odnoklassniki",
            "comment": "",
            "type": "String"
          },
          {
            "name": "odnoklassniki_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "opencart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "openid",
            "comment": "",
            "type": "String"
          },
          {
            "name": "opera",
            "comment": "",
            "type": "String"
          },
          {
            "name": "optin_monster",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pagelines",
            "comment": "",
            "type": "String"
          },
          {
            "name": "paypal",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pied_piper",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pied_piper_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pied_piper_pp",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pinterest",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pinterest_p",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pinterest_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "product_hunt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "qq",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ra",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "rebel",
            "comment": "",
            "type": "String"
          },
          {
            "name": "reddit",
            "comment": "",
            "type": "String"
          },
          {
            "name": "reddit_alien",
            "comment": "",
            "type": "String"
          },
          {
            "name": "reddit_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "renren",
            "comment": "",
            "type": "String"
          },
          {
            "name": "resistance",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "safari",
            "comment": "",
            "type": "String"
          },
          {
            "name": "scribd",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sellsy",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share_alt_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "shirtsinbulk",
            "comment": "",
            "type": "String"
          },
          {
            "name": "simplybuilt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "skyatlas",
            "comment": "",
            "type": "String"
          },
          {
            "name": "skype",
            "comment": "",
            "type": "String"
          },
          {
            "name": "slack",
            "comment": "",
            "type": "String"
          },
          {
            "name": "slideshare",
            "comment": "",
            "type": "String"
          },
          {
            "name": "snapchat",
            "comment": "",
            "type": "String"
          },
          {
            "name": "snapchat_ghost",
            "comment": "",
            "type": "String"
          },
          {
            "name": "snapchat_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "soundcloud",
            "comment": "",
            "type": "String"
          },
          {
            "name": "spotify",
            "comment": "",
            "type": "String"
          },
          {
            "name": "stack_exchange",
            "comment": "",
            "type": "String"
          },
          {
            "name": "stack_overflow",
            "comment": "",
            "type": "String"
          },
          {
            "name": "steam",
            "comment": "",
            "type": "String"
          },
          {
            "name": "steam_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "stumbleupon",
            "comment": "",
            "type": "String"
          },
          {
            "name": "stumbleupon_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tencent_weibo",
            "comment": "",
            "type": "String"
          },
          {
            "name": "themeisle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "trello",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tripadvisor",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tumblr",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tumblr_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "twitch",
            "comment": "",
            "type": "String"
          },
          {
            "name": "twitter",
            "comment": "",
            "type": "String"
          },
          {
            "name": "twitter_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "usb",
            "comment": "",
            "type": "String"
          },
          {
            "name": "viacoin",
            "comment": "",
            "type": "String"
          },
          {
            "name": "viadeo",
            "comment": "",
            "type": "String"
          },
          {
            "name": "viadeo_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "vimeo",
            "comment": "",
            "type": "String"
          },
          {
            "name": "vimeo_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "vine",
            "comment": "",
            "type": "String"
          },
          {
            "name": "vk",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wechat",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "weibo",
            "comment": "",
            "type": "String"
          },
          {
            "name": "weixin",
            "comment": "",
            "type": "String"
          },
          {
            "name": "whatsapp",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wikipedia_w",
            "comment": "",
            "type": "String"
          },
          {
            "name": "windows",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wordpress",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wpbeginner",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wpforms",
            "comment": "",
            "type": "String"
          },
          {
            "name": "xing",
            "comment": "",
            "type": "String"
          },
          {
            "name": "xing_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "y_combinator",
            "comment": "",
            "type": "String"
          },
          {
            "name": "y_combinator_square",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "yahoo",
            "comment": "",
            "type": "String"
          },
          {
            "name": "yc",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "yc_square",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "yelp",
            "comment": "",
            "type": "String"
          },
          {
            "name": "yoast",
            "comment": "",
            "type": "String"
          },
          {
            "name": "youtube",
            "comment": "",
            "type": "String"
          },
          {
            "name": "youtube_play",
            "comment": "",
            "type": "String"
          },
          {
            "name": "youtube_square",
            "comment": "",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "FontAwesome.Web.Class",
        "comment": "\n# FontAwesome classes raw (no `\"fa-\"` prefix)\n@docs adjust, american_sign_language_interpreting, anchor, archive, area_chart, arrows, arrows_h, arrows_v, asl_interpreting, assistive_listening_systems, asterisk, at, audio_description, automobile, balance_scale, ban, bank, bar_chart, bar_chart_o, barcode, bars, battery_0, battery_1, battery_2, battery_3, battery_4, battery_empty, battery_full, battery_half, battery_quarter, battery_three_quarters, bed, beer, bell, bell_o, bell_slash, bell_slash_o, bicycle, binoculars, birthday_cake, blind, bluetooth, bluetooth_b, bolt, bomb, book, bookmark, bookmark_o, braille, briefcase, bug, building, building_o, bullhorn, bullseye, bus, cab, calculator, calendar, calendar_check_o, calendar_minus_o, calendar_o, calendar_plus_o, calendar_times_o, camera, camera_retro, car, caret_square_o_down, caret_square_o_left, caret_square_o_right, caret_square_o_up, cart_arrow_down, cart_plus, cc, certificate, check, check_circle, check_circle_o, check_square, check_square_o, child, circle, circle_o, circle_o_notch, circle_thin, clock_o, clone, close, cloud, cloud_download, cloud_upload, code, code_fork, coffee, cog, cogs, comment, comment_o, commenting, commenting_o, comments, comments_o, compass, copyright, creative_commons, credit_card, credit_card_alt, crop, crosshairs, cube, cubes, cutlery, dashboard, database, deaf, deafness, desktop, diamond, dot_circle_o, download, edit, ellipsis_h, ellipsis_v, envelope, envelope_o, envelope_square, eraser, exchange, exclamation, exclamation_circle, exclamation_triangle, external_link, external_link_square, eye, eye_slash, eyedropper, fax, feed, female, fighter_jet, file_archive_o, file_audio_o, file_code_o, file_excel_o, file_image_o, file_movie_o, file_pdf_o, file_photo_o, file_picture_o, file_powerpoint_o, file_sound_o, file_video_o, file_word_o, file_zip_o, film, filter, fire, fire_extinguisher, flag, flag_checkered, flag_o, flash, flask, folder, folder_o, folder_open, folder_open_o, frown_o, futbol_o, gamepad, gavel, gear, gears, gift, glass, globe, graduation_cap, group, hand_grab_o, hand_lizard_o, hand_paper_o, hand_peace_o, hand_pointer_o, hand_rock_o, hand_scissors_o, hand_spock_o, hand_stop_o, hard_of_hearing, hashtag, hdd_o, headphones, heart, heart_o, heartbeat, history, home, hotel, hourglass, hourglass_1, hourglass_2, hourglass_3, hourglass_end, hourglass_half, hourglass_o, hourglass_start, i_cursor, image, inbox, industry, info, info_circle, institution, key, keyboard_o, language, laptop, leaf, legal, lemon_o, level_down, level_up, life_bouy, life_buoy, life_ring, life_saver, lightbulb_o, line_chart, location_arrow, lock, low_vision, magic, magnet, mail_forward, mail_reply, mail_reply_all, male, map, map_marker, map_o, map_pin, map_signs, meh_o, microphone, microphone_slash, minus, minus_circle, minus_square, minus_square_o, mobile, mobile_phone, money, moon_o, mortar_board, motorcycle, mouse_pointer, music, navicon, newspaper_o, object_group, object_ungroup, paint_brush, paper_plane, paper_plane_o, paw, pencil, pencil_square, pencil_square_o, percent, phone, phone_square, photo, picture_o, pie_chart, plane, plug, plus, plus_circle, plus_square, plus_square_o, power_off, print, puzzle_piece, qrcode, question, question_circle, question_circle_o, quote_left, quote_right, random, recycle, refresh, registered, remove, reorder, reply, reply_all, retweet, road, rocket, rss, rss_square, search, search_minus, search_plus, send, send_o, server, share, share_alt, share_alt_square, share_square, share_square_o, shield, ship, shopping_bag, shopping_basket, shopping_cart, sign_in, sign_language, sign_out, signal, signing, sitemap, sliders, smile_o, soccer_ball_o, sort, sort_alpha_asc, sort_alpha_desc, sort_amount_asc, sort_amount_desc, sort_asc, sort_desc, sort_down, sort_numeric_asc, sort_numeric_desc, sort_up, space_shuttle, spinner, spoon, square, square_o, star, star_half, star_half_empty, star_half_full, star_half_o, star_o, sticky_note, sticky_note_o, street_view, suitcase, sun_o, support, tablet, tachometer, tag, tags, tasks, taxi, television, terminal, thumb_tack, thumbs_down, thumbs_o_down, thumbs_o_up, thumbs_up, ticket, times, times_circle, times_circle_o, tint, toggle_down, toggle_left, toggle_off, toggle_on, toggle_right, toggle_up, trademark, trash, trash_o, tree, trophy, truck, tty, tv, umbrella, universal_access, university, unlock, unlock_alt, unsorted, upload, user, user_plus, user_secret, user_times, users, video_camera, volume_control_phone, volume_down, volume_off, volume_up, warning, wheelchair, wheelchair_alt, wifi, wrench\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adjust",
            "comment": "",
            "type": "String"
          },
          {
            "name": "american_sign_language_interpreting",
            "comment": "",
            "type": "String"
          },
          {
            "name": "anchor",
            "comment": "",
            "type": "String"
          },
          {
            "name": "archive",
            "comment": "",
            "type": "String"
          },
          {
            "name": "area_chart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "arrows",
            "comment": "",
            "type": "String"
          },
          {
            "name": "arrows_h",
            "comment": "",
            "type": "String"
          },
          {
            "name": "arrows_v",
            "comment": "",
            "type": "String"
          },
          {
            "name": "asl_interpreting",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "assistive_listening_systems",
            "comment": "",
            "type": "String"
          },
          {
            "name": "asterisk",
            "comment": "",
            "type": "String"
          },
          {
            "name": "at",
            "comment": "",
            "type": "String"
          },
          {
            "name": "audio_description",
            "comment": "",
            "type": "String"
          },
          {
            "name": "automobile",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "balance_scale",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ban",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bank",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "bar_chart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bar_chart_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "barcode",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bars",
            "comment": "",
            "type": "String"
          },
          {
            "name": "battery_0",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "battery_1",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "battery_2",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "battery_3",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "battery_4",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "battery_empty",
            "comment": "",
            "type": "String"
          },
          {
            "name": "battery_full",
            "comment": "",
            "type": "String"
          },
          {
            "name": "battery_half",
            "comment": "",
            "type": "String"
          },
          {
            "name": "battery_quarter",
            "comment": "",
            "type": "String"
          },
          {
            "name": "battery_three_quarters",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bed",
            "comment": "",
            "type": "String"
          },
          {
            "name": "beer",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bell",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bell_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bell_slash",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bell_slash_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bicycle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "binoculars",
            "comment": "",
            "type": "String"
          },
          {
            "name": "birthday_cake",
            "comment": "",
            "type": "String"
          },
          {
            "name": "blind",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bluetooth_b",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bolt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bomb",
            "comment": "",
            "type": "String"
          },
          {
            "name": "book",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bookmark",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bookmark_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "braille",
            "comment": "",
            "type": "String"
          },
          {
            "name": "briefcase",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bug",
            "comment": "",
            "type": "String"
          },
          {
            "name": "building",
            "comment": "",
            "type": "String"
          },
          {
            "name": "building_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bullhorn",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bullseye",
            "comment": "",
            "type": "String"
          },
          {
            "name": "bus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cab",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "calculator",
            "comment": "",
            "type": "String"
          },
          {
            "name": "calendar",
            "comment": "",
            "type": "String"
          },
          {
            "name": "calendar_check_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "calendar_minus_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "calendar_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "calendar_plus_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "calendar_times_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "camera",
            "comment": "",
            "type": "String"
          },
          {
            "name": "camera_retro",
            "comment": "",
            "type": "String"
          },
          {
            "name": "car",
            "comment": "",
            "type": "String"
          },
          {
            "name": "caret_square_o_down",
            "comment": "",
            "type": "String"
          },
          {
            "name": "caret_square_o_left",
            "comment": "",
            "type": "String"
          },
          {
            "name": "caret_square_o_right",
            "comment": "",
            "type": "String"
          },
          {
            "name": "caret_square_o_up",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cart_arrow_down",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cart_plus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "certificate",
            "comment": "",
            "type": "String"
          },
          {
            "name": "check",
            "comment": "",
            "type": "String"
          },
          {
            "name": "check_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "check_circle_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "check_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "check_square_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "child",
            "comment": "",
            "type": "String"
          },
          {
            "name": "circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "circle_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "circle_o_notch",
            "comment": "",
            "type": "String"
          },
          {
            "name": "circle_thin",
            "comment": "",
            "type": "String"
          },
          {
            "name": "clock_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "clone",
            "comment": "",
            "type": "String"
          },
          {
            "name": "close",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "cloud",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cloud_download",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cloud_upload",
            "comment": "",
            "type": "String"
          },
          {
            "name": "code",
            "comment": "",
            "type": "String"
          },
          {
            "name": "code_fork",
            "comment": "",
            "type": "String"
          },
          {
            "name": "coffee",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cog",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cogs",
            "comment": "",
            "type": "String"
          },
          {
            "name": "comment",
            "comment": "",
            "type": "String"
          },
          {
            "name": "comment_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "commenting",
            "comment": "",
            "type": "String"
          },
          {
            "name": "commenting_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "comments",
            "comment": "",
            "type": "String"
          },
          {
            "name": "comments_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "compass",
            "comment": "",
            "type": "String"
          },
          {
            "name": "copyright",
            "comment": "",
            "type": "String"
          },
          {
            "name": "creative_commons",
            "comment": "",
            "type": "String"
          },
          {
            "name": "credit_card",
            "comment": "",
            "type": "String"
          },
          {
            "name": "credit_card_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "crop",
            "comment": "",
            "type": "String"
          },
          {
            "name": "crosshairs",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cube",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cubes",
            "comment": "",
            "type": "String"
          },
          {
            "name": "cutlery",
            "comment": "",
            "type": "String"
          },
          {
            "name": "dashboard",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "database",
            "comment": "",
            "type": "String"
          },
          {
            "name": "deaf",
            "comment": "",
            "type": "String"
          },
          {
            "name": "deafness",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "desktop",
            "comment": "",
            "type": "String"
          },
          {
            "name": "diamond",
            "comment": "",
            "type": "String"
          },
          {
            "name": "dot_circle_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "download",
            "comment": "",
            "type": "String"
          },
          {
            "name": "edit",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "ellipsis_h",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ellipsis_v",
            "comment": "",
            "type": "String"
          },
          {
            "name": "envelope",
            "comment": "",
            "type": "String"
          },
          {
            "name": "envelope_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "envelope_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "eraser",
            "comment": "",
            "type": "String"
          },
          {
            "name": "exchange",
            "comment": "",
            "type": "String"
          },
          {
            "name": "exclamation",
            "comment": "",
            "type": "String"
          },
          {
            "name": "exclamation_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "exclamation_triangle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "external_link",
            "comment": "",
            "type": "String"
          },
          {
            "name": "external_link_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "eye",
            "comment": "",
            "type": "String"
          },
          {
            "name": "eye_slash",
            "comment": "",
            "type": "String"
          },
          {
            "name": "eyedropper",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fax",
            "comment": "",
            "type": "String"
          },
          {
            "name": "feed",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "female",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fighter_jet",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_archive_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_audio_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_code_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_excel_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_image_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_movie_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "file_pdf_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_photo_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "file_picture_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "file_powerpoint_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_sound_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "file_video_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_word_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "file_zip_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "film",
            "comment": "",
            "type": "String"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fire",
            "comment": "",
            "type": "String"
          },
          {
            "name": "fire_extinguisher",
            "comment": "",
            "type": "String"
          },
          {
            "name": "flag",
            "comment": "",
            "type": "String"
          },
          {
            "name": "flag_checkered",
            "comment": "",
            "type": "String"
          },
          {
            "name": "flag_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "flash",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "flask",
            "comment": "",
            "type": "String"
          },
          {
            "name": "folder",
            "comment": "",
            "type": "String"
          },
          {
            "name": "folder_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "folder_open",
            "comment": "",
            "type": "String"
          },
          {
            "name": "folder_open_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "frown_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "futbol_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gamepad",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gavel",
            "comment": "",
            "type": "String"
          },
          {
            "name": "gear",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "gears",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "gift",
            "comment": "",
            "type": "String"
          },
          {
            "name": "glass",
            "comment": "",
            "type": "String"
          },
          {
            "name": "globe",
            "comment": "",
            "type": "String"
          },
          {
            "name": "graduation_cap",
            "comment": "",
            "type": "String"
          },
          {
            "name": "group",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hand_grab_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hand_lizard_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_paper_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_peace_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_pointer_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_rock_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_scissors_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_spock_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hand_stop_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hard_of_hearing",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hashtag",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hdd_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "headphones",
            "comment": "",
            "type": "String"
          },
          {
            "name": "heart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "heart_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "heartbeat",
            "comment": "",
            "type": "String"
          },
          {
            "name": "history",
            "comment": "",
            "type": "String"
          },
          {
            "name": "home",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hotel",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hourglass",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hourglass_1",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hourglass_2",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hourglass_3",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "hourglass_end",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hourglass_half",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hourglass_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "hourglass_start",
            "comment": "",
            "type": "String"
          },
          {
            "name": "i_cursor",
            "comment": "",
            "type": "String"
          },
          {
            "name": "image",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "inbox",
            "comment": "",
            "type": "String"
          },
          {
            "name": "industry",
            "comment": "",
            "type": "String"
          },
          {
            "name": "info",
            "comment": "",
            "type": "String"
          },
          {
            "name": "info_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "institution",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "key",
            "comment": "",
            "type": "String"
          },
          {
            "name": "keyboard_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "language",
            "comment": "",
            "type": "String"
          },
          {
            "name": "laptop",
            "comment": "",
            "type": "String"
          },
          {
            "name": "leaf",
            "comment": "",
            "type": "String"
          },
          {
            "name": "legal",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "lemon_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "level_down",
            "comment": "",
            "type": "String"
          },
          {
            "name": "level_up",
            "comment": "",
            "type": "String"
          },
          {
            "name": "life_bouy",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "life_buoy",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "life_ring",
            "comment": "",
            "type": "String"
          },
          {
            "name": "life_saver",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "lightbulb_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "line_chart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "location_arrow",
            "comment": "",
            "type": "String"
          },
          {
            "name": "lock",
            "comment": "",
            "type": "String"
          },
          {
            "name": "low_vision",
            "comment": "",
            "type": "String"
          },
          {
            "name": "magic",
            "comment": "",
            "type": "String"
          },
          {
            "name": "magnet",
            "comment": "",
            "type": "String"
          },
          {
            "name": "mail_forward",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "mail_reply",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "mail_reply_all",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "male",
            "comment": "",
            "type": "String"
          },
          {
            "name": "map",
            "comment": "",
            "type": "String"
          },
          {
            "name": "map_marker",
            "comment": "",
            "type": "String"
          },
          {
            "name": "map_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "map_pin",
            "comment": "",
            "type": "String"
          },
          {
            "name": "map_signs",
            "comment": "",
            "type": "String"
          },
          {
            "name": "meh_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "microphone",
            "comment": "",
            "type": "String"
          },
          {
            "name": "microphone_slash",
            "comment": "",
            "type": "String"
          },
          {
            "name": "minus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "minus_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "minus_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "minus_square_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "mobile",
            "comment": "",
            "type": "String"
          },
          {
            "name": "mobile_phone",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "money",
            "comment": "",
            "type": "String"
          },
          {
            "name": "moon_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "mortar_board",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "motorcycle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "mouse_pointer",
            "comment": "",
            "type": "String"
          },
          {
            "name": "music",
            "comment": "",
            "type": "String"
          },
          {
            "name": "navicon",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "newspaper_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "object_group",
            "comment": "",
            "type": "String"
          },
          {
            "name": "object_ungroup",
            "comment": "",
            "type": "String"
          },
          {
            "name": "paint_brush",
            "comment": "",
            "type": "String"
          },
          {
            "name": "paper_plane",
            "comment": "",
            "type": "String"
          },
          {
            "name": "paper_plane_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "paw",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pencil",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pencil_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pencil_square_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "percent",
            "comment": "",
            "type": "String"
          },
          {
            "name": "phone",
            "comment": "",
            "type": "String"
          },
          {
            "name": "phone_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "photo",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "picture_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "pie_chart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "plane",
            "comment": "",
            "type": "String"
          },
          {
            "name": "plug",
            "comment": "",
            "type": "String"
          },
          {
            "name": "plus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "plus_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "plus_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "plus_square_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "power_off",
            "comment": "",
            "type": "String"
          },
          {
            "name": "print",
            "comment": "",
            "type": "String"
          },
          {
            "name": "puzzle_piece",
            "comment": "",
            "type": "String"
          },
          {
            "name": "qrcode",
            "comment": "",
            "type": "String"
          },
          {
            "name": "question",
            "comment": "",
            "type": "String"
          },
          {
            "name": "question_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "question_circle_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "quote_left",
            "comment": "",
            "type": "String"
          },
          {
            "name": "quote_right",
            "comment": "",
            "type": "String"
          },
          {
            "name": "random",
            "comment": "",
            "type": "String"
          },
          {
            "name": "recycle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "refresh",
            "comment": "",
            "type": "String"
          },
          {
            "name": "registered",
            "comment": "",
            "type": "String"
          },
          {
            "name": "remove",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "reorder",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "reply",
            "comment": "",
            "type": "String"
          },
          {
            "name": "reply_all",
            "comment": "",
            "type": "String"
          },
          {
            "name": "retweet",
            "comment": "",
            "type": "String"
          },
          {
            "name": "road",
            "comment": "",
            "type": "String"
          },
          {
            "name": "rocket",
            "comment": "",
            "type": "String"
          },
          {
            "name": "rss",
            "comment": "",
            "type": "String"
          },
          {
            "name": "rss_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "search",
            "comment": "",
            "type": "String"
          },
          {
            "name": "search_minus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "search_plus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "send",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "send_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "server",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share_alt_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share_square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "share_square_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "shield",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ship",
            "comment": "",
            "type": "String"
          },
          {
            "name": "shopping_bag",
            "comment": "",
            "type": "String"
          },
          {
            "name": "shopping_basket",
            "comment": "",
            "type": "String"
          },
          {
            "name": "shopping_cart",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sign_in",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sign_language",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sign_out",
            "comment": "",
            "type": "String"
          },
          {
            "name": "signal",
            "comment": "",
            "type": "String"
          },
          {
            "name": "signing",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "sitemap",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sliders",
            "comment": "",
            "type": "String"
          },
          {
            "name": "smile_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "soccer_ball_o",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "sort",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_alpha_asc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_alpha_desc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_amount_asc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_amount_desc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_asc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_desc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_down",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "sort_numeric_asc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_numeric_desc",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sort_up",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "space_shuttle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "spinner",
            "comment": "",
            "type": "String"
          },
          {
            "name": "spoon",
            "comment": "",
            "type": "String"
          },
          {
            "name": "square",
            "comment": "",
            "type": "String"
          },
          {
            "name": "square_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "star",
            "comment": "",
            "type": "String"
          },
          {
            "name": "star_half",
            "comment": "",
            "type": "String"
          },
          {
            "name": "star_half_empty",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "star_half_full",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "star_half_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "star_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sticky_note",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sticky_note_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "street_view",
            "comment": "",
            "type": "String"
          },
          {
            "name": "suitcase",
            "comment": "",
            "type": "String"
          },
          {
            "name": "sun_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "support",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "tablet",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tachometer",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tag",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tags",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tasks",
            "comment": "",
            "type": "String"
          },
          {
            "name": "taxi",
            "comment": "",
            "type": "String"
          },
          {
            "name": "television",
            "comment": "",
            "type": "String"
          },
          {
            "name": "terminal",
            "comment": "",
            "type": "String"
          },
          {
            "name": "thumb_tack",
            "comment": "",
            "type": "String"
          },
          {
            "name": "thumbs_down",
            "comment": "",
            "type": "String"
          },
          {
            "name": "thumbs_o_down",
            "comment": "",
            "type": "String"
          },
          {
            "name": "thumbs_o_up",
            "comment": "",
            "type": "String"
          },
          {
            "name": "thumbs_up",
            "comment": "",
            "type": "String"
          },
          {
            "name": "ticket",
            "comment": "",
            "type": "String"
          },
          {
            "name": "times",
            "comment": "",
            "type": "String"
          },
          {
            "name": "times_circle",
            "comment": "",
            "type": "String"
          },
          {
            "name": "times_circle_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tint",
            "comment": "",
            "type": "String"
          },
          {
            "name": "toggle_down",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "toggle_left",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "toggle_off",
            "comment": "",
            "type": "String"
          },
          {
            "name": "toggle_on",
            "comment": "",
            "type": "String"
          },
          {
            "name": "toggle_right",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "toggle_up",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "trademark",
            "comment": "",
            "type": "String"
          },
          {
            "name": "trash",
            "comment": "",
            "type": "String"
          },
          {
            "name": "trash_o",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tree",
            "comment": "",
            "type": "String"
          },
          {
            "name": "trophy",
            "comment": "",
            "type": "String"
          },
          {
            "name": "truck",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tty",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tv",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "umbrella",
            "comment": "",
            "type": "String"
          },
          {
            "name": "universal_access",
            "comment": "",
            "type": "String"
          },
          {
            "name": "university",
            "comment": "",
            "type": "String"
          },
          {
            "name": "unlock",
            "comment": "",
            "type": "String"
          },
          {
            "name": "unlock_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "unsorted",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "upload",
            "comment": "",
            "type": "String"
          },
          {
            "name": "user",
            "comment": "",
            "type": "String"
          },
          {
            "name": "user_plus",
            "comment": "",
            "type": "String"
          },
          {
            "name": "user_secret",
            "comment": "",
            "type": "String"
          },
          {
            "name": "user_times",
            "comment": "",
            "type": "String"
          },
          {
            "name": "users",
            "comment": "",
            "type": "String"
          },
          {
            "name": "video_camera",
            "comment": "",
            "type": "String"
          },
          {
            "name": "volume_control_phone",
            "comment": "",
            "type": "String"
          },
          {
            "name": "volume_down",
            "comment": "",
            "type": "String"
          },
          {
            "name": "volume_off",
            "comment": "",
            "type": "String"
          },
          {
            "name": "volume_up",
            "comment": "",
            "type": "String"
          },
          {
            "name": "warning",
            "comment": " alias ",
            "type": "String"
          },
          {
            "name": "wheelchair",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wheelchair_alt",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wifi",
            "comment": "",
            "type": "String"
          },
          {
            "name": "wrench",
            "comment": "",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-function-extra",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Function.Extra",
        "comment": "\n## Compose a two parameter function with a single parameter function\n@docs (>>>), (<<<)\n\n## Compose a three parameter function with a single parameter function\n@docs (>>>>), (<<<<)\n\n## Function properties\n@docs map, map2, map3, map4, ap, andThen, singleton, on\n\n## Reorder\n@docs swirlr, swirll, flip3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "<<<",
            "comment": "\n```elm\n(\\x y -> bar <| foo x y)\n-- becomes\nbar <<< foo\n```\n",
            "type": "(c -> d) -> (a -> b -> c) -> a -> b -> d"
          },
          {
            "name": "<<<<",
            "comment": "\n```elm\n(\\x y z -> bar <| foo x y z)\n-- becomes\nbar <<<< foo\n```\n",
            "type": "(d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e"
          },
          {
            "name": ">>>",
            "comment": "\n```elm\n(\\x y -> foo x y |> bar)\n-- becomes\nfoo >>> bar\n```\n",
            "type": "(a -> b -> c) -> (c -> d) -> a -> b -> d"
          },
          {
            "name": ">>>>",
            "comment": "\n```elm\n(\\x y z -> foo x y z |> bar)\n-- becomes\nfoo >>>> bar\n```\n",
            "type": "(a -> b -> c -> d) -> (d -> e) -> a -> b -> c -> e"
          },
          {
            "name": "andThen",
            "comment": "\nThe functions are Monads and so should have an `andThen`.\n",
            "type": "(a -> b) -> (b -> a -> c) -> a -> c"
          },
          {
            "name": "ap",
            "comment": "",
            "type": "(x -> a -> b) -> (x -> a) -> x -> b"
          },
          {
            "name": "flip3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> c -> b -> a -> d"
          },
          {
            "name": "map",
            "comment": "",
            "type": "(a -> b) -> (x -> a) -> x -> b"
          },
          {
            "name": "map2",
            "comment": "",
            "type": "(a -> b -> c) -> (x -> a) -> (x -> b) -> x -> c"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> (x -> a) -> (x -> b) -> (x -> c) -> x -> d"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> (x -> a) -> (x -> b) -> (x -> c) -> (x -> d) -> x -> e"
          },
          {
            "name": "on",
            "comment": "\n```elm\nsortBy (compare `on` fst)\n```\n",
            "type": "(b -> b -> c) -> (a -> b) -> a -> a -> c"
          },
          {
            "name": "singleton",
            "comment": "\nThe functions are Monads and so should have a `singleton`.\n",
            "type": "a -> b -> a"
          },
          {
            "name": "swirll",
            "comment": "\n```elm\nfoo = List.foldr (\\a b -> bar a ++ baz b) 0 xs\n--becomes\nfoo = swirll List.foldr 0 xs\n  <| \\a b -> bar a ++ baz b\n```\n",
            "type": "(a -> b -> c -> d) -> b -> c -> a -> d"
          },
          {
            "name": "swirlr",
            "comment": "\n```elm\nfoo = List.foldr (\\a b -> bar a ++ baz b) 0 xs\n--becomes\nfoo = swirlr List.foldr xs (\\a b -> bar a ++ baz b) 0\n```\n",
            "type": "(a -> b -> c -> d) -> c -> a -> b -> d"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-guards",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Guards",
        "comment": "\n\nBasically under the covers, this is just more interesting tuple properties.\n\n@docs (|=), (=>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "=>",
            "comment": " infix for expression ",
            "type": "Bool -> a -> ( Bool, a )",
            "associativity": "right",
            "precedence": 3
          },
          {
            "name": "|=",
            "comment": " infix for new line ",
            "type": "( Bool, a ) -> a -> a",
            "associativity": "right",
            "precedence": 0
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-nearly-eq",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Nearly",
        "comment": "\n\n@docs nearly, (~=), epsillon\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "epsillon",
            "comment": "\nepsillon\n",
            "type": "Float"
          },
          {
            "name": "nearly",
            "comment": "\nNearly is used to curry an epsillon into a fuzzy equality.\nFor example:\n\n```\nTrue == let toThreePlaces = nearly 0.0001\n        in 0.1234588 `toThreePlaces` 0.1234565\n```\n",
            "type": "Float -> Float -> Float -> Bool"
          },
          {
            "name": "~=",
            "comment": "\nPre-baked fuzzy equality, with `1.0e-5` as epsillon.\n```\n(~=) = nearly 1.0e-5\n```\n",
            "type": "Float -> Float -> Bool",
            "associativity": "right",
            "precedence": 6
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-number-expanded",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Number.Expanded",
        "comment": "\nExpanded Numbers\nA number that can either be finite or infinite\n\n@docs Expanded, toExpanded, withDefault, withDefaults, map\n",
        "aliases": [],
        "types": [
          {
            "name": "Expanded",
            "comment": " Expanded number can be Positive or Negative Infinity\n",
            "args": [
              "number"
            ],
            "cases": [
              [
                "Finite",
                [
                  "number"
                ]
              ],
              [
                "PosInfinity",
                []
              ],
              [
                "NegInfinity",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "map",
            "comment": "\nNot a Functor, but still mappable\n",
            "type": "(number -> number) -> Number.Expanded.Expanded number -> Number.Expanded.Expanded number"
          },
          {
            "name": "toExpanded",
            "comment": " ",
            "type": "number -> Number.Expanded.Expanded number"
          },
          {
            "name": "withDefault",
            "comment": "\nGet the value out of `Expanded` providing a default for the infinite case\n",
            "type": "a -> (number -> a) -> Number.Expanded.Expanded number -> a"
          },
          {
            "name": "withDefaults",
            "comment": "\nGet the value out of `Expanded` providing a default for the infinite cases.\nFirst argument is the default for the `PosInfinity` case, the second is for `NegInfinity`\n",
            "type": "a -> a -> (number -> a) -> Number.Expanded.Expanded number -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-restrict-number",
    "version": "1.0.1",
    "docs": [
      {
        "name": "NonZero",
        "comment": "\nNonZero numbers are numbers excluding zero.\nBecause the constructor for `NonZero` is not exported, you can be\nconfident that if you are using a `NonZero`, then its `NonZero`.\n\n@docs NonZero, fromNum, toNum\n",
        "aliases": [],
        "types": [
          {
            "name": "NonZero",
            "comment": " ",
            "args": [
              "number"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromNum",
            "comment": " ",
            "type": "number -> Maybe.Maybe (NonZero.NonZero number)"
          },
          {
            "name": "toNum",
            "comment": " ",
            "type": "NonZero.NonZero number -> number"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Positive",
        "comment": "\nPositive numbers exclude zero.\nBecause the constructor for `Positive` is not exported, you can be\nconfident that if you are using a `Positive`, then its `Positive`.\n\n@docs Positive, fromNum, toNum\n",
        "aliases": [],
        "types": [
          {
            "name": "Positive",
            "comment": " ",
            "args": [
              "number"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromNum",
            "comment": " ",
            "type": "number -> Maybe.Maybe (Positive.Positive number)"
          },
          {
            "name": "toNum",
            "comment": " ",
            "type": "Positive.Positive number -> number"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Even",
        "comment": "\nBecause the constructor for `Even` is not exported, you can be\nconfident that if you are using a `Even`, then its `Even`.\n\n@docs Even, fromInt, toInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Even",
            "comment": " ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromInt",
            "comment": " ",
            "type": "Int -> Maybe.Maybe Even.Even"
          },
          {
            "name": "toInt",
            "comment": " ",
            "type": "Even.Even -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Odd",
        "comment": "\nBecause the constructor for `Odd` is not exported, you can be\nconfident that if you are using a `Odd`, then its `Odd`.\n\n@docs Odd, fromInt, toInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Odd",
            "comment": " ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromInt",
            "comment": " ",
            "type": "Int -> Maybe.Maybe Odd.Odd"
          },
          {
            "name": "toInt",
            "comment": " ",
            "type": "Odd.Odd -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Negative",
        "comment": "\nNegative numbers exclude zero.\nBecause the constructor for `Negative` is not exported, you can be\nconfident that if you are using a `Negative`, then its `Negative`.\n\n@docs Negative, fromNum, toNum\n",
        "aliases": [],
        "types": [
          {
            "name": "Negative",
            "comment": " ",
            "args": [
              "number"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromNum",
            "comment": " ",
            "type": "number -> Maybe.Maybe (Negative.Negative number)"
          },
          {
            "name": "toNum",
            "comment": " ",
            "type": "Negative.Negative number -> number"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Natural",
        "comment": "\nNatural numbers are positive whole numbers excluding zero.\nBecause the constructor for `Natural` is not exported, you can be\nconfident that if you are using a `Natural`, then its `Natural`.\n\n@docs Natural, fromInt, toInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Natural",
            "comment": " ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromInt",
            "comment": " ",
            "type": "Int -> Maybe.Maybe Natural.Natural"
          },
          {
            "name": "toInt",
            "comment": " ",
            "type": "Natural.Natural -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-return",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Return",
        "comment": "\n## Type\nModeling the `update` tuple as a Monad similar to `Writer`\n@docs Return, ReturnF\n\n## Mapping\n@docs map, map2, map3, map4, map5, andMap, mapWith, mapCmd, mapBoth, dropCmd\n\n## Piping\n@docs piper, pipel, zero\n\n## Basics\n@docs singleton, andThen, (>>>), (<<<)\n\n## Write `Cmd`s\n@docs return, command, effect\n\n## Fancy non-sense\n@docs sequence, flatten\n",
        "aliases": [
          {
            "name": "Return",
            "comment": " ",
            "args": [
              "msg",
              "model"
            ],
            "type": "( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "ReturnF",
            "comment": " ",
            "args": [
              "msg",
              "model"
            ],
            "type": "Return.Return msg model -> Return.Return msg model"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "<<<",
            "comment": "\n\nGo point free with `andThen` chaining. Looking at the example from `andThen`\n\n```elm\nresulting : Return msg { model | bar : Int }\nresulting =\n  myReturn `andThen` foo\n           `andThen` foo\n           `andThen` foo\n```\n\nthis code roughly becomes:\n\n```elm\ndoFoo3Times : { model | bar : Int } -> Return msg { model | bar : Int }\ndoFoo3Times =\n  foo >>> foo >>> foo\n```\n",
            "type": "(b -> Return.Return msg c) -> (a -> Return.Return msg b) -> a -> Return.Return msg c"
          },
          {
            "name": ">>>",
            "comment": " ",
            "type": "(a -> Return.Return msg b) -> (b -> Return.Return msg c) -> a -> Return.Return msg c"
          },
          {
            "name": "andMap",
            "comment": "\nMap an `Return` into a `Return` containing a `Model` function\n",
            "type": "Return.Return msg (a -> b) -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "andThen",
            "comment": "\nChain together expressions from `Model` to `Return`.\n\n```elm\n-- arbitrary function to demonstrate\nfoo : Model -> Return Msg Model\nfoo ({bar} as model) =\n  -- forking logic\n  if bar < 10\n  -- that side effects may be added\n  then (model, getAjaxThing)\n  -- that the model may be updated\n  else ({model | bar = model.bar - 2 }, Cmd.none)\n```\n\nThey are now chainable with `andThen`...\n\n```elm\nresulting : Return msg { model | bar : Int }\nresulting =\n  myReturn `andThen` foo\n           `andThen` foo\n           `andThen` foo\n```\n\nHere we changed up `foo` three times, but we can use any function of\ntype `(a -> Return msg b)`.\n\nCommands will be accumulated automatically as is the case with all\nfunctions in this library.\n",
            "type": "Return.Return msg a -> (a -> Return.Return msg b) -> Return.Return msg b"
          },
          {
            "name": "command",
            "comment": "\nAdd a `Cmd` to a `Return`, the `Model` is uneffected\n",
            "type": "Platform.Cmd.Cmd msg -> Return.ReturnF msg model"
          },
          {
            "name": "dropCmd",
            "comment": "\nDrop the current `Cmd` and replace with an empty thunk\n",
            "type": "Return.ReturnF msg model"
          },
          {
            "name": "effect",
            "comment": "\nAdd a `Cmd` to a `Return` based on its `Model`, the `Model` will not be effected\n",
            "type": "Respond.Respond msg model -> Return.ReturnF msg model"
          },
          {
            "name": "flatten",
            "comment": " ",
            "type": "Return.Return msg (Return.Return msg model) -> Return.Return msg model"
          },
          {
            "name": "map",
            "comment": "\nTransform the `Model` the `Cmd` will be left untouched\n",
            "type": "(a -> b) -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "map2",
            "comment": "\nCombine 2 `Return`s with a function\n\n```elm\nmap2\n  (\\modelA modelB -> { modelA | foo = modelB.foo })\n  retA\n  retB\n```\n",
            "type": "(a -> b -> c) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> d) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c -> Return.Return msg d"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c -> Return.Return msg d -> Return.Return msg e"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f) -> Return.Return msg a -> Return.Return msg b -> Return.Return msg c -> Return.Return msg d -> Return.Return msg e -> Return.Return msg f"
          },
          {
            "name": "mapBoth",
            "comment": "\nMap over both the model and the msg type of the `Return`.\nThis is useful for easily embedding a `Return` in a Union Type.\nFor example\n\n```elm\nimport Foo\n\ntype Msg = Foo Foo.Msg\ntype Model = FooModel Foo.Model\n\n...\n\nupdate : Msg -> Model -> Return Msg Model\nupdate msg model =\n   case msg of\n     Foo foo -> Foo.update foo model.foo\n      |> mapBoth Foo FooModel\n```\n",
            "type": "(a -> b) -> (c -> d) -> Return.Return a c -> Return.Return b d"
          },
          {
            "name": "mapCmd",
            "comment": "\nMap on the `Cmd`.\n",
            "type": "(a -> b) -> Return.Return a model -> Return.Return b model"
          },
          {
            "name": "mapWith",
            "comment": "\nTransform the `Model` of and add a new `Cmd` to the queue\n",
            "type": "(a -> b) -> Platform.Cmd.Cmd msg -> Return.Return msg a -> Return.Return msg b"
          },
          {
            "name": "pipel",
            "comment": " ",
            "type": "List (Return.ReturnF msg model) -> Return.ReturnF msg model"
          },
          {
            "name": "piper",
            "comment": " ",
            "type": "List (Return.ReturnF msg model) -> Return.ReturnF msg model"
          },
          {
            "name": "return",
            "comment": "\nConstruct a new `Return` from parts\n",
            "type": "model -> Platform.Cmd.Cmd msg -> Return.Return msg model"
          },
          {
            "name": "sequence",
            "comment": " ",
            "type": "List (Return.Return msg model) -> Return.Return msg (List model)"
          },
          {
            "name": "singleton",
            "comment": "\nCreate a `Return` from a given `Model`\n",
            "type": "model -> Return.Return msg model"
          },
          {
            "name": "zero",
            "comment": " ",
            "type": "Return.ReturnF msg model"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Respond",
        "comment": "\n@docs Respond, append, sum, zero, comap\n",
        "aliases": [
          {
            "name": "Respond",
            "comment": "\nA function from a model to a Cmd.\nBasically there are times where you want to\nhave a side effect on the world if the model\nhas a certain shape. `Respond` facilitates\nthis use case.\n",
            "args": [
              "msg",
              "a"
            ],
            "type": "a -> Platform.Cmd.Cmd msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "append",
            "comment": " ",
            "type": "Respond.Respond msg a -> Respond.Respond msg a -> Respond.Respond msg a"
          },
          {
            "name": "comap",
            "comment": "\nAdd a function to the front\n`b -> a >> a -> Cmd msg`\n",
            "type": "(b -> a) -> Respond.Respond msg a -> Respond.Respond msg b"
          },
          {
            "name": "sum",
            "comment": " ",
            "type": "List (Respond.Respond msg a) -> Respond.Respond msg a"
          },
          {
            "name": "zero",
            "comment": " ",
            "type": "Respond.Respond msg a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-tuple-extra",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Tuple2",
        "comment": "\n\n# Map\n@docs map, mapFst, mapSnd, mapEach, mapBoth\n\n# Swap\n@docs swap\n\n# Sorting\n@docs sort, sortBy, sortWith\n\n# Transform\n@docs toList\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "map",
            "comment": " ",
            "type": "(b -> x) -> ( a, b ) -> ( a, x )"
          },
          {
            "name": "mapBoth",
            "comment": " ",
            "type": "(a -> b) -> ( a, a ) -> ( b, b )"
          },
          {
            "name": "mapEach",
            "comment": " ",
            "type": "(a -> x) -> (b -> x') -> ( a, b ) -> ( x, x' )"
          },
          {
            "name": "mapFst",
            "comment": " ",
            "type": "(a -> x) -> ( a, b ) -> ( x, b )"
          },
          {
            "name": "mapSnd",
            "comment": " ",
            "type": "(b -> x) -> ( a, b ) -> ( a, x )"
          },
          {
            "name": "sort",
            "comment": " ",
            "type": "( comparable, comparable ) -> ( comparable, comparable )"
          },
          {
            "name": "sortBy",
            "comment": " ",
            "type": "(a -> comparable) -> ( a, a ) -> ( a, a )"
          },
          {
            "name": "sortWith",
            "comment": " ",
            "type": "(a -> a -> Basics.Order) -> ( a, a ) -> ( a, a )"
          },
          {
            "name": "swap",
            "comment": " ",
            "type": "( a, b ) -> ( b, a )"
          },
          {
            "name": "toList",
            "comment": " ",
            "type": "( a, a ) -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Tuple3",
        "comment": "\n# Getters\n@docs fst, snd, trd, tail, init\n\n# Maps\n@docs map, mapFst, mapSnd, mapTrd, mapEach, mapAll\n\n# Swap\n@docs swirlr, swirll\n\n# Sorting\n@docs sort, sortBy, sortWith\n\n# Transform\n@docs toList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fst",
            "comment": " ",
            "type": "( a, b, c ) -> a"
          },
          {
            "name": "init",
            "comment": " ",
            "type": "( a, b, c ) -> ( a, b )"
          },
          {
            "name": "map",
            "comment": " ",
            "type": "(c -> x) -> ( a, b, c ) -> ( a, b, x )"
          },
          {
            "name": "mapAll",
            "comment": " ",
            "type": "(a -> b) -> ( a, a, a ) -> ( b, b, b )"
          },
          {
            "name": "mapEach",
            "comment": " ",
            "type": "(a -> x) -> (b -> x') -> (c -> x'') -> ( a, b, c ) -> ( x, x', x'' )"
          },
          {
            "name": "mapFst",
            "comment": " ",
            "type": "(a -> x) -> ( a, b, c ) -> ( x, b, c )"
          },
          {
            "name": "mapSnd",
            "comment": " ",
            "type": "(b -> x) -> ( a, b, c ) -> ( a, x, c )"
          },
          {
            "name": "mapTrd",
            "comment": " ",
            "type": "(c -> x) -> ( a, b, c ) -> ( a, b, x )"
          },
          {
            "name": "snd",
            "comment": " ",
            "type": "( a, b, c ) -> b"
          },
          {
            "name": "sort",
            "comment": " ",
            "type": "( comparable, comparable, comparable ) -> ( comparable, comparable, comparable )"
          },
          {
            "name": "sortBy",
            "comment": " ",
            "type": "(a -> comparable) -> ( a, a, a ) -> ( a, a, a )"
          },
          {
            "name": "sortWith",
            "comment": " ",
            "type": "(a -> a -> Basics.Order) -> ( a, a, a ) -> ( a, a, a )"
          },
          {
            "name": "swirll",
            "comment": " ",
            "type": "( a, b, c ) -> ( c, a, b )"
          },
          {
            "name": "swirlr",
            "comment": " ",
            "type": "( a, b, c ) -> ( b, c, a )"
          },
          {
            "name": "tail",
            "comment": " ",
            "type": "( a, b, c ) -> ( b, c )"
          },
          {
            "name": "toList",
            "comment": " ",
            "type": "( a, a, a ) -> List a"
          },
          {
            "name": "trd",
            "comment": " ",
            "type": "( a, b, c ) -> c"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/perspective",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Perspective",
        "comment": "\nEmbed and compose Views\n\nBasics\n@docs View, elim, empty\n\nMaps\n@docs map, mapModel, mapMsg\n\nSlip in a value\n@docs first, second\n\nFail\n@docs failModel, failMsg\n\nFunction Msg\n@docs sproodle\n",
        "aliases": [
          {
            "name": "View",
            "comment": "\nThe standard TEA view function\nas a type.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "model -> Html.Html msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "elim",
            "comment": "\nEliminate a Result\n(bundled here since its common with above functions)\n",
            "type": "(a -> b) -> (c -> b) -> Result.Result a c -> b"
          },
          {
            "name": "empty",
            "comment": "\nFully generic View, fits in everywhere\n",
            "type": "Perspective.View a b"
          },
          {
            "name": "failModel",
            "comment": "\nTransform a View such that, passing an `Err` blanks the view.\n",
            "type": "Perspective.View a b -> Perspective.View (Result.Result c a) (Result.Result c b)"
          },
          {
            "name": "failMsg",
            "comment": " Included for completeness\n",
            "type": "Perspective.View a b -> Perspective.View (Result.Result a c) (Result.Result b c)"
          },
          {
            "name": "first",
            "comment": "\nPass a value through to the msg,\non the right hand side of a tuple\n",
            "type": "Perspective.View a b -> Perspective.View ( a, c ) ( b, c )"
          },
          {
            "name": "map",
            "comment": "\nOne usage of `map` not\nto overlook, embeding a sub View\n\n```\ntype Msg = Sub SubMsg\n\ntype SubMsg = Inc | Dec\n\ntype alias Model = { sub : Int }\n\nsubView : Int -> Html SubMsg\n\nview : Model -> Html Msg\nview = div []\n  [ h1 [] [text \"Foo\"]\n  , map .sub Sub subView ]\n```\n",
            "type": "(a -> b) -> (c -> d) -> Perspective.View b c -> Perspective.View a d"
          },
          {
            "name": "mapModel",
            "comment": "\nPre process the model\n",
            "type": "(a -> b) -> Perspective.View b msg -> Perspective.View a msg"
          },
          {
            "name": "mapMsg",
            "comment": "\nPost process the msg\n",
            "type": "(b -> c) -> Perspective.View a b -> Perspective.View a c"
          },
          {
            "name": "second",
            "comment": "\nPass a value through to the msg,\non the left hand side of a tuple\n",
            "type": "Perspective.View a b -> Perspective.View ( c, a ) ( c, b )"
          },
          {
            "name": "sproodle",
            "comment": "\nHandle Html that fires functions.\n(Haskell calls this uncurry',\nthere is no way I'm calling this thing uncurry,\nits sproodle)\n",
            "type": "Perspective.View a (b -> c) -> Perspective.View ( a, b ) c"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "JasonGFitzpatrick/elm-router",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Router",
        "comment": " Simple Router library for performing operations based on a list of string\nroutes. This is particularly useful for routing pages in single page applications\nwhere the given list of strings are list of url paths.\n\n\n# Types\n@docs Route, Router\n\n# Route Matching\n@docs match, (:->)\n\n# Useful Helper\n@docs matchPrefix\n",
        "aliases": [
          {
            "name": "Route",
            "comment": " A Route is a function from a string to some value or computation.\n",
            "args": [
              "a"
            ],
            "type": "String -> a"
          },
          {
            "name": "Router",
            "comment": " A Router is a tuple containing a string and its associated route\n",
            "args": [
              "a"
            ],
            "type": "( String, Router.Route a )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ":->",
            "comment": " Operator to offer easy-to-read DSL for matching routes. This is an alias\nfor the `(,)` tuple constructor function.\n",
            "type": "String -> Router.Route a -> Router.Router a"
          },
          {
            "name": "match",
            "comment": " `match` allows you to select an appropriate route depending on the\ngiven input string. `match` takes a list of routers and a default route,\nwhich acts as a catch-all and returns a route. Returning a route allows\nfor nested routes.\n\nExample:\n\n    mainRoute : Route Html\n    mainRoute = match\n      [ \"/\"           :-> displayHomePage\n      , \"/index.html\" :-> displayHomePage\n      , \"/blog\"       :-> blogRoute\n      , \"/contact\"    :-> displayContactsPage\n      ] display404Page\n\n    blogRoute : Route Html\n    blogRoute = match\n      [ \"/\"             :-> displayBlogPostListing\n      , \"/entry1.html\"  :-> displayEntry1\n      , \"/entry2.html\"  :-> displayEntry2\n      ] display404Page\n\n\nIn some cases, it important to understand how `match` works. Suppose you have\nthe input path \"/users/4873/profile.html\" and there is a router that matches\n\"/users\" with an associated route `usersRoute`. The `usersRoute` function will\nget called with \"/4873/profile.html\" as a parameter. This means that `match`\nwill strip away the string it has matched from the input string before passing\nit onto the route. `match` will also match routes in the order you have stated\nthem. This means that if you have the following route:\n\n    myRoute = match\n      [ \"/user\"   :-> userRoute\n      , \"/users\"  :-> displayUserListing\n      ] display404Page\n\nThere is no way for `displayUserListing` to ever be called. Say you pass in\n\"/users.html\", then this will be matched by \"/user\" which will pass \"s.html\"\nto `userRoute`. To solve this, you may wish to reverse the order of the routes\nas follows:\n\n    myRoute = match\n      [ \"/users\"  :-> displayUserListing\n      , \"/user\"   :-> userRoute\n      ] display404Page\n\nAnd now things will work as intended.\n\nYou may notice that in the first example, I use \"/\" as a route at the very top.\nThis is because `match` special cases \"/\" and the empty string due to their\nprevalence.\n",
            "type": "List (Router.Router a) -> Router.Route a -> Router.Route a"
          },
          {
            "name": "matchPrefix",
            "comment": " Takes a reference string and a string to match and returns the second string\nstripped of the matched reference string. Used to implement `match`.\n\n    matchPrefix \"he\" \"hello\" === Just \"llo\"\n\n    matchPrefix \"yo\" \"halo\" === Nothing\n",
            "type": "String -> String -> Maybe.Maybe String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "JeremyBellows/elm-bootstrapify",
    "version": "8.0.0",
    "docs": [
      {
        "name": "Bootstrap.Panels",
        "comment": " Functions for generating bootstrap panels\n\n# Panels\n@docs PanelType, panelGroup, panel, panelHeading, panelBody\n\n# Panel Headings\n@docs PanelHeadingTitleType, panelHeading\n\n",
        "aliases": [],
        "types": [
          {
            "name": "PanelHeadingTitleType",
            "comment": "\n  Types of Panel Headings\n",
            "args": [],
            "cases": [
              [
                "DefaultTitle",
                [
                  "String"
                ]
              ],
              [
                "PanelH1",
                [
                  "String"
                ]
              ],
              [
                "PanelH2",
                [
                  "String"
                ]
              ],
              [
                "PanelH3",
                [
                  "String"
                ]
              ],
              [
                "PanelH4",
                [
                  "String"
                ]
              ],
              [
                "PanelH5",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "PanelType",
            "comment": "\n  A set of options for Panels\n",
            "args": [],
            "cases": [
              [
                "NormalPanel",
                []
              ],
              [
                "PrimaryPanel",
                []
              ],
              [
                "SuccessPanel",
                []
              ],
              [
                "InfoPanel",
                []
              ],
              [
                "WarningPanel",
                []
              ],
              [
                "DangerPanel",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "panel",
            "comment": " Generates a panel html element\n\n    panel PrimaryPanel [] []\n",
            "type": "Bootstrap.Panels.PanelType -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelBody",
            "comment": " Generates a panelBody html element\n\n    panelBody [] []\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelGroup",
            "comment": " Generates a panelGroup html element\n\n    panelGroup [] []\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelHeading",
            "comment": " Generates a panelHeading html element\n\n    panelHeading PanelH3 [] []\n",
            "type": "Bootstrap.Panels.PanelHeadingTitleType -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.Buttons",
        "comment": " Functions for bootstrap buttons\n\n# Buttons\n@docs ButtonOption, ButtonSizeModifier, ButtonModifier, btn\n\n",
        "aliases": [],
        "types": [
          {
            "name": "ButtonModifier",
            "comment": "\n  Modifiers for button attributes\n",
            "args": [],
            "cases": [
              [
                "BtnCollapse",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "ButtonOption",
            "comment": "\n  A set of options for rendering a btn\n",
            "args": [],
            "cases": [
              [
                "BtnDefault",
                []
              ],
              [
                "BtnPrimary",
                []
              ],
              [
                "BtnSuccess",
                []
              ],
              [
                "BtnWarning",
                []
              ],
              [
                "BtnInfo",
                []
              ],
              [
                "BtnDanger",
                []
              ]
            ]
          },
          {
            "name": "ButtonSizeModifier",
            "comment": "\n  A set of sizes for rendering a btn\n",
            "args": [],
            "cases": [
              [
                "BtnLarge",
                []
              ],
              [
                "BtnBlock",
                []
              ],
              [
                "BtnSmall",
                []
              ],
              [
                "BtnExtraSmall",
                []
              ],
              [
                "NavbarBtn",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "btn",
            "comment": " Generates a button html element\n\n    btn BtnPrimary [ BtnBlock, BtnLarge ] [ BtnCollapse \"#idOfElement, .orClass\" ] [] [ text \"Hello world!\" ]\n",
            "type": "Bootstrap.Buttons.ButtonOption -> List Bootstrap.Buttons.ButtonSizeModifier -> List Bootstrap.Buttons.ButtonModifier -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.Wells",
        "comment": " Functions for generating bootstrap wells\n\n# Wells\n@docs WellOption, well\n\n",
        "aliases": [],
        "types": [
          {
            "name": "WellOption",
            "comment": "\n  Different Size Wells!\n",
            "args": [],
            "cases": [
              [
                "WellNormal",
                []
              ],
              [
                "WellSmall",
                []
              ],
              [
                "WellLarge",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "well",
            "comment": " Generates a well html element\n\n    well WellLarge [] []\n",
            "type": "Bootstrap.Wells.WellOption -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.Page",
        "comment": " Bootstrap page functions\n\n# Page\n@docs pullRight, pageHeader, jumbotron\n\n# Automation\n@docs automationTag\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "automationTag",
            "comment": " This is for being able to write UI Automation selectors efficiently\n\n    button [ automationTag \"btn\" \"submit\" ] []\n",
            "type": "String -> String -> Html.Attribute msg"
          },
          {
            "name": "jumbotron",
            "comment": " Generates a jumbotron html element\n\n    jumbotron [] []\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "pageHeader",
            "comment": " Generates a page header html element\n\n    pageHeader [] []\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "pullRight",
            "comment": " Generates a div with the pull-right class\n\n    pullRight [] []\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.Grid",
        "comment": " Bootstrap grid functions for generating html\n\n# Grid\n@docs containerFluid, container, row, column\n\n# Column\n@docs ColumnSize, ColumnType, column\n\n",
        "aliases": [],
        "types": [
          {
            "name": "ColumnSize",
            "comment": " Type to be used when determining column size\n  Note that a row can only container up to 12 column size units\n",
            "args": [],
            "cases": [
              [
                "One",
                []
              ],
              [
                "Two",
                []
              ],
              [
                "Three",
                []
              ],
              [
                "Four",
                []
              ],
              [
                "Five",
                []
              ],
              [
                "Six",
                []
              ],
              [
                "Seven",
                []
              ],
              [
                "Eight",
                []
              ],
              [
                "Nine",
                []
              ],
              [
                "Ten",
                []
              ],
              [
                "Eleven",
                []
              ],
              [
                "Twelve",
                []
              ]
            ]
          },
          {
            "name": "ColumnType",
            "comment": "\n  Type to be used when determining column size based on screen size\n  Extra small devices Phones (<768px)\n  Small devices Tablets (≥768px)\n  Medium devices Desktops (≥992px)\n  Large devices Desktops (≥1200px)\n",
            "args": [],
            "cases": [
              [
                "ExtraSmall",
                [
                  "Bootstrap.Grid.ColumnSize"
                ]
              ],
              [
                "Small",
                [
                  "Bootstrap.Grid.ColumnSize"
                ]
              ],
              [
                "Medium",
                [
                  "Bootstrap.Grid.ColumnSize"
                ]
              ],
              [
                "Large",
                [
                  "Bootstrap.Grid.ColumnSize"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "column",
            "comment": " Generates a column html element\n\n    containerFluid\n     [\n      row\n       [\n        column [ ExtraSmall Twelve, Small Twelve, Medium Twelve, Large Twelve ]\n         [\n         ]\n       ]\n     ]\n",
            "type": "List Bootstrap.Grid.ColumnType -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "container",
            "comment": " Generates a container html element\n\n    container [ ]\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "containerFluid",
            "comment": " Generates a fluid container html element\n\n    containerFluid [ ]\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "row",
            "comment": " Generates a row html element\n\n    containerFluid\n     [\n      row\n       [\n       ]\n     ]\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.Navbar",
        "comment": " Functions for generating Bootstrap navbar elements\n\n# Navbar\n@docs NavbarType, navbar, navbarHeader, navbarBrand, navbarCollapse, navbarHamburger\n\n# Navbar List\n@docs NavbarListAdjustment, NavbarPillsOptions, NavbarOptions, navbarList\n\n",
        "aliases": [],
        "types": [
          {
            "name": "NavbarListAdjustment",
            "comment": " A set of options for adjusting a navbar list\n",
            "args": [],
            "cases": [
              [
                "NavbarDefault",
                []
              ],
              [
                "NavbarRight",
                []
              ],
              [
                "NavbarLeft",
                []
              ],
              [
                "NavbarJustified",
                []
              ]
            ]
          },
          {
            "name": "NavbarOptions",
            "comment": "\n  A set of Navbar Options\n",
            "args": [],
            "cases": [
              [
                "NavbarNav",
                []
              ],
              [
                "NavbarTabs",
                []
              ],
              [
                "NavbarPills",
                [
                  "Bootstrap.Navbar.NavbarPillsOptions"
                ]
              ]
            ]
          },
          {
            "name": "NavbarPillsOptions",
            "comment": "\n  Option for Navbar Pills\n",
            "args": [],
            "cases": [
              [
                "PillsNotStacked",
                []
              ],
              [
                "PillsStacked",
                []
              ]
            ]
          },
          {
            "name": "NavbarType",
            "comment": "\n  Different types of Navbar styles\n",
            "args": [],
            "cases": [
              [
                "DefaultNavbar",
                []
              ],
              [
                "InverseNavbar",
                []
              ],
              [
                "FormNavbar",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "navbar",
            "comment": " Generates a navbar html element\n\n    navbar DefaultNavbar [] []\n",
            "type": "Bootstrap.Navbar.NavbarType -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "navbarBrand",
            "comment": " Generates a navbarBrand html element\n\n    navbarBrand [] []\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "navbarCollapse",
            "comment": " Generates a collapse div for navbar lists\n\n    navbarCollapse [ id \"collapseMe\" ]\n     [\n      navbarList (NavbarPills PillsStacked) NavbarRight []\n       [\n        li []\n         [\n          a []\n           [\n            text \"One\"\n           ]\n         ]\n       ]\n     ]\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "navbarHamburger",
            "comment": " Generates a collapse breadcrumb button for navbar lists. Parameter is for css selector depicting collapsable target\n\n    navbarHamburger \"#collapseMe\"\n\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "navbarHeader",
            "comment": " Generates a navbar header html element\n\n    navbarHeader [] []\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "navbarList",
            "comment": " Generates a navbarList html element\n\n    navbarList (NavbarPills PillsStacked) NavbarRight []\n     [\n     ]\n",
            "type": "Bootstrap.Navbar.NavbarOptions -> Bootstrap.Navbar.NavbarListAdjustment -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.ListGroup",
        "comment": " Functions for generating List group html\n\n# List Group\n@docs listGroup, listGroupItem\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "listGroup",
            "comment": " Generates a list group html element\n\n    listGroup [] []\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "listGroupItem",
            "comment": " Generates a list group item html element\n\n    listGroup []\n     [\n      listGroupItem [] []\n     ]\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bootstrap.Forms",
        "comment": " Bootstrap functions pertaining to forms\n\n# Forms\n@docs FormAlignmentOption, form, formGroup, FormGroupOption, formLabel, formInput, formTextArea\n\n",
        "aliases": [],
        "types": [
          {
            "name": "FormAlignmentOption",
            "comment": " Options for Form Alignment\n\n    case formAlignmentOption of\n      FormDefault -> \"\"\n      FormHorizontal -> \"form-horizontal\"\n      FormInline -> \"form-inline\"\n",
            "args": [],
            "cases": [
              [
                "FormDefault",
                []
              ],
              [
                "FormHorizontal",
                []
              ],
              [
                "FormInline",
                []
              ]
            ]
          },
          {
            "name": "FormGroupOption",
            "comment": "\n  A set of different Form group options\n",
            "args": [],
            "cases": [
              [
                "FormGroupDefault",
                []
              ],
              [
                "FormGroupSmall",
                []
              ],
              [
                "FormGroupLarge",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "form",
            "comment": " Generates a form with the supplied alignment\n\n    form FormDefault [ onSubmit SomeMsg ]\n     [\n     ]\n",
            "type": "Bootstrap.Forms.FormAlignmentOption -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "formGroup",
            "comment": " Generates a formGroup html element\n\n    form FormDefault [ onSubmit SomeMsg ]\n     [\n      formGroup FormGroupDefault\n        [\n        ]\n     ]\n",
            "type": "Bootstrap.Forms.FormGroupOption -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "formInput",
            "comment": " Generates a formInput html element\n\n    form FormDefault [ onSubmit SomeMsg ]\n     [\n      formGroup FormGroupDefault\n        [\n         formInput [] []\n        ]\n     ]\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "formLabel",
            "comment": " Generates a formLabel html element\n\n    form FormDefault [ onSubmit SomeMsg ]\n     [\n      formGroup FormGroupDefault\n        [\n         formLabel [] []\n        ]\n     ]\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "formTextArea",
            "comment": " Generates a form text area html element\n\n    form FormDefault [ onSubmit SomeMsg ]\n     [\n      formGroup FormGroupDefault\n        [\n         formTextArea [] []\n        ]\n     ]\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "JoeyEremondi/array-multidim",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Array.MultiDim",
        "comment": "\n\nA class for multi-dimensional arrays, which stores the number of coordinates\nat type-level.\n\nInternally, the array is represented as a 1D array, so lookups\nshould be quite fast. However, we provide a safe, clean\ninterface for multi-dimensional lookups and updates.\n\nTo create an array, use a safe-list with the array dimensions:\n\n    import List.SafeList exposing (cons, null)\n    --Creates a 4x6x2 array of zeroes\n    myArray =\n      repeat (4 `cons` 6 `cons` 2 `cons` null ) 0\n\nAccesses and updates use SafeList as well:\n\n    import List.SafeList exposing (cons, null)\n    updatedArray =\n      case get (3 `cons` 1 `cons` 1 `cons` null ) myArray of\n        Nothing -> myArray\n        Just x ->\n          set (3 `cons` 1 `cons` 1 `cons` null ) (2*x) myArray\n\nIf you ever give the wrong number of coordinates, you get a type error:\n\n    --Won't compile\n    updatedArray =\n      case get (3 `cons` 1 `cons` 1 `cons` null ) myArray of\n        Nothing -> myArray\n        Just x ->\n          set (3 `cons` 1 `cons` 1 `cons` null ) (2*x) myArray\n\nWe don't yet support any operations which change the size of the array,\nsuch as push or append. For operations like `foldl` and `foldr`,\nuse the `toFlatArray` function, then the corresponding functions\non Array.Array.\n\n#The Array type and creation functions\n@docs MultiDim, repeat, initialize\n\n#Get array info\n@docs inBounds, dims\n\n#Access and update\n@docs get, set\n\n#Convting to flat List or Array\n@docs toIndexedList, toFlatArray\n\n#Mapping functions\n@docs map, indexedMap\n",
        "aliases": [],
        "types": [
          {
            "name": "MultiDim",
            "comment": " Opaque type for `n`-dimensional arrays containing type `a`\n",
            "args": [
              "a",
              "n"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "dims",
            "comment": " Get the dimensions of an array\n",
            "type": "Array.MultiDim.MultiDim a n -> List.SafeList.SafeList Int n"
          },
          {
            "name": "get",
            "comment": " Return Just the element if all given coordinates\nare within the array's bounds. Otherwise, return nothing.\n",
            "type": "List.SafeList.SafeList Int n -> Array.MultiDim.MultiDim a n -> Maybe.Maybe a"
          },
          {
            "name": "inBounds",
            "comment": " Given array dimensions, and coordinates,\ndetermine if the coordinates are in bounds for the dimensions.\n",
            "type": "List.SafeList.SafeList Int n -> List.SafeList.SafeList Int n -> Bool"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element in an array,\nwith access to the coordinates of each element.\n",
            "type": "(List.SafeList.SafeList Int n -> a -> b) -> Array.MultiDim.MultiDim a n -> Array.MultiDim.MultiDim b n"
          },
          {
            "name": "initialize",
            "comment": " Given a SafeList of array dimensions,\nand a function to generate an element for each coordinate,\ncreate a new array with the given elements\n",
            "type": "List.SafeList.SafeList Int n -> (List.SafeList.SafeList Int n -> a) -> Array.MultiDim.MultiDim a n"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array\n",
            "type": "(a -> b) -> Array.MultiDim.MultiDim a n -> Array.MultiDim.MultiDim b n"
          },
          {
            "name": "repeat",
            "comment": " Given a SafeList [n1, n2, ...] of array dimensions,\ncreate an n1 x n2 x ... multi-dimensional array\n",
            "type": "List.SafeList.SafeList Int n -> a -> Array.MultiDim.MultiDim a n"
          },
          {
            "name": "set",
            "comment": " Set the element at the given coordinates, if they all\nare within the array's bounds. Otherwise, return the original array.\n",
            "type": "List.SafeList.SafeList Int n -> a -> Array.MultiDim.MultiDim a n -> Array.MultiDim.MultiDim a n"
          },
          {
            "name": "toFlatArray",
            "comment": " Convert this array to a 1-dimensional array\nwith elements in lexigraphical order\n",
            "type": "Array.MultiDim.MultiDim a n -> Array.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Generate a list of the array's elements,\npaired with their coordinates.\n",
            "type": "Array.MultiDim.MultiDim a n -> List ( List.SafeList.SafeList Int n, a )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "JoeyEremondi/safelist",
    "version": "2.0.0",
    "docs": [
      {
        "name": "List.SafeList",
        "comment": "\nThis module provides a form of list which encode their length\nin their type, using the TypeNats library. For example:\n\n    someLength3 : List.SafeList Int (OnePlus (OnePlus (OnePlus (Zero))) )\n    someLength3 = 2 `cons` 3 `cons` 4 `cons` null\n\nList whose length doesn't match their type are forbidden.\nFor example:\n\n    --Gives type mismatch\n    badLength3 : SafeList Int (OnePlus (OnePlus  (Zero)) )\n    badLength3 = 2 `cons` 3 `cons` 4 `cons` null\n\nBecause Elm doesn't have GADTs or DataKinds, it's impossible\nto pattern match on SafeLists. Instead, we provide an \"uncons\"\nfunction, which splits a list which we know to be non-empty\ninto its head and tail.\n\nFor example:\n\n    sumFirstLast =\n      let\n        (h1, t1) = uncons someLength3\n        (_, t2) = uncons t1\n        (h3, t3) = uncons t2\n        tailCheck : SafeList Int Zero\n        tailCheck = t3\n      in\n        h1 + h3\n\nThis notation is awkward, so it's assumed this library\nwill be used on small lists only.\n\n\nAs well, many functions on List.List have been ported over,\nthough filter, foldl and foldr are notably absent, as they\ndo not preserve the length of the list.\n\nBecause Elm is not a higher-kinded language, it is not generally\npossible to use this library when you don't know your list size in advance,\nunless only generic functions like `map` are used.\n\n# Our main type and pseudo-constructors\n@docs SafeList, null, cons\n\n# In lieu of pattern matching:\n@docs uncons, toList, fromList\n\n# The usual map functions\n@docs map, map2, map3, map4, map5, unzip\n\n# Length-preserving fold-like functions\n@docs mapl, mapr, reverseMapr, scanl\n\n# Functions for non-empty lists\n@docs maximum, minimum, head, tail, last\n\n# Utility functions\n@docs  member, reverse, all, any\n\n#Length-preserving sorting functions\n@docs sort, sortBy, sortWith\n",
        "aliases": [],
        "types": [
          {
            "name": "SafeList",
            "comment": " A list with length encoded in its type,\nsupporting a restricted set of operations.\n",
            "args": [
              "a",
              "n"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " ",
            "type": "(a -> Bool) -> List.SafeList.SafeList a n -> Bool"
          },
          {
            "name": "any",
            "comment": " ",
            "type": "(a -> Bool) -> List.SafeList.SafeList a n -> Bool"
          },
          {
            "name": "cons",
            "comment": " Given a new element and a list of length n, make a list of length n+1.\nHas the same infix precedence as (::)\n",
            "type": "a -> List.SafeList.SafeList a n -> List.SafeList.SafeList a (TypeNat.OnePlus n)",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "fromList",
            "comment": " Given a some SafeList, try to convert\na normal list into a SafeList of the same length\n",
            "type": "List.SafeList.SafeList a n -> List b -> Maybe.Maybe (List.SafeList.SafeList b n)"
          },
          {
            "name": "head",
            "comment": " SafeList way to get the first element of a list\n",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> a"
          },
          {
            "name": "last",
            "comment": " SafeList way to get the last element of a list\n",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> a"
          },
          {
            "name": "map",
            "comment": " Works as List.map\n",
            "type": "(a -> b) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "map2",
            "comment": " ",
            "type": "(a -> b -> c) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> d) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n -> List.SafeList.SafeList d n"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n -> List.SafeList.SafeList d n -> List.SafeList.SafeList e n"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n -> List.SafeList.SafeList d n -> List.SafeList.SafeList e n -> List.SafeList.SafeList f n"
          },
          {
            "name": "mapl",
            "comment": "\nGiven a mapping function and an initial context value,\ntraverse the list left to right, applying our map function with the previously\ncomputed context as argument.\nGeneral folds don't preserve the length of a list, so we use\nthis restricted form of a fold.\n",
            "type": "(( a, c ) -> ( b, c )) -> c -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "mapr",
            "comment": "\nGiven a mapping function and an initial context value,\ntraverse the list right to left, applying our map function with the previously\ncomputed context as argument.\nGeneral folds don't preserve the length of a list, so we use\nthis restricted form of a fold.\n",
            "type": "(( a, c ) -> ( b, c )) -> c -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "maximum",
            "comment": " Given a list of comparable containing at least one element,\n  return its largest element\n",
            "type": "List.SafeList.SafeList comparable (TypeNat.OnePlus n) -> comparable"
          },
          {
            "name": "member",
            "comment": "\nLength-preserving list functions, identical to operations on List.List\n",
            "type": "a -> List.SafeList.SafeList a n -> Bool"
          },
          {
            "name": "minimum",
            "comment": " Given a list of comparable containing at least one element,\nreturn its smallest element\n",
            "type": "List.SafeList.SafeList comparable (TypeNat.OnePlus n) -> comparable"
          },
          {
            "name": "null",
            "comment": " A list of length 0\n",
            "type": "List.SafeList.SafeList a TypeNat.Zero"
          },
          {
            "name": "reverse",
            "comment": " ",
            "type": "List.SafeList.SafeList a n -> List.SafeList.SafeList a n"
          },
          {
            "name": "reverseMapr",
            "comment": "\nLike mapr, but the resulting elements are in reverse order.\nGenerally faster than mapr, use this when order doesn't matter.\n",
            "type": "(( a, c ) -> ( b, c )) -> c -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "scanl",
            "comment": "\nJust like List.scanl, except we now have a guarantee that we increase the list lenght\nby exactly one, since we always put our initial value in the list.\n",
            "type": "(a -> b -> b) -> b -> List.SafeList.SafeList a n -> List.SafeList.SafeList b (TypeNat.OnePlus n)"
          },
          {
            "name": "sort",
            "comment": " Just like List.sort, but with a guarantee that length is preserved\n",
            "type": "List.SafeList.SafeList comparable n -> List.SafeList.SafeList comparable n"
          },
          {
            "name": "sortBy",
            "comment": " Sort based on comparable representatives\n",
            "type": "(a -> comparable) -> List.SafeList.SafeList a n -> List.SafeList.SafeList a n"
          },
          {
            "name": "sortWith",
            "comment": " Sort based on an arbitrary comparison of elements\n",
            "type": "(a -> a -> Basics.Order) -> List.SafeList.SafeList a n -> List.SafeList.SafeList a n"
          },
          {
            "name": "tail",
            "comment": " SafeList way to remove the first element of a list\n",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> List.SafeList.SafeList a n"
          },
          {
            "name": "toList",
            "comment": " Drop type-level information about this list\n",
            "type": "List.SafeList.SafeList a n -> List a"
          },
          {
            "name": "uncons",
            "comment": " Split a non-empty list into a head and a tail\n",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> ( a, List.SafeList.SafeList a n )"
          },
          {
            "name": "unzip",
            "comment": " ",
            "type": "List.SafeList.SafeList ( a, b ) n -> ( List.SafeList.SafeList a n, List.SafeList.SafeList b n )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "JoeyEremondi/typenats",
    "version": "1.0.0",
    "docs": [
      {
        "name": "TypeNat",
        "comment": "\nEasy to remember names for type-level natural numbers.\nThese are intended only to be used as \"phantom types:\"\nthat is, there are no values of type `Zero` or `OnePlus a`.\nInstead, they should be arguments to other type constructors.\n\nElm doesn't have DataKinds, so please don't do anything silly like\n`OnePlus (OnePlus (OnePlus (List (Int, Int))))`\ni.e. please only give another TypeNat as the argument to\nOnePlus.\n\n@docs Zero, OnePlus\n\n",
        "aliases": [],
        "types": [
          {
            "name": "OnePlus",
            "comment": " A phantom type constructor to increment a TypeNat,\ncreating a larger TypeNat.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Zero",
            "comment": " A phantom type for 0, our base TypeNat.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "Kwarrtz/render",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Graphics.Render",
        "comment": " This library provides a toolkit for rendering and manipulating \ngraphics primitives such as lines, polygons, text, images, etc.\nIt is intended primarily for projects that are too complex for \nthe manual manipulation of  an SVG or HTML5 canvas element, but too\nsimple for a fully blown graphics engine such as WebGL (a motivating\nexample would be a simple 2D game).\n\nIn theory, the structure of this library allows for multiple easily\ninterchangable backend rendering targets (i.e. SVG, HTML5 canvas), but\nthe only backend supported at present is SVG.\n\n# Forms\n@docs Form, Point\n\n# Shapes\n@docs Shape, polygon, rectangle, ellipse, circle\n\n# Lines\n@docs Line, polyline, segment\n\n# Images\n@docs image\n\n# Rendering\n@docs svg\n\n# Grouping\n@docs group\n\n# Turning Things into Forms\n\n## Shapes\n@docs solidFill, solidFillWithBorder, textureFill, textureFillWithBorder\n\n## Lines\n@docs solid, dashed, dotted\n\n## Text\n@docs plain, bold, italic, underlined\n\n## HTML\n@docs html\n\n# Modifying Forms\n@docs position, angle, size, opacity, move, rotate, scale\n\n# Custom Styling\n\n## Shapes\n@docs shape, ShapeStyle, FillStyle\n\n## Lines\n@docs line, LineStyle, LineCap, LineJoin\n\n## Text\n@docs text, TextStyle\n",
        "aliases": [
          {
            "name": "Form",
            "comment": " Anything that can be rendered on the screen. A `Form` could be a \nred circle, a line of text, or an arbitrary HTML element.\n\n    redCircle : Form\n    redCircle = circle 10 |> solidFill (rgb 255 0 0) |> position (-20,0)\n\n    blueCircle : Form\n    blueCircle = circle 10 |> solidFill (rgb 0 0 255)\n\n    circles : Form\n    circles = group [redCircle, blueCircle]\n",
            "args": [
              "a"
            ],
            "type": "{ x : Float , y : Float , theta : Float , scale : Float , alpha : Float , form : Graphics.Render.BasicForm a }"
          },
          {
            "name": "LineStyle",
            "comment": " Speficies the styling (color, width, dashing, etc.) of a line.\n\n    -- defines a red, dashed line with a width of 5px\n    { color = rgb 255 20 20\n    , width = 5\n    , cap = Flat\n    , join = Sharp\n    , dashing = [8,4]\n    , dashOffset = 0\n    }\n",
            "args": [],
            "type": "{ color : Color.Color , width : Float , cap : Graphics.Render.LineCap , join : Graphics.Render.LineJoin , dashing : List Int , dashOffset : Int }"
          },
          {
            "name": "Point",
            "comment": " A 2-tuple of `Float`s representing a 2D point. `(0,0)` represents\na point in the middle of the viewport.\n",
            "args": [],
            "type": "( Float, Float )"
          },
          {
            "name": "ShapeStyle",
            "comment": " Specifies the styling (color, border, etc.) of a shape.\n",
            "args": [],
            "type": "{ fill : Graphics.Render.FillStyle , border : Graphics.Render.LineStyle }"
          },
          {
            "name": "TextStyle",
            "comment": " Specifies the styling (color, font, weight, etc.) of text\n",
            "args": [],
            "type": "{ color : Color.Color , fontSize : Int , fontFamily : String , italic : Bool , bold : Bool , underlined : Bool }"
          }
        ],
        "types": [
          {
            "name": "FillStyle",
            "comment": " Describes the fill texture of a shape. It can be a solid color,\ngradient, or tiled texture.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Line",
            "comment": " A segment of a line or curve. Only describes the shape of the line.\nPosition, color, width, etc. are all specified later.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LineCap",
            "comment": " Describes the cap style of a line. `Flat` capped lines have\nno endings, `Square` capped lines have flat endings that extend\nslightly past the end of the line, and `Round` capped lines have\nhemispherical endings.\n",
            "args": [],
            "cases": [
              [
                "Round",
                []
              ],
              [
                "Square",
                []
              ],
              [
                "Flat",
                []
              ]
            ]
          },
          {
            "name": "LineJoin",
            "comment": " Describes the join style of a line. \n",
            "args": [],
            "cases": [
              [
                "Smooth",
                []
              ],
              [
                "Sharp",
                []
              ],
              [
                "Bevel",
                []
              ]
            ]
          },
          {
            "name": "Shape",
            "comment": " A polygon or an ellipse. Only describes the size and shape of the figure.\nPosition, color, width, etc. are all specified later.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "angle",
            "comment": " Sets the angle of a `Form`. The argument is in radians.\n",
            "type": "Float -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "bold",
            "comment": " A line of bold text. The arguments specify the text's\nfont size, family and color respectively.\n",
            "type": "Int -> String -> Color.Color -> String -> Graphics.Render.Form msg"
          },
          {
            "name": "circle",
            "comment": " A circle.\n",
            "type": "Float -> Graphics.Render.Shape"
          },
          {
            "name": "dashed",
            "comment": " The same as `solid`, except the line is dashed.\n",
            "type": "Float -> Color.Color -> Graphics.Render.Line -> Graphics.Render.Form msg"
          },
          {
            "name": "dotted",
            "comment": " The same as `solid`, except the line is dotted.\n",
            "type": "Float -> Color.Color -> Graphics.Render.Line -> Graphics.Render.Form msg"
          },
          {
            "name": "ellipse",
            "comment": " An ellipse. The arugments specify the vertical and horizontal radii,\nrespectively.\n",
            "type": "Float -> Float -> Graphics.Render.Shape"
          },
          {
            "name": "group",
            "comment": " Takes a list of `Form`s and combines them into a single\n`Form`.\n",
            "type": "List (Graphics.Render.Form msg) -> Graphics.Render.Form msg"
          },
          {
            "name": "html",
            "comment": " Creates a `Form` from an arbitrary `Html` element. The\nresulting form is subject to all of the regular manipulations.\nNote that if you are compiling to SVG, then this functionality\nis not supported in Internet Explorer.\n",
            "type": "Html.Html msg -> Graphics.Render.Form msg"
          },
          {
            "name": "image",
            "comment": " An image. The arguments specify the image's width, height and url.\n",
            "type": "Float -> Float -> String -> Graphics.Render.Form msg"
          },
          {
            "name": "italic",
            "comment": " A line of italic text. The arguments specify the text's\nfont size, family and color respectively.\n",
            "type": "Int -> String -> Color.Color -> String -> Graphics.Render.Form msg"
          },
          {
            "name": "line",
            "comment": " Similar to the shape function, line allows you\nto apply any LineStyle to a Line when converting it\nto a form, giving you more fine grained control than\nother similar functions.\n",
            "type": "Graphics.Render.Line -> Graphics.Render.LineStyle -> Graphics.Render.Form msg"
          },
          {
            "name": "move",
            "comment": " Modifies the position of a `Form`.\n",
            "type": "Float -> Float -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "opacity",
            "comment": " Sets the opacity of a `Form`.\n",
            "type": "Float -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "plain",
            "comment": " A line of plain text. The arguments specify the text's\nfont size, family and color respectively.\n",
            "type": "Int -> String -> Color.Color -> String -> Graphics.Render.Form msg"
          },
          {
            "name": "polygon",
            "comment": " `polygon points` is a polygon bounded by `points`.\n",
            "type": "List Graphics.Render.Point -> Graphics.Render.Shape"
          },
          {
            "name": "polyline",
            "comment": " `polyline points` is a polyline with vertices\nat `points`. (A polyline is a collection of connected\nline segments. It can be thought of as drawing a \n\"connect-the-dots\" line through a list of points.)\n",
            "type": "List Graphics.Render.Point -> Graphics.Render.Line"
          },
          {
            "name": "position",
            "comment": " Sets the position of a `Form`.\n\n    -- 'circle' is now centered at (50,50)\n    circle = position (50,50) circle\n",
            "type": "Graphics.Render.Point -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "rectangle",
            "comment": " A rectangle. Arguments specify width and height, respectively.\n",
            "type": "Float -> Float -> Graphics.Render.Shape"
          },
          {
            "name": "rotate",
            "comment": " Modifies the angle of a `Form`. \n",
            "type": "Float -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "scale",
            "comment": " Modifies the scale of a `Form`.\n",
            "type": "Float -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "segment",
            "comment": " `segment (x1,y1) (x2,y2)` is a line segment with\nendpoints at `(x1,y1)` and `(x2,y2)`.\n",
            "type": "Graphics.Render.Point -> Graphics.Render.Point -> Graphics.Render.Line"
          },
          {
            "name": "shape",
            "comment": " The `*Fill` and `*FillWithBorder` functions\nallow you to add styling to your shapes and conver them\ninto forms, but sometimes those functions don't offer \nenough flexibility. What if you want a dashed border\ninstead of a solid one? Or how about a beveled join on\nthe border? For this you must turn to the shape function.\nThe `shape` function takes a `Shape` and *any* `ShapeStyle`\nand converts them into a `Form`, giving you total control\nover the styling of the shape.\n",
            "type": "Graphics.Render.Shape -> Graphics.Render.ShapeStyle -> Graphics.Render.Form msg"
          },
          {
            "name": "size",
            "comment": " Sets the scale of a `Form`. \n",
            "type": "Float -> Graphics.Render.Form msg -> Graphics.Render.Form msg"
          },
          {
            "name": "solid",
            "comment": " `solid width color line` is a solid line of width `width` \nand color `color` whose path is described by `line`.\n",
            "type": "Float -> Color.Color -> Graphics.Render.Line -> Graphics.Render.Form msg"
          },
          {
            "name": "solidFill",
            "comment": " Fills a shape with a solid color.\n",
            "type": "Color.Color -> Graphics.Render.Shape -> Graphics.Render.Form msg"
          },
          {
            "name": "solidFillWithBorder",
            "comment": " Fills a shape with a solid color and borders it with a solid line.\nArguments specify fill color, border width and border color, respectively.\n",
            "type": "Color.Color -> Float -> Color.Color -> Graphics.Render.Shape -> Graphics.Render.Form msg"
          },
          {
            "name": "svg",
            "comment": " Takes a `Form` and renders it to usable HTML, in this case\nin the form of an SVG element. The first two arguments determine\nthe height and width of the SVG viewbox in pixels.\n",
            "type": "Float -> Float -> Graphics.Render.Form msg -> Html.Html msg"
          },
          {
            "name": "text",
            "comment": " Similar to `shape` and `line`, the `text` function \nwill take a string and any `TextStyle` and convert them\ninto a form. It is useful for when functions like `plain`\nand `bold` don't offer enough flexibility and you need\nmore control over the styling of your text.\n",
            "type": "String -> Graphics.Render.TextStyle -> Graphics.Render.Form msg"
          },
          {
            "name": "textureFill",
            "comment": " Tiles a shape with a repeated image. The arguments specify the image width,\nheight and url respectively.\n",
            "type": "Float -> Float -> String -> Graphics.Render.Shape -> Graphics.Render.Form msg"
          },
          {
            "name": "textureFillWithBorder",
            "comment": " Tiles a shape with a repeated image and borders it with a solid line. The\narguments specify the url width, height and url, followed by the border width and\ncolor.\n",
            "type": "Float -> Float -> String -> Float -> Color.Color -> Graphics.Render.Shape -> Graphics.Render.Form msg"
          },
          {
            "name": "underlined",
            "comment": " A line of underlined text. The arguments specify the text's\nfont size, family and color respectively.\n",
            "type": "Int -> String -> Color.Color -> String -> Graphics.Render.Form msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "MatthewJohnHeath/elm-fingertree",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Container",
        "comment": " Dequeue with random access\n# Definition\n@docs Container\n\n# Create\n@docs empty, fromList\n\n# Dequeue Operations\n@docs pushFront, popFront, peekFront, pushBack, popBack, peekBack, size\n\n# Random Access\n@docs get, set, remove, insert, slice\n",
        "aliases": [
          {
            "name": "Container",
            "comment": "A container allowing constant time dequeue operations and log time access ",
            "args": [
              "a"
            ],
            "type": "Annotated.AnnotatedFingerTree a Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": "An empty container",
            "type": "Container.Container a"
          },
          {
            "name": "fromList",
            "comment": "Make a container from a list",
            "type": "List a -> Container.Container a"
          },
          {
            "name": "get",
            "comment": " Get the element at an index",
            "type": "Int -> Container.Container a -> Maybe.Maybe a"
          },
          {
            "name": "insert",
            "comment": "Insert an element at an index moving later elements to the right",
            "type": "Int -> a -> Container.Container a -> Maybe.Maybe (Container.Container a)"
          },
          {
            "name": "peekBack",
            "comment": "See the back element",
            "type": "Container.Container a -> Maybe.Maybe a"
          },
          {
            "name": "peekFront",
            "comment": "See the front element",
            "type": "Container.Container a -> Maybe.Maybe a"
          },
          {
            "name": "popBack",
            "comment": "Take from the back",
            "type": "Container.Container a -> Container.Container a"
          },
          {
            "name": "popFront",
            "comment": "Take from the front",
            "type": "Container.Container a -> Container.Container a"
          },
          {
            "name": "pushBack",
            "comment": "Add at the back",
            "type": "a -> Container.Container a -> Container.Container a"
          },
          {
            "name": "pushFront",
            "comment": " Add to the front",
            "type": "a -> Container.Container a -> Container.Container a"
          },
          {
            "name": "remove",
            "comment": "Remove the element at an index mobing later elements to the left",
            "type": "Int -> Container.Container a -> Maybe.Maybe (Container.Container a)"
          },
          {
            "name": "set",
            "comment": "Set the element at an index",
            "type": "Int -> a -> Container.Container a -> Maybe.Maybe (Container.Container a)"
          },
          {
            "name": "size",
            "comment": "The number of elements in the collection",
            "type": "Container.Container a -> Int"
          },
          {
            "name": "slice",
            "comment": "Get a sub-section of an array: (slice start end array). The start is a zero-based index where we will start our slice.\nThe end is a zero-based index that indicates the end of the slice. The slice extracts up to but not including end.",
            "type": "Int -> Int -> Container.Container a -> Container.Container a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "PriorityQueue",
        "comment": "Purely functional priority queue\n#Definition\n@docs PriorityQueue\n#Create\n@docs empty\n# Priority queue operations\n@docs topPriority, top, pop, push\n",
        "aliases": [
          {
            "name": "PriorityQueue",
            "comment": "Persistant prirotiy queue. Constant time push and access to top. ",
            "args": [
              "a",
              "comparable"
            ],
            "type": "Annotated.AnnotatedFingerTree (Monoid.WithAppendedZero ( a, comparable )) (Monoid.WithAppendedZero ( a, comparable ))"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " returns an empty priority queue",
            "type": "PriorityQueue.PriorityQueue a comparable"
          },
          {
            "name": "pop",
            "comment": "Remove the element with the top priority. Returns Nothing if input was empty",
            "type": "PriorityQueue.PriorityQueue a comparable -> Maybe.Maybe (PriorityQueue.PriorityQueue a comparable)"
          },
          {
            "name": "push",
            "comment": "Add element to priority queue",
            "type": "comparable -> a -> PriorityQueue.PriorityQueue a comparable -> PriorityQueue.PriorityQueue a comparable"
          },
          {
            "name": "top",
            "comment": "Returns the value with the highest prority",
            "type": "PriorityQueue.PriorityQueue a comparable -> Maybe.Maybe a"
          },
          {
            "name": "topPriority",
            "comment": "Returns the highest priority in the priority queue",
            "type": "PriorityQueue.PriorityQueue a comparable -> Maybe.Maybe comparable"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Annotated",
        "comment": "Annotated finger tree\n# Definitions\n@docs AnnotatedFingerTree, Split\n\n# Create\n@docs empty, reduce\n\n# Dequeue operations\n@docs leftPeek, leftPop,leftPush, rightPeek, rightPop, rightPush\n\n# Concatanation\n@docs concat, concatWithMiddle\n\n#Splits\n@docs annotate, split\n\n#Array operations\n@docs get, set, remove, insert\n\n#Slices\n@docs before, after, upTo, from\n",
        "aliases": [
          {
            "name": "AnnotatedFingerTree",
            "comment": "Finger tree annotated by a Monoid",
            "args": [
              "a",
              "b"
            ],
            "type": "{ monoid : Monoid.Monoid b , projection : a -> b , tree : Internal.InternalFingerTree a b }"
          },
          {
            "name": "Split",
            "comment": "Like a zipper",
            "args": [
              "a",
              "b"
            ],
            "type": "{ left : Annotated.AnnotatedFingerTree a b , middle : a , right : Annotated.AnnotatedFingerTree a b }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "after",
            "comment": "elements after measure turns true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "annotate",
            "comment": "annotate",
            "type": "Annotated.AnnotatedFingerTree a b -> Internal.Split a b -> Annotated.Split a b"
          },
          {
            "name": "before",
            "comment": "elements before measure turns true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "concat",
            "comment": " concatanate",
            "type": "Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "concatWithMiddle",
            "comment": " concatanate trees left and right with a list in between",
            "type": "Annotated.AnnotatedFingerTree a b -> List a -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "empty",
            "comment": " Empty finger tree specifiying monoid and projection",
            "type": "Monoid.Monoid b -> (a -> b) -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "from",
            "comment": "elements after and equal to when measure turns true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "get",
            "comment": "get element when measure turns true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Maybe.Maybe a"
          },
          {
            "name": "insert",
            "comment": "insert element before measure turns true",
            "type": "(b -> Bool) -> a -> Annotated.AnnotatedFingerTree a b -> Maybe.Maybe (Annotated.AnnotatedFingerTree a b)"
          },
          {
            "name": "leftPeek",
            "comment": "returns the leftmost element",
            "type": "Annotated.AnnotatedFingerTree a b -> Maybe.Maybe a"
          },
          {
            "name": "leftPop",
            "comment": "removes from left",
            "type": "Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "leftPush",
            "comment": "adds to left",
            "type": "a -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "reduce",
            "comment": "reduce",
            "type": "Annotated.AnnotatedFingerTree a b -> b"
          },
          {
            "name": "remove",
            "comment": "remove element when measure turns true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Maybe.Maybe (Annotated.AnnotatedFingerTree a b)"
          },
          {
            "name": "rightPeek",
            "comment": "returns rightmost element",
            "type": "Annotated.AnnotatedFingerTree a b -> Maybe.Maybe a"
          },
          {
            "name": "rightPop",
            "comment": " remove from right",
            "type": "Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "rightPush",
            "comment": "add to right",
            "type": "a -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          },
          {
            "name": "set",
            "comment": "set element when measure turns true",
            "type": "(b -> Bool) -> a -> Annotated.AnnotatedFingerTree a b -> Maybe.Maybe (Annotated.AnnotatedFingerTree a b)"
          },
          {
            "name": "split",
            "comment": "Let & be the monoid operation\n  split measure aft returns the split at the leftmost \"middle\" such that ( (reduce split left ) & split.middle ) |> measure = true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Maybe.Maybe (Annotated.Split a b)"
          },
          {
            "name": "upTo",
            "comment": "elements before and equal to when measure turns true",
            "type": "(b -> Bool) -> Annotated.AnnotatedFingerTree a b -> Annotated.AnnotatedFingerTree a b"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Monoid",
        "comment": " Module defining a monoid on a type and some functions for creatinbg them\n# Definition\n@docs Monoid, WithAppendedZero\n\n# Create\n@docs appendZero, int\n\n",
        "aliases": [
          {
            "name": "Monoid",
            "comment": "Contains a binary operator op : a -> a-> a such that op (op a b) c) = op a (op b c)\n(associativity) and an element zero of type a such that for any a' of type a\nop a' zero = op zero a' = a'",
            "args": [
              "a"
            ],
            "type": "{ zero : a, op : a -> a -> a }"
          }
        ],
        "types": [
          {
            "name": "WithAppendedZero",
            "comment": "Basically the same as Maybe. Adjoins a single extra eleemnt that we will use to make associtaive operators into monoid",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "appendZero",
            "comment": "Given an associative function a->a->a extends this to a with an extra \"zero\" element to produce a monoid",
            "type": "(a -> a -> a) -> Monoid.Monoid (Monoid.WithAppendedZero a)"
          },
          {
            "name": "int",
            "comment": "The monoid of integers with normal addition as the operation and 0 as zero ",
            "type": "Monoid.Monoid Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-api-components",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Component.Filter.View",
        "comment": " A view display for a filter\n@docs view, viewFilterCheckbox\n\n## Css stuff\n@docs CssClasses, filterNamespace\n",
        "aliases": [],
        "types": [
          {
            "name": "CssClasses",
            "comment": " The CSS classes used in this view\n",
            "args": [],
            "cases": [
              [
                "FilterGroup",
                []
              ],
              [
                "FilterEntry",
                []
              ],
              [
                "Checkbox",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "filterNamespace",
            "comment": " Our namespace for these filters\n",
            "type": "Html.CssHelpers.Namespace String a b Component.Filter.Update.Action"
          },
          {
            "name": "view",
            "comment": " Displays all filters in the model side-by-side\n",
            "type": "Component.Filter.Model.Model b c -> Html.Html Component.Filter.Update.Action"
          },
          {
            "name": "viewFilterCheckbox",
            "comment": " Displays a single filter field\n",
            "type": "Component.Filter.Model.FilterField a -> Html.Html Component.Filter.Update.Action"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Component.Filter.Update",
        "comment": " Our API for a filtering component\n@docs Action, update\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " The actions defined here can be considered our external API\nThe top level component will be able to trigger these actions,\nas well as the local component\n",
            "args": [],
            "cases": [
              [
                "NoOp",
                []
              ],
              [
                "SetFilterDisabled",
                [
                  "String",
                  "Bool"
                ]
              ],
              [
                "SetFilterChecked",
                [
                  "String",
                  "Bool"
                ]
              ],
              [
                "SetFilterVisible",
                [
                  "String",
                  "Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "update",
            "comment": " Takes the addresses record, the action, and the model\nRuns the defined action on the model\n",
            "type": "Component.Filter.Update.Action -> Component.Filter.Model.Model b c -> ( Component.Filter.Model.Model b c , Platform.Cmd.Cmd Component.Filter.Update.Action )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Component.Filter.Model",
        "comment": " Our filter API\n\n@docs Model, FilterField\n\n",
        "aliases": [
          {
            "name": "FilterField",
            "comment": "\nEach filter field has a bunch of properties useful for displaying data\n",
            "args": [
              "a"
            ],
            "type": "{ name : String , isDisabled : Bool , isChecked : Bool , isVisible : Bool , value : String , text : String , type' : a }"
          },
          {
            "name": "Model",
            "comment": " Demand that the model has a filter property. This means you can either use\na top level model like\n```\ntype alias Model = { filters : [] }\n```\nor\n```\ntype alias Model = { filterA : { filters [] } }\n```\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ a | filters : List (Component.Filter.Model.FilterField b) }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-decode-pipeline",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Json.Decode.Pipeline",
        "comment": " # Json.Decode.Pipeline\n\nUse the `(|>)` operator to build JSON decoders.\n\n## Decoding fields\n\n@docs required, requiredAt, optional, optionalAt, hardcoded, custom, nullable\n\n## Beginning and ending pipelines\n\n@docs decode, resolveResult\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "custom",
            "comment": " Run the given decoder and feed its result into the pipeline at this point.\n\nConsider this example.\n\n    import Json.Decode exposing (int, string, at, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, custom)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> custom (at [ \"profile\", \"name\" ] string)\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\n            \"id\": 123,\n            \"email\": \"sam@example.com\",\n            \"profile\": {\"name\": \"Sam\"}\n          }\n        \"\"\"\n    -- Ok { id = 123, name = \"Sam\", email = \"sam@example.com\" }\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "decode",
            "comment": " Begin a decoding pipeline. This is a synonym for [Json.Decode.succeed](http://package.elm-lang.org/packages/elm-lang/core/3.0.0/Json-Decode#succeed),\nintended to make things read more clearly.\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , name : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> optional \"name\" string \"\"\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "hardcoded",
            "comment": " Rather than decoding anything, use a fixed value for the next step in the\npipeline. `harcoded` does not look at the JSON at all.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , followers : Int\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> hardcoded 0\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\"}\n        \"\"\"\n    -- Ok { id = 123, email = \"sam@example.com\", followers = 0 }\n",
            "type": "a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "nullable",
            "comment": " Extract a value that might be `null`.\n\nIf the value is `null`, decodes to `Nothing`.\nIf the value is not `null`, runs the given decoder on it and...\n\n* ...If that decoder succeeds, wraps its success value in a `Just`.\n* ...If it fails, the entire decoding operation fails.\n\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , name : Maybe String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> required \"name\" (nullable string)\n\nIn the above example,\n\n* If `name` is `null`, it will successfully decode to `Nothing`\n* If `name` is `\"Lee\"` it will successfully decode to `Just \"Lee\"`\n* If `name` is not present, the whole decoder will fail.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "optional",
            "comment": " Decode a field that may be missing or have a null value. If the field is\nmissing, then it decodes as the `fallback` value. If the field is present,\nthen `valDecoder` is used to decode its value. If `valDecoder` fails on a\n`null` value, then the `fallback` is used as if the field were missing\nentirely.\n\n    import Json.Decode exposing (int, string, null, oneOf, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> optional \"name\" string \"blah\"\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\" }\n        \"\"\"\n    -- Ok { id = 123, name = \"blah\", email = \"sam@example.com\" }\n\nBecause `valDecoder` is given an opportunity to decode `null` values before\nresorting to the `fallback`, you can distinguish between missing and `null`\nvalues if you need to:\n\n    userDecoder2 =\n        decode User\n            |> required \"id\" int\n            |> optional \"name\" (oneOf [ string, null \"NULL\" ]) \"MISSING\"\n            |> required \"email\" string\n\n",
            "type": "String -> Json.Decode.Decoder a -> a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "optionalAt",
            "comment": " Decode an optional nested field.\n",
            "type": "List String -> Json.Decode.Decoder a -> a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "required",
            "comment": " Decode a required field.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"name\" string\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\", \"name\": \"Sam\"}\n        \"\"\"\n    -- Ok { id = 123, name = \"Sam\", email = \"sam@example.com\" }\n",
            "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "requiredAt",
            "comment": " Decode a required nested field.\n",
            "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "resolveResult",
            "comment": " Convert a `Decoder (Result x a)` into a `Decoder a`. Useful when you want\nto perform some custom processing just before completing the decoding operation.\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Json.Decode.Pipeline exposing\n      (decode, required, resolveResult)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      let\n        -- asResult gets run *after* all the\n        -- (|> required ...) steps are done.\n        asResult : Int -> String -> Int -> Result String User\n        asResult id email version =\n          if version > 2 then\n            Ok (User id email)\n          else\n            Err \"This JSON is from a deprecated source. Please upgrade!\"\n      in\n        decode asResult\n          |> required \"id\" int\n          |> required \"email\" string\n          |> required \"version\" int -- version is part of asResult,\n          |> resolveResult          -- but it is not a part of User\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\", \"version\": 1}\n        \"\"\"\n    -- Err \"This JSON is from a deprecated source. Please upgrade!\"\n",
            "type": "Json.Decode.Decoder (Result.Result String a) -> Json.Decode.Decoder a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-phoenix",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Phoenix.Channel.Helpers",
        "comment": " Helpers\n\nConvert your response type from a string to a message\n@docs assignResponseType\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "assignResponseType",
            "comment": " Converts a string into a Msg\n",
            "type": "String -> Phoenix.Channel.Update.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Phoenix.Channel.Update",
        "comment": "\n\nThe possible messages from the server\n@docs Msg\n\nThe update function for dealing with that\n@docs update\n",
        "aliases": [],
        "types": [
          {
            "name": "Msg",
            "comment": "\n  - SuccessfulResponse is only triggered when \"ok\" is the status\n  - ErrorResponse is everything else\n",
            "args": [],
            "cases": [
              [
                "SuccessfulResponse",
                [
                  "Phoenix.Channel.Model.SocketMessage"
                ]
              ],
              [
                "ErrorResponse",
                [
                  "String"
                ]
              ],
              [
                "SendMessage",
                [
                  "Phoenix.Channel.Model.MessageToSend"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "update",
            "comment": " Take a msg from a channel, and update the model based on the msg recieved\n",
            "type": "Phoenix.Channel.Update.Msg -> Phoenix.Channel.Model.Model a -> ( Phoenix.Channel.Model.Model a , Platform.Cmd.Cmd Phoenix.Channel.Update.Msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Phoenix.Channel.Model",
        "comment": " Types used for representing things that come from a phoenix channel\n\nOur model used in our Program components\n@docs Model\n\nDealing with server responses\n@docs decodeSocketMessage\n@docs SocketMessage, ResponsePayload, Response\n\nSending stuff to the server\n@docs encodeMessageToSend\n@docs MessageToSend\n",
        "aliases": [
          {
            "name": "MessageToSend",
            "comment": " Like a socket message, but comes with a pre-encoded payload\n",
            "args": [],
            "type": "{ topic : String , ref : Int , payload : Json.Encode.Value , event : String }"
          },
          {
            "name": "Model",
            "comment": " We demand that any model must store the socket events, the current refNumber, and\nthe state of connection\n",
            "args": [
              "a"
            ],
            "type": "{ a | socketEvents : List Phoenix.Channel.Model.SocketMessage, refNumber : Int, connected : Bool, socketUrl : String }"
          },
          {
            "name": "Response",
            "comment": " A response from the server\n",
            "args": [],
            "type": "{ reason : String }"
          },
          {
            "name": "ResponsePayload",
            "comment": " The status of the response paired with the response itself\n",
            "args": [],
            "type": "{ status : String, response : Phoenix.Channel.Model.Response }"
          },
          {
            "name": "SocketMessage",
            "comment": " Each socket response has the topic (room) as a string, along with a ref count\n    the event to trigger, and the payload of what the server actually sent\n",
            "args": [],
            "type": "{ topic : String , ref : Int , payload : Phoenix.Channel.Model.ResponsePayload , event : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "decodeSocketMessage",
            "comment": " Decode a socket response.\n",
            "type": "Json.Decode.Decoder Phoenix.Channel.Model.SocketMessage"
          },
          {
            "name": "encodeMessageToSend",
            "comment": " Encode a message to send\n",
            "type": "Phoenix.Channel.Model.MessageToSend -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-rails",
    "version": "4.0.3",
    "docs": [
      {
        "name": "Rails.Decode",
        "comment": "\n\nTypes\n@docs ErrorList\n\n# Decoding\n@docs errors\n\n",
        "aliases": [
          {
            "name": "ErrorList",
            "comment": " ErrorList is a type alias for\na list of fields to String, where `field` is expected to be a type for matching\nerrors to\n```\n\ntype Field = Name | Password\n\ndecode : ErrorList Field\n\n```\n",
            "args": [
              "field"
            ],
            "type": "List ( field, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "errors",
            "comment": " Decodes errors passed from rails formatted as\n\n`{ errors: {errorName: [\"Error String\"] } }`.\n\nThis function takes a Dict that is a map of all the fields you need decoded. It should be formatted\nnest\n\nDict.fromList\n    [ ( \"school\", School )\n    , ( \"school.name\", SchoolName )\n    , ( \"school.address\", SchoolAddress )\n    , ( \"school.city\", City )\n    , ( \"school.state\", State )\n    , ( \"school.zip\", Zip )\n    , ( \"school.country\", Country )\n    ]\n\n",
            "type": "Dict.Dict String field -> Json.Decode.Decoder (Rails.Decode.ErrorList field)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Rails",
        "comment": "\n\n# Http\n@docs Error, get, post, send, fromJson, always, decoder\n\n# Tokens\n@docs csrfToken\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " The kinds of errors a Rails server may return.\n",
            "args": [
              "error"
            ],
            "cases": [
              [
                "HttpError",
                [
                  "Http.Error"
                ]
              ],
              [
                "RailsError",
                [
                  "error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "always",
            "comment": " Returns a decoder suitable for passing to `fromJson`, which uses the same decoder for both success and failure responses.\n",
            "type": "Json.Decode.Decoder value -> Rails.ResponseDecoder value value"
          },
          {
            "name": "csrfToken",
            "comment": " If there was a `<meta name=\"csrf-token\">` tag in the page's `<head>` when\n    elm-rails loaded, returns the value its `content` attribute had at that time.\n\n    Rails expects this value in the `X-CSRF-Token` header for non-`GET` requests as\n    a [CSRF countermeasure](http://guides.rubyonrails.org/security.html#csrf-countermeasures).\n",
            "type": "Maybe.Maybe String"
          },
          {
            "name": "decoder",
            "comment": " Returns a decoder suitable for passing to `fromJson`.\n",
            "type": "Json.Decode.Decoder value -> Json.Decode.Decoder error -> Rails.ResponseDecoder error value"
          },
          {
            "name": "fromJson",
            "comment": " Think `Http.fromJson`, but with additional effort to parse a non-20x response as JSON.\n\n  * If the status code is in the 200 range, try to parse with the given `decoder.success`.\n    * If parsing fails, return an `Http.UnexpectedPayload` wrapped in `HttpError`\n  * If the status code is outside the 200 range, try to parse with the given `decoder.success`.\n    * If parsing fails, return an `Http.BadResponse` wrapped in `HttpError`\n",
            "type": "Rails.ResponseDecoder error value -> Task.Task Http.RawError Http.Response -> Task.Task (Rails.Error error) value"
          },
          {
            "name": "get",
            "comment": " Send a GET request to the given URL. You also specify how to decode the response.\n\n    import Json.Decode (list, string)\n\n    hats : Task (Error (List String)) (List String)\n    hats =\n      get (decoder (list string) (succeed ())) \"http://example.com/hat-categories.json\"\n\n",
            "type": "Rails.ResponseDecoder error value -> String -> Task.Task (Rails.Error error) value"
          },
          {
            "name": "post",
            "comment": " Send a POST request to the given URL. You also specify how to decode the response.\n\n  import Json.Decode (list, string)\n  import Http\n\n  hats : Task (Error (List String)) (List String)\n  hats =\n    post (decoder (list string) (succeed ())) \"http://example.com/hat-categories.json\" Http.empty\n\n",
            "type": "Rails.ResponseDecoder error value -> String -> Http.Body -> Task.Task (Rails.Error error) value"
          },
          {
            "name": "send",
            "comment": " Utility for working with Rails. Wraps Http.send, passing an Authenticity Token along with the type of request. Suitable for use with `fromJson`:\n\n    import Dict\n    import Json.Decode (list, string)\n    import Json.Encode as Encode\n    import Http\n\n    hats : HatStyle -> Task (Error (List String)) (List String)\n    hats style =\n\n      let\n        payload =\n          Encode.object\n            [ ( \"style\", encodeHatStyle style ) ]\n\n        body =\n          Http.string (Encode.encode 0 payload)\n\n        success =\n          list string\n\n        failure =\n          Dict.fromList [ (\"style\", HatStyle) ]\n            |> Rails.Decode.errors\n      in\n        send \"POST\" url body\n          |> fromJson (decoder success failure)\n",
            "type": "String -> String -> Http.Body -> Task.Task Http.RawError Http.Response"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-string-extra",
    "version": "1.3.1",
    "docs": [
      {
        "name": "String.Extra",
        "comment": " Convenience functions for working with Strings\n\n# Formatting\n@docs capitalize, pluralize, toSentence\n\n# Whitespace\n@docs isWhitespace\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "capitalize",
            "comment": " Capitalize or uncapitalize the given string.\n\n    capitalize True \"foo\"\n    -- \"Foo\"\n\n    capitalize False \"BAR\"\n    -- \"bAR\"\n",
            "type": "Bool -> String -> String"
          },
          {
            "name": "isWhitespace",
            "comment": " Returns True iff the given String is 1 or more whitespace characters,\nand nothing else.\n\n(Whitespace is defined as the regular expression `\\s` matcher.)\n\n    isWhitespace \"\"   == False\n    isWhitespace \" \"  == True\n    isWhitespace \"  \" == True\n    isWhitespace \" x\" == False\n    isWhitespace \"x \" == False\n",
            "type": "String -> Bool"
          },
          {
            "name": "pluralize",
            "comment": " Given a number, a singular string, and a plural string, returns the number\nfollowed by a space, followed by either the singular string if the number was 1,\nor the plural string otherwise.\n\n    pluralize \"elf\" \"elves\" 2 == \"2 elves\"\n    pluralize \"elf\" \"elves\" 1 == \"1 elf\"\n    pluralize \"elf\" \"elves\" 0 == \"0 elves\"\n\n",
            "type": "String -> String -> number -> String"
          },
          {
            "name": "toSentence",
            "comment": " Converts a list of strings into a human formatted readable list\n\n\n    toSentence [] ---> \"\"\n    toSentence [\"lions\"] ---> \"lions\"\n    toSentence [\"lions\", \"tigers\"] --> \"lions and tigers\"\n    toSentence [\"lions\", \"tigers\", \"bears\"] --> \"lions, tigers, and bears\"\n\nnotes:\n* It *DOES* include an oxford comma\n* It *DOES NOT* include a period\n* It *DOES NOT* include the phrase \"...oh my!\"\n\n",
            "type": "List String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-sweet-poll",
    "version": "2.0.0",
    "docs": [
      {
        "name": "SweetPoll",
        "comment": "\n\n# Configuration\n@docs Config, defaultConfig\n\n# Elm Artchitecture\n@docs Model, Action, init, update\n\n# Record Extension Component\n@docs ComponentModel, componentUpdate\n",
        "aliases": [
          {
            "name": "ComponentModel",
            "comment": " Model type for using the NoRedInk/elm-api-components pattern\n",
            "args": [
              "base",
              "data"
            ],
            "type": "{ base | sweetPoll : SweetPoll.Model data }"
          },
          {
            "name": "Config",
            "comment": " ",
            "args": [
              "data"
            ],
            "type": "{ url : String , decoder : Json.Decode.Decoder data , delay : Time.Time , samesBeforeDelay : Int , delayMultiplier : Float , maxDelay : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " ",
            "args": [
              "data"
            ],
            "cases": [
              [
                "PollSuccess",
                [
                  "data"
                ]
              ],
              [
                "PollFailure",
                [
                  "Testable.Http.Error"
                ]
              ]
            ]
          },
          {
            "name": "Model",
            "comment": " Private state of the SweetPoll component\n",
            "args": [
              "data"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "componentUpdate",
            "comment": " Update function for using the NoRedInk/elm-api-components pattern\n",
            "type": "SweetPoll.Action data -> SweetPoll.ComponentModel base data -> ( SweetPoll.ComponentModel base data , Testable.Cmd.Cmd (SweetPoll.Action data) )"
          },
          {
            "name": "defaultConfig",
            "comment": " Default configuration for SweetPoll\n",
            "type": "Json.Decode.Decoder data -> String -> SweetPoll.Config data"
          },
          {
            "name": "init",
            "comment": " ",
            "type": "SweetPoll.Config data -> ( SweetPoll.Model data, Testable.Cmd.Cmd (SweetPoll.Action data) )"
          },
          {
            "name": "update",
            "comment": " The SweetPoll StartApp-style update function\n",
            "type": "SweetPoll.Action data -> SweetPoll.Model data -> ( SweetPoll.Model data, Testable.Cmd.Cmd (SweetPoll.Action data) )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-task-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Task.Extra",
        "comment": " Contains a list of convenient functions that cover common use cases\nfor tasks.\n\n# Chaining Tasks\n@docs optional, parallel\n\n# Delay a task\n@docs delay\n\n# Looping forever\n@docs loop\n\n# Commands\n@docs performFailproof\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "delay",
            "comment": " Delay a task by a given amount of time in milliseconds.\n",
            "type": "Time.Time -> Task.Task error value -> Task.Task error value"
          },
          {
            "name": "loop",
            "comment": " Runs a task repeatedly every given milliseconds.\n\n    loop 1000 myTask -- Runs `myTask` every second\n",
            "type": "Time.Time -> Task.Task error value -> Task.Task error ()"
          },
          {
            "name": "optional",
            "comment": " Similar to `Task.sequence`.\nThe difference with `Task.sequence` is that it doesn't return an `error` if\nany individual task fails. If an error is encountered, then this function will\nmarch on and perform the next task ignoring the error.\n",
            "type": "List (Task.Task x value) -> Task.Task y (List value)"
          },
          {
            "name": "parallel",
            "comment": " Analogous to `Task.sequence`.\nSchedule a list of tasks to be performed in parallel as opposed to in series\nas is the case with `Task.sequence`.\n\n*Note that there is no guarantee that the tasks will be performed or complete\nin the order you have stated. This is why you may use the returned `Process.Id`\nfor re-ordering or consider integrating a sorting mechanism within your program.*\n",
            "type": "List (Task.Task error value) -> Task.Task error (List Process.Id)"
          },
          {
            "name": "performFailproof",
            "comment": " Command the runtime system to perform a task that is guaranteed to\nnot fail. The most important argument is the\n[`Task`](http://package.elm-lang.org/packages/elm-lang/core/latest/Task#Task)\nwhich describes what you want to happen. But you also need to provide\na function to tag the success outcome, so as to have a message to feed\nback into your application. Unlike with the standard\n[`perform`](http://package.elm-lang.org/packages/elm-lang/core/latest/Task#perform),\nyou need not provide a function to tag a failing outcome, because the\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\nin the type `Task Never a` expresses that no possibly failing task is\nallowed in that place anyway.\n\nA typical use of the function is `Date.now |> performFailproof CurrentDate`.\n",
            "type": "(a -> msg) -> Task.Task Basics.Never a -> Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "NoRedInk/nri-elm-css",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Nri.Stylers",
        "comment": " Helper module for working with fonts\n\n@docs makeFont\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "makeFont",
            "comment": "\ntakes a size and a color and creates a font\n",
            "type": "Css.FontSize a -> Css.ColorValue b -> Css.Mixin"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Nri.Colors",
        "comment": " Helper module for working with colors\n@docs grayDarker\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "grayDarker",
            "comment": " Darkest gray\n",
            "type": "Css.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Nri",
        "comment": " A collection of helpers for working with NoRedInk projects\n@docs name\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "name",
            "comment": " NoRedInk's name!\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "RobbieMcKinstry/stripe",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Checkout",
        "comment": " Wrapper for the Stripe Checkout embedded form. See [this link](https://stripe.com/docs/checkout/tutorial) for the official documentation\n\n# Data\n@docs Model \nModel is A simple structural type that contains all of the information passed as data-attributes to Stripe checkout script.\n        \n@docs checkout \ncheckout is the function that, taking a model, returns the HTML configured with that model. It will be the \"Pay with Card\" button from the above linked tutorial.\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": "\n\n@docs Model is A simple structural type that contains all of the information passed as data-attributes to Stripe checkout script.\n \n",
            "args": [],
            "type": "{ key : String , amount : String , name : String , description : String , imageUrl : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "checkout",
            "comment": "\n@docs checkout \ncheckout is the function that, taking a model, returns the HTML configured with that model. It will be the \"Pay with Card\" button from the above linked tutorial.\n",
            "type": "Checkout.Model -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "SamirTalwar/arborist",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Arborist.Framework",
        "comment": " Arborist is a test framework for asynchronous code.\n\nIt is intended for use mostly with Tasks. Tests are defined as assertions on\ntasks, which are executed in parallel and reported on the command line.\n\n# Declaring tests\n@docs Test, Tests, Name, test\n\n# Assertions\n@docs assert, pass, fail, failWith\n",
        "aliases": [
          {
            "name": "Name",
            "comment": " The name of a test. ",
            "args": [],
            "type": "String"
          },
          {
            "name": "Tests",
            "comment": " A list of `Test` cases. ",
            "args": [],
            "type": "List Arborist.Framework.Test"
          }
        ],
        "types": [
          {
            "name": "Test",
            "comment": " A test case, usually constructed with the `test` function. ",
            "args": [],
            "cases": [
              [
                "Test",
                [
                  "Arborist.Framework.Name",
                  "Arborist.Assertions.Assertion"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "assert",
            "comment": " `assert` runs a matcher against a value. All values are generally wrapped in tasks.\n\n    let\n      a = Task.succeed 7\n      b = Task.succeed 3\n      c = Task.map2 (+) a b\n    in\n      assert c (equals (Task.succeed 10))\n\nThis function is re-exported from `Arborist.Assertions` for your convenience.\n",
            "type": "Task.Task a b -> Arborist.Matchers.Matcher a b -> Arborist.Assertions.Assertion"
          },
          {
            "name": "fail",
            "comment": " `fail` forces the test to fail.\n\nThis function is re-exported from `Arborist.Assertions` for your convenience.\n",
            "type": "Arborist.Assertions.Assertion"
          },
          {
            "name": "failWith",
            "comment": " `failWith` forces the test to fail with a reason.\n\nThis function is re-exported from `Arborist.Assertions` for your convenience.\n",
            "type": "String -> Arborist.Assertions.Assertion"
          },
          {
            "name": "pass",
            "comment": " `pass` always passes.\n\nThis function is re-exported from `Arborist.Assertions` for your convenience.\n",
            "type": "Arborist.Assertions.Assertion"
          },
          {
            "name": "test",
            "comment": " Defines a test case.\n\n    test \"One plus one is most definitely two\" (\n      assert (Task.succeed (1 + 1)) (equals (Task.succeed 2))\n    )\n",
            "type": "Arborist.Framework.Name -> Arborist.Assertions.Assertion -> Arborist.Framework.Test"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Arborist.Matchers",
        "comment": " Provides a set of matchers used for assertions.\n\n# Types\n@docs Matcher\n\n# Matchers\n@docs equals, isIntBetween\n@docs not'\n\n# Helpers\n\nThe helpers are generally only to be used when constructing your own matchers.\n\n@docs fails, failsWith\n@docs onFailure, sequenceMessages\n\n",
        "aliases": [
          {
            "name": "Matcher",
            "comment": " A matcher is a function that accepts a value and asserts some property about it.\n",
            "args": [
              "a",
              "b"
            ],
            "type": "Task.Task a b -> Arborist.Assertions.Assertion"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "equals",
            "comment": " Asserts that two values are equal.\n\n    assert (Task.succeed \"Hello!\") (equals (Task.succeed \"Hello!\"))\n",
            "type": "Task.Task a b -> Arborist.Matchers.Matcher a b"
          },
          {
            "name": "fails",
            "comment": " Asserts that another assertion fails.\n\n    assert (assert (Task.succeed 1) (equals (Task.succeed 2))) fails\n",
            "type": "Arborist.Matchers.Matcher Arborist.Assertions.FailureMessages ( Bool, Arborist.Assertions.FailureMessages )"
          },
          {
            "name": "failsWith",
            "comment": " Asserts that another assertion fails with specific failure messages.\n\n    assert (assert (Task.succeed True) (equals (Task.succeed False))) failsWith [\n      (\"Expected\", False),\n      (\"Actual\", True)\n    ]\n",
            "type": "Arborist.Assertions.FailureMessages -> Arborist.Matchers.Matcher Arborist.Assertions.FailureMessages ( Bool, Arborist.Assertions.FailureMessages )"
          },
          {
            "name": "isIntBetween",
            "comment": " Asserts an integer is between two others, inclusive.\n\n    assert (Task.succeed 24) (isIntBetween (Task.succeed 12) (Task.succeed 36))\n",
            "type": "Task.Task a Int -> Task.Task a Int -> Arborist.Matchers.Matcher a Int"
          },
          {
            "name": "not'",
            "comment": " Negates another matcher.\n\n    assert (Task.succeed 3) (not' (equals (Task.succeed 4)))\n",
            "type": "Arborist.Matchers.Matcher a b -> Arborist.Matchers.Matcher a b"
          },
          {
            "name": "onFailure",
            "comment": " When constructing a matcher, adds failure messages.\n\nIf the matching operation results in an error, the error message is included in\nthe failure messages as the first item, with a name of \"Error\".\n\nThis function is often used with `sequenceMessages`.\n\n    equals : Task a b -> Matcher a b\n    equals expected actual =\n      Task.map2 (==) expected actual |> onFailure (sequenceMessages [\n        (\"Expected\", expected),\n        (\"Actual\", actual)\n      ])\n",
            "type": "Task.Task a Arborist.Assertions.FailureMessages -> Task.Task a Bool -> Arborist.Assertions.Assertion"
          },
          {
            "name": "sequenceMessages",
            "comment": " Converts a list of failure messages which have value tasks into a task of failure messages.\n\n    let\n      a = Task.succeed 1\n      b = Task.succeed 2\n    in\n      assert (sequenceMessages [(\"A\", a), (\"B\", b)]) (equals (Task.succeed [(\"A\", 1), (\"B\", 2)]))\n",
            "type": "List ( String, Task.Task a b ) -> Task.Task never Arborist.Assertions.FailureMessages"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Arborist.Assertions",
        "comment": " Provide a mechanism for asserting that a value (wrapped in a task)\nsuccessfully matches the behaviour outlined by the matcher.\n\n# Assertions\n\n@docs assert, pass, fail, failWith\n\n# Types\n\nThe types provided are generally to be used when constructing your own matchers.\n\n@docs Assertion, FailureMessage, FailureMessages\n",
        "aliases": [
          {
            "name": "Assertion",
            "comment": " `Assertion` is a task representing either success, failure or error.  ",
            "args": [],
            "type": "Task.Task Arborist.Assertions.FailureMessages ( Bool, Arborist.Assertions.FailureMessages )"
          },
          {
            "name": "FailureMessage",
            "comment": " A `FailureMessage` consists of a name and a value to be displayed on failure.  ",
            "args": [],
            "type": "( String, String )"
          },
          {
            "name": "FailureMessages",
            "comment": " `FailureMessages` is a list of `FailureMessage` values.  ",
            "args": [],
            "type": "List Arborist.Assertions.FailureMessage"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "assert",
            "comment": " `assert` runs a matcher against a value. All values are generally wrapped in tasks.\n\n    let\n      a = Task.succeed 7\n      b = Task.succeed 3\n      c = Task.map2 (+) a b\n    in\n      assert c (equals (Task.succeed 10))\n",
            "type": "Task.Task a b -> (Task.Task a b -> Arborist.Assertions.Assertion) -> Arborist.Assertions.Assertion"
          },
          {
            "name": "fail",
            "comment": " `fail` forces the test to fail.\n",
            "type": "Arborist.Assertions.Assertion"
          },
          {
            "name": "failWith",
            "comment": " `failWith` forces the test to fail with a reason.\n",
            "type": "String -> Arborist.Assertions.Assertion"
          },
          {
            "name": "pass",
            "comment": " `pass` always passes.\n",
            "type": "Arborist.Assertions.Assertion"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "Skinney/collections-ng",
    "version": "3.0.0",
    "docs": [
      {
        "name": "CollectionsNg.Set",
        "comment": " A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\n# Sets\n@docs Set\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n",
        "aliases": [
          {
            "name": "Set",
            "comment": " Represents a set of unique values. So `(Set Int)` is a set of integers and\n`(Set String)` is a set of strings.\n",
            "args": [
              "comparable"
            ],
            "type": "CollectionsNg.Dict.Dict comparable ()"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n",
            "type": "CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "empty",
            "comment": " Create an empty set.\n",
            "type": "CollectionsNg.Set.Set comparable"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(comparable -> Bool) -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest.\n",
            "type": "(comparable -> b -> b) -> b -> CollectionsNg.Set.Set comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest.\n",
            "type": "(comparable -> b -> b) -> b -> CollectionsNg.Set.Set comparable -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates.\n",
            "type": "List comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "insert",
            "comment": " Insert a value into a set.\n",
            "type": "comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
            "type": "CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty.\n",
            "type": "CollectionsNg.Set.Set comparable -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
            "type": "(comparable -> comparable') -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable'"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set.\n",
            "type": "comparable -> CollectionsNg.Set.Set comparable -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
            "type": "(comparable -> Bool) -> CollectionsNg.Set.Set comparable -> ( CollectionsNg.Set.Set comparable , CollectionsNg.Set.Set comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
            "type": "comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value.\n",
            "type": "comparable -> CollectionsNg.Set.Set comparable"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set.\n",
            "type": "CollectionsNg.Set.Set comparable -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list, sorted from lowest to highest.\n",
            "type": "CollectionsNg.Set.Set comparable -> List comparable"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values.\n",
            "type": "CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "CollectionsNg.Dict",
        "comment": " A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\n# Dictionary\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs get, isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff, merge\n\n# Lists\n@docs toList, fromList, keys, values\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n",
        "aliases": [
          {
            "name": "Dict",
            "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
            "args": [
              "comparable",
              "v"
            ],
            "type": "CollectionsNg.Hamt.Tree comparable v"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second Dictionary.\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary.\n",
            "type": "CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate.\n",
            "type": "(comparable -> v -> Bool) -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> CollectionsNg.Dict.Dict comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> CollectionsNg.Dict.Dict comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\n",
            "type": "List ( comparable, v ) -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n",
            "type": "comparable -> CollectionsNg.Dict.Dict comparable v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n",
            "type": "comparable -> v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second Dictionary.\nPreference is given to values in the first Dictionary.\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(comparable -> a -> b) -> CollectionsNg.Dict.Dict comparable a -> CollectionsNg.Dict.Dict comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary.\n",
            "type": "comparable -> CollectionsNg.Dict.Dict comparable v -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n",
            "type": "(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> CollectionsNg.Dict.Dict comparable a -> CollectionsNg.Dict.Dict comparable b -> result -> result"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(comparable -> v -> Bool) -> CollectionsNg.Dict.Dict comparable v -> ( CollectionsNg.Dict.Dict comparable v , CollectionsNg.Dict.Dict comparable v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n",
            "type": "comparable -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair.\n",
            "type": "comparable -> v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "size",
            "comment": " Determine the number of key-value pairs in the dictionary.\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys.\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function.\n",
            "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
            "type": "CollectionsNg.Dict.Dict comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "CollectionsNg.Array",
        "comment": " Fast immutable arrays. The elements in an array must have the\nsame type.\n\n# Arrays\n@docs Array\n\n# Creation\n@docs empty, repeat, initialize, fromList\n\n# Query\n@docs isEmpty, length, get\n\n# Manipulate\n@docs set, push, append, slice\n\n# Lists\n@docs toList, toIndexedList\n\n# Transform\n@docs map, indexedMap, filter, foldl, foldr\n",
        "aliases": [
          {
            "name": "Array",
            "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n",
            "args": [
              "a"
            ],
            "type": "{ length : Int, nodes : CollectionsNg.Hamt.Tree Int a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "append",
            "comment": " Append two arrays to a new one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n",
            "type": "CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "empty",
            "comment": " Return an empty array.\n\n    length empty == 0\n",
            "type": "CollectionsNg.Array.Array a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate:\n\n    filter isEven (fromList [1..6]) == (fromList [2,4,6])\n",
            "type": "(a -> Bool) -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an array from the left. Read `foldl` as fold from the left.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> CollectionsNg.Array.Array a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an array from the right. Read `foldr` as fold from the right.\n\n    foldr (+) 0 (repeat 3 5) == 15\n",
            "type": "(a -> b -> b) -> b -> CollectionsNg.Array.Array a -> b"
          },
          {
            "name": "fromList",
            "comment": " Create an array from a list.\n",
            "type": "List a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "get",
            "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Nothing\n",
            "type": "Int -> CollectionsNg.Array.Array a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n",
            "type": "(Int -> a -> b) -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array b"
          },
          {
            "name": "initialize",
            "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n",
            "type": "Int -> (Int -> a) -> CollectionsNg.Array.Array a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n",
            "type": "CollectionsNg.Array.Array a -> Bool"
          },
          {
            "name": "length",
            "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n",
            "type": "CollectionsNg.Array.Array a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n",
            "type": "(a -> b) -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array b"
          },
          {
            "name": "push",
            "comment": " Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n",
            "type": "a -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "repeat",
            "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n",
            "type": "Int -> a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n",
            "type": "Int -> a -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "slice",
            "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n",
            "type": "Int -> Int -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n",
            "type": "CollectionsNg.Array.Array a -> List ( Int, a )"
          },
          {
            "name": "toList",
            "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n",
            "type": "CollectionsNg.Array.Array a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "Skinney/fnv",
    "version": "1.0.1",
    "docs": [
      {
        "name": "FNV",
        "comment": " FNV hash function for hashing strings\n\n@docs hashString\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "hashString",
            "comment": " Takes a string. Produces a hash (integer).\n\n    hashString \"Turn me into a hash\" == 4138100590\n",
            "type": "String -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "Skinney/murmur3",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Murmur3",
        "comment": " Murmur 3 hash function for hashing strings\n\n@docs hashString\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "hashString",
            "comment": " Takes a seed and a string. Produces a hash (integer).\nGiven the same seed and string, it will always produce the same hash.\n\n    hashString 1234 \"Turn me into a hash\" == 4138100590\n",
            "type": "Int -> String -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "VerbalExpressions/elm-verbal-expressions",
    "version": "1.2.1",
    "docs": [
      {
        "name": "VerbalExpressions",
        "comment": " Elm port of [VerbalExpressions](https://github.com/VerbalExpressions)\n@docs verex, startOfLine, endOfLine, followedBy, find, possibly, anything, anythingBut, something, somethingBut, lineBreak, tab, word, anyOf, range, withAnyCase, repeatPrevious, repeatPrevious2, multiple, multiple2, orElse, beginCapture, endCapture, toRegex, toString, replace, VerbalExpression\n",
        "aliases": [
          {
            "name": "VerbalExpression",
            "comment": " The main type used for constructing verbal expressions\n",
            "args": [],
            "type": "{ prefixes : String , source : String , suffixes : String , modifiers : { insensitive : Bool, multiline : Bool } }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "anyOf",
            "comment": " Match a character class\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "anything",
            "comment": " Match any set of characters or not\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "anythingBut",
            "comment": " Match any set of characters except a particular String\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "beginCapture",
            "comment": " Start capturing a group\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "endCapture",
            "comment": " Finish capturing a group\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "endOfLine",
            "comment": " Restrict matches to end of line\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "find",
            "comment": " Start the expression with a matching group\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "followedBy",
            "comment": " Include a matching group in the expression\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "lineBreak",
            "comment": " Match a new line\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "multiple",
            "comment": " Match a group any number of times\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "multiple2",
            "comment": " Match a group a particular number of times\n",
            "type": "String -> Int -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "orElse",
            "comment": " Add an alternative expression\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "possibly",
            "comment": " Include an optional matching group\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "range",
            "comment": " Match a character class with ranges\n",
            "type": "List ( String, String ) -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "repeatPrevious",
            "comment": " Repeat the prior case a number of times\n",
            "type": "Int -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "repeatPrevious2",
            "comment": " Repeat the prior case within some range of times\n",
            "type": "Int -> Int -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "replace",
            "comment": " Chainable function for replacing a string with another string using a Regex\ncreated using VerbalExpressions\n",
            "type": "Regex.HowMany -> String -> String -> Regex.Regex -> String"
          },
          {
            "name": "something",
            "comment": " Match on one or more characters\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "somethingBut",
            "comment": " Match on one or more characters, with the execption of some String\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "startOfLine",
            "comment": " Restrict matches to start of line\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "tab",
            "comment": " Match a tab\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "toRegex",
            "comment": " Compile result down to a Regex.regex\n",
            "type": "VerbalExpressions.VerbalExpression -> Regex.Regex"
          },
          {
            "name": "toString",
            "comment": " Compile result down to a String\nNote, this is just a string of the expression. Modifier flags are discarded.\n",
            "type": "VerbalExpressions.VerbalExpression -> String"
          },
          {
            "name": "verex",
            "comment": " An initial, empty verex to start from and pipe through functions\n",
            "type": "VerbalExpressions.VerbalExpression"
          },
          {
            "name": "withAnyCase",
            "comment": " Let the expression be case insensitive\n",
            "type": "Bool -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "word",
            "comment": " Match an alphanumeric word\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "Voronchuk/hexagons",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Hexagons.Layout",
        "comment": " The next major piece of functionality we need is a way to convert between hex coordinates and screen coordinates. There’s a pointy top layout and a flat top hex layout. The conversion uses a matrix as well as the inverse of the matrix, so we need a way to store those. Also, for drawing the corners, pointy top starts at 30° and flat top starts at 0°, so we need a place to store that too.\n\nSee http://www.redblobgames.com/grids/hexagons/implementation.html for reference.\n\n# Types\n@docs Point, Orientation, Layout\n\n# Contants\n@docs orientationLayoutPointy\n\n# Hex to point and point to hex conversions\n@docs hexToPoint, pointToHex\n\n# Hex to offset and offset to hex coordinate conversions\n@docs hexToOffset, offsetToHex\n\n# Hex corner coordinates\n@docs polygonCorners\n\n# Drawing\n@docs drawLine, drawCircle\n",
        "aliases": [
          {
            "name": "Layout",
            "comment": " Composite layout definition ",
            "args": [],
            "type": "{ orientation : Hexagons.Layout.Orientation , size : Hexagons.Layout.Point , origin : Hexagons.Layout.Point }"
          },
          {
            "name": "Orientation",
            "comment": " Orientation helper type to store these: the 2×2 forward matrix, the 2×2 inverse matrix, and the starting angle ",
            "args": [],
            "type": "{ forward_matrix : ( Float, Float, Float, Float ) , inverse_matrix : ( Float, Float, Float, Float ) , start_angle : Float }"
          },
          {
            "name": "Point",
            "comment": " Point on screen (pixel) ",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "drawCircle",
            "comment": " Draw the circle of a defined redius with the hex in a center ",
            "type": "Hexagons.Hex.Hex -> Int -> List Hexagons.Hex.Hex"
          },
          {
            "name": "drawLine",
            "comment": " Draw the line between hexes using the linear interpolation ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> List Hexagons.Hex.Hex"
          },
          {
            "name": "hexToOffset",
            "comment": " Convert Hex coordinates to offset ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Layout.OffsetCoord"
          },
          {
            "name": "hexToPoint",
            "comment": " Turn Hex coordinates into a Point location on a Layout ",
            "type": "Hexagons.Layout.Layout -> Hexagons.Hex.Hex -> Hexagons.Layout.Point"
          },
          {
            "name": "offsetToHex",
            "comment": " Convert offset coordinates to hex ",
            "type": "Hexagons.Layout.OffsetCoord -> Hexagons.Hex.Hex"
          },
          {
            "name": "orientationLayoutPointy",
            "comment": " Contant definition of pointy hexagon orientation ",
            "type": "Hexagons.Layout.Orientation"
          },
          {
            "name": "pointToHex",
            "comment": " Turn Point coordinates on a Layout into a Hex coordinates ",
            "type": "Hexagons.Layout.Layout -> Hexagons.Layout.Point -> Hexagons.Hex.Hex"
          },
          {
            "name": "polygonCorners",
            "comment": " Once we know where the corners are relative to the center, we can calculate the corners in screen locations by adding the center to each corner, and putting the coordinates into a list. ",
            "type": "Hexagons.Layout.Layout -> Hexagons.Hex.Hex -> List Hexagons.Layout.Point"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Hexagons.Map",
        "comment": " This module solves the problem of generating and storing the Map data. We are using Elm dictionary as the Map storage engine with Hex coordinate tuple as the key.\n\nSee http://www.redblobgames.com/grids/hexagons/implementation.html for reference.\n\n# Types\n@docs Map, Hash\n\n# Accessing map storage\n@docs hashHex\n@docs getHex\n\n# Map generators\n@docs rectangularPointyTopMap\n",
        "aliases": [
          {
            "name": "Hash",
            "comment": " Hash key to access Map cell ",
            "args": [],
            "type": "( Int, Int, Int )"
          },
          {
            "name": "Map",
            "comment": " Dictionary storage to keep map of hexes ",
            "args": [],
            "type": "Dict.Dict Hexagons.Map.Hash Hexagons.Hex.Hex"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "getHex",
            "comment": " Fetch hex from map storage, using a default value in case of missing Hex  ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Map.Map -> Hexagons.Map.Hash -> Hexagons.Hex.Hex"
          },
          {
            "name": "hashHex",
            "comment": " Hash function to get a uniform token to address stored hex Hex ",
            "type": "Hexagons.Hex.Hex -> ( Int, Int, Int )"
          },
          {
            "name": "rectangularPointyTopMap",
            "comment": " Generate Map of rectangular shape given its height and width ",
            "type": "Int -> Int -> Hexagons.Map.Map"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Hexagons.Hex",
        "comment": " We treat Cube and Axial systems separately. Cube coordinates are a plane in x,y,z space, where x+y+z = 0. Axial coordinates have two axes q,r that are 60° or 120° apart. \n\nSee http://www.redblobgames.com/grids/hexagons/implementation.html\n\n# Types\n@docs Hex, Direction\n\n# Helpers\n@docs q, intQ, r, intR, s, intS, intFactory, floatFactory, toIntHex, toFloatHex\n\n# Equality\n@docs eq, (===), noteq, (!==)\n\n# Coordinate arithmetic\n@docs add, (+++), sub, (=--), mul, (***)\n\n# Distance\n@docs length, distance\n\n# Neighbors\n@docs direction, neighbor\n",
        "aliases": [],
        "types": [
          {
            "name": "Direction",
            "comment": " Direction ranges from 0 to 5 by sides of the hexagon, we use North, South, West, East definitions for simplicity ",
            "args": [],
            "cases": [
              [
                "NE",
                []
              ],
              [
                "E",
                []
              ],
              [
                "SE",
                []
              ],
              [
                "SW",
                []
              ],
              [
                "W",
                []
              ],
              [
                "NW",
                []
              ]
            ]
          },
          {
            "name": "Hex",
            "comment": " Generic hex field definition ",
            "args": [],
            "cases": [
              [
                "FloatCubeHex",
                [
                  "Hexagons.Hex.FloatCubeCoords"
                ]
              ],
              [
                "IntCubeHex",
                [
                  "Hexagons.Hex.IntCubeCoords"
                ]
              ],
              [
                "AxialHex",
                [
                  "Hexagons.Hex.AxialCoords"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "!==",
            "comment": " Infixr operator for `noteq` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool",
            "associativity": "right",
            "precedence": 1
          },
          {
            "name": "***",
            "comment": " Infixr operator for `mul` ",
            "type": "Int -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "+++",
            "comment": " Infixr operator for `sum` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex",
            "associativity": "right",
            "precedence": 4
          },
          {
            "name": "=--",
            "comment": " Infixr operator for `sub` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex",
            "associativity": "right",
            "precedence": 4
          },
          {
            "name": "===",
            "comment": " Infixr operator for `eq` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool",
            "associativity": "right",
            "precedence": 1
          },
          {
            "name": "add",
            "comment": " Since cube coordinates come from 3d cartesian coordinates, I automatically get things like addition, subtraction, multiplication, and division. For example, you can have Hex(2, 0, -2) that represents two steps northeast, and add that to location Hex(3, -5, 2) the obvious way: Hex(2 + 3, 0 + -5, -2 + -2). With other coordinate systems like offset coordinates, you can’t do that and get what you want. These operations are just what you’d implement with 3d cartesian vectors, but I am using q, r, s names in this class instead of x, y, z\n\n    IntCubeHex (2, 3, -5) +++ IntCubeHex (1, 2, -3) === IntCubeHex (3, 5, -8)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "direction",
            "comment": " Direction relative to Hex polygon lines, we used shortcuts for the mix of North, East, South, West directions ",
            "type": "Hexagons.Hex.Direction -> Hexagons.Hex.Hex"
          },
          {
            "name": "distance",
            "comment": " The distance between two hexes is the length of the line between them. \n\n    distance (IntCubeHex (2, 3, -5)) (FloatCubeHex (3.2, 4.3, -7.5)) == 2\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "eq",
            "comment": " Compare two Hex definitions, support both axial and cubic coordinates.\n\nNot a strict comparation, FloatCubeHex is converted to IntCubeHex.\n\n    IntCubeHex (2, 3, -5) === IntCubeHex (2, 3, -5)\n    AxialHex (2, 3) === AxialHex (2, 3)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool"
          },
          {
            "name": "floatFactory",
            "comment": " Build Hex object from Float coordinates\n\n    floatFactory (2.5, 3.5) === FloatCubeHex (2.5, 3.5, -6.0)\n",
            "type": "( Float, Float ) -> Hexagons.Hex.Hex"
          },
          {
            "name": "intFactory",
            "comment": " Build Hex object from Int coordinates\n\n    intFactory (2, 3) === IntCubeHex (2, 3, -5)\n",
            "type": "( Int, Int ) -> Hexagons.Hex.Hex"
          },
          {
            "name": "intQ",
            "comment": " Get q coordinate for Hex as Int value, its generally not recommended to use on FloatCubeHex\n\n    intQ IntCubeHex (2, 3, -5) == 2\n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "intR",
            "comment": " Get r coordinate for Hex as Int value, its generally not recommended to use on FloatCubeHex\n\n    intR IntCubeHex (2, 3, -5) == 3\n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "intS",
            "comment": " Get s coordinate for Hex as Int value, its generally not recommended to use on FloatCubeHex\n\n    intS IntCubeHex (2, 3, -5) == 3\n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "length",
            "comment": " Length of Hex.\n\n    length (IntCubeHex (2, 3, -5)) == 5\n    length (FloatCubeHex (2.2, 3.3, -5.5)) == 5\n    \n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "mul",
            "comment": " Multiplication of Hexes, more info in `sum` description\n\n    5 *** (IntCubeHex (2, 3, -5) === IntCubeHex (10, 15, -25))\n",
            "type": "Int -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "neighbor",
            "comment": " With distance, we defined two functions: length works on one argument and distance works with two. The same is true with neighbors. The direction function is with one argument and the neighbor function is with two.\n\n    neighbor (IntCubeHex (2, 3, -5)) NW === IntCubeHex (2, 4, -6)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Direction -> Hexagons.Hex.Hex"
          },
          {
            "name": "noteq",
            "comment": " Compare two Hex definitions, if they are not equal, inversion of `eq` \n\n    IntCubeHex (2, 3, -5) !== IntCubeHex (1, 1, -2)\n    AxialHex (2, 3) !== AxialHex (2, 1)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool"
          },
          {
            "name": "q",
            "comment": " Get q coordinate for Hex as Float value \n\n    q IntCubeHex (2, 3, -5) == 2.0\n",
            "type": "Hexagons.Hex.Hex -> Float"
          },
          {
            "name": "r",
            "comment": " Get r coordinate for Hex as Float value \n\n    r IntCubeHex (2, 3, -5) == 3.0\n",
            "type": "Hexagons.Hex.Hex -> Float"
          },
          {
            "name": "s",
            "comment": " Get s coordinate for Hex as Float value \n\n    s IntCubeHex (2, 3, -5) == -5.0\n",
            "type": "Hexagons.Hex.Hex -> Float"
          },
          {
            "name": "sub",
            "comment": " Subtraction of Hexes, more info in `sum` description\n\n    (IntCubeHex (2, 3, -5) =-- IntCubeHex (1, 2, -3)) === IntCubeHex (1, 1, -2)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "toFloatHex",
            "comment": " Convert Hex to FloatCubeHex coordinate systems \n\n    toFloatHex (IntCubeHex (2, 3, -5)) === FloatCubeHex (2.0, 3.0, -5.0)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "toIntHex",
            "comment": " Convert Hex to IntCubeHex coordinate systems \n\n    toIntHex (FloatCubeHex (2.5, 3.5, -6.0)) === IntCubeHex (2, 4, -6)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "abadi199/elm-creditcard",
    "version": "5.0.1",
    "docs": [
      {
        "name": "CreditCard.View",
        "comment": " View related functions\n\n# Form View\n@docs form\n\n# Card View\n@docs cardView\n\n# Individual Fields View\n@docs numberInput, nameInput, monthInput, yearInput, ccvInput\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cardView",
            "comment": " A view function that will render the credit card.\n\nThis view will renders the credit card information such as the number, full name, expiration month/year, ccv, and the card logo.\n\nThis component also provide a card flipping animation for flipping back and forth between the front and back side of the card when displaying CCV number.\nSome type of card has CCV printed on the front side of the card, in this case, the flipping animation will not be performed.\n\nTo use this view, just include this function as part of your view function. This will render the card as svg element.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.Components.Card.cardView model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          },
          {
            "name": "ccvInput",
            "comment": " A view function that will render the input field for credit card CCV/CVC number.\n\nTo use this view, just include this function as part of your view function. The input field will only accept numeric input with maximum length of 4.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.View.ccvInput \"CCVInput\" model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "String -> CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          },
          {
            "name": "form",
            "comment": " A view function that will render the whole form fields including the card.\n\nTo use this view, just include this function as part of your view function.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.View.form model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          },
          {
            "name": "monthInput",
            "comment": " A view function that will render the input field for credit card expiration month.\n\nTo use this view, just include this function as part of your view function. The input field will only accept numeric input with maximum value of 12.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.View.monthInput \"MonthInput\" model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "String -> CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          },
          {
            "name": "nameInput",
            "comment": " A view function that will render the input field for full name.\n\nTo use this view, just include this function as part of your view function.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.View.nameInput \"NameInput\" model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "String -> List (Html.Attribute Input.Text.Msg) -> CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          },
          {
            "name": "numberInput",
            "comment": " A view function that will render the input field for credit card number.\n\nTo use this view, just include this function as part of your view function.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.View.numberInput \"Number\" model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "String -> CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          },
          {
            "name": "yearInput",
            "comment": " A view function that will render the input field for credit card expiration year.\n\nTo use this view, just include this function as part of your view function. The input field will only accept numeric input.\n\nExample:\n\n    form []\n        [ Html.App.map CreditCardMsg (CreditCard.View.yearInput \"YearInput\" model.creditCardModel)\n        , button [] [ text \"Checkout \"]\n        ]\n\n",
            "type": "String -> CreditCard.Model.Model CreditCard.Update.Msg -> Html.Html CreditCard.Update.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "CreditCard.Update",
        "comment": " Update functions and Msg.\n\n# Message\n@docs Msg\n\n# Update functions\n@docs update\n",
        "aliases": [],
        "types": [
          {
            "name": "Msg",
            "comment": " A union type representing The Elm Architect's `Msg`\n",
            "args": [],
            "cases": [
              [
                "NoOp",
                []
              ],
              [
                "UpdateNumber",
                [
                  "Input.Number.Msg"
                ]
              ],
              [
                "UpdateName",
                [
                  "Input.Text.Msg"
                ]
              ],
              [
                "UpdateExpirationMonth",
                [
                  "Input.Number.Msg"
                ]
              ],
              [
                "UpdateExpirationYear",
                [
                  "Input.Number.Msg"
                ]
              ],
              [
                "UpdateCCV",
                [
                  "Input.Number.Msg"
                ]
              ],
              [
                "Flip",
                [
                  "Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "update",
            "comment": " The Elm Architect's update function.\n",
            "type": "CreditCard.Update.Msg -> CreditCard.Model.Model CreditCard.Update.Msg -> ( CreditCard.Model.Model CreditCard.Update.Msg , Platform.Cmd.Cmd CreditCard.Update.Msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "CreditCard.Model",
        "comment": " Model types and all related helper functions\n\n# Model\n@docs Model, Field, Styles,  CardInfo,  CardType\n\n# Styling and Formatting\n@docs Options, CardStyle, CCVPosition, NumberFormat\n\n# Helper Functions\n@docs init, defaultOptions\n",
        "aliases": [
          {
            "name": "CardInfo",
            "comment": " A type representing the card information.\n",
            "args": [
              "msg"
            ],
            "type": "{ cardType : CreditCard.Model.CardType , validLength : List Int , numberFormat : CreditCard.Model.NumberFormat , cardStyle : CreditCard.Model.CardStyle msg , ccvPosition : CreditCard.Model.CCVPosition }"
          },
          {
            "name": "CardStyle",
            "comment": " A type representing the card style.\n",
            "args": [
              "msg"
            ],
            "type": "{ background : { attributes : List (Svg.Attribute msg) , svg : List (Svg.Svg msg) , defs : List (Svg.Svg msg) } , textColor : String , lightTextColor : String , darkTextColor : String }"
          },
          {
            "name": "Field",
            "comment": " A type representing an input field with specific type.\n",
            "args": [
              "a"
            ],
            "type": "{ id : String , label : Maybe.Maybe String , value : Maybe.Maybe a , hasFocus : Bool }"
          },
          {
            "name": "Model",
            "comment": " A type representing the Credit Card model.\n",
            "args": [
              "msg"
            ],
            "type": "{ options : CreditCard.Model.Options , number : CreditCard.Model.Field String , name : CreditCard.Model.Field String , expirationMonth : CreditCard.Model.Field String , expirationYear : CreditCard.Model.Field String , ccv : CreditCard.Model.Field String , cardInfo : Maybe.Maybe (CreditCard.Model.CardInfo msg) , flipped : Maybe.Maybe Bool }"
          },
          {
            "name": "NumberFormat",
            "comment": " A type representing the format of the number by specifying the size of each group.\ne.g: `[4, 4, 5]` will format the number to be XXXX XXXX XXXXX\n",
            "args": [],
            "type": "List Int"
          },
          {
            "name": "Options",
            "comment": " A type representing the configurable options for the form.\n",
            "args": [],
            "type": "{ showLabel : Bool, blankChar : Char }"
          },
          {
            "name": "Styles",
            "comment": " A type representing the form style.\n",
            "args": [
              "msg"
            ],
            "type": "{ cardStyle : CreditCard.Model.CardStyle msg }"
          }
        ],
        "types": [
          {
            "name": "CCVPosition",
            "comment": " A union type representing the position of the CCV\n",
            "args": [],
            "cases": [
              [
                "Front",
                []
              ],
              [
                "Back",
                []
              ]
            ]
          },
          {
            "name": "CardType",
            "comment": " A union type representing the credit card type.\n",
            "args": [],
            "cases": [
              [
                "Unknown",
                []
              ],
              [
                "Visa",
                []
              ],
              [
                "Mastercard",
                []
              ],
              [
                "Amex",
                []
              ],
              [
                "Discover",
                []
              ],
              [
                "DinersClubCarteBlanche",
                []
              ],
              [
                "DinersClubInternational",
                []
              ],
              [
                "JCB",
                []
              ],
              [
                "Laser",
                []
              ],
              [
                "Maestro",
                []
              ],
              [
                "VisaElectron",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " The default `Options` value\n",
            "type": "CreditCard.Model.Options"
          },
          {
            "name": "init",
            "comment": " Initalize the model by passing in the `Options`\n",
            "type": "CreditCard.Model.Options -> CreditCard.Model.Model msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "abadi199/elm-input-extra",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Input.Text",
        "comment": " Text input\n\n# Model\n@docs Model, init\n\n# View\n@docs input, Options, defaultOptions\n\n# Update\n@docs update\n\n# Msg\n@docs Msg\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " (TEA) Model record\nFields:\n * `value` : current value of the input element.\n * `hasFocus` : flag whether the input element has focus or not.\n",
            "args": [],
            "type": "{ value : String, hasFocus : Bool }"
          },
          {
            "name": "Options",
            "comment": " Options of the input component.\n\n * `id` is the id of the HTML element.\n * `maxLength` is the maximum number of character allowed in this input. Set to `Nothing` for no limit.\n",
            "args": [],
            "type": "{ id : String, maxLength : Maybe.Maybe Int }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " (TEA) Opaque Msg types\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " Default value for `Options`.\nParams:\n * `id` (type: `String`) : The `id` of the number input element.\n\nValue:\n\n    { id = id\n    , maxLength = Nothing\n    }\n\n",
            "type": "String -> Input.Text.Options"
          },
          {
            "name": "init",
            "comment": " (TEA) Initial model constant\n\nValue:\n\n    { value = \"\"\n    , hasFocus = False\n    }\n\n",
            "type": "Input.Text.Model"
          },
          {
            "name": "input",
            "comment": " (TEA) View function\n\nExample:\n\n    Input.Text.input\n        { id = \"TextInput\"\n        , maxLength = Just 4\n        }\n        [ class \"textInput\"\n        ...\n        ]\n        model.textModel\n\n",
            "type": "Input.Text.Options -> List (Html.Attribute Input.Text.Msg) -> Input.Text.Model -> Html.Html Input.Text.Msg"
          },
          {
            "name": "update",
            "comment": " (TEA) Update function\n\nExample:\n\n    type Msg = UpdateText Input.Text.Msg\n\n    update msg model =\n        case msg of\n            UpdateText textMsg ->\n                { model | textModel = Input.Text.update textMsg model.textModel }\n\n",
            "type": "Input.Text.Msg -> Input.Text.Model -> Input.Text.Model"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Input.Number",
        "comment": " Number input\n\n# Model\n@docs Model, init\n\n# View\n@docs input, Options, defaultOptions\n\n# Update\n@docs update\n\n# Msg\n@docs Msg\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " (TEA) Model record\nFields:\n * `value` : current value of the input element.\n * `hasFocus` : flag whether the input element has focus or not.\n",
            "args": [],
            "type": "{ value : String, hasFocus : Bool }"
          },
          {
            "name": "Options",
            "comment": " Options of the input component.\n\n * `id` is the id of the HTML element.\n * `maxLength` is the maximum number of character allowed in this input. Set to `Nothing` for no limit.\n * `maxValue` is the maximum number value allowed in this input. Set to `Nothing` for no limit.\n * `minValue` is the minimum number value allowed in this input. Set to `Nothing` for no limit.\n",
            "args": [],
            "type": "{ id : String , maxLength : Maybe.Maybe Int , maxValue : Maybe.Maybe Int , minValue : Maybe.Maybe Int }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " (TEA) Opaque Msg types\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " Default value for `Options`.\nParams:\n * `id` (type: `String`) : The `id` of the number input element.\n\nValue:\n\n    { id = id\n    , maxLength = Nothing\n    , maxValue = Nothing\n    , minValue = Nothing\n    }\n\n",
            "type": "String -> Input.Number.Options"
          },
          {
            "name": "init",
            "comment": " (TEA) Initial model constant\n\nValue:\n\n    { value = \"\"\n    , hasFocus = False\n    }\n\n",
            "type": "Input.Number.Model"
          },
          {
            "name": "input",
            "comment": " (TEA) View function\n\nExample:\n\n    Input.Number.input\n        { id = \"NumberInput\"\n        , maxLength = Just 4\n        , maxValue = Nothing\n        , minValue = Nothing\n        }\n        [ class \"numberInput\"\n        ...\n        ]\n        model.numberModel\n\n",
            "type": "Input.Number.Options -> List (Html.Attribute Input.Number.Msg) -> Input.Number.Model -> Html.Html Input.Number.Msg"
          },
          {
            "name": "update",
            "comment": " (TEA) Update function\n\nExample:\n\n    type Msg = UpdateNumber Input.Number.Msg\n\n    update msg model =\n        case msg of\n            UpdateNumber numberMsg ->\n                { model | numberModel = Input.Number.update numberMsg model.numberModel }\n\n",
            "type": "Input.Number.Msg -> Input.Number.Model -> Input.Number.Model"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "abrykajlo/elm-scroll",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Scroll",
        "comment": " This Library provides helper functions for handling events on scrolling.\n\n# Types\n@docs Update, Move, Direction\n\n# Creating Scroll Handler\n@docs handle\n\n# On Event Handlers\nMeant to be used with `Scroll.handle` to build up a list of possible events\nfor an application. All of the function signatures end in\n`Move -> Maybe (Update m msg)` so they can be partially applied and used with\n`Scroll.handle`.\n\n## Basic\n@docs onUp, onDown\n\n## Complex\n@docs onCrossUp, onCrossDown, onCrossOver, onInRange, onOverlap\n\n# Helpers for Creating On Event Handlers\nYou can create your own as well which can be used with handle as long\nthey end in `Move -> Maybe (Update m msg)`. These are some functions that\ncan aid in the creation of them.\n\n@docs direction, crossing\n",
        "aliases": [
          {
            "name": "Move",
            "comment": " Alias of (Float, Float) represents a move from a scroll position\nto another scroll position \n\n    Move == (from, to)\n",
            "args": [],
            "type": "( Float, Float )"
          },
          {
            "name": "Update",
            "comment": " \n    Update m msg == m -> (m, Cmd msg)\n",
            "args": [
              "m",
              "msg"
            ],
            "type": "m -> ( m, Platform.Cmd.Cmd msg )"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " Helps building your own triggers if direction is important.\n\n    upAfterDown : Direction -> Event m msg -> Move ->  Maybe (Event m msg)\n    upAfterDown lastDirection event move =\n        if direction move != Up then\n            Nothing \n        else if lastDirection == Scroll.Down  then\n            Just event\n        else\n            Nothing \n",
            "args": [],
            "cases": [
              [
                "Up",
                []
              ],
              [
                "Down",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "crossing",
            "comment": " Notifies if a `Move` crosses a line. Nothing on no \ncrossing and the direction on a crossing",
            "type": "Float -> Scroll.Move -> Maybe.Maybe Scroll.Direction"
          },
          {
            "name": "direction",
            "comment": " A simple helper that returns the direction Up or Down of a Move",
            "type": "Scroll.Move -> Scroll.Direction"
          },
          {
            "name": "handle",
            "comment": " Used in generating a function to trigger all possible events for a single\nmove. It returns in the standard pattern of `(Model, Effects Action)` the \nupdates stack as well, so if many events trigger they update the model in order\nthey are in the list and the effects get thrown into `Effects.batch`.\n\n    handleEvents : Move -> Model -> (Model, Effects a)\n    handleEvents =\n        Scroll.handle\n            [ update TopBarDrop\n              |> Scroll.onUp\n            , update ToggleFixBar\n              |> Scroll.onCrossOver 400\n            ]\n\n    update action model =\n        case action of\n            Transition move ->\n                handleEvents move model\n            TopBarDrop clockTime ->\n                ...\n            ToggleFixBar ->\n                ...\n",
            "type": "List (Scroll.Move -> Maybe.Maybe (Scroll.Update m msg)) -> Scroll.Move -> m -> ( m, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "onCrossDown",
            "comment": " Triggers an update if move crosses the line downwards.\n\n    update Action\n    |> onCrossDown line\n",
            "type": "Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onCrossOver",
            "comment": " Triggers an update if move crosses the line in either direction.\n\n    update Action\n    |> onCrossOver line\n",
            "type": "Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onCrossUp",
            "comment": " Triggers Update if move crosses the line upwards.\n\n    update Action\n    |> onCrossUp line\n",
            "type": "Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onDown",
            "comment": " Triggers an update on scrolling downwards\n\n    update Action\n    |> onDown\n",
            "type": "Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onInRange",
            "comment": " Triggers an update if the new scroll position is in\nthe min max range\n\n    update Action\n    |> onInRange min max\n",
            "type": "Float -> Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onOverlap",
            "comment": " Triggers an update if the range of `Move == (from,to)` \noverlaps with the range min max\n\n    update Action\n    |> onOverlap min max\n",
            "type": "Float -> Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onUp",
            "comment": " Triggers an update on scrolling upwards \n\n    update Action\n    |> onUp\n",
            "type": "Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "akbiggs/elm-effects",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Effects.App",
        "comment": " This module simplifies creating an app using functions that return an\n`Effects` wrapper instead of the regular `(Model, Cmd Msg)` pair.\n\n@docs program\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "program",
            "comment": " This function creates a new app, acting as a thin wrapper around\nthe `Html.App` function. It will take a list of Cmds returned from your `init` and `update` functions and\nbatch them together into the single Cmd that the regular Html.App.program functions\nexpect. This allows you to keep your main module consistent with the rest of your codebase\nbecause the functions can use Effects.\n",
            "type": "{ init : Effects.Effects model (Platform.Cmd.Cmd msg) , update : msg -> model -> Effects.Effects model (Platform.Cmd.Cmd msg) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Effects",
        "comment": " This package contains several useful functions for operating on pairs\nof a value and a list of side-effects. Side-effects do not have to be external\nElm events such as I/O and randomness - they can be internal app events, such as a message indicating that\nthe score of your game should increase or that you want to navigate back to the home page.\n\nFor example, having the player jump might update the state of the player and have a\nside-effect of playing a sound and spawning some dust particles if the player\njumped off the ground. In that case, your player component might look like this:\n\n    type Msg\n      = Jump\n\n    type Effect\n      = SpawnDustParticles\n      | PlaySound String\n\n    update : Msg -> Model -> Effects Model Effect\n    update msg model =\n        case msg of\n            Jump ->\n                Effects.return { model | velocity = jumpVelocity }\n                    |> Effects.add [PlaySound \"jumpSound.wav\"]\n                    |> Effects.addIf model.isGrounded [SpawnDustParticles]\n\n# Aliases\n@docs Effects, None\n\n# Constructors\n@docs init, return\n\n# Getters\n@docs getValue, getEffects\n\n# Adding Effects\n@docs add, addIf\n\n# Mapping\n@docs mapOverValue, mapOverEffects\n\n# Handling Effects\n@docs Handler, handle, ignoreUnused\n\n# Chaining Operations\n@docs andThen\n\n# Combining\n@docs batch\n\n# Conversion\n@docs toCmd\n",
        "aliases": [
          {
            "name": "Effects",
            "comment": " `Effects a effect` combines a value of type `a` and a list of effects of\ntype `effect` into a single data structure.\n",
            "args": [
              "a",
              "effect"
            ],
            "type": "( a, List effect )"
          },
          {
            "name": "Handler",
            "comment": " A `Handler` is a function that takes an effect and applies it to an object,\ngiving back the new state of that object and any resulting effects.\n",
            "args": [
              "effectA",
              "a",
              "effectB"
            ],
            "type": "effectA -> a -> Effects.Effects a effectB"
          },
          {
            "name": "None",
            "comment": " `None` is useful when updating a component shouldn't have any side effects on\nthe world. This way, you can still keep the structure of your component the same,\nmaking your code consistent and flexible if you want to introduce side-effects later\non. For example, a cloud in the background might not have any side-effects on the world:\n\n    type Msg = Tick Time\n\n    type alias Effect = Effects.None\n\n    update : Msg -> Model -> Effects Model Effect\n    update msg model =\n        -- implementation details\n",
            "args": [],
            "type": "()"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add some additional side-effects to your value-and-effects result. This is\nnice when you want to take the result from another function and dump some extra\neffects into it without destructuring.\n",
            "type": "List effect -> Effects.Effects a effect -> Effects.Effects a effect"
          },
          {
            "name": "addIf",
            "comment": " Same as `add`, but will only add the effects if the given condition is\nsatisfied. For example, you might only want to increase the score of the game\nif the enemy died:\n\n    Effects.return updatedEnemy\n        |> Effects.addIf updatedEnemy.isDead [IncreaseScore 100]\n",
            "type": "Bool -> List effect -> Effects.Effects a effect -> Effects.Effects a effect"
          },
          {
            "name": "andThen",
            "comment": " If you have a bunch of operations that take a value and return a value-and-effects\npair, e.g. a value and a list of `Cmd`s to batch together, chaining them together\ncan be really annoying, because you constantly have to destructure the result\nand grab the value, bringing it into the next statement.\n\n`andThen` lets you take the value out of a value-and-effects pair, run a function\non it that returns a new value-and-effects pair, and batches the old effects together\nwith the new ones. For example, here are a bunch of actions chained together that\nmight generate sound effects and particles:\n\n    -- returns Effects Enemy.Model Enemy.Effect\n    Effects.return newEnemy\n        `andThen` Enemy.move {x = 0, y = 1}\n        `andThen` Enemy.makeYelpingNoiseOccasionally\n",
            "type": "Effects.Effects a effect -> (a -> Effects.Effects b effect) -> Effects.Effects b effect"
          },
          {
            "name": "batch",
            "comment": " Takes a list of results with the same type of effects and brings their\neffects together into one list. This is useful when you map a function that\nreturns a value and effects over a list of objects, e.g.\n\n    List.map (Enemy.update Enemy.TakeDamage) enemies\n        |> Effects.batch -- equivalent to |> \\(x, effectLists) -> (x, List.concat effectsLists)\n",
            "type": "List (Effects.Effects a effect) -> Effects.Effects (List a) effect"
          },
          {
            "name": "getEffects",
            "comment": " Gets the effects from a value-and-effects pair.\n",
            "type": "Effects.Effects a effect -> List effect"
          },
          {
            "name": "getValue",
            "comment": " Gets the value from a value-and-effects pair.\n",
            "type": "Effects.Effects a effect -> a"
          },
          {
            "name": "handle",
            "comment": " Perform a list of effects sequentially on an object, returning the new state of that\nobject and any side-effects that resulted from those effects occurring. This is similar\nto a `foldl`.\n\nThis is useful when you want to take a child's side-effect and have the parent react to it.\nFor example, if a child component gets updated and returns an effect saying to increase the score,\nthe parent should update the score and play a sound:\n\n    -- in the parent component's update function\n\n    let\n        (updatedEnemies, enemyEffects) =\n            List.map (Enemy.update Enemy.TakeDamage) model.enemies\n                |> Effects.batch -- the score might increase if the enemy died\n    in\n        Effects.return { model | enemies = updatedEnemies }\n            `Effects.andThen` Effects.handle handleEnemyEffect enemyEffects\n\n    -- in the parent component's helper functions\n\n    handleEnemyEffect : Effects.Handler Enemy.Effect Model Effect\n    handleEnemyEffect enemyEffect model =\n        case enemyEffect of\n            Enemy.IncreaseScore amount ->\n                Effects.return { model | score = model.score + amount }\n                    |> Effects.add [PlaySound \"scoreIncreased.wav\"]\n",
            "type": "Effects.Handler effectA a effectB -> List effectA -> a -> Effects.Effects a effectB"
          },
          {
            "name": "ignoreUnused",
            "comment": " If an object returned no side-effect, this function allows you to ignore it\nin a way that will fail to compile if the object's code is modified to return\nside-effects in the future.\n\n    Effects.return { model | clouds = updatedClouds }\n        `Effects.andThen` Effects.handle handleCloudEffect cloudEffects\n\n    handleCloudEffect : Effects.Handler Cloud.Effect Model Effect\n    handleCloudEffect =\n      Effects.ignoreUnused\n",
            "type": "Effects.Handler Effects.None a effect"
          },
          {
            "name": "init",
            "comment": " Initialize an `Effects` wrapper from a value and a list of effects. For now,\nthis is pretty useless compared to just wrapping the value and effects\nin parentheses -- however, later on the implementation of `Effects`\nmight change to become a dictionary with `value` and `effects` keys, so using\nthis function makes your code more future-proof. It's also a bit nicer stylistically\ncompared to wrapping your code in parentheses when the value is more complicated: compare\n`elm-format`'s output of\n\n    ( { x = 0\n      , y = 0\n      }\n    , [ PlaySound \"hello.wav\", IncreaseScore 100 ]\n    )\n\nwith\n\n    Effects.init\n        { x = 0\n        , y = 0\n        }\n        [ PlaySound \"hello.wav\", IncreaseScore 100 ]\n\n",
            "type": "a -> List effect -> Effects.Effects a effect"
          },
          {
            "name": "mapOverEffects",
            "comment": " Map a function over the list of effects of a value-and-effects pair,\nwhile still keeping the value the same.\n",
            "type": "(effectA -> effectB) -> Effects.Effects a effectA -> Effects.Effects a effectB"
          },
          {
            "name": "mapOverValue",
            "comment": " Modify the value of a value-and-effects pair, while still keeping the effects\n   the same.\n",
            "type": "(a -> b) -> Effects.Effects a effect -> Effects.Effects b effect"
          },
          {
            "name": "return",
            "comment": " Take a value and wrap it with no effects.\nThis is useful when you don't want to make a tuple with a more complicated value and an empty\nlist because it will look messy, e.g.\n\n    Effects.return\n        { model\n            | isGrounded = true\n            , velocity = (0, 0)\n        }\n",
            "type": "a -> Effects.Effects a effect"
          },
          {
            "name": "toCmd",
            "comment": " Takes a pair of a value and a list of commands,\nand turns it into a pair of a value and a single command by batching the commands\ntogether.\n\n    runRequests : Model -> (Model, Cmd Msg)\n    runRequests model =\n        (Effects.return model\n            `Effects.andThen` fetchGifs\n            `Effects.andThen` attachRandomId\n        )\n            |> Effects.toCmd\n",
            "type": "Effects.Effects a (Platform.Cmd.Cmd msg) -> ( a, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "akbiggs/elm-game-update",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Game.Update",
        "comment": " When updating a component in a game, frequently you will want to have some state\nfor representing the death/destruction of the component. `Game.Update` offers you\nconvenient operations for chaining together update functions that have side-effects\nand could kill the object, representing the alive state as `Just object` and\nthe death state as `Nothing`.\n\n# Types\n\n@docs Result, Update\n\n# Constructors\n\n@docs returnAlive, returnMaybe, returnDead, fromEffects\n\n# Running Updates\n\n@docs runOnMaybe, runIf\n\n# Chaining Updates\n\n@docs andThen\n\n# Filtering results\n\n@docs filterAlive\n",
        "aliases": [
          {
            "name": "Result",
            "comment": " A `Result a effect` represents the result from updating component of\ntype `a` with side-effects of type `effect`. The component might be dead\nor alive after this update has occurred.\n\nA `Result a effect` is equivalent to an `Effects (Maybe a) effect` from\n[elm-effects](http://package.elm-lang.org/packages/akbiggs/elm-effects), which means\nthat you can chain and handle effects from it using the operations from that package.\n",
            "args": [
              "a",
              "effect"
            ],
            "type": "Effects.Effects (Maybe.Maybe a) effect"
          },
          {
            "name": "Update",
            "comment": " An `Update a effect` represents a function that takes a component\nof type `a` and produces an updated version of that component with side-effects\nof type `effect`. The component might be dead or alive after this update has\noccurred.\n",
            "args": [
              "a",
              "effect"
            ],
            "type": "a -> Game.Update.Result a effect"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Takes the result from one update and runs another update function on it\nif the object in the result is still alive. However, if the object is dead,\nthe update will not occur and no additional side-effects will be added to\nthe result. This is useful when you want to run a bunch of functions on an object,\nany of which could kill the object.\n",
            "type": "Game.Update.Result a effect -> Game.Update.Update a effect -> Game.Update.Result a effect"
          },
          {
            "name": "filterAlive",
            "comment": " Take a bunch of update results and filter out the ones that are still alive.\nTo preserve the effects from the dead objects, the effects are all batched together\ninto a single list instead of being kept as separate lists.\n",
            "type": "List (Game.Update.Result a effect) -> Effects.Effects (List a) effect"
          },
          {
            "name": "fromEffects",
            "comment": " Takes an `Effects` object and converts it to an update result,\nreporting that the value is alive.\n",
            "type": "Effects.Effects a effect -> Game.Update.Result a effect"
          },
          {
            "name": "returnAlive",
            "comment": " Takes a value and returns a `Result` with no side-effects\nindicating that the object is still alive.\n",
            "type": "a -> Game.Update.Result a effect"
          },
          {
            "name": "returnDead",
            "comment": " Returns a result with no side-effects indicating a dead object.\n",
            "type": "Game.Update.Result a effect"
          },
          {
            "name": "returnMaybe",
            "comment": " Takes a `Maybe` and returns a `Result` with no side-effects indicating that the object is\nalive if the `Maybe` has a value, otherwise dead.\n",
            "type": "Maybe.Maybe a -> Game.Update.Result a effect"
          },
          {
            "name": "runIf",
            "comment": " Runs an update on an alive object if the condition is true. Otherwise, returns\na `Result` indicating that the object is alive.\n",
            "type": "Bool -> Game.Update.Update a effect -> a -> Game.Update.Result a effect"
          },
          {
            "name": "runOnMaybe",
            "comment": " Updates an object if the object is alive(the `Maybe` has a value).\nOtherwise, returns a `Result` with no side-effects indicating the object is dead.\n",
            "type": "Game.Update.Update a effect -> Maybe.Maybe a -> Game.Update.Result a effect"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "alltonp/elm-driveby",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Driveby",
        "comment": " This library is for defining scripts to test simple elm web applications using phantomjs\n\n# Definition\n@docs Suite, Script, Request, Response, Command, Condition, Context, Step\n\n# Common Helpers\n@docs suite, script, serve, stub, goto, gotoLocal, click, enter, assert, textContains, textEquals\n\n",
        "aliases": [
          {
            "name": "Command",
            "comment": " A Command to execute ",
            "args": [],
            "type": "{ name : String, args : List String }"
          },
          {
            "name": "Condition",
            "comment": " A Condition to check ",
            "args": [],
            "type": "{ description : String, args : List String }"
          },
          {
            "name": "Context",
            "comment": " The Context of an executing Script ",
            "args": [],
            "type": "{ localPort : Int , browserId : Int , scriptId : Int , stepId : Int , updated : String }"
          },
          {
            "name": "Request",
            "comment": " A Request sent to phantomjs ",
            "args": [],
            "type": "{ context : Driveby.Context, step : Driveby.Step }"
          },
          {
            "name": "Response",
            "comment": " A Response sent from phantomjs ",
            "args": [],
            "type": "{ context : Driveby.Context, failures : List String }"
          },
          {
            "name": "Script",
            "comment": " A Script of Commands to execute ",
            "args": [],
            "type": "{ name : String, commands : List Driveby.Command }"
          },
          {
            "name": "Step",
            "comment": " A Step holding a Command to execute ",
            "args": [],
            "type": "{ id : Int, command : Driveby.Command, executed : Bool }"
          },
          {
            "name": "Suite",
            "comment": " A Suite of Scripts ",
            "args": [],
            "type": "{ name : String, scripts : List Driveby.Script }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "assert",
            "comment": " assert this condition ",
            "type": "Driveby.Condition -> Driveby.Command"
          },
          {
            "name": "click",
            "comment": " click this element id ",
            "type": "String -> Driveby.Command"
          },
          {
            "name": "enter",
            "comment": " type value into this element id ",
            "type": "String -> String -> Driveby.Command"
          },
          {
            "name": "goto",
            "comment": " navigate to this url (for externally hosted) ",
            "type": "String -> Driveby.Command"
          },
          {
            "name": "gotoLocal",
            "comment": " navigate to this relative path (for content hosted by 'serve') ",
            "type": "String -> Driveby.Command"
          },
          {
            "name": "script",
            "comment": " create Script from supplied Commands ",
            "type": "String -> List Driveby.Command -> Driveby.Script"
          },
          {
            "name": "serve",
            "comment": " serve the content under given directory path ",
            "type": "String -> Driveby.Command"
          },
          {
            "name": "stub",
            "comment": " stub the content for the requests matching relative path ",
            "type": "String -> String -> Driveby.Command"
          },
          {
            "name": "suite",
            "comment": " create Suite from supplied Scripts ",
            "type": "String -> List Driveby.Script -> Driveby.Suite"
          },
          {
            "name": "textContains",
            "comment": " check element id text contains expected value ",
            "type": "String -> String -> Driveby.Condition"
          },
          {
            "name": "textEquals",
            "comment": " check element id text equals expected value ",
            "type": "String -> String -> Driveby.Condition"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "apuchenkin/elm-nested-router",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Router",
        "comment": " A simple nested router for single page applications.\n\nSee [Example](https://github.com/apuchenkin/elm-nested-router/tree/master/example) ([Live demo](http://apuchenkin.github.io/elm-nested-router/example))\nand [Tests](https://github.com/apuchenkin/elm-nested-router/tree/master/test/Test) for more details\n\n@docs dispatch, initialState\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dispatch",
            "comment": " Launches the router.\n  Provide `init` function and router config as parameters\n ",
            "type": "(flags -> ( Router.Types.WithRouter route state , Platform.Cmd.Cmd (Router.Types.Action (Router.Types.WithRouter route state)) )) -> Router.Types.RouterConfig route (Router.Types.WithRouter route state) -> Platform.Program flags"
          },
          {
            "name": "initialState",
            "comment": " Initial state for router. Fed this into your application state ",
            "type": "Router.Types.RouterState route"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Router.Helpers",
        "comment": " A set of utility functions\n@docs noFx, doNothing, performTask, chainAction, combineActions\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chainAction",
            "comment": " Combines two action together ",
            "type": "Router.Types.Action state -> Router.Types.Action state -> Router.Types.Action state"
          },
          {
            "name": "combineActions",
            "comment": " @Private\n  Folds actions for a handlers into a single action\n",
            "type": "List (Router.Types.Action state) -> Router.Types.Action state"
          },
          {
            "name": "doNothing",
            "comment": " An empty action ",
            "type": "Router.Types.Action state"
          },
          {
            "name": "noFx",
            "comment": " An action without side effects ",
            "type": "state -> ( state, Router.Types.Commands state )"
          },
          {
            "name": "performTask",
            "comment": " Creates a commnd to perform the task ",
            "type": "Task.Task Basics.Never (Router.Types.Action state) -> Platform.Cmd.Cmd (Router.Types.Action state)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Router.Types",
        "comment": " Router types\n\n# URL parts\n@docs URL, RawURL, RawSegment, Param, Constraint, Route, RouteConfig, RouteParams\n\n# Actions and handlers\n@docs WithRouter, Handler, Action, Commands, Response, Transition\n\n# Router\n@docs Router, RouterConfig, RouterState\n",
        "aliases": [
          {
            "name": "Action",
            "comment": " `Action` represents function that prforms something with application state, and might contain side efects ",
            "args": [
              "state"
            ],
            "type": "state -> Router.Types.Response state"
          },
          {
            "name": "Commands",
            "comment": " Helper to get rid of brackets ",
            "args": [
              "state"
            ],
            "type": "Platform.Cmd.Cmd (Router.Types.Action state)"
          },
          {
            "name": "Handler",
            "comment": "\n  A `Handler` is a piece of functionality binded to specific route\n  * `view` &mdash; Function that describes how to render application state to map of named views\n  * `actions` &mdash; A set of necessary to perform actions\n",
            "args": [
              "state"
            ],
            "type": "{ view : state -> Dict.Dict String (Html.Html (Router.Types.Action state)) -> Dict.Dict String (Html.Html (Router.Types.Action state)) , actions : List (Router.Types.Action state) }"
          },
          {
            "name": "Param",
            "comment": " Dynamic route parameter name ",
            "args": [],
            "type": "String"
          },
          {
            "name": "RawSegment",
            "comment": " A single segment of `RawURL` template ",
            "args": [],
            "type": "String"
          },
          {
            "name": "RawURL",
            "comment": " Raw URL template:\n```\n\"/home/post/:postId\"\n```\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "Route",
            "comment": " combined abstract route type with params ",
            "args": [
              "route"
            ],
            "type": "( route, Router.Types.RouteParams )"
          },
          {
            "name": "RouteConfig",
            "comment": "\n  `RouteConfig` is a route configuration\n\n  * `segment` &mdash; URL segment\n\n  Expample:\n```\n\"/home\",\n\"/post/:postId\",\n\"/author[/:authorId]\"\n```\n  * `parent` &mdash; A parent route\n  * `bypass` &mdash; When setted to True - route will not be matched directly, but still can provide actions and views\n  * `constraints` &mdash; A set of constraints applied to route params. (`String`, `Int`, `Enum`, `Regexp`) constraints are supported\n  * `handler` &mdash; A binding to handler.\n\n  **Exapmle of route configuration**:\n```\n  config = {\n    -- \"author\" and \"postId\" is dynamic url parts\n    -- \"postId\" is marked as optional and might me ommited in URL\n    segment = \"/page/:author[/:postId]\"\n  , parent = Nothing\n    -- setting a parent for route means that full route URL will be combined with it's parent, and actions for route and it's parent will be fired on match\n  , bypass = False\n  , constraints = Dict.fromList [(\"author\", String),(\"postId\", Int)]\n    -- constraints specify that `author` param must be a string,\n    -- and postId an integer\n  , handler = always PostHandler\n  }\n```\n\n  A `config` above will match following URLs:\n```\n\"/page/mark/1\", \"/page/mark\", \"/page/joe\"\n```\n  \"mark\" and \"joe\" will be stored as `author` param, and \"1\" as `postId`\n  Everything enclosed by brackets considered as optional.\n",
            "args": [
              "route",
              "state"
            ],
            "type": "{ segment : Router.Types.RawSegment , parent : Maybe.Maybe route , bypass : Bool , constraints : Dict.Dict Router.Types.Param Router.Types.Constraint , handler : Router.Types.Router route state -> Router.Types.Handler state }"
          },
          {
            "name": "RouteParams",
            "comment": " A map of route param names and values ",
            "args": [],
            "type": "Dict.Dict Router.Types.Param String"
          },
          {
            "name": "Router",
            "comment": "\n  A `Router` is a provider of following functions:\n\n  * `bindForward` &mdash; Binds a `forward` action to a provided `Route` with a list of html attributes.\n    This is useful to create links in application\n  * `buildUrl` &mdash; Builds an URL for provided `Route`\n  * `forward` &mdash; Preforms a transition to provided `Route`\n  * `redirect` &mdash; Redirects to provided `Route`\n  * `match` &mdash; Performs attempt to match provided URL.\n\n  Router also provide it's `config`\n",
            "args": [
              "route",
              "state"
            ],
            "type": "{ config : Router.Types.RouterConfig route state , bindForward : Router.Types.Route route -> List (Html.Attribute (Router.Types.Action state)) -> List (Html.Attribute (Router.Types.Action state)) , buildUrl : Router.Types.Route route -> Router.Types.URL , forward : Router.Types.Route route -> Router.Types.Action state , redirect : Router.Types.Route route -> Router.Types.Action state , match : String -> Maybe.Maybe (Router.Types.Route route) }"
          },
          {
            "name": "RouterState",
            "comment": " A state of router ",
            "args": [
              "route"
            ],
            "type": "{ route : Maybe.Maybe route, params : Router.Types.RouteParams }"
          },
          {
            "name": "Transition",
            "comment": " A transition from route A to route B ",
            "args": [
              "route",
              "state"
            ],
            "type": "Maybe.Maybe (Router.Types.Route route) -> Maybe.Maybe (Router.Types.Route route) -> Router.Types.Action state"
          },
          {
            "name": "URL",
            "comment": " A valid URL:\n```\n\"/home/post/1\"\n```\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "WithRouter",
            "comment": " Type extension for the application state ",
            "args": [
              "route",
              "state"
            ],
            "type": "{ state | router : Router.Types.RouterState route }"
          }
        ],
        "types": [
          {
            "name": "Constraint",
            "comment": " A constraint of route parameter type ",
            "args": [],
            "cases": [
              [
                "Int",
                []
              ],
              [
                "String",
                []
              ],
              [
                "Enum",
                [
                  "List String"
                ]
              ],
              [
                "Regex",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Response",
            "comment": " An action result - a modified state combined with side effects ",
            "args": [
              "state"
            ],
            "cases": [
              [
                "Response",
                [
                  "( state, Router.Types.Commands state )"
                ]
              ]
            ]
          },
          {
            "name": "RouterConfig",
            "comment": "\n  `RouterConfig` is configuration for the router:\n\n  * `html5` &mdash; Use html5 pushState.\n  * `removeTrailingSlash` &mdash; Trailing slashes will be removed from matched and builded urls\n  * `layout` &mdash; Main rendered function that combines named views gathered from Handlers in a single HTML\n  * `transition` &mdash; An action that should be executed on every router transition\n  * `routeConfig` &mdash; A mapping between route and route configuration\n  * `routes` &mdash; A list of routes available for routing\n  * `subscriptions` &mdash; A list of subscriptions (see: [elm-lang/html](http://package.elm-lang.org/packages/elm-lang/html/1.1.0/Html-App) for details)\n",
            "args": [
              "route",
              "state"
            ],
            "cases": [
              [
                "RouterConfig",
                [
                  "{ html5 : Bool , removeTrailingSlash : Bool , layout : Router.Types.Router route state -> state -> Dict.Dict String (Html.Html (Router.Types.Action state)) -> Html.Html (Router.Types.Action state) , transition : Router.Types.Router route state -> Router.Types.Transition route state , routeConfig : route -> Router.Types.RouteConfig route state , routes : List route , subscriptions : state -> Platform.Sub.Sub (Router.Types.Action state) }"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "aristidesstaffieri/elm-poisson",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Poisson",
        "comment": " Calculate a poisson distribution from 2 floats. This is useful for\ndetermining probability of events that happen over a fixed period of time\nif the events have a known average rate and are independent of time since last\nevent.\n\n# Definition\n@docs poisson\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "poisson",
            "comment": " Poisson function\n    poisson 1 1\n",
            "type": "Float -> Float -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "arturopala/elm-monocle",
    "version": "1.2.1",
    "docs": [
      {
        "name": "Monocle.Optional",
        "comment": " A Optional is a weaker Lens and a weaker Prism\n\n# Definition\n@docs Optional\n\n# Derived methods\n@docs compose, composeLens, modifyOption, modify, zip\n\n# Conversion\n@docs fromPrism, fromLens\n\n# Example\n\n    addressRegionOptional : Optional Address String\n    addressRegionOptional =\n        let\n            getOption a = a.region\n\n            set r a = { a | region = Just r }\n        in\n            Optional getOption set\n",
        "aliases": [
          {
            "name": "Optional",
            "comment": " In order to create Optional we need to suply 2 functions: set and getOption\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ getOption : a -> Maybe.Maybe b, set : b -> a -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Optional a b` with `Optional b c` and returns `Optional a c`\n\n    string2IntPrism : Prism String Int\n    string2IntPrism = Prism (String.toInt >> Result.toMaybe) toString\n\n    addressRegionIntOptional: Optional Address Int\n    addressRegionIntOptional = addressRegionOptional `compose` (fromPrism string2IntPrism)\n",
            "type": "Monocle.Optional.Optional a b -> Monocle.Optional.Optional b c -> Monocle.Optional.Optional a c"
          },
          {
            "name": "composeLens",
            "comment": " Composes `Optional a b` with `Lens b c` and returns `Optional a c`\n\n    string2CharListIso : Iso String (List Char)\n    string2CharListIso = Iso String.toList String.fromList\n\n    addressRegionListCharOptional: Optional Address (List Char)\n    addressRegionListCharOptional = addressRegionOptional `composeLens` (fromIso string2CharListIso)\n",
            "type": "Monocle.Optional.Optional a b -> Monocle.Lens.Lens b c -> Monocle.Optional.Optional a c"
          },
          {
            "name": "fromLens",
            "comment": " Casts `Lens a b` to `Optional a b` where `getOption` will return always `Just`\n",
            "type": "Monocle.Lens.Lens a b -> Monocle.Optional.Optional a b"
          },
          {
            "name": "fromPrism",
            "comment": " Casts `Prism a b` to `Optional a b`\n\n    string2IntPrism : Prism String Int\n    string2IntPrism =\n        Prism (String.toInt >> Result.toMaybe) toString\n\n    stringIntOptional: Optional String Int\n    stringIntOptional = fromPrism string2IntPrism\n",
            "type": "Monocle.Prism.Prism a b -> Monocle.Optional.Optional a b"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Optional a b`\n\n        modifyRegion: String -> String\n        modifyRegion region = String.reverse region\n\n        modifyAddressRegion: Address -> Address\n        modifyAddressRegion address = Optional.modify addressRegionOptional modifyRegion address\n",
            "type": "Monocle.Optional.Optional a b -> (b -> b) -> a -> a"
          },
          {
            "name": "modifyOption",
            "comment": " Modifies given function `(b -> b)` to be `(a -> Maybe a)` using `Optional a b`\n\n        modifyRegion: String -> String\n        modifyRegion region = String.reverse region\n\n        modifyAddressRegion: Address -> Maybe Address\n        modifyAddressRegion address = Optional.modifyOption addressRegionOptional modifyRegion address\n",
            "type": "Monocle.Optional.Optional a b -> (b -> b) -> a -> Maybe.Maybe a"
          },
          {
            "name": "zip",
            "comment": " Zip `Optional a c` with `Optional b d` to form Optional for the pairs ( a, b ) ( c, d )\n",
            "type": "Monocle.Optional.Optional a c -> Monocle.Optional.Optional b d -> Monocle.Optional.Optional ( a, b ) ( c, d )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Monocle.Prism",
        "comment": " A Prism is a tool which optionally converts elements of type A into elements of type B and back.\n\n# Definition\n@docs Prism\n\n# Example\n\n    string2IntPrism : Prism String Int\n    string2IntPrism =\n        Prism (String.toInt >> Result.toMaybe) toString\n\n    string2IntPrism.getOption \"17896\" == Just 17896\n    string2IntPrism.getOption \"1a896\" == Nothing\n    string2IntPrism.reverseGet 1626767 = \"1626767\"\n\n# Derived methods\n@docs isMatching, modify, modifyOption, compose, composeIso\n\n# Conversion\n@docs fromIso\n\n",
        "aliases": [
          {
            "name": "Prism",
            "comment": " In order to create a `Prism` we need to supply two functions: `getOption` and `reverseGet`\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ getOption : a -> Maybe.Maybe b, reverseGet : b -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Prism a b` with `Prism b c` and returns `Prism a c`\n\n        prism = Monocle.Prism.compose string2FloatPrism float2IntPrism\n        prism.getOption \"22\" == Just 22\n        prism.getOption \"22.2\" == Nothing\n        prism.getOption \"22a\" == Nothing\n        prism.getOption \"abc\" == Nothing\n\n",
            "type": "Monocle.Prism.Prism a b -> Monocle.Prism.Prism b c -> Monocle.Prism.Prism a c"
          },
          {
            "name": "composeIso",
            "comment": " Composes `Prism a b` with `Iso b c` and returns `Prism a c`\n\n        iso = Iso ((*) 10) ((//) 10)\n        prism = Monocle.Prism.composeIso string2IntPrism iso\n        prism.getOption \"22\" == Just 220\n        prism.getOption \"22.2\" == Nothing\n        prism.getOption \"22a\" == Nothing\n        prism.getOption \"abc\" == Nothing\n",
            "type": "Monocle.Prism.Prism a b -> Monocle.Iso.Iso b c -> Monocle.Prism.Prism a c"
          },
          {
            "name": "fromIso",
            "comment": " Casts `Iso a b` to `Prism a b`\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Prism.Prism a b"
          },
          {
            "name": "isMatching",
            "comment": " Checks if value of type `A` has matching element of type 'B'\n\n        Monocle.Prism.isMatching string2IntPrism \"abc\" == False\n        Monocle.Prism.isMatching string2IntPrism \"123\" == True\n",
            "type": "Monocle.Prism.Prism a b -> a -> Bool"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Prism a b`\n\n        fx i = i * 2\n        modified = Monocle.Prism.modify string2IntPrism fx\n        modified \"22\" == \"44\"\n        modified \"abc\" == \"abc\"\n",
            "type": "Monocle.Prism.Prism a b -> (b -> b) -> a -> a"
          },
          {
            "name": "modifyOption",
            "comment": " Modifies given function `(b -> b)` to be `(a -> Maybe a)` using `Prism a b`\n\n        fx i = i * 2\n        modified = Monocle.Prism.modify string2IntPrism fx\n        modified \"22\" == Just \"44\"\n        modified \"abc\" == Nothing\n",
            "type": "Monocle.Prism.Prism a b -> (b -> b) -> a -> Maybe.Maybe a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Monocle.Lens",
        "comment": " A Lens is a functional concept which solves a very common problem:\n    how to easily update a complex immutable structure,\n    for this purpose Lens acts as a zoom into a record.\n\n# Definition\n@docs Lens\n\n# Example\n    addressStreetNameLens : Lens Address String\n    addressStreetNameLens =\n        let\n            get a = a.streetName\n\n            set sn a = { a | streetName = sn }\n        in\n            Lens get set\n\n    placeAddressLens : Lens Place Address\n    placeAddressLens =\n        let\n            get p = p.address\n\n            set a p = { p | address = a }\n        in\n            Lens get set\n\n    placeStreetName: Lens Place String\n    placeStreetName = placeAddressLens `compose` addressStreetNameLens\n\n# Derived methods\n@docs compose, modify, modifyAndMerge, zip\n\n# Conversion\n@docs fromIso\n\n",
        "aliases": [
          {
            "name": "Lens",
            "comment": " In order to create Lens we need to suply 2 functions: set and get\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ get : a -> b, set : b -> a -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Lens a b` with `Lens b c` and returns `Lens a c`\n",
            "type": "Monocle.Lens.Lens a b -> Monocle.Lens.Lens b c -> Monocle.Lens.Lens a c"
          },
          {
            "name": "fromIso",
            "comment": " Casts `Iso a b` to `Lens a b`\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Lens.Lens a b"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Lens a b`\n\n    addressStreetNameLens = Lens Address String\n    fx streetName = String.reverse streeName\n    fx2 = Lens.modify addressStreetNameLens fx\n    fx2 {streetName=\"abcdef\"} == {streetName=\"fedcba\"}\n",
            "type": "Monocle.Lens.Lens a b -> (b -> b) -> a -> a"
          },
          {
            "name": "modifyAndMerge",
            "comment": " Modifies given function `(b -> (b,c))` to be `(a,c) -> (a,c)` using `Lens a b` and `merge` function\n\n",
            "type": "Monocle.Lens.Lens a b -> (b -> ( b, c )) -> (c -> c -> c) -> ( a, c ) -> ( a, c )"
          },
          {
            "name": "zip",
            "comment": " Zips `Lens a c` with `Lens b d` to form Lens ( a, b ) ( c, d )\n",
            "type": "Monocle.Lens.Lens a c -> Monocle.Lens.Lens b d -> Monocle.Lens.Lens ( a, b ) ( c, d )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Monocle.Iso",
        "comment": " An Iso is a tool which converts elements of type A into elements of type B and back without loss.\n\n# Definition\n@docs Iso\n\n# Laws\n    Identity:  \\x -> iso.get(iso.reverseGet x) == x\n    Reversed:  \\x -> iso.reverseGet(iso.get x) == x\n\n# Example\n\n    string2CharListIso : Iso String (List Char)\n    string2CharListIso =\n        Iso String.toList String.fromList\n\n    (string2CharListIso.get \"ABcdE\") == ['A','B','c','d','E']\n    (string2CharListIso.reverseGet ['A','B','c','d','E']) == \"ABcdE\"\n\n# Derived methods\n@docs reverse, modify, compose\n",
        "aliases": [
          {
            "name": "Iso",
            "comment": " In order to create an `Iso` we need to supply two total functions: `get` and `reverseGet`\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ get : a -> b, reverseGet : b -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Iso a b` with `Iso b c` and returns `Iso a c`\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Iso.Iso b c -> Monocle.Iso.Iso a c"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Iso a b`\n\n        someiso = Iso String.toList String.fromList\n        somefx xs =  '@' :: xs\n        modified = Iso.modify someiso somefx\n        (modified \"artur\") == \"@artur\"\n\n",
            "type": "Monocle.Iso.Iso a b -> (b -> b) -> a -> a"
          },
          {
            "name": "reverse",
            "comment": " Creates reversed `Iso b a`, exchanges functions `get` and `reverseGet`\n\n        .get (Iso.reversed someiso) == someiso.reverseGet\n        .reverseGet (Iso.reversed someiso) == someiso.get\n        Iso.compose someiso (Iso.reversed someiso) == Iso identity identity\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Iso.Iso b a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "athanclark/elm-debouncer",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Debounce",
        "comment": "\n\nThis is a delay-based debouncer, where given a _minimum_ delay and an action\nto issue, we'll build a stateful component that will eventually issue the action\n_once_, after being given a slew of requests within the delay timeframe.\n\n\n## Debouncer State\n\n@docs Model\n\n@docs init\n\n\n## Starting the Debouncer\n\n@docs Msg\n\n\n## Evaluating the Debouncer\n\n@docs update\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The state of the debouncer\n",
            "args": [
              "a"
            ],
            "type": "{ elapsed : Maybe.Maybe (Debounce.Elapsed a) }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " To bounce the debouncer, just make multiple calls to `Bounce`.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Bounce",
                [
                  "Platform.Cmd.Cmd a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " The initial debouncer\n",
            "type": "Debounce.Model a"
          },
          {
            "name": "update",
            "comment": " The main logic of the debouncer.\n",
            "type": "Time.Time -> Debounce.Msg a -> Debounce.Model a -> ( Debounce.Model a , Platform.Cmd.Cmd (Result.Result (Debounce.Msg a) a) )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "athanclark/elm-discrete-transition",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Transition.Discrete",
        "comment": "\n\n## A Discrete State\n\n@docs Node, mkNode, NodeId\n\n## Model\n\n@docs Model, init\n\n## Msg\n\n@docs Msg, MsgSettings, emptyMsgSettings\n\n## Update\n\n@docs update, subscriptions\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The state of the transition system ",
            "args": [
              "a",
              "b"
            ],
            "type": "{ current : Transition.Discrete.NodeId , target : Maybe.Maybe Transition.Discrete.TargetState , nodes : IntDict.IntDict (Transition.Discrete.Node a b) , actions : Transition.Discrete.PendingMsg b }"
          },
          {
            "name": "MsgSettings",
            "comment": " Actions to issue when a state transition is finished, or between\n    a state change.\n",
            "args": [
              "b"
            ],
            "type": "{ onChange : Platform.Cmd.Cmd b -> Platform.Cmd.Cmd b , onBetweenChange : Platform.Cmd.Cmd b -> Platform.Cmd.Cmd b }"
          },
          {
            "name": "NodeId",
            "comment": " The identifier for a discrete state - note that you should\n    keep these unique; if not, the behaviour is unspecified\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Call `GoTo node settings` to initialize the transition. ",
            "args": [
              "b"
            ],
            "cases": [
              [
                "GoTo",
                [
                  "Transition.Discrete.NodeId",
                  "Transition.Discrete.MsgSettings b"
                ]
              ]
            ]
          },
          {
            "name": "Node",
            "comment": " The discrete state's transition settings ",
            "args": [
              "a",
              "b"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "emptyMsgSettings",
            "comment": " ",
            "type": "Transition.Discrete.MsgSettings b"
          },
          {
            "name": "init",
            "comment": " ",
            "type": "Transition.Discrete.NodeId -> List ( Transition.Discrete.NodeId, Transition.Discrete.Node a b ) -> Transition.Discrete.Model a b"
          },
          {
            "name": "mkNode",
            "comment": " Build a discrete state ",
            "type": "Time.Time -> (Time.Time -> Platform.Cmd.Cmd a) -> Transition.Discrete.Node a b"
          },
          {
            "name": "subscriptions",
            "comment": " ",
            "type": "Transition.Discrete.Model a b -> Platform.Sub.Sub (Transition.Discrete.Msg b)"
          },
          {
            "name": "update",
            "comment": " ",
            "type": "(Transition.Discrete.Msg b -> Result.Result a b) -> Transition.Discrete.Msg b -> Transition.Discrete.Model a b -> ( Transition.Discrete.Model a b , Platform.Cmd.Cmd (Result.Result a b) )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "athanclark/elm-duration",
    "version": "5.0.0",
    "docs": [
      {
        "name": "Duration",
        "comment": "\n\n## Duration State\n\n@docs Model\n\n@docs init\n\n## Duration Initialization\n\n@docs Msg\n\n## Duration Evaluation\n\n@docs update\n\n@docs subscriptions\n\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The state of the duration ",
            "args": [
              "b"
            ],
            "type": "{ elapsed : Maybe.Maybe ( Time.Time, Duration.Direction ) , onCompletion : Platform.Cmd.Cmd b }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Either trigger the transition to explicitly go `Forward`, `Reverse`,\n    or `Toggle` its playback, where `b` is the effect to be played when\n    the transition finishes.\n",
            "args": [
              "b"
            ],
            "cases": [
              [
                "Forward",
                [
                  "Platform.Cmd.Cmd b -> Platform.Cmd.Cmd b"
                ]
              ],
              [
                "Reverse",
                [
                  "Platform.Cmd.Cmd b -> Platform.Cmd.Cmd b"
                ]
              ],
              [
                "Toggle",
                [
                  "Platform.Cmd.Cmd b -> Platform.Cmd.Cmd b"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " The initial state of the duration ",
            "type": "Duration.Model b"
          },
          {
            "name": "subscriptions",
            "comment": " The subscriptions for the duration - every time the browser screen refreshes. ",
            "type": "Duration.Model b -> Platform.Sub.Sub (Duration.Msg b)"
          },
          {
            "name": "update",
            "comment": " Given a time-indexed command and the length of time the animation\n    should play over, create an update function.\n",
            "type": "(Time.Time -> Platform.Cmd.Cmd a) -> Time.Time -> Duration.Msg b -> Duration.Model b -> ( Duration.Model b, Platform.Cmd.Cmd (Result.Result a b) )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "athanclark/elm-every",
    "version": "7.0.0",
    "docs": [
      {
        "name": "Every",
        "comment": "\n\nThis component will continually issue / poll an action / message\nfor some given amount of time, determined by a function you provide\nthe system.\n\n\n## Polling State\n\n@docs Model, init\n\n\n## Polling Invocation\n\n@docs Msg\n\n\n## Polling Enactment\n\n@docs update, waitingFor\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": "\nThe state of the loop. Note that `soFar` is a block-like metric: it doesn't\nchange dynamically over the duration of time, but is rather the last-known\ninput to the new duration function.\n",
            "args": [
              "b"
            ],
            "type": "{ threadId : Int, data : b, stop : Bool, soFar : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " The type of messages you can send to poll:\n- start again, debouncing and adjusting the data\n- adjust the data stored and optionally debounce\n- stop all threads\n",
            "args": [
              "b"
            ],
            "cases": [
              [
                "Start",
                [
                  "b -> b"
                ]
              ],
              [
                "Adjust",
                [
                  "{ modify : b -> b, reset : Bool }"
                ]
              ],
              [
                "Stop",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " ",
            "type": "b -> Every.Model b"
          },
          {
            "name": "update",
            "comment": "\nGiven a method to compute the duration to wait until the next action is issued\n(calculated from the total time elapsed `total -> delay`), and the main action to\nissue, build an updating component.\n\nAlso notice that this does not fire immediately.\n",
            "type": "(b -> Time.Time -> Time.Time) -> (b -> Platform.Cmd.Cmd a) -> Every.Msg b -> Every.Model b -> ( Every.Model b , Platform.Cmd.Cmd (Result.Result a (Every.Msg b)) )"
          },
          {
            "name": "waitingFor",
            "comment": "\nGiven the duration function and the current state, give the total time that is currently being\nwaited. Note that this is assuming there hasn't been a manipulation of the data stored since the\nlast issued tick.\n",
            "type": "(b -> Time.Time -> Time.Time) -> Every.Model b -> Time.Time"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "athanclark/elm-param-parsing-2",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Query",
        "comment": "\nThis library works with URI query strings; a string that's\neither empty, or, beginning with `?` (question mark), is followed by\none or more strings, each of which separated by a `&` (ampersand).\nThese strings may or may not be split between a `=` (equals sign).\n\n> In this library, we consider only the **first** `=` as the split,\n> and all further occurances remain intact in the resulting `Just v` value.\n\nIf there is at least one `=` in the string, then the resulting split\nwill be `(k, Just v)`. Likewise, if there is no `=`, then the\nresult will just be `(k, Nothing)`. Critically, if the `=` is included,\nbut there is no string before the next `&` (i.e. `...&foo=&...`), then\nthe result will be `(\"foo\", Just \"\")`. Empty strings (i.e. `...&&...`)\nare represented as `(\"\", Nothing)`.\n\nWe then have a list of pairs of strings with a nullable right value.\nThis is a precise type denoting the query string, opposed to a `Dict` -\nit retains both the ordering information of the query strings, and their\npossible value. A more general type might be `List String`, so the resulting\ntype would be a list of lists `List (List String)`, but this library is\nintended to assume a more practical use case.\n\n## Laws:\n\n### Isomorphism\n\nforall query strings `x:String` (i.e. `x-www-uriencode` formatted strings, separated\nby `=` and `&`, beginning with a `?`):\n\n```\nprintQuery (parseQuery x) == x\n```\n\nand likewise, forall query string sets `xs:[(String, Maybe String)]`:\n\n```\nparseQuery (printQuery xs) == xs\n```\n\n> If you can think of others, please let me know!\n\n@docs parseQuery, printQuery\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "parseQuery",
            "comment": "\nParse everything after the path and before the fragment,\nspecifically `/path/to/resource.foo...#fragment`. This\nfunction's behaviour is unspecified if you give this whole\nstring, and not only the portion marked as `...`, usually\nin the form of `?foo=bar&baz&qux=2` *including* the initial `?`.\nNote that this also decodes the `x-www-uriencode` data as well\nwith `Http.uriDecode`.\n",
            "type": "String -> List ( String, Maybe.Maybe String )"
          },
          {
            "name": "printQuery",
            "comment": "\nPrints out the query Dict such that a `?` is placed\nonly if the Dict is _non-empty_. Also uses `Http.uriEncode` from\n[evancz's http package](https://package.elm-lang.org/packages/evancz/elm-http),\nand does _not_ place a `&` if the value is `Nothing`.\n",
            "type": "List ( String, Maybe.Maybe String ) -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "athanclark/elm-threading",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Threading",
        "comment": "\n@docs ThreadId, Threaded\n\n@docs Msg, Model, init\n\n@docs update\n\n@docs subscriptions\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " ",
            "args": [
              "o",
              "a"
            ],
            "type": "{ threadId : Threading.ThreadId , threads : IntDict.IntDict (o -> Platform.Cmd.Cmd a) }"
          },
          {
            "name": "ThreadId",
            "comment": " ",
            "args": [],
            "type": "Int"
          },
          {
            "name": "Threaded",
            "comment": "\nThe API that your ports should understand: there's no need\nto manipulate the `threadId` field; we can just pass it to our output:\n\n```js\napp.ports.getFoo.subscribe(function(threadedInput) {\n  var threadedOutput = {\n    threadId = threadedInput.threadId,\n    payload  = doSomething(threadedInput.payload)\n  };\n  app.ports.gotFoo.send(threadedOutput);\n});\n```\n",
            "args": [
              "x"
            ],
            "type": "{ threadId : Threading.ThreadId, payload : x }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": "\nTo invoke your threaded port from Elm, just use `Call` with a continuation\nfor handling the output:\n\n```elm\n-- a simple session verifier\ntype Msg\n  = HashMsg (Threading.Msg String String Msg) -- from strings to strings\n  -- | ...\n\ntype alias Model =\n  { hasher : Threading.Model String Msg\n  -- , ...\n  }\n\nupdate action model =\n  case action of\n    -- ...\n    SecurePOST data ->\n      ( -- ...\n      , Task.perform Debug.crash HashMsg <|\n          Task.succeed <| Threading.Call data <| \\hashedData ->\n            -- do something with the hashed data, where this\n               expression here should have a type `Cmd Msg`.\n      )\n```\n",
            "args": [
              "i",
              "o",
              "a"
            ],
            "cases": [
              [
                "Call",
                [
                  "i",
                  "o -> Platform.Cmd.Cmd a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " ",
            "type": "Threading.Model o a"
          },
          {
            "name": "subscriptions",
            "comment": "\nGiven a subscription that sends `Threaded` data, we'll turn it into a subscription\nthe threading mechanism can understand. Again, as stated in `update`, you cannot\nuse the same port in multiple threading mechanisms and expect them to be isolated.\nEvery port must be unique, and should be treated as shared state in Elm.\n",
            "type": "Platform.Sub.Sub (Threading.Threaded o) -> Platform.Sub.Sub (Threading.Msg i o a)"
          },
          {
            "name": "update",
            "comment": "\nGiven an outgoing port that can accept `Threaded` data, I'll build you a\ntraditional Elm update function, except where the command returned may\neither be another `Msg` for this threading mechanism, or an end-user `a`\nmessage; the type of the message you wish to use this component in.\n\n**Note**: this mechanism allows for multiple asynchronous javascript ports to\nbe issued with this component, but we still expect the threaded component\nto be a singleton in your entire app; if duplicate uses of a `Sub` port\nexist in your Elm app, then **all** instances will be called whenever\nit's called from javascript, thus breaking isolation. Ports should be treated\nas global variables in Elm.\n",
            "type": "(Threading.Threaded i -> Platform.Cmd.Cmd (Threading.Msg i o a)) -> Threading.Msg i o a -> Threading.Model o a -> ( Threading.Model o a , Platform.Cmd.Cmd (Result.Result (Threading.Msg i o a) a) )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "avh4/elm-diff",
    "version": "1.0.7",
    "docs": [
      {
        "name": "Diff",
        "comment": " Functions to compare strings to produce a list of changes.  This is an\nimplementation of the [Hunt-McIlroy](http://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm)\ndiff algorithm.\n\n# Types and Constructors\n@docs Change\n\n# Diffing strings\n@docs diffChars, diffLines\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Change",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "NoChange",
                [
                  "String"
                ]
              ],
              [
                "Changed",
                [
                  "String",
                  "String"
                ]
              ],
              [
                "Added",
                [
                  "String"
                ]
              ],
              [
                "Removed",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "diffChars",
            "comment": " Diffs two strings, comparing character by charater.\n\n    diffChars \"abc\" \"aBcd\"\n      == [ NoChange \"a\", Changed \"b\" \"B\", NoChange \"c\", Added \"d\" ]\n",
            "type": "String -> String -> List Diff.Change"
          },
          {
            "name": "diffLines",
            "comment": " Diffs two strings, comparing line by line.\n\n    original = \"\"\"Brian\n    Sohie\n    Oscar\n    Stella\n    Takis\n    \"\"\"\n\n    changed = \"\"\"BRIAN\n    Stella\n    Frosty\n    Takis\n    \"\"\"\n\n    diffLines original changed\n      == [ Changed \"Brian\\nSohie\\nOscar\\n\" \"BRIAN\\n\"\n          , NoChange \"Stella\\n\"\n          , Added \"Frosty\\n\"\n          , NoChange \"Takis\\n\"\n          ]\n",
            "type": "String -> String -> List Diff.Change"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "avh4/elm-fifo",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Fifo",
        "comment": "\n\n# Creating FIFOs\n@docs Fifo, empty, fromList\n\n# Inserting/Removing\n@docs insert, remove\n\n# To List\n@docs toList\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Fifo",
            "comment": " A FIFO containing items of type `a`.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Creates an empty Fifo.\n\n    Fifo.empty\n        -- == Fifo.fromList []\n\n",
            "type": "Fifo.Fifo a"
          },
          {
            "name": "fromList",
            "comment": " Creates a Fifo from a List.\n\n    Fifo.fromList [3,4,5]\n    |> Fifo.remove\n    |> fst\n        -- == Just 3\n\n",
            "type": "List a -> Fifo.Fifo a"
          },
          {
            "name": "insert",
            "comment": " Inserts an item into a Fifo\n\n    Fifo.empty\n    |> Fifo.insert 7\n    |> Fifo.insert 8\n        -- == Fifo.fromList [7,8]\n\n",
            "type": "a -> Fifo.Fifo a -> Fifo.Fifo a"
          },
          {
            "name": "remove",
            "comment": " Removes the next (oldest) item from a Fifo, returning the item (if any), and the updated Fifo.\n\n    Fifo.fromList [3,7]\n    |> Fifo.remove\n        -- == (Just 3, Fifo.fromList [7])\n\n",
            "type": "Fifo.Fifo a -> ( Maybe.Maybe a, Fifo.Fifo a )"
          },
          {
            "name": "toList",
            "comment": " Converts a Fifo to a List.\n\n    Fifo.empty\n    |> Fifo.insert 7\n    |> Fifo.insert 9\n    |> Fifo.toList\n        -- == [7,9]\n",
            "type": "Fifo.Fifo a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "avh4/elm-spec",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Spec.Runner.Console",
        "comment": " Run a test suite as a command-line script.\n\n# Run\n@docs run\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "run",
            "comment": " Turn the pass/fail status of a `Spec` into a `String`, `Debug.log` that\n    result, and exit.\n",
            "type": "Spec.Spec -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Spec.Assertions",
        "comment": " Assertions for testing assertions.  These functions are used for testing the\n`Spec` package itself.  You probably will not need these unless you are writing\ncustom assertions and want to write unit tests for your assertion functions.\n\n# Asserting failure\n@docs shouldFail, shouldFailWithMessage\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "shouldFail",
            "comment": " Assert that a Spec should fail\n",
            "type": "Spec.Spec -> Spec.Spec"
          },
          {
            "name": "shouldFailWithMessage",
            "comment": " Assert that a Spec should fail with a specific method.\n    TODO Provide implementation for Group specs.\n",
            "type": "String -> Spec.Spec -> Spec.Spec"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Spec",
        "comment": " Functions for writing simple unit tests.\n\n# Defining specs\n@docs describe, it, passes, shouldEqual, shouldEqualString, shouldContain\n\n@docs Spec, Failure\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Failure",
            "comment": " Type representing a failed state and information to diagnose the failure.\n",
            "args": [],
            "cases": [
              [
                "Message",
                [
                  "String"
                ]
              ],
              [
                "Diff",
                [
                  "String",
                  "List Diff.Change"
                ]
              ]
            ]
          },
          {
            "name": "Spec",
            "comment": " Type describing a test case or group of test cases, and more specifically\n    their pass/fail status.\n",
            "args": [],
            "cases": [
              [
                "Group",
                [
                  "String",
                  "List Spec.Spec"
                ]
              ],
              [
                "Pass",
                []
              ],
              [
                "Fail",
                [
                  "Spec.Failure"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "describe",
            "comment": " Designate a group of test cases.\n",
            "type": "String -> List Spec.Spec -> Spec.Spec"
          },
          {
            "name": "it",
            "comment": " Another way to designate a group of test cases; usually used when nesting\n    a subgroup inside a `describe`, to read more idiomatically.\n",
            "type": "String -> List Spec.Spec -> Spec.Spec"
          },
          {
            "name": "passes",
            "comment": " Determine whether a spec or group of specs have passed.\n",
            "type": "Spec.Spec -> Bool"
          },
          {
            "name": "shouldContain",
            "comment": " Asserts that one `String` contains another.\n",
            "type": "String -> String -> Spec.Spec"
          },
          {
            "name": "shouldEqual",
            "comment": " Asserts that two values are equal\n",
            "type": "a -> a -> Spec.Spec"
          },
          {
            "name": "shouldEqualString",
            "comment": " Asserts that two `String` values are equal.\n",
            "type": "String -> String -> Spec.Spec"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "avh4/elm-testable",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Testable.TestContext",
        "comment": " A `TestContext` allows you to manage the lifecycle of an Elm component that\nuses `Testable.Effects`.  Using `TestContext`, you can write tests that exercise\nthe entire lifecycle of your component.\n\n@docs Component, TestContext, startForTest, update\n\n# Inspecting\n@docs currentModel, assertCurrentModel, assertHttpRequest, assertNoPendingHttpRequests\n\n# Simulating Effects\n@docs resolveHttpRequest, advanceTime\n",
        "aliases": [
          {
            "name": "Component",
            "comment": " A component that can be used to create a `TestContext`\n",
            "args": [
              "msg",
              "model"
            ],
            "type": "{ init : ( model, Testable.Cmd.Cmd msg ) , update : msg -> model -> ( model, Testable.Cmd.Cmd msg ) }"
          }
        ],
        "types": [
          {
            "name": "TestContext",
            "comment": " The representation of the current state of a testable component, including\na representaiton of any pending Effects.\n",
            "args": [
              "msg",
              "model"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "advanceTime",
            "comment": " Simulate the passing of time\n",
            "type": "Time.Time -> Testable.TestContext.TestContext msg model -> Testable.TestContext.TestContext msg model"
          },
          {
            "name": "assertCurrentModel",
            "comment": " A convenient way to assert about the current state of the component under test\n",
            "type": "model -> Testable.TestContext.TestContext msg model -> ElmTest.Assertion"
          },
          {
            "name": "assertHttpRequest",
            "comment": " Assert that a given Http.Request has been made by the componet under test\n",
            "type": "Testable.Http.Request -> Testable.TestContext.TestContext msg model -> ElmTest.Assertion"
          },
          {
            "name": "assertNoPendingHttpRequests",
            "comment": " Ensure that there are no pending HTTP requests\n",
            "type": "Testable.TestContext.TestContext msg model -> ElmTest.Assertion"
          },
          {
            "name": "currentModel",
            "comment": " Get the current state of the component under test\n",
            "type": "Testable.TestContext.TestContext msg model -> Result.Result (List String) model"
          },
          {
            "name": "resolveHttpRequest",
            "comment": " Simulate an HTTP response\n",
            "type": "Testable.Http.Request -> Result.Result Testable.Http.RawError Testable.Http.Response -> Testable.TestContext.TestContext msg model -> Testable.TestContext.TestContext msg model"
          },
          {
            "name": "startForTest",
            "comment": " Create a `TestContext` for the given Component\n",
            "type": "Testable.TestContext.Component msg model -> Testable.TestContext.TestContext msg model"
          },
          {
            "name": "update",
            "comment": " Apply an msg to the component in a given TestContext\n",
            "type": "msg -> Testable.TestContext.TestContext msg model -> Testable.TestContext.TestContext msg model"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Testable",
        "comment": "\n\nThis module converts Testable things into real things.\n\n# Basics\n@docs cmd, task\n\n# StartApp helpers\n@docs init, update\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cmd",
            "comment": " Converts a `Testable.Cmd` into a `Cmd`\n\n    Testable.Cmd.none |> Testable.cmd\n        == Cmd.none\n",
            "type": "Testable.Cmd.Cmd msg -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "init",
            "comment": " Converts a testable StartApp-style init value into a standard StartApp init value\n",
            "type": "( model, Testable.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "task",
            "comment": " Converts a `Testable.Task` into an `Task`\n\n    Testable.Task.succeed \"A\" |> Testable.task\n        == Task.succeed \"A\"\n",
            "type": "Testable.Task.Task error success -> Task.Task error success"
          },
          {
            "name": "update",
            "comment": " Converts a testable StartApp-style update function into a standard StartApp update function\n",
            "type": "(msg -> model -> ( model, Testable.Cmd.Cmd msg )) -> msg -> model -> ( model, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Testable.Http",
        "comment": "\n`Testable.Http` is a replacement for the standard `Http` module.  You can use it\nto create components that can be tested with `Testable.TestContext`.\n\n# Helpers\n@docs getRequest, ok, serverError\n\n# Encoding and Decoding\n@docs url\n\n# Fetch Strings and JSON\n@docs getString, get, post, Error\n\n# Body Values\n@docs empty, string\n\n# Arbitrary Requests\n@docs Request\n\n# Responses\n@docs Response, RawError\n",
        "aliases": [
          {
            "name": "Error",
            "comment": " The kinds of errors you typically want in practice. When you get a\nresponse but its status is not in the 200 range, it will trigger a\n`BadResponse`. When you try to decode JSON but something goes wrong,\nyou will get an `UnexpectedPayload`.\n",
            "args": [],
            "type": "Http.Error"
          },
          {
            "name": "RawError",
            "comment": " The things that count as errors at the lowest level. Technically, getting\na response back with status 404 is a &ldquo;successful&rdquo; response in that\nyou actually got all the information you asked for.\n\nThe `fromJson` function and `Error` type provide higher-level errors, but the\npoint of `RawError` is to allow you to define higher-level errors however you\nwant.\n",
            "args": [],
            "type": "Http.RawError"
          },
          {
            "name": "Request",
            "comment": " Fully specify the request you want to send. For example, if you want to\nsend a request between domains (CORS request) you will need to specify some\nheaders manually.\n\n    corsPost : Request\n    corsPost =\n        { verb = \"POST\"\n        , headers =\n            [ (\"Origin\", \"http://elm-lang.org\")\n            , (\"Access-Control-Request-Method\", \"POST\")\n            , (\"Access-Control-Request-Headers\", \"X-Custom-Header\")\n            ]\n        , url = \"http://example.com/hats\"\n        , body = empty\n        }\n",
            "args": [],
            "type": "Http.Request"
          },
          {
            "name": "Response",
            "comment": " All the details of the response. There are many weird facts about\nresponses which include:\n\n  * The `status` may be 0 in the case that you load something from `file://`\n  * You cannot handle redirects yourself, they will all be followed\n    automatically. If you want to know if you have gone through one or more\n    redirect, the `url` field will let you know who sent you the response, so\n    you will know if it does not match the URL you requested.\n  * You are allowed to have duplicate headers, and their values will be\n    combined into a single comma-separated string.\n\nWe have left these underlying facts about `XMLHttpRequest` as is because one\ngoal of this library is to give a low-level enough API that others can build\nwhatever helpful behavior they want on top of it.\n",
            "args": [],
            "type": "Http.Response"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " An empty request body, no value will be sent along.\n",
            "type": "Testable.Http.Body"
          },
          {
            "name": "get",
            "comment": " Send a GET request to the given URL. You also specify how to decode the\nresponse.\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        get (list string) \"http://example.com/hat-categories.json\"\n",
            "type": "Json.Decode.Decoder value -> String -> Testable.Task.Task Testable.Http.Error value"
          },
          {
            "name": "getRequest",
            "comment": " A convenient way to make a `Request` corresponding to the request made by `get`\n",
            "type": "String -> Testable.Http.Request"
          },
          {
            "name": "getString",
            "comment": " Send a GET request to the given URL. You will get the entire response as a\nstring.\n\n    hats : Task Error String\n    hats =\n        getString \"http://example.com/hat-categories.markdown\"\n",
            "type": "String -> Testable.Task.Task Testable.Http.Error String"
          },
          {
            "name": "ok",
            "comment": " A convenient way to create a 200 OK repsonse\n",
            "type": "String -> Result.Result Testable.Http.RawError Testable.Http.Response"
          },
          {
            "name": "post",
            "comment": " Send a POST request to the given URL, carrying the given body. You also\nspecify how to decode the response with [a JSON decoder][json].\n\n[json]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        post (list string) \"http://example.com/hat-categories.json\" empty\n",
            "type": "Json.Decode.Decoder value -> String -> Testable.Http.Body -> Testable.Task.Task Testable.Http.Error value"
          },
          {
            "name": "serverError",
            "comment": " A convenient way to create a response representing a 500 error\n",
            "type": "Result.Result Testable.Http.RawError Testable.Http.Response"
          },
          {
            "name": "string",
            "comment": " Provide a string as the body of the request. Useful if you need to send\nJSON data to a server that does not belong in the URL.\n\n    import Json.Decode as JS\n\n    coolestHats : Task Error (List String)\n    coolestHats =\n        post\n            (JS.list JS.string)\n            \"http://example.com/hats\"\n            (string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "String -> Testable.Http.Body"
          },
          {
            "name": "url",
            "comment": " Create a properly encoded URL with a [query string][qs]. The first argument is\nthe portion of the URL before the query string, which is assumed to be\nproperly encoded already. The second argument is a list of all the\nkey/value pairs needed for the query string. Both the keys and values\nwill be appropriately encoded, so they can contain spaces, ampersands, etc.\n\n[qs]: http://en.wikipedia.org/wiki/Query_string\n\n    url \"http://example.com/users\" [ (\"name\", \"john doe\"), (\"age\", \"30\") ]\n    -- http://example.com/users?name=john+doe&age=30\n",
            "type": "String -> List ( String, String ) -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Testable.Cmd",
        "comment": "\n`Testable.Cmd` is a replacement for the core `Cmd` module.  You can use it\nto create components that can be tested with `Testable.TestContext`.  You can\nconvert `Testable.Cmd` into a core `Cmd` with the `Testable` module.\n\n@docs Cmd, map, batch, none\n",
        "aliases": [
          {
            "name": "Cmd",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "Testable.Internal.Cmd msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "batch",
            "comment": " ",
            "type": "List (Testable.Cmd.Cmd msg) -> Testable.Cmd.Cmd msg"
          },
          {
            "name": "map",
            "comment": " ",
            "type": "(a -> b) -> Testable.Cmd.Cmd a -> Testable.Cmd.Cmd b"
          },
          {
            "name": "none",
            "comment": " ",
            "type": "Testable.Cmd.Cmd never"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Testable.Task",
        "comment": "\n`Testable.Task` is a replacement for the core `Task` module.  You can use it\nto create components that can be tested with `Testable.TestContext`.  You can\nconvert `Testable.Task` into a core `Task` with the `Testable` module.\n\n# Basics\n@docs Task, succeed, fail\n\n# Mapping\n@docs map\n\n# Chaining\n@docs andThen\n\n# Errors\n@docs mapError, toMaybe, toResult\n\n# Threads\n@docs sleep\n\n# Commands\n@docs perform\n",
        "aliases": [
          {
            "name": "Task",
            "comment": " Represents asynchronous effects that may fail. It is useful for stuff like\nHTTP.\nFor example, maybe we have a task with the type (`Task String User`). This means\nthat when we perform the task, it will either fail with a `String` message or\nsucceed with a `User`. So this could represent a task that is asking a server\nfor a certain user.\n",
            "args": [
              "error",
              "success"
            ],
            "type": "Testable.Internal.Task error success"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together a task and a callback. The first task will run, and if it is\nsuccessful, you give the result to the callback resulting in another task. This\ntask then gets run.\n\n    succeed 2 |> andThen (\\n -> succeed (n + 2)) == succeed 4\n\nThis is useful for chaining tasks together. Maybe you need to get a user from\nyour servers *and then* lookup their picture once you know their name.\n",
            "type": "(a -> Testable.Task.Task x b) -> Testable.Task.Task x a -> Testable.Task.Task x b"
          },
          {
            "name": "fail",
            "comment": " A task that fails immediately when run.\n\n    fail \"file not found\" : Task String a\n",
            "type": "x -> Testable.Task.Task x a"
          },
          {
            "name": "map",
            "comment": " Transform a task.\n\n    map sqrt (succeed 9) == succeed 3\n",
            "type": "(a -> b) -> Testable.Task.Task x a -> Testable.Task.Task x b"
          },
          {
            "name": "mapError",
            "comment": " Transform the error value. This can be useful if you need a bunch of error\ntypes to match up.\n\n    type Error = Http Http.Error | WebGL WebGL.Error\n\n    getResources : Task Error Resource\n    getResources =\n        sequence [ mapError Http serverTask, mapError WebGL textureTask ]\n",
            "type": "(x -> y) -> Testable.Task.Task x a -> Testable.Task.Task y a"
          },
          {
            "name": "perform",
            "comment": " Command the runtime system to perform a task. The most important argument\nis the `Task` which describes what you want to happen. But you also need to\nprovide functions to tag the two possible outcomes of the task. It can fail or\nsucceed, but either way, you need to have a message to feed back into your\napplication.\n",
            "type": "(x -> msg) -> (a -> msg) -> Testable.Task.Task x a -> Testable.Internal.Cmd msg"
          },
          {
            "name": "sleep",
            "comment": " Make a thread sleep for a certain amount of time. The following example\nsleeps for 1 second and then succeeds with 42.\n\n    sleep 1000 |> andThen \\_ -> succeed 42\n",
            "type": "Time.Time -> Testable.Task.Task never ()"
          },
          {
            "name": "succeed",
            "comment": " A task that succeeds immediately when run.\n\n    succeed 42    -- results in 42\n",
            "type": "a -> Testable.Task.Task x a"
          },
          {
            "name": "toMaybe",
            "comment": " Helps with handling failure. Instead of having a task fail with some value\nof type `x` it promotes the failure to a `Nothing` and turns all successes into\n`Just` something.\n\n    toMaybe (fail \"file not found\") == succeed Nothing\n    toMaybe (succeed 42)            == succeed (Just 42)\n\nThis means you can handle the error with the `Maybe` module instead.\n",
            "type": "Testable.Task.Task x a -> Testable.Task.Task never (Maybe.Maybe a)"
          },
          {
            "name": "toResult",
            "comment": " Helps with handling failure. Instead of having a task fail with some value\nof type `x` it promotes the failure to an `Err` and turns all successes into\n`Ok` something.\n\n    toResult (fail \"file not found\") == succeed (Err \"file not found\")\n    toResult (succeed 42)            == succeed (Ok 42)\n\nThis means you can handle the error with the `Result` module instead.\n",
            "type": "Testable.Task.Task x a -> Testable.Task.Task never (Result.Result x a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "avh4/elm-transducers",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Transducer.Debug",
        "comment": " This module provides support for debugging transducers.\n\n# Logging\n@docs debug\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "debug",
            "comment": " Wrap an existing transducer such that input and output of the transducer\nwill be logged with `Debug.log`.\n\n    filter' pred = debug \"filter\" (filter pred)\n    main = show (transduceList (filter' ((/=) 2)) [1, 2, 3])\n    -- Console output:\n    --     filter: input: 3\n    --     filter: state: ()\n    --     filter -> : 3\n    --     filter: input: 2\n    --     filter: state: ()\n    --     filter: input: 1\n    --     filter: state: ()\n    --     filter -> : 1\n    --     filter: complete: ()\n",
            "type": "String -> Transducer.Transducer a b r s -> Transducer.Transducer a b r s"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Transducer",
        "comment": " A transducer is a composable way of processing a series of values.\nMany basic transducers correspond to functions you may be familiar with for\nprocessing `List`s.\n\n    import Maybe\n    import String\n    import Transducer exposing (..)\n\n    parseValidInts =\n        map String.toInt\n        >>> map toMaybe\n        >>> filter ((/=) Nothing)\n        >>> map (Maybe.withDefault 0)\n\n    exampleList : List Int\n    exampleList = transduceList parseValidInts [\"123\", \"-34\", \"35.0\", \"SDF\", \"7\"]\n\n# Definitions\n@docs Reducer, Transducer, Fold\n\n# Common transducers\n@docs map, filter, take, drop\n\n# More transducers\n@docs concatMap, dedupe, partition\n\n# Composing transducers\n@docs (>>>), comp\n\n# Applying transducers\n@docs transduce, transduceList, transduceSet, transduceArray\n",
        "aliases": [
          {
            "name": "Fold",
            "comment": " A fold is function that takes a Reducer, an initial value, and input source,\nand returns a final value.\n",
            "args": [
              "input",
              "result",
              "source"
            ],
            "type": "Transducer.Reducer input result -> result -> source -> result"
          },
          {
            "name": "Reducer",
            "comment": " A reducer is a function taking an input and a value and produces a new value.\n\n    List.foldl : Reducer a b -> b -> List a -> b\n",
            "args": [
              "input",
              "result"
            ],
            "type": "input -> result -> result"
          },
          {
            "name": "Transducer",
            "comment": " A transducer an `init` value for it's internal state, a `step` function that\ntransforms a Reducer into a Reducer of a new type, and a `complete` function that\ntransforms a Reducer into a function collapsing the internal state.\n\nWhen defining transducers, the type parameter `r` should be left free.\n",
            "args": [
              "a",
              "b",
              "r",
              "state"
            ],
            "type": "{ init : Transducer.Reducer b r -> r -> ( state, r ) , step : Transducer.Reducer b r -> Transducer.Reducer a ( state, r ) , complete : Transducer.Reducer b r -> ( state, r ) -> r }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ">>>",
            "comment": " Transducer composition\n",
            "type": "Transducer.Transducer a b ( s2, r ) s1 -> Transducer.Transducer b c r s2 -> Transducer.Transducer a c r ( s1, s2 )"
          },
          {
            "name": "comp",
            "comment": " An alias for (>>>).\n",
            "type": "Transducer.Transducer a b ( s2, r ) s1 -> Transducer.Transducer b c r s2 -> Transducer.Transducer a c r ( s1, s2 )"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a list and flatten the results.\n\n    transduceList (concatMap (\\x -> [x,x+10])) [1,2] == [1,10,2,20]\n",
            "type": "(a -> List b) -> Transducer.Transducer a b r ()"
          },
          {
            "name": "dedupe",
            "comment": " Drop values that repeat the previous value.\n\n    transduceList dedupe [1,1,2,2,1] == [1,2,1]\n",
            "type": "Transducer.Transducer a a r (Maybe.Maybe a)"
          },
          {
            "name": "drop",
            "comment": " Drop the first *n* values.\n\n    transduceList (drop 2) [1,2,3,4] == [3,4]\n",
            "type": "Int -> Transducer.Transducer a a r Int"
          },
          {
            "name": "filter",
            "comment": " Keep only values that satisfy the predicate.\n\n    transduceList (filter isEven) [1..6] == [2,4,6]\n",
            "type": "(a -> Bool) -> Transducer.Transducer a a r ()"
          },
          {
            "name": "map",
            "comment": " Apply a function to every value.\n\n    transduceList (map sqrt) [1,4,9] == [1,2,3]\n",
            "type": "(a -> b) -> Transducer.Transducer a b r ()"
          },
          {
            "name": "partition",
            "comment": " Group a series of values into Lists of size n.\n\n    transduceList (partition 2) [1,2,3,4,5] == [[1,2],[3,4],[5]]\n",
            "type": "Int -> Transducer.Transducer a (List a) r ( Int, List a )"
          },
          {
            "name": "take",
            "comment": " Take the first *n* values.\n\n    transduceList (take 2) [1,2,3,4] == [1,2]\n",
            "type": "Int -> Transducer.Transducer a a r Int"
          },
          {
            "name": "transduce",
            "comment": " Apply a transducer.\n",
            "type": "Transducer.Fold a ( s, r ) x -> Transducer.Reducer b r -> r -> Transducer.Transducer a b r s -> x -> r"
          },
          {
            "name": "transduceArray",
            "comment": " Apply a Transducer to an Array, producing an Array.\n\n    transduceArray t xs = transduce Array.foldl Array.push Array.empty t xs\n",
            "type": "Transducer.Transducer a b (Array.Array b) s -> Array.Array a -> Array.Array b"
          },
          {
            "name": "transduceList",
            "comment": " Apply a Transducer to a List, producing a List.\n\n    transduceList t xs == transduce List.foldr (::) [] t xs\n",
            "type": "Transducer.Transducer a b (List b) s -> List a -> List b"
          },
          {
            "name": "transduceSet",
            "comment": " Apply a Transducer to a Set, producing a Set.\n\n    transduceSet t xs = transduce Set.foldr Set.insert Set.empty t xs\n",
            "type": "Transducer.Transducer comparable comparable' (Set.Set comparable'') s -> Set.Set comparable -> Set.Set comparable''"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "bardt/elm-rosetree",
    "version": "1.0.1",
    "docs": [
      {
        "name": "RoseTree",
        "comment": " RoseTree implementation in Elm using Lazy Lists.\n\n# Definition\n@docs RoseTree\n\n# Constructors\n@docs singleton\n\n# Query a rosetree\n@docs root, children, hasChildren\n\n# Common operations\n@docs addChild\n\n# Map-reduce et al.\n@docs map, map2, andMap, map3, map4, map5, zip, zip3, zip4, zip5, flatten, flatMap, andThen, reduce, sum, product\n\n",
        "aliases": [],
        "types": [
          {
            "name": "RoseTree",
            "comment": " RoseTree type.\nA rosetree is a tree with a root whose children are themselves\nrosetrees.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Rose",
                [
                  "a",
                  "Lazy.List.LazyList (RoseTree.RoseTree a)"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "addChild",
            "comment": " Add a child to the rosetree.\n",
            "type": "RoseTree.RoseTree a -> RoseTree.RoseTree a -> RoseTree.RoseTree a"
          },
          {
            "name": "andMap",
            "comment": " Chain mapping operations.\n",
            "type": "RoseTree.RoseTree (a -> b) -> RoseTree.RoseTree a -> RoseTree.RoseTree b"
          },
          {
            "name": "andThen",
            "comment": " ",
            "type": "RoseTree.RoseTree a -> (a -> RoseTree.RoseTree b) -> RoseTree.RoseTree b"
          },
          {
            "name": "children",
            "comment": " Get the children of a rosetree\n",
            "type": "RoseTree.RoseTree a -> Lazy.List.LazyList (RoseTree.RoseTree a)"
          },
          {
            "name": "flatMap",
            "comment": " ",
            "type": "(a -> RoseTree.RoseTree b) -> RoseTree.RoseTree a -> RoseTree.RoseTree b"
          },
          {
            "name": "flatten",
            "comment": " Flatten a rosetree of rosetrees.\n",
            "type": "RoseTree.RoseTree (RoseTree.RoseTree a) -> RoseTree.RoseTree a"
          },
          {
            "name": "hasChildren",
            "comment": " Does the tree have children?\n",
            "type": "RoseTree.RoseTree a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function over a rosetree\n",
            "type": "(a -> b) -> RoseTree.RoseTree a -> RoseTree.RoseTree b"
          },
          {
            "name": "map2",
            "comment": " ",
            "type": "(a -> b -> c) -> RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> d) -> RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c -> RoseTree.RoseTree d"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e) -> RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c -> RoseTree.RoseTree d -> RoseTree.RoseTree e"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f) -> RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c -> RoseTree.RoseTree d -> RoseTree.RoseTree e -> RoseTree.RoseTree f"
          },
          {
            "name": "product",
            "comment": " ",
            "type": "RoseTree.RoseTree number -> number"
          },
          {
            "name": "reduce",
            "comment": " ",
            "type": "(a -> b -> b) -> b -> RoseTree.RoseTree a -> b"
          },
          {
            "name": "root",
            "comment": " Get the root of a rosetree\n",
            "type": "RoseTree.RoseTree a -> a"
          },
          {
            "name": "singleton",
            "comment": " Make a singleton rosetree\n",
            "type": "a -> RoseTree.RoseTree a"
          },
          {
            "name": "sum",
            "comment": " ",
            "type": "RoseTree.RoseTree number -> number"
          },
          {
            "name": "zip",
            "comment": " ",
            "type": "RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " ",
            "type": "RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c -> RoseTree.RoseTree ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " ",
            "type": "RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c -> RoseTree.RoseTree d -> RoseTree.RoseTree ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " ",
            "type": "RoseTree.RoseTree a -> RoseTree.RoseTree b -> RoseTree.RoseTree c -> RoseTree.RoseTree d -> RoseTree.RoseTree e -> RoseTree.RoseTree ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "bartavelle/json-helpers",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Json.Helpers",
        "comment": " This module exposes helper functions for encoding sum types and maps. It was designed\nwith an eye for compatibility with the `aeson` library from the Haskell world, which explains\nwhy the various functions have such peculiar names.\n\nIf you require Haskell interop, please take a look at the [elm-bridge](https://hackage.haskell.org/package/elm-bridge) package that\nwill make it easy to derive the Elm code alongside the Haskell one.\n\n# The ObjectEncoding type\n@docs ObjectEncoding, encodeObject, encodeValue\n\n# Encoding schemes\n\nThe following Elm type will be used as an example for the different encoding schemes.\n\n    type Foo = Bar Int\n             | Baz { a: Int , b: Int }\n             | Qux Int Int\n\n## ObjectWithSingleField\n\n    -- {\"Bar\":5}\n    -- {\"Baz\":{\"a\":4,\"b\":8}}\n    -- {\"Qux\":[98,42]}\n\n@docs decodeSumObjectWithSingleField, encodeSumObjectWithSingleField\n\n## TwoElemArray\n\n    -- [\"Bar\",5]\n    -- [\"Baz\",{\"a\":4,\"b\":8}]\n    -- [\"Qux\",[98,42]]\n\n@docs decodeSumTwoElemArray, encodeSumTwoElementArray\n\n## TaggedObject\n\n    -- {\"tag\":\"Bar\",\"content\":5}\n    -- {\"tag\":\"Baz\",\"a\":4,\"b\":8}\n    -- [\"tag\":\"Qux\",\"content\":[98,42]}\n\n@docs decodeSumTaggedObject, encodeSumTaggedObject\n\n## Unary sum types\n\n@docs decodeSumUnaries\n\n# Containers helpers\n\n@docs decodeMap, encodeMap, jsonEncDict, jsonDecDict, encodeSet, decodeSet, maybeEncode\n\n",
        "aliases": [],
        "types": [
          {
            "name": "ObjectEncoding",
            "comment": " This is an opaque type that is to be used to give hints when using the `TaggedObject` encoding. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "decodeMap",
            "comment": " Helper function for decoding map-like objects. It takes a decoder for the key type and a decoder for the value type. ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "decodeSet",
            "comment": " A helper for set decoding ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder (Set.Set comparable)"
          },
          {
            "name": "decodeSumObjectWithSingleField",
            "comment": " Decode objects encoded using the `ObjectWithSingleField` scheme.\nThe first argument is the human readable name of the type of data, and will be used in error messages.\nThe second argument is a `Dict` where the keys are the tags of each constructor of the sum type and the values\nare decoders for each case.\n",
            "type": "String -> Dict.Dict String (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "decodeSumTaggedObject",
            "comment": " Decode objects encoded using the `TaggedObject` scheme.\nThe first argument is the human readable name of the type of data, and will be used in error messages.\nThe second argument is a `Dict` where the keys are the tags of each constructor of the sum type and the values\nare decoders for each case.\n\nCompared to the other functions, it expects a set of `String`s. This sets lists all the constructor tags that have an object content,\nsuch as the `Baz` constructor in the example.\n",
            "type": "String -> String -> String -> Dict.Dict String (Json.Decode.Decoder a) -> Set.Set String -> Json.Decode.Decoder a"
          },
          {
            "name": "decodeSumTwoElemArray",
            "comment": " Decode objects encoded using the `TwoElemArray` scheme.\nThe first argument is the human readable name of the type of data, and will be used in error messages.\nThe second argument is a `Dict` where the keys are the tags of each constructor of the sum type and the values\nare decoders for each case.\n",
            "type": "String -> Dict.Dict String (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "decodeSumUnaries",
            "comment": " Helper for decoding enum-like sum types ",
            "type": "String -> Dict.Dict String a -> Json.Decode.Decoder a"
          },
          {
            "name": "encodeMap",
            "comment": " Helper function for encoding map-like objects. It takes an encoder for the key type and an encoder for the value type ",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "encodeObject",
            "comment": " Creates an `ObjectEncoding`, just like the `Json.Encode.object` function. ",
            "type": "List ( String, Json.Decode.Value ) -> Json.Helpers.ObjectEncoding"
          },
          {
            "name": "encodeSet",
            "comment": " A helper for set encoding ",
            "type": "(comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value"
          },
          {
            "name": "encodeSumObjectWithSingleField",
            "comment": " Encode objects using the `WithSingleField` scheme.\nThe first argument is a function that, for each possible value `a`, must return a `String` tag\ndescribing it along with an `ObjectEncoding`.\n",
            "type": "(a -> ( String, Json.Helpers.ObjectEncoding )) -> a -> Json.Decode.Value"
          },
          {
            "name": "encodeSumTaggedObject",
            "comment": " Encode objects using the `TaggedObject` scheme.\nThe first argument is a function that, for each possible value `a`, must return a `String` tag\ndescribing it along with an `ObjectEncoding`.\n",
            "type": "String -> String -> (a -> ( String, Json.Helpers.ObjectEncoding )) -> a -> Json.Decode.Value"
          },
          {
            "name": "encodeSumTwoElementArray",
            "comment": " Encode objects using the `TwoElementArray` scheme.\nThe first argument is a function that, for each possible value `a`, must return a `String` tag\ndescribing it along with an `ObjectEncoding`.\n",
            "type": "(a -> ( String, Json.Helpers.ObjectEncoding )) -> a -> Json.Decode.Value"
          },
          {
            "name": "encodeValue",
            "comment": " Creates an `ObjectEncoding` from any type of `Value`. You should not use this for `Value`s that are actually objects. ",
            "type": "Json.Decode.Value -> Json.Helpers.ObjectEncoding"
          },
          {
            "name": "jsonDecDict",
            "comment": " An alias to `decodeMap` that is compatible with the naming convention from `elm-bridge` ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "jsonEncDict",
            "comment": " An alias to `encodeMap` that is compatible with the naming convention from `elm-bridge` ",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "maybeEncode",
            "comment": " Encodes an optional value, using `null` when there is `Nothing` ",
            "type": "(a -> Json.Decode.Value) -> Maybe.Maybe a -> Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "benansell/elm-geometric-transformation",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Transformer2D",
        "comment": " A library for manipulating points by applying geometric transformations\nusing homogeneous coordinates which can be useful in\n[`2D computer graphics`](https://en.wikipedia.org/wiki/2D_computer_graphics)\n\nMore complicated transforms can be created by using combine - as illustrated\nin the [elm-webpack-seed](https://github.com/benansell/elm-webpack-seed) project.\n\n# Working with Points\n@docs Point, toPoint, fromPoint\n\n# Creating Transformations\n@docs Transformation, identity, rotate, scale, scaleUniform, shear, translate\n\n# Applying and Combining Transformations\n@docs apply, combine\n\n# Misc\n@docs RotateDirection, ShearDirection\n\n\n",
        "aliases": [
          {
            "name": "Point",
            "comment": " Representation of a 2D point by its position\n",
            "args": [],
            "type": "{ x : Float, y : Float }"
          },
          {
            "name": "Transformation",
            "comment": " Representation of the 2D matrix used to transform points (x,y) in the view\nplane:\n\n    | x' |   | a  b  tx |   | x |\n    | y' | = | c  d  ty | * | y |\n    | 1  |   | 0  0  1  |   | 1 |\n\n",
            "args": [],
            "type": "{ a : Float , b : Float , c : Float , d : Float , tx : Float , ty : Float }"
          }
        ],
        "types": [
          {
            "name": "RotateDirection",
            "comment": " Direction of rotation\n",
            "args": [],
            "cases": [
              [
                "AntiClockwise",
                []
              ],
              [
                "Clockwise",
                []
              ]
            ]
          },
          {
            "name": "ShearDirection",
            "comment": " Direction of shearing\n",
            "args": [],
            "cases": [
              [
                "Horizontal",
                []
              ],
              [
                "Vertical",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "apply",
            "comment": " Apply the transformation to a point.\n",
            "type": "Transformer2D.Transformation -> Transformer2D.Point -> Transformer2D.Point"
          },
          {
            "name": "combine",
            "comment": " Combine ([compose](https://en.wikipedia.org/wiki/Transformation_matrix#Composing_and_inverting_transformations)) two transformations:\n\n    complexShapeMovement : ( Float, Float ) -> Float -> List Point -> List Point\n    complexShapeMovement offset angle points =\n        let\n            transform =\n                combine (translate offset) (rotate Clockwise angle)\n                    |> apply\n        in\n            List.map transform points\n\n",
            "type": "Transformer2D.Transformation -> Transformer2D.Transformation -> Transformer2D.Transformation"
          },
          {
            "name": "fromPoint",
            "comment": " Converts a point to a x,y coordinate tuple\n",
            "type": "Transformer2D.Point -> ( Float, Float )"
          },
          {
            "name": "identity",
            "comment": " Creates an identity transformation for the point. This is\noften used to create an initial transform that creates a local origin for a set\nof points that allows them to be transformed relative to the local origin.\n",
            "type": "Transformer2D.Point -> Transformer2D.Transformation"
          },
          {
            "name": "rotate",
            "comment": " Creates a transformation that will rotate each point around the origin\nby the specified direction and angle:\n\n    rotateShape : Float -> List Point -> List Point\n    rotateShape angle points =\n        let\n            transform =\n                rotate Clockwise angle\n                    |> apply\n        in\n            List.map transform points\n\n",
            "type": "Transformer2D.RotateDirection -> Float -> Transformer2D.Transformation"
          },
          {
            "name": "scale",
            "comment": " Creates a transformation that will scale each point x value by the width and\ny value by the height relative to the origin:\n\n    scaleShape : Float -> Float -> List Point -> List Point\n    scaleShape width height points =\n        let\n            transform =\n                scale width height\n                    |> apply\n        in\n            List.map transform points\n\n",
            "type": "Float -> Float -> Transformer2D.Transformation"
          },
          {
            "name": "scaleUniform",
            "comment": " Creates a transformation that will scale each point by a factor k relative\nto the origin\n",
            "type": "Float -> Transformer2D.Transformation"
          },
          {
            "name": "shear",
            "comment": " Creates a transformation that will shear each point in the given direction\nby a factor of k relative to the origin\n",
            "type": "Transformer2D.ShearDirection -> Float -> Transformer2D.Transformation"
          },
          {
            "name": "toPoint",
            "comment": " Converts a tuple of x,y coordinate values to a point\n",
            "type": "( Float, Float ) -> Transformer2D.Point"
          },
          {
            "name": "translate",
            "comment": " Creates a transformation that will move each point\nby the tx ty offset amounts\n",
            "type": "( Float, Float ) -> Transformer2D.Transformation"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "benthepoet/elm-purecss",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Pure",
        "comment": " A set of helpers for Pure CSS\n\n@docs button, buttonActive, buttonDisabled, buttonPrimary\n    , checkbox, controlGroup, form, formAligned, formStacked\n    , grid, group, img, input, inputRounded, menu, menuAllowHover\n    , menuChildren, menuDisabled, menuHasChildren, menuHeading\n    , menuHorizontal, menuItem, menuLink, menuList, menuSelected\n    , menuScrollable, radio, table, tableBordered, tableStriped\n    , unit\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "button",
            "comment": "",
            "type": "String"
          },
          {
            "name": "buttonActive",
            "comment": "",
            "type": "String"
          },
          {
            "name": "buttonDisabled",
            "comment": "",
            "type": "String"
          },
          {
            "name": "buttonPrimary",
            "comment": "",
            "type": "String"
          },
          {
            "name": "checkbox",
            "comment": "",
            "type": "String"
          },
          {
            "name": "controlGroup",
            "comment": "",
            "type": "String"
          },
          {
            "name": "form",
            "comment": "",
            "type": "String"
          },
          {
            "name": "formAligned",
            "comment": "",
            "type": "String"
          },
          {
            "name": "formStacked",
            "comment": "",
            "type": "String"
          },
          {
            "name": "grid",
            "comment": "",
            "type": "String"
          },
          {
            "name": "group",
            "comment": "",
            "type": "String"
          },
          {
            "name": "img",
            "comment": "",
            "type": "String"
          },
          {
            "name": "input",
            "comment": "",
            "type": "List String -> String"
          },
          {
            "name": "inputRounded",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menu",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuAllowHover",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuChildren",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuDisabled",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuHasChildren",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuHeading",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuHorizontal",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuItem",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuLink",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuList",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuScrollable",
            "comment": "",
            "type": "String"
          },
          {
            "name": "menuSelected",
            "comment": "",
            "type": "String"
          },
          {
            "name": "radio",
            "comment": "",
            "type": "String"
          },
          {
            "name": "table",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tableBordered",
            "comment": "",
            "type": "String"
          },
          {
            "name": "tableStriped",
            "comment": "",
            "type": "String"
          },
          {
            "name": "unit",
            "comment": "",
            "type": "List String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "besuikerd/elm-dictset",
    "version": "1.0.0",
    "docs": [
      {
        "name": "IntIdSet",
        "comment": " Specilization functions for IdSets containing integers as their id.\n\n@docs IntIdSet\n@docs intGenerator\n@docs empty\n",
        "aliases": [
          {
            "name": "IntIdSet",
            "comment": " IdGenerator for intgers.\n",
            "args": [
              "item"
            ],
            "type": "IdSet.IdSet Int Int item"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " Creates an empty set with intGenerator as its IdGenerator and initial seed 0\n",
            "type": "IntIdSet.IntIdSet item"
          },
          {
            "name": "intGenerator",
            "comment": " IdGenerator for integers that simply increments the seed by 1.\n",
            "type": "IdSet.IdGenerator Int Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "DictSet",
        "comment": "  A Set that contains ordinal values, backed by a Dict. The ordinal value of\nitems in a DictSet are specified by the ord method that is given whenever a\nDictSet is constructed.\n\n# Dictionaries\n\n@docs DictSet\n@docs Ord\n\n# Build\n\n@docs empty\n@docs singleton\n@docs insert\n@docs update\n@docs remove\n\n# Query\n\n@docs isEmpty\n@docs member\n@docs get\n@docs size\n\n# Lists\n\n@docs keys\n@docs values\n@docs toList\n@docs fromList\n\n# Transform\n\n@docs map\n@docs foldl\n@docs foldr\n@docs filter\n@docs partition\n\n# Combine\n\n@docs union\n@docs intersect\n@docs diff\n@docs merge\n\n# Helpers\n\n@docs ord\n@docs dict\n\n",
        "aliases": [
          {
            "name": "Ord",
            "comment": " Ordinal function to define the order of DictSet entries.\n",
            "args": [
              "k",
              "v"
            ],
            "type": "v -> k"
          }
        ],
        "types": [
          {
            "name": "DictSet",
            "comment": " A set of ordered values ordered by an ordinal function\n",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "dict",
            "comment": " Converts a `Dictset` to a `Dict`\n",
            "type": "DictSet.DictSet k v -> Dict.Dict k v"
          },
          {
            "name": "diff",
            "comment": " Creates a set that contains all items that are contained in the first set,\nbut not in the second set.\n",
            "type": "DictSet.DictSet comparable v -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "empty",
            "comment": " Creates an empty DictSet using the specified ordinal function.\n",
            "type": "DictSet.Ord k v -> DictSet.DictSet k v"
          },
          {
            "name": "filter",
            "comment": " Filter elements from the set that do not satisfy the predicate.\n",
            "type": "(v -> Bool) -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over all values in the set, in order from lowest key to highest key.\n",
            "type": "(b -> v -> b) -> b -> DictSet.DictSet comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over all values in the set, in order from highest key to lowest key.\n",
            "type": "(v -> b -> b) -> b -> DictSet.DictSet comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of items to a `DictSet` with the given ordering.\n",
            "type": "DictSet.Ord comparable v -> List v -> DictSet.DictSet comparable v"
          },
          {
            "name": "get",
            "comment": " Get the value from the set if it exists. Does not guarantee that the items\nare the same, it only retrieves an item with a matching ordinal value if it\nexists.\n",
            "type": "comparable -> DictSet.DictSet comparable v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Inserts an item into the set.\n",
            "type": "v -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "intersect",
            "comment": " Creates a set that contains items that are contained in both sets.\n",
            "type": "DictSet.DictSet comparable v -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if the set is empty.\n",
            "type": "DictSet.DictSet k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get a list of keys (the ordinal values) of items in the set, ordered from\nlowest to highest.\n",
            "type": "DictSet.DictSet comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in the set.\n",
            "type": "(v -> v) -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "member",
            "comment": " Determine if an item is a member of the set.\n",
            "type": "v -> DictSet.DictSet comparable v -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two sets. You provide three\naccumulators for when a given key appears:\n\n  1. Only in the left set.\n  2. In both sets.\n  3. Only in the right set.\n\nYou then traverse all the items from lowest ordinal value to highest ordinal\nvalue, building up whatever you want.\n",
            "type": "(a -> result -> result) -> (a -> a -> result -> result) -> (a -> result -> result) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> result -> result"
          },
          {
            "name": "ord",
            "comment": " Obtains the function the set uses to calculate ordinal values for its items\n",
            "type": "DictSet.DictSet k v -> DictSet.Ord k v"
          },
          {
            "name": "partition",
            "comment": " Partition a set according to a predicate. The first set contains all\nitems which satisfy the predicate and the second contains the rest.\n",
            "type": "(v -> Bool) -> DictSet.DictSet comparable v -> ( DictSet.DictSet comparable v, DictSet.DictSet comparable v )"
          },
          {
            "name": "remove",
            "comment": " Removes an item from the set if it exists.\n",
            "type": "v -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "singleton",
            "comment": " Creates a singleton set - using the specified ordinal function.\n",
            "type": "DictSet.Ord comparable v -> v -> DictSet.DictSet comparable v"
          },
          {
            "name": "size",
            "comment": " Determines the number of items in a set\n",
            "type": "DictSet.DictSet k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into an association list of key-value pairs, sorted by their\nordinal values.\n",
            "type": "DictSet.DictSet comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two sets. If there is a collision, preference is given to the first\nset.\n",
            "type": "DictSet.DictSet comparable v -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "update",
            "comment": " Replaces an item identified with the same ordinal value to the given new value\n",
            "type": "v -> (Maybe.Maybe v -> Maybe.Maybe v) -> DictSet.DictSet comparable v -> DictSet.DictSet comparable v"
          },
          {
            "name": "values",
            "comment": " Get a list of values of items in the set, ordered from lowest to highest.\n",
            "type": "DictSet.DictSet comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "IdSet",
        "comment": "  A Set with a built in id generator. These ids are used as keys for the Dict\n\n# Dictionaries\n\n@docs IdSet\n@docs IdGenerator\n\n# Build\n\n@docs empty\n@docs singleton\n@docs insert\n@docs insertWithId\n@docs update\n@docs remove\n\n# Query\n\n@docs isEmpty\n@docs member\n@docs get\n@docs size\n\n# Lists\n\n@docs keys\n@docs values\n@docs toList\n@docs fromList\n\n# Transform\n\n@docs map\n@docs mapWithId\n@docs foldl\n@docs foldlWithId\n@docs foldr\n@docs foldrWithId\n@docs filter\n@docs filterWithId\n@docs partition\n@docs partitionWithId\n\n# Combine\n\n@docs union\n@docs intersect\n@docs diff\n@docs merge\n\n# Helpers\n\n@docs dict\n",
        "aliases": [
          {
            "name": "IdGenerator",
            "comment": " A method to generate new ids\n",
            "args": [
              "seed",
              "id"
            ],
            "type": "seed -> ( id, seed )"
          }
        ],
        "types": [
          {
            "name": "IdSet",
            "comment": " A set of items with a built in id generator\n",
            "args": [
              "seed",
              "id",
              "item"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "dict",
            "comment": " Converts a `Dictset` to a `Dict`\n",
            "type": "IdSet.IdSet seed id item -> Dict.Dict id item"
          },
          {
            "name": "diff",
            "comment": " Creates a set that contains all items that are contained in the first set,\nbut not in the second set.\n",
            "type": "IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item -> Dict.Dict comparable item"
          },
          {
            "name": "empty",
            "comment": " Creates an empty set initialized with the given IdGenerator and initial seed\n",
            "type": "IdSet.IdGenerator seed id -> seed -> IdSet.IdSet seed id item"
          },
          {
            "name": "filter",
            "comment": " Filter elements from the set that do not satisfy the predicate.\n",
            "type": "(item -> Bool) -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "filterWithId",
            "comment": " Filter elements from the set that do not satisfy the predicate. The id of\neach item is added as extra input.\n",
            "type": "(comparable -> item -> Bool) -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "foldl",
            "comment": " Fold over all values in the set, in order from lowest key to highest key.\n",
            "type": "(item -> b -> b) -> b -> IdSet.IdSet seed comparable item -> b"
          },
          {
            "name": "foldlWithId",
            "comment": " Fold over all values in the set, with the id of each item as extra input,\nin order from lowest key to highest key.\n",
            "type": "(comparable -> item -> b -> b) -> b -> IdSet.IdSet seed comparable item -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over all values in the set, in order from highest key to lowest key.\n",
            "type": "(item -> b -> b) -> b -> IdSet.IdSet seed comparable item -> b"
          },
          {
            "name": "foldrWithId",
            "comment": " Fold over all values in the set, with the id of each item as extra input,\nin order from highest key to lowest key.\n",
            "type": "(comparable -> item -> b -> b) -> b -> IdSet.IdSet seed comparable item -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of items into a set using the given IdGenerator and initial\nseed\n",
            "type": "IdSet.IdGenerator seed comparable -> seed -> List item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "get",
            "comment": " Get the item associated with the id. If the item is not in the set, it\nreturns Nothing.\n",
            "type": "comparable -> IdSet.IdSet seed comparable item -> Maybe.Maybe item"
          },
          {
            "name": "insert",
            "comment": " Inserts an item into the set\n",
            "type": "item -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "insertWithId",
            "comment": " Inserts an item into the set. The id that will be used as a key for the\nitem is added as extra input\n",
            "type": "(comparable -> item) -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "intersect",
            "comment": " Creates a set that contains items that are contained in both sets. Note that\n this function does not return an IdSet, since the IdGenerator cannot be split\n in two.\n",
            "type": "IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item -> Dict.Dict comparable item"
          },
          {
            "name": "isEmpty",
            "comment": " Determines if the set is empty\n",
            "type": "IdSet.IdSet seed id item -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get a list of keys (the ordinal values) of items in the set, ordered from\nlowest to highest.\n",
            "type": "IdSet.IdSet seed comparable item -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in the set.\n",
            "type": "(item -> item) -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "mapWithId",
            "comment": " Apply a function to all values in the set, with the id of each item as extra\ninput\n",
            "type": "(comparable -> item -> item) -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "member",
            "comment": " Determines if an id is in the set\n",
            "type": "comparable -> IdSet.IdSet seed comparable item -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two sets. You provide three accumulators\nfor when a given key appears:\n\n  1. Only in the left set.\n  2. In both set.\n  3. Only in the right set.\nYou then traverse all the keys from lowest to highest, building up whatever you\nwant.\n",
            "type": "(a -> result -> result) -> (a -> b -> result -> result) -> (b -> result -> result) -> IdSet.IdSet seed comparable a -> IdSet.IdSet seed comparable b -> result -> result"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest. Note that this function does not return an IdSet, since the\nIdGenerator cannot be split in two.\n",
            "type": "(item -> Bool) -> IdSet.IdSet seed comparable item -> ( Dict.Dict comparable item, Dict.Dict comparable item )"
          },
          {
            "name": "partitionWithId",
            "comment": " Partition a dictionary according to a predicate, with the id of each item as extra input.\nThe first dictionary contains all key-value pairs which satisfy the predicate,\nand the second contains the rest. Note that this function does not return\nIdSets, since the IdGenerator cannot be split in two.\n",
            "type": "(comparable -> item -> Bool) -> IdSet.IdSet seed comparable item -> ( Dict.Dict comparable item, Dict.Dict comparable item )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from the set with the given id. If there is no entry with\nsuch an id, no changes are made\n",
            "type": "comparable -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "singleton",
            "comment": " Creates a singleton set using the given IdGenerator and initial seed\n",
            "type": "IdSet.IdGenerator seed comparable -> seed -> item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "size",
            "comment": " Determines the number of items in a set\n",
            "type": "IdSet.IdSet seed comparable item -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into an association list of key-value pairs, sorted by their\nordinal values.\n",
            "type": "IdSet.IdSet seed comparable item -> List ( comparable, item )"
          },
          {
            "name": "union",
            "comment": " Combine two sets. If there is a collision, preference is given to the first\nset. Note that this function does not return an IdSet, since the IdGenerator\ncannot be split in two.\n",
            "type": "IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item -> Dict.Dict comparable item"
          },
          {
            "name": "update",
            "comment": " Update the value of an item with the given index ",
            "type": "comparable -> (Maybe.Maybe item -> Maybe.Maybe item) -> IdSet.IdSet seed comparable item -> IdSet.IdSet seed comparable item"
          },
          {
            "name": "values",
            "comment": " Get a list of values of items in the set, ordered from lowest to highest.\n",
            "type": "IdSet.IdSet seed comparable item -> List item"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "cacay/elm-void",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Void",
        "comment": " This library provides the `Void` type which has no values. This could be\nuseful when you have a simple component that does not have to send messages\nfor example.\n\n# Definition\n@docs Void\n@docs absurd\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Void",
            "comment": " The empty type with no values. |",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "absurd",
            "comment": " Since we can never construct a value of `Void` type, we can immediately\nrefute the argument and return any result we want.\n|",
            "type": "Void.Void -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "camjc/elm-chart",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Chart",
        "comment": " An SVG chart library.\n\n# Pie\n@docs pie\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "pie",
            "comment": " Draws a pie chart of given diameter of the dataset.\n\n    Chart.pie 300 [{color = \"#0ff\", value = 3}, {color = \"purple\", value = 27}]\n",
            "type": "Int -> Chart.Dataset -> Svg.Svg a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "camjc/elm-quiz",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Quiz",
        "comment": " Create a Quiz based on Boolean (True | False) questions.\n\nExample:\n\n    import Quiz exposing (update, view, Model)\n    import Array exposing (fromList, empty)\n    import Html.App exposing (beginnerProgram)\n    import Markdown exposing (toHtml)\n\n\n    model : Quiz.Model\n    model =\n        { questionId =\n            -1\n            -- Show Instructions\n        , questions =\n            Array.fromList\n                [ ( True, \"Something truthy\" )\n                , ( False, \"Something falsy\" )\n                ]\n        , correctAnswers = Array.empty\n        , wrongAnswers = Array.empty\n        , buttonTrue = ( \"True\", \"green\" )\n        , buttonFalse = ( \"False\", \"red\" )\n        , instructionsComponent =\n          Markdown.toHtml [] \"\"\"\n    # True or False\n    ## How to Play\n      - A question will appear.\n      - Click *True* if you think the answer is true.\n      - Click *False* if you think the answer is false.\n    \"\"\"\n      }\n\n\n    main : Program Never\n    main =\n        Html.App.beginnerProgram { model = model, view = view, update = update }\n\n# Definition\n@docs update\n@docs view\n@docs Question\n@docs Model\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The entire Model\n\n    model =\n        { questionId -- Should start at -1 to show the instructions.\n        , questions -- An array of `Question`s.\n        , correctAnswers -- Should start as an empty Array.\n        , wrongAnswers -- Should start as an empty Array.\n        , buttonTrue -- A Tuple of (\"Text\", \"Colour\").\n        , buttonFalse -- A Tuple of (\"Text\", \"Colour\").\n        , instructionsComponent -- HTML to show as instructions.\n        }\n",
            "args": [],
            "type": "QuizTypes.Model"
          },
          {
            "name": "Question",
            "comment": " A Tuple of the answer and the question.\n\n    (True, \"Do I like chocolate?\")\n",
            "args": [],
            "type": "QuizTypes.Question"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "update",
            "comment": " The update function, pass to Html.App.beginnerProgram ",
            "type": "QuizTypes.Msg -> QuizTypes.Model -> QuizTypes.Model"
          },
          {
            "name": "view",
            "comment": " The view function, pass to Html.App.beginnerProgram ",
            "type": "QuizTypes.Model -> Html.Html QuizTypes.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ccapndave/elm-flat-map",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Maybe.FlatMap",
        "comment": " This module implements the `flatMap` combinator for `Maybe`.  This allows you to call functions\nthat return a `Maybe` with arguments that are also `Maybe`s without having to worry about ending up\nwith a `Maybe (Maybe a)` return type.\n\nFor example:\n\n    getHeadFromMaybeList : Maybe List -> Maybe a\n    getHeadFromMaybeList =\n      flatMap List.head\n\n# FlatMaps\n@docs flatMap, flatMap2, flatMap3, flatMap4, flatMap5\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "flatMap",
            "comment": "",
            "type": "(a -> Maybe.Maybe b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "flatMap2",
            "comment": "",
            "type": "(a -> b -> Maybe.Maybe c) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c"
          },
          {
            "name": "flatMap3",
            "comment": "",
            "type": "(a -> b -> c -> Maybe.Maybe d) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d"
          },
          {
            "name": "flatMap4",
            "comment": "",
            "type": "(a -> b -> c -> d -> Maybe.Maybe e) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e"
          },
          {
            "name": "flatMap5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> Maybe.Maybe f) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe f"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "ccapndave/elm-update-extra",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Update.Extra",
        "comment": " Convenience functions for working with updates in Elm\n\n@docs andThen\n@docs filter\n@docs addCmd\n@docs sequence\n@docs identity\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addCmd",
            "comment": " Allows you to attach a Cmd to an update pipeline.\n\nFor example:\n\n    update msg model = model ! []\n      |> andThen update AMessage\n      |> addCmd doSomethingWithASideEffect\n",
            "type": "Platform.Cmd.Cmd msg -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "andThen",
            "comment": " Allows update call composition. Can be used with the pipeline operator (|>)\nto chain updates.\n\nFor example:\n\n    update msg model =\n      model ! []\n        |> andThen update SomeMessage\n        |> andThen update SomeOtherMessage\n        |> andThen update (MessageWithArguments \"Hello\")\n        ...\n\nThe same can be achieved using `Update.Extra.Infix.(:>)`.\n\nFor example:\n\n    import Update.Extra.Infix exposing ((:>))\n\n    update msg model =\n      model ! []\n        :> update SomeMessage\n        :> update SomeOtherMessage\n        :> update (MessageWithArguments \"Hello\")\n",
            "type": "(msg -> model -> ( model, Platform.Cmd.Cmd msg )) -> msg -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "filter",
            "comment": " Allows you to conditionally trigger updates based on a predicate. Can be\nused with the pipeline operator.\n\nFor example:\n\n    update msg model =\n      case msg of\n        SomeMessage i ->\n          model ! []\n            |> filter (i > 10)\n                (    andThen update BiggerThanTen\n                  >> andThen update AnotherMessage\n                  >> andThen update EvenMoreMessages\n                )\n            |> andThen (update AlwaysTriggeredAfterPredicate)\n\nIf you want use to the pipeline operator in the nested pipeline, consider a\nlambda:\n\n    |> filter (i > 10)\n      ( \\state -> state\n          |> andThen update BiggerThanTen\n          |> andThen update AnotherMessage\n          |> andThen update EvenMoreMessages\n      )\n    |> andThen (update AlwaysTriggeredAfterPredicate)\n",
            "type": "Bool -> (( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )) -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "identity",
            "comment": " This implements the identity function with regards to update pipelines.  This is designed to be used\nwith the :> operator, allowing you to write elements in the pipeline that do nothing at all.\n\n    import Update.Extra as Update\n    import Update.Extra.Infix exposing ((:>))\n\n    update msg model =\n      model ! []\n        :> Update.identity\n\nThis can be useful when you want to implement paths through the update pipeline without having to create\na `Noop` Msg.  Its especially when working with `Maybe`s, where it can be awkward to use the `filter`\nfunction in a type-safe way.\n\n    import Update.Extra as Update\n    import Update.Extra.Infix exposing ((:>))\n    import Maybe.Extra exposing ((?))\n\n    type Msg\n      = UpdateName (Maybe String)\n      | SetupUser User\n\n    update msg model =\n      case msg of\n        UpdateName maybeAName ->\n          let\n            user : Maybe User\n            user =\n              Maybe.map createUser maybeAName\n          in\n          { model | user = user }\n              :> Maybe.map (update << SetupUser) user ? Update.identity\n",
            "type": "model -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "sequence",
            "comment": " Allows you to attach multiple messages to an update at once.\n\nFor example:\n\n    update msg model = model ! []\n      |> sequence update\n        [ AMessage\n        , AnotherMessage\n        , AThirdMessage\n        ]\n",
            "type": "(msg -> model -> ( model, Platform.Cmd.Cmd msg )) -> List msg -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Update.Extra.Infix",
        "comment": " Infix versions of functions in Update.Extra\n\n@docs (:>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": ":>",
            "comment": " An infix version of Update.Extra.andThen.  Easy to remember because the\ncolon in the symbol represents piping two things through the chain (model and commands!).\n",
            "type": "( model, Platform.Cmd.Cmd msg ) -> (model -> ( model, Platform.Cmd.Cmd msg )) -> ( model, Platform.Cmd.Cmd msg )",
            "associativity": "left",
            "precedence": 0
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "chendrix/elm-matrix",
    "version": "3.1.1",
    "docs": [
      {
        "name": "Matrix.Random",
        "comment": " This module lets you generate random Matrices.\n\n@docs matrix, matrixUsing\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matrix",
            "comment": " Generate a matrix with a random width and height, filled with random elements.\n\n  matrix (Random.int 1 4) (Random.int 2 5) (Random.bool)\n\nThe example above will generate you a matrix anywhere between 1-4 rows, 2-5 columns, filled with random Booleans.\n\n",
            "type": "Random.Generator Int -> Random.Generator Int -> Random.Generator a -> Random.Generator (Matrix.Matrix a)"
          },
          {
            "name": "matrixUsing",
            "comment": " Generate a matrix of a random width and height, but whose elements are generated via a function given the location of that element in the matrix.\n\n    matrix\n      (Random.int 1 4)\n      (Random.int 1 2)\n      (\\location ->\n        if (row loc % 2 == 0) then\n          True\n        else\n          False\n      )\n\nIn the example above, if it makes a 4x2 matrix, it will be\n\n    T T T T\n    F F F F\n\n",
            "type": "Random.Generator Int -> Random.Generator Int -> (Matrix.Location -> a) -> Random.Generator (Matrix.Matrix a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Matrix",
        "comment": " A library for creating and using 2-D matrices/grids. Geared towards\n2-D games.\n\n# Locations\n\n@docs Location, loc, row, col\n\n# Matrices\n\n@docs Matrix\n\n## Create\n@docs matrix, square, fromList\n\n## Transform\n@docs map, mapWithLocation, flatten\n\n## Get and Set\n@docs get, set, update\n\n## Properties\n@docs colCount, rowCount\n\n## Convert to other types\n@docs toList\n\n",
        "aliases": [
          {
            "name": "Location",
            "comment": " A representation of a row number and a column number, used to locate and access elements in a matrix.\n",
            "args": [],
            "type": "( Int, Int )"
          },
          {
            "name": "Matrix",
            "comment": " An ordered collection of elements, all of a particular type, arranged into `m` rows and `n` columns.\n\n",
            "args": [
              "a"
            ],
            "type": "Array.Array (Array.Array a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "col",
            "comment": " Extract the col number from a location\n\n    col (loc 3 5) == 5\n\n",
            "type": "Matrix.Location -> Int"
          },
          {
            "name": "colCount",
            "comment": " Get the number of columns in a matrix\n",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "flatten",
            "comment": " Convert a matrix to a single list\n\n    let\n      m = fromList [[0, 1], [2, 3], [4, 5]]\n    in\n      flatten m == [0, 1, 2, 3, 4, 5]\n",
            "type": "Matrix.Matrix a -> List a"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of lists into a matrix\n\n    fromList [[1, 0], [0, 1]] == square 2 (\\l -> if row l == col l then 1 else 0)\n",
            "type": "List (List a) -> Matrix.Matrix a"
          },
          {
            "name": "get",
            "comment": " Get the element at a particular location\n\n    get (loc -1 1) (square 2 (\\_ -> True)) == Nothing\n\n    get (loc 1 1) (fromList [[0, 1], [2, 3]]) == Just 3\n",
            "type": "Matrix.Location -> Matrix.Matrix a -> Maybe.Maybe a"
          },
          {
            "name": "loc",
            "comment": " Turn two integers into a location\n",
            "type": "Int -> Int -> Matrix.Location"
          },
          {
            "name": "map",
            "comment": " Apply the function to every element in the matrix\n\n    map not (fromList [[True, False], [False, True]]) == fromList [[False, True], [True, False]]\n",
            "type": "(a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "mapWithLocation",
            "comment": " Apply the function to every element in the list, where the first function argument\nis the location of the element.\n\n    let\n      m = (square 2 (\\_ -> 1))\n      f location element = if row location == col location\n                            then element * 2\n                            else element\n    in\n      mapWithLocation f m == fromList [[2, 1], [1, 2]]\n\n",
            "type": "(Matrix.Location -> a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "matrix",
            "comment": " Initialize a new matrix of size `m x n`.\nDelegates to a function of type `Location -> a` to determine value to\nplace at each element in the matrix.\n\n    matrix 3 5 (\\location ->\n      if (isEven (row location)) then \"Hello\" else \"World\")\n\nwill give back the matrix\n\n    Hello Hello Hello Hello Hello\n    World World World World World\n    Hello Hello Hello Hello Hello\n",
            "type": "Int -> Int -> (Matrix.Location -> a) -> Matrix.Matrix a"
          },
          {
            "name": "row",
            "comment": " Extract the row number from a location\n\n    row (loc 3 5) == 3\n\n",
            "type": "Matrix.Location -> Int"
          },
          {
            "name": "rowCount",
            "comment": " Get the number of rows in a matrix\n",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular location\n\n    set (loc -1 1) 42 (square 2 (\\_ -> True)) == square 2 (\\_ -> True)\n\n    set (loc 1 1) 42 (fromList [[0, 1], [2, 3]]) == fromList [[0, 1], [2, 42]]\n",
            "type": "Matrix.Location -> a -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "square",
            "comment": " Create a square matrix of a certain size\n\n    square 2 (\\_ -> 'H') == H H\n                            H H\n",
            "type": "Int -> (Matrix.Location -> a) -> Matrix.Matrix a"
          },
          {
            "name": "toList",
            "comment": " Convert a matrix to a list of lists\n\n    toList (fromList [[1, 0], [0, 1]]) == [[1, 0], [0, 1]]\n\n",
            "type": "Matrix.Matrix a -> List (List a)"
          },
          {
            "name": "update",
            "comment": " Update the element at a particular location using the current value\n\n",
            "type": "Matrix.Location -> (a -> a) -> Matrix.Matrix a -> Matrix.Matrix a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-bootstrap-html",
    "version": "7.0.0",
    "docs": [
      {
        "name": "Bootstrap.Html",
        "comment": " Shorthand for Bootstrap Html.\n\n# Conventions\nThis package follows somewhat similar conventions to those used in [Html.Shorthand](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest).\nOne major difference is that idiomatic elements such as `panelDefault'` are frequently composites consisting of multiple elements.\n\n# CSS\n\n## Overview\n* Containers\n@docs container_,containerFluid_\n\n## Grid system\n* Media queries\n* Grid options\n* Ex: Stacked-to-horizontal\n* Ex: Fluid container\n* Ex: Mobile and desktop\n* Ex: Mobile, tablet, desktop\n* Ex: Column wrapping\n* Responsive column resets\n* Offsetting columns\n* Nesting columns\n* Column ordering\n* Less mixins and variables\n@docs row_,colXs_,colSm_,colMd_,colLg_,colXsOffset_,colSmOffset_,colMdOffset_,colLgOffset_\n\n## Typography\n* Headings\n* Body copy\n* Inline text elements\n* Alignment classes\n* Transformation classes\n* Abbreviations\n* Addresses\n* Blockquotes\n* Lists\n\n## Code\n* Inline\n* User input\n* Basic block\n* Variables\n* Sample output\n\n## Tables\n* Basic example\n* Striped rows\n@docs tableStriped', tableStriped_, tableBodyStriped', tableBodyStriped_\n* Bordered table\n* Hover rows\n* Condensed table\n* Contextual classes\n* Responsive tables\n\n## Forms\n* Basic example\n* Inline form\n* Horizontal form\n* Supported controls\n* Static control\n* Focus state\n* Disabled state\n* Readonly state\n* Validation states\n* Control sizing\n* Help text\n@docs formGroup_\n\n## Buttons\n* Options\n* Sizes\n* Active state\n* Disabled state\n* Button tags\n@docs BtnParam, btnParam\n@docs btnDefault', btnDefault_, btnXsDefault', btnXsDefault_, btnSmDefault', btnSmDefault_, btnLgDefault', btnLgDefault_\n@docs btnPrimary', btnPrimary_, btnXsPrimary', btnXsPrimary_, btnSmPrimary', btnSmPrimary_, btnLgPrimary', btnLgPrimary_\n@docs btnSuccess', btnSuccess_, btnXsSuccess', btnXsSuccess_, btnSmSuccess', btnSmSuccess_, btnLgSuccess', btnLgSuccess_\n@docs btnInfo', btnInfo_, btnXsInfo', btnXsInfo_, btnSmInfo', btnSmInfo_, btnLgInfo', btnLgInfo_\n@docs btnWarning', btnWarning_, btnXsWarning', btnXsWarning_, btnSmWarning', btnSmWarning_, btnLgWarning', btnLgWarning_\n@docs btnDanger', btnDanger_, btnXsDanger', btnXsDanger_, btnSmDanger', btnSmDanger_, btnLgDanger', btnLgDanger_\n@docs btnSubmitPrimary', btnSubmitPrimary_, btnSubmitXsPrimary', btnSubmitXsPrimary_, btnSubmitSmPrimary', btnSubmitSmPrimary_, btnSubmitLgPrimary', btnSubmitLgPrimary_\n\n## Images\n* Responsive images\n* Image shapes\n\n## Helper classes\n* Contextual colors\n* Contextual backgrounds\n* Close icon\n* Carets\n* Quick floats\n* Center content blocks\n* Clearfix\n* Showing and hiding content\n* Screen reader and keyboard navigation content\n* Image replacement\n@docs skipNavigation_\n\n## Responsive utilities\n* Available classes\n* Print classes\n* Test cases\n\n# Components\n\n## Glyphicons\nGlyphicons Halflings are normally not available for free, but their creator has made them available for [Bootstrap](http://getbootstrap.com/components/#glyphicons) free of cost. As a thank you, please include a link back to [Glyphicons](http://glyphicons.com/) whenever possible.\n\n@docs glyphiconPlusSign_,glyphiconAsterisk_,glyphiconPlus_,glyphiconEuro_,glyphiconMinus_\n@docs glyphiconCloud_,glyphiconEnvelope_,glyphiconPencil_,glyphiconGlass_,glyphiconMusic_\n@docs glyphiconSearch_,glyphiconHeart_,glyphiconStar_,glyphiconStarEmpty_,glyphiconUser_\n@docs glyphiconFilm_,glyphiconThLarge_,glyphiconTh_,glyphiconThList_,glyphiconOk_,glyphiconRemove_\n@docs glyphiconZoomIn_,glyphiconZoomOut_,glyphiconOff_,glyphiconSignal_,glyphiconCog_\n@docs glyphiconTrash_,glyphiconHome_,glyphiconFile_,glyphiconTime_,glyphiconRoad_\n@docs glyphiconDownloadAlt_,glyphiconDownload_,glyphiconUpload_,glyphiconInbox_\n@docs glyphiconPlayCircle_,glyphiconRepeat_,glyphiconRefresh_,glyphiconListAlt_,glyphiconLock_\n@docs glyphiconFlag_,glyphiconHeadphones_,glyphiconVolumeOff_,glyphiconVolumeDown_\n@docs glyphiconVolumeUp_,glyphiconQrcode_,glyphiconBarcode_,glyphiconTag_,glyphiconTags_\n@docs glyphiconBook_,glyphiconBookmark_,glyphiconPrint_,glyphiconCamera_,glyphiconFont_\n@docs glyphiconBold_,glyphiconItalic_,glyphiconTextHeight_,glyphiconTextWidth_,glyphiconAlignLeft_\n@docs glyphiconAlignCenter_,glyphiconAlignRight_,glyphiconAlignJustify_,glyphiconList_\n@docs glyphiconIndentLeft_,glyphiconIndentRight_,glyphiconFacetimeVideo_,glyphiconPicture_\n@docs glyphiconMapMarker_,glyphiconAdjust_,glyphiconTint_,glyphiconEdit_,glyphiconShare_\n@docs glyphiconCheck_,glyphiconMove_,glyphiconStepBackward_,glyphiconFastBackward_\n@docs glyphiconBackward_,glyphiconPlay_,glyphiconPause_,glyphiconStop_,glyphiconForward_\n@docs glyphiconFastForward_,glyphiconStepForward_,glyphiconEject_,glyphiconChevronLeft_\n@docs glyphiconChevronRight_,glyphiconPlusSign_,glyphiconMinusSign_,glyphiconRemoveSign_\n@docs glyphiconOkSign_,glyphiconQuestionSign_,glyphiconInfoSign_,glyphiconScreenshot_\n@docs glyphiconRemoveCircle_,glyphiconOkCircle_,glyphiconBanCircle_,glyphiconArrowLeft_\n@docs glyphiconArrowRight_,glyphiconArrowUp_,glyphiconArrowDown_,glyphiconShareAlt_\n@docs glyphiconResizeFull_,glyphiconResizeSmall_,glyphiconExclamationSign_,glyphiconGift_\n@docs glyphiconLeaf_,glyphiconFire_,glyphiconEyeOpen_,glyphiconEyeClose_,glyphiconWarningSign_\n@docs glyphiconPlane_,glyphiconCalendar_,glyphiconRandom_,glyphiconComment_,glyphiconMagnet_\n@docs glyphiconChevronUp_,glyphiconChevronDown_,glyphiconRetweet_,glyphiconShoppingCart_\n@docs glyphiconFolderClose_,glyphiconFolderOpen_,glyphiconResizeVertical_\n@docs glyphiconResizeHorizontal_,glyphiconHdd_,glyphiconBullhorn_,glyphiconBell_\n@docs glyphiconCertificate_,glyphiconThumbsUp_,glyphiconThumbsDown_,glyphiconHandRight_\n@docs glyphiconHandLeft_,glyphiconHandUp_,glyphiconHandDown_,glyphiconCircleArrowRight_\n@docs glyphiconCircleArrowLeft_,glyphiconCircleArrowUp_,glyphiconCircleArrowDown_,glyphiconGlobe_\n@docs glyphiconWrench_,glyphiconTasks_,glyphiconFilter_,glyphiconBriefcase_,glyphiconFullscreen_\n@docs glyphiconDashboard_,glyphiconPaperclip_,glyphiconHeartEmpty_,glyphiconLink_,glyphiconPhone_\n@docs glyphiconPushpin_,glyphiconUsd_,glyphiconGbp_,glyphiconSort_,glyphiconSortByAlphabet_\n@docs glyphiconSortByAlphabetAlt_,glyphiconSortByOrder_,glyphiconSortByOrderAlt_\n@docs glyphiconSortByAttributes_,glyphiconSortByAttributesAlt_,glyphiconUnchecked_,glyphiconExpand_\n@docs glyphiconCollapseDown_,glyphiconCollapseUp_,glyphiconLogIn_,glyphiconFlash_,glyphiconLogOut_\n@docs glyphiconNewWindow_,glyphiconRecord_,glyphiconSave_,glyphiconOpen_,glyphiconSaved_\n@docs glyphiconImport_,glyphiconExport_,glyphiconSend_,glyphiconFloppyDisk_,glyphiconFloppySaved_\n@docs glyphiconFloppyRemove_,glyphiconFloppySave_,glyphiconFloppyOpen_,glyphiconCreditCard_\n@docs glyphiconTransfer_,glyphiconCutlery_,glyphiconHeader_,glyphiconCompressed_,glyphiconEarphone_\n@docs glyphiconPhoneAlt_,glyphiconTower_,glyphiconStats_,glyphiconSdVideo_,glyphiconHdVideo_\n@docs glyphiconSubtitles_,glyphiconSoundStereo_,glyphiconSoundDolby_,glyphiconSound51_\n@docs glyphiconSound61_,glyphiconSound71_,glyphiconCopyrightMark_,glyphiconRegistrationMark_\n@docs glyphiconCloudDownload_,glyphiconCloudUpload_,glyphiconTreeConifer_,glyphiconTreeDeciduous_\n\n@docs glyphiconPlusSign',glyphiconAsterisk',glyphiconPlus',glyphiconEuro',glyphiconMinus'\n@docs glyphiconCloud',glyphiconEnvelope',glyphiconPencil',glyphiconGlass',glyphiconMusic'\n@docs glyphiconSearch',glyphiconHeart',glyphiconStar',glyphiconStarEmpty',glyphiconUser'\n@docs glyphiconFilm',glyphiconThLarge',glyphiconTh',glyphiconThList',glyphiconOk',glyphiconRemove'\n@docs glyphiconZoomIn',glyphiconZoomOut',glyphiconOff',glyphiconSignal',glyphiconCog'\n@docs glyphiconTrash',glyphiconHome',glyphiconFile',glyphiconTime',glyphiconRoad'\n@docs glyphiconDownloadAlt',glyphiconDownload',glyphiconUpload',glyphiconInbox'\n@docs glyphiconPlayCircle',glyphiconRepeat',glyphiconRefresh',glyphiconListAlt',glyphiconLock'\n@docs glyphiconFlag',glyphiconHeadphones',glyphiconVolumeOff',glyphiconVolumeDown'\n@docs glyphiconVolumeUp',glyphiconQrcode',glyphiconBarcode',glyphiconTag',glyphiconTags'\n@docs glyphiconBook',glyphiconBookmark',glyphiconPrint',glyphiconCamera',glyphiconFont'\n@docs glyphiconBold',glyphiconItalic',glyphiconTextHeight',glyphiconTextWidth',glyphiconAlignLeft'\n@docs glyphiconAlignCenter',glyphiconAlignRight',glyphiconAlignJustify',glyphiconList'\n@docs glyphiconIndentLeft',glyphiconIndentRight',glyphiconFacetimeVideo',glyphiconPicture'\n@docs glyphiconMapMarker',glyphiconAdjust',glyphiconTint',glyphiconEdit',glyphiconShare'\n@docs glyphiconCheck',glyphiconMove',glyphiconStepBackward',glyphiconFastBackward'\n@docs glyphiconBackward',glyphiconPlay',glyphiconPause',glyphiconStop',glyphiconForward'\n@docs glyphiconFastForward',glyphiconStepForward',glyphiconEject',glyphiconChevronLeft'\n@docs glyphiconChevronRight',glyphiconPlusSign',glyphiconMinusSign',glyphiconRemoveSign'\n@docs glyphiconOkSign',glyphiconQuestionSign',glyphiconInfoSign',glyphiconScreenshot'\n@docs glyphiconRemoveCircle',glyphiconOkCircle',glyphiconBanCircle',glyphiconArrowLeft'\n@docs glyphiconArrowRight',glyphiconArrowUp',glyphiconArrowDown',glyphiconShareAlt'\n@docs glyphiconResizeFull',glyphiconResizeSmall',glyphiconExclamationSign',glyphiconGift'\n@docs glyphiconLeaf',glyphiconFire',glyphiconEyeOpen',glyphiconEyeClose',glyphiconWarningSign'\n@docs glyphiconPlane',glyphiconCalendar',glyphiconRandom',glyphiconComment',glyphiconMagnet'\n@docs glyphiconChevronUp',glyphiconChevronDown',glyphiconRetweet',glyphiconShoppingCart'\n@docs glyphiconFolderClose',glyphiconFolderOpen',glyphiconResizeVertical'\n@docs glyphiconResizeHorizontal',glyphiconHdd',glyphiconBullhorn',glyphiconBell'\n@docs glyphiconCertificate',glyphiconThumbsUp',glyphiconThumbsDown',glyphiconHandRight'\n@docs glyphiconHandLeft',glyphiconHandUp',glyphiconHandDown',glyphiconCircleArrowRight'\n@docs glyphiconCircleArrowLeft',glyphiconCircleArrowUp',glyphiconCircleArrowDown',glyphiconGlobe'\n@docs glyphiconWrench',glyphiconTasks',glyphiconFilter',glyphiconBriefcase',glyphiconFullscreen'\n@docs glyphiconDashboard',glyphiconPaperclip',glyphiconHeartEmpty',glyphiconLink',glyphiconPhone'\n@docs glyphiconPushpin',glyphiconUsd',glyphiconGbp',glyphiconSort',glyphiconSortByAlphabet'\n@docs glyphiconSortByAlphabetAlt',glyphiconSortByOrder',glyphiconSortByOrderAlt'\n@docs glyphiconSortByAttributes',glyphiconSortByAttributesAlt',glyphiconUnchecked',glyphiconExpand'\n@docs glyphiconCollapseDown',glyphiconCollapseUp',glyphiconLogIn',glyphiconFlash',glyphiconLogOut'\n@docs glyphiconNewWindow',glyphiconRecord',glyphiconSave',glyphiconOpen',glyphiconSaved'\n@docs glyphiconImport',glyphiconExport',glyphiconSend',glyphiconFloppyDisk',glyphiconFloppySaved'\n@docs glyphiconFloppyRemove',glyphiconFloppySave',glyphiconFloppyOpen',glyphiconCreditCard'\n@docs glyphiconTransfer',glyphiconCutlery',glyphiconHeader',glyphiconCompressed',glyphiconEarphone'\n@docs glyphiconPhoneAlt',glyphiconTower',glyphiconStats',glyphiconSdVideo',glyphiconHdVideo'\n@docs glyphiconSubtitles',glyphiconSoundStereo',glyphiconSoundDolby',glyphiconSound51'\n@docs glyphiconSound61',glyphiconSound71',glyphiconCopyrightMark',glyphiconRegistrationMark'\n@docs glyphiconCloudDownload',glyphiconCloudUpload',glyphiconTreeConifer',glyphiconTreeDeciduous'\n\n## Dropdowns\n* Alignment\n* Headers\n* Divider\n* Disabled menu items\n\n\n## Button groups\n* Button toolbar\n* Sizing\n* Nesting\n* Vertical variation\n* Justified button groups\n\n\n## Button dropdowns\nSee [elm-bootstrap-dropdown](https://github.com/circuithub/elm-bootstrap-dropdown)\n\n\n## Input groups\n* Basic example\n* Sizing\n* Checkbox and radios addons\n* Button addons\n* Buttons with dropdowns\n* Segmented buttons\n\n## Navs\n* Tabs\n* Pills\n* Justified\n* Disabled links\n* Using dropdowns\n\n\n## Navbar\n* Default navbar\n* Brand image\n* Forms\n* Buttons\n* Text\n* Non-nav links\n* Component alignment\n* Fixed to top\n* Fixed to bottom\n* Static top\n* Inverted navbar\n@docs navbar', navbarDefault', navbarHeader_\n\n## Breadcrumbs\n\n## Pagination\n* Default pagination\n* Pager\n\n## Labels\n\n## Badges\n\n## Jumbotron\n\n## Page header\n\n## Thumbnails\n* Default example\n* Custom content\n\n## Alerts\n* Examples\n* Dismissible alerts\n* Links in alerts\n\n## Progress bars\n* Basic example\n* With label\n* Low percentages\n* Contextual alternatives\n* Striped\n* Animated\n* Stacked\n\n## Media object\n* Default media\n* Media list\n\n## List group\n* Basic example\n* Badges\n* Linked items\n* Disabled items\n* Contextual classes\n* Custom content\n\n## Panels\n* Basic example\n* Panel with heading\n* Contextual alternatives\n* With tables\n* With list groups\n@docs panelDefault_,panelHeading_,panelBody_\n@docs panelTitle_, panelDefault'\n\n## Responsive embed\n@docs embedResponsive16x9_,embedResponsive4x3_\n\n## Wells\n@docs well_,wellSm_,wellLg_\n\n",
        "aliases": [
          {
            "name": "BtnParam",
            "comment": " Optional parameters for bootstrap buttons.\n\n* `icon` - an icon for the button (see `glyphicon`s)\n* `label` - a text label for the button\n* `tooltip` - some hover-over tooltip text for the button\n\nSee also [BtnParam](http://package.elm-lang.org/packages/circuithub/elm-bootstrap-html/latest/Bootstrap-Html-Internal#BtnParam)\n\n",
            "args": [
              "msg"
            ],
            "type": "Bootstrap.Html.Internal.BtnParam msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "btnDanger'",
            "comment": " btnDanger' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnDanger_",
            "comment": " btnDanger_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnDefault'",
            "comment": " btnDefault' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnDefault_",
            "comment": " btnDefault_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnInfo'",
            "comment": " btnInfo' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnInfo_",
            "comment": " btnInfo_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgDanger'",
            "comment": " btnLgDanger' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgDanger_",
            "comment": " btnLgDanger_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgDefault'",
            "comment": " btnLgDefault' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgDefault_",
            "comment": " btnLgDefault_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgInfo'",
            "comment": " btnLgInfo' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgInfo_",
            "comment": " btnLgInfo_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgPrimary'",
            "comment": " btnLgPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgPrimary_",
            "comment": " btnLgPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgSuccess'",
            "comment": " btnLgSuccess' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgSuccess_",
            "comment": " btnLgSuccess_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgWarning'",
            "comment": " btnLgWarning' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnLgWarning_",
            "comment": " btnLgWarning_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnParam",
            "comment": " Default parameters for a button. Use this to select only one or two options.\n\n    { btnParam\n    | label <- Just \"This button doesn't have an icon or a tooltip\"\n    }\n\n",
            "type": "Bootstrap.Html.BtnParam msg"
          },
          {
            "name": "btnPrimary'",
            "comment": " btnPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnPrimary_",
            "comment": " btnPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmDanger'",
            "comment": " btnSmDanger' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmDanger_",
            "comment": " btnSmDanger_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmDefault'",
            "comment": " btnSmDefault' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmDefault_",
            "comment": " btnSmDefault_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmInfo'",
            "comment": " btnSmInfo' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmInfo_",
            "comment": " btnSmInfo_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmPrimary'",
            "comment": " btnSmPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmPrimary_",
            "comment": " btnSmPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmSuccess'",
            "comment": " btnSmSuccess' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmSuccess_",
            "comment": " btnSmSuccess_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmWarning'",
            "comment": " btnSmWarning' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSmWarning_",
            "comment": " btnSmWarning_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitLgPrimary'",
            "comment": " btnSubmitLgPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitLgPrimary_",
            "comment": " btnSubmitLgPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitPrimary'",
            "comment": " btnSubmitPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitPrimary_",
            "comment": " btnSubmitPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitSmPrimary'",
            "comment": " btnSubmitSmPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitSmPrimary_",
            "comment": " btnSubmitSmPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitXsPrimary'",
            "comment": " btnSubmitXsPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSubmitXsPrimary_",
            "comment": " btnSubmitXsPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "btnSuccess'",
            "comment": " btnSuccess' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnSuccess_",
            "comment": " btnSuccess_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnWarning'",
            "comment": " btnWarning' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnWarning_",
            "comment": " btnWarning_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsDanger'",
            "comment": " btnXsDanger' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsDanger_",
            "comment": " btnXsDanger_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsDefault'",
            "comment": " btnXsDefault' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsDefault_",
            "comment": " btnXsDefault_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsInfo'",
            "comment": " btnXsInfo' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsInfo_",
            "comment": " btnXsInfo_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsPrimary'",
            "comment": " btnXsPrimary' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsPrimary_",
            "comment": " btnXsPrimary_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsSuccess'",
            "comment": " btnXsSuccess' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsSuccess_",
            "comment": " btnXsSuccess_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsWarning'",
            "comment": " btnXsWarning' ",
            "type": "Html.Shorthand.ClassString -> Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btnXsWarning_",
            "comment": " btnXsWarning_ ",
            "type": "Bootstrap.Html.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "colLgOffset_",
            "comment": " colLgOffset_ ",
            "type": "Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colLg_",
            "comment": " colLg_ ",
            "type": "Int -> Int -> Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colMdOffset_",
            "comment": " colMdOffset_ ",
            "type": "Int -> Int -> Int -> Int -> Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colMd_",
            "comment": " colMd_ ",
            "type": "Int -> Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colSmOffset_",
            "comment": " colSmOffset_ ",
            "type": "Int -> Int -> Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colSm_",
            "comment": " colSm_ ",
            "type": "Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colXsOffset_",
            "comment": " colXsOffset_ ",
            "type": "Int -> Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colXs_",
            "comment": " colXs_ ",
            "type": "Int -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "containerFluid_",
            "comment": " containerFluid_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "container_",
            "comment": " container_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "embedResponsive16x9_",
            "comment": " embedResponsive16x9_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "embedResponsive4x3_",
            "comment": " embedResponsive4x3_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "formGroup_",
            "comment": " formGroup_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "glyphiconAdjust'",
            "comment": " glyphiconAdjust' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconAdjust_",
            "comment": " glyphiconAdjust_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconAlignCenter'",
            "comment": " glyphiconAlignCenter' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconAlignCenter_",
            "comment": " glyphiconAlignCenter_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconAlignJustify'",
            "comment": " glyphiconAlignJustify' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconAlignJustify_",
            "comment": " glyphiconAlignJustify_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconAlignLeft'",
            "comment": " glyphiconAlignLeft' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconAlignLeft_",
            "comment": " glyphiconAlignLeft_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconAlignRight'",
            "comment": " glyphiconAlignRight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconAlignRight_",
            "comment": " glyphiconAlignRight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconArrowDown'",
            "comment": " glyphiconArrowDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconArrowDown_",
            "comment": " glyphiconArrowDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconArrowLeft'",
            "comment": " glyphiconArrowLeft' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconArrowLeft_",
            "comment": " glyphiconArrowLeft_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconArrowRight'",
            "comment": " glyphiconArrowRight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconArrowRight_",
            "comment": " glyphiconArrowRight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconArrowUp'",
            "comment": " glyphiconArrowUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconArrowUp_",
            "comment": " glyphiconArrowUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconAsterisk'",
            "comment": " glyphiconAsterisk' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconAsterisk_",
            "comment": " glyphiconAsterisk_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBackward'",
            "comment": " glyphiconBackward' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBackward_",
            "comment": " glyphiconBackward_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBanCircle'",
            "comment": " glyphiconBanCircle' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBanCircle_",
            "comment": " glyphiconBanCircle_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBarcode'",
            "comment": " glyphiconBarcode' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBarcode_",
            "comment": " glyphiconBarcode_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBell'",
            "comment": " glyphiconBell' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBell_",
            "comment": " glyphiconBell_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBold'",
            "comment": " glyphiconBold' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBold_",
            "comment": " glyphiconBold_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBook'",
            "comment": " glyphiconBook' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBook_",
            "comment": " glyphiconBook_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBookmark'",
            "comment": " glyphiconBookmark' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBookmark_",
            "comment": " glyphiconBookmark_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBriefcase'",
            "comment": " glyphiconBriefcase' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBriefcase_",
            "comment": " glyphiconBriefcase_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconBullhorn'",
            "comment": " glyphiconBullhorn' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconBullhorn_",
            "comment": " glyphiconBullhorn_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCalendar'",
            "comment": " glyphiconCalendar' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCalendar_",
            "comment": " glyphiconCalendar_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCamera'",
            "comment": " glyphiconCamera' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCamera_",
            "comment": " glyphiconCamera_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCertificate'",
            "comment": " glyphiconCertificate' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCertificate_",
            "comment": " glyphiconCertificate_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCheck'",
            "comment": " glyphiconCheck' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCheck_",
            "comment": " glyphiconCheck_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconChevronDown'",
            "comment": " glyphiconChevronDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconChevronDown_",
            "comment": " glyphiconChevronDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconChevronLeft'",
            "comment": " glyphiconChevronLeft' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconChevronLeft_",
            "comment": " glyphiconChevronLeft_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconChevronRight'",
            "comment": " glyphiconChevronRight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconChevronRight_",
            "comment": " glyphiconChevronRight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconChevronUp'",
            "comment": " glyphiconChevronUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconChevronUp_",
            "comment": " glyphiconChevronUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowDown'",
            "comment": " glyphiconCircleArrowDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowDown_",
            "comment": " glyphiconCircleArrowDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowLeft'",
            "comment": " glyphiconCircleArrowLeft' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowLeft_",
            "comment": " glyphiconCircleArrowLeft_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowRight'",
            "comment": " glyphiconCircleArrowRight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowRight_",
            "comment": " glyphiconCircleArrowRight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowUp'",
            "comment": " glyphiconCircleArrowUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCircleArrowUp_",
            "comment": " glyphiconCircleArrowUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCloud'",
            "comment": " glyphiconCloud' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCloudDownload'",
            "comment": " glyphiconCloudDownload' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCloudDownload_",
            "comment": " glyphiconCloudDownload_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCloudUpload'",
            "comment": " glyphiconCloudUpload' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCloudUpload_",
            "comment": " glyphiconCloudUpload_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCloud_",
            "comment": " glyphiconCloud_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCog'",
            "comment": " glyphiconCog' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCog_",
            "comment": " glyphiconCog_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCollapseDown'",
            "comment": " glyphiconCollapseDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCollapseDown_",
            "comment": " glyphiconCollapseDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCollapseUp'",
            "comment": " glyphiconCollapseUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCollapseUp_",
            "comment": " glyphiconCollapseUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconComment'",
            "comment": " glyphiconComment' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconComment_",
            "comment": " glyphiconComment_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCompressed'",
            "comment": " glyphiconCompressed' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCompressed_",
            "comment": " glyphiconCompressed_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCopyrightMark'",
            "comment": " glyphiconCopyrightMark' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCopyrightMark_",
            "comment": " glyphiconCopyrightMark_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCreditCard'",
            "comment": " glyphiconCreditCard' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCreditCard_",
            "comment": " glyphiconCreditCard_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconCutlery'",
            "comment": " glyphiconCutlery' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconCutlery_",
            "comment": " glyphiconCutlery_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconDashboard'",
            "comment": " glyphiconDashboard' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconDashboard_",
            "comment": " glyphiconDashboard_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconDownload'",
            "comment": " glyphiconDownload' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconDownloadAlt'",
            "comment": " glyphiconDownloadAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconDownloadAlt_",
            "comment": " glyphiconDownloadAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconDownload_",
            "comment": " glyphiconDownload_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEarphone'",
            "comment": " glyphiconEarphone' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEarphone_",
            "comment": " glyphiconEarphone_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEdit'",
            "comment": " glyphiconEdit' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEdit_",
            "comment": " glyphiconEdit_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEject'",
            "comment": " glyphiconEject' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEject_",
            "comment": " glyphiconEject_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEnvelope'",
            "comment": " glyphiconEnvelope' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEnvelope_",
            "comment": " glyphiconEnvelope_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEuro'",
            "comment": " glyphiconEuro' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEuro_",
            "comment": " glyphiconEuro_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconExclamationSign'",
            "comment": " glyphiconExclamationSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconExclamationSign_",
            "comment": " glyphiconExclamationSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconExpand'",
            "comment": " glyphiconExpand' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconExpand_",
            "comment": " glyphiconExpand_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconExport'",
            "comment": " glyphiconExport' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconExport_",
            "comment": " glyphiconExport_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEyeClose'",
            "comment": " glyphiconEyeClose' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEyeClose_",
            "comment": " glyphiconEyeClose_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconEyeOpen'",
            "comment": " glyphiconEyeOpen' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconEyeOpen_",
            "comment": " glyphiconEyeOpen_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFacetimeVideo'",
            "comment": " glyphiconFacetimeVideo' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFacetimeVideo_",
            "comment": " glyphiconFacetimeVideo_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFastBackward'",
            "comment": " glyphiconFastBackward' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFastBackward_",
            "comment": " glyphiconFastBackward_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFastForward'",
            "comment": " glyphiconFastForward' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFastForward_",
            "comment": " glyphiconFastForward_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFile'",
            "comment": " glyphiconFile' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFile_",
            "comment": " glyphiconFile_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFilm'",
            "comment": " glyphiconFilm' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFilm_",
            "comment": " glyphiconFilm_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFilter'",
            "comment": " glyphiconFilter' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFilter_",
            "comment": " glyphiconFilter_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFire'",
            "comment": " glyphiconFire' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFire_",
            "comment": " glyphiconFire_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFlag'",
            "comment": " glyphiconFlag' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFlag_",
            "comment": " glyphiconFlag_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFlash'",
            "comment": " glyphiconFlash' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFlash_",
            "comment": " glyphiconFlash_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFloppyDisk'",
            "comment": " glyphiconFloppyDisk' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFloppyDisk_",
            "comment": " glyphiconFloppyDisk_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFloppyOpen'",
            "comment": " glyphiconFloppyOpen' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFloppyOpen_",
            "comment": " glyphiconFloppyOpen_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFloppyRemove'",
            "comment": " glyphiconFloppyRemove' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFloppyRemove_",
            "comment": " glyphiconFloppyRemove_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFloppySave'",
            "comment": " glyphiconFloppySave' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFloppySave_",
            "comment": " glyphiconFloppySave_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFloppySaved'",
            "comment": " glyphiconFloppySaved' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFloppySaved_",
            "comment": " glyphiconFloppySaved_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFolderClose'",
            "comment": " glyphiconFolderClose' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFolderClose_",
            "comment": " glyphiconFolderClose_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFolderOpen'",
            "comment": " glyphiconFolderOpen' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFolderOpen_",
            "comment": " glyphiconFolderOpen_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFont'",
            "comment": " glyphiconFont' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFont_",
            "comment": " glyphiconFont_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconForward'",
            "comment": " glyphiconForward' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconForward_",
            "comment": " glyphiconForward_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconFullscreen'",
            "comment": " glyphiconFullscreen' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconFullscreen_",
            "comment": " glyphiconFullscreen_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconGbp'",
            "comment": " glyphiconGbp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconGbp_",
            "comment": " glyphiconGbp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconGift'",
            "comment": " glyphiconGift' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconGift_",
            "comment": " glyphiconGift_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconGlass'",
            "comment": " glyphiconGlass' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconGlass_",
            "comment": " glyphiconGlass_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconGlobe'",
            "comment": " glyphiconGlobe' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconGlobe_",
            "comment": " glyphiconGlobe_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHandDown'",
            "comment": " glyphiconHandDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHandDown_",
            "comment": " glyphiconHandDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHandLeft'",
            "comment": " glyphiconHandLeft' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHandLeft_",
            "comment": " glyphiconHandLeft_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHandRight'",
            "comment": " glyphiconHandRight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHandRight_",
            "comment": " glyphiconHandRight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHandUp'",
            "comment": " glyphiconHandUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHandUp_",
            "comment": " glyphiconHandUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHdVideo'",
            "comment": " glyphiconHdVideo' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHdVideo_",
            "comment": " glyphiconHdVideo_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHdd'",
            "comment": " glyphiconHdd' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHdd_",
            "comment": " glyphiconHdd_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHeader'",
            "comment": " glyphiconHeader' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHeader_",
            "comment": " glyphiconHeader_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHeadphones'",
            "comment": " glyphiconHeadphones' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHeadphones_",
            "comment": " glyphiconHeadphones_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHeart'",
            "comment": " glyphiconHeart' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHeartEmpty'",
            "comment": " glyphiconHeartEmpty' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHeartEmpty_",
            "comment": " glyphiconHeartEmpty_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHeart_",
            "comment": " glyphiconHeart_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconHome'",
            "comment": " glyphiconHome' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconHome_",
            "comment": " glyphiconHome_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconImport'",
            "comment": " glyphiconImport' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconImport_",
            "comment": " glyphiconImport_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconInbox'",
            "comment": " glyphiconInbox' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconInbox_",
            "comment": " glyphiconInbox_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconIndentLeft'",
            "comment": " glyphiconIndentLeft' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconIndentLeft_",
            "comment": " glyphiconIndentLeft_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconIndentRight'",
            "comment": " glyphiconIndentRight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconIndentRight_",
            "comment": " glyphiconIndentRight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconInfoSign'",
            "comment": " glyphiconInfoSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconInfoSign_",
            "comment": " glyphiconInfoSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconItalic'",
            "comment": " glyphiconItalic' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconItalic_",
            "comment": " glyphiconItalic_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconLeaf'",
            "comment": " glyphiconLeaf' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconLeaf_",
            "comment": " glyphiconLeaf_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconLink'",
            "comment": " glyphiconLink' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconLink_",
            "comment": " glyphiconLink_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconList'",
            "comment": " glyphiconList' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconListAlt'",
            "comment": " glyphiconListAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconListAlt_",
            "comment": " glyphiconListAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconList_",
            "comment": " glyphiconList_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconLock'",
            "comment": " glyphiconLock' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconLock_",
            "comment": " glyphiconLock_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconLogIn'",
            "comment": " glyphiconLogIn' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconLogIn_",
            "comment": " glyphiconLogIn_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconLogOut'",
            "comment": " glyphiconLogOut' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconLogOut_",
            "comment": " glyphiconLogOut_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconMagnet'",
            "comment": " glyphiconMagnet' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconMagnet_",
            "comment": " glyphiconMagnet_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconMapMarker'",
            "comment": " glyphiconMapMarker' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconMapMarker_",
            "comment": " glyphiconMapMarker_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconMinus'",
            "comment": " glyphiconMinus' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconMinusSign'",
            "comment": " glyphiconMinusSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconMinusSign_",
            "comment": " glyphiconMinusSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconMinus_",
            "comment": " glyphiconMinus_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconMove'",
            "comment": " glyphiconMove' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconMove_",
            "comment": " glyphiconMove_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconMusic'",
            "comment": " glyphiconMusic' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconMusic_",
            "comment": " glyphiconMusic_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconNewWindow'",
            "comment": " glyphiconNewWindow' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconNewWindow_",
            "comment": " glyphiconNewWindow_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconOff'",
            "comment": " glyphiconOff' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconOff_",
            "comment": " glyphiconOff_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconOk'",
            "comment": " glyphiconOk' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconOkCircle'",
            "comment": " glyphiconOkCircle' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconOkCircle_",
            "comment": " glyphiconOkCircle_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconOkSign'",
            "comment": " glyphiconOkSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconOkSign_",
            "comment": " glyphiconOkSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconOk_",
            "comment": " glyphiconOk_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconOpen'",
            "comment": " glyphiconOpen' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconOpen_",
            "comment": " glyphiconOpen_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPaperclip'",
            "comment": " glyphiconPaperclip' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPaperclip_",
            "comment": " glyphiconPaperclip_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPause'",
            "comment": " glyphiconPause' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPause_",
            "comment": " glyphiconPause_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPencil'",
            "comment": " glyphiconPencil' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPencil_",
            "comment": " glyphiconPencil_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPhone'",
            "comment": " glyphiconPhone' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPhoneAlt'",
            "comment": " glyphiconPhoneAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPhoneAlt_",
            "comment": " glyphiconPhoneAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPhone_",
            "comment": " glyphiconPhone_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPicture'",
            "comment": " glyphiconPicture' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPicture_",
            "comment": " glyphiconPicture_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPlane'",
            "comment": " glyphiconPlane' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPlane_",
            "comment": " glyphiconPlane_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPlay'",
            "comment": " glyphiconPlay' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPlayCircle'",
            "comment": " glyphiconPlayCircle' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPlayCircle_",
            "comment": " glyphiconPlayCircle_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPlay_",
            "comment": " glyphiconPlay_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPlus'",
            "comment": " glyphiconPlus' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPlusSign'",
            "comment": " glyphiconPlusSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPlusSign_",
            "comment": " glyphiconPlusSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPlus_",
            "comment": " glyphiconPlus_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPrint'",
            "comment": " glyphiconPrint' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPrint_",
            "comment": " glyphiconPrint_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconPushpin'",
            "comment": " glyphiconPushpin' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconPushpin_",
            "comment": " glyphiconPushpin_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconQrcode'",
            "comment": " glyphiconQrcode' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconQrcode_",
            "comment": " glyphiconQrcode_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconQuestionSign'",
            "comment": " glyphiconQuestionSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconQuestionSign_",
            "comment": " glyphiconQuestionSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRandom'",
            "comment": " glyphiconRandom' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRandom_",
            "comment": " glyphiconRandom_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRecord'",
            "comment": " glyphiconRecord' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRecord_",
            "comment": " glyphiconRecord_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRefresh'",
            "comment": " glyphiconRefresh' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRefresh_",
            "comment": " glyphiconRefresh_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRegistrationMark'",
            "comment": " glyphiconRegistrationMark' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRegistrationMark_",
            "comment": " glyphiconRegistrationMark_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRemove'",
            "comment": " glyphiconRemove' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRemoveCircle'",
            "comment": " glyphiconRemoveCircle' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRemoveCircle_",
            "comment": " glyphiconRemoveCircle_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRemoveSign'",
            "comment": " glyphiconRemoveSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRemoveSign_",
            "comment": " glyphiconRemoveSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRemove_",
            "comment": " glyphiconRemove_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRepeat'",
            "comment": " glyphiconRepeat' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRepeat_",
            "comment": " glyphiconRepeat_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconResizeFull'",
            "comment": " glyphiconResizeFull' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconResizeFull_",
            "comment": " glyphiconResizeFull_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconResizeHorizontal'",
            "comment": " glyphiconResizeHorizontal' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconResizeHorizontal_",
            "comment": " glyphiconResizeHorizontal_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconResizeSmall'",
            "comment": " glyphiconResizeSmall' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconResizeSmall_",
            "comment": " glyphiconResizeSmall_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconResizeVertical'",
            "comment": " glyphiconResizeVertical' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconResizeVertical_",
            "comment": " glyphiconResizeVertical_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRetweet'",
            "comment": " glyphiconRetweet' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRetweet_",
            "comment": " glyphiconRetweet_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconRoad'",
            "comment": " glyphiconRoad' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconRoad_",
            "comment": " glyphiconRoad_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSave'",
            "comment": " glyphiconSave' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSave_",
            "comment": " glyphiconSave_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSaved'",
            "comment": " glyphiconSaved' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSaved_",
            "comment": " glyphiconSaved_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconScreenshot'",
            "comment": " glyphiconScreenshot' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconScreenshot_",
            "comment": " glyphiconScreenshot_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSdVideo'",
            "comment": " glyphiconSdVideo' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSdVideo_",
            "comment": " glyphiconSdVideo_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSearch'",
            "comment": " glyphiconSearch' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSearch_",
            "comment": " glyphiconSearch_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSend'",
            "comment": " glyphiconSend' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSend_",
            "comment": " glyphiconSend_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconShare'",
            "comment": " glyphiconShare' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconShareAlt'",
            "comment": " glyphiconShareAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconShareAlt_",
            "comment": " glyphiconShareAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconShare_",
            "comment": " glyphiconShare_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconShoppingCart'",
            "comment": " glyphiconShoppingCart' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconShoppingCart_",
            "comment": " glyphiconShoppingCart_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSignal'",
            "comment": " glyphiconSignal' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSignal_",
            "comment": " glyphiconSignal_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSort'",
            "comment": " glyphiconSort' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByAlphabet'",
            "comment": " glyphiconSortByAlphabet' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByAlphabetAlt'",
            "comment": " glyphiconSortByAlphabetAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByAlphabetAlt_",
            "comment": " glyphiconSortByAlphabetAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSortByAlphabet_",
            "comment": " glyphiconSortByAlphabet_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSortByAttributes'",
            "comment": " glyphiconSortByAttributes' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByAttributesAlt'",
            "comment": " glyphiconSortByAttributesAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByAttributesAlt_",
            "comment": " glyphiconSortByAttributesAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSortByAttributes_",
            "comment": " glyphiconSortByAttributes_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSortByOrder'",
            "comment": " glyphiconSortByOrder' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByOrderAlt'",
            "comment": " glyphiconSortByOrderAlt' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSortByOrderAlt_",
            "comment": " glyphiconSortByOrderAlt_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSortByOrder_",
            "comment": " glyphiconSortByOrder_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSort_",
            "comment": " glyphiconSort_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSound51'",
            "comment": " glyphiconSound51' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSound51_",
            "comment": " glyphiconSound51_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSound61'",
            "comment": " glyphiconSound61' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSound61_",
            "comment": " glyphiconSound61_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSound71'",
            "comment": " glyphiconSound71' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSound71_",
            "comment": " glyphiconSound71_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSoundDolby'",
            "comment": " glyphiconSoundDolby' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSoundDolby_",
            "comment": " glyphiconSoundDolby_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSoundStereo'",
            "comment": " glyphiconSoundStereo' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSoundStereo_",
            "comment": " glyphiconSoundStereo_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconStar'",
            "comment": " glyphiconStar' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconStarEmpty'",
            "comment": " glyphiconStarEmpty' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconStarEmpty_",
            "comment": " glyphiconStarEmpty_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconStar_",
            "comment": " glyphiconStar_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconStats'",
            "comment": " glyphiconStats' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconStats_",
            "comment": " glyphiconStats_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconStepBackward'",
            "comment": " glyphiconStepBackward' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconStepBackward_",
            "comment": " glyphiconStepBackward_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconStepForward'",
            "comment": " glyphiconStepForward' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconStepForward_",
            "comment": " glyphiconStepForward_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconStop'",
            "comment": " glyphiconStop' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconStop_",
            "comment": " glyphiconStop_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconSubtitles'",
            "comment": " glyphiconSubtitles' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconSubtitles_",
            "comment": " glyphiconSubtitles_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTag'",
            "comment": " glyphiconTag' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTag_",
            "comment": " glyphiconTag_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTags'",
            "comment": " glyphiconTags' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTags_",
            "comment": " glyphiconTags_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTasks'",
            "comment": " glyphiconTasks' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTasks_",
            "comment": " glyphiconTasks_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTextHeight'",
            "comment": " glyphiconTextHeight' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTextHeight_",
            "comment": " glyphiconTextHeight_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTextWidth'",
            "comment": " glyphiconTextWidth' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTextWidth_",
            "comment": " glyphiconTextWidth_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTh'",
            "comment": " glyphiconTh' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconThLarge'",
            "comment": " glyphiconThLarge' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconThLarge_",
            "comment": " glyphiconThLarge_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconThList'",
            "comment": " glyphiconThList' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconThList_",
            "comment": " glyphiconThList_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTh_",
            "comment": " glyphiconTh_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconThumbsDown'",
            "comment": " glyphiconThumbsDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconThumbsDown_",
            "comment": " glyphiconThumbsDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconThumbsUp'",
            "comment": " glyphiconThumbsUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconThumbsUp_",
            "comment": " glyphiconThumbsUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTime'",
            "comment": " glyphiconTime' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTime_",
            "comment": " glyphiconTime_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTint'",
            "comment": " glyphiconTint' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTint_",
            "comment": " glyphiconTint_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTower'",
            "comment": " glyphiconTower' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTower_",
            "comment": " glyphiconTower_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTransfer'",
            "comment": " glyphiconTransfer' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTransfer_",
            "comment": " glyphiconTransfer_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTrash'",
            "comment": " glyphiconTrash' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTrash_",
            "comment": " glyphiconTrash_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTreeConifer'",
            "comment": " glyphiconTreeConifer' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTreeConifer_",
            "comment": " glyphiconTreeConifer_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconTreeDeciduous'",
            "comment": " glyphiconTreeDeciduous' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconTreeDeciduous_",
            "comment": " glyphiconTreeDeciduous_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconUnchecked'",
            "comment": " glyphiconUnchecked' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconUnchecked_",
            "comment": " glyphiconUnchecked_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconUpload'",
            "comment": " glyphiconUpload' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconUpload_",
            "comment": " glyphiconUpload_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconUsd'",
            "comment": " glyphiconUsd' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconUsd_",
            "comment": " glyphiconUsd_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconUser'",
            "comment": " glyphiconUser' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconUser_",
            "comment": " glyphiconUser_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconVolumeDown'",
            "comment": " glyphiconVolumeDown' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconVolumeDown_",
            "comment": " glyphiconVolumeDown_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconVolumeOff'",
            "comment": " glyphiconVolumeOff' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconVolumeOff_",
            "comment": " glyphiconVolumeOff_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconVolumeUp'",
            "comment": " glyphiconVolumeUp' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconVolumeUp_",
            "comment": " glyphiconVolumeUp_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconWarningSign'",
            "comment": " glyphiconWarningSign' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconWarningSign_",
            "comment": " glyphiconWarningSign_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconWrench'",
            "comment": " glyphiconWrench' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconWrench_",
            "comment": " glyphiconWrench_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconZoomIn'",
            "comment": " glyphiconZoomIn' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconZoomIn_",
            "comment": " glyphiconZoomIn_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "glyphiconZoomOut'",
            "comment": " glyphiconZoomOut' ",
            "type": "Html.Shorthand.ClassString -> Html.Html msg"
          },
          {
            "name": "glyphiconZoomOut_",
            "comment": " glyphiconZoomOut_ ",
            "type": "Html.Html msg"
          },
          {
            "name": "navbar'",
            "comment": " navbar' ",
            "type": "Html.Shorthand.ClassString -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "navbarDefault'",
            "comment": " navbarDefault' ",
            "type": "Html.Shorthand.ClassString -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "navbarHeader_",
            "comment": " navbarHeader_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelBody_",
            "comment": " panelBody_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelDefault'",
            "comment": " A panel with the [default style](http://getbootstrap.com/components/#panels-heading).\n\n    import Html\n    import Html.Shorthand exposing (..)\n\n    type Action = NoOp | NewProject\n\n    actions : Mailbox Action\n    actions = Signal.mailbox NoOp\n\n    section'\n    { class = \"\"\n    , id = \"projects\"\n    }\n    [ panelDefault' \"My Projects\"               -- The heading\n      [ ( { icon = Just glyphiconPlusSign')     -- Optional buttons to the right of the heading\n          , label = Just \"New project\"\n          , tooltip = Just \"Create a new project\"\n          }\n        , (actions.address, NewProject)\n        )\n      ]\n      [ p_                                      -- Body contents\n        [ text \"Contents of the panel\"\n        ]\n      ]\n    ]\n",
            "type": "Html.Shorthand.TextString -> List ( Bootstrap.Html.BtnParam msg, msg ) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelDefault_",
            "comment": " panelDefault_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelHeading_",
            "comment": " panelHeading_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "panelTitle_",
            "comment": " panelTitle_ ",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "row_",
            "comment": " row_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "skipNavigation_",
            "comment": " Accessibility - Skip navigation\n\n    body_\n    [ skipNavigation' \"Skip to main content\"\n    , -- ...\n    , sectionc \"container\" \"content\"\n      [ -- ...\n      ]\n    ]\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "tableBodyStriped'",
            "comment": " A table with striped `tbody`s instead of rows. See [Can we have multiple &lt;tbody&gt; in same &lt;table&gt;?](http://stackoverflow.com/questions/3076708/can-we-have-multiple-tbody-in-same-table)\n",
            "type": "Html.Shorthand.ClassString -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tableBodyStriped_",
            "comment": "\n    import Html exposing (text)\n    import Html.Shorthand exposing (..)\n\n    tableBodyStriped_\n    [ thead_\n      [ th' {class = \"text-left\"} [ text  \"Item #\" ]\n      , th' {class = \"text-left\"} [ text \"Long Description\" ]\n      , th' {class = \"text-right\"} [ text \"Units\" ]\n      , th' {class = \"text-right\"} [ text \"Price\" ]\n      ]\n    , tbody_\n      [ tr_\n        [ td_ [ text \"X\" ]\n        , td_ [ text \"This is an X\"]\n        , td_ [ text \"55\"]\n        , td_ [ text \"$ 100\"]\n        ]\n      , tr_\n        [ Html.td [Html.colspan 4] [ text \"Comments....\" ]\n        ]\n      ]\n    , tbody_\n      [ tr_\n        [ td_ [ text \"Y\" ]\n        , td_ [ text \"This is an Y\"]\n        , td_ [ text \"3\"]\n        , td_ [ text \"$ 10\"]\n        ]\n      , tr_\n        [ Html.td [Html.colspan 4] [ text \"Comments....\" ]\n        ]\n      ]\n    ]\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tableStriped'",
            "comment": " A table with [striped rows](http://getbootstrap.com/css/#tables-striped)\n",
            "type": "Html.Shorthand.ClassString -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tableStriped_",
            "comment": "\n    import Html exposing (..)\n    import Html.Shorthand exposing (..)\n    import Bootstrap.Html exposing (..)\n\n    view : Html msg\n    view = tableStriped_\n      [ thead_\n        [ th' {class = \"text-left\"} [ text  \"Item #\" ]\n        , th' {class = \"text-left\"} [ text \"Long Description\" ]\n        , th' {class = \"text-right\"} [ text \"Units\" ]\n        , th' {class = \"text-right\"} [ text \"Price\" ]\n        ]\n      , tbody_\n        [ tr_\n          [ td_ [ text \"X\" ]\n          , td_ [ text \"This is an X\"]\n          , td_ [ text \"55\"]\n          , td_ [ text \"$ 100\"]\n          ]\n        , tr_\n          [ td_ [ text \"Y\" ]\n          , td_ [ text \"This is an Y\"]\n          , td_ [ text \"3\"]\n          , td_ [ text \"$ 10\"]\n          ]\n        ]\n      ]\n\n    main : Html msg\n    main = view\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "wellLg_",
            "comment": " wellLg_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "wellSm_",
            "comment": " wellSm_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "well_",
            "comment": " well_ ",
            "type": "List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Bootstrap.Html.Internal",
        "comment": " Internals for Bootstrap.Html See [Bootstrap.Html](http://package.elm-lang.org/packages/circuithub/elm-bootstrap-html/latest/Bootstrap-Html)\n\n@docs BtnParam, btnc, btncNoevent, colOffset\n",
        "aliases": [
          {
            "name": "BtnParam",
            "comment": " Button parameters\n",
            "args": [
              "msg"
            ],
            "type": "{ icon : Maybe.Maybe (Html.Html msg) , label : Maybe.Maybe Html.Shorthand.TextString , tooltip : Maybe.Maybe String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "btnc",
            "comment": " Helper for creating buttons\n",
            "type": "Html.Shorthand.ClassString -> String -> Bootstrap.Html.Internal.BtnParam msg -> msg -> Html.Html msg"
          },
          {
            "name": "btncNoevent",
            "comment": " Same as `btnc`, but without an event (used for submit buttons)\n",
            "type": "Html.Shorthand.ClassString -> String -> Bootstrap.Html.Internal.BtnParam msg -> Html.Html msg"
          },
          {
            "name": "colOffset",
            "comment": " Create a class string for the `col-__-__ col-__-offset-__` pattern\n",
            "type": "String -> Int -> Int -> Html.Shorthand.ClassString"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-html-shorthand",
    "version": "11.0.0",
    "docs": [
      {
        "name": "Html.Shorthand",
        "comment": " Shorthands for common Html elements\n\n# Interactive elements (Unsupported)\nThe following elements are not currently well supported and do not have shorthands:\n\n* [&lt;details&gt;, &lt;summary&gt;](http://caniuse.com/#feat=details)\n* [&lt;menu&gt;, &lt;menuitem&gt;](http://caniuse.com/#feat=menu)\n\n# Conventions\nThe following two conventions are used for shorthands. One example is provided for each.\n\n## Elision form\nMost attributes of the node are elided, only one or two arguments needs to be supplied.\n\n@docs div_\n\n## Idiomatic form\n\nThis form attempts to take a common sense record of parameters. This is a more expansive shorthand which\nwill not satisfy every need, but takes care of the usual cases while still encouraging uniformity.\n\n@docs img'\n\n# Basic types\nThe following types are all aliases for `String` and as such, only serve documentation purposes.\n\n@docs IdString, ClassString, UrlString, TextString, TextDirection\n\n# Event / handler types\n@docs EventDecodeError, FormUpdate, FieldUpdate, SelectUpdate, fieldUpdate, fieldUpdateContinuous, fieldUpdateFocusLost, fieldUpdateFallbackFocusLost, fieldUpdateFallbackContinuous\n\n# Element types\n@docs ClassParam, ClassIdParam, ClassCiteParam, AnchorParam, ModParam, ImgParam, IframeParam, EmbedParam, ObjectParam, MediaParam, VideoParam, AudioParam, FormParam, FieldsetParam, LabelParam, InputFieldParam, InputTextParam, InputMaybeTextParam, InputFloatParam, InputMaybeFloatParam, InputIntParam, InputMaybeIntParam, InputUrlParam, InputMaybeUrlParam, ButtonParam, SelectParam, OptionParam, OutputParam, ProgressParam, MeterParam\n\n# Encoders\n@docs encodeId, encodeClass\n\n# Idiomatic attributes\n@docs id', class'\n\n# Sections\n@docs body_, body', section_, section', nav_, nav', article_, article', aside'\n@docs h1_, h1', h2_, h2', h3_, h3', h4_, h4', h5_, h5', h6_, h6', header_, header', footer_, footer'\n@docs address_, address', main_\n\n# Grouping content\n@docs p_, p', pre_, pre', blockquote_, blockquote', ol_, ol', ul_, ul', li_, li', dl_, dl', dt', dd_, dd', hr_\n@docs figure', figcaption_, figcaption'\n@docs div_, div', a_, a', em_, em', strong_, strong', small_, small', s_, s'\n@docs cite_, cite', q_, q', dfn', abbr_, abbr'\n* time_ (TODO)\n* time' (TODO)\n@docs code_, code', var_, var', samp_, samp', kbd_, kbd'\n@docs sub_, sub', sup_, sup', i_, i', b_, b', u_, u', mark_, mark'\n@docs ruby_, ruby', rt_, rt', rp_, rp', bdi_, bdi', bdo'\n@docs span_, span'\n@docs br', wbr'\n\n# Edits\n@docs ins_, ins', del_, del'\n\n# Embedded content\n@docs img', img_, iframe', embed', object'\n@docs param', video_, video', audio_, audio'\n* source' (TODO)\n* track' (TODO)\n* svg' (TODO)\n* math' (TODO)\n\n# Tabular data\n@docs table_, table', caption_, caption'\n* colgroup' (TODO)\n* col' (TODO)\n@docs tbody_, tbody', thead_, thead', tfoot_, tfoot', tr_, tr', td_, td', th_, th'\n\n# Forms\n@docs form', fieldset_, fieldset', legend_, legend', label_, label'\n@docs inputField', inputText', inputMaybeText', inputFloat', inputMaybeFloat', inputInt', inputMaybeInt', inputUrl', inputMaybeUrl'\n* radio' (TODO)\n* checkbox' (TODO)\n@docs button_, button', buttonLink_, buttonLink', buttonSubmit_, buttonSubmit', buttonReset_, buttonReset'\n@docs select'\n* datalist' (TODO)\n* optgroup' (TODO)\n@docs option_, option'\n* textarea_ (TODO)\n* textarea' (TODO)\n* keygen_ (TODO)\n* keygen' (TODO)\n@docs output', progress', meter'\n\n",
        "aliases": [
          {
            "name": "AnchorParam",
            "comment": " See [AnchorParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#AnchorParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.AnchorParam"
          },
          {
            "name": "AudioParam",
            "comment": " See [AudioParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#AudioParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.AudioParam"
          },
          {
            "name": "ButtonParam",
            "comment": " See [ButtonParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ButtonParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.ButtonParam msg"
          },
          {
            "name": "ClassCiteParam",
            "comment": " See [ClassCiteParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ClassCiteParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassCiteParam"
          },
          {
            "name": "ClassIdParam",
            "comment": " See [ClassIdParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ClassIdParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassIdParam"
          },
          {
            "name": "ClassParam",
            "comment": " See [ClassParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ClassParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassParam"
          },
          {
            "name": "ClassString",
            "comment": " Class parameters will automatically be encoded via `encodeClass`\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassString"
          },
          {
            "name": "EmbedParam",
            "comment": " See [EmbedParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#EmbedParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.EmbedParam"
          },
          {
            "name": "EventDecodeError",
            "comment": " A field error is generated when an input fails to parse its input string during an attempt to produce the output value.\nThis gives the user an opportunity to specify a fallback behaviour or simply ignore the error, leaving the input in an intermediate state.\n\n* *event* - json event that generated this error\n* *reason* - error string describing the parse error\n\nSee also [EventDecodeError](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#EventDecodeError)\n\n",
            "args": [],
            "type": "Html.Shorthand.Type.EventDecodeError"
          },
          {
            "name": "FieldUpdate",
            "comment": " Update configuration for `input` fields.\n\n* *onInput* - continuously send messages on any input event (`onInput`)\n* *onEnter* - a message to send whenever the enter key is hit\n* *onKeyboardLost* - a message to send whenever the input field loses the keyboard cursor\n\nIn the future, if this can be made efficient, this may also support:\n\n* *onMouseMove* - a message to send whenever the mouse moves while the input field has keyboard focus\n\nSee also [FieldUpdate](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FieldUpdate)\n\n",
            "args": [
              "a",
              "msg"
            ],
            "type": "Html.Shorthand.Type.FieldUpdate a msg"
          },
          {
            "name": "FieldsetParam",
            "comment": " See [FieldsetParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FieldsetParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.FieldsetParam"
          },
          {
            "name": "FormParam",
            "comment": " See [FormParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FormParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.FormParam msg"
          },
          {
            "name": "FormUpdate",
            "comment": " Update configuration for a `form` element.\n\n* *onSubmit* - a submit action was triggered\n* *onEnter* - action to perform on enter key... see also [virtual-dom/pull/5#issuecomment-88444513](https://github.com/evancz/virtual-dom/pull/5#issuecomment-88444513)\n\nSee also [FormUpdate](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FormUpdate)\n\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.FormUpdate msg"
          },
          {
            "name": "IdString",
            "comment": " Id parameters will automatically be encoded via `encodeId`\n",
            "args": [],
            "type": "Html.Shorthand.Type.IdString"
          },
          {
            "name": "IframeParam",
            "comment": " See [IframeParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#IframeParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.IframeParam"
          },
          {
            "name": "ImgParam",
            "comment": " See [ImgParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ImgParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ImgParam"
          },
          {
            "name": "InputFieldParam",
            "comment": " See [InputFieldParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputFieldParam)\n",
            "args": [
              "a",
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputFieldParam a msg"
          },
          {
            "name": "InputFloatParam",
            "comment": " See [InputFloatParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputFloatParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputFloatParam msg"
          },
          {
            "name": "InputIntParam",
            "comment": " See [InputIntParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputIntParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputIntParam msg"
          },
          {
            "name": "InputMaybeFloatParam",
            "comment": " See [InputMaybeFloatParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeFloatParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputMaybeFloatParam msg"
          },
          {
            "name": "InputMaybeIntParam",
            "comment": " See [InputMaybeIntParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeIntParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputMaybeIntParam msg"
          },
          {
            "name": "InputMaybeTextParam",
            "comment": " See [InputMaybeTextParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeTextParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputMaybeTextParam msg"
          },
          {
            "name": "InputMaybeUrlParam",
            "comment": " See [InputMaybeUrlParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeUrlParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputMaybeUrlParam msg"
          },
          {
            "name": "InputTextParam",
            "comment": " See [InputTextParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputTextParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputTextParam msg"
          },
          {
            "name": "InputUrlParam",
            "comment": " See [InputUrlParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputUrlParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.InputUrlParam msg"
          },
          {
            "name": "LabelParam",
            "comment": " See [LabelParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#LabelParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.LabelParam"
          },
          {
            "name": "MediaParam",
            "comment": " See [MediaParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#MediaParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.MediaParam"
          },
          {
            "name": "MeterParam",
            "comment": " See [MeterParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#MeterParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.MeterParam"
          },
          {
            "name": "ModParam",
            "comment": " See [ModParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ModParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ModParam"
          },
          {
            "name": "ObjectParam",
            "comment": " See [ObjectParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ObjectParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ObjectParam"
          },
          {
            "name": "OptionParam",
            "comment": " See [OptionParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#OptionParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.OptionParam"
          },
          {
            "name": "OutputParam",
            "comment": " See [OutputParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#OutputParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.OutputParam"
          },
          {
            "name": "ProgressParam",
            "comment": " See [ProgressParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ProgressParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ProgressParam"
          },
          {
            "name": "SelectParam",
            "comment": " See [SelectParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#SelectParam)\n",
            "args": [
              "msg"
            ],
            "type": "Html.Shorthand.Type.SelectParam msg"
          },
          {
            "name": "SelectUpdate",
            "comment": " Update configuration for a `select` element.\n\n* *onSelect* - the selected option has changed.\n\nSee also [SelectUpdate](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#SelectUpdate)\n\n",
            "args": [
              "a",
              "msg"
            ],
            "type": "Html.Shorthand.Type.SelectUpdate a msg"
          },
          {
            "name": "TextString",
            "comment": " The string passed to a function taking this parameter will be rendered as textual content via `text`.\n",
            "args": [],
            "type": "Html.Shorthand.Type.TextString"
          },
          {
            "name": "UrlString",
            "comment": " Only valid urls should be passed to functions taking this parameter\n",
            "args": [],
            "type": "Html.Shorthand.Type.UrlString"
          },
          {
            "name": "VideoParam",
            "comment": " See [VideoParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#VideoParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.VideoParam"
          }
        ],
        "types": [
          {
            "name": "TextDirection",
            "comment": " Direction to output text\n",
            "args": [],
            "cases": [
              [
                "LeftToRight",
                []
              ],
              [
                "RightToLeft",
                []
              ],
              [
                "AutoDirection",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "a'",
            "comment": "",
            "type": "Html.Shorthand.AnchorParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "a_",
            "comment": " [&lt;a&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) represents a hyperlink , linking to another resource.\n",
            "type": "Html.Shorthand.UrlString -> Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "abbr'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "abbr_",
            "comment": " [&lt;abbr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr) represents an abbreviation or an acronym ; the expansion of the\nabbreviation can be represented in the title attribute.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "address'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "address_",
            "comment": " [&lt;address&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address) defines a section containing contact information.\n\n**Do:**\n* [place inside the &lt;footer&gt; where appropriate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address#Summary)\n\n**Don't:**\n* [represent an arbitrary, unrelated address](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address#Summary)\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "article'",
            "comment": "",
            "type": "Html.Shorthand.ClassIdParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "article_",
            "comment": " [&lt;article&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article) defines self-contained content that could exist independently of the rest\nof the content.\n\n**Do:**\n* [use &lt;article&gt; for self-contained components with informational content](http://html5doctor.com/the-article-element/)\n* [use &lt;article&gt; for blog entries, user-submitted comments, interactive educational gadgets](http://html5doctor.com/the-article-element/)\n\n**Don't:**\n* [confuse &lt;article&gt; with &lt;section&gt; which need not be self-contained](http://www.brucelawson.co.uk/2010/html5-articles-and-sections-whats-the-difference/)\n\n",
            "type": "Html.Shorthand.IdString -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "aside'",
            "comment": " [&lt;aside&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside) defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
            "type": "Html.Shorthand.ClassIdParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "audio'",
            "comment": "",
            "type": "Html.Shorthand.AudioParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "audio_",
            "comment": " [&lt;audio&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) represents a sound or audio stream.\n\nDoesn't allow for &lt;track&gt;s &lt;source&gt;s, please use `audio` for that.\n",
            "type": "Html.Shorthand.UrlString -> Html.Html msg"
          },
          {
            "name": "b'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "b_",
            "comment": " [&lt;b&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b) represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate voice.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "bdi'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "bdi_",
            "comment": " [&lt;bdi&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi) represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "bdo'",
            "comment": " [&lt;bdo&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo) represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
            "type": "Html.Shorthand.TextDirection -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "blockquote'",
            "comment": "",
            "type": "Html.Shorthand.ClassCiteParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "blockquote_",
            "comment": " [&lt;blockquote&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote) represents a content that is quoted from another source.\n\nThe idiomatic form uses a cite url, but an elision form is also provided.\n\n**Don't:**\n* use blockquote for short, inline quotations, we have &lt;`q'`&gt; for that\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "body'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "body_",
            "comment": " [&lt;body&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body) represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "br'",
            "comment": " [&lt;br&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br) represents a line break.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "button'",
            "comment": "",
            "type": "Html.Shorthand.ButtonParam msg -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "buttonLink'",
            "comment": "",
            "type": "Html.Shorthand.ButtonParam msg -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "buttonLink_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> msg -> Html.Html msg"
          },
          {
            "name": "buttonReset'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "buttonReset_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "buttonSubmit'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "buttonSubmit_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "button_",
            "comment": " [&lt;button&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) represents a button.\n",
            "type": "Html.Shorthand.TextString -> msg -> Html.Html msg"
          },
          {
            "name": "caption'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "caption_",
            "comment": " [&lt;caption&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption) represents the title of a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "cite'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "cite_",
            "comment": " [&lt;cite&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite) represents the title of a work.\n\n**Do:**\n* [consider using an anchor inside of the cite to link to the origin](http://html5doctor.com/cite-and-blockquote-reloaded/)\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "class'",
            "comment": " Encoded class attribute. Uses `encodeClass` to ensure that the classes are nicely normalized.\n",
            "type": "Html.Shorthand.ClassString -> Html.Attribute msg"
          },
          {
            "name": "code'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "code_",
            "comment": " [&lt;code&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code) represents computer code.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dd'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dd_",
            "comment": " [&lt;dd&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) represents the definition of the terms immediately listed before it.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "del'",
            "comment": "",
            "type": "Html.Shorthand.ModParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "del_",
            "comment": " [&lt;del&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del) defines a removal from the document.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dfn'",
            "comment": " [&lt;dfn&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn) represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
            "type": "Html.Shorthand.ClassIdParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "div'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "div_",
            "comment": " [&lt;div&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div) represents a generic container with no special meaning.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dl'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dl_",
            "comment": " [&lt;dl&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl) defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dt'",
            "comment": " [&lt;dt&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt) represents a term defined by the next `dd`.\n",
            "type": "Html.Shorthand.ClassIdParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "em'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "em_",
            "comment": " [&lt;em&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em) represents emphasized text, like a stress accent.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "embed'",
            "comment": " [&lt;embed&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed) represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
            "type": "Html.Shorthand.EmbedParam -> Html.Html msg"
          },
          {
            "name": "encodeClass",
            "comment": " A simplistic way of encoding of `class` attributes into a [sane format](http://stackoverflow.com/a/72577).\nThis is used internally by all of the shorthands that take a `ClassString`.\n\n* Everything is turned into lowercase\n* Only alpha-numeric characters (a-z,A-Z,0-9), hyphens (-) and underscores (_) are passed through the filter.\n* Trim hyphens (-) and underscores (_) on the sides of each class.\n* If the first character is a number, 'x' will be prepended.\n* Empty strings are allowed\n\nE.g.\n\n    encodeClass \"Color.encoding: BLUE-GREEN\" == \"colorencoding blue-green\"\n    encodeClass \"99-bottles... 98-bottles\" == \"x99-bottles x98-bottles\"\n    encodeClass \"_internal-class-\" == \"internal-class\"\n    encodeClass \" \\t \\n\" == \"\"\n\n",
            "type": "Html.Shorthand.ClassString -> Html.Shorthand.ClassString"
          },
          {
            "name": "encodeId",
            "comment": " A simplistic way of encoding `id` attributes into a [sane format](http://stackoverflow.com/a/72577).\nThis is used internally by all of the shorthands that take an `IdString`.\n\n* Everything is turned into lowercase\n* Only alpha-numeric characters (a-z,A-Z,0-9), hyphens (-) and underscores (_) are passed through the filter.\n* Trim hyphens (-) and underscores (_) off the sides.\n* If the first character is a number, 'x' will be prepended.\n* Empty strings are allowed\n\nE.g.\n\n    encodeId \"Elmo teaches Elm!\" == \"elmo-teaches-elm\"\n    encodeId \"99 bottles of beer, 98 bottles...\" == \"x99-bottles-of-beer-98-bottles\"\n    encodeId \"_internal- -<-identifier->-\" == \"internal-identifier\"\n    encodeId \" \\t \\n\" == \"\"\n\n",
            "type": "Html.Shorthand.IdString -> Html.Shorthand.IdString"
          },
          {
            "name": "fieldUpdate",
            "comment": " Default field update handlers. Use this to select only one or two handlers.\n\n    { fieldUpdate\n    | onInput <- Just (\\r -> case r of  \n                                Ok x -> Just (SetValue x)\n                                Err _ -> Just (SetError \"Input error\"))\n    }\n\n",
            "type": "Html.Shorthand.FieldUpdate a msg"
          },
          {
            "name": "fieldUpdateContinuous",
            "comment": " Good configuration for continuously updating fields that don't have any invalid states, or are restricted by a pattern.\n",
            "type": "{ onInput : a -> msg } -> Html.Shorthand.FieldUpdate a msg"
          },
          {
            "name": "fieldUpdateFallbackContinuous",
            "comment": " Continuously update the field, handling invalid states on any input event.\nUse this configuration to generate error notifications rapidly.\n\n    inputField'\n      { update = fieldUpdateFallbackContinuous\n                  { -- Show an error notification (e.g. highlight the input field)\n                    onFallback _ = InvalidTemperature\n                  , -- Update the temperature if it parsed correctly\n                    onInput v = SetTemperature v\n                  }\n      , ...\n      }\n\nNote that this configuration does not work well with `inputFloat'`/`inputMaybeFloat'` and `inputInt'`/`inputMaybeInt'` fields due to\nthe strange way that browsers treat numeric inputs. This update method can be used to implement custom field types however.\n\n",
            "type": "{ onFallback : String -> msg, onInput : a -> msg } -> Html.Shorthand.FieldUpdate a msg"
          },
          {
            "name": "fieldUpdateFallbackFocusLost",
            "comment": " Continuously update the field, handling invalid states only when the focus is lost.\nThe input element will try to consolidate the field with its value in all of these scenarios:\n\n* During input event, if and only if the input parses correctly\n* When the return key (ENTER) is hit; resets to the last known value if it couldn't parse\n* When the keyboard cursor is moved to a different element; resets to the last known value if it couldn't parse\n\nIn the future, if this can be made efficient, it will also support:\n* When the element has keyboard focus and the mouse cursor is moved ; resets to the last known value if it couldn't parse\n\nThis function takes an explicit fallback function that can usually be set to the previous value in order to have the field simply reset.\n\n    inputField'\n      { update = fieldUpdateFallbackFocusLost\n                  { -- Reset the input to the current temperature\n                    onFallback _ = SetTemperature currentTemperature\n                  , -- Update the temperature if it parsed correctly\n                    onInput v = SetTemperature v\n                  }\n      , ...\n      }\n\nNote that this configuration does not work well with `inputFloat'`/`inputMaybeFloat'` and `inputInt'`/`inputMaybeInt'` fields due to\nthe strange way that browsers treat numeric inputs. This update method can be used to implement custom field types however.\n\n",
            "type": "{ onFallback : String -> msg, onInput : a -> msg } -> Html.Shorthand.FieldUpdate a msg"
          },
          {
            "name": "fieldUpdateFocusLost",
            "comment": " Use with fields that should consolidate their value when the focus moved.\n",
            "type": "{ onInput : a -> msg } -> Html.Shorthand.FieldUpdate a msg"
          },
          {
            "name": "fieldset'",
            "comment": "",
            "type": "Html.Shorthand.FieldsetParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "fieldset_",
            "comment": " [&lt;fieldset&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset) represents a set of controls.\n",
            "type": "Bool -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figcaption'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figcaption_",
            "comment": " [&lt;figcaption&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption) represents the legend of a figure.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figure'",
            "comment": " [&lt;figure&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure) represents a figure illustrated as part of the document.\n\n**Do:**\n* [use figure for captioned content](http://html5doctor.com/the-figure-figcaption-elements/)\n* [use figure for things other than images: video, audio, a chart, a table etc](http://html5doctor.com/the-figure-figcaption-elements/)\n\n**Don't:**\n* [turn every image into a figure](http://html5doctor.com/avoiding-common-html5-mistakes/#figure)\n\n",
            "type": "Html.Shorthand.ClassIdParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "footer'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "footer_",
            "comment": " [&lt;footer&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer) defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "form'",
            "comment": " [&lt;form&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) represents a form , consisting of controls, that can be submitted to a\nserver for processing.\n\nIn future `Nothing` may mask out the default submit on Enter key behaviour.\nSee [virtual-dom/pull/5#issuecomment-88444513](https://github.com/evancz/virtual-dom/pull/5#issuecomment-88444513) and [stackoverflow](http://stackoverflow.com/a/587575/167485).\n",
            "type": "Html.Shorthand.FormParam msg -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h1'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h1_",
            "comment": " [&lt;h*n*&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) provide titles for sections and subsections, describing the topic it introduces.\n\n**Do:**\n* [use &lt;h*n*&gt; to define a document outline](http://www.paciellogroup.com/blog/2013/10/html5-document-outline/)\n* [try to have only one first level &lt;h*n*&gt; on a page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [introduce &lt;section&gt;s with headings](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n\n**Don't:**\n* [skip &lt;h*n*&gt; levels if you can help it](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [style &lt;h*n*&gt;s using html5 &lt;section&gt;s](http://www.stubbornella.org/content/2011/09/06/style-headings-using-html5-sections/)\n* [use &lt;h*n*&gt; for subtitles, subheadings](http://html5doctor.com/howto-subheadings/)\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "h2'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h2_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "h3'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h3_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "h4'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h4_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "h5'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h5_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "h6'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h6_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "header'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "header_",
            "comment": " [&lt;header&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header) defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n\n**Don't:**\n* [overuse &lt;header&gt;](http://html5doctor.com/avoiding-common-html5-mistakes/#header-hgroup)\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "hr_",
            "comment": " [&lt;hr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr) represents a thematic break between paragraphs of a section or article or\nany longer content.\n\nNo other form is provided since hr should probably not have any classes or contents.\n\n",
            "type": "Html.Html msg"
          },
          {
            "name": "i'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "i_",
            "comment": " [&lt;i&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i) represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "id'",
            "comment": " Encoded id attribute. Uses `encodeId` to ensure that the id is nicely normalized.\n",
            "type": "Html.Shorthand.IdString -> Html.Attribute msg"
          },
          {
            "name": "iframe'",
            "comment": " [&lt;iframe&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) embedded an HTML document.\n",
            "type": "Html.Shorthand.IframeParam -> Html.Html msg"
          },
          {
            "name": "img'",
            "comment": " [&lt;img&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) represents an image.\n",
            "type": "Html.Shorthand.ImgParam -> Html.Html msg"
          },
          {
            "name": "img_",
            "comment": "",
            "type": "Int -> Int -> Html.Shorthand.UrlString -> String -> Html.Html msg"
          },
          {
            "name": "inputField'",
            "comment": " [&lt;input&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) represents a typed data field allowing the user to edit the data.\n\nIn order to disable an input field, use `fieldset_ False`.\n",
            "type": "Html.Shorthand.InputFieldParam a msg -> List (Html.Attribute msg) -> Html.Html msg"
          },
          {
            "name": "inputFloat'",
            "comment": "",
            "type": "Html.Shorthand.InputFloatParam msg -> Html.Html msg"
          },
          {
            "name": "inputInt'",
            "comment": "",
            "type": "Html.Shorthand.InputIntParam msg -> Html.Html msg"
          },
          {
            "name": "inputMaybeFloat'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeFloatParam msg -> Html.Html msg"
          },
          {
            "name": "inputMaybeInt'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeIntParam msg -> Html.Html msg"
          },
          {
            "name": "inputMaybeText'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeTextParam msg -> Html.Html msg"
          },
          {
            "name": "inputMaybeUrl'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeUrlParam msg -> Html.Html msg"
          },
          {
            "name": "inputText'",
            "comment": "",
            "type": "Html.Shorthand.InputTextParam msg -> Html.Html msg"
          },
          {
            "name": "inputUrl'",
            "comment": "",
            "type": "Html.Shorthand.InputUrlParam msg -> Html.Html msg"
          },
          {
            "name": "ins'",
            "comment": "",
            "type": "Html.Shorthand.ModParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ins_",
            "comment": " [&lt;ins&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins) defines an addition to the document.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "kbd'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "kbd_",
            "comment": " [&lt;kbd&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd) represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n\n    instructions : Html msg\n    instructions =\n      p_\n        [ text \"Press \"\n        , kbd_\n          [ kbd_ [ text \"Ctrl\" ]\n          , text \"+\"\n          , kbd_ [ text \"S\"]\n          ]\n        , text \" to save this document.\"\n        ]\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "label'",
            "comment": "",
            "type": "Html.Shorthand.LabelParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "label_",
            "comment": " [&lt;label&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) represents the caption of a form control.\n",
            "type": "Html.Shorthand.IdString -> Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "legend'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "legend_",
            "comment": " [&lt;legend&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend) represents the caption for a `fieldset`.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "li'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "li_",
            "comment": " [&lt;li&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) defines a item of an enumeration list.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "main_",
            "comment": " [&lt;main&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) defines the main or important content in the document. There is only one\n`main` element in the document.\n\nNote that main' is provided by [elm-html](http://package.elm-lang.org/packages/evancz/elm-html/latest/Html#main'), not by this package which only provides `main_`.\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "mark'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "mark_",
            "comment": " [&lt;mark&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark) represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "meter'",
            "comment": " [&lt;meter&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter) represents a scalar measurement (or a fractional value), within a known range.\n",
            "type": "Html.Shorthand.MeterParam -> String -> Html.Html msg"
          },
          {
            "name": "nav'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "nav_",
            "comment": " [&lt;nav&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav) defines a section that contains only navigation links.\n\n**Do:**\n* [use &lt;nav&gt; for major navigation](http://html5doctor.com/avoiding-common-html5-mistakes/#nav-external)\n\n**Don't:**\n* [wrap all lists of links in &lt;nav&gt;](http://html5doctor.com/avoiding-common-html5-mistakes/#nav-external)\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "object'",
            "comment": " [&lt;object&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object) represents an external resource , which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
            "type": "Html.Shorthand.ObjectParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ol'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ol_",
            "comment": " [&lt;ol&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol) defines an ordered list of items.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "option'",
            "comment": "",
            "type": "Html.Shorthand.OptionParam -> Html.Html msg"
          },
          {
            "name": "option_",
            "comment": " [&lt;option&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option) represents an option in a `select` element or a suggestion of a `datalist` element.\n",
            "type": "Html.Shorthand.TextString -> Bool -> Html.Html msg"
          },
          {
            "name": "output'",
            "comment": " [&lt;output&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output) represents the result of a calculation.\n",
            "type": "Html.Shorthand.OutputParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "p'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "p_",
            "comment": " [&lt;p&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) defines a portion that should be displayed as a paragraph of text.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "param'",
            "comment": " [&lt;param&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param) defines parameters for use by plug-ins invoked by `object` elements.\n",
            "type": "String -> String -> Html.Html msg"
          },
          {
            "name": "pre'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "pre_",
            "comment": " [&lt;pre&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre) indicates that its content is preformatted and that this format must be\npreserved.\n\n**Do:**\n* [use &lt;pre&gt; for blocks of whitespace sensitive text that must not wrap](http://stackoverflow.com/a/4611735)\n* use &lt;pre&gt; as a wrapper for blocks &lt;`code_`&gt;\n* use &lt;pre&gt; as a wrapper for blocks of &lt;`samp_`&gt; output from a computer program\n\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "progress'",
            "comment": " [&lt;progress&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress) represents the completion progress of a task.\n",
            "type": "Html.Shorthand.ProgressParam -> String -> Html.Html msg"
          },
          {
            "name": "q'",
            "comment": "",
            "type": "Html.Shorthand.ClassCiteParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "q_",
            "comment": " [&lt;q&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q) represents an inline quotation.\n\nThe idiomatic form uses a cite url, but the elision is also provided.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "rp'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "rp_",
            "comment": " [&lt;rp&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp) represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "rt'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "rt_",
            "comment": " [&lt;rt&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt) represents the text of a ruby annotation .\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "ruby'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ruby_",
            "comment": " [&lt;ruby&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby) represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "s'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "s_",
            "comment": " [&lt;s&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s) represents content that is no longer accurate or relevant.\n\n**Don't:**\n* [use &lt;s&gt; for indicating document edits, use &lt;del&gt; or &lt;ins&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s#Summary)\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "samp'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "samp_",
            "comment": " [&lt;samp&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp) represents the output of a program or a computer.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "section'",
            "comment": "",
            "type": "Html.Shorthand.ClassIdParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "section_",
            "comment": " [&lt;section&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section) defines a section in a document. Use sections to construct a document outline.\n\n**Do:**\n* [use &lt;section&gt;s to define document outlines](http://html5doctor.com/outlines/)\n* [...but use &lt;h*n*&gt;s carefully](http://www.paciellogroup.com/blog/2013/10/html5-document-outline/)\n\n**Don't:**\n* [use &lt;section&gt; as a wrapper for styling](http://html5doctor.com/avoiding-common-html5-mistakes/#section-wrapper)\n\n",
            "type": "Html.Shorthand.IdString -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "select'",
            "comment": " [&lt;select&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) represents a control allowing selection among a set of options.\n",
            "type": "Html.Shorthand.SelectParam msg -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "small'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "small_",
            "comment": " [&lt;small&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small) represents a side comment , that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n\n**Don't:**\n  * [use small for pure styling](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small#Summary)\n\n**Do:**\n  * [use small for side-comments and small print, including copyright and legal text](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small#Summary)\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "span'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "span_",
            "comment": " [&lt;span&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span) represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like class', lang, or dir.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "strong'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "strong_",
            "comment": " [&lt;strong&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) represents especially important text.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "sub'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "sub_",
            "comment": " [&lt;sub&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub) represent a subscript.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "sup'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "sup_",
            "comment": " [&lt;sup&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup) represent a superscript.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "table'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "table_",
            "comment": " [&lt;table&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) represents data with more than one dimension.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tbody'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tbody_",
            "comment": " [&lt;tbody&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody) represents the block of rows that describes the concrete data of a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "td'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "td_",
            "comment": " [&lt;td&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td) represents a data cell in a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tfoot'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tfoot_",
            "comment": " [&lt;tfoot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot) represents the block of rows that describes the column summaries of a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "th'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "th_",
            "comment": " [&lt;th&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th) represents a header cell in a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "thead'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "thead_",
            "comment": " [&lt;thead&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead) represents the block of rows that describes the column labels of a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tr'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tr_",
            "comment": " [&lt;tr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr) represents a row of cells in a table.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "u'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "u_",
            "comment": " [&lt;u&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u) represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "ul'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ul_",
            "comment": " [&lt;ul&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) defines an unordered list of items.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "var'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "var_",
            "comment": " [&lt;var&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var) represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
            "type": "Html.Shorthand.TextString -> Html.Html msg"
          },
          {
            "name": "video'",
            "comment": "",
            "type": "Html.Shorthand.VideoParam -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "video_",
            "comment": " [&lt;video&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) represents a video, the associated audio and captions, and controls.\n\nDoesn't allow for &lt;track&gt;s &lt;source&gt;s, please use `video` for that.\n",
            "type": "Html.Shorthand.UrlString -> Html.Html msg"
          },
          {
            "name": "wbr'",
            "comment": " [&lt;wbr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr) represents a line break opportunity , that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
            "type": "Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Html.Shorthand.Internal",
        "comment": " Internals for Html.Shorthand See [Html.Shorthand](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand)\n\n@docs encodeId, encodeClass, class', id'\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "class'",
            "comment": " ",
            "type": "Html.Shorthand.Type.ClassString -> Html.Attribute msg"
          },
          {
            "name": "encodeClass",
            "comment": " ",
            "type": "Html.Shorthand.Type.ClassString -> Html.Shorthand.Type.ClassString"
          },
          {
            "name": "encodeId",
            "comment": " ",
            "type": "Html.Shorthand.Type.IdString -> Html.Shorthand.Type.IdString"
          },
          {
            "name": "id'",
            "comment": " ",
            "type": "Html.Shorthand.Type.IdString -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Html.Shorthand.Event",
        "comment": " Shorthands for common Html events\n\n# Events\n@docs onInput', onEnter, onChange, onKeyboardLost, onMouseLost\n\n# Special decoders\n@docs messageDecoder\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "messageDecoder",
            "comment": " A special decoder that allows you to mix event decoding logic with message generation.\nThis function takes an existing event decoder and passes the result of the parser along in order to produce an optional message directly.\nThis provides a mechanism for altering messages if parse errors occur in the decoder.\n\n    messageDecoder targetValueFloat <| \\r ->\n      case r of\n        Ok temp -> Just <| SetTemperature temp\n        Err _   -> Just <| SetError \"Please enter a valid temperature\"\n",
            "type": "Json.Decode.Decoder a -> (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe msg) -> Json.Decode.Decoder msg"
          },
          {
            "name": "onChange",
            "comment": " Fires when a \"change\" event is triggered.\n",
            "type": "Json.Decode.Decoder a -> (a -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onEnter",
            "comment": " Fires off the message when the `Enter` key is pressed (on keydown).\n",
            "type": "Json.Decode.Decoder a -> (a -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onInput'",
            "comment": " Similar to onInput, but uses a decoder to return the internal state of an input field.\n",
            "type": "Json.Decode.Decoder a -> (a -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onKeyboardLost",
            "comment": " Similar to onBlur, but uses a decoder to return the internal state of an input field.\n",
            "type": "Json.Decode.Decoder a -> (a -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onMouseLost",
            "comment": " Similar to onMouseLeave, but uses a decoder to return the internal state of an input field.\n",
            "type": "Json.Decode.Decoder a -> (a -> msg) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Html.Shorthand.Type",
        "comment": " Types used by the shorthand. All of these types are re-exported by `Html.Shorthand` so this module is only useful if\nyou aren't already importing Html.Shorthand.\n\n# Common types\n@docs IdString, ClassString, UrlString, TextString\n\n# Event / handler types\n@docs EventDecodeError, FormUpdate, FieldUpdate, ButtonUpdate, SelectUpdate\n\n# Element parameters\n@docs ClassParam, ClassIdParam, ClassCiteParam, AnchorParam, ModParam, ImgParam, IframeParam, EmbedParam, ObjectParam, MediaParam, VideoParam, AudioParam, FormParam, FieldsetParam, LabelParam, InputFieldParam, InputTextParam, InputMaybeTextParam, InputFloatParam, InputMaybeFloatParam, InputIntParam, InputMaybeIntParam, InputUrlParam, InputMaybeUrlParam, ButtonParam, SelectParam, OptionParam, OutputParam, ProgressParam, MeterParam\n\n",
        "aliases": [
          {
            "name": "AnchorParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , href : Html.Shorthand.Type.UrlString }"
          },
          {
            "name": "AudioParam",
            "comment": " ",
            "args": [],
            "type": "Html.Shorthand.Type.MediaParam"
          },
          {
            "name": "ButtonParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , update : Html.Shorthand.Type.ButtonUpdate msg }"
          },
          {
            "name": "ButtonUpdate",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ onClick : msg }"
          },
          {
            "name": "ClassCiteParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , cite : Html.Shorthand.Type.UrlString }"
          },
          {
            "name": "ClassIdParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , id : Html.Shorthand.Type.IdString }"
          },
          {
            "name": "ClassParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString }"
          },
          {
            "name": "ClassString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "EmbedParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , id : Html.Shorthand.Type.IdString , src : Html.Shorthand.Type.UrlString , type' : String , useMapName : Maybe.Maybe Html.Shorthand.Type.IdString , height : Int , width : Int }"
          },
          {
            "name": "EventDecodeError",
            "comment": " ",
            "args": [],
            "type": "{ event : Json.Decode.Value, reason : String }"
          },
          {
            "name": "FieldUpdate",
            "comment": " ",
            "args": [
              "a",
              "msg"
            ],
            "type": "{ onInput : Maybe.Maybe (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe msg) , onEnter : Maybe.Maybe (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe msg) , onKeyboardLost : Maybe.Maybe (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe msg) }"
          },
          {
            "name": "FieldsetParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString, disabled : Bool }"
          },
          {
            "name": "FormParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , novalidate : Bool , update : Html.Shorthand.Type.FormUpdate msg }"
          },
          {
            "name": "FormUpdate",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ onSubmit : Maybe.Maybe msg, onEnter : Maybe.Maybe msg }"
          },
          {
            "name": "IdString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "IframeParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , src : Html.Shorthand.Type.UrlString , width : Int , height : Int , sandbox : Maybe.Maybe String , seamless : Bool }"
          },
          {
            "name": "ImgParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , src : Html.Shorthand.Type.UrlString , width : Int , height : Int , alt : String }"
          },
          {
            "name": "InputFieldParam",
            "comment": " ",
            "args": [
              "a",
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , update : Html.Shorthand.Type.FieldUpdate a msg , type' : String , pattern : Maybe.Maybe String , required : Bool , decoder : Json.Decode.Decoder a }"
          },
          {
            "name": "InputFloatParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Float , min : Maybe.Maybe Float , max : Maybe.Maybe Float , step : Maybe.Maybe Float , update : Html.Shorthand.Type.FieldUpdate Float msg }"
          },
          {
            "name": "InputIntParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Int , min : Maybe.Maybe Int , max : Maybe.Maybe Int , step : Maybe.Maybe Int , update : Html.Shorthand.Type.FieldUpdate Int msg }"
          },
          {
            "name": "InputMaybeFloatParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe Float , min : Maybe.Maybe Float , max : Maybe.Maybe Float , step : Maybe.Maybe Float , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe Float) msg }"
          },
          {
            "name": "InputMaybeIntParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe Int , min : Maybe.Maybe Int , max : Maybe.Maybe Int , step : Maybe.Maybe Int , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe Int) msg }"
          },
          {
            "name": "InputMaybeTextParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe String , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe String) msg }"
          },
          {
            "name": "InputMaybeUrlParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe Html.Shorthand.Type.UrlString , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe Html.Shorthand.Type.UrlString) msg }"
          },
          {
            "name": "InputTextParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : String , required : Bool , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate String msg }"
          },
          {
            "name": "InputUrlParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Html.Shorthand.Type.UrlString , required : Bool , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate Html.Shorthand.Type.UrlString msg }"
          },
          {
            "name": "LabelParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , for : Html.Shorthand.Type.IdString }"
          },
          {
            "name": "MediaParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , src : Maybe.Maybe Html.Shorthand.Type.UrlString , autoplay : Bool , controls : Bool , loop : Bool , preload : Maybe.Maybe String , poster : Maybe.Maybe Html.Shorthand.Type.UrlString , volume : Maybe.Maybe Float }"
          },
          {
            "name": "MeterParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , value : Float , min : Float , max : Float , low : Maybe.Maybe Float , high : Maybe.Maybe Float , optimum : Maybe.Maybe Float }"
          },
          {
            "name": "ModParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , cite : String , datetime : String }"
          },
          {
            "name": "ObjectParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , data : Html.Shorthand.Type.UrlString , type' : String , useMapName : Maybe.Maybe Html.Shorthand.Type.IdString , height : Int , width : Int }"
          },
          {
            "name": "OptionParam",
            "comment": " ",
            "args": [],
            "type": "{ label : String, value : String, selected : Bool }"
          },
          {
            "name": "OutputParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , for : List Html.Shorthand.Type.IdString }"
          },
          {
            "name": "ProgressParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , value : Float , max : Float }"
          },
          {
            "name": "SelectParam",
            "comment": " ",
            "args": [
              "msg"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , update : Html.Shorthand.Type.SelectUpdate String msg }"
          },
          {
            "name": "SelectUpdate",
            "comment": " ",
            "args": [
              "a",
              "msg"
            ],
            "type": "{ onSelect : a -> msg }"
          },
          {
            "name": "TextString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "UrlString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "VideoParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , src : Maybe.Maybe Html.Shorthand.Type.UrlString , width : Int , height : Int , videoHeight : Int , videoWidth : Int , autoplay : Bool , controls : Bool , loop : Bool , preload : Maybe.Maybe String , poster : Maybe.Maybe Html.Shorthand.Type.UrlString , volume : Maybe.Maybe Float }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "cobalamin/history-tree",
    "version": "2.1.0",
    "docs": [
      {
        "name": "HistoryTree",
        "comment": " This library defines a tree structure that contains a complete history of\nsome parent and child states, with infinitely many different timelines.\n\nYou can undo/redo along this timeline, and continue to do new actions from any point in time, without losing the other timeline you had created earlier.\n\n# Definition\n@docs HistoryTree, Index\n\n# Creation and basic usage\n@docs init, current, undo, redo, branchCount\n\n# Manipulation\n@docs apply, push\n\n# Checks\n@docs canUndo, canRedo\n\n# Changing focus\n@docs goto, rewind\n",
        "aliases": [
          {
            "name": "HistoryTree",
            "comment": " A tree that has a focus on a certain point in its history.\n",
            "args": [
              "a"
            ],
            "type": "FocusTree.FocusTree a"
          },
          {
            "name": "Index",
            "comment": " The index pointing at a certain subtree. An alias for Int.\n",
            "args": [],
            "type": "FocusTree.Index"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Push a new history entry calculated from the current value onto the tree, and focus on it.\nLike `push`, but with the new value being a transformation of the current point in history.\n",
            "type": "(a -> a) -> HistoryTree.HistoryTree a -> HistoryTree.HistoryTree a"
          },
          {
            "name": "branchCount",
            "comment": " Returns the count of child timeline branches from the currently focussed point.\nCan be used to e.g. show several different Redo buttons for each child branch.\n",
            "type": "HistoryTree.HistoryTree a -> Int"
          },
          {
            "name": "canRedo",
            "comment": " Returns True if there is any later (child) points in history to switch to,\nFalse if we're at a point in time that has no child points in time.\n\nThis can be useful for the same reasons as `canUndo`. It might be a bit too generic for most use cases, since there's possibly multiple redo paths to take.\n",
            "type": "HistoryTree.HistoryTree a -> Bool"
          },
          {
            "name": "canUndo",
            "comment": " Returns True if there is a previous (parent) point in history to switch to,\nFalse if we're already at the earliest point in time.\n\nThis is useful for UIs based on using these trees: You can, for example, disable an \"Undo\" button if this returns False.\n",
            "type": "HistoryTree.HistoryTree a -> Bool"
          },
          {
            "name": "current",
            "comment": " Get the value at the current (focussed) point in history.\n",
            "type": "HistoryTree.HistoryTree a -> a"
          },
          {
            "name": "goto",
            "comment": " Try to traverse the tree downwards to a certain point in history.\nThis is like repeated applications of `redo` - you can think of it as taking a described path to the point in history.\nReturns a `Just` value containing the history tree with the chosen history point in focus,\n`Nothing` when there is no history point at the given path to be found.\n",
            "type": "List HistoryTree.Index -> HistoryTree.HistoryTree a -> Maybe.Maybe (HistoryTree.HistoryTree a)"
          },
          {
            "name": "init",
            "comment": " Make a new history tree with an initial (root) value.\n",
            "type": "a -> HistoryTree.HistoryTree a"
          },
          {
            "name": "push",
            "comment": " Push some new history entry onto the tree, and focus on it.\n",
            "type": "a -> HistoryTree.HistoryTree a -> HistoryTree.HistoryTree a"
          },
          {
            "name": "redo",
            "comment": " Try to redo a certain history child. These are numbered with Int indices.\nReturns a `Just` value containing the history tree with the chosen child in focus,\n`Nothing` when there is no child with the given index available.\n",
            "type": "HistoryTree.Index -> HistoryTree.HistoryTree a -> Maybe.Maybe (HistoryTree.HistoryTree a)"
          },
          {
            "name": "rewind",
            "comment": " Rewind history, focussing on the first point in time.\nUseful for drawing a tree, since for that, you need to traverse it downwards from the top.\n",
            "type": "HistoryTree.HistoryTree a -> HistoryTree.HistoryTree a"
          },
          {
            "name": "undo",
            "comment": " Try to undo one step on the current history tree.\nReturns a `Just` value containing the new history tree if it's possible,\n`Nothing` when already at the initial point of history.\n",
            "type": "HistoryTree.HistoryTree a -> Maybe.Maybe (HistoryTree.HistoryTree a)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "coreytrampe/elm-vendor",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Vendor",
        "comment": " A tiny module that detects the browser vendor prefix\n\n```elm\ndisplayValue : String\ndisplayValue =\n    if Vendor.prefix == Vendor.Webkit\n    then \"-webkit-flex\"\n    else \"flex\"\n```\n\n@docs Prefix, prefix\n",
        "aliases": [],
        "types": [
          {
            "name": "Prefix",
            "comment": " A union of prefix tags\n",
            "args": [],
            "cases": [
              [
                "Moz",
                []
              ],
              [
                "Webkit",
                []
              ],
              [
                "MS",
                []
              ],
              [
                "O",
                []
              ],
              [
                "Unknown",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "prefix",
            "comment": " The detected vendor\n",
            "type": "Vendor.Prefix"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "damienklinnert/elm-hue",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Hue",
        "comment": " Control your Philips Hue devices with Elm!\n\nCheck the [README for a general introduction into this module](http://package.elm-lang.org/packages/damienklinnert/elm-hue/latest/).\n\n# Bridge\n\n## Referencing the Bridge\n@docs BridgeReference, bridgeRef\n\n# Lights\n\n## Referencing Lights\n@docs LightReference, lightRef\n\n## Querying Light Details\n@docs listLights, LightDetails\n\n## Retrieving Light State\n@docs getLightState, LightState, LightEffect, Alert\n\n## Updating Light State\n@docs updateLight, LightUpdate, turnOn, turnOff, brightness, hue, saturation, colorTemperature, singleAlert, loopedAlert, noEffect, colorLoopEffect, transition\n\n# Errors\n\n@docs Error\n",
        "aliases": [
          {
            "name": "LightDetails",
            "comment": " Details about a light like identifier, software version and bulb type.\n",
            "args": [],
            "type": "{ id : String , name : String , uniqueId : String , luminaireUniqueId : Maybe.Maybe String , bulbType : String , modelId : String , manufacturerName : Maybe.Maybe String , softwareVersion : String }"
          },
          {
            "name": "LightState",
            "comment": " Describes the current state of a light.\n\n - `on`: is this light turned on?\n - `brightness`: a range from `1` (minimal brightness) to `254` (maximal brightness)\n - `hue`: a range from `0` to `65535`, with both of them resulting in red, `25500` in green and\n   `46920` in blue\n - `saturation`: range from `0` (white) to `254` (fully colored)\n - `colorTemperature`: The Mired Color temperature\n - `reachable`: is the light reachable?\n",
            "args": [],
            "type": "{ on : Bool , brightness : Int , hue : Int , saturation : Int , effect : Hue.LightEffect , colorTemperature : Int , alert : Hue.Alert , reachable : Bool }"
          }
        ],
        "types": [
          {
            "name": "Alert",
            "comment": " A temporary change to a light's state.\n\n - `NoAlert`: Disable any existing alerts.\n - `SingleAlert`: The light will perform a single, smooth transition up to a higher brightness and\n   back to the original again.\n - `LoopedAlert`: The light will perform multiple, smooth transitions up to a higher brightness and\n   back to the original again for a period of `15` seconds.\n",
            "args": [],
            "cases": [
              [
                "NoAlert",
                []
              ],
              [
                "SingleAlert",
                []
              ],
              [
                "LoopedAlert",
                []
              ]
            ]
          },
          {
            "name": "BridgeReference",
            "comment": " Used to identify and reference a particular bridge.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Error",
            "comment": " Something went wrong.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LightEffect",
            "comment": " A light can have the `ColorLoopEffect` enabled, which means that the light will cycle through\nall hues, while keeping brightness and saturation values.\n",
            "args": [],
            "cases": [
              [
                "NoLightEffect",
                []
              ],
              [
                "ColorLoopEffect",
                []
              ]
            ]
          },
          {
            "name": "LightReference",
            "comment": " Used to identify and reference a particular light.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LightUpdate",
            "comment": "\n  A `LightUpdate` describes a single change to a light's state. To actually perform a `LightUpdate`,\n  pass a list of updates to the `updateLight` function.\n\n  To describe a `1s` transition to a bright red, you can specify:\n\n      [ turnOn, transition 10, hue 0, brightness 254 ]\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bridgeRef",
            "comment": " Create a reference to a bridge by providing the bridge base url and your username.\n\n    bridgeRef \"http://192.168.1.1\" \"A2iasDJs123fi793uiSh\"\n\nIf you don't yet know the bridge base url or your username,\n[check the readme for detailed instructions](http://package.elm-lang.org/packages/damienklinnert/elm-hue/latest/).\n",
            "type": "String -> String -> Hue.BridgeReference"
          },
          {
            "name": "brightness",
            "comment": " Set light to the given brightness.\n\nThe brightness can range from `1` (minimal brightness) to `254` (maximal brightness).\nA brightness of `1` doesn't turn the light off. Use `turnOff` instead.\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "colorLoopEffect",
            "comment": " Sets the colorloop effect on the light.\n\nThe light will cycle through all hues, while keeping brightness and saturation values.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "colorTemperature",
            "comment": " Set the Mired Color temperature of the light.\n\nA light should be capable of a value of `153` (6500K) to `500` (2000K).\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "getLightState",
            "comment": " Get the state for a given light.\n",
            "type": "Hue.LightReference -> Task.Task Hue.Error Hue.LightState"
          },
          {
            "name": "hue",
            "comment": " Set light to the given hue value.\n\nImagine arranging all colors around a circle (a color wheel). On that circle, a value of `0` will\nresult in red, `25500` in green and `46920` in blue. Values in between result in mixed colors,\ne.g. `10710` being yellow. When the value reaches `65535`, you've reached the starting point on the\ncircle, so you'll get red again.\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "lightRef",
            "comment": " Create a reference to a light by specifying it's bridge and id.\n\nThe id can be obtained by calling `listLights` and looking at the `id` field.\n\nTo create a reference to the light with id `\"2\"`, you can do:\n\n    lightRef myBridge \"2\"\n",
            "type": "Hue.BridgeReference -> String -> Hue.LightReference"
          },
          {
            "name": "listLights",
            "comment": " List details about all lights connected to a particular bridge.\n",
            "type": "Hue.BridgeReference -> Task.Task Hue.Error (List Hue.LightDetails)"
          },
          {
            "name": "loopedAlert",
            "comment": " The light will perform multiple, smooth transitions up to a higher brightness and back to the\noriginal again for a period of `15` seconds.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "noEffect",
            "comment": " Turn off all effects on the light.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "saturation",
            "comment": " Set light to the given saturation.\n\nThe saturation can range from `0` (minimally saturated, white) to `254` (fully colored).\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "singleAlert",
            "comment": " The light will perform a single, smooth transition up to a higher brightness and back to the\noriginal again.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "transition",
            "comment": " Specify the duration for the transition between the light's current and updated state.\n\nA value of `1` will create a `100ms` transition, a value of `10` will create a `1s` transition.\n\nThe default is `4` (`400ms`).\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "turnOff",
            "comment": " Turn light off.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "turnOn",
            "comment": " Turn light on.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "updateLight",
            "comment": " Apply a list of `LightUpdate`s to a particular light.\n\nThe following command will transition a light to a bright red:\n\n    updateLight lightRef [ turnOn, transition 10, hue 0, brightness 254 ]\n",
            "type": "Hue.LightReference -> List Hue.LightUpdate -> Task.Task Hue.Error ()"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "damienklinnert/elm-spinner",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Spinner",
        "comment": " A highly configurable, efficiently rendered spinner component.\n\nCheck the [README for a general introduction into this module](http://package.elm-lang.org/packages/damienklinnert/elm-spinner/latest/).\n\n# The Elm Architecture\n@docs Model, Msg, subscription, init, update, view\n\n# Custom Spinners\n@docs Direction, Config, defaultConfig\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " A type describing how your spinner looks like.\n\n - `lines`: Number of lines (a value from 5 to 17, default is 13)\n - `length`: line length (a value from 0 to 56, default is 28)\n - `width`: line width (a value from 2 to 52, default is 14)\n - `radius`: distance from origin to beginning of lines (a value from 0 to 84, default is 42)\n - `scale`: scale for the whole spinner (a value from 0 to 5, default is 1)\n - `corners`: roundness of corners (a value from 0 to 1, default is 1)\n - `opacity`: minimum opacity of inactive lines (a value from 0 to 1, default is 0.25)\n - `rotate`: rotate the spinner by some degrees (a value from 0 to 90, default is 0)\n - `direction`: spinner direction (default is Clockwise)\n - `speed`: (a value from 0.5 (slowest), 2.2 (fastest), default is 1)\n - `trail`: how long is the trail after the active line (a value from 10 to 100, default is 60)\n - `translateX`: moves the spinner horizontally (a value from 0 to 100, default is 50)\n - `translateY`: moves the spinner vertically (a value from 0 to 100, default is 50)\n - `shadow`: adds a box shadow (default is True)\n - `hwaccel`: enables hardware acceleration for lines (default is False)\n\n",
            "args": [],
            "type": "{ lines : Float , length : Float , width : Float , radius : Float , scale : Float , corners : Float , opacity : Float , rotate : Float , direction : Spinner.Direction , speed : Float , trail : Float , translateX : Float , translateY : Float , shadow : Bool , hwaccel : Bool }"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " A spinner can spin `Clockwise` or `Counterclockwise`.\n",
            "args": [],
            "cases": [
              [
                "Clockwise",
                []
              ],
              [
                "Counterclockwise",
                []
              ]
            ]
          },
          {
            "name": "Model",
            "comment": " Contains the current state for the spinner.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " `Msg` messages need to be passed through your application.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultConfig",
            "comment": " A default spinner for use in your application.\n",
            "type": "Spinner.Config"
          },
          {
            "name": "init",
            "comment": " Defines an initial value for the `Model` type.\n",
            "type": "Spinner.Model"
          },
          {
            "name": "subscription",
            "comment": " Add this to your `program`s subscriptions to animate the spinner.\n",
            "type": "Platform.Sub.Sub Spinner.Msg"
          },
          {
            "name": "update",
            "comment": " Accepts `Msg` and `Model` and computes a new `Model`.\n",
            "type": "Spinner.Msg -> Spinner.Model -> Spinner.Model"
          },
          {
            "name": "view",
            "comment": " The actual spinner component.\n",
            "type": "Spinner.Config -> Spinner.Model -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "danielnarey/elm-modular-design",
    "version": "1.0.0",
    "docs": [
      {
        "name": "ModularDesign.FormInput",
        "comment": " ModularDesign's `FormInput` library provides an API for capturing,\naccessing, and validating input from HTML `form` elements. Rather than capturing\nuser input from each individual `input` element on a page, it is often more\nconvenient to wrap multiple `input` elements in a `form` with a `submit` button\nthat triggers input capture. Because Elm's `Html` package does not include a\nbuilt-in set of functions for handling form input, a custom event handler and\ncustom Json decoders are needed to capture input in response to a \"submit\" event\non a form. The `FormInput` library includes constructor functions that make it\neasy to initialize an event handler that will capture form input, decoding it\ninto a dictionary keyed by input `id`. The library also includes reader\nfunctions that enable type-checking on input values, as well as a function that\nconverts a dictionary of input values to JSON.\n\n# Capturing Form Input\n@docs FormInput, formControl, captureOnSubmit, fieldDecoder, formDecoder\n\n# Accessing Form Input\n@docs getInputAt, readStringAt, resolveStringAt\n\n# Converting Form Input to JSON\n@docs formInputToJson, toTypedJson, extractRawJson\n\n# Reading `TypedInput` Values\n@docs readInputAsString, resolveInputAsString, readStringInput\n@docs resolveStringInput, readIntInput, resolveIntInput, readFloatInput\n@docs resolveFloatInput, readBoolInput, resolveBoolInput, readCustomInput\n@docs resolveCustomInput\n\n",
        "aliases": [
          {
            "name": "FormInput",
            "comment": " Represents input captured from a form with multiple fields. Implemented as a\ndictionary, where the *key* is the `id` of the input element and the *value* is\nits captured value as `TypedInput`.\n",
            "args": [],
            "type": "Dict.Dict String ModularDesign.TypedInput"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "captureOnSubmit",
            "comment": " Constructor that takes a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nas an argument and returns an\n[`Html.Attribute`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#Attribute)\nencoding an event handler triggered by \"submit\". The decoder specifies the input\nfield(s) to be captured and the type that will be returned when the input is\ndecoded.\n\n    container \"form\" [ inputField, submitButton ]\n      |> withObserver (captureOnSubmit inputDecoder)\n\nSee CaptureOnSubmit.elm for a full working example.\n",
            "type": "Json.Decode.Decoder msg -> Html.Attribute msg"
          },
          {
            "name": "extractRawJson",
            "comment": " Return a JavaScript value from `TypedInput` without attempting to decode. If\nthe `TypedInput` value has been captured from an input element, the returned\nvalue will always be a JavaScript string. Useful for debugging.\n\n    formInput\n      |> getInputAt \"userAge\"\n      |> Result.withDefault (IntInput Json.Encode.null)\n      |> extractRawJson\n\n    --> \"33\" : Json.Decode.Value\n",
            "type": "ModularDesign.TypedInput -> Json.Decode.Value"
          },
          {
            "name": "fieldDecoder",
            "comment": " Constructor that takes an `HtmlElement` representing a form field and\nreturns a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder).\nWhen triggered by a \"submit\" event on the parent form, this decoder will return\na tuple containing the input element's `id` attribute and its current `value`,\nencoded as `TypedInput`. For the decoder work properly, the input element must\nbe assigned a unique `id` and its `inputType` must be defined.\n\n    inputDecoder =\n      rootElement inputField\n        |> fieldDecoder\n\nSee FieldDecoder.elm for a full working example.\n",
            "type": "ModularDesign.HtmlElement msg -> Json.Decode.Decoder ( String, ModularDesign.TypedInput )"
          },
          {
            "name": "formControl",
            "comment": " Given a list of `HtmlTree` nodes, construct a `form` element with an\nobserver that captures values from each input element contained in the list and\nreturns those values as `FormInput`. The first argument (a constructor that\naccepts `FormInput`) specifies the message that will be passed to the program's\nupdate function when a \"submit\" event is triggered on the form. The `HtmlTree`\nthat is returned will have the `form` element at the root, with the listed nodes\nas its children.\n\nSee FormControl.elm for a full working example.\n",
            "type": "(ModularDesign.FormInput.FormInput -> msg) -> List (ModularDesign.HtmlTree msg) -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "formDecoder",
            "comment": " Constructor that takes a list of `HtmlTree` nodes representing internal\nelements within a `form` and returns a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder).\nWhen triggered by a \"submit\" event on the form, this decoder will return a\n[`Dict`](http://package.elm-lang.org/packages/elm-lang/core/latest/Dict#Decoder)\ncontaining values for each `input` element, keyed by `id`. For the decoder work\nproperly, each input element must be assigned a unique `id` string and its\n`inputType` must be defined.\n\n    inputDict =\n      formDecoder [ input1, input2 ]\n        |> Json.map Submit\n\n    form =\n      container \"form\" [ input1, input2, submitButton ]\n        |> withObserver (captureOnSubmit inputDict)\n\nSee FormDecoder.elm for a full working example.\n",
            "type": "List (ModularDesign.HtmlTree msg) -> Json.Decode.Decoder ModularDesign.FormInput.FormInput"
          },
          {
            "name": "formInputToJson",
            "comment": " Convert `FormInput` to JSON with the\n[`Json.Encode.object`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode#object)\nfunction. Before encoding, the `toTypedJson` function is used to perform type\nchecking and conversion on input values.\n\n    formInput\n      |> formInputToJson\n\n    --> { userAge = 33, userName = \"Bob\" } : Json.Decode.Value\n",
            "type": "ModularDesign.FormInput.FormInput -> Json.Decode.Value"
          },
          {
            "name": "getInputAt",
            "comment": " Given a string representing an `id`, look up the value of the associated\ninput element in `FormInput` and return the result as `TypedInput`, or return\nan error message.\n\n    --simulated input\n    input1 = ( \"userName\", StringInput (Json.Encode.string \"Bob\") )\n    input2 = (\"userAge\", IntInput (Json.Encode.string \"33\") )\n    formInput = Dict.fromList [ input1, input2 ]\n\n    formInput\n      |> getInputAt \"userName\"\n\n    --> Ok (StringInput \"Bob\")\n",
            "type": "String -> ModularDesign.FormInput.FormInput -> Result.Result String ModularDesign.TypedInput"
          },
          {
            "name": "readBoolInput",
            "comment": " Decode a `BoolInput` value as a string, then attempt to convert the string\nto a `Bool`; return an error message if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `BoolInput`. Type\nconversion expects a string value of \"true\" or \"false\", ignoring case.\n\n    formInput\n      |> getInputAt \"over18Years\"\n      |> Result.withDefault (BoolInput Json.Encode.null)\n      |> readBoolInput\n\n    --> Ok True\n",
            "type": "ModularDesign.TypedInput -> Result.Result String Bool"
          },
          {
            "name": "readCustomInput",
            "comment": " Given a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder),\nattempt to decode a `CustomInput` value; return an error message if the decoder\nfails or if the argument is a type other than `CustomInput`.\n",
            "type": "Json.Decode.Decoder a -> ModularDesign.TypedInput -> Result.Result String a"
          },
          {
            "name": "readFloatInput",
            "comment": " Decode a `FloatInput` value as a string, then attempt to convert the string\nto a `Float`; return an error message if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `FloatInput`.\n\n    formInput\n      |> getInputAt \"userWeight\"\n      |> Result.withDefault (FloatInput Json.Encode.null)\n      |> readFloatInput\n\n    --> Ok 160.5\n",
            "type": "ModularDesign.TypedInput -> Result.Result String Float"
          },
          {
            "name": "readInputAsString",
            "comment": " Decode `TypedInput` as a string, or return an error message if the decoder\nfails.\n\n    formInput\n      |> getInputAt \"userAge\"\n      |> Result.withDefault (IntInput Json.Encode.null)\n      |> readInputAsString\n\n    --> Ok \"33\"\n",
            "type": "ModularDesign.TypedInput -> Result.Result String String"
          },
          {
            "name": "readIntInput",
            "comment": " Decode an `IntInput` value as a string, then attempt to convert the string\nto an `Int`; return an error message if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `IntInput`.\n\n    formInput\n      |> getInputAt \"userAge\"\n      |> Result.withDefault (IntInput Json.Encode.null)\n      |> readIntInput\n\n    --> Ok 33\n",
            "type": "ModularDesign.TypedInput -> Result.Result String Int"
          },
          {
            "name": "readStringAt",
            "comment": " Given a string representing an `id`, look up the value of the associated\ninput element and decode the result as a `String`, or return an error message.\n\n    formInput\n      |> readStringAt \"userName\"\n\n    --> Ok \"Bob\"\n",
            "type": "String -> ModularDesign.FormInput.FormInput -> Result.Result String String"
          },
          {
            "name": "readStringInput",
            "comment": " Decode a `StringInput` value as a string; return an error message if the\ndecoder fails or if the argument is a type other than `StringInput`.\n\n    formInput\n      |> getInputAt \"userName\"\n      |> Result.withDefault (StringInput Json.Encode.null)\n      |> readStringInput\n\n    --> Ok \"Bob\"\n",
            "type": "ModularDesign.TypedInput -> Result.Result String String"
          },
          {
            "name": "resolveBoolInput",
            "comment": " Decode a `BoolInput` value as a string, then attempt to convert the string\nto an `Bool`; return a default value if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `BoolInput`. Type\nconversion expects a string value of \"true\" or \"false\", ignoring case.\n\n    formInput\n      |> getInputAt \"over18Years\"\n      |> Result.withDefault (BoolInput Json.Encode.null)\n      |> resolveBoolInput False\n\n    --> True\n",
            "type": "Bool -> ModularDesign.TypedInput -> Bool"
          },
          {
            "name": "resolveCustomInput",
            "comment": " Given a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder),\nattempt to decode a `CustomInput` value; return a default value if the decoder\nfails or if the argument is a type other than `CustomInput`.\n",
            "type": "Json.Decode.Decoder a -> a -> ModularDesign.TypedInput -> a"
          },
          {
            "name": "resolveFloatInput",
            "comment": " Decode a `FloatInput` value as a string, then attempt to convert the string\nto an `Float`; return a default value if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `FloatInput`.\n\n    formInput\n      |> getInputAt \"userWeight\"\n      |> Result.withDefault (FloatInput Json.Encode.null)\n      |> resolveFloatInput -1\n\n    --> 160.5\n",
            "type": "Float -> ModularDesign.TypedInput -> Float"
          },
          {
            "name": "resolveInputAsString",
            "comment": " Decode `TypedInput` as a string, returning a default string if the decoder\nfails.\n\n    formInput\n      |> getInputAt \"userAge\"\n      |> resolveInputAsString \"NoAge\"\n\n    --> \"33\"\n",
            "type": "String -> ModularDesign.TypedInput -> String"
          },
          {
            "name": "resolveIntInput",
            "comment": " Decode an `IntInput` value as a string, then attempt to convert the string\nto an `Int`; return a default value if the string decoder fails, if type\nconversion fails, or if the argument is a type other than `IntInput`.\n\n    formInput\n      |> getInputAt \"userAge\"\n      |> Result.withDefault (IntInput Json.Encode.null)\n      |> resolveIntInput -1\n\n    --> 33\n",
            "type": "Int -> ModularDesign.TypedInput -> Int"
          },
          {
            "name": "resolveStringAt",
            "comment": " Given a string representing an `id`, look up the value of the associated\ninput element and decode the result as a `String`, returning a default string if\nlook-up or decoding fails. The first argument is the default and the second\nargument is the key.\n\n    formInput\n      |> resolveStringAt \"NoName\" \"userName\"\n\n    --> \"Bob\"\n",
            "type": "String -> String -> ModularDesign.FormInput.FormInput -> String"
          },
          {
            "name": "resolveStringInput",
            "comment": " Decode a `StringInput` value as a string; return a default string if the\ndecoder fails or if the argument is a type other than `StringInput`.\n\n    formInput\n      |> getInputAt \"userName\"\n      |> Result.withDefault (StringInput Json.Encode.null)\n      |> resolveStringInput \"NoName\"\n\n    --> \"Bob\"\n",
            "type": "String -> ModularDesign.TypedInput -> String"
          },
          {
            "name": "toTypedJson",
            "comment": " Convert `TypedInput` to a Json `Value` of the corresponding type. Because\ninput from a form element is always captured as a JavaScript string, numeric or\nboolean input must first be decoded to a `String` before it can be encoded as a\nJavaScript number or boolean. This function takes care of both steps and passes\nalong any error messages in type conversion.\n\n    formInput\n      |> getInputAt \"userAge\"\n      |> Result.withDefault (IntInput Json.Encode.null)\n      |> toTypedJson\n\n    --> Ok 33 : Result String Json.Decode.Value\n",
            "type": "ModularDesign.TypedInput -> Result.Result String Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "ModularDesign",
        "comment": "\n\n## Assemble your UI from modular, modifiable HTML components\n\nThe `ModularDesign` package provides an alternative, non-standard API for\ngenerating HTML and building reactive user interfaces in Elm. The package is\nbuilt on top of the standard `VirtualDom` and `Html` libraries, so the\nunderlying JavaScript implementation is no different.\n\nThe main disadvantage of the standard API is that once a chunk of HTML has been\nconstructed, e.g.,\n\n    welcomeMessage =\n      div [] [ p [] [ text \"Hello, World!\" ] ]\n\nthere is no direct way of looking inside that chunk to get information about its\nelements or their attributes. For example, it would not be possible to pass\n`welcomeMessage` to a function that would add a style attribute to the `p`\nelement or change the text to \"Hello, Universe!\" and return the result. With the\nstandard libraries, to make either of these modifications, we would need to\nre-write the nested `Html` function calls with modified arguments or insert\nconditionals that would change the arguments passed to the function in response\nto data. This limitation takes away some of the appeal of using a functional\nstyle of programming for front-end web development.\n\nThe `ModularDesign` library solves this problem by creating a set of types that\nprovide a representation of the HTML DOM in Elm, allowing access to each node's\ninternal data. In the Modular Design API, an `HtmlElement` is a record that\nencodes an element's tag, assigned class names, other assigned attributes, and,\nwhen applicable, its internal text, event handlers, and/or the type of input it\ncaptures. The union type `HtmlTree` defines a recursive tree where each node\ncontains an `HtmlElement` and some nodes also contain a list of child `HtmlTree`\nnodes. This data structure allows an `HtmlTree` to be passed to a function that\nwill access its internal data, build a modified `HtmlTree`, and return the\nresult, just as one can do with any other Elm type.\n\nWith the Modular Design API, the code to produce `welcomeMessage` may be\nwritten like this:\n\n    welcomeMessage =\n      container \"div\" [textWrapper \"p\" \"Hello, world!\"]\n\nOr, using functional operators, like this:\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> wrapList\n        |> container \"div\"\n\nSuppose that we would like to be able to change the style of the text after this\nchunk of HTML has been encoded and assigned to a variable name. We can do this\nby adding a CSS class to the `p` element as follows:\n\n    welcomeMessage\n      |> modifyMatchingTag \"p\" (withClasses [\"large-bold-text\"])\n\nNote, however, that if there were multiple `p` elements in the tree, this\nfunction call would add the class \"large-bold-text\" to all of them. An\nalternative is to define the `id` attribute of the element we wish to modify and\nthen use the function `modifyMatchingId`:\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> withId \"messageText\"\n        |> wrapList\n        |> container \"div\"\n\n    welcomeMessage\n      |> modifyMatchingId \"messageText\" (withClasses [\"large-bold-text\"])\n\nThe text of the message can be modified in a similar way:\n\n    welcomeMessage\n      |> modifyMatchingId \"messageText\" (withText \"Hello, Universe!\")\n\nAnd so on.\n\nFull working examples can be found [here](\"https://github.com/danielnarey/elm-modular-design/tree/master/examples).\n\nThe core package library includes basic constructors for `HtmlTree` nodes, sets\nof functions for modifying the element records of root nodes and internal nodes,\na function to render an `HtmlTree` to `VirtualDom`, and various helpers. A\nseparate package module, `ModularDesign.FormInput` provides an API for\ncapturing, accessing, and validating form input. Component and pattern libraries\nfor UI design are planned for future releases.\n\n\n# HTML DOM Representation\n@docs HtmlElement, TypedInput, HtmlTree\n\n# Rendering an `HtmlTree` to `VirtualDom`\n@docs assembleHtml\n\n# Node Constructors\n@docs leaf, textWrapper, container\n\n# Modifying the Root Node\n@docs appendNodes, withTag, withAttributes, withActions, withClasses, withStyles\n@docs removeClass, withText, withObserver, setInputType, withId\n\n# Modifying Internal Nodes\n@docs modifyMatchingId, modifyMatchingTag, modifyAll\n\n# Accessing `HtmlElement` Records\n@docs rootElement, listElements, getElementsByTag\n\n# Accessing Record Fields\n@docs getAttrValue, getId, hasValue\n\n# Generic Helpers\n@docs wrapList, thenTry\n\n",
        "aliases": [
          {
            "name": "HtmlElement",
            "comment": " Represents a HTML element with the following record fields:\n\n- __htmlTag__: A valid [HTML tag](http://www.w3schools.com/tags/). When\nrendering to `VirtualDom`, the tag is passed as a string argument to the\n[`Html.node`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#node)\nfunction.\n\n- __attributes__: A list of *name-value* pairs representing\n[HTML attributes](http://www.w3schools.com/tags/ref_attributes.asp). The\n[`Html.Attributes`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Attributes)\nfunction corresponding to *name* will be called and, where necessary, the\n*value* will be converted from a string to the appropriate type (note that\nerrors in converting a boolean string to a `Bool` default to `False`). Any\n*name* for which there is no corresponding function will be passed to\n[`Html.Attributes.attribute`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Attributes#attribute)\nalong with its *value*, creating a custom attribute.\n\n- __actions__: A list of *action-message* pairs. As defined here, \"actions\"\ninclude all events that __do not__ capture form input. Following the typical\npattern of an Elm program, a \"message\" is a user-defined type that tells the\nprogram what updates to perform on the model via pattern matching.\n\n- __classes__: A list of class names. The list is concatinated into one string\nand passed to\n[Html.Attributes.class](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Attributes#class).\n\n- __styles__: A list of *name-value* pairs representing\n[CSS properties](http://www.w3schools.com/cssref/).\nThe list is passed to\n[Html.Attributes.style](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Attributes#style).\nIt is generally better practice to set CSS classes on elements and the define\nstyles in a CSS file, but the style attribute can be used to override class\ndefaults.\n\n- __text__: A string of text, or `Nothing`. When rendered as HTML, text will be\ninserted after the element tag and before any child elements.\n\n- __observer__: An\n[`Html.Attribute`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#Attribute)\nencoding an event handler that captures form input, or `Nothing`. An \"observer\"\ndiffers from an \"action\" in that it captures one or more input values, and so\nrequires a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nto read that input. The built-in observers in the `Html.Events` library\nare\n[`onInput`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#onInput)\nand\n[`onCheck`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#onCheck).\nCustom observers may be created using the\n[`Html.Events.on`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#on)\nfunction, which takes an\n[event name](http://www.w3schools.com/jsref/dom_obj_event.asp) (as a string,\nwithout the \"on\" prefix) and a\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nas arguments. The Modular Design API also includes the helper functions\n`captureOnSubmit`, `fieldDecoder`, and `formDecoder`, which make it easier\nto construct observers for capturing form input.\n\n- __inputType__: A constructor that accepts a `Json` `Value` and returns\n`TypedInput`, or `Nothing`. The constructor may be one of: `StringInput`,\n`IntInput`, `FloatInput`, `BoolInput`, `NullInput`, `CustomInput`. This record\nfield is ignored when rendering the element to `VirtualDom`; its purpose is to\nallow form data to be aggregated while preserving type specifications on input\nfields, such that type checking can occur downstream in the program.\n",
            "args": [
              "msg"
            ],
            "type": "{ htmlTag : String , attributes : List ( String, String ) , actions : List ( String, msg ) , classes : List String , styles : List ( String, String ) , text : Maybe.Maybe String , observer : Maybe.Maybe (Html.Attribute msg) , inputType : Maybe.Maybe (Json.Decode.Value -> ModularDesign.TypedInput) }"
          }
        ],
        "types": [
          {
            "name": "HtmlTree",
            "comment": " Represents a node in the DOM tree that may have some children (a `Stem`) or\nno children (a `Leaf`).\n",
            "args": [
              "msg"
            ],
            "cases": [
              [
                "Leaf",
                [
                  "ModularDesign.HtmlElement msg"
                ]
              ],
              [
                "Stem",
                [
                  "ModularDesign.HtmlElement msg",
                  "List (ModularDesign.HtmlTree msg)"
                ]
              ]
            ]
          },
          {
            "name": "TypedInput",
            "comment": " Represents a JavaScript value with a type specification. Used to implement\ntype-checking in functions for capturing and reading form input. See the\n`ModularDesign.FormInput` documentation to find out how this works.\n",
            "args": [],
            "cases": [
              [
                "StringInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "IntInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "FloatInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "BoolInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "NullInput",
                [
                  "Json.Decode.Value"
                ]
              ],
              [
                "CustomInput",
                [
                  "Json.Decode.Value"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "appendNodes",
            "comment": " Append child nodes to the root node of an `HtmlTree`, replacing any existing\nchildren, and return the result. The main use of this function is to convert a\n`Leaf` to a `Stem`, which is helpful when nesting text elements.\n\n    \"Hello, world!\"\n      |> textWrapper \"p\"\n      |> appendNodes [ leaf \"br\", textWrapper \"strong\" \"Awesome!\" ]\n      |> container \"div\"\n\n    --> <div><p>Hello, world!<br><strong>Awesome!</strong></p></div>\n",
            "type": "List (ModularDesign.HtmlTree msg) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "assembleHtml",
            "comment": " To render HTML in the browser, an `HtmlTree` must be converted to a\n[`VirtualDom.Node`](http://package.elm-lang.org/packages/elm-lang/virtual-dom/latest/VirtualDom#Node)\n(note that `Html.Html` is an alias for `VirtualDom.Node`). Calling\n`assembleHtml` on an `HtmlTree` recurses down the tree, constructing the\n`VirtualDom` representation node by node.\n",
            "type": "ModularDesign.HtmlTree msg -> Html.Html msg"
          },
          {
            "name": "container",
            "comment": " Create a `Stem` node with no attributes and no text.\n\n    \"Hello, world!\"\n      |> textWrapper \"p\"\n      |> container \"div\"\n\n    --> <div><p>Hello, world!</p></div>\n",
            "type": "String -> List (ModularDesign.HtmlTree msg) -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "getAttrValue",
            "comment": " Given an `HtmlElement`, return the *value* for the attribute whose *name*\nmatching the first argument, or `Nothing` if no attribute with that *name* has\nbeen defined.\n\n    myElement\n      |> getAttrValue \"disabled\"\n",
            "type": "String -> ModularDesign.HtmlElement msg -> Maybe.Maybe String"
          },
          {
            "name": "getElementsByTag",
            "comment": " Given an `HtmlTree`, return a list containing every `HtmlElement` with an\n`htmlTag` matching the first argument.\n\n    myPage\n      |> getElementsByTag \"a\"\n",
            "type": "String -> ModularDesign.HtmlTree msg -> List (ModularDesign.HtmlElement msg)"
          },
          {
            "name": "getId",
            "comment": " Given an `HtmlElement`, return the *value* of its `id` attribute, or\n`Nothing` if the `id` attribute has not been defined.\n",
            "type": "ModularDesign.HtmlElement msg -> Maybe.Maybe String"
          },
          {
            "name": "hasValue",
            "comment": " Given an `HtmlElement`, lookup the attribute whose *name* matches the first\nargument; if its *value* matches the second argument, return `True`; if the\n*value* does not match, or the *name* is not found, return `False`.\n\n    if (rootElement myButton |> \"disabled\" `hasValue` \"True\") then\n      myButton\n        |> withAttributes [ (\"disabled\", \"False\") ]\n    else\n      myButton\n",
            "type": "String -> String -> ModularDesign.HtmlElement msg -> Bool"
          },
          {
            "name": "leaf",
            "comment": " Create a `Leaf` node with no attributes and no text.\n\n    leaf \"br\"   --> <br>\n",
            "type": "String -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "listElements",
            "comment": " Given an `HtmlTree`, return a list containing every `HtmlElement` in the\ntree. This flattens the tree to provide more convenient access to record\nfields.\n",
            "type": "ModularDesign.HtmlTree msg -> List (ModularDesign.HtmlElement msg)"
          },
          {
            "name": "modifyAll",
            "comment": " Apply the modify function to every node in the tree.\n\n    newAttribute =\n      wrapList (\"hidden\", \"True\")\n\n    page\n      |> modifyAll (withAttributes newAttribute)\n",
            "type": "(ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "modifyMatchingId",
            "comment": " Given a string representing an `id` and a modify function that accepts an\n`HtmlTree` and returns a modified `HtmlTree`, apply the modify function to\nevery node in the tree whose root element has a matching `id`. Note that HTML\nelements should be assigned unique `id` strings, so in theory the modify\nfunction should only be applied to one node.\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> withId \"messageText\"\n        |> wrapList\n        |> container \"div\"\n\n    welcomeMessage\n      |> modifyMatchingId \"messageText\" (withText \"Hello, Universe!\")\n",
            "type": "String -> (ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "modifyMatchingTag",
            "comment": " Given a string representing an HTML tag and a modify function that accepts an\n`HtmlTree` and returns a modified `HtmlTree`, apply the modify function to\nevery node in the tree whose root element has a matching HTML tag.\n\n    newAttribute =\n      wrapList (\"disabled\", \"True\")\n\n    page\n      |> modifyMatchingTag \"button\" (withAttributes newAttribute)\n",
            "type": "String -> (ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "removeClass",
            "comment": " Remove a class name from the element at the root node of an `HtmlTree`.\n\n    welcomeMessage\n      |> removeClass \"large-text\"\n",
            "type": "String -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "rootElement",
            "comment": " Given an `HtmlTree`, return the `HtmlElement` at its root node.\n",
            "type": "ModularDesign.HtmlTree msg -> ModularDesign.HtmlElement msg"
          },
          {
            "name": "setInputType",
            "comment": " Set an input type for the root node of an `HtmlTree`. May be one of:\n`StringInput`, `IntInput`, `FloatInput`, `BoolInput`, `NullInput`,\n`CustomInput`.\n\n    leaf \"input\"\n      |> withAttributes [ (\"type\", \"text\"), (\"id\", \"birthYear\") ]\n      |> setInputType IntInput\n\nSee FieldDecoder.elm for a full working example.\n",
            "type": "(Json.Decode.Value -> ModularDesign.TypedInput) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "textWrapper",
            "comment": " Create a `Leaf` node with text and no attributes.\n\n    \"Hello, world!\"\n      |> textWrapper \"p\"\n\n    --> <p>Hello, world!</p>\n",
            "type": "String -> String -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "thenTry",
            "comment": " Same as\n[`Result.andThen`](http://package.elm-lang.org/packages/elm-lang/core/latest/Result#andThen),\nbut flips the order of the arguments, allowing for cleaner syntax when used with\nthe `|>` operator.\n\n    formInput\n      |> getInputAt \"birthYear\"\n      |> thenTry readIntInput\n      |> Result.withDefault -1\n",
            "type": "(a -> Result.Result x b) -> Result.Result x a -> Result.Result x b"
          },
          {
            "name": "withActions",
            "comment": " Add a list of actions to the element at the root node of an `HtmlTree`,\nencoded as *action-message* pairs. As defined here, \"actions\" include all events\nthat __do not__ capture form input. Following the typical pattern of an Elm\nprogram, a \"message\" is a user-defined type that tells the program what updates\nto perform on the model via pattern matching. If a new *action-message* pair has\nthe same *action* as an existing one, the new *message* replaces the old one;\notherwise, existing *action-message* pairs are retained.\n\n    \"Click here and see what happens!\"\n      |> textWrapper \"p\"\n      |> withAttributes [ (\"hidden\", toString model)]\n      |> withActions [ (\"click\", HideMessage) ]\n\nSee Actions.elm for a full working example.\n",
            "type": "List ( String, msg ) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withAttributes",
            "comment": " Add a list of attributes (*name-value* pairs) to the element at the root\nnode of an `HtmlTree`. If a new attribute has the same *name* as an existing\nattribute, the new *value* replaces the old one; otherwise, existing attributes\nare retained.\n\n    welcomeMessage\n      |> withAttributes [ (\"id\", \"welcomeMessage\") ]\n",
            "type": "List ( String, String ) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withClasses",
            "comment": " Add a list of class names to the element at the root node of an `HtmlTree`.\nAny existing class names are retained.\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> withClasses [ \"large-text\", \"align-center\" ]\n",
            "type": "List String -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withId",
            "comment": " Convenience function to add an `id` attribute to the root element of an\n`HtmlTree`. Calls `withAttributes`.\n\n    welcomeMessage\n      |> withId \"welcomeMessage\"\n",
            "type": "String -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withObserver",
            "comment": " Add an observer to the element at the root node of an `HtmlTree`, encoded as\nan [`Html.Attribute`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#Attribute).\nAn \"observer\" differs from an \"action\" in that it captures one or more input\nvalues, and so requires a `Json`\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nto read that input. The built-in observers in the `Html.Events` package\nare\n[`onInput`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#onInput)\nand\n[`onCheck`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#onCheck).\nCustom observers may be created using the\n[`Html.Events.on`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Events#on)\nfunction, which takes an\n[event name](http://www.w3schools.com/jsref/dom_obj_event.asp) (as a string,\nwithout the \"on\" prefix) and a\n[`Decoder`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder)\nas arguments. The Modular Design API also includes the helper functions\n`captureOnSubmit`, `fieldDecoder`, and `formDecoder`, which make it easier\nto construct observers for capturing form input.\n\n    leaf \"input\"\n      |> withAttributes [ (\"type\", \"checkbox\"), (\"checked\", toString model) ]\n      |> withObserver (Events.onCheck Checked)\n\nSee Observers.elm for a full working example.\n",
            "type": "Html.Attribute msg -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withStyles",
            "comment": " Add a list of styles to the element at the root node of an `HtmlTree`,\nencoded as *name-value* pairs. If a new style has the same *name* as an\nexisting style, the new *value* replaces the old one; otherwise, existing\nstyles are retained. It is generally better practice to set CSS classes on\nelements and the define styles in a CSS file, but the style attribute can be\nused to override class defaults.\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n        |> withStyles [ (\"font-size\", \"2em\"), (\"text-align\", \"center\") ]\n",
            "type": "List ( String, String ) -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withTag",
            "comment": " Modify the HTML tag of the element at the root node of an `HtmlTree`.\nReplaces the existing tag.\n\n    welcomeMessage =\n      \"Hello, world!\"\n        |> textWrapper \"p\"\n\n    welcomeMessage\n      |> withTag \"span\"\n",
            "type": "String -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "withText",
            "comment": " Modify the text of the element at the root node of an `HtmlTree`. Replaces\nany existing text.\n\n    welcomeMessage =\n      leaf \"p\"\n        |> withText \"Hello, world!\"\n",
            "type": "String -> ModularDesign.HtmlTree msg -> ModularDesign.HtmlTree msg"
          },
          {
            "name": "wrapList",
            "comment": " Return a one-item list containing the argument\n\n    wrapList (\"key\", \"value\")   --> [ (\"key\", \"value\") ]\n",
            "type": "a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "danyx23/elm-mimetype",
    "version": "3.0.0",
    "docs": [
      {
        "name": "MimeType",
        "comment": " This modules provides the union type MimeType to model some of the most common\nmime types and a parsing function that tries to parse a MimeType. The possible values for\nMimeType are all union types as well that specify the Sub-type. It was originally developed to\nclassify files dropped into the browser via the HTML5 Drag and Drop api.\n\nThis library ATM provides only an incomplete, somewhat arbitrary mapping of the most common\nbrowser mime types.\nSee https://code.google.com/p/chromium/codesearch#chromium/src/net/base/mime_util.cc&l=201\nfor a full list of Mime types as implemented in chromium.\n\n# Mime type\n@docs MimeType\n\n# Parsing function & toString\n@docs parseMimeType, toString\n\n# Subtypes\n@docs MimeText, MimeImage, MimeAudio, MimeVideo, MimeApp\n\n",
        "aliases": [],
        "types": [
          {
            "name": "MimeApp",
            "comment": " Models the most common app subtypes\n",
            "args": [],
            "cases": [
              [
                "Word",
                []
              ],
              [
                "WordXml",
                []
              ],
              [
                "Excel",
                []
              ],
              [
                "ExcelXml",
                []
              ],
              [
                "PowerPoint",
                []
              ],
              [
                "PowerPointXml",
                []
              ],
              [
                "Pdf",
                []
              ],
              [
                "OtherApp",
                []
              ]
            ]
          },
          {
            "name": "MimeAudio",
            "comment": " Models the most common audio subtypes\n",
            "args": [],
            "cases": [
              [
                "Mp3",
                []
              ],
              [
                "Ogg",
                []
              ],
              [
                "Wav",
                []
              ],
              [
                "OtherAudio",
                []
              ]
            ]
          },
          {
            "name": "MimeImage",
            "comment": " Models the most common image subtypes\n",
            "args": [],
            "cases": [
              [
                "Jpeg",
                []
              ],
              [
                "Png",
                []
              ],
              [
                "Gif",
                []
              ],
              [
                "OtherImage",
                []
              ]
            ]
          },
          {
            "name": "MimeText",
            "comment": " Models the most common text subtypes\n",
            "args": [],
            "cases": [
              [
                "PlainText",
                []
              ],
              [
                "Html",
                []
              ],
              [
                "Css",
                []
              ],
              [
                "Xml",
                []
              ],
              [
                "Json",
                []
              ],
              [
                "OtherText",
                []
              ]
            ]
          },
          {
            "name": "MimeType",
            "comment": " Models the major types image, audio, video and text\nwith a subtype or OtherMimeType\n",
            "args": [],
            "cases": [
              [
                "Image",
                [
                  "MimeType.MimeImage"
                ]
              ],
              [
                "Audio",
                [
                  "MimeType.MimeAudio"
                ]
              ],
              [
                "Video",
                [
                  "MimeType.MimeVideo"
                ]
              ],
              [
                "Text",
                [
                  "MimeType.MimeText"
                ]
              ],
              [
                "App",
                [
                  "MimeType.MimeApp"
                ]
              ],
              [
                "OtherMimeType",
                []
              ]
            ]
          },
          {
            "name": "MimeVideo",
            "comment": " Models the most common video subtypes\n",
            "args": [],
            "cases": [
              [
                "Mp4",
                []
              ],
              [
                "Mpeg",
                []
              ],
              [
                "Quicktime",
                []
              ],
              [
                "Avi",
                []
              ],
              [
                "Webm",
                []
              ],
              [
                "OtherVideo",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parseMimeType",
            "comment": " Tries to parse the Mime type from a string.\n\n    -- normal use of a type/subtype that is modelled:\n    parseMimeType \"image/jpeg\" == Just (Image Jpeg)\n\n    -- use of a subtype that is not modelled ATM\n    parseMimeType \"image/tiff\" == Just (Image OtherImage)\n\n    -- use with an empty string\n    parseMimeType \"\" == Nothing\n\n    -- use with something else\n    parseMimeType \"bla\" == Just OtherMimeType\n\n",
            "type": "String -> Maybe.Maybe MimeType.MimeType"
          },
          {
            "name": "toString",
            "comment": " Transforms a MimeType back to a string represenation.\nNote that this only works properly for correctly recognized\nmime types at the moment. A future version of this library\nwill instead store the originally parsed mime type.\n\n    toString (Image Jpeg) == \"image/jpeg\"\n",
            "type": "MimeType.MimeType -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "danyx23/elm-uuid",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Uuid",
        "comment": " This modules provides an opaque type for Uuids, helpers to serialize\nfrom and to String and helpers to generate new Uuids using Max Goldsteins\nRandom.PCG pseudo-random generator library.\n\nUuids are Universally Unique IDentifiers. They are 128 bit ids that are\ndesigned to be extremely unlikely to collide with other Uuids.\n\nThis library only supports generating Version 4 Uuid (those generated using\nrandom numbers, as opposed to hashing. See\n[Wikipedia on Uuids](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29)\nfor more details). Version 4 Uuids are constructed using 122 pseudo random bits.\n\nDisclaimer: If you use this Library to generate Uuids, please be advised\nthat it does not use a cryptographically secure pseudo random number generator.\nWhile Random.PCG is a definite improvement over Elms native RNG, depending\non your use case the randomness provided may not be enough.\n\nThis library is split into two Modules. Uuid (this module) wraps Uuids in\nan opaque type for improved type safety. If you prefer to simply get strings\nyou can use the Uuid.Barebones module which provides methods to generate\nand verify Uuid as plain Strings.\n\nUuids can be generated either by parsing them from the canonical string representation\n(see fromString) or by generating them. If you are unfamiliar with random number generation\nin pure functional languages, this can be a bit confusing. The gist of it is that:\n\n1. you need a good random seed and this has to come from outside our wonderfully\npredictable Elm code (meaning you have to create an incoming port and feed in\nsome initial randomness)\n\n2. every call to generate a new Uuid will give you a tuple of a Uuid and a new\nseed. It is very important that whenever you generate a new Uuid you store this\nseed you get back into your model and use this one for the next Uuid generation.\nIf you reuse a seed, you will create the same Uuid twice!\n\nHere is a complete example that shows how to initialize the random number seed\nand how to carry the returned seed forward to the next Uuid generation.\n\n    import Uuid\n    import Random.PCG exposing (generate, Seed, initialSeed2)\n    import StartApp.Simple exposing (start)\n    import Html exposing (Html, div, button, text)\n    import Html.Events exposing (onClick)\n\n    -- 1.: Plumbing code to get a good initial random seed from Javascript\n    --     via a port (As described in the docs of mgold/elm-random-pcg)\n    port randomSeed : (Int, Int)\n\n    seed0 : Seed\n    seed0 = (uncurry initialSeed2) randomSeed\n\n    -- attention, this has to go in your Javascript code\n    -- Begin JS code\n    Elm.fullscreen(Elm.ModuleName,\n      {randomSeed: [Math.floor(Math.random()*0xFFFFFFFF),\n                    Math.floor(Math.random()*0xFFFFFFFF)] })\n    -- End JS code\n\n    -- 2.: In your elm code, store the seed and update it every time you\n    --     create a new Uuid\n    type alias Model =\n      { currentSeed : Seed\n      , currentUuid : Maybe Uuid.Uuid\n      }\n\n    type Action = NewUuid\n\n    update : Action -> Model -> Model\n    update action model =\n      case action of\n        NewUuid ->\n          let\n            (newUuid, newSeed) = generate Uuid.uuidGenerator model.currentSeed\n          in\n          { model\n          | currentUuid = Just newUuid\n          , currentSeed = newSeed\n          }\n\n    view : Signal.Address Action -> Model -> Html\n    view address model =\n      let\n        uuidText = case model.currentUuid of\n                    Nothing ->\n                      \"No Uuid was created so far\"\n                    Just uuid ->\n                        \"Current Uuid: \" ++ Uuid.toString uuid\n      in\n        div []\n          [ button [ onClick address NewUuid ] [ text \"Create a new Uuid!\" ]\n          , text uuidText\n          ]\n\n    main =\n      start\n        { model = { currentSeed = seed0, currentUuid = Nothing }\n        , update = update\n        , view = view\n        }\n\n@docs Uuid, uuidGenerator, fromString, toString\n",
        "aliases": [],
        "types": [
          {
            "name": "Uuid",
            "comment": " Uuid type. Represents a 128 bit Uuid (Version 4)\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromString",
            "comment": " Create a Uuid from a String in the canonical form (e.g.\n\"63B9AAA2-6AAF-473E-B37E-22EB66E66B76\"). Note that this module only supports\ncanonical Uuids, Versions 1-5 and will refuse to parse other Uuid variants.\n",
            "type": "String -> Maybe.Maybe Uuid.Uuid"
          },
          {
            "name": "toString",
            "comment": " Create a string representation from a Uuid in the canonical 8-4-4-4-12 form, i.e.\n\"63B9AAA2-6AAF-473E-B37E-22EB66E66B76\"\n",
            "type": "Uuid.Uuid -> String"
          },
          {
            "name": "uuidGenerator",
            "comment": " Random.PCG Generator for Uuids. Using this Generator instead of the generate\nfunction let's you use the full power of the Random.PCG to create lists of Uuids,\nmap them to other types etc.\n",
            "type": "Random.Pcg.Generator Uuid.Uuid"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Uuid.Barebones",
        "comment": " This is the Uuid.Barebones version that generates valid Uuids\nas Strings and provides a method to verify if a given String is a\nvalid Uuid.\n\nSee the main Uuid module docs for more information on how\n\n@docs uuidStringGenerator, isValidUuid\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "isValidUuid",
            "comment": " Verification function to check if the given string is a valid Uuid in the canonical\nrepresentation xxxxxxxx-xxxx-Axxx-Yxxx-xxxxxxxxxxxx where A is the version number between\n[1-5] and Y is in the range [8-B]\n",
            "type": "String -> Bool"
          },
          {
            "name": "uuidStringGenerator",
            "comment": " Random.PCG Generator for Uuid Strings. Using this Generator instead of the generate\nfunction lets you use the full power of the Random.PCG library to create lists of Uuids,\nmap them to other types etc.\n",
            "type": "Random.Pcg.Generator String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "debois/elm-dom",
    "version": "1.2.2",
    "docs": [
      {
        "name": "DOM",
        "comment": " You read values off the DOM by constructing a JSON decoder.\nSee the `target` value for example use.\n\n# Traversing the DOM\n@docs target, offsetParent, parentElement, nextSibling, previousSibling, childNode, childNodes\n\n# Geometry\nDecoders for reading sizing etc. properties off the DOM. All decoders return\nmeasurements in pixels.\n\nRefer to, e.g.,\n[the Mozilla documentation](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements)\nfor the precise semantics of these measurements. See also\n[this stackoverflow answer](https://stackoverflow.com/questions/294250/how-do-i-retrieve-an-html-elements-actual-width-and-height).\n\n@docs offsetWidth, offsetHeight\n@docs offsetLeft, offsetTop\n@docs Rectangle, boundingClientRect\n\n# Scroll\n@docs scrollLeft, scrollTop\n\n# Miscellanous\n@docs className\n",
        "aliases": [
          {
            "name": "Rectangle",
            "comment": " Types for rectangles.\n",
            "args": [],
            "type": "{ top : Float, left : Float, width : Float, height : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "boundingClientRect",
            "comment": " Approximation of the method\n[getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Floaterface/nsIDOMClientRect),\nbased off\n[this stackoverflow answer](https://stackoverflow.com/questions/442404/retrieve-the-position-x-y-of-an-html-element).\n\nNB! This decoder produces wrong results if a parent element is scrolled and\ndoes not have explicit positioning (e.g., `position: relative;`); see\n[this issue](https://github.com/debois/elm-dom/issues/4). \n\nAlso note that this decoder is likely computationally expensive and may produce\nresults that differ slightly from `getBoundingClientRect` in browser-dependent\nways.\n\n(I don't get to call getBoundingClientRect directly from Elm without going\nnative or using ports; my packages don't get to go native and I can find no\nsolution with ports. So we do it like in the bad old days with an O(lg n)\ntraversal of the DOM, browser-dependencies and CSS quirks, only now through\npresumably expensive JSON decoders.  It's 2007 forever, baby!)\n",
            "type": "Json.Decode.Decoder DOM.Rectangle"
          },
          {
            "name": "childNode",
            "comment": " Find the ith child of an element. \n",
            "type": "Int -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "childNodes",
            "comment": " Get the children of an element.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"
          },
          {
            "name": "className",
            "comment": " Get the class name(s) of an element.\n",
            "type": "Json.Decode.Decoder String"
          },
          {
            "name": "nextSibling",
            "comment": " Get the next sibling of an element.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "offsetHeight",
            "comment": " Get the heigh of an element in pixels. Underlying implementation\nreads `.offsetHeight`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "offsetLeft",
            "comment": " Get the left-offset of the element in the parent element in pixels.\nUnderlying implementation reads `.offsetLeft`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "offsetParent",
            "comment": " Get the offsetParent of the current element. Returns first argument if the current\nelement is already the root; applies the second argument to the parent element\nif not.\n\nTo do traversals of the DOM, exploit that Elm allows recursive values. \n",
            "type": "a -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "offsetTop",
            "comment": " Get the top-offset of the element in the parent element in pixels.\nUnderlying implementation reads `.offsetTop`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "offsetWidth",
            "comment": " Get the width of an element in pixels; underlying implementation\nreads `.offsetWidth`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "parentElement",
            "comment": " Get the parent of an element. \n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "previousSibling",
            "comment": " Get the previous sibling of an element.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "scrollLeft",
            "comment": " Get the amount of left scroll of the element in pixels.\nUnderlying implementation reads `.scrollLeft`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "scrollTop",
            "comment": " Get the amount of top scroll of the element in pixels.\nUnderlying implementation reads `.scrollTop`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "target",
            "comment": " Get the target DOM element of an event. You will usually start with this\ndecoder. E.g., to make a button which when clicked emit an Action that carries\nthe width of the button:\n\n    import DOM exposing (target, offsetWidth)\n\n    myButton : Html Float\n    myButton =\n      button\n        [ on \"click\" (target offsetWidth) ]\n        [ text \"Click me!\" ]\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "debois/elm-mdl",
    "version": "7.5.0",
    "docs": [
      {
        "name": "Material",
        "comment": "\n\nMaterial Design component library for Elm based on Google's\n[Material Design Lite](https://www.getmdl.io/).\n\nClick \n[here](https://debois.github.io/elm-mdl/)\nfor a live demo. \n\nThis module contains (a) documentation about overall usage and API principles of\nelm-mdl and (b) functions for suppressing TEA boilerplate. For a \"Getting started\" \nguide, refer to [the\nREADME](https://github.com/debois/elm-mdl/blob/master/README.md#get-started).\n\n\n# Using the library. \n\n## Interfacing with CSS\n\nThis library depends on the CSS part of Google's Material Design Lite. Your app\nwill have to load that. See the\n[Scheme](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Scheme)\nmodule for exposing details. (The starting point implementations above\nload CSS automatically.)\n\n## Color theming\n\nMaterial Design defines a color palette. The \n[Color](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Color)\nmodule contains exposing various `Property` values and helper functions for working with\nthis color palette.\n\n## View functions\n\nThe view function of most components has this signature: \n\n    view : (Msg -> m) -> Model -> List (Property m)  -> List (Html m) -> Html m\n\nIt's helpful to compare this signature to the standard one of `core/html`, e.g., \n`Html.div`: \n\n    div  :                        List (Attribute m) -> List (Html m) -> Html m\n\n1. For technical reasons, rather than using `Html.App.map f (view ...)`, you\nprovide the lifting function `f` directly to the component as the first\nargument. \n2. The `Model` argument is standard for TEA view functions. \n3. The `List (Property m)` argument can be thought of as an alternative\nto `List (Html.Attribute)`. You customise the behaviour of elm-mdl components\nby supplying these `Property m`, much the same way you set attributes of\n  `Html.div`. See the\n  [Options](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Options)\n  module for details. \n4. The `List (Html m)` argument is standard: it is the contents of the component, \n  e.g., the text inside a button. \n\nNB! If you are using parts to suppress TEA boilerplate, call `render` instead\nof `view` (see below). \n\n# Suppressing TEA boilerplate\n\nThe component model of the library is simply the Elm Architecture (TEA), i.e.,\neach component has types `Model` and `Msg`, and values `view` and `update`. A\nminimal example using this library as plain TEA can be found\n[here](https://github.com/debois/elm-mdl/blob/master/examples/Component-TEA.elm).\n\nUsing more than a few component in plain TEA is unwieldy because of the large\namount of boilerplate one has to write. This library uses the \n[Parts mechanic](https://github.com/debois/elm-parts) suppress most of\n  that boilerplate. A minimal example using parts is\n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\n\nIt is important to note that parts is not an alternative to TEA; it is simply\na library which hides much of the tedious TEA boilerplate. \n\n\n## Required boilerplate\n\nThe present module contains only convenience functions for working with nested \ncomponents in the Elm architecture. A minimal example using this library\nwith component support can be found \n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\nWe encourage you to use the library in this fashion.\n\nHere is how you use elm-mdl with parts. First, boilerplate. \n\n 1. Add a model container for Material components to your model:\n\n        type alias Model = \n          { ...\n          , mdl : Material.Model    \n          }\n\n        model : Model = \n          { ...\n          , mdl = Material.model\n          }\n\n 2. Add an action for Material components. \n\n        type Msg = \n          ...\n          | Mdl (Material.Msg Msg)\n\n 3. Handle that message in your update function as follows:\n\n        update message model = \n          case message of \n            ...\n            Mdl message' -> \n              Material.update message' model\n\n 4.  If your app is using Layout and/or Menu, you need also to set up\n subscriptions and initialisations; see `subscriptions` and `init` below.  \n\nYou now have sufficient boilerplate for using __any__ number of elm-mdl components. \nLet's say you need a textfield for name entry, and you'd like to be notifed\nwhenever the field changes value through your own NameChanged action: \n\n        import Material.Textfield as Textfield\n\n        ...\n\n        nameInput : Textfield.Instance Material.Model Msg\n        nameInput = \n        \n        view addr model = \n          ...\n          Textfield.render [0] Mdl model.mdl\n            [ css \"width\" \"16rem\"\n            , Textfield.floatingLabel\n            , Textfield.onInput NameChanged\n            ] \n\nThe win relative to using plain Elm Architecture is that adding a component\nneither requires you to update your model, your Msgs, nor your update function. \n\n\n## Optimising for size\n\nUsing this module will force all elm-mdl components to be built and included in \nyour application. If this is unacceptable, you can custom-build a version of this\nmodule that exposing uses only the components you need. To do so, you need to provide your\nown versions of the type `Model` and the value `model` of the present module. \nUse the corresponding definitions in this module as a starting point \n([source](https://github.com/debois/elm-mdl/blob/master/src/Material.elm)) \nand simply comment out the components you do not need. \n\n## Parts API\n\n@docs Model, model, Msg, update, subscriptions, init\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model encompassing all Material components. Since some components store\nuser actions in their model (notably Snackbar), the model is generic in the \ntype of such \"observations\". \n",
            "args": [],
            "type": "{ button : Parts.Indexed Material.Button.Model , textfield : Parts.Indexed Material.Textfield.Model , menu : Parts.Indexed Material.Menu.Model , snackbar : Maybe.Maybe (Material.Snackbar.Model Int) , layout : Material.Layout.Model , toggles : Parts.Indexed Material.Toggles.Model , tooltip : Parts.Indexed Material.Tooltip.Model , tabs : Parts.Indexed Material.Tabs.Model }"
          },
          {
            "name": "Msg",
            "comment": " Msg encompassing actions of all Material components. \n",
            "args": [
              "obs"
            ],
            "type": "Parts.Msg Material.Model obs"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "init",
            "comment": " Initialisation. See `subscriptions` above.\n",
            "type": "(Material.Msg obs -> obs) -> Platform.Cmd.Cmd obs"
          },
          {
            "name": "model",
            "comment": " Initial model.\n",
            "type": "Material.Model"
          },
          {
            "name": "subscriptions",
            "comment": " Subscriptions and initialisation of elm-mdl. Some components requires\nsubscriptions in order to function. Hook these up to your containing app as\nfollows. \n\n    import Material\n\n    type Model = \n      { ...\n      , mdl : Material.Model \n      }\n\n    type Msg = \n      ...\n      | Mdl Material.Msg \n\n    ...\n\n    App.program \n      { init = ( model, Material.init Mdl )\n      , view = view\n      , subscriptions = Material.subscriptions Mdl\n      , update = update\n      }\n\nCurrently, only Layout and Menu require subscriptions, and only Layout require\ninitialisation. \n",
            "type": "(Material.Msg obs -> obs) -> { model | mdl : Material.Model } -> Platform.Sub.Sub obs"
          },
          {
            "name": "update",
            "comment": " Update function for the above Msg. Provide as the first \nargument a lifting function that embeds the generic MDL action in \nyour own Msg type. \n",
            "type": "Material.Msg obs -> { model | mdl : Material.Model } -> ( { model | mdl : Material.Model }, Platform.Cmd.Cmd obs )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.List",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/index.html#lists-section):\n\n> Lists present multiple line items vertically as a single continuous element.\n> Refer the Material Design Spec to know more about the content options.\n\nSee also the\n[Material Design Specification]([https://material.google.com/components/lists.html).\n\nRefer to [this site](http://debois.github.io/elm-mdl/#lists)\nfor a live demo and example code.\n\n# List and item containers\n@docs ul, li\n\n# Primary content\n@docs content\n@docs subtitle, withSubtitle, body, withBody\n\n## Icons & avatars\n@docs avatarIcon, avatarImage, avatar, icon\n\n# Secondary content\n@docs content2, action2, info2\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "action2",
            "comment": " Defines the secondary action sub-division. (The primary action is clicking\nthe primary content.)\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "avatar",
            "comment": " If you need fine-grained control of the avatar, specify whatever element\nyou want, then add this property. (You may want to use this in conjunction with\n  `Options.img`.)\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "avatarIcon",
            "comment": " Set an avatar icon. Like `Icon.view`. \n",
            "type": "String -> List (Material.Options.Property a m) -> Html.Html m"
          },
          {
            "name": "avatarImage",
            "comment": " Set an avatar image. `src` is a value for `Html.Attributes.src`.\n",
            "type": "String -> List (Material.Options.Property a m) -> Html.Html m"
          },
          {
            "name": "body",
            "comment": " Defines the text-body sub-division.\tUse within `content`. You need to \nadjust list-item spacing by applying `withBody` to `li` if you use this. \nMutually exclusive with `subtitle`. \n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "content",
            "comment": " Defines the primary content sub-division. Use within `li`. \n",
            "type": "List (Material.Options.Property a m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "content2",
            "comment": " Defines the secondary content sub-division.\tUse within `li`. \n",
            "type": "List (Material.Options.Property a m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "icon",
            "comment": " Set an icon. Refer to `Icon.view`. \n",
            "type": "String -> List (Material.Icon.Property m) -> Html.Html m"
          },
          {
            "name": "info2",
            "comment": " Defines the information sub-division.\tApplicable only within `content2`. \n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "li",
            "comment": " List-item, no secondary content. (Use this rather than `Html.li`.)\n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "subtitle",
            "comment": " Defines the subtitle sub-division.\tUse within `content`. You need to \nadjust list-item spacing by applying `withSubtitle` to `li` if you use this. \nMutually exclusive with `body`. \n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "ul",
            "comment": " Container for list items. (Use this rather than `Html.ul`.)\n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "withBody",
            "comment": " Adjust item spacing to accomodate a 2-line body. Option for `li`. Don't set\nboth this and `withSubtitle`. \n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "withSubtitle",
            "comment": " Adjust inter-item spacing to accomodate a 1-line subtitle. Option for `li`.\nDon't set both this and `withBody`.\n",
            "type": "Material.Options.Property c m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Menu",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#menus-section):\n\n> The Material Design Lite (MDL) menu component is a user interface element\n> that allows users to select one of a number of options. The selection\n> typically results in an action initiation, a setting change, or other\n> observable effect. Menu options are always presented in sets of two or\n> more, and options may be programmatically enabled or disabled as required.\n> The menu appears when the user is asked to choose among a series of\n> options, and is usually dismissed after the choice is made.\n\n> Menus are an established but non-standardized feature in user interfaces,\n> and allow users to make choices that direct the activity, progress, or\n> characteristics of software. Their design and use is an important factor in\n> the overall user experience. See the menu component's Material Design\n> specifications page for details.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/menus.html).\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#menus)\nfor a live demo.\n\n# Subscriptions \n\nThe Menu component requires subscriptions to arbitrary mouse clicks to be set\nup. Example initialisation of containing app:  \n\n    import Material.Menu as Menu\n    import Material\n\n    type Model = \n      { ...\n      , mdl : Material.Model -- Boilerplate\n      }\n\n    type Msg = \n      ...\n      | Mdl Material.Msg -- Boilerplate\n\n    ...\n\n    App.program \n      { init = init\n      , view = view\n      , subscriptions = Menu.subs Mdl model\n      , update = update\n      }\n\n# Render\n@docs render, subs\n\n# Items\n@docs Item, item, onSelect, disabled, divider\n\n# Options\n@docs Property\n\n## Alignment\n@docs bottomLeft, bottomRight, topLeft, topRight\n\n## Appearance\n@docs ripple, icon\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update, view, subscriptions\n\n\n",
        "aliases": [
          {
            "name": "Item",
            "comment": " Type of menu items\n",
            "args": [
              "m"
            ],
            "type": "{ options : List (Material.Options.Property (Material.Menu.ItemConfig m) m) , html : List (Html.Html m) }"
          },
          {
            "name": "Model",
            "comment": " Component model\n",
            "args": [],
            "type": "{ ripples : Dict.Dict Int Material.Ripple.Model , animationState : Material.Menu.AnimationState , geometry : Maybe.Maybe Material.Menu.Geometry.Geometry , index : Maybe.Maybe Int }"
          },
          {
            "name": "Property",
            "comment": " Type of Menu options\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property Material.Menu.Config m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component action.\n",
            "args": [
              "m"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bottomLeft",
            "comment": " Menu extends from the bottom-left of the icon.\n(Suitable for the menu-icon sitting in a top-left corner)\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "bottomRight",
            "comment": " Menu extends from the bottom-right of the icon.\n(Suitable for the menu-icon sitting in a top-right corner)\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "defaultModel",
            "comment": " Default component model\n",
            "type": "Material.Menu.Model"
          },
          {
            "name": "disabled",
            "comment": " Mark item as disabled.\n",
            "type": "Material.Options.Property (Material.Menu.ItemConfig m) m"
          },
          {
            "name": "divider",
            "comment": " Render a dividing line before the item\n",
            "type": "Material.Options.Property (Material.Menu.ItemConfig m) m"
          },
          {
            "name": "icon",
            "comment": " Set the menu icon\n",
            "type": "String -> Material.Menu.Property m"
          },
          {
            "name": "item",
            "comment": " Construct a menu item.\n",
            "type": "List (Material.Options.Property (Material.Menu.ItemConfig m) m) -> List (Html.Html m) -> Material.Menu.Item m"
          },
          {
            "name": "onSelect",
            "comment": " Handle selection of containing item \n",
            "type": "m -> Material.Options.Property (Material.Menu.ItemConfig m) m"
          },
          {
            "name": "render",
            "comment": " Component render. Below is an example, assuming boilerplate setup as\nindicated in `Material`, and a user message `Select String`.\n\n    Menu.render Mdl [idx] model.mdl\n      [ Menu.topLeft, Menu.ripple ]\n      [ Menu.item\n        [ onSelect Select \"Some item\" ]\n        [ text \"Some item\" ]\n      , Menu.item\n        [ onSelect \"Another item\", Menu.divider ]\n        [ text \"Another item\" ]\n      , Menu.item\n        [ onSelect \"Disabled item\", Menu.disabled ]\n        [ text \"Disabled item\" ]\n      , Menu.item\n        [ onSelect \"Yet another item\" ]\n        [ text \"Yet another item\" ]\n      ]\n",
            "type": "(Parts.Msg (Material.Menu.Container c) m -> m) -> Parts.Index -> Material.Menu.Container c -> List (Material.Menu.Property m) -> List (Material.Menu.Item m) -> Html.Html m"
          },
          {
            "name": "ripple",
            "comment": " Menu items ripple when clicked\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "subs",
            "comment": " Parts-compatible subscription.\n",
            "type": "(Parts.Msg (Material.Menu.Container b) m -> m) -> Material.Menu.Container b -> Platform.Sub.Sub m"
          },
          {
            "name": "subscriptions",
            "comment": " Component subscriptions.\n",
            "type": "Material.Menu.Model -> Platform.Sub.Sub (Material.Menu.Msg m)"
          },
          {
            "name": "topLeft",
            "comment": " Menu extends from the top-left of the icon.\n(Suitable for the menu-icon sitting in a lower-left corner)\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "topRight",
            "comment": " Menu extends from the rop-right of the icon.\n(Suitable for the menu-icon sitting in a lower-right corner)\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "(Material.Menu.Msg msg -> msg) -> Material.Menu.Msg msg -> Material.Menu.Model -> ( Material.Menu.Model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "view",
            "comment": " Component view. \n",
            "type": "(Material.Menu.Msg m -> m) -> Material.Menu.Model -> List (Material.Menu.Property m) -> List (Material.Menu.Item m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Layout",
        "comment": " From the\n[Material Design Lite documentation](https://www.getmdl.io/components/index.html#layout-section):\n\n> The Material Design Lite (MDL) layout component is a comprehensive approach to\n> page layout that uses MDL development tenets, allows for efficient use of MDL\n> components, and automatically adapts to different browsers, screen sizes, and\n> devices.\n>\n> Appropriate and accessible layout is a critical feature of all user interfaces,\n> regardless of a site's content or function. Page design and presentation is\n> therefore an important factor in the overall user experience. See the layout\n> component's\n> [Material Design specifications page](https://www.google.com/design/spec/layout/structure.html#structure-system-bars)\n> for details.\n>\n> Use of MDL layout principles simplifies the creation of scalable pages by\n> providing reusable components and encourages consistency across environments by\n> establishing recognizable visual elements, adhering to logical structural\n> grids, and maintaining appropriate spacing across multiple platforms and screen\n> sizes. MDL layout is extremely powerful and dynamic, allowing for great\n> consistency in outward appearance and behavior while maintaining development\n> flexibility and ease of use.\n\nRefer to [this site](https://debois.github.io/elm-mdl/#layout)\nfor a live demo and example code.\n\n# Subscriptions\n\nThe layout needs to be initialised with and subscribe to changes in viewport\nsizes. Example initialisation of containing app: \n\n    import Material.Layout as Layout\n    import Material\n\n    type Model = \n      { ...\n      , mdl : Material.Model -- Boilerplate\n      }\n\n    type Msg = \n      ...\n      | Mdl Material.Msg -- Boilerplate\n\n    ...\n\n    App.program \n      { init = ( model, Layout.sub0 Mdl )\n      , view = view\n      , subscriptions = Layout.subs Mdl model\n      , update = update\n      }\n\n## Tabs width \n\n\nTabs display chevrons when the viewport is too small to show all tabs\nsimultaneously. Unfortunately, Elm currently does not give us a way to\nautomatically detect the width of the tabs at app launch. If you have tabs, \nto make the chevron display correctly at app lauch, you must set \n`model.tabScrollState.width` manually in `init`. If you're using parts, \nuse `setTabScrollState` to accomplish this. Initialisation would in this case\nbe (assuming a tab width of 1384 pixels):\n\n    App.program \n      { init = \n          ( { model | mdl = Layout.setTabsWidth 1384 model.mdl }\n            , Layout.sub0 Mdl \n          )\n      , view = view\n      , subscriptions = .mdl >> Layout.subs Mdl\n      , update = update\n      }\n\n\n@docs sub0, subs\n\n# Render\n@docs Contents, render, toggleDrawer\n\n# Options\n@docs Property\n\n## Tabs\n@docs fixedTabs, rippleTabs\n@docs selectedTab, setTabsWidth \n\n## Header\n@docs fixedHeader, fixedDrawer\n@docs waterfall, seamed, scrolling\n@docs transparentHeader\n\n## Events\n@docs onSelectTab\n\n# Sub-views\n@docs row, spacer, title, navigation, link, onClick, href\n\n# Elm architecture\n@docs view, Msg, Model, defaultModel, update, init, subscriptions\n\n\n",
        "aliases": [
          {
            "name": "Contents",
            "comment": " Content of the layout only (contents of main pane is set elsewhere). Every\npart is optional; if you supply an empty list for either, the sub-component is \nomitted. \n\nThe `header` and `drawer` contains the contents of the header rows and drawer,\nrespectively. Use `row`, `spacer`, `title`, `nav`, and `link`, as well as\nregular Html to construct these. The `tabs` contains\nthe title of each tab.\n",
            "args": [
              "m"
            ],
            "type": "{ header : List (Html.Html m) , drawer : List (Html.Html m) , tabs : ( List (Html.Html m), List (Material.Options.Style m) ) , main : List (Html.Html m) }"
          },
          {
            "name": "Model",
            "comment": " Component model. \n",
            "args": [],
            "type": "{ ripples : Dict.Dict Int Material.Ripple.Model , isSmallScreen : Bool , isCompact : Bool , isAnimating : Bool , isScrolled : Bool , isDrawerOpen : Bool , tabScrollState : Material.Layout.TabScrollState }"
          },
          {
            "name": "Property",
            "comment": " Layout options. \n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Layout.Config m) m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component messages.\n",
            "args": [],
            "cases": [
              [
                "ToggleDrawer",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultModel",
            "comment": " Default component model. \n",
            "type": "Material.Layout.Model"
          },
          {
            "name": "fixedDrawer",
            "comment": " Drawer is \"fixed\": It is always open on large screens. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "fixedHeader",
            "comment": " Header is \"fixed\": It appears even on small screens. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "fixedTabs",
            "comment": " Tabs are spread out to consume available space and do not scroll horisontally.\n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "href",
            "comment": " href for Links.\n",
            "type": "String -> Material.Layout.LinkProperty m"
          },
          {
            "name": "init",
            "comment": " Layout needs initial viewport size\n",
            "type": "( Material.Layout.Model, Platform.Cmd.Cmd Material.Layout.Msg )"
          },
          {
            "name": "link",
            "comment": " Link.\n",
            "type": "List (Material.Layout.LinkProperty m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "navigation",
            "comment": " Container for links.\n",
            "type": "List (Material.Options.Style m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "onClick",
            "comment": " onClick for Links.\n",
            "type": "m -> Material.Layout.LinkProperty m"
          },
          {
            "name": "onSelectTab",
            "comment": " Receieve notification when tab `k` is selected.\n",
            "type": "(Int -> m) -> Material.Layout.Property m"
          },
          {
            "name": "render",
            "comment": " Component render. Refer to `demo/Demo.elm` on github for an example use. \nExcerpt:\n\n    Layout.render Mdl model.mdl\n      [ Layout.selectedTab model.selectedTab\n      , Layout.onSelectTab SelectTab\n      , Layout.fixedHeader\n      ]\n      { header = myHeader\n      , drawer = myDrawer\n      , tabs = (tabTitles, [])\n      , main = [ MyComponent.view model ]\n      }\n",
            "type": "(Parts.Msg (Material.Layout.Container b) c -> c) -> Material.Layout.Container b -> List (Material.Layout.Property c) -> Material.Layout.Contents c -> Html.Html c"
          },
          {
            "name": "rippleTabs",
            "comment": " Make tabs ripple when clicked. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "row",
            "comment": " Header row. \n",
            "type": "List (Material.Layout.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "scrolling",
            "comment": " Header scrolls with contents. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "seamed",
            "comment": " Header behaves as \"Seamed\" header: it does not cast shadow, is permanently\naffixed to the top of the screen.\n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "selectedTab",
            "comment": " Set the selected tab. \n",
            "type": "Int -> Material.Layout.Property m"
          },
          {
            "name": "setTabsWidth",
            "comment": " Set tabsWidth\n\nThis function is for use with parts typing. For plain TEA, simply set the\n`tabsWidth` field in Model. \n",
            "type": "Int -> Material.Layout.Container b -> Material.Layout.Container b"
          },
          {
            "name": "spacer",
            "comment": " Push subsequent elements in header row or drawer column to the right/bottom.\n",
            "type": "Html.Html m"
          },
          {
            "name": "sub0",
            "comment": " Component subscription initialiser. Either this or \n`init` must be connected for the Layout to be responsive under\nviewport size changes. Example use: \n",
            "type": "(Parts.Msg (Material.Layout.Container b) c -> c) -> Platform.Cmd.Cmd c"
          },
          {
            "name": "subs",
            "comment": " Component subscriptions (type compatible with render). Either this or \n`subscriptions` must be connected for the Layout to be responsive under\nviewport size changes. \n",
            "type": "(Parts.Msg (Material.Layout.Container b) c -> c) -> Material.Layout.Container b -> Platform.Sub.Sub c"
          },
          {
            "name": "subscriptions",
            "comment": " Layout subscribes to changes in viewport size. \n",
            "type": "Material.Layout.Model -> Platform.Sub.Sub Material.Layout.Msg"
          },
          {
            "name": "title",
            "comment": " Title in header row or drawer.\n",
            "type": "List (Material.Layout.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "toggleDrawer",
            "comment": " Toggle drawer. \n\nThis function is for use with parts typing. For plain TEA, simply issue \nan update for the exposed Msg `ToggleDrawer`. \n",
            "type": "(Parts.Msg (Material.Layout.Container b) c -> c) -> c"
          },
          {
            "name": "transparentHeader",
            "comment": " Header is transparent: It draws on top of the layout's background\n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Layout.Msg -> Material.Layout.Model -> ( Material.Layout.Model, Platform.Cmd.Cmd Material.Layout.Msg )"
          },
          {
            "name": "view",
            "comment": " Main layout view.\n",
            "type": "(Material.Layout.Msg -> m) -> Material.Layout.Model -> List (Material.Layout.Property m) -> Material.Layout.Contents m -> Html.Html m"
          },
          {
            "name": "waterfall",
            "comment": " Header behaves as \"Waterfall\" header: On scroll, the top (argument `True`) or\nthe bottom (argument `False`) of the header disappears. \n",
            "type": "Bool -> Material.Layout.Property m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Scheme",
        "comment": " \nThe elm-mdl library depends on Google's MDL CSS implementation, and your\napplication must load this CSS in order for elm-mdl to function correctly.\nThere are two ways to accomplish this: \n\n1. Load CSS from HTML by adding suitable `<link ...>` directives to the\nHTML-file containing your app, or \n2. Load CSS from Elm (by inserting `style` elements into the DOM).\n\n\n# Load CSS from HTML \n\nTo load CSS manually, add the following to your main html file. \n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.2.0/material.min.css\" />\n\nYou may find the [elm-mdl demo's\nhtml](https://github.com/debois/elm-mdl/blob/master/demo/page.html) helpful. \n\n# Loading CSS from Elm \n\n@docs topWithScheme, top\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "top",
            "comment": " Top-level container with default color scheme. See `topWithScheme` above.\n",
            "type": "Html.Html a -> Html.Html a"
          },
          {
            "name": "topWithScheme",
            "comment": " Top-level container for Material components. This will force loading of\nMaterial Design Lite CSS files by inserting an appropriate `style` element.\n\nSupply primary and accent colors as parameters. Refer to the Material Design\nLite [Custom CSS theme builder](https://www.getmdl.io/customize/index.html)\nto preview combinations.  Please be aware that Grey, Blue Grey, and Brown\ncannot be secondary colors. If you choose them as such anyway, you will get the\ndefault theme.\n\n**NB!** Using this top-level container is not recommended, as most browsers\nwill load CSS requested from `style` elements concurrently with rendering the\ninitial page, which will produce a flicker on page load. The container is\nincluded only to provide an option to get started quickly and for use with\nelm-reactor.\n\nExample use: \n\n    view : Model -> Html Msg\n    view = \n      div \n        []\n        [ Scheme.topWithScheme Color.Teal Color.Red contents\n        , ...\n        ]\n",
            "type": "Material.Color.Hue -> Material.Color.Hue -> Html.Html a -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Spinner",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#loading-section/spinner):\n\n> The Material Design Lite (MDL) spinner component is an enhanced replacement\n> for the classic \"wait cursor\" (which varies significantly among hardware and\n> software versions) and indicates that there is an ongoing process, the\n> results of which are not yet available. A spinner consists of an open circle\n> that changes colors as it animates in a clockwise direction, and clearly\n> communicates that a process has been started but not completed.\n\n> A spinner performs no action itself, either by its display nor when the user\n> clicks or touches it, and does not indicate a process's specific progress or\n> degree of completion. The MDL spinner component provides various types of\n> spinners, and allows you to add display effects.\n\n> Spinners are a fairly new feature of most user interfaces, and provide users\n> with a consistent visual cue about ongoing activity, regardless of hardware\n> device, operating system, or browser environment. Their design and use is an\n> important factor in the overall user experience.\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#loading)\nfor a live demo.\n\n@docs spinner, active, singleColor\n@docs Property, Config, defaultConfig\n\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Spinner config\n",
            "args": [],
            "type": "{ active : Bool, singleColor : Bool }"
          },
          {
            "name": "Property",
            "comment": " A spinner's property.\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property Material.Spinner.Config m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "active",
            "comment": " Make a spinner visible\n",
            "type": "Bool -> Material.Spinner.Property m"
          },
          {
            "name": "defaultConfig",
            "comment": " Spinner default config is not `active`, not `singleColor`.\n",
            "type": "Material.Spinner.Config"
          },
          {
            "name": "singleColor",
            "comment": " Make a spinner a single color (the active color) of the stylesheet.\n",
            "type": "Bool -> Material.Spinner.Property m"
          },
          {
            "name": "spinner",
            "comment": " A spinner is a loading indicator that by default changes color and is\ninvisible. Example use: \n\n    spinner [ active ] []\n",
            "type": "List (Material.Spinner.Property m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Icon",
        "comment": " Convenience functions for producing Material Design Icons. Refer to\n[the Material Design Icons page](https://google.github.io/material-design-icons),\nor skip straight to the [Material Icons Library](https://design.google.com/icons/).\n\nThis implementation assumes that you have\n\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\">\n\nor an equivalent means of loading the icons in your HTML header. \n(`Material.top` will do this for you.)\n\n@docs i, view, size18, size24, size36, size48, onClick, Property\n",
        "aliases": [
          {
            "name": "Property",
            "comment": " Type of Icon properties. (You are unlikely to need this.)\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Icon.Config m) m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "i",
            "comment": " Render a default-sized icon with no behaviour. The\n`String` argument must be the name of a [Material Icon](https://design.google.com/icons/)\n(replace spaces with underscores).\n\nI.e., to produce a default size (24xp) \"trending flat\" icon:\n\n    import Material.Icon as Icon\n\n    icon : Html m\n    icon = Icon.i \"trending_flat\"\n",
            "type": "String -> Html.Html m"
          },
          {
            "name": "onClick",
            "comment": " Add an `on \"click\"` handler to an Icon. (You may want to use a `Button`\nwith `Button.icon` instead.)\n",
            "type": "m -> Material.Icon.Property m"
          },
          {
            "name": "size18",
            "comment": " Set icon to have size 18px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "size24",
            "comment": " Set icon to have size 24px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "size36",
            "comment": " Set icon to have size 36px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "size48",
            "comment": " Set icon to have size 48px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "view",
            "comment": " View function for icons. Supply the\n[Material Icons Library](https://design.google.com/icons/) name as\nthe first argument (replace spaces with underscores). Set the size of the\nicon with the `size..` Styles (default is 24px).  Do not use this function to\nproduce clickable icons; use icon buttons in Material.Button.icon for that.\n\n    import Material.Icon as Icon\n\n    icon : Html m\n    icon = Icon.view \"trending_flat\" [Icon.size48]\n",
            "type": "String -> List (Material.Icon.Property m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Typography",
        "comment": " From the [Material Design Lite documentation](https://github.com/google/material-design-lite/tree/mdl-1.x/src/typography#introduction):\n\n> The Material Design Lite (MDL) typography component is a comprehensive approach\n> to standardizing the use of typefaces in applications and page displays. MDL\n> typography elements are intended to replace the myriad fonts used by developers\n> (which vary significantly in appearance) and provide a robust, uniform library\n> of text styles from which developers can choose.\n>\n> The \"Roboto\" typeface is the standard for MDL display; it can easily be\n> integrated into a web page using the CSS3 @font-face rule. However, Roboto is\n> most simply accessed and included using a single standard HTML <link> element,\n> which can be obtained at this Google fonts page.\n>\n> Because of the many possible variations in font display characteristics in HTML\n> and CSS, MDL typography aims to provide simple and intuitive styles that use the\n> Roboto font and produce visually attractive and internally consistent text\n> results. See the typography component's [Material Design specifications](https://material.google.com/style/typography.html) page for\n> details.\n\nSee also the\n[Material Design Specification](https://www.google.com/design/spec/style/typography.html).\n\nRefer to [this site](http://debois.github.io/elm-mdl/#typography)\nfor a live demo.\n\n# Styles\n\nThe [Material Design\nspecification](https://material.google.com/style/typography.html#typography-other-typographic-guidelines)\nstipulates that typography has particular color contrast. The styles in this\nfile gives correct contrast for black and white only; for colored typography or backgrounds, use the \n`contrast` option to regulate color contrast. \n\n\n@docs display1\n@docs display2\n@docs display3\n@docs display4\n@docs body1\n@docs body2\n@docs headline\n@docs title\n@docs subhead\n@docs caption\n@docs button\n@docs menu\n\n## Color contrast\n@docs contrast\n\n# Transforms\n@docs capitalize\n@docs lowercase\n@docs uppercase\n\n# Alignment\n@docs left\n@docs center\n@docs right\n@docs justify\n\n# Utility\n@docs nowrap\n@docs tableStriped\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "body1",
            "comment": " Regular 14px (Device), Regular 13px (Desktop)\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "body2",
            "comment": " Medium 14px (Device), Medium 13px (Desktop)\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "button",
            "comment": " Medium (All Caps) 14px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "capitalize",
            "comment": " Capitalized text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "caption",
            "comment": " Regular 12px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "center",
            "comment": " Center aligned text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "contrast",
            "comment": " Modify contrast of typography. Implemented under the hood by setting CSS\n`opacity`. \n",
            "type": "Float -> Material.Options.Property c m"
          },
          {
            "name": "display1",
            "comment": " Regular 34px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "display2",
            "comment": " Regular 45px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "display3",
            "comment": " Regular 56px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "display4",
            "comment": " Light 112px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "headline",
            "comment": " Regular 24px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "justify",
            "comment": " Justified text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "left",
            "comment": " Left aligned text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "lowercase",
            "comment": " Lowercased text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "menu",
            "comment": " Medium 14px (Device), Medium 13px (Desktop)\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "nowrap",
            "comment": " No wrap text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "right",
            "comment": " Right aligned text\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "subhead",
            "comment": " Regular 16px (Device), Regular 15px (Desktop)\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "tableStriped",
            "comment": " Striped table\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "title",
            "comment": " Medium 20px\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "uppercase",
            "comment": " Uppercased text\n",
            "type": "Material.Options.Property c m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Slider",
        "comment": " From the [Material Design Lite documentation](https://material.google.com/components/sliders.html):\r\n\r\n> The Material Design Lite (MDL) slider component is an enhanced version of the\r\n> new HTML5 `<input type=\"range\">` element. A slider consists of a horizontal line\r\n> upon which sits a small, movable disc (the thumb) and, typically, text that\r\n> clearly communicates a value that will be set when the user moves it.\r\n>\r\n> Sliders are a fairly new feature in user interfaces, and allow users to choose a\r\n> value from a predetermined range by moving the thumb through the range (lower\r\n> values to the left, higher values to the right). Their design and use is an\r\n> important factor in the overall user experience. See the slider component's\r\n> [Material Design specifications](https://material.google.com/components/sliders.html) page for details.\r\n>\r\n> The enhanced slider component may be initially or programmatically disabled.\r\n\r\nSee also the\r\n[Material Design Specification](https://material.google.com/components/sliders.html).\r\n\r\nRefer to [this site](http://debois.github.io/elm-mdl/#sliders)\r\nfor a live demo.\r\n\r\n*NOTE* Currently does not work properly on [Microsoft Edge](https://github.com/google/material-design-lite/issues/1625)\r\n\r\n#View\r\n\r\n@docs view\r\n\r\n# Properties\r\n\r\n@docs Property\r\n@docs value, min, max\r\n@docs step, disabled\r\n\r\n# Events\r\n\r\n@docs onChange\r\n\r\n",
        "aliases": [
          {
            "name": "Property",
            "comment": " Properties for Slider options.\r\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Slider.Config m) m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "disabled",
            "comment": " Disables the slider\r\n",
            "type": "Material.Slider.Property m"
          },
          {
            "name": "max",
            "comment": " Sets the step. Defaults to 100\r\n",
            "type": "Float -> Material.Slider.Property m"
          },
          {
            "name": "min",
            "comment": " Sets the step. Defaults to 0\r\n",
            "type": "Float -> Material.Slider.Property m"
          },
          {
            "name": "onChange",
            "comment": " onChange listener for slider values\r\n",
            "type": "(Float -> m) -> Material.Slider.Property m"
          },
          {
            "name": "step",
            "comment": " Sets the step. Defaults to 1\r\n",
            "type": "Float -> Material.Slider.Property m"
          },
          {
            "name": "value",
            "comment": " Sets current value\r\n",
            "type": "Float -> Material.Slider.Property m"
          },
          {
            "name": "view",
            "comment": " A slider consists of a horizontal line upon which sits a small, movable\r\ndisc (the thumb) and, typically, text that clearly communicates a value that\r\nwill be set when the user moves it. Example use:\r\n\r\n    import Material.Slider as Slider\r\n\r\n    slider : Model -> Html Msg\r\n    slider model =\r\n      p [ style [ (\"width\", \"300px\") ] ]\r\n        [ Slider.view\r\n            [ Slider.onChange SliderMsg\r\n            , Slider.value model.value\r\n            ]\r\n        ]\r\n",
            "type": "List (Material.Slider.Property m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Table",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#tables-section):\n\n> The Material Design Lite (MDL) data-table component is an enhanced version of\n> the standard HTML <table>. A data-table consists of rows and columns of\n> well-formatted data, presented with appropriate user interaction\n> capabilities.\n\n> Tables are a ubiquitous feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the data-table component's\n> Material Design specifications page for details.\n\n> The available row/column/cell types in a data-table are mostly\n> self-formatting; that is, once the data-table is defined, the individual\n> cells require very little specific attention. For example, the rows exhibit\n> shading behavior on mouseover and selection, numeric values are automatically\n> formatted by default, and the addition of a single class makes the table rows\n> individually or collectively selectable. This makes the data-table component\n> convenient and easy to code for the developer, as well as attractive and\n> intuitive for the user.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/data-tables.html).\n\nRefer to\n[this this](https://debois.github.io/elm-mdl/#tables)\nfor a live demo.\n\n# HTML\n@docs table, thead, tbody, tfoot\n@docs tr, th, td\n\n# Options\n@docs onClick\n\n## Sorting options. \nThe following options have effect only when applied in the header row. \n@docs ascending, descending, numeric, Order, sorted, selected\n",
        "aliases": [],
        "types": [
          {
            "name": "Order",
            "comment": " Possible orderings \n",
            "args": [],
            "cases": [
              [
                "Ascending",
                []
              ],
              [
                "Descending",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "ascending",
            "comment": " Containing column should be sorted ascendingly\n",
            "type": "Material.Options.Property { a | sorted : Maybe.Maybe Material.Table.Order } m"
          },
          {
            "name": "descending",
            "comment": " Containing column should be sorted descendingly\n",
            "type": "Material.Options.Property { a | sorted : Maybe.Maybe Material.Table.Order } m"
          },
          {
            "name": "numeric",
            "comment": " Containing column is interpreted as numeric when used as sorting key\n",
            "type": "Material.Options.Property { a | numeric : Bool } m"
          },
          {
            "name": "onClick",
            "comment": " Dispatch given message when cell is clicked. \n",
            "type": "m -> Material.Options.Property { a | onClick : Maybe.Maybe (Html.Attribute m) } m"
          },
          {
            "name": "selected",
            "comment": " Mark row as selected. \n",
            "type": "Material.Options.Property { a | selected : Bool } m"
          },
          {
            "name": "sorted",
            "comment": " Containing column should be sorted by given order\n",
            "type": "Material.Table.Order -> Material.Options.Property { a | sorted : Maybe.Maybe Material.Table.Order } m"
          },
          {
            "name": "table",
            "comment": " Main table constructor. Example use: \n\n    table []\n      [ thead []\n          [ tr []\n              [ th [ ascending ] [ text \"Material\" ]\n              , th [ numeric ] [ text \"Quantity\" ]\n              , th [ numeric ] [ text \"Unit Price\" ]\n              ]\n          ]\n      , tbody []\n          [ tr []\n              [ td [] [ text \"Acrylic (Transparent)\" ]\n              , td [ numeric ] [ text \"25\" ]\n              , td [ numeric ] [ text \"$2.90\" ]\n              ]\n          {- ... -}\n          ]\n      ]\n",
            "type": "List (Material.Options.Property {} m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "tbody",
            "comment": " Define table body\n",
            "type": "List (Material.Options.Property {} m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "td",
            "comment": " Define table cell \n",
            "type": "List (Material.Options.Property Material.Table.Cell m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "tfoot",
            "comment": " Define table footer row(s)\n",
            "type": "List (Material.Options.Property {} m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "th",
            "comment": " Define cell in table header \n",
            "type": "List (Material.Options.Property (Material.Table.Header m) m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "thead",
            "comment": " Define table header row(s) \n",
            "type": "List (Material.Options.Property {} m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "tr",
            "comment": " Table row \n",
            "type": "List (Material.Options.Property Material.Table.Row m) -> List (Html.Html m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Textfield",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#textfields-section):\n\n> The Material Design Lite (MDL) text field component is an enhanced version of\n> the standard HTML `<input type=\"text\">` and `<input type=\"textarea\">` elements.\n> A text field consists of a horizontal line indicating where keyboard input\n> can occur and, typically, text that clearly communicates the intended\n> contents of the text field. The MDL text field component provides various\n> types of text fields, and allows you to add both display and click effects.\n>\n> Text fields are a common feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the text field component's\n> [Material  Design specifications page](https://www.google.com/design/spec/components/text-fields.html)\n> for details.\n>\n> The enhanced text field component has a more vivid visual look than a standard\n> text field, and may be initially or programmatically disabled. There are three\n> main types of text fields in the text field component, each with its own basic\n> coding requirements. The types are single-line, multi-line, and expandable.\n\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#textfields)\nfor a live demo.\n \n# Component render\n@docs render\n\n# Options\n@docs Property, value\n  \n# Appearance\n\n@docs label, floatingLabel, error, disabled, rows, cols\n@docs autofocus, maxlength\n\n## Styling\nTextfields are implemented as `<input>` elements sitting inside a\n`<div>`, along with various helper elements. Supplying styling arguments (e.g.,\n`Options.css`) to `render` or `view` will apply these arguments to the\noutermost `<div>`.  If you wish to apply styling to the underlying `<input>`\nelement, use the `style` property below. \n\n@docs style\n\n# Type \n@docs password, textarea, text', onInput\n@docs onBlur, onFocus\n\n# Advanced\n@docs on\n\n# Elm Architecture\n@docs Msg, Model, defaultModel, update, view\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model. The textfield is in its error-container if `error` is not `Nothing`.\nThe contents of the field is `value`.\n",
            "args": [],
            "type": "{ isFocused : Bool, value : String }"
          },
          {
            "name": "Property",
            "comment": " Type of Textfield options\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Textfield.Config m) m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component actions. `Input` carries the new value of the field.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "autofocus",
            "comment": " Specifies that the input should automatically get focus when the page loads\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "cols",
            "comment": " Number of columns in a multi-line input\n",
            "type": "Int -> Material.Textfield.Property m"
          },
          {
            "name": "defaultModel",
            "comment": " Default model. No label, error, or value.\n",
            "type": "Material.Textfield.Model"
          },
          {
            "name": "disabled",
            "comment": " Disable the textfield input\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "error",
            "comment": " Error message\n",
            "type": "String -> Material.Textfield.Property m"
          },
          {
            "name": "floatingLabel",
            "comment": " Label of textfield animates away from the input area on input\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "label",
            "comment": " Label of the textfield\n",
            "type": "String -> Material.Textfield.Property m"
          },
          {
            "name": "maxlength",
            "comment": " Specifies the maximum number of characters allowed in the input\n",
            "type": "Int -> Material.Textfield.Property m"
          },
          {
            "name": "on",
            "comment": " Add custom event handlers\n ",
            "type": "String -> Json.Decode.Decoder m -> Material.Textfield.Property m"
          },
          {
            "name": "onBlur",
            "comment": " The `blur` event occurs when the input loses focus.\n\nCurrently to support this on Firefox you need to include a\npolyfill that enables `focusin` and `focusout` events.\nFor example [polyfill.io](https://polyfill.io)\n\nAdd the following to your index.html\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=Event.focusin\"></script>\n```\n\n",
            "type": "m -> Material.Textfield.Property m"
          },
          {
            "name": "onFocus",
            "comment": " The `focus` event occurs when the input gets focus.\n\nCurrently to support this on Firefox you need to include a\npolyfill that enables `focusin` and `focusout` events.\nFor example [polyfill.io](https://polyfill.io)\n\nAdd the following to your index.html\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=Event.focusin\"></script>\n```\n\n",
            "type": "m -> Material.Textfield.Property m"
          },
          {
            "name": "onInput",
            "comment": " Message to dispatch on input\n",
            "type": "(String -> m) -> Material.Textfield.Property m"
          },
          {
            "name": "password",
            "comment": " Sets the type of input to 'password'.\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "render",
            "comment": " Component render. Below is an example, assuming boilerplate setup as indicated \n  in `Material`, and a user message `ChangeAgeMsg Int`.\n\n    Textfield.render Mdl [0] model.mdl\n      [ Textfield.label \"Age\"\n      , Textfield.floatingLabel\n      , Textfield.value model.age\n      , Textfield.onInput (String.toInt >> ChangeAgeMsg)\n      ]\n\nBe aware that styling (third argument) is applied to the outermost element\nof the textfield's implementation, and so is mostly useful for positioning\n(e.g., `margin: 0 auto;` or `align-self: flex-end`). See `Textfield.style`\nif you need to apply styling to the underlying `<input>` element. \n",
            "type": "(Parts.Msg (Material.Textfield.Container c) m -> m) -> Parts.Index -> Material.Textfield.Container c -> List (Material.Textfield.Property m) -> Html.Html m"
          },
          {
            "name": "rows",
            "comment": " Number of rows in a multi-line input\n",
            "type": "Int -> Material.Textfield.Property m"
          },
          {
            "name": "style",
            "comment": " Set properties on the actual `input` element in the Textfield.\n",
            "type": "List (Material.Options.Style m) -> Material.Textfield.Property m"
          },
          {
            "name": "text'",
            "comment": " Sets the type of input to 'text'. (Name chosen to avoid clashing with Html.text)\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "textarea",
            "comment": " Creates a multiline textarea using 'textarea' element\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Textfield.Msg -> Material.Textfield.Model -> Material.Textfield.Model"
          },
          {
            "name": "value",
            "comment": " Current value of the textfield. \n",
            "type": "String -> Material.Textfield.Property m"
          },
          {
            "name": "view",
            "comment": " Component view\n\nBe aware that styling (third argument) is applied to the outermost element\nof the textfield's implementation, and so is mostly useful for positioning\n(e.g., `margin: 0 auto;` or `align-self: flex-end`). See `Textfield.style`\nif you need to apply styling to the underlying `<input>` element. \n",
            "type": "(Material.Textfield.Msg -> m) -> Material.Textfield.Model -> List (Material.Textfield.Property m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Tabs",
        "comment": " From the [Material Design Lite documentation](https://getmdl.io/components/index.html#layout-section/tabs):\r\n\r\n> The Material Design Lite (MDL) tab component is a user interface element that\r\n> allows different content blocks to share the same screen space in a mutually\r\n> exclusive manner. Tabs are always presented in sets of two or more, and they\r\n> make it easy to explore and switch among different views or functional aspects\r\n> of an app, or to browse categorized data sets individually. Tabs serve as\r\n> \"headings\" for their respective content; the active tab — the one whose content\r\n> is currently displayed — is always visually distinguished from the others so the\r\n> user knows which heading the current content belongs to.\r\n>\r\n> Tabs are an established but non-standardized feature in user interfaces, and\r\n> allow users to view different, but often related, blocks of content (often\r\n> called panels). Tabs save screen real estate and provide intuitive and logical\r\n> access to data while reducing navigation and associated user confusion. Their\r\n> design and use is an important factor in the overall user experience. See the\r\n> tab component's Material Design specifications page for details.\r\n\r\nSee also the\r\n[Material Design Specification](https://material.google.com/components/tabs.html#tabs-usage).\r\n\r\nRefer to [this site](http://debois.github.io/elm-mdl/#tabs)\r\nfor a live demo.\r\n\r\n# Types\r\n@docs Label\r\n@docs Property\r\n\r\n# Render\r\n\r\n@docs render\r\n\r\n\r\n# Events\r\n\r\n@docs onSelectTab, activeTab\r\n\r\n\r\n# Appearance\r\n\r\n@docs ripple\r\n\r\n\r\n# Content\r\n\r\n@docs label\r\n@docs textLabel\r\n\r\n\r\n# Elm architecture\r\n\r\n@docs Model, defaultModel\r\n@docs Msg\r\n@docs update\r\n@docs view\r\n\r\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Component model.\r\n",
            "args": [],
            "type": "{ ripples : Dict.Dict Int Material.Ripple.Model }"
          },
          {
            "name": "Property",
            "comment": " Tab options.\r\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Tabs.Config m) m"
          }
        ],
        "types": [
          {
            "name": "Label",
            "comment": " Opaque `Label` type\r\n",
            "args": [
              "m"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Component action.\r\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "activeTab",
            "comment": " Set the active tab.\r\n",
            "type": "Int -> Material.Tabs.Property m"
          },
          {
            "name": "defaultModel",
            "comment": " Default component model constructor.\r\n",
            "type": "Material.Tabs.Model"
          },
          {
            "name": "label",
            "comment": " Create tab `label`\r\n",
            "type": "List (Material.Tabs.Property m) -> List (Html.Html m) -> Material.Tabs.Label m"
          },
          {
            "name": "onSelectTab",
            "comment": " Receieve notification when tab `k` is selected.\r\n",
            "type": "(Int -> m) -> Material.Tabs.Property m"
          },
          {
            "name": "render",
            "comment": " Component render.\r\n",
            "type": "(Parts.Msg (Material.Tabs.Container c) m -> m) -> Parts.Index -> Material.Tabs.Container c -> List (Material.Tabs.Property m) -> List (Material.Tabs.Label m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "ripple",
            "comment": " Make tabs ripple when clicked.\r\n",
            "type": "Material.Tabs.Property m"
          },
          {
            "name": "textLabel",
            "comment": " Create tab `label` with simple text.\r\nMost often the labels are just text so this is a\r\nutility function to help create labels with just text.\r\n",
            "type": "List (Material.Tabs.Property m) -> String -> Material.Tabs.Label m"
          },
          {
            "name": "update",
            "comment": " Component update.\r\n",
            "type": "Material.Tabs.Msg -> Material.Tabs.Model -> ( Material.Tabs.Model, Platform.Cmd.Cmd Material.Tabs.Msg )"
          },
          {
            "name": "view",
            "comment": " Component view.\r\n",
            "type": "(Material.Tabs.Msg -> m) -> Material.Tabs.Model -> List (Material.Tabs.Property m) -> List (Material.Tabs.Label m) -> List (Html.Html m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Elevation",
        "comment": " From the [Material Design Lite documentation](https://github.com/google/material-design-lite/blob/master/src/shadow/README.md)\n\n> The Material Design Lite (MDL) shadow is not a component in the same sense as\n> an MDL card, menu, or textbox; it is a visual effect that can be assigned to a\n> user interface element. The effect simulates a three-dimensional positioning of\n> the element, as though it is slightly raised above the surface it rests upon —\n> a positive z-axis value, in user interface terms. The shadow starts at the\n> edges of the element and gradually fades outward, providing a realistic 3-D\n> effect.\n> \n> Shadows are a convenient and intuitive means of distinguishing an element from\n> its surroundings. A shadow can draw the user's eye to an object and emphasize\n> the object's importance, uniqueness, or immediacy.\n> \n> Shadows are a well-established feature in user interfaces, and provide users\n> with a visual clue to an object's intended use or value. Their design and use\n> is an important factor in the overall user experience.)\n\nThe [Material Design Specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-elevation-android-)\npre-defines appropriate elevation for most UI elements; you need to manually\nassign shadows only to your own elements. \n\nYou are encouraged to visit the\n[Material Design specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html)\nfor details about appropriate use of shadows. \n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#elevation)\nfor a live demo. \n  \n\n# Elevations\nEach of the values below denote an elevation of a certain heigh, e.g., \n`e4` will cast a shadow indicating an elevation of 4dp. The default elevation\nis `e0`, no elevation.\n@docs e0, e2, e3, e4, e6, e8, e16, e24\n@docs elevations\n\n# Transitions\n@docs transition\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "e0",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e16",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e2",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e24",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e3",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e4",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e6",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e8",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "elevations",
            "comment": " List of all elevations and their depth in dp. \n",
            "type": "Array.Array ( Material.Options.Property a m, Int )"
          },
          {
            "name": "transition",
            "comment": " Add a CSS-transition to changes in elevation. Supply a transition\nduration in milliseconds as argument. \n\nNB! This Property a m is dictated by neither MDL nor the Material Design\nSpecification. \n",
            "type": "Float -> Material.Options.Property a m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Tooltip",
        "comment": " From the [Material Design Lite documentation](https://getmdl.io/components/index.html#tooltips-section):\r\n\r\n> The Material Design Lite (MDL) tooltip component is an enhanced version of the\r\n> standard HTML tooltip as produced by the `title` attribute. A tooltip consists\r\n> of text and/or an image that clearly communicates additional information about\r\n> an element when the user hovers over or, in a touch-based UI, touches the\r\n> element. The MDL tooltip component is pre-styled (colors, fonts, and other\r\n> settings are contained in material.min.css) to provide a vivid, attractive\r\n> visual element that displays related but typically non-essential content,\r\n> e.g., a definition, clarification, or brief instruction.\r\n>\r\n> Tooltips are a ubiquitous feature of most user interfaces, regardless of a\r\n> site's content or function. Their design and use is an important factor in the\r\n> overall user experience. See the tooltip component's Material Design\r\n> specifications page for details.\r\n\r\nSee also the\r\n[Material Design Specification](https://material.google.com/components/tooltips.html).\r\n\r\nRefer to [this site](http://debois.github.io/elm-mdl/#tooltips)\r\nfor a live demo.\r\n\r\nTo use a `tooltip` you have to (a) attach the mouse event listeners to the target\r\nby calling `attach`, and (b) create a tooltip with element `Tooltip.render`\r\nas a sibling of the target. Here is an example: \r\n\r\n```elm\r\nimport Material.Tooltip as Tooltip\r\nimport Material.Icon as Icon\r\n\r\ntooltip : Model -> Html Msg\r\ntooltip model =\r\n  div []\r\n    [ Icon.view \"add\" [ Tooltip.attach Mdl [0] ]\r\n    , Tooltip.render Mdl [0] model.mdl\r\n        [Tooltip.default]\r\n        [text \"Default tooltip\"]\r\n    ]\r\n```\r\n\r\n# Render\r\n@docs attach, render\r\n\r\n# Options\r\n@docs Property\r\n@docs left, right, top, bottom\r\n@docs large\r\n@docs container\r\n\r\n# Elm architecture\r\nIf you do not use parts, you should not use `attach`, but instead add the\r\n`onEnter` and `onLeave` attributes to the target element. \r\n\r\n@docs onEnter, onLeave\r\n@docs Model, defaultModel, Msg, update, view\r\n\r\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Component model.\r\n",
            "args": [],
            "type": "{ isActive : Bool, domState : Material.Tooltip.DOMState }"
          },
          {
            "name": "Property",
            "comment": " Properties for Tooltip options.\r\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Tooltip.Config m) m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component message.\r\n",
            "args": [],
            "cases": [
              [
                "Enter",
                [
                  "Material.Tooltip.DOMState"
                ]
              ],
              [
                "Leave",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "attach",
            "comment": " Attach event handlers for Parts version\r\n",
            "type": "(Parts.Msg (Material.Tooltip.Container a) b -> b) -> Parts.Index -> Material.Options.Property c b"
          },
          {
            "name": "bottom",
            "comment": " Position the tooltip below the target element\r\n",
            "type": "Material.Tooltip.Property m"
          },
          {
            "name": "container",
            "comment": " Set the tooltip container element. You are unlikely to need this. \r\n\r\nThis option simply sets the  container element for the tooltip itself, which\r\nyou might want to control for layout purposes. It does not set the element\r\nhovering on which triggers the tooltip; use `attach` to set that. \r\n",
            "type": "Material.Tooltip.HtmlElement m -> Material.Tooltip.Property m"
          },
          {
            "name": "defaultModel",
            "comment": " Default component model constructor.\r\n",
            "type": "Material.Tooltip.Model"
          },
          {
            "name": "large",
            "comment": " Large tooltip\r\n",
            "type": "Material.Tooltip.Property m"
          },
          {
            "name": "left",
            "comment": " Position the tooltip on the left of the target element\r\n",
            "type": "Material.Tooltip.Property m"
          },
          {
            "name": "onEnter",
            "comment": " Mouse enter event handler, TEA variant\r\n",
            "type": "(Material.Tooltip.Msg -> m) -> Html.Attribute m"
          },
          {
            "name": "onLeave",
            "comment": " Mouse leave event handler, TEA variant\r\n",
            "type": "(Material.Tooltip.Msg -> m) -> Html.Attribute m"
          },
          {
            "name": "render",
            "comment": " Component render.\r\n",
            "type": "(Parts.Msg (Material.Tooltip.Container c) m -> m) -> Parts.Index -> Material.Tooltip.Container c -> List (Material.Tooltip.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "right",
            "comment": " Position the tooltip on the right of the target element\r\n",
            "type": "Material.Tooltip.Property m"
          },
          {
            "name": "top",
            "comment": " Position the tooltip above the target element\r\n",
            "type": "Material.Tooltip.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\r\n",
            "type": "Material.Tooltip.Msg -> Material.Tooltip.Model -> ( Material.Tooltip.Model, Platform.Cmd.Cmd Material.Tooltip.Msg )"
          },
          {
            "name": "view",
            "comment": " Component view.\r\n",
            "type": "(Material.Tooltip.Msg -> m) -> Material.Tooltip.Model -> List (Material.Tooltip.Property m) -> List (Html.Html m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Grid",
        "comment": " From the\n[Material Design Lite documentation](http://www.getmdl.io/components/#layout-section/grid):\n\n> The Material Design Lite (MDL) grid component is a simplified method for laying\n> out content for multiple screen sizes. It reduces the usual coding burden\n> required to correctly display blocks of content in a variety of display\n> conditions.\n>\n> The MDL grid is defined and enclosed by a container element. A grid has 12\n> columns in the desktop screen size, 8 in the tablet size, and 4 in the phone\n> size, each size having predefined margins and gutters. Cells are laid out\n> sequentially in a row, in the order they are defined, with some exceptions:\n>\n>   - If a cell doesn't fit in the row in one of the screen sizes, it flows\n>     into the following line.\n>   - If a cell has a specified column size equal to or larger than the number\n>     of columns for the current screen size, it takes up the entirety of its\n>     row.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#grid)\nfor a live demo. \n\nExample use:\n\n    import Material.Grid exposing (grid, cell, size, Device(..))\n\n    top : (Html a)\n    top =\n      grid []\n        [ cell [ size All 4 ]\n            [ h4 [] [text \"Cell 1\"]\n            ]\n        , cell [ offset All 2, size All 4 ]\n            [ h4 [] [text \"Cell 2\"]\n            , p [] [text \"This cell is offset by 2\"]\n            ]\n        , cell [ size All 6 ]\n            [ h4 [] [text \"Cell 3\"]\n            ]\n        , cell [ size Tablet 6, size Desktop 12, size Phone 2 ]\n            [ h4 [] [text \"Cell 4\"]\n            , p [] [text \"Size varies with device\"]\n            ]\n        ]\n\n# Grid container\n@docs grid, noSpacing, maxWidth\n\n# Cells\n\nCells are configured with a `List Style`; this configuration dictates the\nsize, offset, etc. of the cell. \n\n@docs cell, Cell, Device, size, offset, Align, align, stretch, hide, order\n",
        "aliases": [],
        "types": [
          {
            "name": "Align",
            "comment": " Alignment of cell contents; use with `align`.\n",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Middle",
                []
              ],
              [
                "Bottom",
                []
              ]
            ]
          },
          {
            "name": "Cell",
            "comment": " Opaque cell type.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Device",
            "comment": " Device specifiers, used with `size` and `offset`. (A `Device` really\nencapsulates a screen size.)\n",
            "args": [],
            "cases": [
              [
                "All",
                []
              ],
              [
                "Desktop",
                []
              ],
              [
                "Tablet",
                []
              ],
              [
                "Phone",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "align",
            "comment": " Specify vertical cell alignment. See `Align`.\n",
            "type": "Material.Grid.Align -> Material.Options.Style a"
          },
          {
            "name": "cell",
            "comment": " Construct a cell for use in the argument list for `grid`. Note that this\nmodule defines exposing various styles to set size, offset, etc. of the cell. \n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Grid.Cell a"
          },
          {
            "name": "grid",
            "comment": " Construct a grid with options.\n",
            "type": "List (Material.Options.Style a) -> List (Material.Grid.Cell a) -> Html.Html a"
          },
          {
            "name": "hide",
            "comment": " Specify that a cell should be hidden on given `Device`.\n",
            "type": "Material.Grid.Device -> Material.Options.Style a"
          },
          {
            "name": "maxWidth",
            "comment": " Set maximum grid width. If more space is available, the grid stays centered with\npadding on either side. Width must be a valid CSS dimension. \n",
            "type": "String -> Material.Options.Style a"
          },
          {
            "name": "noSpacing",
            "comment": " Set grid to have no spacing between cells. \n",
            "type": "Material.Options.Style a"
          },
          {
            "name": "offset",
            "comment": " Specify cell offset, i.e., empty number of empty cells before the present\none. On devices of type `Device`, leave `Int` columns blank before the present\none begins.\n",
            "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
          },
          {
            "name": "order",
            "comment": " Specify that a cell should re-order itself to position 'Int' on `Device`.\n",
            "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
          },
          {
            "name": "size",
            "comment": " Specify cell size. On devices of type `Device`, the\ncell being specified spans `Int` columns.\n",
            "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
          },
          {
            "name": "stretch",
            "comment": " Specify that a cell stretches vertically to fill the parent.\n",
            "type": "Material.Options.Style a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Footer",
        "comment": " From the [Material Design Lite documentation](https://getmdl.io/components/index.html#layout-section/footer):\n\n> The Material Design Lite (MDL) footer component is a comprehensive container\n> intended to present a substantial amount of related content in a visually\n> attractive and logically intuitive area. Although it is called \"footer\", it\n> may be placed at any appropriate location on a device screen, either before or\n> after other content.\n>\n> An MDL footer component takes two basic forms: mega-footer and mini-footer. As\n> the names imply, mega-footers contain more (and more complex) content than\n> mini-footers. A mega-footer presents multiple sections of content separated by\n> horizontal rules, while a mini-footer presents a single section of content. Both\n> footer forms have their own internal structures, including required and optional\n> elements, and typically include both informational and clickable content, such\n> as links.\n>\n> Footers, as represented by this component, are a fairly new feature in user\n> interfaces, and allow users to view discrete blocks of content in a coherent and\n> consistently organized way. Their design and use is an important factor in the\n> overall user experience.\n\nSee also the\n[Material Design Specification](https://material.google.com/layout/structure.html).\n\nRefer to [this site](http://debois.github.io/elm-mdl/#footers)\nfor a live demo.\n\n# Types\n\n@docs Content\n@docs FooterProperty\n@docs Property\n\n@docs MegaFooter, MiniFooter\n\n@docs Section\n@docs TopSection, MiddleSection, BottomSection\n\n# Helpers\n\n@docs html\n@docs link, onClick, href\n\n# Appearance\n\n@docs mini, mega\n\n# Sections\n\n@docs left, right, top, bottom, middle\n\n# Content\n\n@docs links, logo, socialButton, dropdown, heading, linkItem\n\n",
        "aliases": [
          {
            "name": "MegaFooter",
            "comment": " MegaFooter consists of three sections\n",
            "args": [
              "a"
            ],
            "type": "{ top : Maybe.Maybe (Material.Footer.TopSection a) , bottom : Maybe.Maybe (Material.Footer.BottomSection a) , middle : Maybe.Maybe (Material.Footer.MiddleSection a) }"
          },
          {
            "name": "MiniFooter",
            "comment": " MiniFooter consists of two sections\n",
            "args": [
              "a"
            ],
            "type": "{ left : Maybe.Maybe (Material.Footer.Section a) , right : Maybe.Maybe (Material.Footer.Section a) }"
          },
          {
            "name": "Property",
            "comment": " Properties for footers\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property Material.Footer.FooterProperty m"
          }
        ],
        "types": [
          {
            "name": "BottomSection",
            "comment": " Strongly typed `BottomSection` in a footer\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Content",
            "comment": " Opaque Footer content\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "FooterProperty",
            "comment": " `FooterProperty`\n",
            "args": [],
            "cases": []
          },
          {
            "name": "MiddleSection",
            "comment": " Strongly typed `MiddleSection` in a footer\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Section",
            "comment": " Strongly typed `Section` in a footer\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "TopSection",
            "comment": " Strongly typed `TopSection` in a footer\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bottom",
            "comment": " Creates a footer `bottom-section`\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Maybe.Maybe (Material.Footer.BottomSection m)"
          },
          {
            "name": "dropdown",
            "comment": " Creates a footer `dropdown` section\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Material.Footer.Content m"
          },
          {
            "name": "heading",
            "comment": " Creates a footer `heading` element\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Material.Footer.Content m"
          },
          {
            "name": "href",
            "comment": " href for Links.\n",
            "type": "String -> Material.Footer.Property m"
          },
          {
            "name": "html",
            "comment": " Wraps a normal HTML value into `Content`\n",
            "type": "Html.Html m -> Material.Footer.Content m"
          },
          {
            "name": "left",
            "comment": " Creates a footer `left-section`\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Maybe.Maybe (Material.Footer.Section m)"
          },
          {
            "name": "link",
            "comment": " Creates a link\n",
            "type": "List (Material.Footer.Property m) -> List (Html.Html m) -> Material.Footer.Content m"
          },
          {
            "name": "linkItem",
            "comment": " Creates a link wrapped in a `li`-element\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Material.Footer.Content m"
          },
          {
            "name": "links",
            "comment": " Creates a `link-list`\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Material.Footer.Content m"
          },
          {
            "name": "logo",
            "comment": " Creates a footer logo\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Material.Footer.Content m"
          },
          {
            "name": "mega",
            "comment": " Creates a footer of `Type` `Mega`\n",
            "type": "List (Material.Footer.Property m) -> Material.Footer.MegaFooter m -> Html.Html m"
          },
          {
            "name": "middle",
            "comment": " Creates a footer `middle-section`\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Maybe.Maybe (Material.Footer.MiddleSection m)"
          },
          {
            "name": "mini",
            "comment": " Creates a footer of `Type` `Mini`\n",
            "type": "List (Material.Footer.Property m) -> Material.Footer.MiniFooter m -> Html.Html m"
          },
          {
            "name": "onClick",
            "comment": " onClick for Links and Buttons.\n",
            "type": "m -> Material.Footer.Property m"
          },
          {
            "name": "right",
            "comment": " Creates a footer `right-section`\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Maybe.Maybe (Material.Footer.Section m)"
          },
          {
            "name": "socialButton",
            "comment": " Creates a `social-button` with the proper prefix based on the `Type`\n",
            "type": "List (Material.Footer.Property m) -> List (Material.Footer.Content m) -> Material.Footer.Content m"
          },
          {
            "name": "top",
            "comment": " Creates a footer `top-section`\n",
            "type": "List (Material.Footer.Property m) -> Material.Footer.MiniFooter m -> Maybe.Maybe (Material.Footer.TopSection m)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Progress",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#loading-section):\n\n> The Material Design Lite (MDL) progress component is a visual indicator of\n> background activity in a web page or application. A progress indicator\n> consists of a (typically) horizontal bar containing some animation that\n> conveys a sense of motion. While some progress devices indicate an\n> approximate or specific percentage of completion, the MDL progress component\n> simply communicates the fact that an activity is ongoing and is not yet\n> complete.\n\n> Progress indicators are an established but non-standardized feature in user\n> interfaces, and provide users with a visual clue to an application's status.\n> Their design and use is therefore an important factor in the overall user\n> experience. See the progress component's Material Design specifications page\n> for details.\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#loading)\nfor a live demo.\n\n# Render\n@docs indeterminate, progress, buffered\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "buffered",
            "comment": " A buffered progress bar. First argument is completion in percent (0-100),\nsecond argument indicates buffer completion in percent (0-100). \n",
            "type": "Float -> Float -> Html.Html m"
          },
          {
            "name": "indeterminate",
            "comment": " An indeterminate progress bar.\n",
            "type": "Html.Html m"
          },
          {
            "name": "progress",
            "comment": " A progress bar. First argument is completion in percent (0–100).\n",
            "type": "Float -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Toggles",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/index.html#toggles-section/checkbox):\n\n> The Material Design Lite (MDL) checkbox component is an enhanced version of the\n> standard HTML `<input type=\"checkbox\">` element. A checkbox consists of a small\n> square and, typically, text that clearly communicates a binary condition that\n> will be set or unset when the user clicks or touches it. Checkboxes typically,\n> but not necessarily, appear in groups, and can be selected and deselected\n> individually. The MDL checkbox component allows you to add display and click\n>     effects.\n> \n> Checkboxes are a common feature of most user interfaces, regardless of a site's\n> content or function. Their design and use is therefore an important factor in\n> the overall user experience. [...]\n> \n> The enhanced checkbox component has a more vivid visual look than a standard\n> checkbox, and may be initially or programmatically disabled.\n\nSee also the\n[Material Design Specification](https://www.google.com/design/spec/components/selection-controls.html#).\n\nRefer to [this site](http://debois.github.io/elm-mdl/#toggles)\nfor a live demo.\n\n# Render\n@docs checkbox, switch, radio\n\n# Options\n@docs onClick, ripple, disabled, value, group\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update\n@docs viewSwitch, viewCheckbox, viewRadio\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Component model.\n",
            "args": [],
            "type": "{ ripple : Material.Ripple.Model, isFocused : Bool }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component action.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "checkbox",
            "comment": " Component render (checkbox)\n",
            "type": "(Parts.Msg (Material.Toggles.Container c) m -> m) -> Parts.Index -> Material.Toggles.Container c -> List (Material.Toggles.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "defaultModel",
            "comment": " Default component model.\n",
            "type": "Material.Toggles.Model"
          },
          {
            "name": "disabled",
            "comment": " Set toggle to \"disabled\".\n",
            "type": "Material.Toggles.Property m"
          },
          {
            "name": "group",
            "comment": " Set radio-button group id. Only one button in the same group can be checked\nat a time. \n",
            "type": "String -> Material.Toggles.Property m"
          },
          {
            "name": "onClick",
            "comment": " Add an `on \"click\"` handler to a toggle. Argument is the \nnew value of the toggle (that is, the negation of the current value).\n",
            "type": "m -> Material.Toggles.Property m"
          },
          {
            "name": "radio",
            "comment": " Component render (radio button) \n",
            "type": "(Parts.Msg (Material.Toggles.Container c) m -> m) -> Parts.Index -> Material.Toggles.Container c -> List (Material.Toggles.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "ripple",
            "comment": " Set toggle to ripple when clicked.\n",
            "type": "Material.Toggles.Property m"
          },
          {
            "name": "switch",
            "comment": " Component render (switch) \n",
            "type": "(Parts.Msg (Material.Toggles.Container c) m -> m) -> Parts.Index -> Material.Toggles.Container c -> List (Material.Toggles.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Toggles.Msg -> Material.Toggles.Model -> ( Material.Toggles.Model, Platform.Cmd.Cmd Material.Toggles.Msg )"
          },
          {
            "name": "value",
            "comment": " Set toggle value\n",
            "type": "Bool -> Material.Toggles.Property m"
          },
          {
            "name": "viewCheckbox",
            "comment": " Component view (checkbox).\n",
            "type": "(Material.Toggles.Msg -> m) -> Material.Toggles.Model -> List (Material.Toggles.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "viewRadio",
            "comment": " Component view (radio button)\n",
            "type": "(Material.Toggles.Msg -> m) -> Material.Toggles.Model -> List (Material.Toggles.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "viewSwitch",
            "comment": " Component view (switch)\n",
            "type": "(Material.Toggles.Msg -> m) -> Material.Toggles.Model -> List (Material.Toggles.Property m) -> List (Html.Html m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Color",
        "comment": " Material Design color palette.\n\n# Palette\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> The color palette starts with primary colors and fills in the spectrum to\n> create a complete and usable palette for Android, Web, and iOS. Google suggests\n> using the 500 colors as the primary colors in your app and the other colors as\n> accents colors.\n\n@docs Color, white, black, Hue, Shade, color\n\n# Color Schemes\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> [The Material Design] palette comprises primary and accent colors that can be\n> used for illustration or to develop your brand colors. They’ve been designed\n> to work harmoniously with each other.  [...] Apps that don’t have existing\n> color schemes may select colors from the material design color palette. Limit\n> your selection of colors to three hues from the primary palette and one\n> accent color from the secondary palette.\n\nThe Material Design Lite CSS supports this selection; you choose your primary\nand accent colors when loading MDL css; see\n`Material.top`. Many components can be instructed to take on one of the four hues\nmentioned above; below you'll find `Options` for constructing these scheme-dependent\ncolors.\n\n@docs primary, primaryDark, primaryContrast, accent, accentContrast\n\n# Options\n@docs background, text\n\n# Misc\n@docs hues, hueName, accentHues, shades, scheme\n",
        "aliases": [],
        "types": [
          {
            "name": "Color",
            "comment": " Type of colors.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Hue",
            "comment": " Color palette.\n",
            "args": [],
            "cases": [
              [
                "Indigo",
                []
              ],
              [
                "Blue",
                []
              ],
              [
                "LightBlue",
                []
              ],
              [
                "Cyan",
                []
              ],
              [
                "Teal",
                []
              ],
              [
                "Green",
                []
              ],
              [
                "LightGreen",
                []
              ],
              [
                "Lime",
                []
              ],
              [
                "Yellow",
                []
              ],
              [
                "Amber",
                []
              ],
              [
                "Orange",
                []
              ],
              [
                "Brown",
                []
              ],
              [
                "BlueGrey",
                []
              ],
              [
                "Grey",
                []
              ],
              [
                "DeepOrange",
                []
              ],
              [
                "Red",
                []
              ],
              [
                "Pink",
                []
              ],
              [
                "Purple",
                []
              ],
              [
                "DeepPurple",
                []
              ]
            ]
          },
          {
            "name": "Shade",
            "comment": "\n",
            "args": [],
            "cases": [
              [
                "S50",
                []
              ],
              [
                "S100",
                []
              ],
              [
                "S200",
                []
              ],
              [
                "S300",
                []
              ],
              [
                "S400",
                []
              ],
              [
                "S500",
                []
              ],
              [
                "S600",
                []
              ],
              [
                "S700",
                []
              ],
              [
                "S800",
                []
              ],
              [
                "S900",
                []
              ],
              [
                "A100",
                []
              ],
              [
                "A200",
                []
              ],
              [
                "A400",
                []
              ],
              [
                "A700",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "accent",
            "comment": " Accent color.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "accentContrast",
            "comment": " Accent color, contrast variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "accentHues",
            "comment": " Primary hues as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Hue"
          },
          {
            "name": "background",
            "comment": " Background color.\n",
            "type": "Material.Color.Color -> Material.Options.Property c m"
          },
          {
            "name": "black",
            "comment": " Black color.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "color",
            "comment": " Construct a specific color given a palette base hue and a shade.\n",
            "type": "Material.Color.Hue -> Material.Color.Shade -> Material.Color.Color"
          },
          {
            "name": "hueName",
            "comment": " Give the MDL CSS name of a color. (Can reasonably be used also for human consumption.)\n",
            "type": "Material.Color.Hue -> String"
          },
          {
            "name": "hues",
            "comment": " Hues as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Hue"
          },
          {
            "name": "primary",
            "comment": " Primary color of the theme.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "primaryContrast",
            "comment": " Primary color, contrast variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "primaryDark",
            "comment": " Primary color, dark variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "scheme",
            "comment": " Given primary and accent base colors, compute name of appropriate MDL .css-file.\n(You are not likely to need to call this function.)\n",
            "type": "Material.Color.Hue -> Material.Color.Hue -> String"
          },
          {
            "name": "shades",
            "comment": " Shades as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Shade"
          },
          {
            "name": "text",
            "comment": " Text or foreground color.\n",
            "type": "Material.Color.Color -> Material.Options.Property c m"
          },
          {
            "name": "white",
            "comment": " White color.\n",
            "type": "Material.Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Dialog",
        "comment": " From the [Material Design Lite documentation](https://getmdl.io/components/#cards-section):\n\n> The Material Design Lite (MDL) dialog component allows for verification of user\n> actions, simple data input, and alerts to provide extra information to users.\n>\n> To use the dialog component, you must be using a browser that supports the\n> dialog element. Only Chrome and Opera have native support at the time of\n> writing. For other browsers you will need to include the dialog polyfill\n> or create your own.\n\nRefer to [this site](http://debois.github.io/elm-mdl/#dialog)\nfor a live demo.\n\n@docs view\n\n# Contents\n@docs title, content, actions, fullWidth\n\n# Opening & closing\n@docs openOn, closeOn\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "actions",
            "comment": " Generate an actions content block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Dialog.Block a"
          },
          {
            "name": "closeOn",
            "comment": " Close the dialog. The dialog must be open. Use like this: \n\n    Button.render Mdl [1] model.mdl\n      [ Dialog.closeOn \"click\" ]\n      [ text \"Close\" ] \n",
            "type": "String -> Material.Options.Property c m"
          },
          {
            "name": "content",
            "comment": " Generate a supporting text content block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Dialog.Block a"
          },
          {
            "name": "fullWidth",
            "comment": " Option to `actions`. If set, each control takes up the full width of the\ndialog. \n",
            "type": "Material.Options.Style a"
          },
          {
            "name": "openOn",
            "comment": " Open dialog in response to given DOM event. The DOM must also contain a\n`dialog` produced using `Dialog.view`.  Use like this: \n\n    Button.render Mdl [0] model.mdl\n      [ Dialog.openOn \"click\" ] \n      [ text \"Open dialog\" ]\n",
            "type": "String -> Material.Options.Property c m"
          },
          {
            "name": "title",
            "comment": " Generate a title content block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Dialog.Block a"
          },
          {
            "name": "view",
            "comment": " Construct a dialog. \n\n- If you target browser not supporting\n`<dialog>` natively, you will need to load [this\npolyfill](https://github.com/GoogleChrome/dialog-polyfill).\n- Using this polyfill [places\nrestrictions](https://github.com/GoogleChrome/dialog-polyfill#limitations) on\nwhere in the DOM you can put the output of this function.\n- The elm-mdl library currently support only one dialog pr. application. \nInstalling more than one dialog will result in a random one showing. \n",
            "type": "List (Material.Options.Style a) -> List (Material.Dialog.Block a) -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Button",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#buttons-section):\n\n> The Material Design Lite (MDL) button component is an enhanced version of the\n> standard HTML `<button>` element. A button consists of text and/or an image that\n> clearly communicates what action will occur when the user clicks or touches it.\n> The MDL button component provides various types of buttons, and allows you to\n> add both display and click effects.\n>\n> Buttons are a ubiquitous feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the button component's Material\n> Design specifications page for details.\n>\n> The available button display types are flat (default), raised, fab, mini-fab,\n> and icon; any of these types may be plain (light gray) or colored, and may be\n> initially or programmatically disabled. The fab, mini-fab, and icon button\n> types typically use a small image as their caption rather than text.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/buttons.html).\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#buttons) \nfor a live demo. \n\n# Render\n@docs render\n\n# Options\n\n@docs Property\n\n## Appearance\n@docs plain, colored, primary, accent\n@docs ripple, disabled\n  \n## Events\n@docs onClick\n\n## Type \nRefer to the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html)\nfor details about what type of buttons are appropriate for which situations.\n@docs flat, raised, fab, minifab, icon\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update, view\n\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " \n",
            "args": [],
            "type": "Material.Ripple.Model"
          },
          {
            "name": "Msg",
            "comment": " Component action.\n",
            "args": [],
            "type": "Material.Ripple.Msg"
          },
          {
            "name": "Property",
            "comment": " Properties for Button options.\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Button.Config m) m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "accent",
            "comment": " Color button with accent color. \n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "colored",
            "comment": " Color button with primary or accent color depending on button type.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "defaultModel",
            "comment": "\n",
            "type": "Material.Button.Model"
          },
          {
            "name": "disabled",
            "comment": " Set button to \"disabled\".\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "fab",
            "comment": " Floating Msg Button. From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons-floating-action-button.html):\n\n> Floating action buttons are used for a promoted action. They are distinguished\n> by a circled icon floating above the UI and have motion behaviors that include\n> morphing, launching, and a transferring anchor point.\n>\n> Floating action buttons come in two sizes:\n>\n>  - Default size: For most use cases\n>  - Mini size: Only used to create visual continuity with other screen elements\n\nThis constructor produces the default size, use `minifab` to get the mini-size.\n\nExample use (colored with a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    fabButton : Model -> Html\n    fabButton model =\n      Button.render Mdl [0] model.mdl\n        [ Button.fab ]\n        [ Icon.i \"add\" ]\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "flat",
            "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-flat-buttons):\n\n> Flat buttons are printed on material. They do not lift, but fill with color on\n> press.\n>\n> Use flat buttons in the following locations:\n>\n>  - On toolbars\n>  - In dialogs, to unify the button action with the dialog content\n>  - Inline, with padding, so the user can easily find them\n\nExample use (uncolored flat button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    flatButton : Model -> Html\n    flatButton model =\n      Button.render Mdl [0] model.mdl\n        [ Button.flat ]\n        [ text \"Click me!\" ]\n\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "icon",
            "comment": " The [Material Design Lite implementation](https://www.getmdl.io/components/index.html#buttons-section)\nalso offers an \"icon button\", which we\nre-implement here. See also\n[Material Design Specification](http://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons).\nExample use (no color, displaying a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    iconButton : Html\n    iconButton =\n      Button.render Mdl [0] model.mdl\n        [ Button.icon ]\n        [ Icon.i \"add\" ]\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "minifab",
            "comment": " Mini-sized variant of a Floating Msg Button; refer to `fab`.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "onClick",
            "comment": " Add an `on \"click\"` handler to a button. \n",
            "type": "m -> Material.Button.Property m"
          },
          {
            "name": "plain",
            "comment": " Plain, uncolored button (default). \n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "primary",
            "comment": " Color button with primary color.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "raised",
            "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-raised-buttons):\n\n> Raised buttons add dimension to mostly flat layouts. They emphasize functions\n> on busy or wide spaces.\n>\n> Raised buttons behave like a piece of material resting on another sheet –\n> they lift and fill with color on press.\n\nExample use (colored raised button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    raisedButton : Model -> Html\n    raisedButton model =\n      Button.render Mdl [0] model.mdl\n        [ Button.raised ]\n        [ text \"Click me!\" ]\n\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "render",
            "comment": " Component render.  Below is an example, assuming boilerplate setup as\nindicated in `Material`, and a user message `PollMsg`.\n    Button.render Mdl [0] model.mdl\n      [ Button.raised\n      , Button.ripple\n      , Button.onClick PollMsg\n      ]\n      [ text \"Fetch new\"]\n",
            "type": "(Parts.Msg (Material.Button.Container c) m -> m) -> Parts.Index -> Material.Button.Container c -> List (Material.Button.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "ripple",
            "comment": " Set button to ripple when clicked.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Button.Msg -> Material.Button.Model -> ( Material.Button.Model, Platform.Cmd.Cmd Material.Button.Msg )"
          },
          {
            "name": "view",
            "comment": " Component view function.\n",
            "type": "(Material.Button.Msg -> m) -> Material.Button.Model -> List (Material.Button.Property m) -> List (Html.Html m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Card",
        "comment": " From the [Material Design Lite documentation](https://getmdl.io/components/#cards-section):\n\n> The Material Design Lite (MDL) card component is a user interface element\n> representing a virtual piece of paper that contains related data — such as a\n> photo, some text, and a link — that are all about a single subject.\n>\n> Cards are a convenient means of coherently displaying related block that is\n> composed of different types of objects. They are also well-suited for presenting\n> similar objects whose size or supported actions can vary considerably, like\n> photos with captions of variable length. Cards have a constant width and a\n> variable height, depending on their block.\n>\n> Cards are a fairly new feature in user interfaces, and allow users an access\n> point to more complex and detailed information. Their design and use is an\n> important factor in the overall user experience. See the card component's\n> Material Design specifications page for details.\n\nRefer to [this site](http://debois.github.io/elm-mdl/#cards)\nfor a live demo.\n\n# Render\n@docs view, Block\n\n# Content blocks\n@docs title, media, text, actions\n\n## Title block\n@docs subhead, head\n\n# Misc\n@docs expand, border, menu\n",
        "aliases": [],
        "types": [
          {
            "name": "Block",
            "comment": " Type of a content block within a card.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "actions",
            "comment": " Generate an actions block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Card.Block a"
          },
          {
            "name": "border",
            "comment": " Separate given content block from others by adding a thin border.\n",
            "type": "Material.Options.Style a"
          },
          {
            "name": "expand",
            "comment": " Set given content block to expand or compress vertically as necessary.\n",
            "type": "Material.Options.Style a"
          },
          {
            "name": "head",
            "comment": " Head for title block. (This is called \"title\" in the Material Design\nSpecification.)\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "media",
            "comment": " Generate a media block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Card.Block a"
          },
          {
            "name": "menu",
            "comment": " Generate a menu block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Card.Block a"
          },
          {
            "name": "subhead",
            "comment": " Sub-head for title block. (This is called \"subtitle\" in the Material Design\nSpecification.\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "text",
            "comment": " Generate a supporting text block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Card.Block a"
          },
          {
            "name": "title",
            "comment": " Generate a title block\n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Card.Block a"
          },
          {
            "name": "view",
            "comment": " Construct a card.\n\nNotes. Google's MDL implementation sets `min-height: 200px`; this precludes a\nnumber of the examples from [the specification](https://material.google.com/components/cards.html#cards-usage),\nso the elm-mdl implementation sets `min-height: 0px`. Add `css \"min-height\"\n\"200px\"` as an option to `view` to adhere to the MDL implementation. \n",
            "type": "List (Material.Options.Style a) -> List (Material.Card.Block a) -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Badge",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#badges-section):\n\n> The Material Design Lite (MDL) badge component is an onscreen notification element.\n> A badge consists of a small circle, typically containing a number or other characters,\n> that appears in proximity to another object. A badge can be both a notifier that there\n> are additional items associated with an object and an indicator of how many items there are.\n>\n> You can use a badge to unobtrusively draw the user's attention to items they might not\n> otherwise notice, or to emphasize that items may need their attention. For example:\n>\n> A \"New messages\" notification might be followed by a badge containing the number of unread messages.\n> A \"You have unpurchased items in your shopping cart\" reminder might include a badge\n> showing the number of items in the cart.\n> A \"Join the discussion!\" button might have an accompanying badge indicating the number of\n> users currently participating in the discussion.\n> A badge is almost always positioned near a link so that the user has a convenient way to access \n> the additional information indicated by the badge. However, depending on the intent, the \n> badge itself may or may not be part of the link.\n>\n> Badges are a new feature in user interfaces, and provide users with a visual clue to help them\n> discover additional relevant content. Their design and use is therefore an important\n> factor in the overall user experience.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#badges)\nfor a live demo. \n\n@docs add, noBackground, overlap\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add a badge to the containing element.\n",
            "type": "String -> Material.Options.Property c m"
          },
          {
            "name": "noBackground",
            "comment": " No background for badge.\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "overlap",
            "comment": " Badge overlaps text/contents. \n",
            "type": "Material.Options.Property c m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Options",
        "comment": " Setting options for Material components. \n\nHere is a standard use of an elm-mdl Textfield: \n\n    Textfield.render MDL [0] model.mdl\n      [ Textfield.floatingLabel\n      , Textfield.label \"name\"\n      , css \"width\" \"96px\"\n      , cs \"my-name-textfield\"\n      ]\n\nThe above code renders a textfield, setting the optional properties\n`floatingLabel` and `label \"name\"` on the textfield; as well as adding\nadditional (CSS) styling `width: 96px;` and the HTML class `my-name-textfield`. \n\nThis module defines the type `Property c m` of such optional properties, the\nelements of the last argument in the above call to `Textfield.render`.\nIndividual components, such as Textfield usually instantiate the `c` to avoid\ninadvertently applying, say, a Textfield property to a Button. \n\nSome optional properties apply to all components, see the `Typography`,\n`Elevation`, `Badge`, and `Color` modules. Such universally applicable\noptional properties can _also_ be applied to standard `Html` elements \nsuch as `Html.div`; see `style` et. al. below. This is convenient, e.g., for\napplying MDL typography or color to standard elements. \n\n\n@docs Property\n\n# Constructors\n@docs cs, css, data, many, nop, when, maybe\n\n# Html\n@docs Style, styled, styled'\n\n## Elements\n@docs div, span, img\n@docs stylesheet\n\n## Attributes\n@docs attribute\n@docs center, scrim, disabled\n\n# Internal\nThe following types and values are used internally in the library. \n@docs Summary, apply, collect, set\n\n",
        "aliases": [
          {
            "name": "Property",
            "comment": " Type of elm-mdl properties. (Do not confuse these with Html properties or\n`Html.Attributes.property`.) The type variable `c` identifies the component the\nproperty is for. You never have to set it yourself. The type variable `d` by\nthe type of your `Msg`s; you should set this yourself. \n",
            "args": [
              "c",
              "m"
            ],
            "type": "Material.Options.Internal.Property c m"
          },
          {
            "name": "Style",
            "comment": " Options for situations where there is no configuration, i.e., \nstyling a `div`.\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property () m"
          },
          {
            "name": "Summary",
            "comment": " Contents of a `Property c m`.\n",
            "args": [
              "c",
              "m"
            ],
            "type": "{ classes : List String , css : List ( String, String ) , attrs : List (Html.Attribute m) , config : c }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Apply a `Summary m`, extra properties, and optional attributes \nto a standard Html node. \n",
            "type": "Material.Options.Summary c m -> (List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> List (Html.Attribute m) -> a"
          },
          {
            "name": "attribute",
            "comment": " Install arbitrary `Html.Attribute`. Applicable only to `Style m`, not \ngeneral Properties. Use like this:\n\n    Options.div \n      [ Options.attribute <| Html.onClick MyClickEvent ]\n      [ ... ]\n",
            "type": "Html.Attribute m -> Material.Options.Style m"
          },
          {
            "name": "center",
            "comment": " Options installing css for element to be a flex-box container centering its\nelements. \n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "collect",
            "comment": " Flatten a `Property a` into  a `Summary a`. Operates as `fold`\nover options; first two arguments are folding function and initial value. \n",
            "type": "c -> List (Material.Options.Property c m) -> Material.Options.Summary c m"
          },
          {
            "name": "cs",
            "comment": " Add an HTML class to a component. (Name chosen to avoid clashing with\nHtml.Attributes.class.)\n",
            "type": "String -> Material.Options.Property c m"
          },
          {
            "name": "css",
            "comment": " Add a CSS style to a component. \n",
            "type": "String -> String -> Material.Options.Property c m"
          },
          {
            "name": "data",
            "comment": " HTML data-* attributes. \n",
            "type": "String -> String -> Material.Options.Property c m"
          },
          {
            "name": "disabled",
            "comment": " Set HTML disabled attribute. ",
            "type": "Bool -> Material.Options.Property c m"
          },
          {
            "name": "div",
            "comment": " Convenience function for the ultra-common case of apply elm-mdl styling to a\n`div` element. Use like this: \n\n    myDiv : Html m\n    myDiv = \n      Options.div\n        [ Color.background Color.primary\n        , Color.text Color.accentContrast\n        ]\n        [ text \"I'm in color!\" ]\n\n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "img",
            "comment": " Convenience function for the not unreasonably uncommon case of setting\nattributes of an img element. Use like this: \n\n    img\n      [ Options.css \"height\" \"200px\" ]\n      [ Html.Attributes.src \"assets/image.jpg\" ] \n",
            "type": "List (Material.Options.Property a b) -> List (Html.Attribute b) -> Html.Html b"
          },
          {
            "name": "many",
            "comment": " Multiple options.\n",
            "type": "List (Material.Options.Property c m) -> Material.Options.Property c m"
          },
          {
            "name": "maybe",
            "comment": " Apply a Maybe option when defined\n",
            "type": "Maybe.Maybe (Material.Options.Property c m) -> Material.Options.Property c m"
          },
          {
            "name": "nop",
            "comment": " Do nothing. Convenient when the absence or \npresence of Options depends dynamically on other values, e.g., \n\n    Options.div \n      [ if model.isActive then css \"active\" else nop ]\n      [ ... ]\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "scrim",
            "comment": " Scrim. Argument value indicates terminal opacity, the value of which should\ndepend on the underlying image. `0.6` works well often. \n",
            "type": "Float -> Material.Options.Property c m"
          },
          {
            "name": "set",
            "comment": " Set a configuration value. \n",
            "type": "(c -> c) -> Material.Options.Property c m"
          },
          {
            "name": "span",
            "comment": " Convenience function for the reasonably common case of setting attributes\nof a span element. See also `div`. \n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "styled",
            "comment": " Apply properties to a standard Html element. \n",
            "type": "(List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> a"
          },
          {
            "name": "styled'",
            "comment": " Apply properties and attributes to a standard Html element.\n",
            "type": "(List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> List (Html.Attribute m) -> a"
          },
          {
            "name": "stylesheet",
            "comment": " Construct an Html element contributing to the global stylesheet.\nThe resulting Html is a `<style>` element.  Remember to insert the resulting Html\nsomewhere. \n",
            "type": "String -> Html.Html m"
          },
          {
            "name": "when",
            "comment": " Conditional option. When the guard evaluates to `true`, the option is\napplied; otherwise it is ignored. Use like this: \n\n    Button.disabled `when` not model.isRunning\n",
            "type": "Material.Options.Property c m -> Bool -> Material.Options.Property c m"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Snackbar",
        "comment": " From the [Material Design Lite documentation](https://www.getmdl.io/components/index.html#snackbar-section):\n\n> The Material Design Lite (MDL) __snackbar__ component is a container used to\n> notify a user of an operation's status. It displays at the bottom of the\n> screen. A snackbar may contain an action button to execute a command for the\n> user. Actions should undo the committed action or retry it if it failed for\n> example. Actions should not be too close the snackbar. By not providing an\n> action, the snackbar becomes a __toast__ component.\n\nRefer to [this site](http://debois.github.io/elm-mdl/#snackbar)\nfor a live demo. \n\n# Generating messages\n@docs Contents, toast, snackbar, add\n\n# Elm Architecture\n\n@docs Model, model\n@docs Msg, update\n@docs view\n\n# Render\nSnackbar does not have a `render` value. It must be used as a regular TEA\ncomponent. \n",
        "aliases": [
          {
            "name": "Contents",
            "comment": " Defines a single snackbar message. Usually, you would use either `toast`\nor `snackbar` to construct `Contents`.\n\n - `message` defines the (text) message displayed\n - `action` defines a label for the action-button in the snackbar. If \n    no action is provided, the snackbar is a message-only toast. \n - `payload` defines the data returned by Snackbar actions for this message. \n   You will usually choose this to be a message of yours for later dispatch, \n   e.g., if your snackbar has an \"Undo\" action, you would store the\n   corresponding action as the payload. \n - `timeout` is the amount of time the snackbar should be visible\n - `fade` is the duration of the fading animation of the snackbar. \n\nIf you are satsified with the default timeout and fade, do not construct\nvalues of this type yourself; use `snackbar` and `toast` below instead. \n",
            "args": [
              "a"
            ],
            "type": "{ message : String , action : Maybe.Maybe String , payload : a , timeout : Time.Time , fade : Time.Time }"
          },
          {
            "name": "Model",
            "comment": " Do not construct this yourself; use `model` below.\n",
            "args": [
              "a"
            ],
            "type": "{ queue : List (Material.Snackbar.Contents a) , state : Material.Snackbar.State a , seq : Int }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Elm Architecture Msg type.  \nThe following actions are observable to you: \n- `Begin a`. The snackbar is now displaying the message with payload `a`.\n- `End a`. The snackbar is done displaying the message with payload `a`.\n- `Click a`. The user clicked the action on the message with payload `a`.\nYou can consume these three actions without forwarding them to `Snackbar.update`.\n(You still need to forward other Snackbar actions.)\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Begin",
                [
                  "a"
                ]
              ],
              [
                "End",
                [
                  "a"
                ]
              ],
              [
                "Click",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a message to the snackbar. If another message is currently displayed, \nthe provided message will be queued. You will be able to observe a `Begin` action\n(see `Msg` above) once the action begins displaying.\n\nYou must dispatch the returned effect for the Snackbar to begin displaying your\nmessage.\n",
            "type": "Material.Snackbar.Contents a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Platform.Cmd.Cmd (Material.Snackbar.Msg a) )"
          },
          {
            "name": "model",
            "comment": " Default snackbar model.\n",
            "type": "Material.Snackbar.Model a"
          },
          {
            "name": "snackbar",
            "comment": " Generate snackbar with given payload, message and label. \nTimeout is 2750ms, fade 250ms.\n",
            "type": "a -> String -> String -> Material.Snackbar.Contents a"
          },
          {
            "name": "toast",
            "comment": " Generate toast with given payload and message. Timeout is 2750ms, fade 250ms.\n",
            "type": "a -> String -> Material.Snackbar.Contents a"
          },
          {
            "name": "update",
            "comment": " Elm Architecture update function. \n",
            "type": "Material.Snackbar.Msg a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Platform.Cmd.Cmd (Material.Snackbar.Msg a) )"
          },
          {
            "name": "view",
            "comment": " Elm architecture update function. \n",
            "type": "Material.Snackbar.Model a -> Html.Html (Material.Snackbar.Msg a)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Material.Helpers",
        "comment": " Convenience functions. These are mostly trivial functions that are used\ninternally in the library; you might\nfind some of them useful. \n\n# HTML & Events\n@docs filter, blurOn, noAttr, aria\n\n# Cmd\n@docs pure, effect, delay, cmd, cssTransitionStep\n\n# Tuples\n@docs map1st, map2nd\n\n# Elm architecture\n@docs Update, Update', lift, lift'\n",
        "aliases": [
          {
            "name": "Update",
            "comment": " Standard EA update function type. \n",
            "args": [
              "model",
              "action"
            ],
            "type": "Material.Helpers.Update' model action action"
          },
          {
            "name": "Update'",
            "comment": " Variant of EA update function type, where effects may be \nlifted to a different type. \n",
            "args": [
              "model",
              "action",
              "action'"
            ],
            "type": "action -> model -> ( model, Platform.Cmd.Cmd action' )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "aria",
            "comment": " Install aria-* attributes, conspicuously missing from elm-lang/html.\n",
            "type": "String -> Bool -> Html.Attribute a"
          },
          {
            "name": "blurOn",
            "comment": " Attribute which causes element to blur on given event. Example use\n\n    myButton : Html\n    myButton = \n      button \n        [ blurOn \"mouseleave\" ]\n        [ text \"Click me!\" ]\n",
            "type": "String -> Html.Attribute m"
          },
          {
            "name": "cmd",
            "comment": "\n  Lift any value of type `msg` to a `Cmd msg`.\n",
            "type": "msg -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "cssTransitionStep",
            "comment": " Delay a command sufficiently that you can count on triggering CSS\ntransitions.\n",
            "type": "a -> Platform.Cmd.Cmd a"
          },
          {
            "name": "delay",
            "comment": " Produce a delayed effect. Suppose you want `MyMsg` to happen 200ms after\na button is clicked:\n\n    button \n      [ onClick (delay 0.2 MyMsg) ] \n      [ text \"Click me!\" ]\n",
            "type": "Time.Time -> a -> Platform.Cmd.Cmd a"
          },
          {
            "name": "effect",
            "comment": " Add an effect to a value. Example use (supposing you have an \naction `MyMsg`): \n\n    model |> effect MyMsg\n",
            "type": "Platform.Cmd.Cmd b -> a -> ( a, Platform.Cmd.Cmd b )"
          },
          {
            "name": "filter",
            "comment": " Convert a Html element from taking a list of sub-elements to a list of\n  Maybe Html. This is convenient if you want to include certain sub-elements\n",
            "type": "(a -> List b -> c) -> a -> List (Maybe.Maybe b) -> c"
          },
          {
            "name": "lift",
            "comment": " Convenience function for writing update-function boilerplate. Example use:\n\n    case msg of \n      ...\n      ButtonsMsg msg' -> \n        lift .buttons (\\m x->{m|buttons=x}) ButtonsMsg Demo.Buttons.update msg' model\n\nThis is equivalent to the more verbose\n\n    case msg of \n      ...\n      ButtonsMsg msg' -> \n        let \n          (buttons', cmd) = \n            Demo.Buttons.update msg' model.buttons\n        in \n          ( { model | buttons = buttons'}\n          , Cmd.map ButtonsMsg cmd\n          )\n",
            "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> action) -> Material.Helpers.Update submodel subaction -> subaction -> model -> ( model, Platform.Cmd.Cmd action )"
          },
          {
            "name": "lift'",
            "comment": " Variant of `lift` for effect-free components. \n",
            "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> submodel -> submodel) -> subaction -> model -> ( model, Platform.Cmd.Cmd action )"
          },
          {
            "name": "map1st",
            "comment": " Map the first element of a tuple. \n\n    map1st ((+) 1) (1, \"foo\") == (2, \"foo\")\n",
            "type": "(a -> c) -> ( a, b ) -> ( c, b )"
          },
          {
            "name": "map2nd",
            "comment": " Map the second element of a tuple\n\n    map2nd ((+) 1) (\"bar\", 3) == (\"bar\", 4)\n",
            "type": "(b -> c) -> ( a, b ) -> ( a, c )"
          },
          {
            "name": "noAttr",
            "comment": " Fake attribute with no effect. Useful to conditionally add attributes, e.g.,\n\n    button \n      [ if model.shouldReact then \n          onClick ReactToClick\n        else\n          noAttr\n      ]\n      [ text \"Click me!\" ]\n",
            "type": "Html.Attribute a"
          },
          {
            "name": "pure",
            "comment": " Add the trivial effect to a value. Example use:\n    \n    model |> pure\n",
            "type": "a -> ( a, Platform.Cmd.Cmd b )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "debois/elm-parts",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Parts",
        "comment": " \n\nGiven a TEA component with model type `model` and message type `msg`, we construct\na variant component which knows how to extract its model from a c model\n`c` and produces generic messages `Msg c`. The consuming component is assumed\nto have message type `obs` (for \"observation\"). \n\n# Lazyness\n\nRecall that `Html.Lazy` avoids re-computing views when the model doesn't change\nacross updates. However, \"doesn't change\" does not mean `model == model'` but rather\nthe stricter `model === model'` (in Javascript terms). That is, the old and new model\nmust not only be structurally the same, they must be literally the same\ndata-structure in memory.  \n\nParts generally do not achieve referential equality of no-op updates, since we\nare wrapping updates conceptually like this: \n\n    let (submodel, submsgs) = SubComponent.update msg model.submodel \n        model' = { model | submodel = submodel }\n    in \n        ...\nIn the second line, even if `submodel == model.submodel` and so `model ==\nmodel'`, we won't have (in Javascript terms) `model === model'`. \n\nFor this reason, the result of `update` functions used in parts should be\n`Maybe (model, Cmd msg)` rather than the usual `(model, Cmd msg)`; the \n`Nothing` case signifies a no-op. \n\n# Communicating to the parent component\n\nBecause parts wrap messages in an opaque type, the parent component loses the\nability to inspect and maybe react to messages of the part. We recover this \nability by requiring the `update` function to take as parameter a lifting \nfunction which lifts the parts messages to that of its parent. \n\n@docs Update, View\n\n# Model embeddings \n@docs Get, Set, embedView, embedUpdate\n@docs accessors, Accessors\n\n## Indexed model embeddings\n@docs Index, Indexed, indexed\n\n# Message embeddings\n@docs Msg, update, update', partial\n\n# Part construction\n@docs create, create1, generalize, pack, pack1\n",
        "aliases": [
          {
            "name": "Accessors",
            "comment": " For components where consumers do care about the model of the \ncomponent, use the `accessors` function below to generate suitable, \nwell, accessors.\n",
            "args": [
              "model",
              "c"
            ],
            "type": "{ get : Parts.Get model c , set : Parts.Set model c , map : (model -> model) -> c -> c , reset : c -> c }"
          },
          {
            "name": "Get",
            "comment": " Type of \"getter\": fetch component model `m` from c model `c`. \n",
            "args": [
              "model",
              "c"
            ],
            "type": "c -> model"
          },
          {
            "name": "Index",
            "comment": " Type of indices. An index is a list of `Int` rather than just an `Int` to \nsupport nested dynamically constructed elements: Use indices `[0]`, `[1]`, ...\nfor statically known top-level components, then use `[0,0]`, `[0,1]`, ...\nfor a dynamically generated list of components. \n",
            "args": [],
            "type": "List Int"
          },
          {
            "name": "Indexed",
            "comment": " Indexed families of things.\n",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Parts.Index a"
          },
          {
            "name": "Set",
            "comment": " Type of \"setter\": update component model `m` in c `c`. \n",
            "args": [
              "model",
              "c"
            ],
            "type": "model -> c -> c"
          },
          {
            "name": "Update",
            "comment": " Update functions. \n\nTEA update function with explicit message lifting and no-op. You should have:\n\n    fst (update f msg model) == Nothing       -- No change to model\n    fst (update f msg model) == Just model'   -- Change to model'\n",
            "args": [
              "model",
              "msg",
              "obs"
            ],
            "type": "(msg -> obs) -> msg -> model -> Maybe.Maybe ( model, Platform.Cmd.Cmd obs )"
          },
          {
            "name": "View",
            "comment": " Standard TEA view function type. \n",
            "args": [
              "model",
              "a"
            ],
            "type": "model -> a"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Similar to how embeddings enable collecting models of different type\nin a single model c, we collect messages in a single \"master\nmessage\" type. Messages exist exclusively to be dispatched by a corresponding\n`update` function; we can avoid distinguishing between different types of \nmessages by dispatching not the `Msg` itself, but a partially applied update\nfunction `update msg`. \n\nIt's instructive to compare `Msg` to the type of `update` partially applied to \nan actual carried message `m`:\n\n    update : m -> c -> (c, Cmd m)\n    (update m) : c -> (c, Cmd m)\n",
            "args": [
              "c",
              "obs"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "accessors",
            "comment": " Generate accessors.\n",
            "type": "Parts.Get (Parts.Indexed model) c -> Parts.Set (Parts.Indexed model) c -> model -> Parts.Index -> Parts.Accessors model c"
          },
          {
            "name": "create",
            "comment": " From `update` and `view` functions, produce a `view` function which (a) \nfetches its model from a `c` model, and (b) dispatches generic `Msg`\nmessages. \n\nIts instructive to compare the types of the input `view` and `update` for a \ntypical case. Notice that `create` transforms `model` -> `c` and\n`Html m` -> `Html obs`.\n\n  {- Input -}\n  view : (m -> obs) -> model -> List (Attributes obs) -> List (Html obs) -> Html obs\n  update : (m -> obs) -> model -> (Maybe model, Cmd obs)\n\n  {- Output -}\n  view : Index -> c -> List (Attributes obs) -> List (Html obs) -> Html obs\n\nNote that the input `view` function is assumed to take a function lifting its\nmessages. \n",
            "type": "((msg -> obs) -> Parts.View model a) -> Parts.Update model msg obs -> Parts.Get (Parts.Indexed model) c -> Parts.Set (Parts.Indexed model) c -> model -> (Parts.Msg c obs -> obs) -> Parts.Index -> Parts.View c a"
          },
          {
            "name": "create1",
            "comment": " Like `create`, but for components that are assumed to have only one\ninstance.\n",
            "type": "((msg -> obs) -> Parts.View model a) -> Parts.Update model msg obs -> Parts.Get model c -> Parts.Set model c -> (Parts.Msg c obs -> obs) -> Parts.View c a"
          },
          {
            "name": "embedUpdate",
            "comment": " Lift an `Update` from operating on `model` to a c model `c`. \n",
            "type": "Parts.Get model c -> Parts.Set model c -> Parts.Update model msg obs -> Parts.Update c msg obs"
          },
          {
            "name": "embedView",
            "comment": " Lift a `view` to one which knows how to retrieve its `model` from \na c model `c`. \n",
            "type": "Parts.Get model c -> Parts.View model a -> Parts.View c a"
          },
          {
            "name": "generalize",
            "comment": " Generalise a standard TEA `update` function to one fitting with \nparts (explicit lifter, explicit no-op). \n",
            "type": "(msg -> model -> ( model, Platform.Cmd.Cmd msg )) -> Parts.Update model msg obs"
          },
          {
            "name": "indexed",
            "comment": " Fix a getter and setter for an `Indexed model` to a particular `Index`.\n",
            "type": "Parts.Get (Parts.Indexed model) c -> Parts.Set (Parts.Indexed model) c -> model -> ( Parts.Index -> Parts.Get model c , Parts.Index -> Parts.Set model c )"
          },
          {
            "name": "pack",
            "comment": " Pack up a an indexed component message `msg` in an `obs`.\n",
            "type": "Parts.Update model msg obs -> Parts.Get (Parts.Indexed model) c -> Parts.Set (Parts.Indexed model) c -> model -> (Parts.Msg c obs -> obs) -> Parts.Index -> msg -> obs"
          },
          {
            "name": "pack1",
            "comment": " Pack up a singleton component message `msg` in an `obs`.\n",
            "type": "Parts.Update model msg obs -> Parts.Get model c -> Parts.Set model c -> (Parts.Msg c obs -> obs) -> msg -> obs"
          },
          {
            "name": "partial",
            "comment": " Partially apply an `Update` function to a `msg`, producing\na generic Msg.\n",
            "type": "(Parts.Msg c obs -> obs) -> Parts.Update c msg obs -> msg -> Parts.Msg c obs"
          },
          {
            "name": "update",
            "comment": " Generic update function for `Msg`. \n",
            "type": "Parts.Msg c obs -> c -> ( c, Platform.Cmd.Cmd obs )"
          },
          {
            "name": "update'",
            "comment": " Generic explict no-op update function for `Msg`. \n",
            "type": "Parts.Msg c obs -> c -> Maybe.Maybe ( c, Platform.Cmd.Cmd obs )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "dhruvin2910/elm-css",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Css",
        "comment": " A library to create and use css stylesheets in Elm.\n\n# Type Definitions\n@docs Node\n\n# Constructors\n@docs stylesheet, assign, declare, declares\n\n# Html Elements\n@docs style\n\n# Operators\n@docs (:-), (=>), (==>)\n",
        "aliases": [
          {
            "name": "Node",
            "comment": " A Css stylesheet node. It can be a Rule, an @Rule, a Declaration, a\nSelector...\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ":-",
            "comment": " For Property :- Value. Alias of assign.\n",
            "type": "Css.Node -> Css.Node -> Css.Node"
          },
          {
            "name": "==>",
            "comment": " For [Selector] ==> [Declaration]. Alias of declares.\n",
            "type": "List Css.Node -> List Css.Node -> Css.Node"
          },
          {
            "name": "=>",
            "comment": " For Node => [Node]. Alias of declare.\n",
            "type": "Css.Node -> List Css.Node -> Css.Node"
          },
          {
            "name": "assign",
            "comment": " Constructs a Declaration from a Property and a Value.\n",
            "type": "Css.Node -> Css.Node -> Css.Node"
          },
          {
            "name": "declare",
            "comment": " Constructs a Block from a Head (Node) and a Body (List of Node).\n",
            "type": "Css.Node -> List Css.Node -> Css.Node"
          },
          {
            "name": "declares",
            "comment": " Constructs a Block from a Head (List of Node) and a Body (List of Node).\n",
            "type": "List Css.Node -> List Css.Node -> Css.Node"
          },
          {
            "name": "style",
            "comment": " Html style tag.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "stylesheet",
            "comment": " Constructs an Html Style Element from a List of Node.\n",
            "type": "List Css.Node -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "doodledood/elm-split-pane",
    "version": "2.0.0",
    "docs": [
      {
        "name": "SplitPane",
        "comment": "\n\nThis is a split pane view library. Can be used to split views into multiple parts with a splitter between them.\n\nCheck out the [examples][] to see how it works.\n\n[examples]: https://github.com/doodledood/elm-split-pane/tree/master/examples\n\n# View\n\n@docs view\n\n# Model\n\n@docs Model, Orientation, Px, Size\n\n# Init\n\n@docs init\n\n# Update\n\n@docs update, WhatHappened, Msg\n\n# Subscriptions\n\n@docs subscriptions\n\n# Helpers\nThere are helper functions to help you with modifying and inspecting the state:\n\n## State modification\n\nUse these functions to modify the state of the pane\n\n@docs startAt, draggable, withFirstViewMinSize, withSecondViewMinSize, changeOrientationTo, changeWidth, changeHeight, moveSplitterTo\n\n## Inspecting the pane's state\n\nUse these functions to inspect the state\n\n@docs splitterPosition, width, height, orientation\n\n# Customization\n\nApart for the simple view, there is a way to provide your own custom splitter:\n\n@docs viewWithCustomSplitter, customSplitter, CustomSplitter, HtmlDetails\n\n",
        "aliases": [
          {
            "name": "HtmlDetails",
            "comment": " Lets you specify attributes such as style and children for the splitter element\n",
            "args": [
              "msg"
            ],
            "type": "{ attributes : List (Html.Attribute msg) , children : List (Html.Html msg) }"
          },
          {
            "name": "Px",
            "comment": " Size in pixels.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [
          {
            "name": "CustomSplitter",
            "comment": " Decribes a custom splitter\n",
            "args": [
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Model",
            "comment": " Tracks state of pane.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Used to track SplitterMoves.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Orientation",
            "comment": " Orientation of pane.\n",
            "args": [],
            "cases": [
              [
                "Horizontal",
                []
              ],
              [
                "Vertical",
                []
              ]
            ]
          },
          {
            "name": "Size",
            "comment": " Size in either pixels or percentage.\n",
            "args": [],
            "cases": [
              [
                "Px",
                [
                  "Int"
                ]
              ],
              [
                "Percentage",
                [
                  "Float"
                ]
              ]
            ]
          },
          {
            "name": "WhatHappened",
            "comment": " Describes what happened. (after update)\n",
            "args": [],
            "cases": [
              [
                "ResizeStarted",
                []
              ],
              [
                "Resized",
                [
                  "SplitPane.Px"
                ]
              ],
              [
                "ResizeEnded",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "changeHeight",
            "comment": " Change the height of the pane.\n\n        newModel = model.pane |> changeHeight 400\n",
            "type": "SplitPane.Px -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "changeOrientationTo",
            "comment": " Set the orientation of the pane.\n\n        SplitPane.init\n            { paneWidth = 800\n            , paneHeight = 600\n            }\n            |> changeOrientationTo Vertical\n",
            "type": "SplitPane.Orientation -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "changeWidth",
            "comment": " Change the width of the pane.\n\n        newModel = model.pane |> changeWidth 600\n",
            "type": "SplitPane.Px -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "customSplitter",
            "comment": " Creates a custom splitter.\n\n        myCustomSplitter : CustomSplitter Msg\n        myCustomSplitter =\n            customSplitter PaneMsg\n                { attributes =\n                    [ style\n                        [ ( \"width\", \"20px\" )\n                        , ( \"height\", \"20px\" )\n                        ]\n                    ]\n                , children =\n                    []\n                }\n",
            "type": "(SplitPane.Msg -> msg) -> SplitPane.HtmlDetails msg -> SplitPane.CustomSplitter msg"
          },
          {
            "name": "draggable",
            "comment": " Make pane splitter draggable or not\n\n        SplitPane.init\n            { paneWidth = 800\n            , paneHeight = 600\n            }\n            |> draggable False\n",
            "type": "Bool -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "height",
            "comment": " Retrieves current height of the pane from the model.\n",
            "type": "SplitPane.Model -> SplitPane.Px"
          },
          {
            "name": "init",
            "comment": " Initialize a new model.\n\n        init\n            { paneWidth = 600\n            , paneHeight = 600\n            }\n",
            "type": "{ a | paneHeight : SplitPane.Px, paneWidth : SplitPane.Px } -> SplitPane.Model"
          },
          {
            "name": "moveSplitterTo",
            "comment": " Moves the splitter to the requested location (relative to the edge of the pane)\n\n        SplitPane.init\n            { paneWidth = 800\n            , paneHeight = 600\n            }\n            |> moveSplitterTo (Percentage 0.33)\n",
            "type": "SplitPane.Size -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "orientation",
            "comment": " Retrieves current orientation of the pane from the model.\n",
            "type": "SplitPane.Model -> SplitPane.Orientation"
          },
          {
            "name": "splitterPosition",
            "comment": " Retrieves current splitter position in pixels from the model (relative to the edge of the pane).\n",
            "type": "SplitPane.Model -> SplitPane.Px"
          },
          {
            "name": "startAt",
            "comment": " Sets the starting position for the splitter (relative to the edge of the pane).\n\n        SplitPane.init\n            { paneWidth = 800\n            , paneHeight = 600\n            }\n            |> startAt 300\n",
            "type": "SplitPane.Size -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "subscriptions",
            "comment": " Subscribes to relevant events for resizing\n",
            "type": "SplitPane.Model -> Platform.Sub.Sub SplitPane.Msg"
          },
          {
            "name": "update",
            "comment": " Updates internal model.\n",
            "type": "SplitPane.Msg -> SplitPane.Model -> ( SplitPane.Model, Maybe.Maybe SplitPane.WhatHappened )"
          },
          {
            "name": "view",
            "comment": " Default pane with two views\n\n        view : Model -> Html Msg\n        view model =\n            SplitPane.view PaneMsg firstView secondView model.pane\n\n\n        firstView : Html a\n        firstView =\n            img [ src \"http://4.bp.blogspot.com/-s3sIvuCfg4o/VP-82RkCOGI/AAAAAAAALSY/509obByLvNw/s1600/baby-cat-wallpaper.jpg\" ] []\n\n\n        secondView : Html a\n        secondView =\n            img [ src \"http://2.bp.blogspot.com/-pATX0YgNSFs/VP-82AQKcuI/AAAAAAAALSU/Vet9e7Qsjjw/s1600/Cat-hd-wallpapers.jpg\" ] []\n",
            "type": "(SplitPane.Msg -> msg) -> Html.Html msg -> Html.Html msg -> SplitPane.Model -> Html.Html msg"
          },
          {
            "name": "viewWithCustomSplitter",
            "comment": " A pane with custom splitter.\n\n        view : Model -> Html Msg\n        view =\n            SplitPane.viewWithCustomSplitter myCustomSplitter firstView secondView\n\n\n        myCustomSplitter : CustomSplitter Msg\n        myCustomSplitter =\n            customSplitter PaneMsg\n                { attributes =\n                    [ style\n                        [ ( \"width\", \"20px\" )\n                        , ( \"height\", \"20px\" )\n                        ]\n                    ]\n                , children =\n                    []\n                }\n\n        firstView : Html a\n        firstView =\n            img [ src \"http://4.bp.blogspot.com/-s3sIvuCfg4o/VP-82RkCOGI/AAAAAAAALSY/509obByLvNw/s1600/baby-cat-wallpaper.jpg\" ] []\n\n\n        secondView : Html a\n        secondView =\n            img [ src \"http://2.bp.blogspot.com/-pATX0YgNSFs/VP-82AQKcuI/AAAAAAAALSU/Vet9e7Qsjjw/s1600/Cat-hd-wallpapers.jpg\" ] []\n",
            "type": "SplitPane.CustomSplitter msg -> Html.Html msg -> Html.Html msg -> SplitPane.Model -> Html.Html msg"
          },
          {
            "name": "width",
            "comment": " Retrieves current width of the pane from the model.\n",
            "type": "SplitPane.Model -> SplitPane.Px"
          },
          {
            "name": "withFirstViewMinSize",
            "comment": " Set minimum size for the first view.\n    When the pane is horizontal, this is the left view.\n    When the pane is vertical, this is the top view.\n\n        SplitPane.init\n            { paneWidth = 800\n            , paneHeight = 600\n            }\n            |> withFirstViewMinSize (Percentage 0.2)\n",
            "type": "SplitPane.Size -> SplitPane.Model -> SplitPane.Model"
          },
          {
            "name": "withSecondViewMinSize",
            "comment": " Set minimum size for the second view.\n    When the pane is horizontal, this is the right view.\n    When the pane is vertical, this is the bottom view.\n\n        SplitPane.init\n            { paneWidth = 800\n            , paneHeight = 600\n            }\n            |> withSecondViewMinSize (Px 100)\n",
            "type": "SplitPane.Size -> SplitPane.Model -> SplitPane.Model"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "eeue56/elm-all-dict",
    "version": "1.1.2",
    "docs": [
      {
        "name": "AllDict",
        "comment": " A dictionary mapping unique keys to values. This dictionary can use any type as a key.\nIn the core-provided Dict, keys can only be comparable.\n\nAllDict allows you to provide a custom operation for hashing keys. The ord function has a type signature of `k -> comparable`.\n\nIt's possible to define the ord function in such a way that AllDict can actually function as a DefaultDict.\n\nAn example of this might be\n\n```\nord : Action -> Int\nord action =\n  case action of\n    Run -> 0\n    Hide -> 1\n    StandStill -> 2\n    _ -> 3\n```\n\nThis will default any Action in the dictionary to 3. You can then set a default like so:\n\n```\n\nmyDict : AllDict Action String Int\nmyDict =\n  AllDict.fromList\n    ord\n    [(Noop, \"Do nothing\")]\n\n-- equal to `\"Do nothing\"`\n-- as `ord` maps anything outside of Run, Hide, StandStill\n-- to the same hash\neat =\n  myDict |>\n    AllDict.get Eat\n\n```\n\nInsert, remove, and query operations all take *O(log n)* time. AllDictionary\nequality with `(==)` is unreliable and should not be used. Instead, use AllDict.eq for element-wise comparisons,\nand AllDict.fullEq for a full comparison\n\n# Types\n@docs AllDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, getOrd, eq, fullEq\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "AllDict",
            "comment": " A dict which works with any type which lifts the type from Core's Dict",
            "args": [
              "k",
              "v",
              "comparable"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary using a given ord function to calculate hashes ",
            "type": "(k -> comparable) -> AllDict.AllDict k v comparable"
          },
          {
            "name": "eq",
            "comment": " Element equality. Does not check equality of base ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(k -> v -> Bool) -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(k -> v -> b -> b) -> b -> AllDict.AllDict k v comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(k -> v -> b -> b) -> b -> AllDict.AllDict k v comparable -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\nTakes a default value, and a list of key-pair tuples\n ",
            "type": "(k -> comparable) -> List ( k, v ) -> AllDict.AllDict k v comparable"
          },
          {
            "name": "fullEq",
            "comment": " Base + element equality ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Mouse\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "k -> AllDict.AllDict k v comparable -> Maybe.Maybe v"
          },
          {
            "name": "getOrd",
            "comment": " Helper function for grabbing the default value used in the dict\n",
            "type": "AllDict.AllDict k v comparable -> k -> comparable"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "k -> v -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "AllDict.AllDict k v comparable -> List k"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary. ",
            "type": "(k -> a -> a) -> AllDict.AllDict k a comparable -> AllDict.AllDict k a comparable"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "k -> AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(k -> v -> Bool) -> AllDict.AllDict k v comparable -> ( AllDict.AllDict k v comparable, AllDict.AllDict k v comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "k -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "(k -> comparable) -> k -> v -> AllDict.AllDict k v comparable"
          },
          {
            "name": "size",
            "comment": " Get the number of key-value pairs in a dict ",
            "type": "AllDict.AllDict k v comparable -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "AllDict.AllDict k v comparable -> List ( k, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "AllDict.AllDict k v comparable -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "EveryDict",
        "comment": " A dictionary mapping unique keys to values. This dictionary can use any type as a key.\nIn the core-provided Dict, keys can only be comparable.\n\nThis little dictionary is hacky. It uses a custom toString as a hashing function - so don't use it on\nany types which have non-unique representations in strings! At the moment, it has custom support for converting functions into keys.\n\nIt's hard to imagine many cases where you would want a function as a key, but it's now possible.\n\nInsert, remove, and query operations all take *O(log n)* time. EveryDictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Types\n@docs EveryDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, eq\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "EveryDict",
            "comment": " A dict which works with any type which lifts the type from Core's Dict",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary  ",
            "type": "EveryDict.EveryDict k v"
          },
          {
            "name": "eq",
            "comment": " Element equality ",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(k -> v -> Bool) -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(k -> v -> b -> b) -> b -> EveryDict.EveryDict k v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(k -> v -> b -> b) -> b -> EveryDict.EveryDict k v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\nTakes a default value, and a list of key-pair tuples\n ",
            "type": "List ( k, v ) -> EveryDict.EveryDict k v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Mouse\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "k -> EveryDict.EveryDict k v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "k -> v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "EveryDict.EveryDict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "EveryDict.EveryDict k v -> List k"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(k -> a -> a) -> EveryDict.EveryDict k a -> EveryDict.EveryDict k a"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "k -> EveryDict.EveryDict k v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(k -> v -> Bool) -> EveryDict.EveryDict k v -> ( EveryDict.EveryDict k v, EveryDict.EveryDict k v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "k -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "k -> v -> EveryDict.EveryDict k v"
          },
          {
            "name": "size",
            "comment": " Get the number of key-value pairs in a dict ",
            "type": "EveryDict.EveryDict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "EveryDict.EveryDict k v -> List ( k, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "EveryDict.EveryDict k v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "eeue56/elm-default-dict",
    "version": "2.0.1",
    "docs": [
      {
        "name": "DefaultDict",
        "comment": " A dictionary mapping unique keys to values. A provided default is used for when\nkeys are missing. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time. DefaultDictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Types\n@docs DefaultDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, getDefault, eq, fullEq\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, mapWithDefault, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "DefaultDict",
            "comment": " A default dict which lifts the type from Core's Dict",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary with a given default value ",
            "type": "v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "eq",
            "comment": " Element equality. Does not check equality of base ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(comparable -> v -> Bool) -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(comparable -> v -> b -> b) -> b -> DefaultDict.DefaultDict comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(comparable -> v -> b -> b) -> b -> DefaultDict.DefaultDict comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\nTakes a default value, and a list of key-pair tuples\n ",
            "type": "v -> List ( comparable, v ) -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "fullEq",
            "comment": " Base + element equality ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Mouse\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "comparable -> DefaultDict.DefaultDict comparable v -> v"
          },
          {
            "name": "getDefault",
            "comment": " Helper function for grabbing the default value used in the dict\n",
            "type": "DefaultDict.DefaultDict comparable v -> v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "comparable -> v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\nNotice that this function takes a function of type `comparable -> a -> a`,\nrather than Dict's `comparable a -> b`. If you want to provide a new default,\nsee mapWithDefault ",
            "type": "(comparable -> a -> a) -> DefaultDict.DefaultDict comparable a -> DefaultDict.DefaultDict comparable a"
          },
          {
            "name": "mapWithDefault",
            "comment": " Like map, but allows you to provide a default value too.\nWhen mapping from type `a` to type `b`, the old default of\ntype `a` won't work as it's not possible to have `DefaultDict compareable (a|b)`\nIf this is what you want, use an `Either` type instead.\n",
            "type": "b -> (comparable -> a -> b) -> DefaultDict.DefaultDict comparable a -> DefaultDict.DefaultDict comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "comparable -> DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(comparable -> v -> Bool) -> DefaultDict.DefaultDict comparable v -> ( DefaultDict.DefaultDict comparable v , DefaultDict.DefaultDict comparable v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "comparable -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "comparable -> v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "size",
            "comment": " Get the number of key-value pairs in a dict ",
            "type": "DefaultDict.DefaultDict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "DefaultDict.DefaultDict comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "comparable -> (v -> Maybe.Maybe v) -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "eeue56/elm-flat-matrix",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Matrix.Extra",
        "comment": " Extra methods for Matricies\n\n# Element-wise computation\n@docs add, subtract, hadamard, power\n\n# Syntax aliases\n@docs (.*), (.^)\n\n# Interacting with other cells\n@docs neighbours, indexedNeighbours, diagonals, neighboursFour\n\n@docs prettyPrint\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": ".*",
            "comment": "\nelement wise multiplication\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": ".^",
            "comment": "\nelement wise power\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "add",
            "comment": "\nadd two matricies together element by element and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "diagonals",
            "comment": "\nGet the diagonal-neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "hadamard",
            "comment": "\ntake the product of every corresponding element in two matricies and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "indexedNeighbours",
            "comment": "\nGet the neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List ( ( Int, Int ), a )"
          },
          {
            "name": "neighbours",
            "comment": "\nGet the neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "neighboursFour",
            "comment": "\nGet the non-diagonal neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "power",
            "comment": "\nelement-wise power of elements\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "prettyPrint",
            "comment": "\nPrint out a matrix into a table\n",
            "type": "Matrix.Matrix a -> Html.Html msg"
          },
          {
            "name": "subtract",
            "comment": "\nsubtract two matricies together element by element and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Matrix",
        "comment": "\nA matrix implemention for Elm.\nInternally it uses a flat array for speed reasons.\n\n# The matrix type\n\n@docs Matrix\n\n# Creating a matrix\n\n@docs repeat, fromList, empty\n\n# Get matrix dimensions\n\n@docs height, width\n\n# Dealing with individual elements\n\n@docs get, set, update\n\n# Appending to an Matrix\n\n@docs concatVertical, concatHorizontal\n\n# Get rows/columns\n\n@docs getRow, getColumn\n\n# Applying functions\n@docs filter, map, map2, indexedMap, toIndexedArray\n",
        "aliases": [
          {
            "name": "Matrix",
            "comment": "\n  Matrix a has a given size, and data contained within\n",
            "args": [
              "a"
            ],
            "type": "{ size : ( Int, Int ), data : Array.Array a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "concatHorizontal",
            "comment": " Append a matrix to another matrix horizontally and return the result. Return Nothing if the heights don't match ",
            "type": "Matrix.Matrix a -> Matrix.Matrix a -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "concatVertical",
            "comment": " Append a matrix to another matrix vertically and return the result. Return Nothing if the widths don't match ",
            "type": "Matrix.Matrix a -> Matrix.Matrix a -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "empty",
            "comment": " Create an empty matrix ",
            "type": "Matrix.Matrix a"
          },
          {
            "name": "filter",
            "comment": "\n  Keep only elements that return `True` when passed to the given function f\n",
            "type": "(a -> Bool) -> Matrix.Matrix a -> Array.Array a"
          },
          {
            "name": "fromList",
            "comment": "\n  Create a matrix from a list of lists.\n  If the lists within the list are not consistently sized, return `Nothing`\n  Otherwise return a matrix with the size as the size of the outer and nested lists\n",
            "type": "List (List a) -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "get",
            "comment": "\n  Get a value from a given `x y` and return `Just v` if it exists\n  Otherwise `Nothing`\n",
            "type": "Int -> Int -> Matrix.Matrix a -> Maybe.Maybe a"
          },
          {
            "name": "getColumn",
            "comment": " Get a row at a given i\n",
            "type": "Int -> Matrix.Matrix a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "getRow",
            "comment": " Get a row at a given j\n",
            "type": "Int -> Matrix.Matrix a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "height",
            "comment": " Height of a given matrix ",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "indexedMap",
            "comment": "\n  Apply a function, taking the `x, y` of every element in the matrix\n",
            "type": "(Int -> Int -> a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "map",
            "comment": "\n  Apply a function of every element in the matrix\n",
            "type": "(a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two matricies at once\n",
            "type": "(a -> b -> c) -> Matrix.Matrix a -> Matrix.Matrix b -> Maybe.Maybe (Matrix.Matrix c)"
          },
          {
            "name": "repeat",
            "comment": "\n  Create a matrix of a given size `x y` with a default value of `v`\n",
            "type": "Int -> Int -> a -> Matrix.Matrix a"
          },
          {
            "name": "set",
            "comment": "\n  Set a value at a given `i, j` in the matrix and return the new matrix\n  If the `i, j` is out of bounds then return the unmodified matrix\n",
            "type": "Int -> Int -> a -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "toIndexedArray",
            "comment": " Convert a matrix to an indexed array\n",
            "type": "Matrix.Matrix a -> Array.Array ( ( Int, Int ), a )"
          },
          {
            "name": "update",
            "comment": "\n  Update an element at `x, y` with the given update function\n  If out of bounds, return the matrix unchanged\n",
            "type": "Int -> Int -> (a -> a) -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "width",
            "comment": " Width of a given matrix ",
            "type": "Matrix.Matrix a -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/array-extra",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Array.Extra",
        "comment": " Convenience functions for working with Array\n\n# Transformations\n@docs update, sliceFrom, sliceUntil\n\n# Higher order helpers\n@docs filterMap, apply, map2, map3, map4, map5, removeWhen\n\n# Zips\n@docs zip, zip3, zip4, zip5\n\n# Slicing / resizing\n@docs resizelRepeat, resizerRepeat, resizelIndexed, resizerIndexed, splitAt, removeAt\n\n# Unsafe\n@docs getUnsafe\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Apply an array of functions to an array of values.\n",
            "type": "Array.Array (a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "filterMap",
            "comment": " Apply a function that may succeed to all values in the array, but only keep the successes.\n\n    String.toInt : String -> Maybe Int\n    filterMap String.toInt (fromList [\"3\", \"4.0\", \"5\", \"hats\"]) == fromList [3,5]\n",
            "type": "(a -> Maybe.Maybe b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "getUnsafe",
            "comment": " Unsafe version of get, don't use this unless you know what you're doing!\n",
            "type": "Int -> Array.Array a -> a"
          },
          {
            "name": "map2",
            "comment": " Combine two arrays, combining them with the given function.\nIf one array is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n    pairs : Array a -> Array b -> Array (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights\n",
            "type": "(a -> b -> result) -> Array.Array a -> Array.Array b -> Array.Array result"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> result) -> Array.Array a -> Array.Array b -> Array.Array c -> Array.Array result"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> result) -> Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array result"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> result) -> Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array e -> Array.Array result"
          },
          {
            "name": "removeAt",
            "comment": " Remove the element at the given index\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "removeWhen",
            "comment": " Take a predicate and an array, return an array that contains elements which fails to satisfy the predicate.\n    This is equivalent to `Array.filter (not << predicate) list`\n\n    removeWhen isEven [1,2,3,4] == [1,3]\n",
            "type": "(a -> Bool) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizelIndexed",
            "comment": " Resize an array from the left, padding the right-hand side with the given index function.\n",
            "type": "Int -> (Int -> a) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizelRepeat",
            "comment": " Resize an array from the left, padding the right-hand side with the given value.\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizerIndexed",
            "comment": " Resize an array from the right, padding the left-hand side with the given index function.\n",
            "type": "Int -> (Int -> a) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizerRepeat",
            "comment": " Resize an array from the right, padding the left-hand side with the given value.\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "sliceFrom",
            "comment": " Drop *n* first elements from an array. In other words, slice an array from an index until the very end. Given negative argument, count the end of the slice from the end of the array.\n\n    sliceFrom  5 (fromList [0..9]) == fromList [5,6,7,8,9]\n    sliceFrom -3 (fromList [0..9]) == fromList [7,8,9]\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "sliceUntil",
            "comment": " Take *n* first elements from an array. In other words, slice an array from the very beginning until index not including. Given negative argument, count the beginning of the slice from the end of the array.\n\n    sliceUntil  5 (fromList [0..9]) == fromList [0,1,2,3,4]\n    sliceUntil -3 (fromList [0..9]) == fromList [0,1,2,3,4,5,6]\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "splitAt",
            "comment": " Split an array into two arrays, the first ending at and the second starting at the given index\n",
            "type": "Int -> Array.Array a -> ( Array.Array a, Array.Array a )"
          },
          {
            "name": "update",
            "comment": " Update the element at the index using a function. Returns the array unchanged if the index is out of bounds.\n\n    update  1 ((+)10) (fromList [1,2,3]) == fromList [1,12,3]\n    update  4 ((+)10) (fromList [1,2,3]) == fromList [1,2,3]\n    update -1 ((+)10) (fromList [1,2,3]) == fromList [1,2,3]\n",
            "type": "Int -> (a -> a) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "zip",
            "comment": " Zip arrays into tuples\n",
            "type": "Array.Array a -> Array.Array b -> Array.Array ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " ",
            "type": "Array.Array a -> Array.Array b -> Array.Array c -> Array.Array ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " ",
            "type": "Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " ",
            "type": "Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array e -> Array.Array ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/basics-extra",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Basics.Extra",
        "comment": " Additional basic functions.\n\n# Never\n@docs never\n\n# Tuples\n@docs (=>), swap\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "=>",
            "comment": " A shorthand for writing 2-tuples. Very commonly used when expressing key/value pairs\nin CSS or Json encoders.\n",
            "type": "a -> b -> ( a, b )"
          },
          {
            "name": "never",
            "comment": " The empty function.\nThis converts a value of type\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\ninto a value of any type, which is safe because there are no values of\ntype `Never`. Useful in certain situations as argument to\n[`Task.perform`](http://package.elm-lang.org/packages/elm-lang/core/latest/Task#perform)\nand\n[`Html.App.map`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App#map).\n\n*Note:* To use this function, its argument need not be literally of type `Never`.\nIt suffices if it is a fully polymorphic value. For example, this works:\n`Process.sleep >> Task.perform never (\\() -> ...)`, because the output of\n[`Process.sleep`](http://package.elm-lang.org/packages/elm-lang/core/latest/Process#sleep)\nis fully polymorphic in the `x` of `Task x ()`.\n",
            "type": "Basics.Never -> a"
          },
          {
            "name": "swap",
            "comment": " Swaps the elements in a tuple.\n\n    swap ( 1, 2 ) == ( 2, 1 )\n\n",
            "type": "( a, b ) -> ( b, a )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/dict-extra",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Dict.Extra",
        "comment": " Convenience functions for working with `Dict`\n\n# List operations\n@docs groupBy, fromListBy\n\n# Manipulation\n@docs removeWhen, removeMany, keepOnly\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromListBy",
            "comment": " Create a dictionary from a list of values, by passing a function that can get a key from any such value.\nIf the function does not return unique keys, earlier values are discarded.\nThis can, for instance, be useful when constructing Dicts from a List of records with `id` fields:\n\n    jack = {id=2, name=\"Jack\"}\n    jill = {id=1, name=\"Jill\"}\n    fromListBy .id [jack, jill] == Dict.fromList [(1, jack), (2, jill)]\n",
            "type": "(a -> comparable) -> List a -> Dict.Dict comparable a"
          },
          {
            "name": "groupBy",
            "comment": " Takes a key-fn and a list.\nCreates a `Dict` which maps the key to a list of matching elements.\n\n    mary = {id=1, name=\"Mary\"}\n    jack = {id=2, name=\"Jack\"}\n    jill = {id=1, name=\"Jill\"}\n    groupBy .id [mary, jack, jill] == Dict.fromList [(1, [jill, mary]), (2, [jack])]\n",
            "type": "(a -> comparable) -> List a -> Dict.Dict comparable (List a)"
          },
          {
            "name": "keepOnly",
            "comment": " Keep a key-value pair if its key appears in the set.\n",
            "type": "Set.Set comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "removeMany",
            "comment": " Remove a key-value pair if its key appears in the set.\n",
            "type": "Set.Set comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "removeWhen",
            "comment": " Remove elements which satisfies the predicate.\n\n    removeWhen (\\c v -> v == 1) Dict.fromList [(\"Mary\", 1), (\"Jack\", 2), (\"Jill\", 1)] == Dict.fromList [(\"Jack\", 2)]\n",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/easing-functions",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Ease",
        "comment": " An easing function is used in animation to make a transition between two values appear more lifelike or interesting.\nEasing functions can make sliding panels or bouncing menus appear to be physical objects.\n\nAll easing functions expect inputs to be bewteen zero and one, and will typically output in that range. Easing \"in\"\nhappens at the start of the transition, easing \"out\" at the end, and \"inOut\" on both sides. The functions provided here\nare meant to match the graphical examples on [easings.net](http://easings.net/).\n\n```elm\nimport Ease\nn = 10\n\nList.map (\\i -> Ease.inQuad (i/n)) [0..n]\n> [0, 0.01, 0.04, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1]\n\nList.map (\\i -> Ease.outCubic (i/n)) [0..n]\n> [0, 0.271, 0.488, 0.657, 0.784, 0.875, 0.936, 0.973, 0.992, 0.999, 1]\n```\n\n# Easing functions\n@docs Easing,\n      bezier,\n      linear,\n      inQuad, outQuad, inOutQuad,\n      inCubic, outCubic, inOutCubic,\n      inQuart, outQuart, inOutQuart,\n      inQuint, outQuint, inOutQuint,\n      inSine, outSine, inOutSine,\n      inExpo, outExpo, inOutExpo,\n      inCirc, outCirc, inOutCirc,\n      inBack, outBack, inOutBack,\n      inBounce, outBounce, inOutBounce,\n      inElastic, outElastic, inOutElastic\n\n# Combining easing functions\n@docs reverse, flip , inOut, retour\n",
        "aliases": [
          {
            "name": "Easing",
            "comment": " A type alias to make it easier to refer to easing functions.\n",
            "args": [],
            "type": "Float -> Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "bezier",
            "comment": " A cubic bezier function using 4 parameters: x and y position of first control point, and x and y position of second control point.\n\nSee [here](http://greweb.me/glsl-transition/example/ \"glsl-transitions\") for examples or [here](http://cubic-bezier.com/ \"tester\") to test.\n",
            "type": "Float -> Float -> Float -> Float -> Ease.Easing"
          },
          {
            "name": "flip",
            "comment": " Flip an easing function. A transition that starts fast and continues slow now starts slow and continues fast.\n\nGraphically, this flips the function around x = 0.5 and then around y = 0.5.\n",
            "type": "Ease.Easing -> Ease.Easing"
          },
          {
            "name": "inBack",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inBounce",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inCirc",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inCubic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inElastic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inExpo",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOut",
            "comment": " Makes an easing function using two other easing functions. The first half the first `Easing` function is used, the other half the second.\n",
            "type": "Ease.Easing -> Ease.Easing -> Ease.Easing"
          },
          {
            "name": "inOutBack",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutBounce",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutCirc",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutCubic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutElastic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutExpo",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutQuad",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutQuart",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutQuint",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inOutSine",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inQuad",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inQuart",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inQuint",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "inSine",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "linear",
            "comment": " A linear ease, equal to the identity function. Linear eases often appear mechanical and unphysical.\n",
            "type": "Ease.Easing"
          },
          {
            "name": "outBack",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outBounce",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outCirc",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outCubic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outElastic",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outExpo",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outQuad",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outQuart",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outQuint",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "outSine",
            "comment": " ",
            "type": "Ease.Easing"
          },
          {
            "name": "retour",
            "comment": " Makes an `Easing` function go to the end first and then back to the start. A transition that starts low and goes\nhigh now starts low, goes high at halfway, and then goes low again.\n",
            "type": "Ease.Easing -> Ease.Easing"
          },
          {
            "name": "reverse",
            "comment": " Reverse an `Easing` function. If an object follows an easing function and then the reversed easing function, it\nretraces exactly the same path, backwards.\n\nGraphically, this flips the function around x = 0.5.\n",
            "type": "Ease.Easing -> Ease.Easing"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-check",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Check.Test",
        "comment": " This module provides integration with\n[`elm-test`](http://package.elm-lang.org/packages/deadfoxygrandpa/elm-test/latest/).\n\n# Convert to Tests\n@docs evidenceToTest\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "evidenceToTest",
            "comment": " Convert elm-check's Evidence into an elm-test Test. You can use elm-test's\nrunners to view the results of your property-based tests, alongside the results\nof unit tests.\n",
            "type": "Check.Evidence -> Test.Test"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Check",
        "comment": "\n\nA toolkit for writing property-based tests, which take the form of `Claim`s. A\n`Claim` is made using the provided domain-specific language (DSL). A single\n`Claim` can be written in one of these ways:\n\n1. claim - (string) - that - (actual) - is - (expected) - for - (producer)\n2. claim - (string) - true - (predicate) - for - (producer)\n3. claim - (string) - false - (predicate) - for - (producer)\n\n\nFor example,\n\n    claim_multiplication_identity =\n      claim\n        \"Multiplying by one does not change a number\"\n      `that`\n        (\\n -> n * 1)\n      `is`\n        identity\n      `for`\n        int\n\nSee the README for more information.\n\n*Warning: The DSL follows a very strict format. Deviating from this format will\nyield potentially unintelligible type errors. The following functions have\nhorrendous type signatures and you are better off ignoring them.*\n\n@docs claim, that, is, for, true, false\n\n# Group Claims\n@docs suite\n\n# Check a Claim\n@docs quickCheck, check\n\n# Types\n@docs Claim\n\n## Evidence\nThe results of checking a claim are given back in the types defined here. You\ncan examine them yourself, or see `Check.Test` to convert them into tests to use\nwith `elm-check`'s runners.\n@docs Evidence, UnitEvidence, SuccessOptions, FailureOptions\n",
        "aliases": [
          {
            "name": "FailureOptions",
            "comment": " FailureOptions is the concrete type returned in case evidence was found\ndisproving a Claim.\n\nFailureOptions contains:\n1. the `name` of the claim\n2. the minimal `counterExample` which serves as evidence that the claim is false\n3. the value `expected` to be returned by the claim\n4. the `actual` value returned by the claim\n5. the `seed` used in order to reproduce the results\n6. the number of checks performed\n7. the number of shrinking operations performed\n8. the original `counterExample`, `actual`, and `expected` values found prior\nto performing the shrinking operations.\n",
            "args": [],
            "type": "{ name : String , counterExample : String , actual : String , expected : String , original : { counterExample : String , actual : String , expected : String } , seed : Random.Seed , numberOfChecks : Int , numberOfShrinks : Int }"
          },
          {
            "name": "SuccessOptions",
            "comment": " SuccessOptions is the concrete type returned in case there is no evidence\nfound disproving a Claim.\n\nSuccessOptions contains:\n1. the `name` of the claim\n2. the number of checks performed\n3. the `seed` used in order to reproduce the check.\n",
            "args": [],
            "type": "{ name : String, seed : Random.Seed, numberOfChecks : Int }"
          },
          {
            "name": "UnitEvidence",
            "comment": " UnitEvidence is the concrete type returned by checking a single claim.\nA UnitEvidence can easily be converted to an assertion or can be considered\nas the result of an assertion.\n",
            "args": [],
            "type": "Result.Result Check.FailureOptions Check.SuccessOptions"
          }
        ],
        "types": [
          {
            "name": "Claim",
            "comment": " A Claim is an object that makes a claim of truth about a system.\nA claim is either a function which yields evidence regarding the claim\nor a list of such claims.\n",
            "args": [],
            "cases": [
              [
                "Claim",
                [
                  "String",
                  "Int -> Random.Seed -> Check.Evidence"
                ]
              ],
              [
                "Suite",
                [
                  "String",
                  "List Check.Claim"
                ]
              ]
            ]
          },
          {
            "name": "Evidence",
            "comment": " Evidence is the output from checking a claim or multiple claims.\n",
            "args": [],
            "cases": [
              [
                "Unit",
                [
                  "Check.UnitEvidence"
                ]
              ],
              [
                "Multiple",
                [
                  "String",
                  "List Check.Evidence"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "check",
            "comment": " Check a claim and produce evidence.\n\nTo check a claim, you need to provide the number of checks to perform, and a\nrandom seed. You can set up a CI server to run through a large number of checks\nwith a randomized seed.\n\n    aggressiveCheck : Claim -> Evidence\n    aggressiveCheck =\n      check 2000 (Random.initialSeed 0xFFFF)\n",
            "type": "Int -> Random.Seed -> Check.Claim -> Check.Evidence"
          },
          {
            "name": "claim",
            "comment": "\n",
            "type": "String -> (a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "false",
            "comment": " ",
            "type": "((a -> Bool) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "for",
            "comment": " ",
            "type": "(Check.Producer.Producer a -> Check.Claim) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "is",
            "comment": " ",
            "type": "((a -> b) -> Check.Producer.Producer a -> Check.Claim) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "quickCheck",
            "comment": " Quickly check a claim.\n\nThis function is very useful when checking claims in local development.\n`quickCheck` will perform 100 checks and use `Random.initialSeed 1` as the\nrandom seed.\n",
            "type": "Check.Claim -> Check.Evidence"
          },
          {
            "name": "suite",
            "comment": " Group a list of claims into a suite. This is very useful in order to\ngroup similar claims together.\n\n    suite nameOfSuite listOfClaims\n\nSuites can be nested as deep as you like.\n\n    suite \"All tests\"\n      [ someClaim\n      , suite \"Regression tests\" listOfClaims\n      ]\n",
            "type": "String -> List Check.Claim -> Check.Claim"
          },
          {
            "name": "that",
            "comment": " ",
            "type": "((a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim) -> (a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "true",
            "comment": " ",
            "type": "((a -> Bool) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Check.Producer",
        "comment": " This is a library of `Producer`s you can use to supply values to your tests.\nYou can typically pick out which ones you need according to their types.\n\nA `Producer a` knows how to create values of type `a`. It can create them\nrandomly, and it can shrink them to more minimal values. Producers can be\nfiltered and mapped over.\n\n# Common Producers\n@docs bool, int, rangeInt, float, rangeFloat, percentage, string, maybe, result, list, array\n\n## Tuple Producers\nIf your expected and actual functions need more than one input, pass them in as a tuple.\n@docs tuple, tuple3, tuple4, tuple5\n\n# Working with Producers\n@docs Producer, filter, convert, map\n\n# Uncommon Producers\n@docs unit, order\n\n## Character Producers\n@docs char, upperCaseChar, lowerCaseChar, ascii, unicode\n\n",
        "aliases": [
          {
            "name": "Producer",
            "comment": " An Producer type is a\n[Random](http://package.elm-lang.org/packages/elm-lang/core/latest/Random)\n`Generator` paired with a shrinking strategy, or `Shrinker`. Shrinkers are defined\nin [`elm-community/shrink`](http://package.elm-lang.org/packages/elm-community/shrink/latest/).\nYou will need to be familiar with both libraries to write custom producers for your own types.\nHere is an example for a record:\n\n    type alias Position =\n        { x : Int, y : Int }\n\n\n    position : Producer Position\n    position =\n        Producer\n            (Random.map2 Position (Random.int 0 1919) (Random.int 0 1079))\n            (\\{ x, y } -> Shrink.map Position (Shrink.int x) `Shrink.andMap` (Shrink.int y))\n\nHere is an example for a union type:\n\n    type Question\n        = Name String\n        | Age Int\n\n\n    question =\n        let\n            generator =\n                Random.bool `Random.andThen` (\\b ->\n                    if b then\n                        Random.map Name string.generator\n                    else\n                        Random.map Age (Random.int 0 120)\n                 )\n\n            shrinker question =\n                case question of\n                    Name n ->\n                        Shrink.string n |> Shrink.map Name\n\n                    Age i ->\n                        Shrink.int i |> Shrink.map Age\n        in\n            Producer generator shrinker\n",
            "args": [
              "a"
            ],
            "type": "{ generator : Random.Generator a, shrinker : Shrink.Shrinker a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Given a producer of a type, create a producer of an array of that type.\nGenerates random arrays of varying length, favoring shorter arrays.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (Array.Array a)"
          },
          {
            "name": "ascii",
            "comment": " A producer for ASCII char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "bool",
            "comment": " A producer for bool values.\n",
            "type": "Check.Producer.Producer Bool"
          },
          {
            "name": "char",
            "comment": " A producer for char values. Generates random ascii chars disregarding the control\ncharacters.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "convert",
            "comment": " Convert the output of one producer to another type. This is useful if\nyou're testing a function that expects a large model record, but you only need\nto randomize a few fields. You might do this several different ways for a single\nmodel, so you generate and shrink only the fields relevant to each test.\n\n    type alias Person =\n      { first : String, last : String, age : String }\n\n    spy : Producer Person\n    spy = convert (\\age -> Person \"James\" \"Bond\" age) .age (rangeInt 0 120)\n\nIn order for shrinking to work, you need to pass an inverse function of the\nfunction being mapped.\n",
            "type": "(a -> b) -> (b -> a) -> Check.Producer.Producer a -> Check.Producer.Producer b"
          },
          {
            "name": "filter",
            "comment": " Filter the values from a Producer. The resulting Producer will only generate\nrandom test values or shrunken values that satisfy the predicate. The predicate\nmust be satisfiable.\n",
            "type": "(a -> Bool) -> Check.Producer.Producer a -> Check.Producer.Producer a"
          },
          {
            "name": "float",
            "comment": " A producer for float values. It will never produce `NaN`, `Infinity`, or `-Infinity`.\n",
            "type": "Check.Producer.Producer Float"
          },
          {
            "name": "int",
            "comment": " A producer for int values.\n",
            "type": "Check.Producer.Producer Int"
          },
          {
            "name": "list",
            "comment": " Given a producer of a type, create a producer of a list of that type.\nGenerates random lists of varying length, favoring shorter lists.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (List a)"
          },
          {
            "name": "lowerCaseChar",
            "comment": " A producer for lowercase char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "map",
            "comment": " Map a function over an producer. This works exactly like `convert`,\nexcept it does not require an inverse function, and consequently does no\nshrinking.\n",
            "type": "(a -> b) -> Check.Producer.Producer a -> Check.Producer.Producer b"
          },
          {
            "name": "maybe",
            "comment": " Given a producer of a type, create a producer of a maybe for that type.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (Maybe.Maybe a)"
          },
          {
            "name": "order",
            "comment": " A producer for order values.\n",
            "type": "Check.Producer.Producer Basics.Order"
          },
          {
            "name": "percentage",
            "comment": " A producer for percentage values. Generates random floats between `0.0` and\n`1.0`.\n",
            "type": "Check.Producer.Producer Float"
          },
          {
            "name": "rangeFloat",
            "comment": " A producer for float values within between a given minimum and maximum\nvalue, inclusive. Shrunken values will also be within the range.\n",
            "type": "Float -> Float -> Check.Producer.Producer Float"
          },
          {
            "name": "rangeInt",
            "comment": " A producer for int values within between a given minimum and maximum value,\ninclusive. Shrunken values will also be within the range.\n",
            "type": "Int -> Int -> Check.Producer.Producer Int"
          },
          {
            "name": "result",
            "comment": " Given producers for an error type and a success type, createa a producer for\na result.\n",
            "type": "Check.Producer.Producer error -> Check.Producer.Producer value -> Check.Producer.Producer (Result.Result error value)"
          },
          {
            "name": "string",
            "comment": " A producer for string values. Generates random printable ascii strings whose\nlength is between 0 and 10.\n",
            "type": "Check.Producer.Producer String"
          },
          {
            "name": "tuple",
            "comment": " Turn a tuple of producers into a producer of tuples.\n",
            "type": "( Check.Producer.Producer a, Check.Producer.Producer b ) -> Check.Producer.Producer ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " Turn a 3-tuple of producers into a producer of 3-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c ) -> Check.Producer.Producer ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " Turn a 4-tuple of producers into a producer of 4-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c , Check.Producer.Producer d ) -> Check.Producer.Producer ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " Turn a 5-tuple of producers into a producer of 5-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c , Check.Producer.Producer d , Check.Producer.Producer e ) -> Check.Producer.Producer ( a, b, c, d, e )"
          },
          {
            "name": "unicode",
            "comment": " A producer for unicode char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "unit",
            "comment": " A producer for the unit value. Unit is a type with only one value, commonly\nused as a placeholder.\n",
            "type": "Check.Producer.Producer ()"
          },
          {
            "name": "upperCaseChar",
            "comment": " A producer for uppercase char values.\n",
            "type": "Check.Producer.Producer Char"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/elm-function-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Function.Extra",
        "comment": " Higher-order helpers for working with functions.\n\n# Higher-order helpers\n@docs map, map2, map3, map4\n@docs apply, andThen\n@docs curry3, curry4, curry5\n@docs uncurry3, uncurry4, uncurry5\n@docs on\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Connect the result `a` of the first function to the first argument of the second function to form a pipeline.\nThen, send `x` into each function along the pipeline in order to execute it in a sequential manner.\n\nThe `(x -> ...)` signature is sometimes refered to as a *\"reader\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `andThen` to repeatedly read from the environment `x` and send the result into to the next function, which in turn reads from the environment `x` again and so forth.\n\n    (f `andThen` g `andThen` h) x == (h (g (f x) x) x)\n",
            "type": "(x -> a) -> (a -> x -> b) -> x -> b"
          },
          {
            "name": "apply",
            "comment": " Incrementally apply more functions, similar to `map`*N* where *N* is not fixed.\n\nThe `(x -> ...)` signature is sometimes refered to as a *\"reader\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `apply` to read an arbitrary number of arguments from the same environment `x`.\n\n    (f `apply` ga `apply` gb `apply` gc) x == f x (ga x) (gb x) (gc x)\n                                           == (map4 identity f ga gb gc) x\n                                           == (identity `map` f `apply` ga `apply` gb `apply` gc) x\n\n    (f' `map` ga `apply` gb `apply` gc) x  == f' (ga x) (gb x) (gc x) x\n                                           == (map3 f' ga gb gc) x\n\nAlso notice the type signatures...\n\n    ga                                   : x -> a\n    gb                                   : x -> b\n    gc                                   : x -> c\n\n    f                                    : x -> a -> b -> c -> d\n    (f `apply` ga)                       : x -> b -> c -> d\n    (f `apply` ga `apply` gb)            : x -> c -> d\n    (f `apply` ga `apply` gb `apply` gc) : x -> d\n\n    f'                                   : a -> b -> c -> d\n    (f' `map` ga)                        : x -> b -> c -> d\n    (f' `map` ga `apply` gb)             : x -> c -> d\n    (f' `map` ga `apply` gb `apply` gc)  : x -> d\n\n",
            "type": "(x -> a -> b) -> (x -> a) -> x -> b"
          },
          {
            "name": "curry3",
            "comment": " Change how arguments are passed to a function.\nThis splits 3-tupled arguments into three separate arguments.\n",
            "type": "(( a, b, c ) -> x) -> a -> b -> c -> x"
          },
          {
            "name": "curry4",
            "comment": " Change how arguments are passed to a function.\nThis splits 4-tupled arguments into four separate arguments.\n",
            "type": "(( a, b, c, d ) -> x) -> a -> b -> c -> d -> x"
          },
          {
            "name": "curry5",
            "comment": " Change how arguments are passed to a function.\nThis splits 5-tupled arguments into five separate arguments.\n",
            "type": "(( a, b, c, d, e ) -> x) -> a -> b -> c -> d -> e -> x"
          },
          {
            "name": "map",
            "comment": " Map into a function with a fixed input `x`. This function is just an alias for `(<<)`, the function composition operator.\n\n    (f `map` g `map` h) == (f << g << h) -- Note that `map` refers to Function.map not List.map!\n\nThe `(x -> ...)` signature is sometimes refered to as a *\"reader\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map` to transform a *\"reader\"* that produces an `a` into a *\"reader\"* that produces a `b`.\n",
            "type": "(a -> b) -> (x -> a) -> x -> b"
          },
          {
            "name": "map2",
            "comment": " Send a single argument `x` into a binary function using two intermediate mappings.\n\n    (map2 f ga gb) x == (f (ga x) (gb x)) x\n\nThe `(x -> ...)` signatures are sometimes refered to as *\"readers\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map2` to read two variables from the environment `x` before applying them to a binary function `f`.\n",
            "type": "(a -> b -> c) -> (x -> a) -> (x -> b) -> x -> c"
          },
          {
            "name": "map3",
            "comment": " Send a single argument `x` into a ternary function using three intermediate mappings.\n\n    (map3 f ga gb gc) x == (f (ga x) (gb x) (gc x)) x\n\nThe `(x -> ...)` signatures are sometimes refered to as *\"readers\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map3` to read three variables from the environment `x` before applying them to a ternary function `f`.\n",
            "type": "(a -> b -> c -> d) -> (x -> a) -> (x -> b) -> (x -> c) -> x -> d"
          },
          {
            "name": "map4",
            "comment": " Send a single argument `x` into a quaternary function using four intermediate mappings.\nUse `apply` as an infix combinator in order to deal with a larger numbers of arguments.\n\n    (map4 f ga gb gc gd) x == (f (ga x) (gb x) (gc x) (gd x)) x\n\nThe `(x -> ...)` signatures are sometimes refered to as *\"readers\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map4` to read four variables from the environment `x` before applying them to a quaternary function `f`.\n",
            "type": "(a -> b -> c -> d -> e) -> (x -> a) -> (x -> b) -> (x -> c) -> (x -> d) -> x -> e"
          },
          {
            "name": "on",
            "comment": " Apply a binary function using a transformation on both input parameters.\n\n    (*) `on` f == \\x y -> f x * f y\n    sortBy (compare `on` fst) == sortBy (\\x y -> fst x `compare` fst y)\n",
            "type": "(b -> b -> c) -> (a -> b) -> a -> a -> c"
          },
          {
            "name": "uncurry3",
            "comment": " Change how arguments are passed to a function.\nThis combines three arguments into a single 3-tuple.\n",
            "type": "(a -> b -> c -> x) -> ( a, b, c ) -> x"
          },
          {
            "name": "uncurry4",
            "comment": " Change how arguments are passed to a function.\nThis combines four arguments into a single 4-tuple.\n",
            "type": "(a -> b -> c -> d -> x) -> ( a, b, c, d ) -> x"
          },
          {
            "name": "uncurry5",
            "comment": " Change how arguments are passed to a function.\nThis combines five arguments into a single 5-tuple.\n",
            "type": "(a -> b -> c -> d -> e -> x) -> ( a, b, c, d, e ) -> x"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/elm-json-extra",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Json.Decode.Extra",
        "comment": " Convenience functions for working with Json\n\n# Date\n@docs date\n\n# Incremental Decoding\n@docs apply, (|:)\n\n# Set\n@docs set\n\n# Dict\n@docs dict2\n\n# Maybe\n@docs withDefault, maybeNull\n\n# Recursively Defined Decoders\n@docs lazy\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Can be helpful when decoding large objects incrementally.\n\n    import Date (Date)\n\n    type alias User =\n      { id                : Int\n      , createdAt         : Date\n      , updatedAt         : Date\n      , deletedAt         : Maybe Date\n      , username          : Maybe String\n      , email             : Maybe String\n      , fullname          : Maybe String\n      , avatar            : Maybe String\n      , isModerator       : Bool\n      , isOrganization    : Bool\n      , isAdmin           : Bool\n      }\n\n    metaDecoder : (Int -> Date -> Date -> Maybe Date -> b) -> Decoder b\n    metaDecoder f = f\n      `map`      (\"id\"        := int)\n      `apply` (\"createdAt\" := date)\n      `apply` (\"updatedAt\" := date)\n      `apply` (\"deletedAt\" := maybe date)\n\n    userDecoder : Decoder User\n    userDecoder = metaDecoder User\n      `apply` (\"username\"          := maybe string)\n      `apply` (\"email\"             := maybe string)\n      `apply` (\"fullname\"          := maybe string)\n      `apply` (\"avatar\"            := maybe string)\n      `apply` (\"isModerator\"       := bool)\n      `apply` (\"isOrganization\"    := bool)\n      `apply` (\"isAdmin\"           := bool)\n\nThis is a shortened form of\n\n    metaDecoder : (Int -> Date -> Date -> Maybe Date -> b) -> Decoder b\n    metaDecoder f = f\n      `map`      (\"id\"        := int)\n      `andThen` \\f -> f `map` (\"createdAt\" := date)\n      `andThen` \\f -> f `map` (\"updatedAt\" := date)\n      `andThen` \\f -> f `map` (\"deletedAt\" := maybe date)\n\n    userDecoder : Decoder User\n    userDecoder = metaDecoder User\n      `andThen` \\f -> f `map` (\"username\"          := maybe string)\n      `andThen` \\f -> f `map` (\"email\"             := maybe string)\n      `andThen` \\f -> f `map` (\"fullname\"          := maybe string)\n      `andThen` \\f -> f `map` (\"avatar\"            := maybe string)\n      `andThen` \\f -> f `map` (\"isModerator\"       := bool)\n      `andThen` \\f -> f `map` (\"isOrganization\"    := bool)\n      `andThen` \\f -> f `map` (\"isAdmin\"           := bool)\n\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          },
          {
            "name": "date",
            "comment": " Extract a date using [`Date.fromString`](http://package.elm-lang.org/packages/elm-lang/core/latest/Date#fromString)\n",
            "type": "Json.Decode.Decoder Date.Date"
          },
          {
            "name": "dict2",
            "comment": " Extract a dict using separate decoders for keys and values.\n",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "lazy",
            "comment": " Enable decoders defined in terms of themselves by lazily creating them.\n\n    treeNode =\n      object2\n        instantiateTreeNode\n        (\"name\" := string)\n        (\"children\" := list (lazy (\\_ -> treeNode)))\n\n",
            "type": "(() -> Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "maybeNull",
            "comment": " Extract a value that might be null. If the value is null,\nsucceed with Nothing. If the value is present but not null, succeed with\nJust that value. If the value is missing, fail.\n\n    -- Yields Nothing if middleName is null, and Just middleName if it's a string.\n    \"middleName\" := maybeNull string\n\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "set",
            "comment": " Extract a set.\n",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder (Set.Set comparable)"
          },
          {
            "name": "withDefault",
            "comment": " Try running the given decoder; if that fails, then succeed with the given\nfallback value.\n\n    -- If this field is missing or malformed, it will decode to [].\n    (\"optionalNames\" := list string)\n      |> (withDefault [])\n\n",
            "type": "a -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "|:",
            "comment": " Infix version of `apply` that makes for a nice DSL when decoding objects:\n\n    locationDecoder : Decoder Location\n    locationDecoder =\n        succeed Location\n            |: (\"id\" := int)\n            |: (\"name\" := string)\n            |: (\"address\" := string)\n\n\n    type alias Location =\n        { id : Int\n        , name : String\n        , address : String\n        }\n\nIf you're curious, here's how this works behind the scenes.\n\n`Location` is a type alias, and type aliases give you a convenience function\nthat returns an instance of the record in question. Try this out in `elm repl`:\n\n    > type alias Location = { id : Int, name: String, address: String }\n\n    > Location\n    <function> : Int -> String -> String -> Repl.Location\n\n    > Location 1 \"The White House\" \"1600 Pennsylvania Ave\"\n    { id = 1, name = \"The White House\", address = \"1600 Pennsylvania Ave\" }\n\nIn other words, if you call the `Location` function, passing three arguments,\nit will return a new `Location` record by filling in each of its fields. (The\nargument order is based on the order in which we listed the fields in the\ntype alias; the first argument sets `id`, the second argument sets `name`, etc.)\n\nNow try running this through `elm repl`:\n\n    > import Json.Decode exposing (succeed, int, string, (:=))\n\n    > succeed Location\n    <function>\n        : Json.Decode.Decoder\n            (Int -> String -> String -> Repl.Location)\n\nSo `succeed Location` gives us a `Decoder (Int -> String -> String -> Location)`.\nThat's not what we want! What we want is a `Decoder Location`. All we have so\nfar is a `Decoder` that wraps not a `Location`, but rather a function that\nreturns a `Location`.\n\nWhat `|: (\"id\" := int)` does is to take that wrapped function and pass an\nargument to it.\n\n    > import Json.Decode exposing (succeed, int, string, (:=))\n\n    > (\"id\" := int)\n    <function> : Json.Decode.Decoder Int\n\n    > succeed Location |: (\"id\" := int)\n    <function>\n        : Json.Decode.Decoder\n            (String -> String -> Repl.Location)\n\nNotice how the wrapped function no longer takes an `Int` as its first argument.\nThat's because `|:` went ahead and supplied one: the `Int` wrapped by the decoder\n`(\"id\" := int)` (which returns a `Decoder Int`).\n\nCompare:\n\n    -- succeed Location\n    Decoder (Int -> String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int)\n    Decoder (String -> String -> Location)\n\nWe still want a `Decoder Location` and we still don't have it yet. Our decoder\nstill wraps a function instead of a plain `Location`. However, that function is\nnow smaller by one argument!\n\nLet's repeat this pattern to provide the first `String` argument next.\n\n    -- succeed Location\n    Decoder (Int -> String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int)\n    Decoder (String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int) |: (\"name\" := string)\n    Decoder (String -> Location)\n\nSmaller and smaller! Now we're down from `(Int -> String -> String -> Location)`\nto `(String -> Location)`. What happens if we repeat the pattern one more time?\n\n    -- succeed Location\n    Decoder (Int -> String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int)\n    Decoder (String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int) |: (\"name\" := string)\n    Decoder (String -> Location)\n\n    -- succeed Location |: (\"id\" := int) |: (\"name\" := string) |: (\"address\" := string)\n    Decoder Location\n\nHaving now supplied all three arguments to the wrapped function, it has ceased\nto be a function. It's now just a plain old `Location`, like we wanted all along.\n\nWe win!\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-lazy-list",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Lazy.List",
        "comment": " Lazy list implementation in Elm.\n\n# Types\n@docs LazyList, LazyListView\n\n# Constructors\n@docs cons, empty, singleton\n\n# Query operations\n@docs isEmpty, head, tail, headAndTail, member, length\n\n# Conversions\n@docs toList, fromList, toArray, fromArray\n\n# Map-reduce et al.\n@docs map, zip, reduce, flatten, flatMap, append, foldl, foldr\n\n# Common operations\n@docs intersperse, interleave, reverse, cycle, iterate, repeat, take, takeWhile, drop, dropWhile\n\n# Filtering operations\n@docs keepIf, dropIf, filterMap, unique\n\n# Chaining operations\n@docs andMap, andThen\n\n# Useful stuff\n@docs numbers, sum, product\n\n# All the maps!\n@docs map2, map3, map4, map5\n\n# All the zips!\n@docs zip3, zip4, zip5\n\n# Infix Operators\n@docs (:::), (+++)\n\n",
        "aliases": [
          {
            "name": "LazyList",
            "comment": " Lazy List type.\n",
            "args": [
              "a"
            ],
            "type": "Lazy.Lazy (Lazy.List.LazyListView a)"
          }
        ],
        "types": [
          {
            "name": "LazyListView",
            "comment": " Analogous to `List` type. This is the actual implementation type for the\n`LazyList` type. This type is exposed to the user if the user so wishes to\ndo pattern matching or understand how the list type works. It is not\nrecommended to work with this type directly. Try working solely with the\nprovided functions in the package.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Nil",
                []
              ],
              [
                "Cons",
                [
                  "a",
                  "Lazy.List.LazyList a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "+++",
            "comment": " Alias for `append`. Analogous to `++` for lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": ":::",
            "comment": " Alias for `cons`. Analogous to `::` for lists.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "andMap",
            "comment": " Known as `mapN` in some circles. Allows you to apply `map` in cases\nwhere then number of arguments are greater than 5.\n",
            "type": "Lazy.List.LazyList (a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "andThen",
            "comment": " Chain list producing operations.\n",
            "type": "Lazy.List.LazyList a -> (a -> Lazy.List.LazyList b) -> Lazy.List.LazyList b"
          },
          {
            "name": "append",
            "comment": " Append a list to another list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "cons",
            "comment": " Add a value to the front of a list.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "cycle",
            "comment": " Take a list and repeat it ad infinitum. This cycles a finite list\nby putting the front after the end of the list. This results in a no-op in\nthe case of an infinite list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "drop",
            "comment": " Drop at most `n` many values from a list.\n",
            "type": "Int -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "dropIf",
            "comment": " Drop all elements in a list that satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements from a list as long as the predicate is satisfied.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "empty",
            "comment": " Create an empty list.\n",
            "type": "Lazy.List.LazyList a"
          },
          {
            "name": "filterMap",
            "comment": " Map a function that may fail over a lazy list, keeping only\nthe values that were successfully transformed.\n",
            "type": "(a -> Maybe.Maybe b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "flatMap",
            "comment": " Map then flatten.\n",
            "type": "(a -> Lazy.List.LazyList b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "flatten",
            "comment": " Flatten a list of lists into a single list by appending all the inner\nlists into one big list.\n",
            "type": "Lazy.List.LazyList (Lazy.List.LazyList a) -> Lazy.List.LazyList a"
          },
          {
            "name": "foldl",
            "comment": " Analogous to `List.foldl`. Is an alias for `reduce`.\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "foldr",
            "comment": " Analogous to `List.foldr`.\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "fromArray",
            "comment": " Convert an array to a lazy list.\n",
            "type": "Array.Array a -> Lazy.List.LazyList a"
          },
          {
            "name": "fromList",
            "comment": " Convert a normal list to a lazy list.\n",
            "type": "List a -> Lazy.List.LazyList a"
          },
          {
            "name": "head",
            "comment": " Get the head of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe a"
          },
          {
            "name": "headAndTail",
            "comment": " Get the head and tail of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe ( a, Lazy.List.LazyList a )"
          },
          {
            "name": "interleave",
            "comment": " Interleave the elements of a list in another list. The two lists get\ninterleaved at the end.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "intersperse",
            "comment": " Places the given value between all members of the given list.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "isEmpty",
            "comment": " Detect if a list is empty or not.\n",
            "type": "Lazy.List.LazyList a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Create an infinite list of applications of a function on some value.\n\nEquivalent to:\n\n    x ::: f x ::: f (f x) ::: f (f (f x)) ::: ... -- etc...\n",
            "type": "(a -> a) -> a -> Lazy.List.LazyList a"
          },
          {
            "name": "keepIf",
            "comment": " Keep all elements in a list that satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "length",
            "comment": " Get the length of a lazy list.\n\nWarning: This will not terminate if the list is infinite.\n",
            "type": "Lazy.List.LazyList a -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function to a list.\n",
            "type": "(a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "map2",
            "comment": " ",
            "type": "(a -> b -> c) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c"
          },
          {
            "name": "map3",
            "comment": " ",
            "type": "(a -> b -> c -> d) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d"
          },
          {
            "name": "map4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e"
          },
          {
            "name": "map5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList f"
          },
          {
            "name": "member",
            "comment": " Test if a value is a member of a list.\n",
            "type": "a -> Lazy.List.LazyList a -> Bool"
          },
          {
            "name": "numbers",
            "comment": " The list of counting numbers.\n\ni.e.:\n\n    1 ::: 2 ::: 3 ::: 4 ::: 5 ::: ... -- etc...\n",
            "type": "Lazy.List.LazyList number"
          },
          {
            "name": "product",
            "comment": " Get the product of a list of numbers.\n",
            "type": "Lazy.List.LazyList number -> number"
          },
          {
            "name": "reduce",
            "comment": " Reduce a list with a given reducer and an initial value.\n\nExample :\n    reduce (+) 0 (1 ::: 2 ::: 3 ::: 4 ::: empty) == 10\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "repeat",
            "comment": " Repeat a value ad infinitum.\nBe careful when you use this. The result of this is a truly infinite list.\nDo not try calling `reduce` or `toList` on an infinite list as it'll never\nfinish computing. Make sure you then filter it down to a finite list with `head`\nor `take` or something.\n",
            "type": "a -> Lazy.List.LazyList a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "singleton",
            "comment": " Create a singleton list.\n",
            "type": "a -> Lazy.List.LazyList a"
          },
          {
            "name": "sum",
            "comment": " Get the sum of a list of numbers.\n",
            "type": "Lazy.List.LazyList number -> number"
          },
          {
            "name": "tail",
            "comment": " Get the tail of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe (Lazy.List.LazyList a)"
          },
          {
            "name": "take",
            "comment": " Take at most `n` many values from a list.\n",
            "type": "Int -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements from a list as long as the predicate is satisfied.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "toArray",
            "comment": " Convert a lazy list to an array.\n",
            "type": "Lazy.List.LazyList a -> Array.Array a"
          },
          {
            "name": "toList",
            "comment": " Convert a lazy list to a normal list.\n",
            "type": "Lazy.List.LazyList a -> List a"
          },
          {
            "name": "unique",
            "comment": " Remove all duplicates from a list and return a list of distinct elements.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "zip",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " ",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/elm-linear-algebra",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Math.Matrix4",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All matrices are immutable.\n\nThis library uses the convention that the prefix `make` is creating a new\narray,as without the prefix, you are applying some transform to an\nexisting matrix.\n\n# Create\n\n@docs Mat4, identity\n\n# Operations\n\n@docs inverseOrthonormal, mul, mulAffine, transpose, makeBasis, transform\n\n# Projections\n\n@docs makeFrustum, makePerspective, makeOrtho, makeOrtho2D, makeLookAt\n\n# Apply Transformations\n\n@docs rotate, scale, scale3, translate, translate3\n\n# Create Transformations\n\n@docs makeRotate, makeScale, makeScale3, makeTranslate, makeTranslate3\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Mat4",
            "comment": " 4x4 matrix type ",
            "args": [],
            "cases": [
              [
                "Mat4",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "identity",
            "comment": " A matrix with all 0s, except 1s on the diagonal.\n",
            "type": "Math.Matrix4.Mat4"
          },
          {
            "name": "inverseOrthonormal",
            "comment": " Computes the inverse of the given matrix m, assuming that the matrix is\northonormal.\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeBasis",
            "comment": " Creates a transform from a basis consisting of 3 linearly independent vectors.\n",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeFrustum",
            "comment": " Creates a matrix for a projection frustum with the given parameters.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n * znear - the near z distance of the frustum\n * zfar - the far z distance of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeLookAt",
            "comment": "\nCreates a transformation matrix for a camera.\n\nParameters:\n\n * eye - The location of the camera\n * center - The location of the focused object\n * up - The \"up\" direction according to the camera\n",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeOrtho",
            "comment": "\nCreates a matrix for an orthogonal frustum projection with the given parameters.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n * znear - the near z distance of the frustum\n * zfar - the far z distance of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeOrtho2D",
            "comment": " Creates a matrix for a 2D orthogonal frustum projection with the given\nparameters. `znear` and `zfar` are assumed to be -1 and 1, respectively.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makePerspective",
            "comment": " Creates a matrix for a perspective projection with the given parameters.\n\nParameters:\n\n * fovy - field of view in the y axis, in degrees\n * aspect - aspect ratio\n * znear - the near z distance of the projection\n * zfar - the far z distance of the projection\n",
            "type": "Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeRotate",
            "comment": " Creates a transformation matrix for rotation in radians about the\n3-element vector axis.\n",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeScale",
            "comment": " Creates a transformation matrix for scaling each of the x, y, and z axes by\nthe amount given in the corresponding element of the 3-element vector.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeScale3",
            "comment": " Creates a transformation matrix for scaling by 3 scalar values, one for\neach of the x, y, and z directions.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeTranslate",
            "comment": " Creates a transformation matrix for translating each of the x, y, and z\naxes by the amount given in the corresponding element of the 3-element vector.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeTranslate3",
            "comment": "\nCreates a transformation matrix for translating by 3 scalar values, one for\neach of the x, y, and z directions.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "mul",
            "comment": " Matrix multiplcation: a * b\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "mulAffine",
            "comment": " Matrix multiplication, assuming a and b are affine: a * b\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "rotate",
            "comment": " Concatenates a rotation in radians about an axis to the given matrix.\n",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "scale",
            "comment": " Concatenates a scaling to the given matrix.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "scale3",
            "comment": " Concatenates a scaling to the given matrix.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "transform",
            "comment": " Multiply a vector by a 4x4 matrix: m * v\n",
            "type": "Math.Matrix4.Mat4 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "translate",
            "comment": "\nConcatenates a translation to the given matrix.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "translate3",
            "comment": "\nConcatenates a translation to the given matrix.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "transpose",
            "comment": " \"Flip\" the matrix across the diagonal by swapping row index and column\nindex.\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Math.Vector3",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec3, vec3, i, j, k\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, getZ, setX, setY, setZ\n\n# Operations\n@docs add, sub, negate, scale, dot, cross, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec3",
            "comment": " Three dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec3",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "cross",
            "comment": " The cross product of a and b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float, z : Float } -> Math.Vector3.Vec3"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float, Float ) -> Math.Vector3.Vec3"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "getZ",
            "comment": " Extract the z component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "i",
            "comment": " The unit vector &icirc; which points in the x direction: `vec3 1 0 0` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "j",
            "comment": " The unit vector &jcirc; which points in the y direction: `vec3 0 1 0` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "k",
            "comment": " The unit vector k&#0770; which points in the z direction: `vec3 0 0 1` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setZ",
            "comment": " Update the z component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector3.Vec3 -> { x : Float, y : Float, z : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector3.Vec3 -> ( Float, Float, Float )"
          },
          {
            "name": "vec3",
            "comment": " Creates a new 3-element vector with the given values.\n",
            "type": "Float -> Float -> Float -> Math.Vector3.Vec3"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Math.Vector2",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec2, vec2\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, setX, setY\n\n# Operations\n@docs add, sub, negate, scale, dot, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec2",
            "comment": " Two dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec2",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float } -> Math.Vector2.Vec2"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float ) -> Math.Vector2.Vec2"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector2.Vec2 -> { x : Float, y : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector2.Vec2 -> ( Float, Float )"
          },
          {
            "name": "vec2",
            "comment": " Creates a new 2-element vector with the given values. ",
            "type": "Float -> Float -> Math.Vector2.Vec2"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Math.Vector4",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec4, vec4\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, getZ, getW, setX, setY, setZ, setW\n\n# Operations\n@docs add, sub, negate, scale, dot, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec4",
            "comment": " Four dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec4",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float, z : Float, w : Float } -> Math.Vector4.Vec4"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float, Float, Float ) -> Math.Vector4.Vec4"
          },
          {
            "name": "getW",
            "comment": " Extract the w component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getZ",
            "comment": " Extract the z component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setW",
            "comment": " Update the w component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setZ",
            "comment": " Update the z component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector4.Vec4 -> { x : Float, y : Float, z : Float, w : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector4.Vec4 -> ( Float, Float, Float, Float )"
          },
          {
            "name": "vec4",
            "comment": " Creates a new 4-element vector with the given x, y, z, and w values. ",
            "type": "Float -> Float -> Float -> Float -> Math.Vector4.Vec4"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/elm-list-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "List.Extra",
        "comment": " Convenience functions for working with List\n\n# Basics\n@docs last, init, getAt, (!!), uncons, maximumBy, minimumBy, andMap, andThen, takeWhile, dropWhile, dropDuplicates, replaceIf, setAt, deleteIf, updateIf, updateAt, updateIfIndex, singleton, removeAt, removeWhen\n\n# List transformations\n@docs intercalate, transpose, subsequences, permutations, interweave\n\n# Folds\n@docs foldl1, foldr1\n\n# Building lists\n@docs scanl1, scanr, scanr1, unfoldr, iterate\n\n# Sublists\n@docs splitAt, takeWhileEnd, dropWhileEnd, span, break, stripPrefix, group, groupWhile, groupWhileTransitively, inits, tails, select, selectSplit\n\n# Predicates\n@docs isPrefixOf, isSuffixOf, isInfixOf, isSubsequenceOf, isPermutationOf\n\n# Searching\n@docs notMember, find, elemIndex, elemIndices, findIndex, findIndices\n\n# Zipping\n@docs zip, zip3, zip4, zip5\n\n# Lift functions onto multiple lists of arguments\n@docs lift2, lift3, lift4\n\n# Split to groups of given size\n@docs groupsOf, groupsOfWithStep, greedyGroupsOf, greedyGroupsOfWithStep\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "!!",
            "comment": " Alias for getAt, but with the parameters flipped.\n",
            "type": "List a -> Int -> Maybe.Maybe a"
          },
          {
            "name": "andMap",
            "comment": " Map functions taking multiple arguments over multiple lists. Each list should be of the same length.\n\n    ( (\\a b c -> a + b * c)\n        `map` [1,2,3]\n        `andMap` [4,5,6]\n        `andMap` [2,1,1]\n    ) == [9,7,9]\n",
            "type": "List (a -> b) -> List a -> List b"
          },
          {
            "name": "andThen",
            "comment": " Equivalent to `concatMap` with arguments reversed. Ideal to use as an infix function, chaining together functions that return List. For example, suppose you want to have a cartesian product of [1,2] and [3,4]:\n\n    [1,2] `andThen` \\x ->\n    [3,4] `andThen` \\y ->\n    [(x,y)]\n\nwill give back the list:\n\n    [(1,3),(1,4),(2,3),(2,4)]\n\nNow suppose we want to have a cartesian product between the first list and the second list and its doubles:\n\n    [1,2] `andThen` \\x ->\n    [3,4] `andThen` \\y ->\n    [y,y*2] `andThen` \\z ->\n    [(x,z)]\n\nwill give back the list:\n\n    [(1,3),(1,6),(1,4),(1,8),(2,3),(2,6),(2,4),(2,8)]\n\nAdvanced functional programmers will recognize this as the implementation of bind operator (>>=) for lists from the `Monad` typeclass.\n",
            "type": "List a -> (a -> List b) -> List b"
          },
          {
            "name": "break",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is longest prefix of that list, for each element of which the predicate *does not* hold. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(dropWhile p xs, takeWhile p xs)`.\n\n    break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\n    break (< 5) [1,2,3] == ([],[1,2,3])\n    break (> 5) [1,2,3] == ([1,2,3],[])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "deleteIf",
            "comment": " Remove all values that satisfy a predicate\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "dropDuplicates",
            "comment": " Drop all duplicates\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "dropWhileEnd",
            "comment": " Drop elements from the end, while predicate still holds.\n\n    dropWhileEnd ((<)5) [1..10] == [1,2,3,4,5]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "elemIndex",
            "comment": " Return the index of the first occurrence of the element. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    elemIndex 1 [1,2,3] == Just 0\n    elemIndex 4 [1,2,3] == Nothing\n    elemIndex 1 [1,2,1] == Just 0\n",
            "type": "a -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "elemIndices",
            "comment": " Return all indices of occurrences of the element. If element is not found, return empty list. Indexing starts from 0.\n\n    elemIndices 1 [1,2,3] == [0]\n    elemIndices 4 [1,2,3] == []\n    elemIndices 1 [1,2,1] == [0,2]\n",
            "type": "a -> List a -> List Int"
          },
          {
            "name": "find",
            "comment": " Find the first element that satisfies a predicate and return\nJust that element. If none match, return Nothing.\n\n    find (\\num -> num > 5) [2, 4, 6, 8] == Just 6\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "findIndex",
            "comment": " Take a predicate and a list, return the index of the first element that satisfies the predicate. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    findIndex isEven [1,2,3] == Just 1\n    findIndex isEven [1,3,5] == Nothing\n    findIndex isEven [1,2,4] == Just 1\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "findIndices",
            "comment": " Take a predicate and a list, return indices of all elements satisfying the predicate. Otherwise, return empty list. Indexing starts from 0.\n\n    findIndices isEven [1,2,3] == [1]\n    findIndices isEven [1,3,5] == []\n    findIndices isEven [1,2,4] == [1,2]\n",
            "type": "(a -> Bool) -> List a -> List Int"
          },
          {
            "name": "foldl1",
            "comment": " Variant of `foldl` that has no starting value argument and treats the head of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldl1 max [1,2,3,2,1] == Just 3\n    foldl1 max [] == Nothing\n    foldl1 (-) [1,2,3] == Just -4\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "foldr1",
            "comment": " Variant of `foldr` that has no starting value argument and treats the last element of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldr1 min [1,2,3,2,1] == Just 1\n    foldr1 min [] == Nothing\n    foldr1 (-) [1,2,3] == Just 2\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "getAt",
            "comment": " Returns `Just` the element at the given index in the list,\nor `Nothing` if the index is out of range.\n",
            "type": "Int -> List a -> Maybe.Maybe a"
          },
          {
            "name": "greedyGroupsOf",
            "comment": " Split list into groups of size given by the first argument \"greedily\" (don't throw the group away if not long enough).\n\n    greedyGroupsOf 3 [1..10]\n      == [[1,2,3],[4,5,6],[7,8,9],[10]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "greedyGroupsOfWithStep",
            "comment": " Split list into groups of size given by the first argument \"greedily\" (don't throw the group away if not long enough). After each group, drop a number of elements given by the second argumet before starting the next group.\n\n    greedyGroupsOfWithStep 3 2 [1..6]\n      == [[1,2,3],[3,4,5],[5,6]]\n",
            "type": "Int -> Int -> List a -> List (List a)"
          },
          {
            "name": "group",
            "comment": " Group similar elements together. `group` is equivalent to `groupWhile (==)`.\n\n    group [1,2,2,3,3,3,2,2,1] == [[1],[2,2],[3,3,3],[2,2],[1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "groupWhile",
            "comment": " Group elements together, using a custom equality test.\n\n    groupWhile (\\x y -> fst x == fst y) [(0,'a'),(0,'b'),(1,'c'),(1,'d')] == [[(0,'a'),(0,'b')],[(1,'c'),(1,'d')]]\n\nThe equality test should be an equivalent relationship, i.e. it should have the properties of reflexivity, symmetry, and transitivity. For non-equivalent relations it gives non-intuitive behavior:\n\n    groupWhile (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3,2,4],[1,3,2],[1]]\n\nFor grouping elements with a comparison test, which must only hold the property of transitivity, see `groupWhileTransitively`.\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupWhileTransitively",
            "comment": " Group elements together, using a custom comparison test. Start a new group each time the comparison test doesn't hold for two adjacent elements.\n\n    groupWhileTransitively (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3],[2,4],[1,3],[2],[1]]\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupsOf",
            "comment": " Split list into groups of size given by the first argument.\n\n    groupsOf 3 [1..10]\n      == [[1,2,3],[4,5,6],[7,8,9]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "groupsOfWithStep",
            "comment": " Split list into groups of size given by the first argument.  After each group, drop a number of elements given by the second argumet before starting the next group.\n\n    groupsOfWithStep 2 1 [1..4]\n      == [[1,2],[2,3],[3,4]]\n",
            "type": "Int -> Int -> List a -> List (List a)"
          },
          {
            "name": "init",
            "comment": " Return all elements of the list except the last one.\n\n    init [1,2,3] == Just [1,2]\n    init [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "inits",
            "comment": " Return all initial segments of a list, from shortest to longest, empty list first, the list itself last.\n\n    inits [1,2,3] == [[],[1],[1,2],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "intercalate",
            "comment": " Take a list and a list of lists, insert that list between every list in the list of lists, concatenate the result. `intercalate xs xss` is equivalent to `concat (intersperse xs xss)`.\n\n    intercalate [0,0] [[1,2],[3,4],[5,6]] == [1,2,0,0,3,4,0,0,5,6]\n",
            "type": "List a -> List (List a) -> List a"
          },
          {
            "name": "interweave",
            "comment": " Return a list that contains elements from the two provided, in alternate order.\n    If one list runs out of items, append the items from the remaining list.\n\n    interweave [1,3] [2,4] == [1,2,3,4]\n    interweave [1,3,5,7] [2,4] == [1,2,3,4,5,7]\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "isInfixOf",
            "comment": " Take 2 lists and return True, if the first list is an infix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPermutationOf",
            "comment": " Take 2 lists and return True, if the first list is a permutation of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPrefixOf",
            "comment": " Take 2 lists and return True, if the first list is the prefix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSubsequenceOf",
            "comment": " Take 2 lists and return True, if the first list is a subsequence of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSuffixOf",
            "comment": " Take 2 lists and return True, if the first list is the suffix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Returns a list of repeated applications of `f`.\n\nIf `f` returns `Nothing` the iteration will stop. If it returns `Just y` then `y` will be added to the list and the iteration will continue with `f y`.\n    nextYear : Int -> Maybe Int\n    nextYear year =\n      if year >= 2030 then\n        Nothing\n      else\n        Just (year + 1)\n    -- Will evaluate to [2010, 2011, ..., 2030]\n    iterate nextYear 2010\n",
            "type": "(a -> Maybe.Maybe a) -> a -> List a"
          },
          {
            "name": "last",
            "comment": " Extract the last element of a list.\n\n    last [1,2,3] == Just 3\n    last [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "lift2",
            "comment": " Map functions taking multiple arguments over multiple lists, regardless of list length.\n  All possible combinations will be explored.\n\n  lift2 (+) [1,2,3] [4,5] == [5,6,6,7,7,8]\n",
            "type": "(a -> b -> c) -> List a -> List b -> List c"
          },
          {
            "name": "lift3",
            "comment": "\n",
            "type": "(a -> b -> c -> d) -> List a -> List b -> List c -> List d"
          },
          {
            "name": "lift4",
            "comment": "\n",
            "type": "(a -> b -> c -> d -> e) -> List a -> List b -> List c -> List d -> List e"
          },
          {
            "name": "maximumBy",
            "comment": " Find the first maximum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "minimumBy",
            "comment": " Find the first minimum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "notMember",
            "comment": " Negation of `member`.\n\n    1 `notMember` [1,2,3] == False\n    4 `notMember` [1,2,3] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "permutations",
            "comment": " Return the list of of all permutations of a list. The result is in lexicographic order.\n\n    permutations [1,2,3] == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "removeAt",
            "comment": " Remove the element at an index from a list. If the index is out of range, this returns the original list unchanged. Otherwise, it returns the updated list.\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "removeWhen",
            "comment": " Take a predicate and a list, and return a list that contains elements which fails to satisfy the predicate.\n    This is equivalent to `List.filter (not << predicate) list`.\n\n    removeWhen isEven [1,2,3,4] == [1,3]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "replaceIf",
            "comment": " Replace all values that satisfy a predicate with a replacement value.\n",
            "type": "(a -> Bool) -> a -> List a -> List a"
          },
          {
            "name": "scanl1",
            "comment": " `scanl1` is a variant of `scanl` that has no starting value argument.\n\nCompare:\n\n    List.scanl (+) 0 [1,2,3] == [0,1,3,6]\n    scanl1 (+) [1,2,3] == [1,3,6]\n\n    List.scanl (-) 0 [1,2,3] == [0,1,1,2]\n    scanl1 (-) [1,2,3] == [1,1,2]\n\n    List.scanl (flip (-)) 0 [1,2,3] == [0,-1,-3,-6]\n    scanl1 (flip (-)) [1,2,3] == [1,-1,4]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "scanr",
            "comment": " `scanr` is a right-to-left dual of `scanl`. Note that:\n\n    head (scanr f z xs) == foldr f z xs\n\nExamples:\n\n    scanr (+) 0 [1,2,3] == [6,5,3,0]\n    scanr (-) 0 [1,2,3] == [2,-1,3,0]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "scanr1",
            "comment": " `scanr1` is a variant of `scanr` that has no starting value argument.\n\n    scanr1 (+) [1,2,3] == [6,5,3]\n    scanr1 (-) [1,2,3] == [2,-1,3]\n    scanr1 (flip (-)) [1,2,3] == [0,1,3]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "select",
            "comment": " Return all combinations in the form of (element, rest of the list). Read [Haskell Libraries proposal](https://mail.haskell.org/pipermail/libraries/2008-February/009270.html) for further ideas on how to use this function.\n\n    select [1,2,3,4] == [(1,[2,3,4]),(2,[1,3,4]),(3,[1,2,4]),(4,[1,2,3])]\n",
            "type": "List a -> List ( a, List a )"
          },
          {
            "name": "selectSplit",
            "comment": " Return all combinations in the form of (elements before, element, elements after).\n\n    selectSplit [1,2,3] == [([],1,[2,3]),([1],2,[3]),([1,2],3,[])]\n",
            "type": "List a -> List ( List a, a, List a )"
          },
          {
            "name": "setAt",
            "comment": " Set a value in a list by index. Returns the updated list if the index is in range, or Nothing if it is out of range.\n ",
            "type": "Int -> a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "singleton",
            "comment": " Convert a value to a list containing one value.\n\n    singleton 3 == [3]\n",
            "type": "a -> List a"
          },
          {
            "name": "span",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is longest prefix of that list, for each element of which the predicate holds. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(takeWhile p xs, dropWhile p xs)`.\n\n    span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])\n    span (< 5) [1,2,3] == ([1,2,3],[])\n    span (< 0) [1,2,3] == ([],[1,2,3])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "splitAt",
            "comment": " Take a number and a list, return a tuple of lists, where first part is prefix of the list of length equal the number, and second part is the remainder of the list. `splitAt n xs` is equivalent to `(take n xs, drop n xs)`.\n\n    splitAt 3 [1,2,3,4,5] == ([1,2,3],[4,5])\n    splitAt 1 [1,2,3] == ([1],[2,3])\n    splitAt 3 [1,2,3] == ([1,2,3],[])\n    splitAt 4 [1,2,3] == ([1,2,3],[])\n    splitAt 0 [1,2,3] == ([],[1,2,3])\n    splitAt (-1) [1,2,3] == ([],[1,2,3])\n",
            "type": "Int -> List a -> ( List a, List a )"
          },
          {
            "name": "stripPrefix",
            "comment": " Drop the given prefix from the list. If the list doesn't start with that prefix, return `Nothing`.\n\n    stripPrefix [1,2] [1,2,3,4] == Just [3,4]\n    stripPrefix [1,2,3] [1,2,3,4,5] == Just [4,5]\n    stripPrefix [1,2,3] [1,2,3] == Just []\n    stripPrefix [1,2,3] [1,2] == Nothing\n    stripPrefix [3,2,1] [1,2,3,4,5] == Nothing\n",
            "type": "List a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "subsequences",
            "comment": " Return the list of all subsequences of a list.\n\n    subsequences [1,2,3] == [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "tails",
            "comment": " Return all final segments of a list, from longest to shortest, the list itself first, empty list last.\n\n    tails [1,2,3] == [[1,2,3],[2,3],[3],[]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "takeWhileEnd",
            "comment": " Take elements from the end, while predicate still holds.\n\n    takeWhileEnd ((<)5) [1..10] == [6,7,8,9,10]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "transpose",
            "comment": " Transpose rows and columns of the list of lists.\n\n    transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\n\nIf some rows are shorter than the following rows, their elements are skipped:\n\n    transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\n",
            "type": "List (List a) -> List (List a)"
          },
          {
            "name": "uncons",
            "comment": " Decompose a list into its head and tail. If the list is empty, return `Nothing`. Otherwise, return `Just (x, xs)`, where `x` is head and `xs` is tail.\n\n    uncons [1,2,3] == Just (1, [2,3])\n    uncons [] = Nothing\n",
            "type": "List a -> Maybe.Maybe ( a, List a )"
          },
          {
            "name": "unfoldr",
            "comment": " The `unfoldr` function is \"dual\" to `foldr`. `foldr` reduces a list to a summary value, `unfoldr` builds a list from a seed. The function takes a function and a starting element. It applies the function to the element. If the result is `Just (a, b)`, `a` is accumulated and the function is applied to `b`. If the result is `Nothing`, the list accumulated so far is returned.\n\n    unfoldr (\\b -> if b == 0 then Nothing else Just (b, b-1)) 5 == [5,4,3,2,1]\n",
            "type": "(b -> Maybe.Maybe ( a, b )) -> b -> List a"
          },
          {
            "name": "updateAt",
            "comment": " Replace a value at a specific index by calling an update function.\n",
            "type": "Int -> (a -> a) -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "updateIf",
            "comment": " Replace all values that satisfy a predicate by calling an update function.\n",
            "type": "(a -> Bool) -> (a -> a) -> List a -> List a"
          },
          {
            "name": "updateIfIndex",
            "comment": " Replace a value at an index that satisfies a predicate.\n",
            "type": "(Int -> Bool) -> (a -> a) -> List a -> List a"
          },
          {
            "name": "zip",
            "comment": " Take two lists and returns a list of corresponding pairs\n",
            "type": "List a -> List b -> List ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " Take three lists and returns a list of triples\n",
            "type": "List a -> List b -> List c -> List ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " Take four lists and returns a list of quadruples\n",
            "type": "List a -> List b -> List c -> List d -> List ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " Take five lists and returns a list of quintuples\n",
            "type": "List a -> List b -> List c -> List d -> List e -> List ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-material-icons",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Material.Icons.Notification",
        "comment": "\n\n# Icons\n@docs adb\n@docs airline_seat_flat\n@docs airline_seat_flat_angled\n@docs airline_seat_individual_suite\n@docs airline_seat_legroom_extra\n@docs airline_seat_legroom_normal\n@docs airline_seat_legroom_reduced\n@docs airline_seat_recline_extra\n@docs airline_seat_recline_normal\n@docs bluetooth_audio\n@docs confirmation_number\n@docs disc_full\n@docs do_not_disturb\n@docs do_not_disturb_alt\n@docs drive_eta\n@docs event_available\n@docs event_busy\n@docs event_note\n@docs folder_special\n@docs live_tv\n@docs mms\n@docs more\n@docs network_locked\n@docs ondemand_video\n@docs personal_video\n@docs phone_bluetooth_speaker\n@docs phone_forwarded\n@docs phone_in_talk\n@docs phone_locked\n@docs phone_missed\n@docs phone_paused\n@docs power\n@docs sd_card\n@docs sim_card_alert\n@docs sms\n@docs sms_failed\n@docs sync\n@docs sync_disabled\n@docs sync_problem\n@docs system_update\n@docs tap_and_play\n@docs time_to_leave\n@docs vibration\n@docs voice_chat\n@docs vpn_lock\n@docs wc\n@docs wifi\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adb",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_flat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_flat_angled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_individual_suite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_legroom_extra",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_legroom_normal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_legroom_reduced",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_recline_extra",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airline_seat_recline_normal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bluetooth_audio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "confirmation_number",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "disc_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "do_not_disturb",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "do_not_disturb_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "drive_eta",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "event_available",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "event_busy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "event_note",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "folder_special",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "live_tv",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "more",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "network_locked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "ondemand_video",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "personal_video",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_bluetooth_speaker",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_forwarded",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_in_talk",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_locked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_missed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_paused",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "power",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sd_card",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sim_card_alert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sms_failed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sync",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sync_disabled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sync_problem",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "system_update",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tap_and_play",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "time_to_leave",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vibration",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "voice_chat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vpn_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wc",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Action",
        "comment": "\n\n# Icons\n@docs three_d_rotation\n@docs accessibility\n@docs account_balance\n@docs account_balance_with_wallet\n@docs account_box\n@docs account_circle\n@docs add_shopping_cart\n@docs alarm\n@docs alarm_add\n@docs alarm_off\n@docs alarm_on\n@docs android\n@docs announcement\n@docs aspect_ratio\n@docs assessment\n@docs assignment\n@docs assignment_ind\n@docs assignment_late\n@docs assignment_return\n@docs assignment_returned\n@docs assignment_turned_in\n@docs autorenew\n@docs backup\n@docs book\n@docs bookmark\n@docs bookmark_border\n@docs bug_report\n@docs build\n@docs cached\n@docs camera_enhance\n@docs card_giftcard\n@docs card_membership\n@docs card_travel\n@docs change_history\n@docs check_circle\n@docs chrome_reader_mode\n@docs class\n@docs code\n@docs credit_card\n@docs dashboard\n@docs delete\n@docs description\n@docs dns\n@docs done\n@docs done_all\n@docs eject\n@docs event\n@docs event_seat\n@docs exit_to_app\n@docs explore\n@docs extension\n@docs face\n@docs favorite\n@docs favorite_border\n@docs feedback\n@docs find_in_page\n@docs find_replace\n@docs flight_land\n@docs flight_takeoff\n@docs flip_to_back\n@docs flip_to_front\n@docs get_app\n@docs gif\n@docs grade\n@docs group_work\n@docs help\n@docs help_outline\n@docs highlight_off\n@docs history\n@docs home\n@docs hourglass_empty\n@docs hourglass_full\n@docs http\n@docs https\n@docs info\n@docs info_outline\n@docs input\n@docs invert_colors\n@docs label\n@docs label_outline\n@docs language\n@docs launch\n@docs list\n@docs lock\n@docs lock_open\n@docs lock_outline\n@docs loyalty\n@docs markunread_mailbox\n@docs note_add\n@docs offline_pin\n@docs open_in_browser\n@docs open_in_new\n@docs open_with\n@docs pageview\n@docs payment\n@docs perm_camera_mic\n@docs perm_contact_calendar\n@docs perm_data_setting\n@docs perm_device_information\n@docs perm_identity\n@docs perm_media\n@docs perm_phone_msg\n@docs perm_scan_wifi\n@docs picture_in_picture\n@docs play_for_work\n@docs polymer\n@docs power_settings_new\n@docs print\n@docs query_builder\n@docs question_answer\n@docs receipt\n@docs redeem\n@docs reorder\n@docs report_problem\n@docs restore\n@docs room\n@docs schedule\n@docs search\n@docs settings\n@docs settings_application\n@docs settings_backup_restore\n@docs settings_bluetooth\n@docs settings_brightness\n@docs settings_cell\n@docs settings_ethernet\n@docs settings_input_antenna\n@docs settings_input_component\n@docs settings_input_composite\n@docs settings_input_hdmi\n@docs settings_input_svideo\n@docs settings_overscan\n@docs settings_phone\n@docs settings_power\n@docs settings_remote\n@docs settings_voice\n@docs shop\n@docs shop_two\n@docs shopping_basket\n@docs shopping_cart\n@docs speaker_notes\n@docs spellcheck\n@docs star_rate\n@docs stars\n@docs store\n@docs subject\n@docs supervisor_account\n@docs swap_horiz\n@docs swap_vert\n@docs swap_vertical_circle\n@docs system_update_alt\n@docs tab\n@docs tab_unselected\n@docs theaters\n@docs thumb_down\n@docs thumb_up\n@docs thumps_up_down\n@docs toc\n@docs today\n@docs toll\n@docs track_changes\n@docs translate\n@docs trending_down\n@docs trending_flat\n@docs trending_up\n@docs turned_in\n@docs turned_in_not\n@docs verified_user\n@docs view_agenda\n@docs view_array\n@docs view_carousel\n@docs view_column\n@docs view_day\n@docs view_headline\n@docs view_list\n@docs view_module\n@docs view_quilt\n@docs view_stream\n@docs view_week\n@docs visibility\n@docs visibility_off\n@docs work\n@docs youtube_searched_for\n@docs zoom_in\n@docs zoom_out\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accessibility",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "account_balance",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "account_balance_with_wallet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "account_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "account_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "add_shopping_cart",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "alarm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "alarm_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "alarm_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "alarm_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "android",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "announcement",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "aspect_ratio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assessment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assignment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assignment_ind",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assignment_late",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assignment_return",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assignment_returned",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assignment_turned_in",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "autorenew",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "backup",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "book",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bookmark",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bookmark_border",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bug_report",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "build",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cached",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "camera_enhance",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "card_giftcard",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "card_membership",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "card_travel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "change_history",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "check_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "chrome_reader_mode",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "class",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "code",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "credit_card",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dashboard",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "delete",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "description",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dns",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "done",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "done_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "eject",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "event",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "event_seat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exit_to_app",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "explore",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "extension",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "face",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "favorite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "favorite_border",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "feedback",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "find_in_page",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "find_replace",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flight_land",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flight_takeoff",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flip_to_back",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flip_to_front",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "get_app",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gif",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "grade",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "group_work",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "help",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "help_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "highlight_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "history",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "home",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hourglass_empty",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hourglass_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "http",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "https",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "info",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "info_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "input",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "invert_colors",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "label",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "label_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "language",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "launch",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "list",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "lock_open",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "lock_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "loyalty",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "markunread_mailbox",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "note_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "offline_pin",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "open_in_browser",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "open_in_new",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "open_with",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "pageview",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "payment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_camera_mic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_contact_calendar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_data_setting",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_device_information",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_identity",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_media",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_phone_msg",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "perm_scan_wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "picture_in_picture",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "play_for_work",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "polymer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "power_settings_new",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "print",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "query_builder",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "question_answer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "receipt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "redeem",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "reorder",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "report_problem",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "restore",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "room",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "schedule",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "search",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_application",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_backup_restore",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_bluetooth",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_brightness",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_cell",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_ethernet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_input_antenna",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_input_component",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_input_composite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_input_hdmi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_input_svideo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_overscan",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_power",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_remote",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_voice",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "shop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "shop_two",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "shopping_basket",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "shopping_cart",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "speaker_notes",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "spellcheck",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "star_rate",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "stars",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "store",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "subject",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "supervisor_account",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "swap_horiz",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "swap_vert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "swap_vertical_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "system_update_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tab",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tab_unselected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "theaters",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "three_d_rotation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "thumb_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "thumb_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "thumps_up_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "toc",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "today",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "toll",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "track_changes",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "translate",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "trending_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "trending_flat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "trending_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "turned_in",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "turned_in_not",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "verified_user",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_agenda",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_array",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_carousel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_column",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_day",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_headline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_list",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_module",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_quilt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_stream",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_week",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "visibility",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "visibility_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "work",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "youtube_searched_for",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "zoom_in",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "zoom_out",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Hardware",
        "comment": "\n\n#Icons\n@docs cast\n@docs cast_connected\n@docs computer\n@docs desktop_mac\n@docs desktop_windows\n@docs developer_board\n@docs device_hub\n@docs dock\n@docs gamepad\n@docs headset\n@docs headset_mic\n@docs keyboard\n@docs keyboard_arrow_down\n@docs keyboard_arrow_left\n@docs keyboard_arrow_right\n@docs keyboard_arrow_up\n@docs keyboard_arrow_backspace\n@docs keyboard_arrow_capslock\n@docs keyboard_arrow_hide\n@docs keyboard_arrow_return\n@docs keyboard_tab\n@docs keyboard_voice\n@docs laptop\n@docs laptop_chromebook\n@docs laptop_mac\n@docs laptop_windows\n@docs memory\n@docs mouse\n@docs phone_android\n@docs phone_iphone\n@docs phonelink\n@docs phonelink_off\n@docs power_input\n@docs router\n@docs scanner\n@docs security\n@docs sim_card\n@docs smartphone\n@docs speaker\n@docs speaker_group\n@docs tablet\n@docs tablet_android\n@docs tablet_mac\n@docs toys\n@docs tv\n@docs watch\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cast",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cast_connected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "computer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "desktop_mac",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "desktop_windows",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "developer_board",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "device_hub",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gamepad",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "headset",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "headset_mic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_backspace",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_capslock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_hide",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_return",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_arrow_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_tab",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "keyboard_voice",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "laptop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "laptop_chromebook",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "laptop_mac",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "laptop_windows",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "memory",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mouse",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_android",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone_iphone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phonelink",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phonelink_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "power_input",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "router",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "scanner",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "security",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sim_card",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "smartphone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "speaker",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "speaker_group",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tablet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tablet_android",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tablet_mac",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "toys",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tv",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "watch",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Content",
        "comment": "\n\n# Icons\n@docs add\n@docs add_box\n@docs add_circle\n@docs add_circle_outline\n@docs archive\n@docs backspace\n@docs block\n@docs clear\n@docs content_copy\n@docs content_cut\n@docs content_paste\n@docs create\n@docs drafts\n@docs filter_list\n@docs flag\n@docs font_download\n@docs forward\n@docs gesture\n@docs inbox\n@docs link\n@docs mail\n@docs markunread\n@docs redo\n@docs remove\n@docs remove_circle\n@docs remove_circle_outline\n@docs reply\n@docs reply_all\n@docs report\n@docs save\n@docs select_all\n@docs send\n@docs sort\n@docs text_format\n@docs undo\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "add_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "add_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "add_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "archive",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "backspace",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "block",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "content_copy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "content_cut",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "content_paste",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "create",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "drafts",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_list",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flag",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "font_download",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "forward",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gesture",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "inbox",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "link",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mail",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "markunread",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "redo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "remove",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "remove_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "remove_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "reply",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "reply_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "report",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "save",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "select_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "send",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sort",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "text_format",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "undo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Av",
        "comment": "\n\n# Icons\n@docs airplay\n@docs album\n@docs av_timer\n@docs closed_caption\n@docs equalizer\n@docs explicit\n@docs fast_forward\n@docs fast_rewind\n@docs forward_10\n@docs forward_30\n@docs forward_5\n@docs games\n@docs hd\n@docs hearing\n@docs high_quality\n@docs library_add\n@docs library_books\n@docs library_music\n@docs loop\n@docs mic\n@docs mic_none\n@docs mic_off\n@docs movie\n@docs new_releases\n@docs not_interested\n@docs pause\n@docs pause_circle_filled\n@docs pause_circle_outline\n@docs play_arrow\n@docs play_circle_filled\n@docs play_circle_outline\n@docs playlist_add\n@docs queue\n@docs queue_music\n@docs radio\n@docs recent_actors\n@docs repeat\n@docs repeat_one\n@docs replay_10\n@docs replay\n@docs replay_30\n@docs replay_5\n@docs shuffle\n@docs skip_next\n@docs skip_previous\n@docs snooze\n@docs sort_by_alpha\n@docs stop\n@docs subtitles\n@docs surround_sound\n@docs video_library\n@docs videocam\n@docs videocam_off\n@docs volume_down\n@docs volume_mute\n@docs volume_off\n@docs volume_up\n@docs web\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "airplay",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "album",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "av_timer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "closed_caption",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "equalizer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "explicit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "fast_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "fast_rewind",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "forward_10",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "forward_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "forward_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "games",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hd",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hearing",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "high_quality",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "library_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "library_books",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "library_music",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "loop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mic_none",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mic_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "movie",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "new_releases",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "not_interested",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "pause",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "pause_circle_filled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "pause_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "play_arrow",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "play_circle_filled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "play_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "playlist_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "queue",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "queue_music",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "radio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "recent_actors",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "repeat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "repeat_one",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "replay",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "replay_10",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "replay_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "replay_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "shuffle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "skip_next",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "skip_previous",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "snooze",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sort_by_alpha",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "subtitles",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "surround_sound",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "video_library",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "videocam",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "videocam_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "volume_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "volume_mute",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "volume_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "volume_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "web",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Toggle",
        "comment": "\n\n# Icons\n@docs check_box\n@docs check_box_outline_blank\n@docs indeterminate_check_box\n@docs radio_button_checked\n@docs radio_button_unchecked\n@docs star\n@docs star_border\n@docs star_half\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "check_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "check_box_outline_blank",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "indeterminate_check_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "radio_button_checked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "radio_button_unchecked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "star",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "star_border",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "star_half",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Navigation",
        "comment": "\n\n# Icons\n@docs apps\n@docs arrow_back\n@docs arrow_drop_down\n@docs arrow_drop_down_circle\n@docs arrow_drop_up\n@docs arrow_forward\n@docs cancel\n@docs check\n@docs chevron_left\n@docs chevron_right\n@docs close\n@docs expand_less\n@docs expand_more\n@docs fullscreen\n@docs fullscreen_exit\n@docs menu\n@docs more_horiz\n@docs more_vert\n@docs refresh\n@docs unfold_less\n@docs unfold_more\n\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apps",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "arrow_back",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "arrow_drop_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "arrow_drop_down_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "arrow_drop_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "arrow_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cancel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "check",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "chevron_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "chevron_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "close",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "expand_less",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "expand_more",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "fullscreen",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "fullscreen_exit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "menu",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "more_horiz",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "more_vert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "refresh",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "unfold_less",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "unfold_more",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Alert",
        "comment": "\n\n# Icons\n@docs add_alert\n@docs error\n@docs error_outline\n@docs warning\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add_alert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "error",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "error_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "warning",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Social",
        "comment": "\n\n# Icons\n@docs cake\n@docs domain\n@docs group\n@docs group_add\n@docs location_city\n@docs mood\n@docs mood_bad\n@docs notifications\n@docs notifications_active\n@docs notifications_none\n@docs notifications_off\n@docs notifications_paused\n@docs pages\n@docs party_mode\n@docs people\n@docs people_outline\n@docs person\n@docs person_add\n@docs person_outline\n@docs plus_one\n@docs poll\n@docs public\n@docs school\n@docs share\n@docs whatshot\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cake",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "domain",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "group",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "group_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "location_city",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mood",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mood_bad",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "notifications",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "notifications_active",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "notifications_none",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "notifications_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "notifications_paused",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "pages",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "party_mode",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "people",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "people_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "person",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "person_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "person_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "plus_one",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "poll",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "public",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "school",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "share",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "whatshot",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Maps",
        "comment": "\n\n#Icons\n@docs beenhere\n@docs directions\n@docs directions_bike\n@docs directions_boat\n@docs directions_bus\n@docs directions_car\n@docs directions_railway\n@docs directions_run\n@docs directions_subway\n@docs directions_transit\n@docs directions_walk\n@docs flight\n@docs hotel\n@docs layers\n@docs layers_clear\n@docs local_activity\n@docs local_airport\n@docs local_atm\n@docs local_bar\n@docs local_cafe\n@docs local_car_wash\n@docs local_convenience_store\n@docs local_dining\n@docs local_drink\n@docs local_florist\n@docs local_gas_station\n@docs local_grocery_store\n@docs local_hospital\n@docs local_hotel\n@docs local_laundry_service\n@docs local_library\n@docs local_mall\n@docs local_movies\n@docs local_offer\n@docs local_parking\n@docs local_pharmacy\n@docs local_phone\n@docs local_pizza\n@docs local_play\n@docs local_post_office\n@docs local_printshop\n@docs local_see\n@docs local_shipping\n@docs local_taxi\n@docs map\n@docs my_location\n@docs navigation\n@docs person_pin\n@docs pin_drop\n@docs place\n@docs rate_review\n@docs restaurant_menu\n@docs satellite\n@docs store_mall_directory\n@docs terrain\n@docs traffic\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "beenhere",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_bike",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_boat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_bus",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_car",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_railway",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_run",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_subway",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_transit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "directions_walk",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flight",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hotel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "layers",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "layers_clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_activity",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_airport",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_atm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_cafe",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_car_wash",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_convenience_store",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_dining",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_drink",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_florist",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_gas_station",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_grocery_store",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_hospital",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_hotel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_laundry_service",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_library",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_mall",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_movies",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_offer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_parking",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_pharmacy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_pizza",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_play",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_post_office",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_printshop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_see",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_shipping",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "local_taxi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "my_location",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "navigation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "person_pin",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "pin_drop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "place",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "rate_review",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "restaurant_menu",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "satellite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "store_mall_directory",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "terrain",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "traffic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.File",
        "comment": "\n\n# Icons\n@docs attachment\n@docs cloud\n@docs cloud_circle\n@docs cloud_done\n@docs cloud_download\n@docs cloud_off\n@docs cloud_queue\n@docs cloud_upload\n@docs file_download\n@docs file_upload\n@docs folder\n@docs folder_open\n@docs folder_shared\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "attachment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud_done",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud_download",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud_queue",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "cloud_upload",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "file_download",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "file_upload",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "folder",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "folder_open",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "folder_shared",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Image",
        "comment": "\n\n#Icons\n@docs add_to_photos\n@docs adjust\n@docs assistant\n@docs assistant_photo\n@docs audiotrack\n@docs blur_circular\n@docs blur_linear\n@docs blur_off\n@docs blur_on\n@docs brightness_1\n@docs brightness_2\n@docs brightness_3\n@docs brightness_4\n@docs brightness_5\n@docs brightness_6\n@docs brightness_7\n@docs broken_image\n@docs brush\n@docs camera\n@docs camera_alt\n@docs camera_front\n@docs camera_rear\n@docs camera_roll\n@docs center_focus_strong\n@docs center_focus_weak\n@docs collections\n@docs collections_bookmark\n@docs color_lens\n@docs colorize\n@docs compare\n@docs control_point\n@docs control_point_duplicate\n@docs crop_16_9\n@docs crop\n@docs crop_3_2\n@docs crop_5_4\n@docs crop_7_5\n@docs crop_din\n@docs crop_free\n@docs crop_landscape\n@docs crop_original\n@docs crop_portrait\n@docs crop_square\n@docs dehaze\n@docs details\n@docs edit\n@docs exposure\n@docs exposure_neg_1\n@docs exposure_neg_2\n@docs exposure_plus_1\n@docs exposure_plus_2\n@docs exposure_zero\n@docs filter\n@docs filter_1\n@docs filter_2\n@docs filter_3\n@docs filter_4\n@docs filter_5\n@docs filter_6\n@docs filter_7\n@docs filter_8\n@docs filter_9\n@docs filter_9_plus\n@docs filter_b_and_w\n@docs filter_center_focus\n@docs filter_drama\n@docs filter_frames\n@docs filter_hdr\n@docs filter_none\n@docs filter_tilt_shift\n@docs filter_vintage\n@docs flare\n@docs flash_auto\n@docs flash_off\n@docs flash_on\n@docs flip\n@docs gradient\n@docs grain\n@docs grid_off\n@docs grid_on\n@docs hdr_off\n@docs hdr_on\n@docs hdr_strong\n@docs hdr_weak\n@docs healing\n@docs image\n@docs image_aspect_ratio\n@docs iso\n@docs landscape\n@docs leak_add\n@docs leak_remove\n@docs lens\n@docs looks\n@docs looks_3\n@docs looks_4\n@docs looks_5\n@docs looks_6\n@docs looks_one\n@docs looks_two\n@docs loupe\n@docs monochrome_photos\n@docs movie_creation\n@docs music_note\n@docs nature\n@docs nature_people\n@docs navigate_before\n@docs navigate_next\n@docs palette\n@docs panorama\n@docs panorama_fish_eye\n@docs panorama_horizontal\n@docs panorama_vertical\n@docs panorama_wide_angle\n@docs photo\n@docs photo_album\n@docs photo_camera\n@docs photo_library\n@docs photo_size_select_actual\n@docs photo_size_select_large\n@docs photo_size_select_small\n@docs picture_as_pdf\n@docs portrait\n@docs remove_red_eye\n@docs rotate_90_degrees_ccw\n@docs rotate_left\n@docs rotate_right\n@docs slideshow\n@docs straighten\n@docs style\n@docs switch_camera\n@docs switch_video\n@docs tag_faces\n@docs texture\n@docs timelapse\n@docs timer_10\n@docs timer\n@docs timer_3\n@docs timer_off\n@docs tonality\n@docs transform\n@docs tune\n@docs view_comfy\n@docs view_compact\n@docs vignette\n@docs wb_auto\n@docs wb_cloudy\n@docs wb_incandescent\n@docs wb_iridescent\n@docs wb_sunny\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add_to_photos",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "adjust",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assistant",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "assistant_photo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "audiotrack",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "blur_circular",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "blur_linear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "blur_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "blur_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_6",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_7",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "broken_image",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brush",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "camera",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "camera_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "camera_front",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "camera_rear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "camera_roll",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "center_focus_strong",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "center_focus_weak",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "collections",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "collections_bookmark",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "color_lens",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "colorize",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "compare",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "control_point",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "control_point_duplicate",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_16_9",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_3_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_5_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_7_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_din",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_free",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_original",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "crop_square",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dehaze",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "details",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "edit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exposure",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exposure_neg_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exposure_neg_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exposure_plus_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exposure_plus_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "exposure_zero",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_6",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_7",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_8",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_9",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_9_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_b_and_w",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_center_focus",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_drama",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_frames",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_hdr",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_none",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_tilt_shift",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "filter_vintage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flare",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flash_auto",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flash_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flash_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "flip",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gradient",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "grain",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "grid_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "grid_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hdr_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hdr_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hdr_strong",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "hdr_weak",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "healing",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "image",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "image_aspect_ratio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "iso",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "leak_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "leak_remove",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "lens",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks_6",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks_one",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "looks_two",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "loupe",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "monochrome_photos",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "movie_creation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "music_note",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "nature",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "nature_people",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "navigate_before",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "navigate_next",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "palette",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "panorama",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "panorama_fish_eye",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "panorama_horizontal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "panorama_vertical",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "panorama_wide_angle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo_album",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo_camera",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo_library",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo_size_select_actual",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo_size_select_large",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "photo_size_select_small",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "picture_as_pdf",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "remove_red_eye",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "rotate_90_degrees_ccw",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "rotate_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "rotate_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "slideshow",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "straighten",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "switch_camera",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "switch_video",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tag_faces",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "texture",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "timelapse",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "timer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "timer_10",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "timer_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "timer_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tonality",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "transform",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "tune",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_comfy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "view_compact",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vignette",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wb_auto",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wb_cloudy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wb_incandescent",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wb_iridescent",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wb_sunny",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Editor",
        "comment": "\n\n# Icons\n@docs attach_file\n@docs attach_money\n@docs border_all\n@docs border_bottom\n@docs border_clear\n@docs border_color\n@docs border_horizontal\n@docs border_inner\n@docs border_left\n@docs border_outer\n@docs border_right\n@docs border_style\n@docs border_top\n@docs border_vertical\n@docs format_align_center\n@docs format_align_justify\n@docs format_align_left\n@docs format_align_right\n@docs format_bold\n@docs format_clear\n@docs format_color_fill\n@docs format_color_reset\n@docs format_color_text\n@docs format_indent_decrease\n@docs format_indent_increase\n@docs format_italic\n@docs format_line_spacing\n@docs format_list_bulleted\n@docs format_list_numbered\n@docs format_paint\n@docs format_quote\n@docs format_size\n@docs format_strikethrough\n@docs format_textdirection_l_to_r\n@docs format_textdirection_r_to_l\n@docs format_underlined\n@docs functions\n@docs insert_chart\n@docs insert_comment\n@docs insert_drive_file\n@docs insert_emoticon\n@docs insert_invitation\n@docs insert_link\n@docs insert_photo\n@docs merge_type\n@docs mode_comment\n@docs mode_edit\n@docs money_off\n@docs publish\n@docs space_bar\n@docs strikethrough_s\n@docs vertical_align_bottom\n@docs vertical_align_center\n@docs vertical_align_top\n@docs wrap_text\n\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "attach_file",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "attach_money",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_bottom",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_color",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_horizontal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_inner",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_outer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_style",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_top",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "border_vertical",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_align_center",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_align_justify",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_align_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_align_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_bold",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_color_fill",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_color_reset",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_color_text",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_indent_decrease",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_indent_increase",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_italic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_line_spacing",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_list_bulleted",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_list_numbered",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_paint",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_quote",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_size",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_strikethrough",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_textdirection_l_to_r",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_textdirection_r_to_l",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "format_underlined",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "functions",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_comment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_drive_file",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_emoticon",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_invitation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_link",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "insert_photo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "merge_type",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mode_comment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "mode_edit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "money_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "publish",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "space_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "strikethrough_s",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vertical_align_bottom",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vertical_align_center",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vertical_align_top",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wrap_text",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Communication",
        "comment": "\n\n# Icons\n@docs contact_mail\n@docs business\n@docs call\n@docs call_end\n@docs call_made\n@docs call_merge\n@docs call_missed\n@docs call_received\n@docs call_split\n@docs chat\n@docs chat_bubble\n@docs chat_bubble_outline\n@docs clear_all\n@docs comment\n@docs contact_phone\n@docs contacts\n@docs dialer_sip\n@docs dialpad\n@docs email\n@docs forum\n@docs import_export\n@docs invert_colors_off\n@docs live_help\n@docs location_off\n@docs location_on\n@docs message\n@docs no_sim\n@docs phone\n@docs phonelink_erase\n@docs phonelink_lock\n@docs phonelink_ring\n@docs phonelink_setup\n@docs portable_wifi_off\n@docs present_to_all\n@docs ring_volume\n@docs speaker_phone\n@docs stay_current_landscape\n@docs stay_current_portrait\n@docs stay_primary_landscape\n@docs stay_primary_portrait\n@docs swap_calls\n@docs textsms\n@docs voicemail\n@docs vpn_key\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "business",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call_end",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call_made",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call_merge",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call_missed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call_received",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "call_split",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "chat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "chat_bubble",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "chat_bubble_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "clear_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "comment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "contact_mail",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "contact_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "contacts",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dialer_sip",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dialpad",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "email",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "forum",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "import_export",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "invert_colors_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "live_help",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "location_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "location_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "message",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "no_sim",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phonelink_erase",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phonelink_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phonelink_ring",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "phonelink_setup",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "portable_wifi_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "present_to_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "ring_volume",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "speaker_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "stay_current_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "stay_current_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "stay_primary_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "stay_primary_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "swap_calls",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "textsms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "voicemail",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "vpn_key",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icons.Device",
        "comment": "\n\n# Icons\n@docs access_alarm\n@docs access_alarms\n@docs access_time\n@docs add_alarm\n@docs airplanemode_active\n@docs airplanemode_inactive\n@docs battery_20\n@docs battery_30\n@docs battery_50\n@docs battery_60\n@docs battery_80\n@docs battery_90\n@docs battery_alert\n@docs battery_charging_20\n@docs battery_charging_30\n@docs battery_charging_50\n@docs battery_charging_60\n@docs battery_charging_80\n@docs battery_charging_90\n@docs battery_charging_full\n@docs battery_full\n@docs battery_std\n@docs battery_unknown\n@docs bluetooth\n@docs bluetooth_connected\n@docs bluetooth_disabled\n@docs bluetooth_searching\n@docs brightness_auto\n@docs brightness_high\n@docs brightness_low\n@docs brightness_medium\n@docs data_usage\n@docs developer_mode\n@docs devices\n@docs dvr\n@docs gps_fixed\n@docs gps_not_fixed\n@docs gps_off\n@docs graphic_eq\n@docs location_disabled\n@docs location_searching\n@docs network_cell\n@docs network_wifi\n@docs nfc\n@docs screen_lock_landscape\n@docs screen_lock_portrait\n@docs screen_lock_rotation\n@docs screen_rotation\n@docs sd_storage\n@docs settings_system_daydream\n@docs signal_cellular_0_bar\n@docs signal_cellular_1_bar\n@docs signal_cellular_2_bar\n@docs signal_cellular_3_bar\n@docs signal_cellular_4_bar\n@docs signal_cellular_connected_no_internet_0_bar\n@docs signal_cellular_connected_no_internet_1_bar\n@docs signal_cellular_connected_no_internet_2_bar\n@docs signal_cellular_connected_no_internet_3_bar\n@docs signal_cellular_connected_no_internet_4_bar\n@docs signal_cellular_no_sim\n@docs signal_cellular_null\n@docs signal_cellular_off\n@docs signal_wifi_0_bar\n@docs signal_wifi_1_bar\n@docs signal_wifi_1_bar_lock\n@docs signal_wifi_2_bar\n@docs signal_wifi_2_bar_lock\n@docs signal_wifi_3_bar\n@docs signal_wifi_3_bar_lock\n@docs signal_wifi_4_bar\n@docs signal_wifi_4_bar_lock\n@docs signal_wifi_off\n@docs signal_wifi_statusbar_1_bar\n@docs signal_wifi_statusbar_2_bar\n@docs signal_wifi_statusbar_3_bar\n@docs signal_wifi_statusbar_4_bar\n@docs signal_wifi_statusbar_connected_no_internet\n@docs signal_wifi_statusbar_connected_no_internet_1\n@docs signal_wifi_statusbar_connected_no_internet_2\n@docs signal_wifi_statusbar_connected_no_internet_3\n@docs signal_wifi_statusbar_connected_no_internet_4\n@docs signal_wifi_statusbar_not_connected\n@docs signal_wifi_statusbar_null\n@docs storage\n@docs usb\n@docs wallpaper\n@docs widgets\n@docs wifi_lock\n@docs wifi_tethering\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "access_alarm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "access_alarms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "access_time",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "add_alarm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airplanemode_active",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "airplanemode_inactive",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_20",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_50",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_60",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_80",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_90",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_alert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_20",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_50",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_60",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_80",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_90",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_charging_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_std",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "battery_unknown",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bluetooth_connected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bluetooth_disabled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "bluetooth_searching",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_auto",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_high",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_low",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "brightness_medium",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "data_usage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "developer_mode",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "devices",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "dvr",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gps_fixed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gps_not_fixed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "gps_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "graphic_eq",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "location_disabled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "location_searching",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "network_cell",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "network_wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "nfc",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "screen_lock_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "screen_lock_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "screen_lock_rotation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "screen_rotation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "sd_storage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "settings_system_daydream",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_0_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_connected_no_internet_0_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_connected_no_internet_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_connected_no_internet_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_connected_no_internet_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_connected_no_internet_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_no_sim",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_null",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_cellular_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_0_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_1_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_2_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_3_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_4_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_not_connected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "signal_wifi_statusbar_null",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "storage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "usb",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wallpaper",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "widgets",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wifi_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          },
          {
            "name": "wifi_tethering",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-random-extra",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Random.String",
        "comment": " List of String Generators\n\n# Simple Generators\n@docs string, englishWord, capitalizedEnglishWord\n\n# Random Length String Generators\n@docs rangeLengthString, rangeLengthEnglishWord, anyEnglishWord, anyCapitalizedEnglishWord, rangeLengthCapitalizedEnglishWord\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyCapitalizedEnglishWord",
            "comment": " Generate a random capitalized word with english characters of random length\nbetween 1 34.\nAside: 34 was picked as a maximum as \"supercalifragilisticexpialidocious\"\nis considered the longest commonly used word and is 34 character long.\nLonger words do occur, especially in scientific contexts. In which case, consider\nusing `rangeLengthEnglishWord` for more granular control.\n",
            "type": "Random.Generator String"
          },
          {
            "name": "anyEnglishWord",
            "comment": " Generate a random lowercase word with english characters of random length\nbetween 1 34.\nAside: 34 was picked as a maximum as \"supercalifragilisticexpialidocious\"\nis considered the longest commonly used word and is 34 character long.\nLonger words do occur, especially in scientific contexts. In which case, consider\nusing `rangeLengthEnglishWord` for more granular control.\n",
            "type": "Random.Generator String"
          },
          {
            "name": "capitalizedEnglishWord",
            "comment": " Generate a random capitalized word with english characters of a given length.\nNote: This just generates a random string using the letters in english, so there\nare no guarantees that the result be an actual english word.\n",
            "type": "Int -> Random.Generator String"
          },
          {
            "name": "englishWord",
            "comment": " Generate a random lowercase word with english characters of a given length.\nNote: This just generates a random string using the letters in english, so there\nare no guarantees that the result be an actual english word.\n",
            "type": "Int -> Random.Generator String"
          },
          {
            "name": "rangeLengthCapitalizedEnglishWord",
            "comment": " Generate a random capitalized word with english characters of random length\ngiven a minimum length and a maximum length.\n",
            "type": "Int -> Int -> Random.Generator String"
          },
          {
            "name": "rangeLengthEnglishWord",
            "comment": " Generate a random lowercase word with english characters of random length\ngiven a minimum length and maximum length.\n",
            "type": "Int -> Int -> Random.Generator String"
          },
          {
            "name": "rangeLengthString",
            "comment": " Generates a random string of random length given the minimum length\nand maximum length and a given character generator.\n",
            "type": "Int -> Int -> Random.Generator Char -> Random.Generator String"
          },
          {
            "name": "string",
            "comment": " Generate a random string of a given length with a given character generator\n\n    fiveLetterEnglishWord = string 5 english\n",
            "type": "Int -> Random.Generator Char -> Random.Generator String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Set",
        "comment": " List of Random Set Generators\n\n# Generators\n@docs empty, singleton, set, notInSet\n\n# Combinators\n@docs select, selectWithDefault\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " Generator that always returns the empty set\n",
            "type": "Random.Generator (Set.Set comparable)"
          },
          {
            "name": "notInSet",
            "comment": " Filter a generator of all values not in a given set.\n",
            "type": "Set.Set comparable -> Random.Generator comparable -> Random.Generator comparable"
          },
          {
            "name": "select",
            "comment": " Select a value from a set uniformly at random, or `Nothing` for an empty set.\nAnalogous to `Random.Extra.select` but with sets.\n",
            "type": "Set.Set comparable -> Random.Generator (Maybe.Maybe comparable)"
          },
          {
            "name": "selectWithDefault",
            "comment": " Select a value from a set uniformly at random, with a default.\nAnalogous to `Random.Extra.selectWithDefault` but with sets.\n",
            "type": "comparable -> Set.Set comparable -> Random.Generator comparable"
          },
          {
            "name": "set",
            "comment": " Generate a set of at most the given size from a generator.\n\nThe size of a generated set is limited both by the integer provided and the\nnumber of unique values the generator can produce. It is very likely, but not\nguaranteed, that generated sets will be as big as the smaller of these two limits.\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator (Set.Set comparable)"
          },
          {
            "name": "singleton",
            "comment": " Generator that creates a singleton set from a generator\n",
            "type": "Random.Generator comparable -> Random.Generator (Set.Set comparable)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Maybe",
        "comment": " List of Maybe Generators\n\n# Generators\n@docs maybe, withDefault, withDefaultGenerator\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "maybe",
            "comment": " Generate a Maybe from a generator. Will generate Nothings 50% of the time.\n",
            "type": "Random.Generator a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "withDefault",
            "comment": " Generate values from a maybe generator or a default value.\n",
            "type": "a -> Random.Generator (Maybe.Maybe a) -> Random.Generator a"
          },
          {
            "name": "withDefaultGenerator",
            "comment": " Generate values from a maybe generator or a default generator.\n",
            "type": "Random.Generator a -> Random.Generator (Maybe.Maybe a) -> Random.Generator a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.List",
        "comment": " List of List Generators\n\n# Generators\n@docs emptyList, rangeLengthList\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "emptyList",
            "comment": " Generator that always returns the empty list.\n",
            "type": "Random.Generator (List a)"
          },
          {
            "name": "rangeLengthList",
            "comment": " Generate a random list of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (List a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Order",
        "comment": " List of Order Generators\n\n# Generators\n@docs order\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "order",
            "comment": " Generate a random order with equal probability.\n",
            "type": "Random.Generator Basics.Order"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Result",
        "comment": " List of Result Generators\n\n# Generators\n@docs ok, error, result\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "error",
            "comment": " Generate an error result from a random generator of errors\n",
            "type": "Random.Generator error -> Random.Generator (Result.Result error value)"
          },
          {
            "name": "ok",
            "comment": " Generate an ok result from a random generator of values\n",
            "type": "Random.Generator value -> Random.Generator (Result.Result error value)"
          },
          {
            "name": "result",
            "comment": " Generate an ok result or an error result with 50-50 chance\n\nThis is simply implemented as follows:\n\n    result errorGenerator okGenerator =\n      frequency\n        [ (1, error errorGenerator)\n        , (1, ok okGenerator)\n        ] (ok okGenerator)\n\nIf you want to generate results with a different frequency, tweak those\nnumbers to your bidding in your own custom generators.\n",
            "type": "Random.Generator error -> Random.Generator value -> Random.Generator (Result.Result error value)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Char",
        "comment": " List of Char Generators\n\n# Basic Generators\n@docs char, lowerCaseLatin, upperCaseLatin, latin, english, ascii, unicode\n\n# Unicode Generators (UTF-8)\n@docs basicLatin, latin1Supplement, latinExtendedA, latinExtendedB, ipaExtensions, spacingModifier, combiningDiacriticalMarks, greekAndCoptic, cyrillic, cyrillicSupplement, armenian, hebrew, arabic, syriac, arabicSupplement, thaana, nko, samaritan, mandaic, arabicExtendedA, devanagari, bengali, gurmukhi, gujarati, oriya, tamil, telugu, kannada, malayalam, sinhala, thai, lao, tibetan, myanmar, georgian, hangulJamo, ethiopic, ethiopicSupplement, cherokee, unifiedCanadianAboriginalSyllabic, ogham, runic, tagalog, hanunoo, buhid, tagbanwa, khmer, mongolian, unifiedCanadianAboriginalSyllabicExtended, limbu, taiLe, newTaiLue, khmerSymbol, buginese, taiTham, balinese, sundanese, batak, lepcha, olChiki, sundaneseSupplement, vedicExtensions, phoneticExtensions, phoneticExtensionsSupplement, combiningDiacriticalMarksSupplement, latinExtendedAdditional, greekExtended, generalPunctuation, superscriptOrSubscript, currencySymbol, combiningDiacriticalMarksForSymbols, letterlikeSymbol, numberForm, arrow, mathematicalOperator, miscellaneousTechnical, controlPicture, opticalCharacterRecognition, enclosedAlphanumeric, boxDrawing, blockElement, geometricShape, miscellaneousSymbol, dingbat, miscellaneousMathematicalSymbolA, supplementalArrowA, braillePattern, supplementalArrowB, miscellaneousMathematicalSymbolB, supplementalMathematicalOperator, miscellaneousSymbolOrArrow, glagolitic, latinExtendedC, coptic, georgianSupplement, tifinagh, ethiopicExtended, cyrillicExtendedA, supplementalPunctuation, cjkRadicalSupplement, kangxiRadical, ideographicDescription, cjkSymbolOrPunctuation, hiragana, katakana, bopomofo, hangulCompatibilityJamo, kanbun, bopomofoExtended, cjkStroke, katakanaPhoneticExtension, enclosedCJKLetterOrMonth, cjkCompatibility, cjkUnifiedIdeographExtensionA, yijingHexagramSymbol, cjkUnifiedIdeograph, yiSyllable, yiRadical, lisu, vai, cyrillicExtendedB, bamum, modifierToneLetter, latinExtendedD, sylotiNagri, commonIndicNumberForm, phagsPa, saurashtra, devanagariExtended, kayahLi, rejang, hangulJamoExtendedA, javanese, cham, myanmarExtendedA, taiViet, meeteiMayekExtension, ethiopicExtendedA, meeteiMayek, hangulSyllable, hangulJamoExtendedB, highSurrogate, highPrivateUseSurrogate, lowSurrogate, privateUseArea, cjkCompatibilityIdeograph, alphabeticPresentationForm, arabicPresentationFormA, variationSelector, verticalForm, combiningHalfMark, cjkCompatibilityForm, smallFormVariant, arabicPresentationFormB, halfwidthOrFullwidthForm, special, linearBSyllable, linearBIdeogram, aegeanNumber, ancientGreekNumber, ancientSymbol, phaistosDisc, lycian, carian, oldItalic, gothic, ugaritic, oldPersian, deseret, shavian, osmanya, cypriotSyllable, imperialAramaic, phoenician, lydian, meroiticHieroglyph, meroiticCursive, kharoshthi, oldSouthArabian, avestan, inscriptionalParthian, inscriptionalPahlavi, oldTurkic, rumiNumericalSymbol, brahmi, kaithi, soraSompeng, chakma, sharada, takri, cuneiform, cuneiformNumberOrPunctuation, egyptianHieroglyph, bamumSupplement, miao, kanaSupplement, byzantineMusicalSymbol, musicalSymbol, ancientGreekMusicalNotationSymbol, taiXuanJingSymbol, countingRodNumeral, mathematicalAlphanumericSymbol, arabicMathematicalAlphabeticSymbol, mahjongTile, dominoTile, playingCard, enclosedAlphanumericSupplement, enclosedIdeographicSupplement, miscellaneousSymbolOrPictograph, emoticon, transportOrMapSymbol, alchemicalSymbol, cjkUnifiedIdeographExtensionB, cjkUnifiedIdeographExtensionC, cjkUnifiedIdeographExtensionD, cjkCompatibilityIdeographSupplement, tag, variationSelectorSupplement, supplementaryPrivateUseAreaA, supplementaryPrivateUseAreaB\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "aegeanNumber",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "alchemicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "alphabeticPresentationForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekMusicalNotationSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekNumber",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicMathematicalAlphabeticSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "armenian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arrow",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ascii",
            "comment": " Generate a random ASCII Character\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "avestan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "balinese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamum",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamumSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "basicLatin",
            "comment": " UTF-8\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "batak",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bengali",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "blockElement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofoExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "boxDrawing",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "brahmi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "braillePattern",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "buginese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "buhid",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "byzantineMusicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "carian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "chakma",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "char",
            "comment": " Generate a random character within a certain keyCode range\n\n    lowerCaseLetter = char 65 90\n",
            "type": "Int -> Int -> Random.Generator Char"
          },
          {
            "name": "cherokee",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibility",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeographSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkRadicalSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkStroke",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkSymbolOrPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionC",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionD",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarks",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksForSymbols",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningHalfMark",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "commonIndicNumberForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "controlPicture",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "coptic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "countingRodNumeral",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiform",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiformNumberOrPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "currencySymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cypriotSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "deseret",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagari",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagariExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "dingbat",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "dominoTile",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "egyptianHieroglyph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "emoticon",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumeric",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumericSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedCJKLetterOrMonth",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedIdeographicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "english",
            "comment": " Generate a random English Letter (alias for `latin`)\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "generalPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "geometricShape",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgianSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "glagolitic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gothic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekAndCoptic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gujarati",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gurmukhi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "halfwidthOrFullwidthForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulCompatibilityJamo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hanunoo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hebrew",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "highPrivateUseSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "highSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hiragana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ideographicDescription",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "imperialAramaic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalPahlavi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalParthian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ipaExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "javanese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kaithi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanaSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanbun",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kangxiRadical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kannada",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakanaPhoneticExtension",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kayahLi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kharoshthi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmer",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmerSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lao",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin",
            "comment": " Generate a random Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin1Supplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedAdditional",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedC",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedD",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lepcha",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "letterlikeSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "limbu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBIdeogram",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lisu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowerCaseLatin",
            "comment": " Generate a random lower-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "lycian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lydian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mahjongTile",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "malayalam",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mandaic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalAlphanumericSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalOperator",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayek",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayekExtension",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticCursive",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticHieroglyph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miao",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrArrow",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrPictograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousTechnical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "modifierToneLetter",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mongolian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "musicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmar",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmarExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "newTaiLue",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "nko",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "numberForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ogham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "olChiki",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldItalic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldPersian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldSouthArabian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldTurkic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "opticalCharacterRecognition",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oriya",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "osmanya",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phagsPa",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phaistosDisc",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoenician",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensionsSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "playingCard",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "privateUseArea",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "rejang",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "rumiNumericalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "runic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "samaritan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "saurashtra",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sharada",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "shavian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sinhala",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "smallFormVariant",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "soraSompeng",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "spacingModifier",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "special",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundanese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundaneseSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "superscriptOrSubscript",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalMathematicalOperator",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sylotiNagri",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "syriac",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tag",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagalog",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagbanwa",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiLe",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiTham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiViet",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiXuanJingSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "takri",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tamil",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "telugu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "thaana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "thai",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tibetan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tifinagh",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "transportOrMapSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ugaritic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "unicode",
            "comment": " Generate a random Character in the valid unicode range.\nNote: This can produce garbage values as unicode doesn't use all valid values.\nTo test for specific languages and character sets, use the appropriate one\nfrom the list.\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabicExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "upperCaseLatin",
            "comment": " Generate a random upper-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "vai",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelector",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelectorSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "vedicExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "verticalForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiRadical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yijingHexagramSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Array",
        "comment": " List of Array Generators\n\n# Generate an Array\n@docs array, emptyArray, rangeLengthArray\n\n# Random Operations on an Array\n@docs sample, choose, shuffle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Generate a random array of given size given a random generator\n\n    randomLength5IntArray = array 5 (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "choose",
            "comment": " Sample without replacement: produce a randomly selected element of the\narray, and the array with that element omitted (shifting all later elements\ndown).\n",
            "type": "Array.Array a -> Random.Generator ( Maybe.Maybe a, Array.Array a )"
          },
          {
            "name": "emptyArray",
            "comment": " Generator that always generates the empty array\n",
            "type": "Random.Generator (Array.Array a)"
          },
          {
            "name": "rangeLengthArray",
            "comment": " Generate a random array of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "sample",
            "comment": " Sample with replacement: produce a randomly selected element of the\narray, or `Nothing` for an empty array. Takes O(1) time.\n",
            "type": "Array.Array a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "shuffle",
            "comment": " Shuffle the array using the Fisher-Yates algorithm. Takes O(_n_ log _n_)\ntime and O(_n_) additional space.\n",
            "type": "Array.Array a -> Random.Generator (Array.Array a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Date",
        "comment": " List of date Generators\n\n# Generators\n@docs date, day, month, year, hour, hour24, hour12, minute, second\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "date",
            "comment": " Generate a random date given a start date and an end date.\n",
            "type": "Date.Date -> Date.Date -> Random.Generator Date.Date"
          },
          {
            "name": "day",
            "comment": " Generate a random day of the week.\n",
            "type": "Random.Generator Date.Day"
          },
          {
            "name": "hour",
            "comment": " Generate a random hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour12",
            "comment": " Generate a random 12-hour day hour (random int between 0 and 11 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour24",
            "comment": " Generate a random 24-hour day hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "minute",
            "comment": " Generate a random minute (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "month",
            "comment": " Generate a random month of the year.\n",
            "type": "Random.Generator Date.Month"
          },
          {
            "name": "second",
            "comment": " Generate a random second (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "year",
            "comment": " Generate a random year given a start year and end year (alias for `int`)\n",
            "type": "Int -> Int -> Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Dict",
        "comment": " List of Dict Generators\n\n# Generators\n@docs dict, emptyDict, rangeLengthDict\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Generate a random dict with given length, key generator, and value generator\n\n    randomLength10StringIntDict = dict 10 (englishWord 10) (int 0 100)\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          },
          {
            "name": "emptyDict",
            "comment": " Generator that always generates the empty dict\n",
            "type": "Random.Generator (Dict.Dict comparable value)"
          },
          {
            "name": "rangeLengthDict",
            "comment": " Generate a random dict of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Int",
        "comment": " List of Int Generators\n\n# Generators\n@docs anyInt, positiveInt, negativeInt, intGreaterThan, intLessThan\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyInt",
            "comment": " Generator that generates any int that can be generate by the\nrandom generator algorithm.\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "intGreaterThan",
            "comment": " Generator that generates an int greater than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "intLessThan",
            "comment": " Generator that generates an int less than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "negativeInt",
            "comment": " Generator that generates a negative int\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "positiveInt",
            "comment": " Generator that generates a positive int\n",
            "type": "Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Float",
        "comment": " List of Float Generators\n\n# Generators\n@docs anyFloat, positiveFloat, negativeFloat, floatGreaterThan, floatLessThan, probability, negativeProbability, unitRange\n\n# Gaussian Generators\n@docs normal, standardNormal, gaussian\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyFloat",
            "comment": " Generator that generates any float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "floatGreaterThan",
            "comment": " Generator that generates a float greater than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "floatLessThan",
            "comment": " Generator that generates a float less than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "gaussian",
            "comment": " Alias for `normal`.\n",
            "type": "Float -> Float -> Float -> Random.Generator Float"
          },
          {
            "name": "negativeFloat",
            "comment": " Generator that generates any negative float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "negativeProbability",
            "comment": " Generator that generates a float between -1 and 0\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "normal",
            "comment": " Create a generator of floats that is normally distributed with\ngiven minimum, maximum, and standard deviation.\n",
            "type": "Float -> Float -> Float -> Random.Generator Float"
          },
          {
            "name": "positiveFloat",
            "comment": " Generator that generates any positive float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "probability",
            "comment": " Generator that generates a float between 0 and 1\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "standardNormal",
            "comment": " Generator that follows a standard normal distribution (as opposed to\na uniform distribution)\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "unitRange",
            "comment": " Generator that generates a float between - 1 and 1\n",
            "type": "Random.Generator Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Extra",
        "comment": " Module providing extra functionality to the core Random module.\n\n# Constant Generators\n@docs constant\n\n# Generator Transformers\n@docs flattenList\n\n# Select\n@docs select, selectWithDefault, frequency, merge\n\n# Maps\nFor `map` and `mapN` up through N=5, use the core library.\n@docs map6, andMap, mapConstraint\n\n# Flat Maps\n@docs flatMap, flatMap2, flatMap3, flatMap4, flatMap5, flatMap6\n\n# Zips\n@docs zip, zip3, zip4, zip5, zip6\n\n# Reducers\n@docs reduce, fold\n\n# Filtering Generators\n@docs keepIf, dropIf\n\n# Functions that generate random values from Generators\n@docs generateN, quickGenerate, cappedGenerateUntil, generateIterativelyUntil, generateIterativelySuchThat, generateUntil, generateSuchThat\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Apply a generator of functions to a generator of values.\nUseful for chaining generators.\n",
            "type": "Random.Generator (a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "cappedGenerateUntil",
            "comment": " Generate iteratively a list of values from a generator until either\nthe given maxlength is reached or the predicate is satisfied.\n\n    cappedGenerateUntil maxLength predicate generator seed\n",
            "type": "Int -> (a -> Bool) -> Random.Generator a -> Random.Seed -> List a"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always returns the same value.\n",
            "type": "a -> Random.Generator a"
          },
          {
            "name": "dropIf",
            "comment": " Convert a generator into a generator that only generates values\nthat do not satisfy a given predicate.\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "flatMap",
            "comment": " ",
            "type": "(a -> Random.Generator b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "flatMap2",
            "comment": " ",
            "type": "(a -> b -> Random.Generator c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "flatMap3",
            "comment": " ",
            "type": "(a -> b -> c -> Random.Generator d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "flatMap4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> Random.Generator e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "flatMap5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> Random.Generator f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "flatMap6",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f -> Random.Generator g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "flattenList",
            "comment": " Turn a list of generators into a generator of lists.\n",
            "type": "List (Random.Generator a) -> Random.Generator (List a)"
          },
          {
            "name": "fold",
            "comment": " Alias for reduce.\n",
            "type": "(a -> b -> b) -> b -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "frequency",
            "comment": " Create a generator that chooses a generator from a tuple of generators\nbased on the provided likelihood. The likelihood of a given generator being\nchosen is its likelihood divided by the sum of all likelihood. A default\ngenerator must be provided in the case that the list is empty or that the\nsum of the likelihoods is 0. Note that the absolute values of the likelihoods\nis always taken.\n",
            "type": "List ( Float, Random.Generator a ) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "generateIterativelySuchThat",
            "comment": " Generate iteratively a list of values from a generator parametrized by\nthe value of the iterator until either the given maxlength is reached or\nthe predicate ceases to be satisfied.\n\n    generateIterativelySuchThat maxLength predicate constructor seed\n",
            "type": "Int -> (a -> Bool) -> (Int -> Random.Generator a) -> Random.Seed -> List a"
          },
          {
            "name": "generateIterativelyUntil",
            "comment": " Generate iteratively a list of values from a generator parametrized by\nthe value of the iterator until either the given maxlength is reached or\nthe predicate is satisfied.\n\n    generateIterativelyUntil maxLength predicate constructor seed\n",
            "type": "Int -> (a -> Bool) -> (Int -> Random.Generator a) -> Random.Seed -> List a"
          },
          {
            "name": "generateN",
            "comment": " Generate n values from a generator.\n",
            "type": "Int -> Random.Generator a -> Random.Seed -> List a"
          },
          {
            "name": "generateSuchThat",
            "comment": " Generate a value from a generator that satisfies a given predicate\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Seed -> ( a, Random.Seed )"
          },
          {
            "name": "generateUntil",
            "comment": " Generate a list of values from a generator until the given predicate\nis satisfied\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Seed -> List a"
          },
          {
            "name": "keepIf",
            "comment": " Convert a generator into a generator that only generates values\nthat satisfy a given predicate.\nNote that if the predicate is unsatisfiable, the generator will not terminate.\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "map6",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f -> g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "mapConstraint",
            "comment": " Apply a constraint onto a generator and returns both the input to\nthe constraint and the result of applying the constaint.\n",
            "type": "(a -> b) -> Random.Generator a -> Random.Generator ( a, b )"
          },
          {
            "name": "merge",
            "comment": " Choose between two generators with a 50-50 chance.\nUseful for merging two generators that cover different areas of the same type.\n",
            "type": "Random.Generator a -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "quickGenerate",
            "comment": " Quickly generate a value from a generator disregarding seeds.\n",
            "type": "Random.Generator a -> a"
          },
          {
            "name": "reduce",
            "comment": " Reduce a generator using a reducer and an initial value.\nNote that the initial value is always passed to the function;\nnot the previously generator value.\n",
            "type": "(a -> b -> b) -> b -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "select",
            "comment": " Generator that randomly selects an element from a list.\n",
            "type": "List a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "selectWithDefault",
            "comment": " Generator that randomly selects an element from a list with a default value\n(in case you pass in an empty list).\n",
            "type": "a -> List a -> Random.Generator a"
          },
          {
            "name": "zip",
            "comment": " ",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " ",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " ",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " ",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator ( a, b, c, d, e )"
          },
          {
            "name": "zip6",
            "comment": " ",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator ( a, b, c, d, e, f )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Color",
        "comment": " List of Color Generators\n\n# Generators\n@docs rgb, rgba, hsl, hsla, greyscale, grayscale, red, green, blue\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "blue",
            "comment": " Generate a random shade of blue.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Alias for greyscale\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "green",
            "comment": " Generate a random shade of green.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Generate a random shade of grey\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Generate a random non-transparent color by random HSL values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Generate a random transparent color by random HSLA values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "red",
            "comment": " Generate a random shade of red.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Generate a random non-transparent color by random RGB values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Generate a random transparent color by random RGBA values.\n",
            "type": "Random.Generator Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-test",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Test.Runner",
        "comment": " A collection of functions used by authors of test runners. To run your\nown tests, you should use these runners; see the `README` for more information.\n\n## Runner\n\n@docs Runner, fromTest\n\n## Runnable\n\n@docs Runnable, run\n\n## Formatting\n\n@docs formatLabels\n",
        "aliases": [],
        "types": [
          {
            "name": "Runnable",
            "comment": " An unevaluated test. Run it with [`run`](#run) to evaluate it into a\nlist of `Expectation`s.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Runner",
            "comment": " A structured test runner, incorporating:\n\n* The expectations to run\n* The hierarchy of description strings that describe the results\n",
            "args": [],
            "cases": [
              [
                "Runnable",
                [
                  "Test.Runner.Runnable"
                ]
              ],
              [
                "Labeled",
                [
                  "String",
                  "Test.Runner.Runner"
                ]
              ],
              [
                "Batch",
                [
                  "List Test.Runner.Runner"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "formatLabels",
            "comment": " A standard way to format descriptiona and test labels, to keep things\nconsistent across test runner implementations.\n\nThe HTML, Node, String, and Log runners all use this.\n\nWhat it does:\n\n* drop any labels that are empty strings\n* format the first label differently from the others\n* reverse the resulting list\n\n    [ \"the actual test that failed\"\n    , \"nested description failure\"\n    , \"top-level description failure\"\n    ]\n        |> formatLabels ((++) \"↓ \") ((++) \"✗ \")\n\n    {-\n        [ \"↓ top-level description failure\"\n        , \"↓ nested description failure\"\n        , \"✗ the actual test that failed\"\n        ]\n    -}\n\n",
            "type": "(String -> format) -> (String -> format) -> List String -> List format"
          },
          {
            "name": "fromTest",
            "comment": " Convert a `Test` into a `Runner`.\n\nIn order to run any fuzz tests that the `Test` may have, it requires a default run count as well\nas an initial `Random.Pcg.Seed`. `100` is a good run count. To obtain a good random seed, pass a\nrandom 32-bit integer to `Random.Pcg.initialSeed`. You can obtain such an integer by running\n`Math.floor(Math.random()*0xFFFFFFFF)` in Node. It's typically fine to hard-code this value into\nyour Elm code; it's easy and makes your tests reproducible.\n",
            "type": "Int -> Random.Pcg.Seed -> Test.Test -> Test.Runner.Runner"
          },
          {
            "name": "run",
            "comment": " Evaluate a [`Runnable`](#Runnable) to get a list of `Expectation`s.\n",
            "type": "Test.Runner.Runnable -> List Expect.Expectation"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Test",
        "comment": " A module containing functions for creating and managing tests.\n\n@docs Test, test\n\n## Organizing Tests\n\n@docs describe, concat, filter\n\n## Fuzz Testing\n\n@docs fuzz, fuzz2, fuzz3, fuzz4, fuzz5, fuzzWith, FuzzOptions\n",
        "aliases": [
          {
            "name": "FuzzOptions",
            "comment": " Options [`fuzzWith`](#fuzzWith) accepts. Currently there is only one but this\nAPI is designed so that it can accept more in the future.\n\n### `runs`\n\nThe number of times to run each fuzz test. (Default is 100.)\n\n    import Test exposing (fuzzWith)\n    import Fuzz exposing (list, int)\n    import Expect\n\n\n    fuzzWith { runs = 350 } (list int) \"List.length should always be positive\" <|\n        -- This anonymous function will be run 350 times, each time with a\n        -- randomly-generated fuzzList value. (It will always be a list of ints\n        -- because of (list int) above.)\n        \\fuzzList ->\n            fuzzList\n                |> List.length\n                |> Expect.atLeast 0\n",
            "args": [],
            "type": "{ runs : Int }"
          },
          {
            "name": "Test",
            "comment": " A test which has yet to be evaluated. When evaluated, it produces one\nor more [`Expectation`](../Expect#Expectation)s.\n\nSee [`test`](#test) and [`fuzz`](#fuzz) for some ways to create a `Test`.\n",
            "args": [],
            "type": "Test.Internal.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "concat",
            "comment": " Run each of the given tests.\n\n    concat [ testDecoder, testSorting ]\n",
            "type": "List Test.Test -> Test.Test"
          },
          {
            "name": "describe",
            "comment": " Apply a description to a list of tests.\n\n    import Test exposing (describe, test, fuzz)\n    import Fuzz expoing (int)\n    import Expect\n\n\n    describe \"List\"\n        [ describe \"reverse\"\n            [ test \"has no effect on an empty list\" <|\n                \\() ->\n                    List.reverse []\n                        |> Expect.toEqual []\n            , fuzz int \"has no effect on a one-item list\" <|\n                \\num ->\n                     List.reverse [ num ]\n                        |> Expect.toEqual [ num ]\n            ]\n        ]\n",
            "type": "String -> List Test.Test -> Test.Test"
          },
          {
            "name": "filter",
            "comment": " Remove any test unless its description satisfies the given predicate\nfunction. Nested descriptions added with [`describe`](#describe) are not considered.\n\n    describe \"String.reverse\"\n        [ test \"has no effect on a palindrome\" testGoesHere\n        , test \"reverses a known string\" anotherTest\n        , fuzz string \"restores the original string if you run it again\" oneMore\n        ]\n            |> Test.filter (String.contains \"original\")\n\n    -- only runs the final test\n\nYou can use this to focus on a specific test or two, silencing the failures of\ntests you don't want to work on yet, and then remove the call to `Test.filter`\nafter you're done working on the tests.\n",
            "type": "(String -> Bool) -> Test.Test -> Test.Test"
          },
          {
            "name": "fuzz",
            "comment": " Take a function that produces a test, and calls it several (usually 100) times, using a randomly-generated input\nfrom a [`Fuzzer`](http://package.elm-lang.org/packages/elm-community/elm-test/latest/Fuzz) each time. This allows you to\ntest that a property that should always be true is indeed true under a wide variety of conditions. The function also\ntakes a string describing the test.\n\nThese are called \"[fuzz tests](https://en.wikipedia.org/wiki/Fuzz_testing)\" because of the randomness.\nYou may find them elsewhere called [property-based tests](http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html),\n[generative tests](http://www.pivotaltracker.com/community/tracker-blog/generative-testing), or\n[QuickCheck-style tests](https://en.wikipedia.org/wiki/QuickCheck).\n\n    import Test exposing (fuzz)\n    import Fuzz exposing (list, int)\n    import Expect\n\n\n    fuzz (list int) \"List.length should always be positive\" <|\n        -- This anonymous function will be run 100 times, each time with a\n        -- randomly-generated fuzzList value.\n        \\fuzzList ->\n            fuzzList\n                |> List.length\n                |> Expect.atLeast 0\n",
            "type": "Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz2",
            "comment": " Run a [fuzz test](#fuzz) using two random inputs.\n\nThis is a convenicence function that lets you skip calling [`Fuzz.tuple`](../Fuzz#tuple).\n\nSee [`fuzzWith`](#fuzzWith) for an example of writing this in tuple style.\n\n    import Test exposing (fuzz2)\n    import Fuzz exposing (list, int)\n\n\n    fuzz2 (list int) int \"List.reverse never influences List.member\" <|\n        \\nums target ->\n            List.member target (List.reverse nums)\n                |> Expect.toEqual (List.member target nums)\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> String -> (a -> b -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz3",
            "comment": " Run a [fuzz test](#fuzz) using three random inputs.\n\nThis is a convenicence function that lets you skip calling [`Fuzz.tuple3`](../Fuzz#tuple3).\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> String -> (a -> b -> c -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz4",
            "comment": " Run a [fuzz test](#fuzz) using four random inputs.\n\nThis is a convenicence function that lets you skip calling [`Fuzz.tuple4`](../Fuzz#tuple4).\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> String -> (a -> b -> c -> d -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzz5",
            "comment": " Run a [fuzz test](#fuzz) using five random inputs.\n\nThis is a convenicence function that lets you skip calling [`Fuzz.tuple5`](../Fuzz#tuple5).\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> Fuzz.Fuzzer e -> String -> (a -> b -> c -> d -> e -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "fuzzWith",
            "comment": " Run a [`fuzz`](#fuzz) test with the given [`FuzzOptions`](#FuzzOptions).\n\nNote that there is no `fuzzWith2`, but you can always pass more fuzz values in\nusing [`Fuzz.tuple`](../Fuzz#tuple), [`Fuzz.tuple3`](../Fuzz#tuple3),\nfor example like this:\n\n    import Test exposing (fuzzWith)\n    import Fuzz exposing (tuple, list, int)\n    import Expect\n\n\n    fuzzWith { runs = 4200 }\n        (tuple ( list int, int ))\n        \"List.reverse never influences List.member\" <|\n            \\(nums, target) ->\n                List.member target (List.reverse nums)\n                    |> Expect.toEqual (List.member target nums)\n",
            "type": "Test.FuzzOptions -> Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> Test.Test"
          },
          {
            "name": "test",
            "comment": " Return a [`Test`](#Test) that evaluates a single\n[`Expectation`](../Expect#Expectation).\n\n    import Test exposing (fuzz)\n    import Expect\n\n\n    test \"the empty list has 0 length\" <|\n        \\() ->\n            List.length []\n                |> Expect.toEqual 0\n",
            "type": "String -> (() -> Expect.Expectation) -> Test.Test"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Expect",
        "comment": " A library to create `Expectation`s, which describe a claim to be tested.\n\n## Quick Reference\n\n* [`equal`](#equal) `(arg2 == arg1)`\n* [`notEqual`](#notEqual) `(arg2 /= arg1)`\n* [`lessThan`](#lessThan) `(arg2 < arg1)`\n* [`atMost`](#atMost) `(arg2 <= arg1)`\n* [`greaterThan`](#greaterThan) `(arg2 > arg1)`\n* [`atLeast`](#atLeast) `(arg2 >= arg1)`\n* [`true`](#true) `(arg == True)`\n* [`false`](#false) `(arg == False)`\n\n## Basic Expectations\n\n@docs Expectation, equal, notEqual\n\n## Comparisons\n\n@docs lessThan, atMost, greaterThan, atLeast\n\n## Booleans\n\n@docs true, false\n\n## Customizing\n\n@docs pass, fail, onFail, getFailure\n",
        "aliases": [
          {
            "name": "Expectation",
            "comment": " The result of a single test run: either a [`pass`](#pass) or a\n[`fail`](#fail).\n",
            "args": [],
            "type": "Test.Expectation.Expectation"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "atLeast",
            "comment": " Passes if the second argument is greater than or equal to the first.\n\n    Expect.atLeast -2 (List.length [])\n\n    -- Passes because (0 >= -2) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 >= 3) is False\n    List.length []\n        |> Expect.atLeast 3\n\n    {-\n\n    0\n    ╷\n    │ Expect.atLeast\n    ╵\n    3\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "atMost",
            "comment": " Passes if the second argument is less than or equal to the first.\n\n    Expect.atMost 1 (List.length [])\n\n    -- Passes because (0 <= 1) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 <= -3) is False\n    List.length []\n        |> Expect.atMost -3\n\n    {-\n\n    0\n    ╷\n    │ Expect.atMost\n    ╵\n    -3\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "equal",
            "comment": " Passes if the arguments are equal.\n\n    Expect.equal 0 (List.length [])\n\n    -- Passes because (0 == 0) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because the expected value didn't split the space in \"Betty Botter\"\n    String.split \" \" \"Betty Botter bought some butter\"\n        |> Expect.equal [ \"Betty Botter\", \"bought\", \"some\", \"butter\" ]\n\n    {-\n\n    [ \"Betty\", \"Botter\", \"bought\", \"some\", \"butter\" ]\n    ╷\n    │ Expect.equal\n    ╵\n    [ \"Betty Botter\", \"bought\", \"some\", \"butter\" ]\n\n    -}\n",
            "type": "a -> a -> Expect.Expectation"
          },
          {
            "name": "fail",
            "comment": " Fails with the given message.\n\n    import Json.Decode exposing (decodeString, int)\n    import Test exposing (test)\n    import Expect\n\n\n    test \"Json.Decode.int can decode the number 42.\" <|\n        \\() ->\n            case decodeString int \"42\" of\n                Ok _ ->\n                    Expect.pass\n\n                Err err ->\n                    Expect.fail err\n",
            "type": "String -> Expect.Expectation"
          },
          {
            "name": "false",
            "comment": " Passes if the argument is 'False', and otherwise fails with the given message.\n\n    Expect.false \"Expected the list not to be empty.\" (List.isEmpty [ 42 ])\n\n    -- Passes because (List.isEmpty [ 42 ]) is False\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (List.isEmpty []) is True\n    List.isEmpty []\n        |> Expect.false \"Expected the list not to be empty.\"\n\n    {-\n\n    Expected the list not to be empty.\n\n    -}\n",
            "type": "String -> Bool -> Expect.Expectation"
          },
          {
            "name": "getFailure",
            "comment": " Return `Nothing` if the given [`Expectation`](#Expectation) is a [`pass`](#pass).\n\nIf it is a [`fail`](#fail), return a record containing the failure message,\nalong with the given inputs if it was a fuzz test. (If no inputs were involved,\nthe record's `given` field will be `\"\"`).\n\nFor example, if a fuzz test generates random integers, this might return\n`{ message = \"it was supposed to be positive\", given = \"-1\" }`\n\n    getFailure (Expect.fail \"this failed\")\n    -- Just { message = \"this failed\", given = \"\" }\n\n    getFailure (Expect.pass)\n    -- Nothing\n",
            "type": "Expect.Expectation -> Maybe.Maybe { given : String, message : String }"
          },
          {
            "name": "greaterThan",
            "comment": " Passes if the second argument is greater than the first.\n\n    Expect.greaterThan -2 List.length []\n\n    -- Passes because (0 > -2) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 > 1) is False\n    List.length []\n        |> Expect.greaterThan 1\n\n    {-\n\n    0\n    ╷\n    │ Expect.greaterThan\n    ╵\n    1\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "lessThan",
            "comment": " Passes if the second argument is less than the first.\n\n    Expect.lessThan 1 (List.length [])\n\n    -- Passes because (0 < 1) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 < -1) is False\n    List.length []\n        |> Expect.lessThan -1\n\n\n    {-\n\n    0\n    ╷\n    │ Expect.lessThan\n    ╵\n    -1\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "notEqual",
            "comment": " Passes if the arguments are not equal.\n\n    -- Passes because (11 /= 100) is True\n    90 + 10\n        |> Expect.notEqual 11\n\n\n    -- Fails because (100 /= 100) is False\n    90 + 10\n        |> Expect.notEqual 100\n\n    {-\n\n    100\n    ╷\n    │ Expect.notEqual\n    ╵\n    100\n\n    -}\n",
            "type": "a -> a -> Expect.Expectation"
          },
          {
            "name": "onFail",
            "comment": " If the given expectation fails, replace its failure message with a custom one.\n\n    \"something\"\n        |> Expect.equal \"something else\"\n        |> Expect.onFail \"thought those two strings would be the same\"\n",
            "type": "String -> Expect.Expectation -> Expect.Expectation"
          },
          {
            "name": "pass",
            "comment": " Always passes.\n\n    import Json.Decode exposing (decodeString, int)\n    import Test exposing (test)\n    import Expect\n\n\n    test \"Json.Decode.int can decode the number 42.\" <|\n        \\() ->\n            case decodeString int \"42\" of\n                Ok _ ->\n                    Expect.pass\n\n                Err err ->\n                    Expect.fail err\n",
            "type": "Expect.Expectation"
          },
          {
            "name": "true",
            "comment": " Passes if the argument is 'True', and otherwise fails with the given message.\n\n    Expect.true \"Expected the list to be empty.\" (List.isEmpty [])\n\n    -- Passes because (List.isEmpty []) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because List.isEmpty returns False, but we expect True.\n    List.isEmpty [ 42 ]\n        |> Expect.true \"Expected the list to be empty.\"\n\n    {-\n\n    Expected the list to be empty.\n\n    -}\n",
            "type": "String -> Bool -> Expect.Expectation"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Fuzz",
        "comment": " This is a library of *fuzzers* you can use to supply values to your fuzz\ntests. You can typically pick out which ones you need according to their types.\n\nA `Fuzzer a` knows how to create values of type `a` in two different ways. It\ncan create them randomly, so that your test's expectations are run against many\nvalues. Fuzzers will often generate edge cases likely to find bugs. If the\nfuzzer can make your test fail, it also knows how to \"shrink\" that failing input\ninto more minimal examples, some of which might also cause the tests to fail. In\nthis way, fuzzers can usually find the smallest or simplest input that\nreproduces a bug.\n\n## Common Fuzzers\n@docs bool, int, intRange, float, floatRange, percentage, string, maybe, result, list, array\n\n## Working with Fuzzers\n@docs Fuzzer, map, frequency, frequencyOrCrash\n\n## Tuple Fuzzers\nInstead of using a tuple, consider using `fuzzN`.\n@docs tuple, tuple3, tuple4, tuple5\n\n## Uncommon Fuzzers\n@docs custom, char, unit, order\n\n",
        "aliases": [
          {
            "name": "Fuzzer",
            "comment": " The representation of fuzzers is opaque. Conceptually, a `Fuzzer a`\nconsists of a way to randomly generate values of type `a`, and a way to shrink\nthose values.\n",
            "args": [
              "a"
            ],
            "type": "Fuzz.Internal.Fuzzer a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Given a fuzzer of a type, create a fuzzer of an array of that type.\nGenerates random arrays of varying length, favoring shorter arrays.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (Array.Array a)"
          },
          {
            "name": "bool",
            "comment": " A fuzzer for bool values.\n",
            "type": "Fuzz.Fuzzer Bool"
          },
          {
            "name": "char",
            "comment": " A fuzzer for char values. Generates random ascii chars disregarding the control\ncharacters.\n",
            "type": "Fuzz.Fuzzer Char"
          },
          {
            "name": "custom",
            "comment": " Build a custom `Fuzzer a` by providing a `Generator a` and a `Shrinker a`.\nGenerators are defined by [`mgold/elm-random-pcg`](http://package.elm-lang.org/packages/mgold/elm-random-pcg/latest),\nwhich is not core's Random module but has a compatible interface. Shrinkers are\ndefined in [`elm-community/shrink`](http://package.elm-lang.org/packages/elm-community/shrink/latest/).\n\nHere is an example for a record:\n\n    import Random.Pcg as Random\n    import Shrink\n\n    type alias Position =\n        { x : Int, y : Int }\n\n\n    position : Fuzzer Position\n    position =\n        Fuzz.custom\n            (Random.map2 Position (Random.int -100 100) (Random.int -100 100))\n            (\\{ x, y } -> Shrink.map Position (Shrink.int x) `Shrink.andMap` (Shrink.int y))\n\nHere is an example for a custom union type:\n\n    type Question\n        = Name String\n        | Age Int\n\n\n    question =\n        let\n            generator =\n                Random.bool `Random.andThen` (\\b ->\n                    if b then\n                        Random.map Name string.generator\n                    else\n                        Random.map Age (Random.int 0 120)\n                 )\n\n            shrinker question =\n                case question of\n                    Name n ->\n                        Shrink.string n |> Shrink.map Name\n\n                    Age i ->\n                        Shrink.int i |> Shrink.map Age\n        in\n            Fuzz.custom generator shrinker\n",
            "type": "Random.Pcg.Generator a -> Shrink.Shrinker a -> Fuzz.Fuzzer a"
          },
          {
            "name": "float",
            "comment": " A fuzzer for float values. It will never produce `NaN`, `Infinity`, or `-Infinity`.\n",
            "type": "Fuzz.Fuzzer Float"
          },
          {
            "name": "floatRange",
            "comment": " A fuzzer for float values within between a given minimum and maximum\nvalue, inclusive. Shrunken values will also be within the range.\n",
            "type": "Float -> Float -> Fuzz.Fuzzer Float"
          },
          {
            "name": "frequency",
            "comment": " Create a new fuzzer by providing a list of fuzzers to pick from. Each fuzzer\nis associated with a `Float` weight; larger numbers mean the fuzzer in more\nlikely to get picked from.\n\nFor example, to create a `Fuzzer` that has a 1/4 chance of generating an int\nbetween -1 and -100, and a 3/4 chance of generating one between 1 and 100,\nyou could do this:\n\n    Fuzz.frequency\n        [ ( 1, Fuzz.intRange -100 -1 )\n        , ( 3, Fuzz.intRange 1 100 )\n        ]\n\nThis function returns a `Result` because it can fail in a few ways:\n\n* If you provide an empy list of frequencies\n* If any of the weights are less than 0\n* If the weights sum to 0\n\nAny of these will lead to an `Err`, with a `String` explaining what went wrong.\n",
            "type": "List ( Float, Fuzz.Fuzzer a ) -> Result.Result String (Fuzz.Fuzzer a)"
          },
          {
            "name": "frequencyOrCrash",
            "comment": " Calls `frequency` and handles `Err` results by crashing with the given\nerror message.\n\nThis is useful in tests, where a crash will simply cause the test run to fail.\nThere is no danger to a production system there.\n",
            "type": "List ( Float, Fuzz.Fuzzer a ) -> Fuzz.Fuzzer a"
          },
          {
            "name": "int",
            "comment": " A fuzzer for int values.\n",
            "type": "Fuzz.Fuzzer Int"
          },
          {
            "name": "intRange",
            "comment": " A fuzzer for int values within between a given minimum and maximum value,\ninclusive. Shrunken values will also be within the range.\n",
            "type": "Int -> Int -> Fuzz.Fuzzer Int"
          },
          {
            "name": "list",
            "comment": " Given a fuzzer of a type, create a fuzzer of a list of that type.\nGenerates random lists of varying length, favoring shorter lists.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (List a)"
          },
          {
            "name": "map",
            "comment": " Map a function over a fuzzer. Due to technical limitations, the resulting\nfuzzer performs no shrinking.\n",
            "type": "(a -> b) -> Fuzz.Fuzzer a -> Fuzz.Fuzzer b"
          },
          {
            "name": "maybe",
            "comment": " Given a fuzzer of a type, create a fuzzer of a maybe for that type.\n",
            "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer (Maybe.Maybe a)"
          },
          {
            "name": "order",
            "comment": " A fuzzer for order values.\n",
            "type": "Fuzz.Fuzzer Basics.Order"
          },
          {
            "name": "percentage",
            "comment": " A fuzzer for percentage values. Generates random floats between `0.0` and\n`1.0`. It will test zero and one about 10% of the time each.\n",
            "type": "Fuzz.Fuzzer Float"
          },
          {
            "name": "result",
            "comment": " Given fuzzers for an error type and a success type, create a fuzzer for\na result.\n",
            "type": "Fuzz.Fuzzer error -> Fuzz.Fuzzer value -> Fuzz.Fuzzer (Result.Result error value)"
          },
          {
            "name": "string",
            "comment": " A fuzzer for string values. Generates random printable ascii strings whose\nlength is between 0 and 10.\n",
            "type": "Fuzz.Fuzzer String"
          },
          {
            "name": "tuple",
            "comment": " Turn a tuple of fuzzers into a fuzzer of tuples.\n",
            "type": "( Fuzz.Fuzzer a, Fuzz.Fuzzer b ) -> Fuzz.Fuzzer ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " Turn a 3-tuple of fuzzers into a fuzzer of 3-tuples.\n",
            "type": "( Fuzz.Fuzzer a, Fuzz.Fuzzer b, Fuzz.Fuzzer c ) -> Fuzz.Fuzzer ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " Turn a 4-tuple of fuzzers into a fuzzer of 4-tuples.\n",
            "type": "( Fuzz.Fuzzer a, Fuzz.Fuzzer b, Fuzz.Fuzzer c, Fuzz.Fuzzer d ) -> Fuzz.Fuzzer ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " Turn a 5-tuple of fuzzers into a fuzzer of 5-tuples.\n",
            "type": "( Fuzz.Fuzzer a , Fuzz.Fuzzer b , Fuzz.Fuzzer c , Fuzz.Fuzzer d , Fuzz.Fuzzer e ) -> Fuzz.Fuzzer ( a, b, c, d, e )"
          },
          {
            "name": "unit",
            "comment": " A fuzzer for the unit value. Unit is a type with only one value, commonly\nused as a placeholder.\n",
            "type": "Fuzz.Fuzzer ()"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/elm-webgl",
    "version": "3.0.3",
    "docs": [
      {
        "name": "WebGL",
        "comment": " The WebGL API is for high performance rendering. Definitely read about\n[how WebGL works](https://github.com/johnpmayer/elm-webgl/blob/master/README.md)\nand look at some examples before trying to do too much with just the\ndocumentation provided here.\n\n# Main Types\n@docs Texture, TextureFilter, Shader, Renderable, Error, Drawable\n\n# Entities\n@docs render, renderWithConfig\n\n# WebGL Html\n@docs toHtml, toHtmlWith, defaultConfiguration\n\n# WebGL API Calls\n@docs FunctionCall\n\n# WebGL API Types\n@docs Capability, BlendOperation, BlendMode, CompareMode, FaceMode, ZMode\n\n# Loading Textures\n@docs loadTexture, loadTextureWithFilter, textureSize\n\n# Unsafe Shader Creation (for library writers)\n@docs unsafeShader\n\n# Functions\n@docs computeAPICall, computeAPICalls, computeBlendModeString, computeBlendOperationString, computeCapabilityString, computeCompareModeString, computeFaceModeString, computeZModeString\n\n",
        "aliases": [],
        "types": [
          {
            "name": "BlendMode",
            "comment": " The `BlendMode` type allows you to define which blend mode to use.\n",
            "args": [],
            "cases": [
              [
                "Add",
                []
              ],
              [
                "Subtract",
                []
              ],
              [
                "ReverseSubtract",
                []
              ]
            ]
          },
          {
            "name": "BlendOperation",
            "comment": " The `BlendOperation` type allows you to define which blend operation to use.\n",
            "args": [],
            "cases": [
              [
                "Zero",
                []
              ],
              [
                "One",
                []
              ],
              [
                "SrcColor",
                []
              ],
              [
                "OneMinusSrcColor",
                []
              ],
              [
                "DstColor",
                []
              ],
              [
                "OneMinusDstColor",
                []
              ],
              [
                "SrcAlpha",
                []
              ],
              [
                "OneMinusSrcAlpha",
                []
              ],
              [
                "DstAlpha",
                []
              ],
              [
                "OneMinusDstAlpha",
                []
              ],
              [
                "ConstantColor",
                []
              ],
              [
                "OneMinusConstantColor",
                []
              ],
              [
                "ConstantAlpha",
                []
              ],
              [
                "OneMinusConstantAlpha",
                []
              ],
              [
                "SrcAlphaSaturate",
                []
              ]
            ]
          },
          {
            "name": "Capability",
            "comment": " The `Capability` type is used to enable/disable server-side GL capabilities.\n\n+ `Blend`: If enabled, blend the computed fragment color values\nwith the values in the color buffers.\n+ `CullFace`: If enabled, cull polygons based on their winding in window coordinates.\n+ `DepthTest`: If enabled, do depth comparisons and update the depth buffer.\n+ `Dither`: If enabled, dither color components.\nor indices before they are written to the color buffer.\n+ `PolygonOffsetFill`: If enabled, an offset is added\nto depth values of a polygon's fragments produced by rasterization.\n+ `SampleAlphaToCoverage`: If enabled, compute a temporary coverage value\nwhere each bit is determined by the alpha value at the corresponding sample location.\nThe temporary coverage value is then ANDed with the fragment coverage value.\n+ `SampleCoverage`: If enabled, the fragment's coverage\nis ANDed with the temporary coverage value.\n+ `ScissorTest`: If enabled, discard fragments that are outside the scissor rectangle\n+ `StencilTest`: If enabled, do stencil testing and update the stencil buffer.\n",
            "args": [],
            "cases": [
              [
                "Blend",
                []
              ],
              [
                "CullFace",
                []
              ],
              [
                "DepthTest",
                []
              ],
              [
                "Dither",
                []
              ],
              [
                "PolygonOffsetFill",
                []
              ],
              [
                "SampleAlphaToCoverage",
                []
              ],
              [
                "SampleCoverage",
                []
              ],
              [
                "ScissorTest",
                []
              ],
              [
                "StencilTest",
                []
              ]
            ]
          },
          {
            "name": "CompareMode",
            "comment": " The `CompareMode` type allows you to define how to compare values.\n",
            "args": [],
            "cases": [
              [
                "Never",
                []
              ],
              [
                "Always",
                []
              ],
              [
                "Less",
                []
              ],
              [
                "LessOrEqual",
                []
              ],
              [
                "Equal",
                []
              ],
              [
                "GreaterOrEqual",
                []
              ],
              [
                "Greater",
                []
              ],
              [
                "NotEqual",
                []
              ]
            ]
          },
          {
            "name": "Drawable",
            "comment": "\nWebGl has a number of rendering modes available. Each of the tagged union types\nmaps to a separate rendering mode.\n\nTriangles are the basic building blocks of a mesh. You can put them together\nto form any shape. Each corner of a triangle is called a *vertex* and contains a\nbunch of *attributes* that describe that particular corner. These attributes can\nbe things like position and color.\n\nSo when you create a `Triangle` you are really providing three sets of attributes\nthat describe the corners of a triangle.\n\nSee: [Library reference](https://msdn.microsoft.com/en-us/library/dn302395%28v=vs.85%29.aspx) for the description of each type.\n",
            "args": [
              "attributes"
            ],
            "cases": [
              [
                "Triangle",
                [
                  "List ( attributes, attributes, attributes )"
                ]
              ],
              [
                "Lines",
                [
                  "List ( attributes, attributes )"
                ]
              ],
              [
                "LineStrip",
                [
                  "List attributes"
                ]
              ],
              [
                "LineLoop",
                [
                  "List attributes"
                ]
              ],
              [
                "Points",
                [
                  "List attributes"
                ]
              ],
              [
                "TriangleFan",
                [
                  "List attributes"
                ]
              ],
              [
                "TriangleStrip",
                [
                  "List attributes"
                ]
              ]
            ]
          },
          {
            "name": "Error",
            "comment": " An error which occured in the graphics context ",
            "args": [],
            "cases": [
              [
                "Error",
                []
              ]
            ]
          },
          {
            "name": "FaceMode",
            "comment": " The `FaceMode` type defines which face of the stencil state is updated.\n",
            "args": [],
            "cases": [
              [
                "Front",
                []
              ],
              [
                "Back",
                []
              ],
              [
                "FrontAndBack",
                []
              ]
            ]
          },
          {
            "name": "FunctionCall",
            "comment": " The `FunctionCall` provides a typesafe way to call\nall pre-fragment operations and some special functions.\n\n`Enable(capability: Capability)`\n+ enable server-side GL capabilities\n\n`Disable(cap: Capability)`\n+ disable server-side GL capabilities\n\n`BlendColor(red: Float, green: Float, blue: Float, alpha: Float)`\n+ set the blend color\n\n`BlendEquation(mode: BlendMode)`\n+ specify the equation used for both the\nRGB blend equation and the Alpha blend equation\n+ `mode`: specifies how source and destination colors are combined\n\n`BlendEquationSeparate(modeRGB: BlendMode, modeAlpha: BlendMode)`\n+ set the RGB blend equation and the alpha blend equation separately\n+ `modeRGB`: specifies the RGB blend equation, how the red, green,\nand blue components of the source and destination colors are combined\n+ `modeAlpha`: specifies the alpha blend equation, how the alpha component\nof the source and destination colors are combined\n\n`BlendFunc(srcFactor: BlendMode, dstFactor: BlendMode)`\n+ specify pixel arithmetic\n+ `srcFactor`: Specifies how the red, green, blue,\nand alpha source blending factors are computed\n+ `dstFactor`: Specifies how the red, green, blue,\nand alpha destination blending factors are computed\n+ `SrcAlphaSaturate` should only be used for the srcFactor);\n+ Both values may not reference a `ConstantColor` value;\n\n`SampleCoverageFunc(value: Float, invert: Bool)`\n+ specify multisample coverage parameters\n+ `value`: Specify a single floating-point sample coverage value.\nThe value is clamped to the range 0 1 . The initial value is `1`\n+ `invert`: Specify a single boolean value representing\nif the coverage masks should be inverted. The initial value is `False`\n\n`StencilFunc(func: CompareMode, ref: Int, mask: Int)`\n+ set front and back function and reference value for stencil testing\n+ `func`: Specifies the test function.  The initial value is `Always`\n+ `ref`: Specifies the reference value for the stencil test. ref is\nclamped to the range 0 2 n - 1 , n is the number of bitplanes\nin the stencil buffer. The initial value is `0`.\n+ `mask`: Specifies a mask that is ANDed with both the reference value\nand the stored stencil value when the test is done.\nThe initial value is all `1`'s.\n\n`StencilFuncSeparate(face: FaceMode, func: CompareMode, ref: Int, mask: Int)`\n+ set front and/or back function and reference value for stencil testing\n+ `face`: Specifies whether front and/or back stencil state is updated\n+ see the description of `StencilFunc` for info about the other parameters\n\n`StencilOperation(fail: ZMode, zfail: ZMode, pass: ZMode)`\n+ set front and back stencil test actions\n+ `fail`: Specifies the action to take when the stencil test fails.\nThe initial value is `Keep`\n+ `zfail`: Specifies the stencil action when the stencil test passes,\nbut the depth test fails. The initial value is `Keep`\n+ `pass`: Specifies the stencil action when both the stencil test\nand the depth test pass, or when the stencil test passes and either\nthere is no depth buffer or depth testing is not enabled.\nThe initial value is `Keep`\n\n`StencilOperationSeparate(face: FaceMode, fail: ZMode, zfail: ZMode, pass: Zmode)`\n+ set front and/or back stencil test actions\n+ `face`: Specifies whether front and/or back stencil state is updated.\n+ See the description of `StencilOperation` for info about the other parameters.\n",
            "args": [],
            "cases": [
              [
                "Enable",
                [
                  "WebGL.Capability"
                ]
              ],
              [
                "Disable",
                [
                  "WebGL.Capability"
                ]
              ],
              [
                "BlendColor",
                [
                  "( Float, Float, Float, Float )"
                ]
              ],
              [
                "BlendEquation",
                [
                  "WebGL.BlendMode"
                ]
              ],
              [
                "BlendEquationSeparate",
                [
                  "( WebGL.BlendMode, WebGL.BlendMode )"
                ]
              ],
              [
                "BlendFunc",
                [
                  "( WebGL.BlendOperation, WebGL.BlendOperation )"
                ]
              ],
              [
                "DepthFunc",
                [
                  "WebGL.CompareMode"
                ]
              ],
              [
                "SampleCoverageFunc",
                [
                  "( Float, Bool )"
                ]
              ],
              [
                "StencilFunc",
                [
                  "( WebGL.CompareMode, Int, Int )"
                ]
              ],
              [
                "StencilFuncSeparate",
                [
                  "( WebGL.FaceMode, WebGL.CompareMode, Int, Int )"
                ]
              ],
              [
                "StencilOperation",
                [
                  "( WebGL.ZMode, WebGL.ZMode, WebGL.ZMode )"
                ]
              ],
              [
                "StencilOperationSeparate",
                [
                  "( WebGL.FaceMode, WebGL.ZMode, WebGL.ZMode, WebGL.ZMode )"
                ]
              ]
            ]
          },
          {
            "name": "Renderable",
            "comment": " Conceptually, an encapsulataion of the instructions to render something ",
            "args": [],
            "cases": [
              [
                "Renderable",
                []
              ]
            ]
          },
          {
            "name": "Shader",
            "comment": " Shader is a phantom data type. Don't instantiate it yourself. See below.\n",
            "args": [
              "attributes",
              "uniforms",
              "varyings"
            ],
            "cases": [
              [
                "Shader",
                []
              ]
            ]
          },
          {
            "name": "Texture",
            "comment": " A `Texture` loads a texture with linear filtering enabled. If you do not\nwant filtering, create a `RawTexture` with `loadTextureRaw`.\n",
            "args": [],
            "cases": [
              [
                "Texture",
                []
              ]
            ]
          },
          {
            "name": "TextureFilter",
            "comment": " Textures work in two ways when looking up a pixel value - Linear or Nearest\n",
            "args": [],
            "cases": [
              [
                "Linear",
                []
              ],
              [
                "Nearest",
                []
              ]
            ]
          },
          {
            "name": "ZMode",
            "comment": " The `ZMode` type allows you to define what to do with the stencil buffer value.\n\n+ `Keep`: Keeps the current value.\n+ `None`: Sets the stencil buffer value to 0.\n+ `Replace`: Sets the stencil buffer value to `ref`,\nSee `StencilFunc` for more information.\n+ `Increment`: Increments the current stencil buffer value.\nClamps to the maximum representable unsigned value.\n+ `Decrement`: Decrements the current stencil buffer value. Clamps to 0.\n+ `Invert`: Bitwise inverts the current stencil buffer value.\n+ `IncrementWrap`: Increments the current stencil buffer value.\nWraps stencil buffer value to zero when incrementing\nthe maximum representable unsigned value.\n+ `DecrementWrap`: Decrements the current stencil buffer value.\nWraps stencil buffer value to the maximum representable unsigned\nvalue when decrementing a stencil buffer value of zero.\n",
            "args": [],
            "cases": [
              [
                "Keep",
                []
              ],
              [
                "None",
                []
              ],
              [
                "Replace",
                []
              ],
              [
                "Increment",
                []
              ],
              [
                "Decrement",
                []
              ],
              [
                "Invert",
                []
              ],
              [
                "IncrementWrap",
                []
              ],
              [
                "DecrementWrap",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "computeAPICall",
            "comment": " ",
            "type": "WebGL.FunctionCall -> a -> b"
          },
          {
            "name": "computeAPICalls",
            "comment": " ",
            "type": "List WebGL.FunctionCall -> List (a -> b)"
          },
          {
            "name": "computeBlendModeString",
            "comment": " ",
            "type": "WebGL.BlendMode -> String"
          },
          {
            "name": "computeBlendOperationString",
            "comment": " ",
            "type": "WebGL.BlendOperation -> String"
          },
          {
            "name": "computeCapabilityString",
            "comment": " ",
            "type": "WebGL.Capability -> String"
          },
          {
            "name": "computeCompareModeString",
            "comment": " ",
            "type": "WebGL.CompareMode -> String"
          },
          {
            "name": "computeFaceModeString",
            "comment": " ",
            "type": "WebGL.FaceMode -> String"
          },
          {
            "name": "computeZModeString",
            "comment": " ",
            "type": "WebGL.ZMode -> String"
          },
          {
            "name": "defaultConfiguration",
            "comment": " Default configuration that is used as\nthe implicit configurations for `webgl`.\n",
            "type": "List WebGL.FunctionCall"
          },
          {
            "name": "loadTexture",
            "comment": " Loads a texture from the given url. PNG and JPEG are known to work, but\nother formats have not been as well-tested yet.\n",
            "type": "String -> Task.Task WebGL.Error WebGL.Texture"
          },
          {
            "name": "loadTextureWithFilter",
            "comment": " Loads a texture from the given url. PNG and JPEG are known to work, but\nother formats have not been as well-tested yet. Configurable filter.\n",
            "type": "WebGL.TextureFilter -> String -> Task.Task WebGL.Error WebGL.Texture"
          },
          {
            "name": "render",
            "comment": " Same as `renderWithConfig` but without using\ncustom per-render configurations.\n",
            "type": "WebGL.Shader attributes uniforms varyings -> WebGL.Shader {} uniforms varyings -> WebGL.Drawable attributes -> uniforms -> WebGL.Renderable"
          },
          {
            "name": "renderWithConfig",
            "comment": " Packages a vertex shader, a fragment shader, a mesh, and uniform variables\nas an `Renderable`. This specifies a full rendering pipeline to be run on the GPU.\nYou can read more about the pipeline\n[here](https://github.com/johnpmayer/elm-webgl/blob/master/README.md).\n\nValues will be cached intelligently, so if you have already sent a shader or\nmesh to the GPU, it will not be resent. This means it is fairly cheap to create\nnew entities if you are reusing shaders and meshes that have been used before.\n",
            "type": "List WebGL.FunctionCall -> WebGL.Shader attributes uniforms varyings -> WebGL.Shader {} uniforms varyings -> WebGL.Drawable attributes -> uniforms -> WebGL.Renderable"
          },
          {
            "name": "textureSize",
            "comment": " Return the (width, height) size of a texture. Useful for sprite sheets\nor other times you may want to use only a potion of a texture image.\n",
            "type": "WebGL.Texture -> ( Int, Int )"
          },
          {
            "name": "toHtml",
            "comment": " Same as toHtmlWith but with default configurations,\nimplicitly configured for you. See `defaultConfiguration` for more information.\n",
            "type": "List (Html.Attribute msg) -> List WebGL.Renderable -> Html.Html msg"
          },
          {
            "name": "toHtmlWith",
            "comment": " Render a WebGL scene with the given dimensions and entities. Shaders and\nmeshes are cached so that they do not get resent to the GPU, so it should be\nrelatively cheap to create new entities out of existing values.\n",
            "type": "List WebGL.FunctionCall -> List (Html.Attribute msg) -> List WebGL.Renderable -> Html.Html msg"
          },
          {
            "name": "unsafeShader",
            "comment": " Shaders are programs for running many computations on the GPU in parallel.\nThey are written in a language called\n[GLSL](http://en.wikipedia.org/wiki/OpenGL_Shading_Language). Read more about\nshaders [here](https://github.com/johnpmayer/elm-webgl/blob/master/README.md).\n\nNormally you specify a shader with a `shader` block. This is because shaders\nmust be compiled before they are used, imposing an overhead that it is best to\navoid in general. This function lets you create a shader with a raw string of\nGLSL. It is intended specifically for libary writers who want to create shader\ncombinators.\n",
            "type": "String -> WebGL.Shader attribute uniform varying"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/graph",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Graph",
        "comment": " This module contains the primitives to build, update and traverse graphs.\nIf you find that this module is hard to use or the documentation\nis insufficient, consider opening an issue for that (and possibly even a\npull request :)).\n\nInternally, we use the `elm-intdict` package for efficient dynamic graph\nrepresentation.\n\n# Data\n@docs NodeId, Node, Edge, Adjacency, NodeContext, Graph\n\n# Building\n@docs empty, update, insert, remove, inducedSubgraph\n\n# Query\n@docs isEmpty, size, member, get, nodeIdRange\n\n# List representations\n@docs nodeIds, nodes, edges, fromNodesAndEdges, fromNodeLabelsAndEdgePairs\n\n# Foci\n@docs id, label, from, to, node, incoming, outgoing, nodeById, anyNode\n\n# Transforms\n@docs fold, mapContexts, mapNodes, mapEdges, reverseEdges, symmetricClosure\n\n# Characterization\n\n# Traversals\n## Neighbor selectors and node visitors\n@docs NeighborSelector, alongOutgoingEdges, alongIncomingEdges, SimpleNodeVisitor\n## Depth-first\n@docs DfsNodeVisitor, onDiscovery, onFinish, dfs, dfsTree, dfsForest, guidedDfs\n## Breadth-first\n@docs BfsNodeVisitor, ignorePath, bfs, guidedBfs\n\n# Topological Sort\n@docs topologicalSort, heightLevels\n\n# Strongly Connected Components\n@docs stronglyConnectedComponents\n\n# String representation\n@docs toString'\n\n",
        "aliases": [
          {
            "name": "Adjacency",
            "comment": " Adjacency is represented as an ordered dictionary\nrather than as an ordered list. This enables more dynamic\ngraphs with efficient edge removal and insertion on the run.\n",
            "args": [
              "e"
            ],
            "type": "IntDict.IntDict e"
          },
          {
            "name": "BfsNodeVisitor",
            "comment": " A specialized node visitor for breadth-first traversal. Compared to a\n`SimpleNodeVisitor`, the path of contexts from the root to the current\nnode is passed instead of just the current node's context. Additionally, the\ndistance from the root is passed as an `Int` (the root has distance 0 and it\nholds always that `length path == distance - 1`).\n\nIf you don't need the additional information, you can turn a `SimpleNodeVisitor`\ninto a `BfsNodeVisitor` by calling `ignorePath`.\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "List (Graph.NodeContext n e) -> Int -> acc -> acc"
          },
          {
            "name": "DfsNodeVisitor",
            "comment": " A node visitor specialized for depth-first traversal. Along with the node\ncontext of the currently visited node, the current accumulated value is passed.\nThe visitor then has the chance to both modify the value at discovery of the\nnode through the first return value and also provide a finishing\ntransformation which is called with the value after all children were processed\nand the node is about to be finished.\n\nIn the cases where you don't need access to the value both at dicovery and at\nfinish, look into `onDiscovery` and `onFinish`.\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "Graph.NodeContext n e -> acc -> ( acc, acc -> acc )"
          },
          {
            "name": "Edge",
            "comment": " Represents a directd edge in the graph. In addition\nto start and end node identifiers, a label value can\nbe attached to an edge.\n",
            "args": [
              "e"
            ],
            "type": "{ from : Graph.NodeId, to : Graph.NodeId, label : e }"
          },
          {
            "name": "NeighborSelector",
            "comment": " Selects the next neighbors for the currently visited node in the traversal.\n",
            "args": [
              "n",
              "e"
            ],
            "type": "Graph.NodeContext n e -> List Graph.NodeId"
          },
          {
            "name": "Node",
            "comment": " The type representing a node: An identifier with\na label.\n",
            "args": [
              "n"
            ],
            "type": "{ id : Graph.NodeId, label : n }"
          },
          {
            "name": "NodeContext",
            "comment": " Represents a node with its incoming and outgoing edges\n(predecessors and successors).\n",
            "args": [
              "n",
              "e"
            ],
            "type": "{ node : Graph.Node n , incoming : Graph.Adjacency e , outgoing : Graph.Adjacency e }"
          },
          {
            "name": "NodeId",
            "comment": " The type used for identifying nodes, an integer.\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "SimpleNodeVisitor",
            "comment": " A generic node visitor just like that in the ordinary `fold` function.\nThere are combinators that make these usable for both depth-first traversal\n(`onDiscovery`, `onFinish`) and breadth-first traversal (`ignorePath`).\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "Graph.NodeContext n e -> acc -> acc"
          }
        ],
        "types": [
          {
            "name": "Graph",
            "comment": " The central graph type. It is parameterized both over the node label type `n`\nand the edge label type `e`.\n\nOne can build such a graph with the primitives under *Build*. Most of the time\n`fromNodesAndEdges` works fairly well.\n\nFor simplicity, this library just uses a patricia trie based graph representation, which means\nit is just an efficient version of `Dict NodeId (NodeContext n e)`. This allows efficient insertion and\nremoval of nodes of the graph after building.\n",
            "args": [
              "n",
              "e"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "alongIncomingEdges",
            "comment": " A less common way for selecting neighbors is to follow incoming edges:\n\n    alongIncomingEdges ctx =\n      IntDict.keys (ctx.incoming)\n",
            "type": "Graph.NeighborSelector n e"
          },
          {
            "name": "alongOutgoingEdges",
            "comment": " A good default for selecting neighbors is to just go along outgoing edges:\n\n    alongOutgoingEdges ctx =\n      IntDict.keys (ctx.outgoing)\n\n`dfs`/`bfs` use this as their selecting strategy.\n",
            "type": "Graph.NeighborSelector n e"
          },
          {
            "name": "anyNode",
            "comment": " Focuses on an arbitrary `NodeContext` of a `Graph`.\nThis exists for the same purposes as `nodeById`, but this focuses on an\narbitrary node rather than on a node with a specific id.\n",
            "type": "Focus.Focus (Graph.Graph n e) (Maybe.Maybe (Graph.NodeContext n e))"
          },
          {
            "name": "bfs",
            "comment": " An off-the-shelf breadth-first traversal. It will visit all components of the\ngraph in no guaranteed order, discovering nodes `alongOutgoingEdges`.\nSee the docs of `BfsNodeVisitor` on how to supply such a beast. There are also\nexamples on how to use `bfs`.\n",
            "type": "Graph.BfsNodeVisitor n e acc -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "dfs",
            "comment": " An off-the-shelf depth-first traversal. It will visit all components of the\ngraph in no guaranteed order, discovering nodes `alongOutgoingEdges`.\nSee the docs of `DfsNodeVisitor` on how to supply such a beast. There are also\nexamples on how to use `dfs`.\n",
            "type": "Graph.DfsNodeVisitor n e acc -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "dfsForest",
            "comment": " `dfsForest seeds graph` computes a depth-first spanning `Forest` of the\ncomponents in `graph` spanned by `seeds` `alongOutgoingEdges`.\n\nA traversal over this forest would be equivalent to a depth-first traversal\nover the original graph.\n",
            "type": "List Graph.NodeId -> Graph.Graph n e -> Graph.Tree.Forest (Graph.NodeContext n e)"
          },
          {
            "name": "dfsTree",
            "comment": " `dfsTree seed graph` computes a depth-first [spanning tree](https://en.wikipedia.org/wiki/Spanning_tree) of the component\nin `graph` starting from `seed` `alongOutgoingEdges`. This function is exemplary for needing to\nutilize the whole power of `DfsNodeVisitor`.\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Graph.Tree.Tree (Graph.NodeContext n e)"
          },
          {
            "name": "edges",
            "comment": " `edges graph` returns a list of all `Edge`s (e.g. a record of `from` and `to` ids\nand a `label`) in `graph`.\n\n    edges empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    edges graph == [Edge 1 2 \"->\"]\n",
            "type": "Graph.Graph n e -> List (Graph.Edge e)"
          },
          {
            "name": "empty",
            "comment": " An empty graph.\n\n    size empty == 0\n",
            "type": "Graph.Graph n e"
          },
          {
            "name": "fold",
            "comment": " A fold over all node contexts. The accumulated value is computed lazily,\nso that the fold can exit early when the suspended accumulator is not forced.\n\n    hasLoop ctx = IntDict.member ctx.node.id ctx.incoming\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    -- The graph should not have any loop.\n    fold (\\ctx acc -> acc || hasLoop ctx) False graph == False\n",
            "type": "(Graph.NodeContext n e -> acc -> acc) -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "from",
            "comment": " Focus for the `from` field of `Edge`.\n",
            "type": "Focus.Focus { record | from : field } field"
          },
          {
            "name": "fromNodeLabelsAndEdgePairs",
            "comment": " A more convenient version of `fromNodesAndEdges`, when edges are unlabeled\nand there are no special requirements on node ids.\n\n`fromNodeLabelsAndEdgePairs labels edges` implicitly assigns node ids according\nto the label's index in `labels` and the list of edge pairs is converted to\nunlabeled `Edge`s.\n\n    graph = fromNodeLabelsAndEdgePairs ['a', 'b'] [(0, 1)]\n",
            "type": "List n -> List ( Graph.NodeId, Graph.NodeId ) -> Graph.Graph n ()"
          },
          {
            "name": "fromNodesAndEdges",
            "comment": " `fromNodesAndEdges nodes edges` constructs a graph from the supplied `nodes`\nand `edges`. This is the most comfortable way to construct a graph as a whole.\nOftentimes it is even more convenient to use `fromNodeLabelsAndEdgePairs` when\nedges are unlabeled anyway and auto incremented node ids are OK.\n\nThe following constructs a graph with 2 nodes with a string label, connected\nby an edge labeled \"->\".\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n",
            "type": "List (Graph.Node n) -> List (Graph.Edge e) -> Graph.Graph n e"
          },
          {
            "name": "get",
            "comment": " Analogous to `Dict.get`, `get nodeId graph` returns the `Just` the node\ncontext with id `nodeId` in `graph` if there is one and `Nothing` otherwise.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    get 42 graph == Nothing\n    get 1 graph == Just <node context of node 1>\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Maybe.Maybe (Graph.NodeContext n e)"
          },
          {
            "name": "guidedBfs",
            "comment": " The `bfs` function is not powerful enough? Go for this beast.\n\n`guidedBfs selectNeighbors visitNode seeds acc graph` will perform a breadth-first\ntraversal on `graph` starting with a queue of `seeds`. The children of each node\nwill be selected with `selectNeighbors` (see `NeighborSelector`), the visiting\nof nodes is handled by `visitNode` (c.f. `BfsNodeVisitor`), folding `acc` over\nthe graph.\n\nWhen there are not any more nodes to be visited, the function will return the\naccumulated value together with the unvisited rest of `graph`.\n\n    bfsLevelOrder graph =\n      -- NodeId 1 is just a wild guess here\n      guidedBfs alongOutgoingEdges (ignorePath (::)) [1] [] graph\n",
            "type": "Graph.NeighborSelector n e -> Graph.BfsNodeVisitor n e acc -> List Graph.NodeId -> acc -> Graph.Graph n e -> ( acc, Graph.Graph n e )"
          },
          {
            "name": "guidedDfs",
            "comment": " The `dfs*` functions are not powerful enough? Go for this beast.\n\n`guidedDfs selectNeighbors visitNode seeds acc graph` will perform a depth-first\ntraversal on `graph` starting with a stack of `seeds`. The children of each node\nwill be selected with `selectNeighbors` (see `NeighborSelector`), the visiting\nof nodes is handled by `visitNode` (c.f. `DfsNodeVisitor`), folding `acc` over\nthe graph.\n\nWhen there are not any more nodes to be visited, the function will return the\naccumulated value together with the unvisited rest of `graph`.\n\n    dfsPreOrder graph =\n      -- NodeId 1 is just a wild guess here\n      guidedDfs alongOutgoingEdges (onDiscovery (::)) [1] [] graph\n",
            "type": "Graph.NeighborSelector n e -> Graph.DfsNodeVisitor n e acc -> List Graph.NodeId -> acc -> Graph.Graph n e -> ( acc, Graph.Graph n e )"
          },
          {
            "name": "heightLevels",
            "comment": " Computes the height function of a given graph. This is a more general\n[topological sort](https://en.wikipedia.org/wiki/Topological_sorting),\nwhere independent nodes are in the same height level (e.g. the same list\nindex). A valid topological sort is trivially obtained by flattening the\nresult of this function.\n\nThe height function is useful for solving the maximal clique problem for\ncertain [perfect graphs](https://en.wikipedia.org/wiki/Perfect_graph)\n([comparability graphs](https://en.wikipedia.org/wiki/Comparability_graph)).\nThere is the excellent reference\n[Algorithmic Graph Theory and Perfect Graphs](http://dl.acm.org/citation.cfm?id=984029).\n",
            "type": "Graph.Graph n e -> List (List (Graph.NodeContext n e))"
          },
          {
            "name": "id",
            "comment": " Focus for the `id` field of `Node`.\n",
            "type": "Focus.Focus { record | id : field } field"
          },
          {
            "name": "ignorePath",
            "comment": " Turns a `SimpleNodeVisitor` into a `BfsNodeVisitor` by ignoring the path\nand distance parameters.\nThis is useful for when the visitor should be agnostic of the\ntraversal (breadth-first or depth-first or even just `fold`).\n\n    bfsLevelOrder : List (NodeContext n e)\n    bfsLevelOrder graph =\n      graph\n        |> bfs (ignorePath (::)) []\n        |> List.reverse\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.BfsNodeVisitor n e acc"
          },
          {
            "name": "incoming",
            "comment": " Focus for the `incoming` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | incoming : field } field"
          },
          {
            "name": "inducedSubgraph",
            "comment": " The [induced subgraph](http://mathworld.wolfram.com/Edge-InducedSubgraph.html)\nof a number of node ids.\n",
            "type": "List Graph.NodeId -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "insert",
            "comment": " Analogous to `Dict.insert`, `insert nodeContext graph` inserts a fresh node\nwith its context (label, id and edges) into `graph`. If there was already a node\nwith the same id, it will be replaced by the new node context.\n\n    graph1 = fromNodesAndEdges [Node 1 \"1\"] []\n    newNode =\n      { node = Node 2 \"2\"\n      , incoming = IntDict.singleton 1 () -- so there will be an edge from 1 to 2\n      , outgoing = IntDict.empty\n      }\n    graph2 = insert newNode graph1\n    size graph2 == 2\n\nIt's possible to build up whole graphs this way, but a lot less tedious way would\nbe simply to use `fromNodesAndEdges`.\n",
            "type": "Graph.NodeContext n e -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "isEmpty",
            "comment": " `isEmpty graph` is true if and only if there are no nodes in the graph.\nSome properties to reason about in code, which hold for any `graph`:\n\n    isEmpty graph =\n      graph == empty\n    isEmpty graph =\n      size graph == 0\n",
            "type": "Graph.Graph n e -> Bool"
          },
          {
            "name": "label",
            "comment": " Focus for the `label` field of `Node` and `Edge`.\n",
            "type": "Focus.Focus { record | label : field } field"
          },
          {
            "name": "mapContexts",
            "comment": " Maps each node context to another one. This may change edge and node labels\n(including their types), possibly the node ids and also add or remove edges\nentirely through modifying the adjacency lists.\n\nThe following is a specification for reverseEdges:\n\n    flipEdges ctx = { ctx | incoming = ctx.outgoing, outgoing = ctx.incoming }\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    reverseEdges graph == mapContexts flipEdges graph\n",
            "type": "(Graph.NodeContext n1 e1 -> Graph.NodeContext n2 e2) -> Graph.Graph n1 e1 -> Graph.Graph n2 e2"
          },
          {
            "name": "mapEdges",
            "comment": " Maps over edge labels, possibly chaing their types. Leaves the graph\ntopology intact.\n",
            "type": "(e1 -> e2) -> Graph.Graph n e1 -> Graph.Graph n e2"
          },
          {
            "name": "mapNodes",
            "comment": " Maps over node labels, possibly changing their types. Leaves the graph\ntopology intact.\n",
            "type": "(n1 -> n2) -> Graph.Graph n1 e -> Graph.Graph n2 e"
          },
          {
            "name": "member",
            "comment": " Analogous to `Dict.member`, `member nodeId graph` is true, if and only if\nthere is a node with id `nodeId` in `graph`.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    member 42 graph == False\n    member 1 graph == True\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Bool"
          },
          {
            "name": "node",
            "comment": " Focus for the `node` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | node : field } field"
          },
          {
            "name": "nodeById",
            "comment": "  `nodeById nodeId` focuses on the node with id `nodeId` with a `Graph`.\nSince the node might or might not exist, the small part on which we focus wraps\nthe `NodeContext` in a `Maybe`.\n\nThis is a combination of the `get` and `update` functions which is handy for\ncomposition of foci deep into a graph. Unfortunately, we need a combinator which\nwould get rid of the `Maybe` wrapping (that would be the task of a prism I think),\nbut suppose we have something like `Focus.withDefault : a -> Focus (Maybe a) a`,\nthen we could define\n\n    ctx = NodeContext (Node 2 \"2\") IntDict.empty IntDict.empty\n    focus = nodeById 2 => Focus.withDefault ctx => node => label\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    graph1 = Focus.set focus graph \"=\"\n    Focus.get focus graph1 == \"=\"\n\nWell, I hope I could bring over the point.\n",
            "type": "Graph.NodeId -> Focus.Focus (Graph.Graph n e) (Maybe.Maybe (Graph.NodeContext n e))"
          },
          {
            "name": "nodeIdRange",
            "comment": " `nodeIdRange graph` returns `Just (minNodeId, maxNodeId)` if `graph` is not empty and `Nothing`\notherwise.\n\nThis is useful for finding unoccupied node ids without trial and error.\n\n    nodeIdRange empty == Nothing\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodeIdRange graph == Just (1, 2)\n",
            "type": "Graph.Graph n e -> Maybe.Maybe ( Graph.NodeId, Graph.NodeId )"
          },
          {
            "name": "nodeIds",
            "comment": " `nodeIds graph` returns a list of all nodes' ids in `graph`.\n\n    nodeIds empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodeIds graph == [1, 2]\n",
            "type": "Graph.Graph n e -> List Graph.NodeId"
          },
          {
            "name": "nodes",
            "comment": " `nodes graph` returns a list of all `Node`s (e.g. `id` and `label`) in\n`graph`.\n\n    nodes empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodes graph == [Node 1 \"1\", Node 2 \"2\"]\n",
            "type": "Graph.Graph n e -> List (Graph.Node n)"
          },
          {
            "name": "onDiscovery",
            "comment": " Transform a `SimpleNodeVisitor` into an equivalent `DfsNodeVisitor`, which\nwill be called upon node discovery. This eases providing `DfsNodeVisitor`s in\nthe default case:\n\n    dfsPostOrder : Graph n e  -> List (NodeContext n e)\n    dfsPostOrder graph =\n      dfs (onDiscovery (::)) [] graph\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.DfsNodeVisitor n e acc"
          },
          {
            "name": "onFinish",
            "comment": " Transform a `SimpleNodeVisitor` into an equivalent `DfsNodeVisitor`, which\nwill be called upon node finish. This eases providing `DfsNodeVisitor`s in\nthe default case:\n\n    dfsPreOrder : Graph n e  -> List (NodeContext n e)\n    dfsPreOrder graph =\n      dfs (onFinish (::)) [] graph\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.DfsNodeVisitor n e acc"
          },
          {
            "name": "outgoing",
            "comment": " Focus for the `outgoing` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | outgoing : field } field"
          },
          {
            "name": "remove",
            "comment": " Analogous to `Dict.remove`, `remove nodeId graph` returns a version of `graph`\nwithout a node with id `nodeId`. If there was no node with that id, then remove\nis a no-op:\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 ()]\n    graph == remove 42 graph\n    graph |> remove 2 |> size == 1\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "reverseEdges",
            "comment": " Reverses the direction of every edge in the graph.\n",
            "type": "Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "size",
            "comment": " `size graph` returns the number of nodes in `graph`.\n\n    size empty == 0\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    size graph == 2\n",
            "type": "Graph.Graph n e -> Int"
          },
          {
            "name": "stronglyConnectedComponents",
            "comment": " Decomposes a graph into its strongly connected components. The resulting\nlist is a topological ordering of the component graph.\n",
            "type": "Graph.Graph n e -> List (Graph.Graph n e)"
          },
          {
            "name": "symmetricClosure",
            "comment": " `symmetricClosure edgeMerger graph` is the\n[symmetric closure](https://en.wikipedia.org/wiki/Symmetric_closure) of `graph`,\ne.g. the undirected equivalent, where for every edge in `graph` there is also\na corresponding reverse edge. This implies that `ctx.incoming` == `ctx.outgoing`\nfor each node context `ctx`.\n\n`edgeMerger` resolves conflicts for when there are already edges in both\ndirections, e.g. the graph isn't truly directed. It is guaranteed that\n`edgeMerger` will only be called with the smaller node id passed in first\nto enforce consitency of merging decisions.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    onlyUndirectedEdges ctx =\n      ctx.incoming == ctx.outgoing\n    merger from to outgoingLabel incomingLabel =\n      outgoingLabel -- quite arbitrary, will not be called for the above graph\n    fold\n      (\\ctx acc -> acc && onlyUndirectedEdges ctx)\n      True\n      (symmetricClosure merger graph)\n      == True\n",
            "type": "(Graph.NodeId -> Graph.NodeId -> e -> e -> e) -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "to",
            "comment": " Focus for the `to` field of `Edge`.\n",
            "type": "Focus.Focus { record | to : field } field"
          },
          {
            "name": "toString'",
            "comment": " Returns a string representation of the graph in the format of\n`Graph.fromNodesAndEdges [<nodes>] [<edges>]`.\n",
            "type": "Graph.Graph n e -> String"
          },
          {
            "name": "topologicalSort",
            "comment": " Computes a\n[topological ordering](https://en.wikipedia.org/wiki/Topological_sorting) of the\ngiven graph.\n",
            "type": "Graph.Graph n e -> List (Graph.NodeContext n e)"
          },
          {
            "name": "update",
            "comment": " Analogous to `Dict.update`, `update nodeId updater graph` will find\nthe node context of the node with id `nodeId` in `graph`. It will then call `updater`\nwith `Just` that node context if that node was found and `Nothing`\notherwise. `updater` can then return `Just` an updated node context\n(modifying edges is also permitted!) or delete the node by returning\n`Nothing`. The updated `graph` is returned.\n\nThis is the most powerful building function since all possible per-node\noperations are possible (node removal, insertion and updating of context\nproperties).\n\nThe other operations can be implemented in terms of `update` like this:\n\n    remove nodeId graph =\n      update nodeId (always Nothing) graph\n    insert nodeContext graph =\n      update nodeContext.node.id (always (Just nodeContext)) graph\n",
            "type": "Graph.NodeId -> (Maybe.Maybe (Graph.NodeContext n e) -> Maybe.Maybe (Graph.NodeContext n e)) -> Graph.Graph n e -> Graph.Graph n e"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Graph.Tree",
        "comment": " This module provides a simple tree data type of arbitrary arity (a rose tree).\nThere are primitives for building and traversing such a tree.\n\n# Data\n@docs Tree, Forest\n\n# Building\n@docs empty, leaf, inner, unfoldTree, unfoldForest\n\n# Query\n@docs isEmpty, root, size, height\n\n# Traversal\n\nIt is instructory to read the article on [tree traversals on Wikipedia](https://en.wikipedia.org/wiki/Tree_traversal) first if you are not familiar with the concept.\n\n@docs levelOrder, levelOrderList, preOrder, preOrderList, postOrder, postOrderList\n\n",
        "aliases": [
          {
            "name": "Forest",
            "comment": " This is just an alias for a list of trees, called a forest in the\nliterature.\n",
            "args": [
              "label"
            ],
            "type": "List (Graph.Tree.Tree label)"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " Data type representing an n-ary tree with node labels of type `a`\nBuilding such a tree is done with the `empty`, `leaf` and `inner` smart\nconstructors. An example for a tree with three leafs and a root node:\n\n    tree = inner 1 [leaf 2, leaf 3, leaf 4]\n",
            "args": [
              "label"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Construct an empty tree with no nodes. ",
            "type": "Graph.Tree.Tree label"
          },
          {
            "name": "height",
            "comment": " Computes the height of the tree in O(n) time.\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    height tree == 3\n",
            "type": "Graph.Tree.Tree label -> Int"
          },
          {
            "name": "inner",
            "comment": " Construct a new tree by `inner label children`, combining a number of\nsubtrees `children` with a `label` for the new inner node which will be\nthe root of the tree. Empty subtrees are filtered out. An example:\n\n    tree1 = inner 1 [leaf 2, leaf 3, leaf 4]\n    tree2 = inner 1 [leaf 2, leaf 3, leaf 4, empty]\n    tree1 == tree2\n",
            "type": "label -> List (Graph.Tree.Tree label) -> Graph.Tree.Tree label"
          },
          {
            "name": "isEmpty",
            "comment": " `isEmpty tree` returns true if and only if `tree` is `empty`.\n\n    isEmpty empty == True\n    isEmpty (leaf 42) == False\n",
            "type": "Graph.Tree.Tree label -> Bool"
          },
          {
            "name": "leaf",
            "comment": " Construct a tree with a single node from a value for the node's label.\n\n    tree : Tree Int\n    tree = leaf 42\n ",
            "type": "label -> Graph.Tree.Tree label"
          },
          {
            "name": "levelOrder",
            "comment": " `levelOrder visit acc tree` is a breadth-first fold over `tree`,\nvisiting each node and accumulating results with `visit`. Nodes are visited\nin level-order, e.g. for a tree like\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n\nnodes would be visited in order `[0, 1, 4, 2, 3, 5, 6]`. This is in fact the\nlist produced by `levelOrderList`, but through `levelOrder` you also get access\nto the children of the current node via the second parameter of visit.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "levelOrderList",
            "comment": " See the documentation on `levelOrder`. `levelOrderList tree` produces\na list of the nodes of the tree visited in level-order, e.g. breadth-first.\nSo:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    levelOrderList tree == [0, 1, 4, 2, 3, 5, 6]\n\nIf you also need information on child trees instead of just the node labels,\nuse `levelOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "postOrder",
            "comment": " `postOrder visit acc tree` is a (depth-first) post-order traversal (fold)\nover `tree` where `visit` is called with the label and the child sub-forest of\nthe current node in addition to a supplied accumulator value.\n\nWhen `visit` is called for some node, `acc` already contains the value of all\nsub-trees, so post-order traversal is a kind of bottom-up traversal, where\nall children are visited prior to their parent.\nSee `postOrderList` for an example on the order in which nodes are visited.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "postOrderList",
            "comment": " See `postOrder` for an explanation of how post-order traversals work.\nHere is an example on visit order:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    postOrderList tree == [2, 3, 1, 5, 6, 4, 0]\n\nIf you also need information on child trees instead of just the node labels,\nuse `postOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "preOrder",
            "comment": " `preOrder visit acc tree` is a (depth-first) pre-order traversal (fold)\nover `tree` where `visit` is called with the label and the child sub-forest of\nthe current node in addition to a supplied accumulator value.\n\nPost-order traversals work top-down: When `visit` is called for some node,\n`acc` already contains the value of all ancestral nodes.\nSee `preOrderList` for an example on the order in which nodes are visited.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "preOrderList",
            "comment": " See `preOrder` for an explanation of how post-order traversals work.\nHere is an example on visit order:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    preOrderList tree == [0, 1, 2, 3, 4, 5, 6]\n\nIf you also need information on child trees instead of just the node labels,\nuse `preOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "root",
            "comment": " `root tree` returns `Nothing` if `tree` is `empty`, otherwise\nit returns `Just (label, childForest)` of the root node.\n\n    tree = inner 1 [leaf 2, leaf 3, leaf 4]\n    root tree == Just (1, [leaf 2, leaf 3, leaf 4])\n    root empty == Nothing\n",
            "type": "Graph.Tree.Tree label -> Maybe.Maybe ( label, Graph.Tree.Forest label )"
          },
          {
            "name": "size",
            "comment": " The size of the tree, e.g. the number of nodes.\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    size tree == 7\n",
            "type": "Graph.Tree.Tree label -> Int"
          },
          {
            "name": "unfoldForest",
            "comment": " Construct a new forest with `unfoldForest next seeds` by `unfoldTree next seed`\nfor each `seed` in `seeds`. A simple specification would be\n\n    unfoldForest next seeds = List.map (unfoldTree next) seeds\n",
            "type": "(seed -> ( label, List seed )) -> List seed -> Graph.Tree.Forest label"
          },
          {
            "name": "unfoldTree",
            "comment": " Construct a new tree with `unfoldTree next seed`, top to bottom. `next` will be\ncalled repeatedly with seeds, from which it should construct a label for\nthe current tree node but also a list of seeds from which to unfold\nchild nodes. This sort of works top to bottom compared to creating a\ntree bottom up by using the other primitives.\n\n    tree1 = inner 1 [leaf 2, leaf 3, leaf 4]\n    next seed = (seed, if seed == 1 then [2, 3, 4] else [])\n    tree2 = unfoldTree next 1\n    tree1 == tree2\n",
            "type": "(seed -> ( label, List seed )) -> seed -> Graph.Tree.Tree label"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/html-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Html.Attributes.Extra",
        "comment": " Additional attributes for html\n\n# Inputs\n@docs valueAsFloat, valueAsInt\n\n# Semantic web\n@docs role\n\n# Meter element\n@docs low, high, optimum\n\n# Media element\n@docs volume\n\n# Unescaped HTML\n@docs innerHtml\n\n# Custom Attributes\n@docs stringProperty\n@docs boolProperty\n@docs floatProperty\n@docs intProperty\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "boolProperty",
            "comment": " Create arbitrary bool *properties*.\n",
            "type": "String -> Bool -> Html.Attribute msg"
          },
          {
            "name": "floatProperty",
            "comment": " Create arbitrary floating-point *properties*.\n",
            "type": "String -> Float -> Html.Attribute msg"
          },
          {
            "name": "high",
            "comment": " The lower numeric bound of the high end of the measured range, used with the meter element.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "innerHtml",
            "comment": " Useful for inserting arbitrary unescaped HTML into an element. This function comes with some caveats.\n\n* **Security:** You should never pass untrusted strings (e.g. from user input) to this function. Doing so will lead to [XSS](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)) vulnerabilities.\n* **Performance:** The virtual DOM subsystem is not aware of HTML inserted in this manner, so these HTML fragments will be slower.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "intProperty",
            "comment": " Create arbitrary integer *properties*.\n",
            "type": "String -> Int -> Html.Attribute msg"
          },
          {
            "name": "low",
            "comment": " The upper numeric bound of the low end of the measured range, used with the meter element.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "optimum",
            "comment": " This attribute indicates the optimal numeric value, used with the meter element.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "role",
            "comment": " Used to annotate markup languages with machine-extractable semantic information about the purpose of an element.\nSee the [official specs](http://www.w3.org/TR/role-attribute/).\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "stringProperty",
            "comment": " Create arbitrary string *properties*.\n",
            "type": "String -> String -> Html.Attribute msg"
          },
          {
            "name": "valueAsFloat",
            "comment": " Uses `valueAsNumber` to update an input with a floating-point value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that a floating point value will not necessarily overwrite the contents on an input element.\n\n    valueAsFloat 2.5 -- e.g. will not change the displayed value for input showing \"2.5000\"\n    valueAsFloat 0.4 -- e.g. will not change the displayed value for input showing \".4\"\n\n",
            "type": "Float -> Html.Attribute msg"
          },
          {
            "name": "valueAsInt",
            "comment": " Uses `valueAsNumber` to update an input with an integer value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that an integer value will not necessarily overwrite the contents on an input element.\n\n    valueAsInt 18 -- e.g. will not change the displayed value for input showing \"00018\"\n\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "volume",
            "comment": " Audio volume, starting from 0.0 (silent) up to 1.0 (loudest).\n",
            "type": "Float -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Html.Events.Extra",
        "comment": " Additional decoders for use with event handlers in html.\n\n# Event decoders\n* TODO: `key`\n* TODO: `code`\n* TODO: `KeyEvent`, `keyEvent`\n@docs charCode\n\n# Typed event decoders\n@docs targetValueFloat, targetValueInt, targetValueMaybe, targetValueMaybeFloat, targetValueMaybeInt\n@docs targetValueFloatParse, targetValueIntParse, targetValueMaybeFloatParse, targetValueMaybeIntParse\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "charCode",
            "comment": " Character code for key board events.\nThis is being deprecated, but support for DOM3 Keyboard events is not yet present in most browsers.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Char)"
          },
          {
            "name": "targetValueFloat",
            "comment": " Floating-point target value.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "targetValueFloatParse",
            "comment": " Parse a floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "targetValueInt",
            "comment": " Integer target value.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "targetValueIntParse",
            "comment": " Parse an integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "targetValueMaybe",
            "comment": " String or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe String)"
          },
          {
            "name": "targetValueMaybeFloat",
            "comment": " Floating-point or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
          },
          {
            "name": "targetValueMaybeFloatParse",
            "comment": " Parse an optional floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
          },
          {
            "name": "targetValueMaybeInt",
            "comment": " Integer or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          },
          {
            "name": "targetValueMaybeIntParse",
            "comment": " Parse an optional integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Html.Extra",
        "comment": " Convenience functionality on\n[`Html`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#Html)\n\n@docs static\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "static",
            "comment": " Embedding static html.\n\nThe type argument\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\nin `Html Never` tells us that the html has no event handlers attached,\nit will not generate any messages. We may want to embed such static\nhtml into arbitrary views, while using types to enforce the\nstaticness. That is what this function provides.\n\n*Note:* To call this function, the argument need not be literally of type\n`Html Never`. It suffices if it is a fully polymorphic (in the message type)\n`Html` value. For example, this works: `static (Html.text \"abcdef\")`.\n",
            "type": "Html.Html Basics.Never -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/intdict",
    "version": "1.1.0",
    "docs": [
      {
        "name": "IntDict.Safe",
        "comment": " Safe API wrappers for `IntDict`s build and query operators \nto prevent integer overflows with JavaScripts number type.\n\nPrior to delegating to their 'unsafe' equivalent, these functions verify\nthe validity of the key via `IntDict.isValidKey`.\n\n# Return type\n@docs InvalidKey, SafeKeyResult\n# Build\n@docs safeInsert, safeUpdate, safeRemove\n# Query\n@docs safeMember, safeGet\n\n",
        "aliases": [
          {
            "name": "SafeKeyResult",
            "comment": " A value of this type is returned by all functions in this module. \nSee the core libraries' `Result` documentation for how to cope with it. ",
            "args": [
              "a"
            ],
            "type": "Result.Result IntDict.Safe.InvalidKey a"
          }
        ],
        "types": [
          {
            "name": "InvalidKey",
            "comment": " An error type signaling an invalid key. ",
            "args": [],
            "cases": [
              [
                "InvalidKey",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "safeGet",
            "comment": " Version of `IntDict.get` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (Maybe.Maybe v)"
          },
          {
            "name": "safeInsert",
            "comment": " Version of `IntDict.insert` that validates the key. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeMember",
            "comment": " Version of `IntDict.member` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult Bool"
          },
          {
            "name": "safeRemove",
            "comment": " Version of `IntDict.remove` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeUpdate",
            "comment": " Version of `IntDict.update` that validates the key. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "IntDict",
        "comment": " # IntDict\n\nThis module exposes the same API as `Dict`.\n\n# Technicalities\n\nSince JavaScript's number type is kind of messed up, Elm's `Int` is not particularly\nwell-behaved wrt. bitwise operations. Currently, JS supports 32 bit integers, so there is\nprobably enough room for key picks. **However, when sanitizing user input, it is mandatory\nthat a prior `isValidKey` or one of the safe versions in `IntDict.Safe` is used!** This is\nto prevent the overflow behavior.\n\nThis library is inspired by Haskells [IntMap](http://hackage.haskell.org/package/containers-0.2.0.1/docs/Data-IntMap.html),\nwhich in turn implements Okasaki and Gill's [Fast mergable integer maps](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf).\n\nAs noted in the [references](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf), here are some runtimes:\n\n*O(min(n, W))*: `insert`, `update`, `remove`, `get`, `member`\n\n*O(n + m)*: `uniteWith`, `union`, `intersection`, `diff`, `merge`\n\nwhere *n* and *m* are the sizes of the first and second dictionary respectively and *W*\nis the number of bits in `Int` (so a constant with current value 32).\n\n# Data\n@docs IntDict, isValidKey\n# Build\n@docs empty, singleton, insert, update, remove\n# Query\n@docs isEmpty, size, member, get, findMin, findMax\n# Combine\n@docs uniteWith, union, intersect, diff, merge\n# Lists\n@docs keys, values, toList, fromList\n# Transform\n@docs map, foldl, foldr, filter, partition\n# String representation\n@docs toString'\n\n",
        "aliases": [],
        "types": [
          {
            "name": "IntDict",
            "comment": " A dictionary mapping `Int`s to values of a type `v`. Analogous to\n`Dict Int v`.\n",
            "args": [
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\nPreference is given to the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "IntDict.IntDict v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "findMax",
            "comment": " Find the maximum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "findMin",
            "comment": " Find the minimum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( Int, v ) -> IntDict.IntDict v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary. ",
            "type": "Int -> IntDict.IntDict v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "isEmpty",
            "comment": " Check if the dictionary contains no items. ",
            "type": "IntDict.IntDict v -> Bool"
          },
          {
            "name": "isValidKey",
            "comment": " Validates that a given integer is usable as a key.\nThis is necessary due to JavaScript's weird number type.\nBasically this assures that we can use the functions\nfrom `Bitwise` without risking integer overflow.\n\n**This function is a necessity for sanitizing user input!** Alternatively,\nuse the safe functions from `IntDict.Safe` which perform the check for you.\n\nAs with the current version of JavaScript (2015), only 32 bit signed integers are supported.\nIf this ever changes, contact me! Certain parts of the implementation depend on this! ",
            "type": "Int -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "IntDict.IntDict v -> List Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary. ",
            "type": "(Int -> a -> b) -> IntDict.IntDict a -> IntDict.IntDict b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "Int -> IntDict.IntDict v -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n\nNote that `uniteWith`, `union`, `intersect` and `diff` could all be implemented\nin terms of this function. The only reason that's not the case is to have more\nsharing of substructure.\n\n  uniteWith merger l r =\n    merge insert merger insert l r empty\n  union l r =\n    merge insert (\\k a _ d -> insert k a d) insert l r empty\n  intersect l r =\n    merge (\\_ _ d -> d) (\\k a _ d -> insert k a d) (\\_ _ d -> d) l r empty\n  diff l r =\n    merge insert (\\_ _ _ d -> d) (\\_ _ d -> d) l r empty\n\n",
            "type": "(Int -> a -> result -> result) -> (Int -> a -> b -> result -> result) -> (Int -> b -> result -> result) -> IntDict.IntDict a -> IntDict.IntDict b -> result -> result"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> ( IntDict.IntDict v, IntDict.IntDict v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "Int -> v -> IntDict.IntDict v"
          },
          {
            "name": "size",
            "comment": " The number of items in the dictionary. `O(1)`.",
            "type": "IntDict.IntDict v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "IntDict.IntDict v -> List ( Int, v )"
          },
          {
            "name": "toString'",
            "comment": " Generates a string representation similar to what `toString`\ngenerates for `Dict`. ",
            "type": "IntDict.IntDict v -> String"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "uniteWith",
            "comment": " `uniteWith merger l r` combines two dictionaries. If there is a collision, `merger`\nis called with the conflicting key, the value from `l` and that from `r`. ",
            "type": "(Int -> v -> v -> v) -> IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "IntDict.IntDict v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/json-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Json.Decode.Extra",
        "comment": " Convenience functions for working with Json\n\n# Date\n@docs date\n\n# Incremental Decoding\n@docs apply, (|:)\n\n# Set\n@docs set\n\n# Dict\n@docs dict2\n\n# Maybe\n@docs withDefault, maybeNull\n\n# Recursively Defined Decoders\n@docs lazy\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Can be helpful when decoding large objects incrementally.\n\n    import Date (Date)\n\n    type alias User =\n      { id                : Int\n      , createdAt         : Date\n      , updatedAt         : Date\n      , deletedAt         : Maybe Date\n      , username          : Maybe String\n      , email             : Maybe String\n      , fullname          : Maybe String\n      , avatar            : Maybe String\n      , isModerator       : Bool\n      , isOrganization    : Bool\n      , isAdmin           : Bool\n      }\n\n    metaDecoder : (Int -> Date -> Date -> Maybe Date -> b) -> Decoder b\n    metaDecoder f = f\n      `map`      (\"id\"        := int)\n      `apply` (\"createdAt\" := date)\n      `apply` (\"updatedAt\" := date)\n      `apply` (\"deletedAt\" := maybe date)\n\n    userDecoder : Decoder User\n    userDecoder = metaDecoder User\n      `apply` (\"username\"          := maybe string)\n      `apply` (\"email\"             := maybe string)\n      `apply` (\"fullname\"          := maybe string)\n      `apply` (\"avatar\"            := maybe string)\n      `apply` (\"isModerator\"       := bool)\n      `apply` (\"isOrganization\"    := bool)\n      `apply` (\"isAdmin\"           := bool)\n\nThis is a shortened form of\n\n    metaDecoder : (Int -> Date -> Date -> Maybe Date -> b) -> Decoder b\n    metaDecoder f = f\n      `map`      (\"id\"        := int)\n      `andThen` \\f -> f `map` (\"createdAt\" := date)\n      `andThen` \\f -> f `map` (\"updatedAt\" := date)\n      `andThen` \\f -> f `map` (\"deletedAt\" := maybe date)\n\n    userDecoder : Decoder User\n    userDecoder = metaDecoder User\n      `andThen` \\f -> f `map` (\"username\"          := maybe string)\n      `andThen` \\f -> f `map` (\"email\"             := maybe string)\n      `andThen` \\f -> f `map` (\"fullname\"          := maybe string)\n      `andThen` \\f -> f `map` (\"avatar\"            := maybe string)\n      `andThen` \\f -> f `map` (\"isModerator\"       := bool)\n      `andThen` \\f -> f `map` (\"isOrganization\"    := bool)\n      `andThen` \\f -> f `map` (\"isAdmin\"           := bool)\n\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          },
          {
            "name": "date",
            "comment": " Extract a date using [`Date.fromString`](http://package.elm-lang.org/packages/elm-lang/core/latest/Date#fromString)\n",
            "type": "Json.Decode.Decoder Date.Date"
          },
          {
            "name": "dict2",
            "comment": " Extract a dict using separate decoders for keys and values.\n",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "lazy",
            "comment": " Enable decoders defined in terms of themselves by lazily creating them.\n\n    treeNode =\n      object2\n        instantiateTreeNode\n        (\"name\" := string)\n        (\"children\" := list (lazy (\\_ -> treeNode)))\n\n",
            "type": "(() -> Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "maybeNull",
            "comment": " Extract a value that might be null. If the value is null,\nsucceed with Nothing. If the value is present but not null, succeed with\nJust that value. If the value is missing, fail.\n\n    -- Yields Nothing if middleName is null, and Just middleName if it's a string.\n    \"middleName\" := maybeNull string\n\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "set",
            "comment": " Extract a set.\n",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder (Set.Set comparable)"
          },
          {
            "name": "withDefault",
            "comment": " Try running the given decoder; if that fails, then succeed with the given\nfallback value.\n\n    -- If this field is missing or malformed, it will decode to [].\n    (\"optionalNames\" := list string)\n      |> (withDefault [])\n\n",
            "type": "a -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "|:",
            "comment": " Infix version of `apply` that makes for a nice DSL when decoding objects:\n\n    locationDecoder : Decoder Location\n    locationDecoder =\n        succeed Location\n            |: (\"id\" := int)\n            |: (\"name\" := string)\n            |: (\"address\" := string)\n\n\n    type alias Location =\n        { id : Int\n        , name : String\n        , address : String\n        }\n\nIf you're curious, here's how this works behind the scenes.\n\n`Location` is a type alias, and type aliases give you a convenience function\nthat returns an instance of the record in question. Try this out in `elm repl`:\n\n    > type alias Location = { id : Int, name: String, address: String }\n\n    > Location\n    <function> : Int -> String -> String -> Repl.Location\n\n    > Location 1 \"The White House\" \"1600 Pennsylvania Ave\"\n    { id = 1, name = \"The White House\", address = \"1600 Pennsylvania Ave\" }\n\nIn other words, if you call the `Location` function, passing three arguments,\nit will return a new `Location` record by filling in each of its fields. (The\nargument order is based on the order in which we listed the fields in the\ntype alias; the first argument sets `id`, the second argument sets `name`, etc.)\n\nNow try running this through `elm repl`:\n\n    > import Json.Decode exposing (succeed, int, string, (:=))\n\n    > succeed Location\n    <function>\n        : Json.Decode.Decoder\n            (Int -> String -> String -> Repl.Location)\n\nSo `succeed Location` gives us a `Decoder (Int -> String -> String -> Location)`.\nThat's not what we want! What we want is a `Decoder Location`. All we have so\nfar is a `Decoder` that wraps not a `Location`, but rather a function that\nreturns a `Location`.\n\nWhat `|: (\"id\" := int)` does is to take that wrapped function and pass an\nargument to it.\n\n    > import Json.Decode exposing (succeed, int, string, (:=))\n\n    > (\"id\" := int)\n    <function> : Json.Decode.Decoder Int\n\n    > succeed Location |: (\"id\" := int)\n    <function>\n        : Json.Decode.Decoder\n            (String -> String -> Repl.Location)\n\nNotice how the wrapped function no longer takes an `Int` as its first argument.\nThat's because `|:` went ahead and supplied one: the `Int` wrapped by the decoder\n`(\"id\" := int)` (which returns a `Decoder Int`).\n\nCompare:\n\n    -- succeed Location\n    Decoder (Int -> String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int)\n    Decoder (String -> String -> Location)\n\nWe still want a `Decoder Location` and we still don't have it yet. Our decoder\nstill wraps a function instead of a plain `Location`. However, that function is\nnow smaller by one argument!\n\nLet's repeat this pattern to provide the first `String` argument next.\n\n    -- succeed Location\n    Decoder (Int -> String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int)\n    Decoder (String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int) |: (\"name\" := string)\n    Decoder (String -> Location)\n\nSmaller and smaller! Now we're down from `(Int -> String -> String -> Location)`\nto `(String -> Location)`. What happens if we repeat the pattern one more time?\n\n    -- succeed Location\n    Decoder (Int -> String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int)\n    Decoder (String -> String -> Location)\n\n    -- succeed Location |: (\"id\" := int) |: (\"name\" := string)\n    Decoder (String -> Location)\n\n    -- succeed Location |: (\"id\" := int) |: (\"name\" := string) |: (\"address\" := string)\n    Decoder Location\n\nHaving now supplied all three arguments to the wrapped function, it has ceased\nto be a function. It's now just a plain old `Location`, like we wanted all along.\n\nWe win!\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/list-extra",
    "version": "3.1.0",
    "docs": [
      {
        "name": "List.Extra",
        "comment": " Convenience functions for working with List\n\n# Basics\n@docs last, init, getAt, (!!), uncons, maximumBy, minimumBy, andMap, andThen, takeWhile, dropWhile, unique, uniqueBy, replaceIf, setAt, remove, updateIf, updateAt, updateIfIndex, singleton, removeAt, filterNot\n\n# List transformations\n@docs intercalate, transpose, subsequences, permutations, interweave\n\n# Folds\n@docs foldl1, foldr1, indexedFoldl, indexedFoldr\n\n# Building lists\n@docs scanl1, scanr, scanr1, unfoldr, iterate\n\n# Sublists\n@docs splitAt, takeWhileRight, dropWhileRight, span, break, stripPrefix, group, groupWhile, groupWhileTransitively, inits, tails, select, selectSplit\n\n# Predicates\n@docs isPrefixOf, isSuffixOf, isInfixOf, isSubsequenceOf, isPermutationOf\n\n# Searching\n@docs notMember, find, elemIndex, elemIndices, findIndex, findIndices\n\n# Zipping\n@docs zip, zip3, zip4, zip5\n\n# Lift functions onto multiple lists of arguments\n@docs lift2, lift3, lift4\n\n# Split to groups of given size\n@docs groupsOf, groupsOfWithStep, greedyGroupsOf, greedyGroupsOfWithStep\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "!!",
            "comment": " Alias for getAt, but with the parameters flipped.\n",
            "type": "List a -> Int -> Maybe.Maybe a"
          },
          {
            "name": "andMap",
            "comment": " Map functions taking multiple arguments over multiple lists. Each list should be of the same length.\n\n    ( (\\a b c -> a + b * c)\n        `map` [1,2,3]\n        `andMap` [4,5,6]\n        `andMap` [2,1,1]\n    ) == [9,7,9]\n",
            "type": "List (a -> b) -> List a -> List b"
          },
          {
            "name": "andThen",
            "comment": " Equivalent to `concatMap` with arguments reversed. Ideal to use as an infix function, chaining together functions that return List. For example, suppose you want to have a cartesian product of [1,2] and [3,4]:\n\n    [1,2] `andThen` \\x ->\n    [3,4] `andThen` \\y ->\n    [(x,y)]\n\nwill give back the list:\n\n    [(1,3),(1,4),(2,3),(2,4)]\n\nNow suppose we want to have a cartesian product between the first list and the second list and its doubles:\n\n    [1,2] `andThen` \\x ->\n    [3,4] `andThen` \\y ->\n    [y,y*2] `andThen` \\z ->\n    [(x,z)]\n\nwill give back the list:\n\n    [(1,3),(1,6),(1,4),(1,8),(2,3),(2,6),(2,4),(2,8)]\n\nAdvanced functional programmers will recognize this as the implementation of bind operator (>>=) for lists from the `Monad` typeclass.\n",
            "type": "List a -> (a -> List b) -> List b"
          },
          {
            "name": "break",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is longest prefix of that list, for each element of which the predicate *does not* hold. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(dropWhile p xs, takeWhile p xs)`.\n\n    break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\n    break (< 5) [1,2,3] == ([],[1,2,3])\n    break (> 5) [1,2,3] == ([1,2,3],[])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "dropWhileRight",
            "comment": " Drop elements from the right, while predicate still holds.\n\n    dropWhileRight ((<)5) [1..10] == [1,2,3,4,5]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "elemIndex",
            "comment": " Return the index of the first occurrence of the element. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    elemIndex 1 [1,2,3] == Just 0\n    elemIndex 4 [1,2,3] == Nothing\n    elemIndex 1 [1,2,1] == Just 0\n",
            "type": "a -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "elemIndices",
            "comment": " Return all indices of occurrences of the element. If element is not found, return empty list. Indexing starts from 0.\n\n    elemIndices 1 [1,2,3] == [0]\n    elemIndices 4 [1,2,3] == []\n    elemIndices 1 [1,2,1] == [0,2]\n",
            "type": "a -> List a -> List Int"
          },
          {
            "name": "filterNot",
            "comment": " Take a predicate and a list, and return a list that contains elements which fails to satisfy the predicate.\n    This is equivalent to `List.filter (not << predicate) list`.\n\n    filterNot isEven [1,2,3,4] == [1,3]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "find",
            "comment": " Find the first element that satisfies a predicate and return\nJust that element. If none match, return Nothing.\n\n    find (\\num -> num > 5) [2, 4, 6, 8] == Just 6\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "findIndex",
            "comment": " Take a predicate and a list, return the index of the first element that satisfies the predicate. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    findIndex isEven [1,2,3] == Just 1\n    findIndex isEven [1,3,5] == Nothing\n    findIndex isEven [1,2,4] == Just 1\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "findIndices",
            "comment": " Take a predicate and a list, return indices of all elements satisfying the predicate. Otherwise, return empty list. Indexing starts from 0.\n\n    findIndices isEven [1,2,3] == [1]\n    findIndices isEven [1,3,5] == []\n    findIndices isEven [1,2,4] == [1,2]\n",
            "type": "(a -> Bool) -> List a -> List Int"
          },
          {
            "name": "foldl1",
            "comment": " Variant of `foldl` that has no starting value argument and treats the head of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldl1 max [1,2,3,2,1] == Just 3\n    foldl1 max [] == Nothing\n    foldl1 (-) [1,2,3] == Just -4\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "foldr1",
            "comment": " Variant of `foldr` that has no starting value argument and treats the last element of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldr1 min [1,2,3,2,1] == Just 1\n    foldr1 min [] == Nothing\n    foldr1 (-) [1,2,3] == Just 2\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "getAt",
            "comment": " Returns `Just` the element at the given index in the list,\nor `Nothing` if the index is out of range.\n",
            "type": "Int -> List a -> Maybe.Maybe a"
          },
          {
            "name": "greedyGroupsOf",
            "comment": " Split list into groups of size given by the first argument \"greedily\" (don't throw the group away if not long enough).\n\n    greedyGroupsOf 3 [1..10]\n      == [[1,2,3],[4,5,6],[7,8,9],[10]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "greedyGroupsOfWithStep",
            "comment": " Split list into groups of size given by the first argument \"greedily\" (don't throw the group away if not long enough). After each group, drop a number of elements given by the second argumet before starting the next group.\n\n    greedyGroupsOfWithStep 3 2 [1..6]\n      == [[1,2,3],[3,4,5],[5,6]]\n",
            "type": "Int -> Int -> List a -> List (List a)"
          },
          {
            "name": "group",
            "comment": " Group similar elements together. `group` is equivalent to `groupWhile (==)`.\n\n    group [1,2,2,3,3,3,2,2,1] == [[1],[2,2],[3,3,3],[2,2],[1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "groupWhile",
            "comment": " Group elements together, using a custom equality test.\n\n    groupWhile (\\x y -> fst x == fst y) [(0,'a'),(0,'b'),(1,'c'),(1,'d')] == [[(0,'a'),(0,'b')],[(1,'c'),(1,'d')]]\n\nThe equality test should be an equivalent relationship, i.e. it should have the properties of reflexivity, symmetry, and transitivity. For non-equivalent relations it gives non-intuitive behavior:\n\n    groupWhile (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3,2,4],[1,3,2],[1]]\n\nFor grouping elements with a comparison test, which must only hold the property of transitivity, see `groupWhileTransitively`.\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupWhileTransitively",
            "comment": " Group elements together, using a custom comparison test. Start a new group each time the comparison test doesn't hold for two adjacent elements.\n\n    groupWhileTransitively (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3],[2,4],[1,3],[2],[1]]\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupsOf",
            "comment": " Split list into groups of size given by the first argument.\n\n    groupsOf 3 [1..10]\n      == [[1,2,3],[4,5,6],[7,8,9]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "groupsOfWithStep",
            "comment": " Split list into groups of size given by the first argument.  After each group, drop a number of elements given by the second argument before starting the next group.\n\n    groupsOfWithStep 2 1 [1..4]\n      == [[1,2],[2,3],[3,4]]\n",
            "type": "Int -> Int -> List a -> List (List a)"
          },
          {
            "name": "indexedFoldl",
            "comment": " Variant of `foldl` that passes the index of the current element to the step function. `indexedFoldl` is to `List.foldl` as `List.indexedMap` is to `List.map`.\n",
            "type": "(Int -> a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "indexedFoldr",
            "comment": " Variant of `foldr` that passes the index of the current element to the step function. `indexedFoldr` is to `List.foldr` as `List.indexedMap` is to `List.map`.\n",
            "type": "(Int -> a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "init",
            "comment": " Return all elements of the list except the last one.\n\n    init [1,2,3] == Just [1,2]\n    init [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "inits",
            "comment": " Return all initial segments of a list, from shortest to longest, empty list first, the list itself last.\n\n    inits [1,2,3] == [[],[1],[1,2],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "intercalate",
            "comment": " Take a list and a list of lists, insert that list between every list in the list of lists, concatenate the result. `intercalate xs xss` is equivalent to `concat (intersperse xs xss)`.\n\n    intercalate [0,0] [[1,2],[3,4],[5,6]] == [1,2,0,0,3,4,0,0,5,6]\n",
            "type": "List a -> List (List a) -> List a"
          },
          {
            "name": "interweave",
            "comment": " Return a list that contains elements from the two provided, in alternate order.\n    If one list runs out of items, append the items from the remaining list.\n\n    interweave [1,3] [2,4] == [1,2,3,4]\n    interweave [1,3,5,7] [2,4] == [1,2,3,4,5,7]\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "isInfixOf",
            "comment": " Take 2 lists and return True, if the first list is an infix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPermutationOf",
            "comment": " Take 2 lists and return True, if the first list is a permutation of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPrefixOf",
            "comment": " Take 2 lists and return True, if the first list is the prefix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSubsequenceOf",
            "comment": " Take 2 lists and return True, if the first list is a subsequence of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSuffixOf",
            "comment": " Take 2 lists and return True, if the first list is the suffix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Returns a list of repeated applications of `f`.\n\nIf `f` returns `Nothing` the iteration will stop. If it returns `Just y` then `y` will be added to the list and the iteration will continue with `f y`.\n    nextYear : Int -> Maybe Int\n    nextYear year =\n      if year >= 2030 then\n        Nothing\n      else\n        Just (year + 1)\n    -- Will evaluate to [2010, 2011, ..., 2030]\n    iterate nextYear 2010\n",
            "type": "(a -> Maybe.Maybe a) -> a -> List a"
          },
          {
            "name": "last",
            "comment": " Extract the last element of a list.\n\n    last [1,2,3] == Just 3\n    last [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "lift2",
            "comment": " Map functions taking multiple arguments over multiple lists, regardless of list length.\n  All possible combinations will be explored.\n\n  lift2 (+) [1,2,3] [4,5] == [5,6,6,7,7,8]\n",
            "type": "(a -> b -> c) -> List a -> List b -> List c"
          },
          {
            "name": "lift3",
            "comment": "\n",
            "type": "(a -> b -> c -> d) -> List a -> List b -> List c -> List d"
          },
          {
            "name": "lift4",
            "comment": "\n",
            "type": "(a -> b -> c -> d -> e) -> List a -> List b -> List c -> List d -> List e"
          },
          {
            "name": "maximumBy",
            "comment": " Find the first maximum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "minimumBy",
            "comment": " Find the first minimum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "notMember",
            "comment": " Negation of `member`.\n\n    1 `notMember` [1,2,3] == False\n    4 `notMember` [1,2,3] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "permutations",
            "comment": " Return the list of of all permutations of a list. The result is in lexicographic order.\n\n    permutations [1,2,3] == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "remove",
            "comment": " Remove the first occurrence of a value from a list.\n",
            "type": "a -> List a -> List a"
          },
          {
            "name": "removeAt",
            "comment": " Remove the element at an index from a list. If the index is out of range, this returns the original list unchanged. Otherwise, it returns the updated list.\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "replaceIf",
            "comment": " Replace all values that satisfy a predicate with a replacement value.\n",
            "type": "(a -> Bool) -> a -> List a -> List a"
          },
          {
            "name": "scanl1",
            "comment": " `scanl1` is a variant of `scanl` that has no starting value argument.\n\nCompare:\n\n    List.scanl (+) 0 [1,2,3] == [0,1,3,6]\n    scanl1 (+) [1,2,3] == [1,3,6]\n\n    List.scanl (-) 0 [1,2,3] == [0,1,1,2]\n    scanl1 (-) [1,2,3] == [1,1,2]\n\n    List.scanl (flip (-)) 0 [1,2,3] == [0,-1,-3,-6]\n    scanl1 (flip (-)) [1,2,3] == [1,-1,4]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "scanr",
            "comment": " `scanr` is a right-to-left dual of `scanl`. Note that:\n\n    head (scanr f z xs) == foldr f z xs\n\nExamples:\n\n    scanr (+) 0 [1,2,3] == [6,5,3,0]\n    scanr (-) 0 [1,2,3] == [2,-1,3,0]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "scanr1",
            "comment": " `scanr1` is a variant of `scanr` that has no starting value argument.\n\n    scanr1 (+) [1,2,3] == [6,5,3]\n    scanr1 (-) [1,2,3] == [2,-1,3]\n    scanr1 (flip (-)) [1,2,3] == [0,1,3]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "select",
            "comment": " Return all combinations in the form of (element, rest of the list). Read [Haskell Libraries proposal](https://mail.haskell.org/pipermail/libraries/2008-February/009270.html) for further ideas on how to use this function.\n\n    select [1,2,3,4] == [(1,[2,3,4]),(2,[1,3,4]),(3,[1,2,4]),(4,[1,2,3])]\n",
            "type": "List a -> List ( a, List a )"
          },
          {
            "name": "selectSplit",
            "comment": " Return all combinations in the form of (elements before, element, elements after).\n\n    selectSplit [1,2,3] == [([],1,[2,3]),([1],2,[3]),([1,2],3,[])]\n",
            "type": "List a -> List ( List a, a, List a )"
          },
          {
            "name": "setAt",
            "comment": " Set a value in a list by index. Returns the updated list if the index is in range, or Nothing if it is out of range.\n ",
            "type": "Int -> a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "singleton",
            "comment": " Convert a value to a list containing one value.\n\n    singleton 3 == [3]\n",
            "type": "a -> List a"
          },
          {
            "name": "span",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is longest prefix of that list, for each element of which the predicate holds. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(takeWhile p xs, dropWhile p xs)`.\n\n    span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])\n    span (< 5) [1,2,3] == ([1,2,3],[])\n    span (< 0) [1,2,3] == ([],[1,2,3])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "splitAt",
            "comment": " Take a number and a list, return a tuple of lists, where first part is prefix of the list of length equal the number, and second part is the remainder of the list. `splitAt n xs` is equivalent to `(take n xs, drop n xs)`.\n\n    splitAt 3 [1,2,3,4,5] == ([1,2,3],[4,5])\n    splitAt 1 [1,2,3] == ([1],[2,3])\n    splitAt 3 [1,2,3] == ([1,2,3],[])\n    splitAt 4 [1,2,3] == ([1,2,3],[])\n    splitAt 0 [1,2,3] == ([],[1,2,3])\n    splitAt (-1) [1,2,3] == ([],[1,2,3])\n",
            "type": "Int -> List a -> ( List a, List a )"
          },
          {
            "name": "stripPrefix",
            "comment": " Drop the given prefix from the list. If the list doesn't start with that prefix, return `Nothing`.\n\n    stripPrefix [1,2] [1,2,3,4] == Just [3,4]\n    stripPrefix [1,2,3] [1,2,3,4,5] == Just [4,5]\n    stripPrefix [1,2,3] [1,2,3] == Just []\n    stripPrefix [1,2,3] [1,2] == Nothing\n    stripPrefix [3,2,1] [1,2,3,4,5] == Nothing\n",
            "type": "List a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "subsequences",
            "comment": " Return the list of all subsequences of a list.\n\n    subsequences [1,2,3] == [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "tails",
            "comment": " Return all final segments of a list, from longest to shortest, the list itself first, empty list last.\n\n    tails [1,2,3] == [[1,2,3],[2,3],[3],[]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "takeWhileRight",
            "comment": " Take elements from the right, while predicate still holds.\n\n    takeWhileRight ((<)5) [1..10] == [6,7,8,9,10]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "transpose",
            "comment": " Transpose rows and columns of the list of lists.\n\n    transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\n\nIf some rows are shorter than the following rows, their elements are skipped:\n\n    transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\n",
            "type": "List (List a) -> List (List a)"
          },
          {
            "name": "uncons",
            "comment": " Decompose a list into its head and tail. If the list is empty, return `Nothing`. Otherwise, return `Just (x, xs)`, where `x` is head and `xs` is tail.\n\n    uncons [1,2,3] == Just (1, [2,3])\n    uncons [] = Nothing\n",
            "type": "List a -> Maybe.Maybe ( a, List a )"
          },
          {
            "name": "unfoldr",
            "comment": " The `unfoldr` function is \"dual\" to `foldr`. `foldr` reduces a list to a summary value, `unfoldr` builds a list from a seed. The function takes a function and a starting element. It applies the function to the element. If the result is `Just (a, b)`, `a` is accumulated and the function is applied to `b`. If the result is `Nothing`, the list accumulated so far is returned.\n\n    unfoldr (\\b -> if b == 0 then Nothing else Just (b, b-1)) 5 == [5,4,3,2,1]\n",
            "type": "(b -> Maybe.Maybe ( a, b )) -> b -> List a"
          },
          {
            "name": "unique",
            "comment": " Remove duplicate values, keeping the first instance of each element which appears more than once.\n\n    unique [0,1,1,0,1] == [0,1]\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "uniqueBy",
            "comment": " Drop duplicates where what is considered to be a duplicate is the result of first applying the supplied function to the elements of the list.\n",
            "type": "(a -> comparable) -> List a -> List a"
          },
          {
            "name": "updateAt",
            "comment": " Replace a value at a specific index by calling an update function.\n",
            "type": "Int -> (a -> a) -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "updateIf",
            "comment": " Replace all values that satisfy a predicate by calling an update function.\n",
            "type": "(a -> Bool) -> (a -> a) -> List a -> List a"
          },
          {
            "name": "updateIfIndex",
            "comment": " Replace a value at an index that satisfies a predicate.\n",
            "type": "(Int -> Bool) -> (a -> a) -> List a -> List a"
          },
          {
            "name": "zip",
            "comment": " Take two lists and returns a list of corresponding pairs\n",
            "type": "List a -> List b -> List ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " Take three lists and returns a list of triples\n",
            "type": "List a -> List b -> List c -> List ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " Take four lists and returns a list of quadruples\n",
            "type": "List a -> List b -> List c -> List d -> List ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " Take five lists and returns a list of quintuples\n",
            "type": "List a -> List b -> List c -> List d -> List e -> List ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/list-split",
    "version": "1.0.1",
    "docs": [
      {
        "name": "List.Split",
        "comment": " Split lists into chunks\n\n# Splitters\n@docs chunksOfLeft, chunksOfRight\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chunksOfLeft",
            "comment": " Split list into smaller lists of length `k`, starting from the left.\n\n    chunksOfLeft  3 [1..9] == [[1,2,3],[4,5,6],[7,8,9]]\n    chunksOfLeft  3 [1,2,3,4,5,6,7,8] == [[1,2,3],[4,5,6],[7,8]]\n    chunksOfLeft  3 [] == [[]]\n    chunksOfLeft  0 xs == [[]]\n    chunksOfLeft -1 xs == []\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "chunksOfRight",
            "comment": " Split list into smaller lists of length `k`, starting from the right.\n\n    chunksOfRight  3 [1..9] == [[7,8,9],[4,5,6],[1,2,3]]\n    chunksOfRight  3 [1,2,3,4,5,6,7,8] == [[6,7,8],[3,4,5],[1,2]]\n    chunksOfRight  3 [] == [[]]\n    chunksOfRight  0 xs == [[]]\n    chunksOfRight -1 xs == []\n",
            "type": "Int -> List a -> List (List a)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/maybe-extra",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Maybe.Extra",
        "comment": " Convenience functions for Maybe.\n\n# Common helpers\n@docs (?), join, isNothing, isJust, mapDefault, filter\n\n# Applicative functions\n@docs andMap, next, prev, or\n\n# List and array functions\n@docs maybeToList, maybeToArray, traverse, combine, traverseArray, combineArray\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "?",
            "comment": " Flipped, infix version of `withDefault`.\n\n    head [] ? 0 == 0\n",
            "type": "Maybe.Maybe a -> a -> a"
          },
          {
            "name": "andMap",
            "comment": " Apply the function that is inside `Maybe` to a value that is inside `Maybe`. Return the result inside `Maybe`. If one of the `Maybe` arguments is `Nothing`, return `Nothing`.\n\n    Just ((+)2) `andMap` Just 3 == Just 5\n    Just Nothing `andMap` Just 3 == Nothing\n    Just ((+)2) `andMap` Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `<*>` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe (a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "combine",
            "comment": " Take a list of `Maybe`s and return a `Maybe` with a list of values. `combine == traverse identity`.\n\n    combine [] == Just []\n    combine [Just 1, Just 2, Just 3] == Just [1,2,3]\n    combine [Just 1, Nothing, Just 3] == Nothing\n",
            "type": "List (Maybe.Maybe a) -> Maybe.Maybe (List a)"
          },
          {
            "name": "combineArray",
            "comment": " ",
            "type": "Array.Array (Maybe.Maybe a) -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "filter",
            "comment": " Take a `Maybe` and a predicate function and return a `Maybe` with the original value when a predicate matches.\n\n    filter (\\v -> v == 1) (Just 1) == Just 1\n    filter (\\v -> v == 2) (Just 1) == Nothing\n",
            "type": "(a -> Bool) -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "isJust",
            "comment": " Conveniently check if a `Maybe` matches `Just _`.\n\n    isJust (Just 42) == True\n    isJust (Just []) == True\n    isJust Nothing   == False\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "isNothing",
            "comment": " Conveniently check if a `Maybe` matches `Nothing`.\n\n    isNothing (Just 42) == False\n    isNothing (Just []) == False\n    isNothing Nothing   == True\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "join",
            "comment": " Flattens nested Maybes\n\n    join (Just (Just 1)) == Just 1\n    join (Just Nothing)  == Nothing\n    join Nothing         == Nothing\n",
            "type": "Maybe.Maybe (Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "mapDefault",
            "comment": " Take a default value, a function and a `Maybe`.\nReturn the default value if the `Maybe` is `Nothing`.\nIf the `Maybe` is `Just a`, apply the function on `a` and return the `b`.\nThat is, `mapDefault d f` is equivalent to `Maybe.map f >> Maybe.withDefault d`.\n",
            "type": "b -> (a -> b) -> Maybe.Maybe a -> b"
          },
          {
            "name": "maybeToArray",
            "comment": " Return an empty array on `Nothing` or a list with one element, where the element is the value of `Just`.\n\n    maybeToArray Nothing == Array.fromList []\n    maybeToArray (Just 1) == Array.fromList [1]\n\n",
            "type": "Maybe.Maybe a -> Array.Array a"
          },
          {
            "name": "maybeToList",
            "comment": " Return an empty list on `Nothing` or a list with one element, where the element is the value of `Just`.\n\n    maybeToList Nothing == []\n    maybeToList (Just 1) == [1]\n",
            "type": "Maybe.Maybe a -> List a"
          },
          {
            "name": "next",
            "comment": " Take two `Maybe` values. If the first one equals `Nothing`, return `Nothing`. Otherwise return the second value.\n\n    next (Just 1) (Just 2) == Just 2\n    next Nothing (Just 2) == Nothing\n    next (Just 1) Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `*>` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe b"
          },
          {
            "name": "or",
            "comment": "\n  Like the boolean '||' this will return the first value that is positive ('Just').\n\n    Just 4 `or` Just 5    == Just 4\n    Just 4 `or` Nothing   == Just 4\n    Nothing `or` Just 5   == Just 5\n    Nothing `or` Nothing  == Nothing\n\n  This function sort of works like 'oneOf' but on single 'Maybe's.\n\n  Advanced functional programmers will recognize this as the implementation of 'mplus' for Maybes from the 'MonadPlus' Typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "prev",
            "comment": " Take two `Maybe` values. If the second one equals `Nothing`, return `Nothing`. Otherwise return the first value.\n\n    prev (Just 1) (Just 2) == Just 1\n    prev Nothing (Just 2) == Nothing\n    prev (Just 1) Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `<*` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe a"
          },
          {
            "name": "traverse",
            "comment": " Take a function that returns `Maybe` value and a list. Map a function over each element of the list. Collect the result in the list within `Maybe`.\n\n    traverse (\\x -> Just (x*10)) [1,2,3,4,5] == Just [10,20,30,40,50]\n",
            "type": "(a -> Maybe.Maybe b) -> List a -> Maybe.Maybe (List b)"
          },
          {
            "name": "traverseArray",
            "comment": " ",
            "type": "(a -> Maybe.Maybe b) -> Array.Array a -> Maybe.Maybe (Array.Array b)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/random-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Random.Order",
        "comment": " An extra random generator for the `Order` type.\n\n@docs order\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "order",
            "comment": " Generate a random order with equal probability.\n",
            "type": "Random.Generator Basics.Order"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.String",
        "comment": " Extra randomized functions on strings.\n\n# Create a String\n@docs string, rangeLengthString\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "rangeLengthString",
            "comment": " Generates a random string of random length given the minimum length\nand maximum length and a given character generator.\n",
            "type": "Int -> Int -> Random.Generator Char -> Random.Generator String"
          },
          {
            "name": "string",
            "comment": " Generate a random string of a given length with a given character generator\n\n    fiveLetterEnglishWord = string 5 Random.Char.english\n",
            "type": "Int -> Random.Generator Char -> Random.Generator String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Array",
        "comment": " Extra randomized functions on arrays.\n\n# Create an Array\n@docs array, rangeLengthArray\n\n# Work with an Array\n@docs sample, choose, shuffle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Generate a random array of given size given a random generator\n\n    randomLength5IntArray = array 5 (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "choose",
            "comment": " Sample without replacement: produce a randomly selected element of the\narray, and the array with that element omitted (shifting all later elements\ndown). If the array is empty, the selected element will be `Nothing`.\n",
            "type": "Array.Array a -> Random.Generator ( Maybe.Maybe a, Array.Array a )"
          },
          {
            "name": "rangeLengthArray",
            "comment": " Generate a random array of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "sample",
            "comment": " Sample with replacement: produce a randomly selected element of the\narray, or `Nothing` for an empty array. Takes O(1) time.\n",
            "type": "Array.Array a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "shuffle",
            "comment": " Shuffle the array using the Fisher-Yates algorithm. Takes O(_n_ log _n_)\ntime and O(_n_) additional space.\n",
            "type": "Array.Array a -> Random.Generator (Array.Array a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Set",
        "comment": " Extra randomized functions on sets.\n\n# Create a Set\n@docs set\n\n# Create a Generator\n@docs sample\n\n# Modify a Generator\n@docs notInSet\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "notInSet",
            "comment": " Filter a generator of all values not in a given set.\n",
            "type": "Set.Set comparable -> Random.Generator comparable -> Random.Generator comparable"
          },
          {
            "name": "sample",
            "comment": " Select a value from a set uniformly at random, or `Nothing` for an empty set.\nAnalogous to `Random.Extra.sample` but with sets.\n",
            "type": "Set.Set comparable -> Random.Generator (Maybe.Maybe comparable)"
          },
          {
            "name": "set",
            "comment": " Generate a set of at most the given size from a generator.\n\nThe size of a generated set is limited both by the integer provided and the\nnumber of unique values the generator can produce. It is very likely, but not\nguaranteed, that generated sets will be as big as the smaller of these two limits.\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator (Set.Set comparable)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Date",
        "comment": " Extra randomized functions on dates.\n\n# Generators\n@docs date, day, month, year, hour, hour24, hour12, minute, second\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "date",
            "comment": " Generate a random date given a start date and an end date.\n",
            "type": "Date.Date -> Date.Date -> Random.Generator Date.Date"
          },
          {
            "name": "day",
            "comment": " Generate a random day of the week.\n",
            "type": "Random.Generator Date.Day"
          },
          {
            "name": "hour",
            "comment": " Generate a random hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour12",
            "comment": " Generate a random 12-hour day hour (random int between 0 and 11 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour24",
            "comment": " Generate a random 24-hour day hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "minute",
            "comment": " Generate a random minute (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "month",
            "comment": " Generate a random month of the year.\n",
            "type": "Random.Generator Date.Month"
          },
          {
            "name": "second",
            "comment": " Generate a random second (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "year",
            "comment": " Generate a random year given a start year and end year (alias for `int`)\n",
            "type": "Int -> Int -> Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Dict",
        "comment": " Extra randomized functions on dicts.\n\n# Generators\n@docs dict, rangeLengthDict\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Generate a random dict with given length, key generator, and value generator\n\n    randomLength10StringIntDict = dict 10 (englishWord 10) (int 0 100)\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          },
          {
            "name": "rangeLengthDict",
            "comment": " Generate a random dict of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Char",
        "comment": " Extra randomized functions on characters.\n\n# Basic Generators\n@docs char, lowerCaseLatin, upperCaseLatin, latin, english, ascii, unicode\n\n# Unicode Generators (UTF-8)\n@docs basicLatin, latin1Supplement, latinExtendedA, latinExtendedB, ipaExtensions, spacingModifier, combiningDiacriticalMarks, greekAndCoptic, cyrillic, cyrillicSupplement, armenian, hebrew, arabic, syriac, arabicSupplement, thaana, nko, samaritan, mandaic, arabicExtendedA, devanagari, bengali, gurmukhi, gujarati, oriya, tamil, telugu, kannada, malayalam, sinhala, thai, lao, tibetan, myanmar, georgian, hangulJamo, ethiopic, ethiopicSupplement, cherokee, unifiedCanadianAboriginalSyllabic, ogham, runic, tagalog, hanunoo, buhid, tagbanwa, khmer, mongolian, unifiedCanadianAboriginalSyllabicExtended, limbu, taiLe, newTaiLue, khmerSymbol, buginese, taiTham, balinese, sundanese, batak, lepcha, olChiki, sundaneseSupplement, vedicExtensions, phoneticExtensions, phoneticExtensionsSupplement, combiningDiacriticalMarksSupplement, latinExtendedAdditional, greekExtended, generalPunctuation, superscriptOrSubscript, currencySymbol, combiningDiacriticalMarksForSymbols, letterlikeSymbol, numberForm, arrow, mathematicalOperator, miscellaneousTechnical, controlPicture, opticalCharacterRecognition, enclosedAlphanumeric, boxDrawing, blockElement, geometricShape, miscellaneousSymbol, dingbat, miscellaneousMathematicalSymbolA, supplementalArrowA, braillePattern, supplementalArrowB, miscellaneousMathematicalSymbolB, supplementalMathematicalOperator, miscellaneousSymbolOrArrow, glagolitic, latinExtendedC, coptic, georgianSupplement, tifinagh, ethiopicExtended, cyrillicExtendedA, supplementalPunctuation, cjkRadicalSupplement, kangxiRadical, ideographicDescription, cjkSymbolOrPunctuation, hiragana, katakana, bopomofo, hangulCompatibilityJamo, kanbun, bopomofoExtended, cjkStroke, katakanaPhoneticExtension, enclosedCJKLetterOrMonth, cjkCompatibility, cjkUnifiedIdeographExtensionA, yijingHexagramSymbol, cjkUnifiedIdeograph, yiSyllable, yiRadical, lisu, vai, cyrillicExtendedB, bamum, modifierToneLetter, latinExtendedD, sylotiNagri, commonIndicNumberForm, phagsPa, saurashtra, devanagariExtended, kayahLi, rejang, hangulJamoExtendedA, javanese, cham, myanmarExtendedA, taiViet, meeteiMayekExtension, ethiopicExtendedA, meeteiMayek, hangulSyllable, hangulJamoExtendedB, highSurrogate, highPrivateUseSurrogate, lowSurrogate, privateUseArea, cjkCompatibilityIdeograph, alphabeticPresentationForm, arabicPresentationFormA, variationSelector, verticalForm, combiningHalfMark, cjkCompatibilityForm, smallFormVariant, arabicPresentationFormB, halfwidthOrFullwidthForm, special, linearBSyllable, linearBIdeogram, aegeanNumber, ancientGreekNumber, ancientSymbol, phaistosDisc, lycian, carian, oldItalic, gothic, ugaritic, oldPersian, deseret, shavian, osmanya, cypriotSyllable, imperialAramaic, phoenician, lydian, meroiticHieroglyph, meroiticCursive, kharoshthi, oldSouthArabian, avestan, inscriptionalParthian, inscriptionalPahlavi, oldTurkic, rumiNumericalSymbol, brahmi, kaithi, soraSompeng, chakma, sharada, takri, cuneiform, cuneiformNumberOrPunctuation, egyptianHieroglyph, bamumSupplement, miao, kanaSupplement, byzantineMusicalSymbol, musicalSymbol, ancientGreekMusicalNotationSymbol, taiXuanJingSymbol, countingRodNumeral, mathematicalAlphanumericSymbol, arabicMathematicalAlphabeticSymbol, mahjongTile, dominoTile, playingCard, enclosedAlphanumericSupplement, enclosedIdeographicSupplement, miscellaneousSymbolOrPictograph, emoticon, transportOrMapSymbol, alchemicalSymbol, cjkUnifiedIdeographExtensionB, cjkUnifiedIdeographExtensionC, cjkUnifiedIdeographExtensionD, cjkCompatibilityIdeographSupplement, tag, variationSelectorSupplement, supplementaryPrivateUseAreaA, supplementaryPrivateUseAreaB\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "aegeanNumber",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "alchemicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "alphabeticPresentationForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekMusicalNotationSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekNumber",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicMathematicalAlphabeticSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "armenian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "arrow",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ascii",
            "comment": " Generate a random ASCII Character\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "avestan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "balinese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamum",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamumSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "basicLatin",
            "comment": " UTF-8\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "batak",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bengali",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "blockElement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofoExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "boxDrawing",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "brahmi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "braillePattern",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "buginese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "buhid",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "byzantineMusicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "carian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "chakma",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "char",
            "comment": " Generate a random character within a certain keyCode range\n\n    lowerCaseLetter = char 65 90\n",
            "type": "Int -> Int -> Random.Generator Char"
          },
          {
            "name": "cherokee",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibility",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeographSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkRadicalSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkStroke",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkSymbolOrPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionC",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionD",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarks",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksForSymbols",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningHalfMark",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "commonIndicNumberForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "controlPicture",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "coptic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "countingRodNumeral",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiform",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiformNumberOrPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "currencySymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cypriotSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "deseret",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagari",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagariExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "dingbat",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "dominoTile",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "egyptianHieroglyph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "emoticon",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumeric",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumericSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedCJKLetterOrMonth",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedIdeographicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "english",
            "comment": " Generate a random English Letter (alias for `latin`)\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "generalPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "geometricShape",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgianSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "glagolitic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gothic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekAndCoptic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gujarati",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "gurmukhi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "halfwidthOrFullwidthForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulCompatibilityJamo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hanunoo",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hebrew",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "highPrivateUseSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "highSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "hiragana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ideographicDescription",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "imperialAramaic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalPahlavi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalParthian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ipaExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "javanese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kaithi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanaSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanbun",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kangxiRadical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kannada",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakanaPhoneticExtension",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kayahLi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "kharoshthi",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmer",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmerSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lao",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin",
            "comment": " Generate a random Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin1Supplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedAdditional",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedC",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedD",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lepcha",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "letterlikeSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "limbu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBIdeogram",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lisu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowSurrogate",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowerCaseLatin",
            "comment": " Generate a random lower-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "lycian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "lydian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mahjongTile",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "malayalam",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mandaic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalAlphanumericSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalOperator",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayek",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayekExtension",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticCursive",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticHieroglyph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miao",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrArrow",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrPictograph",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousTechnical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "modifierToneLetter",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "mongolian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "musicalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmar",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmarExtendedA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "newTaiLue",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "nko",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "numberForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ogham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "olChiki",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldItalic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldPersian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldSouthArabian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldTurkic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "opticalCharacterRecognition",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "oriya",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "osmanya",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phagsPa",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phaistosDisc",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoenician",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensionsSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "playingCard",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "privateUseArea",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "rejang",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "rumiNumericalSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "runic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "samaritan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "saurashtra",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sharada",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "shavian",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sinhala",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "smallFormVariant",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "soraSompeng",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "spacingModifier",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "special",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundanese",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundaneseSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "superscriptOrSubscript",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalMathematicalOperator",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalPunctuation",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaA",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaB",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "sylotiNagri",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "syriac",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tag",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagalog",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagbanwa",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiLe",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiTham",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiViet",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiXuanJingSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "takri",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tamil",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "telugu",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "thaana",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "thai",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tibetan",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "tifinagh",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "transportOrMapSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "ugaritic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "unicode",
            "comment": " Generate a random Character in the valid unicode range.\nNote: This can produce garbage values as unicode doesn't use all valid values.\nTo test for specific languages and character sets, use the appropriate one\nfrom the list.\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabic",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabicExtended",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "upperCaseLatin",
            "comment": " Generate a random upper-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "vai",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelector",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelectorSupplement",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "vedicExtensions",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "verticalForm",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiRadical",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiSyllable",
            "comment": " ",
            "type": "Random.Generator Char"
          },
          {
            "name": "yijingHexagramSymbol",
            "comment": " ",
            "type": "Random.Generator Char"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Int",
        "comment": " Extra randomized functions on ints.\n\n# Generators\n@docs anyInt, positiveInt, negativeInt, intGreaterThan, intLessThan\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyInt",
            "comment": " A generator that generates any int that can be generated by the\nrandom generator algorithm.\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "intGreaterThan",
            "comment": " A generator that generates an int greater than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "intLessThan",
            "comment": " A generator that generates an int less than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "negativeInt",
            "comment": " A generator that generates a negative int\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "positiveInt",
            "comment": " A generator that generates a positive int\n",
            "type": "Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Float",
        "comment": " Extra randomized functions on floats.\n\n# Arithmetic Generators\n@docs anyFloat, positiveFloat, negativeFloat, floatGreaterThan, floatLessThan\n\n# Gaussian Generators\n@docs normal, standardNormal\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyFloat",
            "comment": " A generator that generates any float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "floatGreaterThan",
            "comment": " A generator that generates a float greater than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "floatLessThan",
            "comment": " A generator that generates a float less than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "negativeFloat",
            "comment": " A generator that generates any negative float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "normal",
            "comment": " Create a generator of floats that is normally distributed with\ngiven minimum, maximum, and standard deviation.\n",
            "type": "Float -> Float -> Float -> Random.Generator Float"
          },
          {
            "name": "positiveFloat",
            "comment": " A generator that generates any positive float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "standardNormal",
            "comment": " A generator that follows a standard normal distribution (as opposed to\na uniform distribution)\n",
            "type": "Random.Generator Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Extra",
        "comment": " This module provides many common and general-purpose helper functions for\ncore's Random library. You can find even more useful functions for a particular\ntype in the other modules.\n\n# Constant Generators\n@docs constant\n\n# Maps\nFor `map` and `mapN` up through N=5, use the core library.\n@docs map6, andMap\n\n# New Generators\n@docs oneIn, maybe, result, choice\n\n# Working with Lists\n@docs choices, frequency, sample, together, rangeLengthList\n\n# Filtered Generators\n@docs filter\n\n# Flat Maps\nThese functions are like `mapN` except the function you pass in does not return\nan exact value, but instead another generator. That means you can take in several\nrandom arguments to drive more randomness.\n@docs flatMap, flatMap2, flatMap3, flatMap4, flatMap5, flatMap6\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Map over any number of generators.\n\n    randomPerson : Generator Person\n    randomPerson =\n      person `map` genFirstName\n          `andMap` genLastName\n          `andMap` genBirthday\n          `andMap` genPhoneNumber\n          `andMap` genAddress\n          `andMap` genEmail\n",
            "type": "Random.Generator (a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "choice",
            "comment": " Choose between two values with equal probability.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n      choice Heads Tails\n\nNote that this function takes values, not generators. That's because it's meant\nto be a lightweight helper for a specific use. If you need to choose between two\ngenerators, use `choices [gen1, gen2]`.\n",
            "type": "a -> a -> Random.Generator a"
          },
          {
            "name": "choices",
            "comment": " Create a generator that chooses a generator from a list of generators\nwith equal probability.\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List (Random.Generator a) -> Random.Generator a"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always produces the value provided. This is useful\nwhen creating complicated chained generators and you need to handle a simple\ncase. It's also useful for the base case of recursive generators.\n",
            "type": "a -> Random.Generator a"
          },
          {
            "name": "filter",
            "comment": " Filter a generator so that all generated values satisfy the given predicate.\n\n    evens : Generator Int\n    evens =\n      filter (\\i -> i % 2 == 0) (int minInt maxInt)\n\n**Warning:** If the predicate is unsatisfiable, the generator will not\nterminate, your application will crash with a stack overflow, and you will be\nsad. You should also avoid predicates that are merely very difficult to satisfy.\n\n    badCrashingGenerator =\n      filter (\\_ -> False) anotherGenerator\n\n    likelyCrashingGenerator =\n      filter (\\i -> i % 2000 == 0) (int minInt maxInt)\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "flatMap",
            "comment": " ",
            "type": "(a -> Random.Generator b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "flatMap2",
            "comment": " ",
            "type": "(a -> b -> Random.Generator c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "flatMap3",
            "comment": " ",
            "type": "(a -> b -> c -> Random.Generator d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "flatMap4",
            "comment": " ",
            "type": "(a -> b -> c -> d -> Random.Generator e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "flatMap5",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> Random.Generator f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "flatMap6",
            "comment": " ",
            "type": "(a -> b -> c -> d -> e -> f -> Random.Generator g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "frequency",
            "comment": " Create a generator that chooses a generator from a list of generators\nbased on the provided weight. The likelihood of a given generator being\nchosen is its weight divided by the total weight (which doesn't have to equal 1).\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List ( Float, Random.Generator a ) -> Random.Generator a"
          },
          {
            "name": "map6",
            "comment": " Map a function of six arguments over six generators.\n",
            "type": "(a -> b -> c -> d -> e -> f -> g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "maybe",
            "comment": " Produce `Just` a value on `True`, and `Nothing` on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.Generator Bool -> Random.Generator a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "oneIn",
            "comment": " Produce `True` one-in-n times on average.\n\nDo not pass a value less then one to this function.\n\n    flippedHeads = oneIn 2\n    rolled6 = oneIn 6\n",
            "type": "Int -> Random.Generator Bool"
          },
          {
            "name": "rangeLengthList",
            "comment": " Generate a random list of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (List a)"
          },
          {
            "name": "result",
            "comment": " Produce an `Ok` a value on `True`, and an `Err` value on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.Generator Bool -> Random.Generator err -> Random.Generator val -> Random.Generator (Result.Result err val)"
          },
          {
            "name": "sample",
            "comment": " Given a list, choose an element uniformly at random. `Nothing` is only\nproduced if the list is empty.\n\n    type Direction = North | South | East | West\n\n    direction : Generator Direction\n    direction =\n      sample [North, South, East, West]\n        |> map (Maybe.withDefault North)\n\n",
            "type": "List a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "together",
            "comment": " Turn a list of generators into a generator of lists.\n",
            "type": "List (Random.Generator a) -> Random.Generator (List a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Random.Color",
        "comment": " Extra randomized functions on colors.\n\n# Random Colors by Components\n@docs rgb, rgba, hsl, hsla\n\n# Random Colors by Shade\n@docs greyscale, grayscale, red, green, blue\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "blue",
            "comment": " Generate a random shade of blue.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Alias for greyscale.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "green",
            "comment": " Generate a random shade of green.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Generate a random shade of grey\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Generate a random non-transparent color by random HSL values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Generate a random transparent color by random HSLA values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "red",
            "comment": " Generate a random shade of red.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Generate a random non-transparent color by random RGB values.\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Generate a random transparent color by random RGBA values.\n",
            "type": "Random.Generator Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/result-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Result.Extra",
        "comment": " Convenience functions for working with Result\n\n# Common Helpers\n@docs isOk, isErr, extract, mapBoth, combine\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "combine",
            "comment": " Combine a list of results into a single result (holding a list).\n",
            "type": "List (Result.Result x a) -> Result.Result x (List a)"
          },
          {
            "name": "extract",
            "comment": " Turn a `Result e a` to an `a`, by applying the conversion\nfunction specified to the `e`.\n",
            "type": "(e -> a) -> Result.Result e a -> a"
          },
          {
            "name": "isErr",
            "comment": " Check whether the result is `Err` without unwrapping it.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "isOk",
            "comment": " Check whether the result is `Ok` without unwrapping it.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " Convert a `Result e a` to a `b` by applying either a function\nif the `Result` is an `Err` or a function if the `Result` is `Ok`.\nBoth of these functions must return the same type.\n",
            "type": "(e -> b) -> (a -> b) -> Result.Result e a -> b"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/shrink",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Shrink",
        "comment": " Library containing a collection of basic shrinking strategies and\nhelper functions to help you construct shrinking strategies.\n\n# Shrinking Basics\n@docs Shrinker, shrink\n\n# Shrinkers\n@docs noShrink, unit, bool, order, int, atLeastInt, float, atLeastFloat, char, atLeastChar, character, string, maybe, result, lazylist, list, array, tuple, tuple3, tuple4, tuple5\n\n# Functions on Shrinkers\n@docs convert, keepIf, dropIf, merge, map, andMap\n\n",
        "aliases": [
          {
            "name": "Shrinker",
            "comment": " The shrinker type.\nA shrinker is a function that takes a value and returns a list of values that\nare in some sense \"smaller\" than the given value. If there are no such values\nconceptually, then the shrinker should just return the empty list.\n",
            "args": [
              "a"
            ],
            "type": "a -> Lazy.List.LazyList a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Apply a lazy list of functions on a lazy list of values.\n\nThis is useful in order to compose shrinkers, especially when used in\nconjunction with `andMap`.\n",
            "type": "Lazy.List.LazyList (a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "array",
            "comment": " Array shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Arrays.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Array.Array a)"
          },
          {
            "name": "atLeastChar",
            "comment": " Construct a shrinker of chars which considers the given char to\nbe most minimal.\n",
            "type": "Char -> Shrink.Shrinker Char"
          },
          {
            "name": "atLeastFloat",
            "comment": " Construct a shrinker of floats which considers the given float to\nbe most minimal.\n",
            "type": "Float -> Shrink.Shrinker Float"
          },
          {
            "name": "atLeastInt",
            "comment": " Construct a shrinker of ints which considers the given int to\nbe most minimal.\n",
            "type": "Int -> Shrink.Shrinker Int"
          },
          {
            "name": "bool",
            "comment": " Shrinker of bools.\n",
            "type": "Shrink.Shrinker Bool"
          },
          {
            "name": "char",
            "comment": " Shrinker of chars.\n",
            "type": "Shrink.Shrinker Char"
          },
          {
            "name": "character",
            "comment": " Shrinker of chars which considers the empty space as the most\nminimal char and omits the control key codes.\n\nEquivalent to:\n\n    atLeastChar (Char.fromCode 32)\n",
            "type": "Shrink.Shrinker Char"
          },
          {
            "name": "convert",
            "comment": " Convert a Shrinker of a's into a Shrinker of b's using two inverse functions.\n\nIf you use this function as follows:\n\n    shrinkerB = f g shrinkerA\n\nMake sure that\n\n    `f(g(x)) == x` for all x\n\nOr else this process will generate garbage.\n",
            "type": "(a -> b) -> (b -> a) -> Shrink.Shrinker a -> Shrink.Shrinker b"
          },
          {
            "name": "dropIf",
            "comment": " Filter out the results of a shrinker. The resulting shrinker\nwill only throw away shrinks which satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "float",
            "comment": " Shrinker of floats.\n",
            "type": "Shrink.Shrinker Float"
          },
          {
            "name": "int",
            "comment": " Shrinker of integers.\n",
            "type": "Shrink.Shrinker Int"
          },
          {
            "name": "keepIf",
            "comment": " Filter out the results of a shrinker. The resulting shrinker\nwill only produce shrinks which satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "lazylist",
            "comment": " Lazy List shrinker constructor. Takes a shrinker of values and returns a\nshrinker of Lazy Lists. The lazy list being shrunk must be finite. (I mean\nreally, how do you shrink infinity?)\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Lazy.List.LazyList a)"
          },
          {
            "name": "list",
            "comment": " List shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Lists.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (List a)"
          },
          {
            "name": "map",
            "comment": " Re-export of `Lazy.List.map`\nThis is useful in order to compose shrinkers, especially when used in\nconjunction with `andMap`. For example:\n\n    type alias Vector =\n      { x : Float\n      , y : Float\n      , z : Float\n      }\n\n    vector : Shrinker Vector\n    vector {x,y,z} =\n      Vector\n        `map`    float x\n        `andMap` float y\n        `andMap` float z\n",
            "type": "(a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "maybe",
            "comment": " Maybe shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Maybes.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Maybe.Maybe a)"
          },
          {
            "name": "merge",
            "comment": " Merge two shrinkers. Generates all the values in the first\nshrinker, and then all the non-duplicated values in the second\nshrinker.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "noShrink",
            "comment": " Perform no shrinking. Equivalent to the empty lazy list.\n",
            "type": "Shrink.Shrinker a"
          },
          {
            "name": "order",
            "comment": " Shrinker of `Order` values.\n",
            "type": "Shrink.Shrinker Basics.Order"
          },
          {
            "name": "result",
            "comment": " Result shrinker constructor. Takes a shrinker of errors and a shrinker of\nvalues and returns a shrinker of Results.\n",
            "type": "Shrink.Shrinker error -> Shrink.Shrinker value -> Shrink.Shrinker (Result.Result error value)"
          },
          {
            "name": "shrink",
            "comment": " Perform shrinking. Takes a predicate that returns `True` if you want\nshrinking to continue (e.g. the test failed). Also takes a shrinker and a value\nto shrink. It returns the shrunken value, or the input value if no shrunken\nvalues that satisfy the predicate are found.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> a -> a"
          },
          {
            "name": "string",
            "comment": " Shrinker of strings. Considers the empty string to be the most\nminimal string and the space to be the most minimal char.\n\nEquivalent to:\n\n    convert String.fromList String.toList (list character)\n",
            "type": "Shrink.Shrinker String"
          },
          {
            "name": "tuple",
            "comment": " 2-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a, Shrink.Shrinker b ) -> Shrink.Shrinker ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " 3-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a, Shrink.Shrinker b, Shrink.Shrinker c ) -> Shrink.Shrinker ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " 4-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a , Shrink.Shrinker b , Shrink.Shrinker c , Shrink.Shrinker d ) -> Shrink.Shrinker ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " 5-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a , Shrink.Shrinker b , Shrink.Shrinker c , Shrink.Shrinker d , Shrink.Shrinker e ) -> Shrink.Shrinker ( a, b, c, d, e )"
          },
          {
            "name": "unit",
            "comment": " Shrink the empty tuple. Equivalent to `noShrink`.\n",
            "type": "Shrink.Shrinker ()"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/string-extra",
    "version": "1.0.2",
    "docs": [
      {
        "name": "String.Extra",
        "comment": " Additional functions for working with Strings\n\n## Change words casing\n\n@docs toSentenceCase, toTitleCase, decapitalize\n\n## Inflector functions\n\nFunctions borrowed from the Rails Inflector class\n\n@docs camelize, classify, underscored, dasherize, humanize\n\n## Replace and Splice\n\n@docs replace, replaceSlice, insertAt, clean\n\n## Splitting\n\n@docs break, softBreak\n\n## Wrapping\n\n@docs wrap, wrapWith, softWrap, softWrapWith, quote, surround\n\n## Checks\n\n@docs isBlank, countOccurrences\n\n## Formatting\n\n@docs clean, unquote, unsurround, unindent, ellipsis, softEllipsis, ellipsisWith, stripTags\n\n## Converting Lists\n\n@docs toSentence, toSentenceOxford\n\n## Finding\n\n@docs rightOf, leftOf, rightOfBack, leftOfBack\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "break",
            "comment": " Breaks a string into a list of strings of maximum the provided size.\n\n    break 10 \"The quick brown fox\" == [\"The quick \", \"brown fox\"]\n    break 2 \"\" == [\"\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "camelize",
            "comment": " Converts underscored or dasherized string to a camelized one.\n\n   camelize \"-moz-transform\" == \"MozTransform\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "classify",
            "comment": " Converts string to camelized string starting with an uppercase.\nAll non word characters will be stripped out of the original string.\n\n    classify \"some_class_name\" == \"SomeClassName\"\n    classify \"myLittleCamel.class.name\" == \"MyLittleCamelClassName\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "clean",
            "comment": " Trims the whitespace of both sides of the string and compresses\nreapeated whitespace internally to a single whitespace char.\n\n    clean \" The   quick brown   fox    \" == \"The quick brown fox\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "countOccurrences",
            "comment": " Returns the number of occurrences of a substring in another string\n\n    countOccurrences \"Hello\" \"Hello World\" == 1\n    countOccurrences \"o\" \"Hello World\" == 2\n",
            "type": "String -> String -> Int"
          },
          {
            "name": "dasherize",
            "comment": " Returns a string joined by dashes after separating it by its uppercase characters.\nAny sequence of spaces or underscored will also be converted to a single dash.\nThe final string will be lowercased\n\n    dasherize \"SomeClassName\" == \"-some-class-name\"\n    dasherize \"some_class_name\" = \"some-class-name\"\n    dasherize \"someClass name\" = \"some-class-name\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "decapitalize",
            "comment": " Make a string's first character lowercase.\n\n    decapitalize \"This is a phrase\" == \"this is a phrase\"\n    decapitalize \"Hello, World\" == \"hello, World\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "ellipsis",
            "comment": " Truncates the string at the specified length and appends\nthree dots only if the tructated string + the 3 dots have exactly\nthe desired lenght.\n\nThe resulting string will have at most the specified lenght\n\n    ellipsis 5 \"Hello World\" == \"Hello...\"\n    ellipsis 10 \"Hello World\" == \"Hello W...\"\n    ellipsis 10 \"Hello\" == \"Hello\"\n    ellipsis 8 \"Hello World\" == \"Hello World\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "ellipsisWith",
            "comment": " Truncates the string at the specified lenght and adds the append\nstring only if the combined lenght of the truncated string and the append\nstring have exactly the desired lenght.\n\nThe resulting string will have at most the specified lenght\n\n    ellipsisWith 5 \" ..\" \"Hello World\" == \"Hello ..\"\n    ellipsisWith 10 \" ..\"  \"Hello World\" == \"Hello W...\"\n    ellipsisWith 10 \" ..\" \"Hello\" == \"Hello\"\n    ellipsisWith 8 \" ..\" \"Hello World\" == \"Hello World\"\n\n",
            "type": "Int -> String -> String -> String"
          },
          {
            "name": "humanize",
            "comment": " Converts an underscored, camelized, or dasherized string into one that can be read by humans.\nAlso removes beginning and ending whitespace, and removes the postfix '_id'.\nThe first character will be capitalized\n\n    humanize \"this_is_great\" == \"This is great\"\n    humanize \"ThisIsGreat\" = \"This is great\"\n    humanize \"this-is-great\" = \"This is great\"\n    humanize \"author_id\" = \"Author\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "insertAt",
            "comment": " Inserts a substring at the specified index.\n\n    insertAt \"world\" 6 \"Hello \" == \"Hello world\"\n",
            "type": "String -> Int -> String -> String"
          },
          {
            "name": "isBlank",
            "comment": " Tests if a string is empty or only contains whitespace\n\n    isBlank \"\" == True\n    isBlank \"\\n\" == True\n    isBlank \"  \" == True\n    isBlank \" a\" == False\n\n",
            "type": "String -> Bool"
          },
          {
            "name": "leftOf",
            "comment": " Searches a string from left to right for a pattern and returns a substring\nconsisting of the characters in the string that are to the left of the pattern.\n\n    leftOf \"_\" \"This_is_a_test_string\" == \"This\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "leftOfBack",
            "comment": " Searches a string from right to left for a pattern and returns a substring\nconsisting of the characters in the string that are to the right of the pattern.\n\n    leftOfBack \"_\" \"This_is_a_test_string\" == \"This_is_a_test\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "quote",
            "comment": " Adds quotes to a string.\n\n    quote \"foo\" == \"\\\"barfoobar\\\"\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "replace",
            "comment": " Replace all occurrences of the search string with the substitution string.\n\n    replace \"Mary\" \"Sue\" \"Hello, Mary\" == \"Hello, Sue\"\n\n",
            "type": "String -> String -> String -> String"
          },
          {
            "name": "replaceSlice",
            "comment": " Replace text within a portion of a string given a substitution\nstring, a start index and an end index.\n\n    replaceSlice \"Sue\" 4 6 \"Hi, Bob\" == \"Hi, Sue\"\n    replaceSlice \"elephants\" 0  6 \"snakes on a plane!\" == \"elephants on a plane!\"\n    replaceSlice \"under\" 7  9 \"snakes on a plane!\" == \"snakes under a plane!\"\n\n",
            "type": "String -> Int -> Int -> String -> String"
          },
          {
            "name": "rightOf",
            "comment": " Searches a string from left to right for a pattern and returns a substring\nconsisting of the characters in the string that are to the right of the pattern.\n\n    rightOf \"_\" \"This_is_a_test_string\" == \"is_a_test_string\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "rightOfBack",
            "comment": " Searches a string from right to left for a pattern and returns a substring\nconsisting of the characters in the string that are to the right of the pattern.\n\n    rightOfBack \"_\" \"This_is_a_test_string\" == \"string\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "softBreak",
            "comment": " Breaks a string into a list of strings of maximum the provided size,\nwithout cutting words at the edge.\n\n    softBreak 6 \"The quick brown fox\" == [\"The quick\", \" brown\", \" fox\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "softEllipsis",
            "comment": " Truncates the string at the specified length and appends\nthree dots only if the tructated string + the 3 dots have exactly\nthe desired lenght.\n\nIn constrast to `ellipsis`, this method will produced unfinished words,\ninstead, it will find the closest complete word and apply the ellipsis from\nthere.\n\nAdditionally, it will remove any trailing whitespace and punctuation characters\nat the end of the truncated string.\n\nThe resulting stirng can in some cases exceed the specifed lenght, by at most\nthree characters.\n\n    softEllipsis 5 \"Hello, World\" == \"Hello...\"\n    softEllipsis 8 \"Hello, World\" == \"Hello...\"\n    softEllipsis 15 \"Hello, cruel world\" == \"Hello, cruel...\"\n    softEllipsis 10 \"Hello\" == \"Hello\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "softWrap",
            "comment": " Chops a given string into parts of a given width without breaking works apart,\nand then seperating them using a new line.\n\n    softWrap 7 \"My very long text\" === \"My very\\nlong text\"\n    softWrap 3 \"Hello World\" === \"Hello \\nWorld\"\n    softWrap 100 \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "softWrapWith",
            "comment": " Chops a given string into parts of a given width without breaking works apart,\nand then seperating them using the given separator.\n\n    softWrapWith 7 \"...\" \"My very long text\" === \"My very...long text\"\n    softWrapWith 3 \"\\n\" \"Hello World\" === \"Hello \\nWorld\"\n    softWrapWith 100 \"\\t\" \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String -> String"
          },
          {
            "name": "stripTags",
            "comment": " Removes all HTML tags from the string, preserving the text inside them.\n\n    stripTags \"a <a href=\\\"#\\\">link</a>\" == \"a link\"\n    stripTags \"<script>alert('hello world!')</script> == \"alert('hello world!')\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "surround",
            "comment": " Surrounds a string with another string.\n\n    surround \"bar\" \"foo\" == \"barfoobar\"\n\n",
            "type": "String -> String -> String"
          },
          {
            "name": "toSentence",
            "comment": " Converts a list of strings into a human formatted readable list\n\n    toSentence [] == \"\"\n    toSentence [\"lions\"] == \"lions\"\n    toSentence [\"lions\", \"tigers\"] == \"lions and tigers\"\n    toSentence [\"lions\", \"tigers\", \"bears\"] == \"lions, tigers and bears\"\n\n",
            "type": "List String -> String"
          },
          {
            "name": "toSentenceCase",
            "comment": " Make a string's first character uppercase\n\n    toSentenceCase \"this is a phrase\" == \"This is a phrase\"\n    toSentenceCase \"hello, world\" == \"Hello, world\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "toSentenceOxford",
            "comment": " Converts a list of strings into a human formatted readable list using an oxford comma\n\n    toSentenceOxford [] == \"\"\n    toSentenceOxford [\"lions\"] == \"lions\"\n    toSentenceOxford [\"lions\", \"tigers\"] == \"lions and tigers\"\n    toSentenceOxford [\"lions\", \"tigers\", \"bears\"] == \"lions, tigers, and bears\"\n\n",
            "type": "List String -> String"
          },
          {
            "name": "toTitleCase",
            "comment": " Uppercase the first character of each word in a string\n\n    toTitleCase \"this is a phrase\" == \"This Is A Phrase\"\n    toTitleCase \"hello, world\" == \"Hello, World\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "underscored",
            "comment": " Returns a string joined by underscores after separating it by its uppercase characters.\nAny sequence of spaces or dashes will also be converted to a single underscore.\nThe final string will be lowercased\n\n    underscore \"SomeClassName\" == \"some_class_name\"\n    underscore \"some-class-name\" == \"some_class_name\"\n    underscore \"SomeClass name\" == \"some_class_name\n\n",
            "type": "String -> String"
          },
          {
            "name": "unindent",
            "comment": " Removes the least sequence of leading spaces or tabs on each line\nof the string, so that at least one of the lines will not have any\nleading spaces nor tabs and the rest of the lines will have the same\namount of indentation removed.\n\n    unindent \"  Hello\\n    World \" == \"Hello\\n  World\"\n    unindent \"\\t\\tHello\\n\\t\\t\\t\\tWorld\" == \"Hello\\n\\t\\tWorld\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "unquote",
            "comment": " Removes quotes that surround a string.\n\n    unquote \"\\\"foo\\\"\" == \"foo\"\n    unquote \"\\\"foo\\\"bar\\\"\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "unsurround",
            "comment": " Removes surrounding strings from another string.\n\n    unsurround \"foo\" \"foobarfoo\" == \"bar\"\n\n",
            "type": "String -> String -> String"
          },
          {
            "name": "wrap",
            "comment": " Chops a given string into parts of a given width, seperating them using a\nnew line.\n\n    wrap 7 \"My very long text\" === \"My very\\nlong te\\nxt\"\n    wrap 100 \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "wrapWith",
            "comment": " Separates a string into parts of a given width, using a given seperator.\n\nLook at `wrap` if you just want to wrap using newlines.\n\n    wrapWith 7 \"\\n\" \"My very long text\" === \"My very\\nlong text\"\n    wrapWith 100 \"\\n\" \"Too short\" === \"Too short\"\n\n",
            "type": "Int -> String -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-community/svg-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Svg.Extra",
        "comment": " Convenience functionality on\n[`Svg`](http://package.elm-lang.org/packages/elm-lang/svg/latest/Svg#Svg)\n\n@docs static\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "static",
            "comment": " Embedding static svg.\n\nThe type argument\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\nin `Svg Never` tells us that the svg has no event handlers attached,\nit will not generate any messages. We may want such static svg to be\nembedded into or combined with arbitrary other svg, while using types\nto enforce the staticness. That is what this function provides.\n\n*Note:* To call this function, the argument need not be literally of type\n`Svg Never`. It suffices if it is a fully polymorphic (in the message type)\n`Svg` value. For example, this works: `static (Svg.text \"abcdef\")`.\n",
            "type": "Svg.Svg Basics.Never -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-community/undo-redo",
    "version": "1.0.0",
    "docs": [
      {
        "name": "UndoList.Random",
        "comment": " Random UndoList Submodule.\n\nProvides random undolist and undolist msg generators.\n\n# Generators\n@docs undolist, msg\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Generate random undolist msgs given an msg generator.\n\nGenerates msgs with the following probabilities:\n\n- Reset  : 5%\n- Forget : 5%\n- Undo   : 30%\n- Redo   : 30%\n- New    : 30%\n",
            "type": "Random.Generator msg -> Random.Generator (UndoList.Msg msg)"
          },
          {
            "name": "undolist",
            "comment": " Random UndoList Generator constructor.\nGiven a generator of state, a length for the past, and a length for the future,\ngenerate a random undolist of states.\n\n    undolist pastLength futureLength generator\n",
            "type": "Int -> Int -> Random.Generator state -> Random.Generator (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "UndoList.Encode",
        "comment": " Encode UndoList submodule.\n\nProvides JSON encoders for Timelines and UndoList Messages.\n\n# Encoders\n@docs undolist, msg\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Encode an UndoList Msg of JSON values.\nBest paired with the `mapMsg` function from UndoList.\n\n    encodeMsg msgEncoder =\n      UndoList.mapMsg msgEncoder >> msg\n",
            "type": "UndoList.Msg Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "undolist",
            "comment": " Encode an undolist of JSON values.\nBest paired with the `map` function from UndoList.\n\n    encodeUndoList stateEncoder  =\n      UndoList.map stateEncoder >> undolist\n",
            "type": "UndoList.UndoList Json.Encode.Value -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "UndoList.Decode",
        "comment": " Decode UndoList submodule.\n\nProvides JSON decoders for Timelines and UndoList Messages.\n\n# Decoders\n@docs undolist, msg\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "msg",
            "comment": " Decode an undo-list msg given a decoder of messages.\n",
            "type": "Json.Decode.Decoder msg -> Json.Decode.Decoder (UndoList.Msg msg)"
          },
          {
            "name": "undolist",
            "comment": " Decode an undo-list given a decoder of state.\n",
            "type": "Json.Decode.Decoder state -> Json.Decode.Decoder (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "UndoList",
        "comment": " UndoList Data Structure.\n\n# Definition\n@docs UndoList\n\n# Basic Operations\n@docs undo, redo, fresh, new, forget, reset\n\n# Query UndoList\n@docs hasPast, hasFuture, length, lengthPast, lengthFuture\n\n# Messages\n@docs Msg, mapMsg\n\n# Functional Operations\n@docs map, mapPresent, update, connect, reduce, foldl, foldr, reverse, flatten, flatMap, andThen, map2, andMap\n\n# Shorthands\n@docs view\n\n# Conversions\n@docs toList, fromList\n",
        "aliases": [
          {
            "name": "UndoList",
            "comment": " The UndoList data structure.\nAn UndoList has:\n\n1. A list of past states\n2. A present state\n3. A list of future states\n\n\nThe head of the past list is the most recent state and the head of the future\nlist is the next state. (i.e., the tails of both lists point away from the\npresent)\n",
            "args": [
              "state"
            ],
            "type": "{ past : List state, present : state, future : List state }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Simple UndoList Msg type. This is a simple type that can be used for\nmost use cases. This works best when paired with the `update` function as\n`update` will perform the corresponding operations on the undolist automatically.\n\nConsider using your own data type only if you really need it.\n",
            "args": [
              "msg"
            ],
            "cases": [
              [
                "Reset",
                []
              ],
              [
                "Redo",
                []
              ],
              [
                "Undo",
                []
              ],
              [
                "Forget",
                []
              ],
              [
                "New",
                [
                  "msg"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Map a function over any number of undo-lists.\n\n    map f xs `andMap` ys `andMap` zs\n",
            "type": "UndoList.UndoList (a -> b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "andThen",
            "comment": " Chain undo-list operations.\n",
            "type": "UndoList.UndoList a -> (a -> UndoList.UndoList b) -> UndoList.UndoList b"
          },
          {
            "name": "connect",
            "comment": " Connect two undo-lists end to end. The present of the first undolist is\nconsidered the present of the output undolist.\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "flatMap",
            "comment": " Map over an undo-list and then flatten the result.\n",
            "type": "(a -> UndoList.UndoList b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "flatten",
            "comment": " Flatten an undo-list of undo-lists into a single undo-list.\n",
            "type": "UndoList.UndoList (UndoList.UndoList a) -> UndoList.UndoList a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an undo-list from the left (or from the past)\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an undo-list from the right (or from the future)\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "forget",
            "comment": " Forget the past and look to the future!\nThis simply clears the past list.\n\ni.e.\n    forget (UndoList [3,2,1] 4 [5,6]) == UndoList [] 4 [5,6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "fresh",
            "comment": " Turn a state into an undo-list with neither past nor future.\n",
            "type": "state -> UndoList.UndoList state"
          },
          {
            "name": "fromList",
            "comment": " Convert a list to undolist. The provided state is used as the present\nstate and the list is used as the future states.\n\n    fromList 1 [2,3,4] == UndoList [] 1 [2,3,4]\n",
            "type": "state -> List state -> UndoList.UndoList state"
          },
          {
            "name": "hasFuture",
            "comment": " Check if the undo-list has any future states.\n",
            "type": "UndoList.UndoList state -> Bool"
          },
          {
            "name": "hasPast",
            "comment": " Check if the undo-list has any past states.\n",
            "type": "UndoList.UndoList state -> Bool"
          },
          {
            "name": "length",
            "comment": " Get the full length of an undo-list\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "lengthFuture",
            "comment": " Get the length of the future\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "lengthPast",
            "comment": " Get the length of the past.\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function over an undo-list.\nBe careful with this. The function will be applied to the past and the future\nas well. If you just want to change the present, use `mapPresent`.\n\nA good use case for `map` is to encode an undo-list as JSON.\n\nExample:\n\n    import UndoList.Encode as Encode\n\n    encode encoder undolist =\n      map encoder undolist\n      |> Encode.undolist\n",
            "type": "(a -> b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "map2",
            "comment": " Map a function over a pair of undo-lists.\n",
            "type": "(a -> b -> c) -> UndoList.UndoList a -> UndoList.UndoList b -> UndoList.UndoList c"
          },
          {
            "name": "mapMsg",
            "comment": " Map a function over a msg.\n",
            "type": "(a -> b) -> UndoList.Msg a -> UndoList.Msg b"
          },
          {
            "name": "mapPresent",
            "comment": " Apply a function only to the present.\n",
            "type": "(a -> a) -> UndoList.UndoList a -> UndoList.UndoList a"
          },
          {
            "name": "new",
            "comment": " Add a new present state to the undo-list, turning the old\npresent state into a past state and erasing the future.\n",
            "type": "state -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "redo",
            "comment": " If the undo-list has any future states, set the next\nfuture state as the current state and turn the old present state\ninto a past state.\n\ni.e.\n\n    redo (UndoList [3,2,1] 4 [5,6]) == UndoList [4,3,2,1] 5 [6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "reduce",
            "comment": " Alias for `foldl`\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "reset",
            "comment": " Reset the undo-list by returning to the very first state\nand clearing all other states.\n\ni.e.\n\n    reset (UndoList [3,2,1] 4 [5,6]) == UndoList [] 1 []\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "reverse",
            "comment": " Reverse an undo-list.\n",
            "type": "UndoList.UndoList a -> UndoList.UndoList a"
          },
          {
            "name": "toList",
            "comment": " Convert an undo-list to a list :\n\n    toList (UndoList [3,2,1] 4 [5,6]) == [1,2,3,4,5,6]\n",
            "type": "UndoList.UndoList state -> List state"
          },
          {
            "name": "undo",
            "comment": " If the undolist has any past states, set the most recent past\nstate as the current state and turn the old present state into\na future state.\n\ni.e.\n\n    undo (UndoList [3,2,1] 4 [5,6]) == UndoList [2,1] 3 [4,5,6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "update",
            "comment": " Convert a function that updates the state to a function that updates an undo-list.\nThis is very useful to allow you to write update functions that only deal with\nthe individual states of your system and treat undo/redo as an add on.\n\n\nExample:\n\n    -- Your update function\n    update msg state =\n      case msg of\n        ... -- some implementation\n\n    -- Your new update function\n    update' = UndoList.update update\n\n",
            "type": "(msg -> state -> state) -> UndoList.Msg msg -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "view",
            "comment": " Function to help not having to deal with the full undolist from with\nyour actual view function.\n\nSuppose you define the following:\n\n    initial : model\n    update : msg -> model -> model\n    view : model -> Html (UndoList.Msg msg)\n\nThen, you could construct the main function as follows:\n\n    main =\n        Html.beginnerProgram\n            { model = UndoList.fresh initial\n            , update = UndoList.update update\n            , view = UndoList.view view\n            }\n\n",
            "type": "(state -> view) -> UndoList.UndoList state -> view"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/animation-frame",
    "version": "1.0.0",
    "docs": [
      {
        "name": "AnimationFrame",
        "comment": " Browsers have their own render loop, repainting things as fast as possible.\nIf you want smooth animations in your application, it is helpful to sync up\nwith the browsers natural refresh rate. The subscriptions in this library fire\nin step with the browser so you can make sure you are not doing extra animation\nframes.\n\n**Note:** The subscriptions in this library hook into JavaScript's\n`requestAnimationFrame` function.\n\n# Animation Subscriptions\n@docs times, diffs\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "diffs",
            "comment": " Subscribe to the time diffs between animation frames, given in lockstep\nwith the browser's natural rerender speed.\n",
            "type": "(Time.Time -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "times",
            "comment": " Subscribe to the current time, given in lockstep with the browser's natural\nrerender speed.\n",
            "type": "(Time.Time -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/core",
    "version": "4.0.5",
    "docs": [
      {
        "name": "Random",
        "comment": " This library helps you generate pseudo-random values.\n\nThis library is all about building [`generators`](#Generator) for whatever\ntype of values you need. There are a bunch of primitive generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier\ngenerators with functions like [`list`](#list) and [`map`](#map).\n\nIt may be helpful to [read about JSON decoders][json] because they work very\nsimilarly.\n\n[json]: https://evancz.gitbooks.io/an-introduction-to-elm/content/interop/json.html\n\n> *Note:* This is an implementation of the Portable Combined Generator of\nL'Ecuyer for 32-bit computers. It is almost a direct translation from the\n[System.Random](http://hackage.haskell.org/package/random-1.0.1.1/docs/System-Random.html)\nmodule. It has a period of roughly 2.30584e18.\n\n# Generators\n@docs Generator\n\n# Primitive Generators\n@docs bool, int, float\n\n# Data Structure Generators\n@docs pair, list\n\n# Custom Generators\n@docs map, map2, map3, map4, map5, andThen\n\n# Generate Values\n@docs generate\n\n# Generate Values Manually\n@docs step, Seed, initialSeed\n\n# Constants\n@docs maxInt, minInt\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n\nTo actually *run* a generator and produce the random values, you need to use\nfunctions like [`generate`](#generate) and [`initialSeed`](#initialSeed).\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Seed",
            "comment": " A `Seed` is the source of randomness in this whole system. Whenever\nyou want to use a generator, you need to pair it with a seed.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain random operations, threading through the seed. In the following\nexample, we will generate a random letter by putting together uppercase and\nlowercase letters.\n\n    letter : Generator Char\n    letter =\n      bool `andThen` \\b ->\n        if b then uppercaseLetter else lowercaseLetter\n\n    -- bool : Generator Bool\n    -- uppercaseLetter : Generator Char\n    -- lowercaseLetter : Generator Char\n",
            "type": "Random.Generator a -> (a -> Random.Generator b) -> Random.Generator b"
          },
          {
            "name": "bool",
            "comment": " Create a generator that produces boolean values. The following example\nsimulates a coin flip that may land heads or tails.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n        map (\\b -> if b then Heads else Tails) bool\n",
            "type": "Random.Generator Bool"
          },
          {
            "name": "float",
            "comment": " Generate floats in a given range. The following example is a generator\nthat produces decimals between 0 and 1.\n\n    probability : Generator Float\n    probability =\n        float 0 1\n",
            "type": "Float -> Float -> Random.Generator Float"
          },
          {
            "name": "generate",
            "comment": " Create a command that will generate random values.\n\nRead more about how to use this in your programs in [The Elm Architecture\ntutorial][arch] which has a section specifically [about random values][rand].\n\n[arch]: https://evancz.gitbooks.io/an-introduction-to-elm/content/architecture/index.html\n[rand]: https://evancz.gitbooks.io/an-introduction-to-elm/content/architecture/effects/random.html\n",
            "type": "(a -> msg) -> Random.Generator a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "initialSeed",
            "comment": " Create a &ldquo;seed&rdquo; of randomness which makes it possible to\ngenerate random values. If you use the same seed many times, it will result\nin the same thing every time! A good way to get an unexpected seed is to use\nthe current time.\n",
            "type": "Int -> Random.Seed"
          },
          {
            "name": "int",
            "comment": " Generate 32-bit integers in a given range.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n",
            "type": "Int -> Int -> Random.Generator Int"
          },
          {
            "name": "list",
            "comment": " Create a list of random values.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the values produced by a generator. The following examples show\nhow to generate booleans and letters based on a basic integer generator.\n\n    bool : Generator Bool\n    bool =\n      map ((==) 1) (int 0 1)\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n",
            "type": "(a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "map2",
            "comment": " Combine two generators.\n\nThis function is used to define things like [`pair`](#pair) where you want to\nput two generators together.\n\n    pair : Generator a -> Generator b -> Generator (a,b)\n    pair genA genB =\n      map2 (,) genA genB\n\n",
            "type": "(a -> b -> c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "map3",
            "comment": " Combine three generators. This could be used to produce random colors.\n\n    import Color\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (int 0 360)) (float 0 1) (float 0 1)\n",
            "type": "(a -> b -> c -> d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "map4",
            "comment": " Combine four generators.\n",
            "type": "(a -> b -> c -> d -> e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "map5",
            "comment": " Combine five generators.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "maxInt",
            "comment": " The maximum value for randomly generated 32-bit ints: 2147483647 ",
            "type": "Int"
          },
          {
            "name": "minInt",
            "comment": " The minimum value for randomly generated 32-bit ints: -2147483648 ",
            "type": "Int"
          },
          {
            "name": "pair",
            "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator ( a, b )"
          },
          {
            "name": "step",
            "comment": " Generate a random value as specified by a given `Generator`.\n\nIn the following example, we are trying to generate a number between 0 and 100\nwith the `int 0 100` generator. Each time we call `step` we need to provide a\nseed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\nSo here it is done right, where we get a new seed from each `step` call and\nthread that through.\n\n    seed0 = initialSeed 31415\n\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed1 ==> (31, seed2)\n    -- step (int 0 100) seed2 ==> (99, seed3)\n\nNotice that we use different seeds on each line. This is important! If you use\nthe same seed, you get the same results.\n\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed0 ==> (42, seed1)\n",
            "type": "Random.Generator a -> Random.Seed -> ( a, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Date",
        "comment": " Library for working with dates. Email the mailing list if you encounter\nissues with internationalization or locale formatting.\n\n# Dates\n@docs Date, now\n\n# Conversions\n@docs fromString, toTime, fromTime\n\n# Extractions\n@docs year, month, Month, day, dayOfWeek, Day, hour, minute, second, millisecond\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Date",
            "comment": " Representation of a date.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Day",
            "comment": " Represents the days of the week.\n",
            "args": [],
            "cases": [
              [
                "Mon",
                []
              ],
              [
                "Tue",
                []
              ],
              [
                "Wed",
                []
              ],
              [
                "Thu",
                []
              ],
              [
                "Fri",
                []
              ],
              [
                "Sat",
                []
              ],
              [
                "Sun",
                []
              ]
            ]
          },
          {
            "name": "Month",
            "comment": " Represents the month of the year.\n",
            "args": [],
            "cases": [
              [
                "Jan",
                []
              ],
              [
                "Feb",
                []
              ],
              [
                "Mar",
                []
              ],
              [
                "Apr",
                []
              ],
              [
                "May",
                []
              ],
              [
                "Jun",
                []
              ],
              [
                "Jul",
                []
              ],
              [
                "Aug",
                []
              ],
              [
                "Sep",
                []
              ],
              [
                "Oct",
                []
              ],
              [
                "Nov",
                []
              ],
              [
                "Dec",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "day",
            "comment": " Extract the day of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `23`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "dayOfWeek",
            "comment": " Extract the day of the week for a given date. Given the date 23 June\n1990 at 11:45AM this returns the day `Sat` as defined below.\n",
            "type": "Date.Date -> Date.Day"
          },
          {
            "name": "fromString",
            "comment": " Attempt to read a date from a string.\n",
            "type": "String -> Result.Result String Date.Date"
          },
          {
            "name": "fromTime",
            "comment": " Convert a time in milliseconds into a `Date`.\n\nA time is the number of milliseconds since\n[the Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n",
            "type": "Time.Time -> Date.Date"
          },
          {
            "name": "hour",
            "comment": " Extract the hour of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `11`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "millisecond",
            "comment": " Extract the millisecond of a given date. Given the date 23 June 1990 at 11:45:30.123AM\nthis returns the integer `123`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "minute",
            "comment": " Extract the minute of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `45`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "month",
            "comment": " Extract the month of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the month `Jun` as defined below.\n",
            "type": "Date.Date -> Date.Month"
          },
          {
            "name": "now",
            "comment": " Get the `Date` at the moment when this task is run.\n",
            "type": "Task.Task x Date.Date"
          },
          {
            "name": "second",
            "comment": " Extract the second of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `0`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "toTime",
            "comment": " Convert a `Date` to a time in milliseconds.\n\nA time is the number of milliseconds since\n[the Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n",
            "type": "Date.Date -> Time.Time"
          },
          {
            "name": "year",
            "comment": " Extract the year of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `1990`.\n",
            "type": "Date.Date -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Process",
        "comment": "\n\n# Processes\n@docs Id, spawn, sleep, kill\n\n## Future Plans\n\nRight now, this library is pretty sparse. For example, there is no public API\nfor processes to communicate with each other. This is a really important\nability, but it is also something that is extraordinarily easy to get wrong!\n\nI think the trend will be towards an Erlang style of concurrency, where every\nprocess has an “event queue” that anyone can send messages to. I currently\nthink the API will be extended to be more like this:\n\n    type Id exit msg\n\n    spawn : Task exit a -> Task x (Id exit Never)\n\n    kill : Id exit msg -> Task x ()\n\n    send : Id exit msg -> msg -> Task x ()\n\nA process `Id` will have two type variables to make sure all communication is\nvalid. The `exit` type describes the messages that are produced if the process\nfails because of user code. So if processes are linked and trapping errors,\nthey will need to handle this. The `msg` type just describes what kind of\nmessages this process can be sent by strangers.\n\nWe shall see though! This is just a draft that does not cover nearly everything\nit needs to, so the long-term vision for concurrency in Elm will be rolling out\nslowly as I get more data and experience.\n\nI ask that people bullish on compiling to node.js keep this in mind. I think we\ncan do better than the hopelessly bad concurrency model of node.js, and I hope\nthe Elm community will be supportive of being more ambitious, even if it takes\nlonger. That’s kind of what Elm is all about.\n",
        "aliases": [
          {
            "name": "Id",
            "comment": " A light-weight process that runs concurrently. You can use `spawn` to\nget a bunch of different tasks running in different processes. The Elm runtime\nwill interleave their progress. So if a task is taking too long, we will pause\nit at an `andThen` and switch over to other stuff.\n\n**Note:** We make a distinction between *concurrency* which means interleaving\ndifferent sequences and *parallelism* which means running different\nsequences at the exact same time. For example, a\n[time-sharing system](https://en.wikipedia.org/wiki/Time-sharing) is definitely\nconcurrent, but not necessarily parallel. So even though JS runs within a\nsingle OS-level thread, Elm can still run things concurrently.\n",
            "args": [],
            "type": "Platform.ProcessId"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "kill",
            "comment": " Sometimes you `spawn` a process, but later decide it would be a waste to\nhave it keep running and doing stuff. The `kill` function will force a process\nto bail on whatever task it is running. So if there is an HTTP request in\nflight, it will also abort the request.\n",
            "type": "Process.Id -> Task.Task x ()"
          },
          {
            "name": "sleep",
            "comment": " Block progress on the current process for a given amount of time. The\nJavaScript equivalent of this is [`setTimeout`][setTimeout] which lets you\ndelay work until later.\n\n[setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout\n",
            "type": "Time.Time -> Task.Task x ()"
          },
          {
            "name": "spawn",
            "comment": " Run a task in its own light-weight process. In the following example,\n`task1` and `task2` will be interleaved. If `task1` makes a long HTTP request\nor is just taking a long time, we can hop over to `task2` and do some work\nthere.\n\n    spawn task1 `Task.andThen` \\_ -> spawn task2\n\n**Note:** This creates a relatively restricted kind of `Process` because it\ncannot receive any messages. More flexibility for user-defined processes will\ncome in a later release!\n",
            "type": "Task.Task x a -> Task.Task y Process.Id"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Json.Decode",
        "comment": " A way to turn Json values into Elm values. A `Decoder a` represents a\ndecoding operation that will either produce a value of type `a`, or fail.\n\n# Decoders\n@docs Decoder, Value\n\n# Run a Decoder\n@docs decodeString, decodeValue\n\n# Primitives\n@docs string, int, float, bool, null\n\n# Arrays\n@docs list, array,\n  tuple1, tuple2, tuple3, tuple4, tuple5, tuple6, tuple7, tuple8\n\n# Objects\n@docs (:=), at,\n  object1, object2, object3, object4, object5, object6, object7, object8,\n  keyValuePairs, dict\n\n# Oddly Shaped Values\n@docs maybe, oneOf, map, fail, succeed, andThen\n\n# \"Creative\" Values\n@docs value, customDecoder\n",
        "aliases": [
          {
            "name": "Value",
            "comment": " Represents a JavaScript value.\n",
            "args": [],
            "type": "Json.Encode.Value"
          }
        ],
        "types": [
          {
            "name": "Decoder",
            "comment": " Represents a way of decoding JSON values. If you have a `(Decoder (List String))`\nit will attempt to take some JSON value and turn it into a list of strings.\nThese decoders are easy to put together so you can create more and more complex\ndecoders.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": ":=",
            "comment": " Applies the decoder to the field with the given name.\nFails if the JSON object has no such field.\n\n    nameAndAge : Decoder (String,Int)\n    nameAndAge =\n        object2 (,)\n          (\"name\" := string)\n          (\"age\" := int)\n\n    optionalProfession : Decoder (Maybe String)\n    optionalProfession =\n        maybe (\"profession\" := string)\n",
            "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "andThen",
            "comment": " Helpful when a field tells you about the overall structure of the JSON\nyou are dealing with. For example, imagine we are getting JSON representing\ndifferent shapes. Data like this:\n\n    { \"tag\": \"rectangle\", \"width\": 2, \"height\": 3 }\n    { \"tag\": \"circle\", \"radius\": 2 }\n\nThe following `shape` decoder looks at the `tag` to know what other fields to\nexpect **and then** it extracts the relevant information.\n\n    type Shape\n      = Rectangle Float Float\n      | Circle Float\n\n    shape : Decoder Shape\n    shape =\n      (\"tag\" := string) `andThen` shapeInfo\n\n    shapeInfo : String -> Decoder Shape\n    shapeInfo tag =\n      case tag of\n        \"rectangle\" ->\n          object2 Rectangle (\"width\" := float) (\"height\" := float)\n\n        \"circle\" ->\n          object1 Circle (\"radius\" := float)\n\n        _ ->\n          fail (tag ++ \" is not a recognized tag for shapes\")\n",
            "type": "Json.Decode.Decoder a -> (a -> Json.Decode.Decoder b) -> Json.Decode.Decoder b"
          },
          {
            "name": "array",
            "comment": " Extract an Array from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers : Decoder (Array Int)\n    numbers =\n        array int\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Array.Array a)"
          },
          {
            "name": "at",
            "comment": " Access a nested field, making it easy to dive into big structures. This is\nreally a helper function so you do not need to write `(:=)` so many times.\n\n    -- object.target.value = 'hello'\n    value : Decoder String\n    value =\n        at [\"target\", \"value\"] string\n\nIt is defined as\n\n    at fields decoder =\n        List.foldr (:=) decoder fields\n",
            "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "bool",
            "comment": " Extract a boolean.\n\n    -- { ... \"checked\": true ... }\n\n    checked : Decoder Bool\n    checked =\n        \"checked\" := bool\n",
            "type": "Json.Decode.Decoder Bool"
          },
          {
            "name": "customDecoder",
            "comment": " Create a custom decoder that may do some fancy computation. See the `value`\ndocumentation for an example usage.\n",
            "type": "Json.Decode.Decoder a -> (a -> Result.Result String b) -> Json.Decode.Decoder b"
          },
          {
            "name": "decodeString",
            "comment": " Using a certain decoder, attempt to parse a JSON string. If the decoder\nfails, you will get a string message telling you why.\n\n    decodeString (tuple2 (,) float float) \"[3,4]\"                  -- Ok (3,4)\n    decodeString (tuple2 (,) float float) \"{ \\\"x\\\": 3, \\\"y\\\": 4 }\" -- Err \"\"\n",
            "type": "Json.Decode.Decoder a -> String -> Result.Result String a"
          },
          {
            "name": "decodeValue",
            "comment": " Using a certain decoder, attempt to parse a raw `Json.Value`. You can pass\na `Json.Value` into Elm through a port, so this can let you handle data with\nextra weird shapes or stuff that currently is not allowed through ports\nautomatically.\n\n    port jsonValues : Signal Json.Value\n\n    shapes : Signal (Result String Shape)\n    shapes =\n      Signal.map (decodeValue shape) jsonValues\n\n    type Shape\n        = Rectangle Float Float\n        | Circle Float\n\n    shape : Decoder Shape  -- see definition in `andThen` docs\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Value -> Result.Result String a"
          },
          {
            "name": "dict",
            "comment": " Turn any object into a dictionary of key-value pairs, including inherited enumerable properties. Fails if _any_ value can't be\ndecoded with the given decoder.\n\n    -- { \"mercury\": 0.33, \"venus\": 4.87, \"earth\": 5.97, ... }\n    planetMasses : Decoder (Dict String Float)\n    planetMasses =\n        dict float\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Dict.Dict String a)"
          },
          {
            "name": "fail",
            "comment": " A decoder that always fails. Useful when paired with `andThen` or `oneOf`\nto improve error messages when things go wrong. For example, the following\ndecoder is able to provide a much more specific error message when `fail` is\nthe last option.\n\n    point : Decoder (Float,Float)\n    point =\n        oneOf\n        [ tuple2 (,) float float\n        , object2 (,) (\"x\" := float) (\"y\" := float)\n        , fail \"expecting some kind of point\"\n        ]\n",
            "type": "String -> Json.Decode.Decoder a"
          },
          {
            "name": "float",
            "comment": " Extract a float.\n\n    -- [ 6.022, 3.1415, 1.618 ]\n\n    numbers : Decoder (List Float)\n    numbers =\n        list float\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "int",
            "comment": " Extract an integer.\n\n    -- { ... \"age\": 42 ... }\n\n    age : Decoder Int\n    age =\n        \"age\" := int\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "keyValuePairs",
            "comment": " Turn any object into a list of key-value pairs, including inherited enumerable properties. Fails if _any_ value can't be\ndecoded with the given decoder.\n\n    -- { \"tom\": 89, \"sue\": 92, \"bill\": 97, ... }\n    grades : Decoder (List (String, Int))\n    grades =\n        keyValuePairs int\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List ( String, a ))"
          },
          {
            "name": "list",
            "comment": " Extract a List from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers : Decoder (List Int)\n    numbers =\n        list int\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the value returned by a decoder. Most useful when paired with\nthe `oneOf` function.\n\n    nullOr : Decoder a -> Decoder (Maybe a)\n    nullOr decoder =\n        oneOf\n          [ null Nothing\n          , map Just decoder\n          ]\n\n    type UserID = OldID Int | NewID String\n\n    -- 1234 or \"1234abc\"\n    userID : Decoder UserID\n    userID =\n        oneOf\n          [ map OldID int\n          , map NewID string\n          ]\n",
            "type": "(a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          },
          {
            "name": "maybe",
            "comment": " Extract a Maybe value, wrapping successes with `Just` and turning any\nfailure in `Nothing`. If you are expecting that a field can sometimes be `null`,\nit's better to check for it [explicitly](#null), as this function will swallow\nerrors from ill-formed JSON.\n\nThe following code decodes JSON objects that may not have a profession field.\n\n    -- profession: Just \"plumber\"\n    -- { name: \"Tom\", age: 31, profession: \"plumber\" }\n    -- profession: Nothing\n    -- { name: \"Sue\", age: 42 }\n    -- { name: \"Amy\", age: 27, profession: null }\n    -- { name: \"Joe\", age: 36, profession: [\"something\", \"unexpected\"] }\n\n    type alias Person =\n        { name : String\n        , age : Int\n        , profession : Maybe String\n        }\n\n    person : Decoder Person\n    person =\n        object3 Person\n          (\"name\" := string)\n          (\"age\" := int)\n          (maybe (\"profession\" := string))\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "null",
            "comment": " Decode null as the value given, and fail otherwise. Primarily useful for\ncreating *other* decoders.\n\n    numbers : Decoder (List Int)\n    numbers =\n        list (oneOf [ int, null 0 ])\n\nThis decoder treats `null` as `Nothing`, and otherwise tries to produce a\n`Just`.\n\n    nullOr : Decoder a -> Decoder (Maybe a)\n    nullOr decoder =\n        oneOf\n        [ null Nothing\n        , map Just decoder\n        ]\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "object1",
            "comment": " Apply a function to a decoder. You can use this function as `map` if you\nmust (which can be done with any `objectN` function actually).\n\n    object1 sqrt (\"x\" := float)\n",
            "type": "(a -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder value"
          },
          {
            "name": "object2",
            "comment": " Use two different decoders on a JS value. This is nice for extracting\nmultiple fields from an object.\n\n    point : Decoder (Float,Float)\n    point =\n        object2 (,)\n          (\"x\" := float)\n          (\"y\" := float)\n",
            "type": "(a -> b -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder value"
          },
          {
            "name": "object3",
            "comment": " Use three different decoders on a JS value. This is nice for extracting\nmultiple fields from an object.\n\n    type alias Job = { name : String, id : Int, completed : Bool }\n\n    job : Decoder Job\n    job =\n        object3 Job\n          (\"name\" := string)\n          (\"id\" := int)\n          (\"completed\" := bool)\n",
            "type": "(a -> b -> c -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder value"
          },
          {
            "name": "object4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder value"
          },
          {
            "name": "object5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder value"
          },
          {
            "name": "object6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder value"
          },
          {
            "name": "object7",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder value"
          },
          {
            "name": "object8",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder h -> Json.Decode.Decoder value"
          },
          {
            "name": "oneOf",
            "comment": " Try out multiple different decoders. This is helpful when you are dealing\nwith something with a very strange shape and when `andThen` does not help\nnarrow things down so you can be more targeted.\n\n    -- [ [3,4], { \"x\":0, \"y\":0 }, [5,12] ]\n\n    points : Decoder (List (Float,Float))\n    points =\n        list point\n\n    point : Decoder (Float,Float)\n    point =\n        oneOf\n        [ tuple2 (,) float float\n        , object2 (,) (\"x\" := float) (\"y\" := float)\n        ]\n",
            "type": "List (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "string",
            "comment": " Extract a string.\n\n    -- [\"John\",\"Doe\"]\n\n    name : Decoder (String, String)\n    name =\n        tuple2 (,) string string\n",
            "type": "Json.Decode.Decoder String"
          },
          {
            "name": "succeed",
            "comment": " A decoder that always succeeds. Useful when paired with `andThen` or\n`oneOf` but everything is supposed to work out at the end. For example,\nmaybe you have an optional field that can have a default value when it is\nmissing.\n\n    -- { x:3, y:4 } or { x:3, y:4, z:5 }\n\n    point3D : Decoder (Float,Float,Float)\n    point3D =\n        object3 (,,)\n          (\"x\" := float)\n          (\"y\" := float)\n          (oneOf [ \"z\" := float, succeed 0 ])\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "tuple1",
            "comment": " Handle an array with exactly one element.\n\n    extractString : Decoder String\n    extractString =\n        tuple1 identity string\n\n    authorship : Decoder String\n    authorship =\n        oneOf\n          [ tuple1 (\\author -> \"Author: \" ++ author) string\n          , list string |> map (\\authors -> \"Co-authors: \" ++ String.join \", \" authors)\n          ]\n",
            "type": "(a -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple2",
            "comment": " Handle an array with exactly two elements. Useful for points and simple\npairs.\n\n    -- [3,4] or [0,0]\n    point : Decoder (Float,Float)\n    point =\n        tuple2 (,) float float\n\n    -- [\"John\",\"Doe\"] or [\"Hermann\",\"Hesse\"]\n    name : Decoder Name\n    name =\n        tuple2 Name string string\n\n    type alias Name = { first : String, last : String }\n",
            "type": "(a -> b -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple3",
            "comment": " Handle an array with exactly three elements.\n\n    -- [3,4,5] or [0,0,0]\n    point3D : Decoder (Float,Float,Float)\n    point3D =\n        tuple3 (,,) float float float\n\n",
            "type": "(a -> b -> c -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple7",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple8",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder h -> Json.Decode.Decoder value"
          },
          {
            "name": "value",
            "comment": " Bring in an arbitrary JSON value. Useful if you need to work with crazily\nformatted data. For example, this lets you create a parser for \"variadic\" lists\nwhere the first few types are different, followed by 0 or more of the same\ntype.\n\n    variadic2 : (a -> b -> List c -> value) -> Decoder a -> Decoder b -> Decoder c -> Decoder value\n    variadic2 f a b c =\n        let\n            combineResults = List.foldr (Result.map2 (::)) (Ok [])\n        in\n            customDecoder (list value) (\\jsonList ->\n                case jsonList of\n                  one :: two :: rest ->\n                      Result.map3 f\n                        (decodeValue a one)\n                        (decodeValue b two)\n                        (combineResults (List.map (decodeValue c) rest))\n\n                  _ -> Result.Err \"expecting at least two elements in the array\")\n",
            "type": "Json.Decode.Decoder Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Set",
        "comment": " A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Sets\n@docs Set\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Set",
            "comment": " Represents a set of unique values. So `(Set Int)` is a set of integers and\n`(Set String)` is a set of strings.\n",
            "args": [
              "t"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "empty",
            "comment": " Create an empty set.\n",
            "type": "Set.Set a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(comparable -> Bool) -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest.\n",
            "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest.\n",
            "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates.\n",
            "type": "List comparable -> Set.Set comparable"
          },
          {
            "name": "insert",
            "comment": " Insert a value into a set.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty.\n",
            "type": "Set.Set a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
            "type": "(comparable -> comparable') -> Set.Set comparable -> Set.Set comparable'"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set.\n",
            "type": "comparable -> Set.Set comparable -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
            "type": "(comparable -> Bool) -> Set.Set comparable -> ( Set.Set comparable, Set.Set comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value.\n",
            "type": "comparable -> Set.Set comparable"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set.\n",
            "type": "Set.Set a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list, sorted from lowest to highest.\n",
            "type": "Set.Set comparable -> List comparable"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Time",
        "comment": " Library for working with time.\n\n# Time\n@docs Time, now, every\n\n# Units\n@docs millisecond, second, minute, hour,\n  inMilliseconds, inSeconds, inMinutes, inHours\n\n",
        "aliases": [
          {
            "name": "Time",
            "comment": " Type alias to make it clearer when you are working with time values.\nUsing the `Time` helpers like `second` and `inSeconds` instead of raw numbers\nis very highly recommended.\n",
            "args": [],
            "type": "Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "every",
            "comment": " Subscribe to the current time. First you provide an interval describing how\nfrequently you want updates. Second, you give a tagger that turns a time into a\nmessage for your `update` function. So if you want to hear about the current\ntime every second, you would say something like this:\n\n    type Msg = Tick Time | ...\n\n    subscriptions model =\n      every second Tick\n\nCheck out the [Elm Architecture Tutorial][arch] for more info on how\nsubscriptions work.\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n**Note:** this function is not for animation! You need to use something based\non `requestAnimationFrame` to get smooth animations. This is based on\n`setInterval` which is better for recurring tasks like “check on something\nevery 30 seconds”.\n",
            "type": "Time.Time -> (Time.Time -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "hour",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "inHours",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inMilliseconds",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inMinutes",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inSeconds",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "millisecond",
            "comment": " Units of time, making it easier to specify things like a half-second\n`(500 * millisecond)` without remembering Elm&rsquo;s underlying units of time.\n",
            "type": "Time.Time"
          },
          {
            "name": "minute",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "now",
            "comment": " Get the `Time` at the moment when this task is run.\n",
            "type": "Task.Task x Time.Time"
          },
          {
            "name": "second",
            "comment": "",
            "type": "Time.Time"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Json.Encode",
        "comment": " Library for turning Elm values into Json values.\n\n# Encoding\n@docs encode, Value\n\n# Primitives\n@docs string, int, float, bool, null\n\n# Arrays\n@docs list, array\n\n# Objects\n@docs object\n",
        "aliases": [],
        "types": [
          {
            "name": "Value",
            "comment": " Represents a JavaScript value.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "array",
            "comment": "",
            "type": "Array.Array Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "bool",
            "comment": "",
            "type": "Bool -> Json.Encode.Value"
          },
          {
            "name": "encode",
            "comment": " Convert a `Value` into a prettified string. The first argument specifies\nthe amount of indentation in the resulting string.\n\n    person =\n        object\n          [ (\"name\", string \"Tom\")\n          , (\"age\", int 42)\n          ]\n\n    compact = encode 0 person\n    -- {\"name\":\"Tom\",\"age\":42}\n\n    readable = encode 4 person\n    -- {\n    --     \"name\": \"Tom\",\n    --     \"age\": 42\n    -- }\n",
            "type": "Int -> Json.Encode.Value -> String"
          },
          {
            "name": "float",
            "comment": " Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n",
            "type": "Float -> Json.Encode.Value"
          },
          {
            "name": "int",
            "comment": "",
            "type": "Int -> Json.Encode.Value"
          },
          {
            "name": "list",
            "comment": "",
            "type": "List Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "null",
            "comment": "",
            "type": "Json.Encode.Value"
          },
          {
            "name": "object",
            "comment": "",
            "type": "List ( String, Json.Encode.Value ) -> Json.Encode.Value"
          },
          {
            "name": "string",
            "comment": "",
            "type": "String -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Dict",
        "comment": " A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Dictionaries\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n# Combine\n@docs union, intersect, diff, merge\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Dict",
            "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "Dict.Dict k v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( comparable, v ) -> Dict.Dict comparable v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "comparable -> Dict.Dict comparable v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "comparable -> v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "Dict.Dict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
            "type": "Dict.Dict comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(comparable -> a -> b) -> Dict.Dict comparable a -> Dict.Dict comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "comparable -> Dict.Dict comparable v -> Bool"
          },
          {
            "name": "merge",
            "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\n\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n",
            "type": "(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> Dict.Dict comparable a -> Dict.Dict comparable b -> result -> result"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> ( Dict.Dict comparable v, Dict.Dict comparable v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "comparable -> v -> Dict.Dict comparable v"
          },
          {
            "name": "size",
            "comment": " Determine the number of key-value pairs in the dictionary. ",
            "type": "Dict.Dict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys. ",
            "type": "Dict.Dict comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
            "type": "Dict.Dict comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Task",
        "comment": " Tasks make it easy to describe asynchronous operations that may fail, like\nHTTP requests or writing to a database. For more information, see the [Elm\ndocumentation on Tasks](http://guide.elm-lang.org/error_handling/task.html).\n\n# Basics\n@docs Task, succeed, fail\n\n# Mapping\n@docs map, map2, map3, map4, map5, andMap\n\n# Chaining\n@docs andThen, sequence\n\n# Errors\n@docs onError, mapError, toMaybe, fromMaybe, toResult, fromResult\n\n# Commands\n@docs perform\n\n",
        "aliases": [
          {
            "name": "Task",
            "comment": " Represents asynchronous effects that may fail. It is useful for stuff like\nHTTP.\n\nFor example, maybe we have a task with the type (`Task String User`). This means\nthat when we perform the task, it will either fail with a `String` message or\nsucceed with a `User`. So this could represent a task that is asking a server\nfor a certain user.\n",
            "args": [
              "err",
              "ok"
            ],
            "type": "Platform.Task err ok"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Put the results of two tasks together. If either task fails, the whole\nthing fails. It also runs in order so the first task will be completely\nfinished before the second task starts.\n\nThis function makes it possible to chain tons of tasks together and pipe them\nall into a single function.\n\n    (f `map` task1 `andMap` task2 `andMap` task3) -- map3 f task1 task2 task3\n",
            "type": "Task.Task x (a -> b) -> Task.Task x a -> Task.Task x b"
          },
          {
            "name": "andThen",
            "comment": " Chain together a task and a callback. The first task will run, and if it is\nsuccessful, you give the result to the callback resulting in another task. This\ntask then gets run.\n\n    succeed 2 `andThen` (\\n -> succeed (n + 2)) -- succeed 4\n\nThis is useful for chaining tasks together. Maybe you need to get a user from\nyour servers *and then* lookup their picture once you know their name.\n",
            "type": "Task.Task x a -> (a -> Task.Task x b) -> Task.Task x b"
          },
          {
            "name": "fail",
            "comment": " A task that fails immediately when run.\n\n    fail \"file not found\" : Task String a\n",
            "type": "x -> Task.Task x a"
          },
          {
            "name": "fromMaybe",
            "comment": " If you are chaining together a bunch of tasks, it may be useful to treat\na maybe value like a task.\n\n    fromMaybe \"file not found\" Nothing   -- fail \"file not found\"\n    fromMaybe \"file not found\" (Just 42) -- succeed 42\n",
            "type": "x -> Maybe.Maybe a -> Task.Task x a"
          },
          {
            "name": "fromResult",
            "comment": " If you are chaining together a bunch of tasks, it may be useful to treat\na result like a task.\n\n    fromResult (Err \"file not found\") -- fail \"file not found\"\n    fromResult (Ok 42)                -- succeed 42\n",
            "type": "Result.Result x a -> Task.Task x a"
          },
          {
            "name": "map",
            "comment": " Transform a task.\n\n    map sqrt (succeed 9) -- succeed 3\n",
            "type": "(a -> b) -> Task.Task x a -> Task.Task x b"
          },
          {
            "name": "map2",
            "comment": " Put the results of two tasks together. If either task fails, the whole\nthing fails. It also runs in order so the first task will be completely\nfinished before the second task starts.\n\n    map2 (+) (succeed 9) (succeed 3) -- succeed 12\n",
            "type": "(a -> b -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x e -> Task.Task x result"
          },
          {
            "name": "mapError",
            "comment": " Transform the error value. This can be useful if you need a bunch of error\ntypes to match up.\n\n    type Error = Http Http.Error | WebGL WebGL.Error\n\n    getResources : Task Error Resource\n    getResources =\n      sequence [ mapError Http serverTask, mapError WebGL textureTask ]\n",
            "type": "(x -> y) -> Task.Task x a -> Task.Task y a"
          },
          {
            "name": "onError",
            "comment": " Recover from a failure in a task. If the given task fails, we use the\ncallback to recover.\n\n    fail \"file not found\" `onError` (\\msg -> succeed 42) -- succeed 42\n    succeed 9 `onError` (\\msg -> succeed 42)             -- succeed 9\n",
            "type": "Task.Task x a -> (x -> Task.Task y a) -> Task.Task y a"
          },
          {
            "name": "perform",
            "comment": " Command the runtime system to perform a task. The most important argument\nis the `Task` which describes what you want to happen. But you also need to\nprovide functions to tag the two possible outcomes of the task. It can fail or\nsucceed, but either way, you need to have a message to feed back into your\napplication.\n",
            "type": "(x -> msg) -> (a -> msg) -> Task.Task x a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "sequence",
            "comment": " Start with a list of tasks, and turn them into a single task that returns a\nlist. The tasks will be run in order one-by-one and if any task fails the whole\nsequence fails.\n\n    sequence [ succeed 1, succeed 2 ] -- succeed [ 1, 2 ]\n\nThis can be useful if you need to make a bunch of HTTP requests one-by-one.\n",
            "type": "List (Task.Task x a) -> Task.Task x (List a)"
          },
          {
            "name": "succeed",
            "comment": " A task that succeeds immediately when run.\n\n    succeed 42    -- results in 42\n",
            "type": "a -> Task.Task x a"
          },
          {
            "name": "toMaybe",
            "comment": " Translate a task that can fail into a task that can never fail, by\nconverting any failure into `Nothing` and any success into `Just` something.\n\n    toMaybe (fail \"file not found\") -- succeed Nothing\n    toMaybe (succeed 42)            -- succeed (Just 42)\n\nThis means you can handle the error with the `Maybe` module instead.\n",
            "type": "Task.Task x a -> Task.Task never (Maybe.Maybe a)"
          },
          {
            "name": "toResult",
            "comment": " Translate a task that can fail into a task that can never fail, by\nconverting any failure into `Err` something and any success into `Ok` something.\n\n    toResult (fail \"file not found\") -- succeed (Err \"file not found\")\n    toResult (succeed 42)            -- succeed (Ok 42)\n\nThis means you can handle the error with the `Result` module instead.\n",
            "type": "Task.Task x a -> Task.Task never (Result.Result x a)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Array",
        "comment": " A library for fast immutable arrays. The elements in an array must have the\nsame type. The arrays are implemented in Relaxed Radix Balanced-Trees for fast\nreads, updates, and appends.\n\n# Arrays\n@docs Array\n\n# Creating Arrays\n@docs empty, repeat, initialize, fromList\n\n# Basics\n@docs isEmpty, length, push, append\n\n# Get and Set\n@docs get, set\n\n# Taking Arrays Apart\n@docs slice, toList, toIndexedList\n\n# Mapping, Filtering, and Folding\n@docs map, indexedMap, filter, foldl, foldr\n",
        "aliases": [],
        "types": [
          {
            "name": "Array",
            "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "append",
            "comment": " Append two arrays to a new one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n",
            "type": "Array.Array a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "empty",
            "comment": " Return an empty array.\n\n    length empty == 0\n",
            "type": "Array.Array a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate:\n\n    filter isEven (fromList [1..6]) == (fromList [2,4,6])\n",
            "type": "(a -> Bool) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an array from the left. Read `foldl` as &ldquo;fold from the left&rdquo;.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> Array.Array a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an array from the right. Read `foldr` as &ldquo;fold from the right&rdquo;.\n\n    foldr (+) 0 (repeat 3 5) == 15\n",
            "type": "(a -> b -> b) -> b -> Array.Array a -> b"
          },
          {
            "name": "fromList",
            "comment": " Create an array from a list.\n",
            "type": "List a -> Array.Array a"
          },
          {
            "name": "get",
            "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Nothing\n\n",
            "type": "Int -> Array.Array a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n",
            "type": "(Int -> a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "initialize",
            "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n",
            "type": "Int -> (Int -> a) -> Array.Array a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n",
            "type": "Array.Array a -> Bool"
          },
          {
            "name": "length",
            "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n",
            "type": "Array.Array a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n",
            "type": "(a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "push",
            "comment": " Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n",
            "type": "a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "repeat",
            "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n",
            "type": "Int -> a -> Array.Array a"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "slice",
            "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n",
            "type": "Int -> Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n",
            "type": "Array.Array a -> List ( Int, a )"
          },
          {
            "name": "toList",
            "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n",
            "type": "Array.Array a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "String",
        "comment": " A built-in representation for efficient string manipulation. String literals\nare enclosed in `\"double quotes\"`. Strings are *not* lists of characters.\n\n# Basics\n@docs isEmpty, length, reverse, repeat\n\n# Building and Splitting\n@docs cons, uncons, fromChar, append, concat, split, join, words, lines\n\n# Get Substrings\n@docs slice, left, right, dropLeft, dropRight\n\n# Check for Substrings\n@docs contains, startsWith, endsWith, indexes, indices\n\n# Conversions\n@docs toInt, toFloat, toList, fromList\n\n# Formatting\nCosmetic operations such as padding with extra characters or trimming whitespace.\n\n@docs toUpper, toLower,\n      pad, padLeft, padRight,\n      trim, trimLeft, trimRight\n\n# Higher-Order Functions\n@docs map, filter, foldl, foldr, any, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Determine whether *all* characters satisfy a predicate.\n\n    all isDigit \"90210\" == True\n    all isDigit \"R2-D2\" == False\n    all isDigit \"heart\" == False\n",
            "type": "(Char -> Bool) -> String -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine whether *any* characters satisfy a predicate.\n\n    any isDigit \"90210\" == True\n    any isDigit \"R2-D2\" == True\n    any isDigit \"heart\" == False\n",
            "type": "(Char -> Bool) -> String -> Bool"
          },
          {
            "name": "append",
            "comment": " Append two strings. You can also use [the `(++)` operator](Basics#++)\nto do this.\n\n    append \"butter\" \"fly\" == \"butterfly\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "concat",
            "comment": " Concatenate many strings into one.\n\n    concat [\"never\",\"the\",\"less\"] == \"nevertheless\"\n",
            "type": "List String -> String"
          },
          {
            "name": "cons",
            "comment": " Add a character to the beginning of a string.\n\n    cons 'T' \"he truth is out there\" == \"The truth is out there\"\n",
            "type": "Char -> String -> String"
          },
          {
            "name": "contains",
            "comment": " See if the second string contains the first one.\n\n    contains \"the\" \"theory\" == True\n    contains \"hat\" \"theory\" == False\n    contains \"THE\" \"theory\" == False\n\nUse [`Regex.contains`](Regex#contains) if you need something more flexible.\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "dropLeft",
            "comment": " Drop *n* characters from the left side of a string.\n\n    dropLeft 2 \"The Lone Gunmen\" == \"e Lone Gunmen\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "dropRight",
            "comment": " Drop *n* characters from the right side of a string.\n\n    dropRight 2 \"Cigarette Smoking Man\" == \"Cigarette Smoking M\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "endsWith",
            "comment": " See if the second string ends with the first one.\n\n    endsWith \"the\" \"theory\" == False\n    endsWith \"ory\" \"theory\" == True\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep only the characters that satisfy the predicate.\n\n    filter isDigit \"R2-D2\" == \"22\"\n",
            "type": "(Char -> Bool) -> String -> String"
          },
          {
            "name": "foldl",
            "comment": " Reduce a string from the left.\n\n    foldl cons \"\" \"time\" == \"emit\"\n",
            "type": "(Char -> b -> b) -> b -> String -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a string from the right.\n\n    foldr cons \"\" \"time\" == \"time\"\n",
            "type": "(Char -> b -> b) -> b -> String -> b"
          },
          {
            "name": "fromChar",
            "comment": " Create a string from a given character.\n\n    fromChar 'a' == \"a\"\n",
            "type": "Char -> String"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of characters into a String. Can be useful if you\nwant to create a string primarily by consing, perhaps for decoding\nsomething.\n\n    fromList ['a','b','c'] == \"abc\"\n",
            "type": "List Char -> String"
          },
          {
            "name": "indexes",
            "comment": " Get all of the indexes for a substring in another string.\n\n    indexes \"i\" \"Mississippi\"   == [1,4,7,10]\n    indexes \"ss\" \"Mississippi\"  == [2,5]\n    indexes \"needle\" \"haystack\" == []\n",
            "type": "String -> String -> List Int"
          },
          {
            "name": "indices",
            "comment": " Alias for `indexes`. ",
            "type": "String -> String -> List Int"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a string is empty.\n\n    isEmpty \"\" == True\n    isEmpty \"the world\" == False\n",
            "type": "String -> Bool"
          },
          {
            "name": "join",
            "comment": " Put many strings together with a given separator.\n\n    join \"a\" [\"H\",\"w\",\"ii\",\"n\"]        == \"Hawaiian\"\n    join \" \" [\"cat\",\"dog\",\"cow\"]       == \"cat dog cow\"\n    join \"/\" [\"home\",\"evan\",\"Desktop\"] == \"home/evan/Desktop\"\n",
            "type": "String -> List String -> String"
          },
          {
            "name": "left",
            "comment": " Take *n* characters from the left side of a string.\n\n    left 2 \"Mulder\" == \"Mu\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "length",
            "comment": " Get the length of a string.\n\n    length \"innumerable\" == 11\n    length \"\" == 0\n\n",
            "type": "String -> Int"
          },
          {
            "name": "lines",
            "comment": " Break a string into lines, splitting on newlines.\n\n    lines \"How are you?\\nGood?\" == [\"How are you?\", \"Good?\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "map",
            "comment": " Transform every character in a string\n\n    map (\\c -> if c == '/' then '.' else c) \"a/b/c\" == \"a.b.c\"\n",
            "type": "(Char -> Char) -> String -> String"
          },
          {
            "name": "pad",
            "comment": " Pad a string on both sides until it has a given length.\n\n    pad 5 ' ' \"1\"   == \"  1  \"\n    pad 5 ' ' \"11\"  == \"  11 \"\n    pad 5 ' ' \"121\" == \" 121 \"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "padLeft",
            "comment": " Pad a string on the left until it has a given length.\n\n    padLeft 5 '.' \"1\"   == \"....1\"\n    padLeft 5 '.' \"11\"  == \"...11\"\n    padLeft 5 '.' \"121\" == \"..121\"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "padRight",
            "comment": " Pad a string on the right until it has a given length.\n\n    padRight 5 '.' \"1\"   == \"1....\"\n    padRight 5 '.' \"11\"  == \"11...\"\n    padRight 5 '.' \"121\" == \"121..\"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "repeat",
            "comment": " Repeat a string *n* times.\n\n    repeat 3 \"ha\" == \"hahaha\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "reverse",
            "comment": " Reverse a string.\n\n    reverse \"stressed\" == \"desserts\"\n",
            "type": "String -> String"
          },
          {
            "name": "right",
            "comment": " Take *n* characters from the right side of a string.\n\n    right 2 \"Scully\" == \"ly\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "slice",
            "comment": " Take a substring given a start and end index. Negative indexes\nare taken starting from the *end* of the list.\n\n    slice  7  9 \"snakes on a plane!\" == \"on\"\n    slice  0  6 \"snakes on a plane!\" == \"snakes\"\n    slice  0 -7 \"snakes on a plane!\" == \"snakes on a\"\n    slice -6 -1 \"snakes on a plane!\" == \"plane\"\n",
            "type": "Int -> Int -> String -> String"
          },
          {
            "name": "split",
            "comment": " Split a string using a given separator.\n\n    split \",\" \"cat,dog,cow\"        == [\"cat\",\"dog\",\"cow\"]\n    split \"/\" \"home/evan/Desktop/\" == [\"home\",\"evan\",\"Desktop\", \"\"]\n\nUse [`Regex.split`](Regex#split) if you need something more flexible.\n",
            "type": "String -> String -> List String"
          },
          {
            "name": "startsWith",
            "comment": " See if the second string starts with the first one.\n\n    startsWith \"the\" \"theory\" == True\n    startsWith \"ory\" \"theory\" == False\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "toFloat",
            "comment": " Try to convert a string into a float, failing on improperly formatted strings.\n\n    String.toFloat \"123\" == Ok 123.0\n    String.toFloat \"-42\" == Ok -42.0\n    String.toFloat \"3.1\" == Ok 3.1\n    String.toFloat \"31a\" == Err \"could not convert string '31a' to a Float\"\n\nIf you are extracting a number from some raw user input, you will typically\nwant to use [`Result.withDefault`](Result#withDefault) to handle bad data:\n\n    Result.withDefault 0 (String.toFloat \"42.5\") == 42.5\n    Result.withDefault 0 (String.toFloat \"cats\") == 0\n",
            "type": "String -> Result.Result String Float"
          },
          {
            "name": "toInt",
            "comment": " Try to convert a string into an int, failing on improperly formatted strings.\n\n    String.toInt \"123\" == Ok 123\n    String.toInt \"-42\" == Ok -42\n    String.toInt \"3.1\" == Err \"could not convert string '3.1' to an Int\"\n    String.toInt \"31a\" == Err \"could not convert string '31a' to an Int\"\n\nIf you are extracting a number from some raw user input, you will typically\nwant to use [`Result.withDefault`](Result#withDefault) to handle bad data:\n\n    Result.withDefault 0 (String.toInt \"42\") == 42\n    Result.withDefault 0 (String.toInt \"ab\") == 0\n",
            "type": "String -> Result.Result String Int"
          },
          {
            "name": "toList",
            "comment": " Convert a string to a list of characters.\n\n    toList \"abc\" == ['a','b','c']\n",
            "type": "String -> List Char"
          },
          {
            "name": "toLower",
            "comment": " Convert a string to all lower case. Useful for case-insensitive comparisons.\n\n    toLower \"X-FILES\" == \"x-files\"\n",
            "type": "String -> String"
          },
          {
            "name": "toUpper",
            "comment": " Convert a string to all upper case. Useful for case-insensitive comparisons\nand VIRTUAL YELLING.\n\n    toUpper \"skinner\" == \"SKINNER\"\n",
            "type": "String -> String"
          },
          {
            "name": "trim",
            "comment": " Get rid of whitespace on both sides of a string.\n\n    trim \"  hats  \\n\" == \"hats\"\n",
            "type": "String -> String"
          },
          {
            "name": "trimLeft",
            "comment": " Get rid of whitespace on the left of a string.\n\n    trimLeft \"  hats  \\n\" == \"hats  \\n\"\n",
            "type": "String -> String"
          },
          {
            "name": "trimRight",
            "comment": " Get rid of whitespace on the right of a string.\n\n    trimRight \"  hats  \\n\" == \"  hats\"\n",
            "type": "String -> String"
          },
          {
            "name": "uncons",
            "comment": " Split a non-empty string into its head and tail. This lets you\npattern match on strings exactly as you would with lists.\n\n    uncons \"abc\" == Just ('a',\"bc\")\n    uncons \"\"    == Nothing\n",
            "type": "String -> Maybe.Maybe ( Char, String )"
          },
          {
            "name": "words",
            "comment": " Break a string into words, splitting on chunks of whitespace.\n\n    words \"How are \\t you? \\n Good?\" == [\"How\",\"are\",\"you?\",\"Good?\"]\n",
            "type": "String -> List String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Platform",
        "comment": "\n\n# Programs\n@docs Program\n\n# Platform Internals\n\n## Tasks and Processes\n@docs Task, ProcessId\n\n## Effect Manager Helpers\n\nAn extremely tiny portion of library authors should ever write effect managers.\nFundamentally, Elm needs maybe 10 of them total. I get that people are smart,\ncurious, etc. but that is not a substitute for a legitimate reason to make an\neffect manager. Do you have an *organic need* this fills? Or are you just\ncurious? Public discussions of your explorations should be framed accordingly.\n\n@docs Router, sendToApp, sendToSelf\n",
        "aliases": [],
        "types": [
          {
            "name": "ProcessId",
            "comment": " Head over to the documentation for the [`Process`](Process) module for\ninformation on this. It is only defined here because it is a platform\nprimitive.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Program",
            "comment": " Every Elm project will define `main` to be some sort of `Program`. A\n`Program` value captures all the details needed to manage your application,\nincluding how to initialize things, how to respond to events, etc.\n\nThe type of a `Program` includes a `flags` type variable which describes the\ndata we need to start a program. So say our program needs to be given a `userID`\nand `token` to get started:\n\n    MyApp.main : Program { userID : String, token : Int }\n\nSo when we initialize this program in JavaScript, we can give the necessary flags\nreally easily!\n\n```javascript\nElm.MyApp.fullscreen({\n    userID: \"Tom\",\n    token: 42\n});\n```\n",
            "args": [
              "flags"
            ],
            "cases": []
          },
          {
            "name": "Router",
            "comment": " An effect manager has access to a “router” that routes messages between\nthe main app and your individual effect manager.\n",
            "args": [
              "appMsg",
              "selfMsg"
            ],
            "cases": []
          },
          {
            "name": "Task",
            "comment": " Head over to the documentation for the [`Task`](Task) module for more\ninformation on this. It is only defined here because it is a platform\nprimitive.\n",
            "args": [
              "err",
              "ok"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "sendToApp",
            "comment": " Send the router a message for the main loop of your app. This message will\nbe handled by the overall `update` function, just like events from `Html`.\n",
            "type": "Platform.Router msg a -> msg -> Platform.Task x ()"
          },
          {
            "name": "sendToSelf",
            "comment": " Send the router a message for your effect manager. This message will\nbe routed to the `onSelfMsg` function, where you can update the state of your\neffect manager as necessary.\n\nAs an example, the effect manager for web sockets\n",
            "type": "Platform.Router a msg -> msg -> Platform.Task x ()"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "List",
        "comment": " A library for manipulating lists of values. Every value in a\nlist must have the same type.\n\n# Basics\n@docs isEmpty, length, reverse, member\n\n# Sub-lists\n@docs head, tail, filter, take, drop\n\n# Putting Lists Together\n@docs repeat, (::), append, concat, intersperse\n\n# Taking Lists Apart\n@docs partition, unzip\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\nIf you can think of a legitimate use of `mapN` where `N` is 6 or more, please\nlet us know on [the list](https://groups.google.com/forum/#!forum/elm-discuss).\nThe current sentiment is that it is already quite error prone once you get to\n4 and possibly should be approached another way.\n\n# Special Maps\n@docs filterMap, concatMap, indexedMap\n\n# Folding\n@docs foldr, foldl\n\n# Special Folds\n@docs sum, product, maximum, minimum, all, any, scanl\n\n# Sorting\n@docs sort, sortBy, sortWith\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "::",
            "comment": " Add an element to the front of a list. Pronounced *cons*.\n\n    1 :: [2,3] == [1,2,3]\n    1 :: [] == [1]\n",
            "type": "a -> List a -> List a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "all",
            "comment": " Determine if all elements satisfy the predicate.\n\n    all isEven [2,4] == True\n    all isEven [2,3] == False\n    all isEven [] == True\n",
            "type": "(a -> Bool) -> List a -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine if any elements satisfy the predicate.\n\n    any isEven [2,3] == True\n    any isEven [1,3] == False\n    any isEven [] == False\n",
            "type": "(a -> Bool) -> List a -> Bool"
          },
          {
            "name": "append",
            "comment": " Put two lists together.\n\n    append [1,1,2] [3,5,8] == [1,1,2,3,5,8]\n    append ['a','b'] ['c'] == ['a','b','c']\n\nYou can also use [the `(++)` operator](Basics#++) to append lists.\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "concat",
            "comment": " Concatenate a bunch of lists into a single list:\n\n    concat [[1,2],[3],[4,5]] == [1,2,3,4,5]\n",
            "type": "List (List a) -> List a"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a list and flatten the resulting lists.\n\n    concatMap f xs == concat (map f xs)\n",
            "type": "(a -> List b) -> List a -> List b"
          },
          {
            "name": "drop",
            "comment": " Drop the first *n* members of a list.\n\n    drop 2 [1,2,3,4] == [3,4]\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate.\n\n    filter isEven [1..6] == [2,4,6]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "filterMap",
            "comment": " Apply a function that may succeed to all values in the list, but only keep\nthe successes.\n\n    onlyTeens =\n      filterMap isTeen [3, 15, 12, 18, 24] == [15, 18]\n\n    isTeen : Int -> Maybe Int\n    isTeen n =\n      if 13 <= n && n <= 19 then\n        Just n\n\n      else\n        Nothing\n",
            "type": "(a -> Maybe.Maybe b) -> List a -> List b"
          },
          {
            "name": "foldl",
            "comment": " Reduce a list from the left.\n\n    foldl (::) [] [1,2,3] == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a list from the right.\n\n    foldr (+) 0 [1,2,3] == 6\n",
            "type": "(a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "head",
            "comment": " Extract the first element of a list.\n\n    head [1,2,3] == Just 1\n    head [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Same as `map` but the function is also applied to the index of each\nelement (starting at zero).\n\n    indexedMap (,) [\"Tom\",\"Sue\",\"Bob\"] == [ (0,\"Tom\"), (1,\"Sue\"), (2,\"Bob\") ]\n",
            "type": "(Int -> a -> b) -> List a -> List b"
          },
          {
            "name": "intersperse",
            "comment": " Places the given value between all members of the given list.\n\n    intersperse \"on\" [\"turtles\",\"turtles\",\"turtles\"] == [\"turtles\",\"on\",\"turtles\",\"on\",\"turtles\"]\n",
            "type": "a -> List a -> List a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a list is empty.\n\n    isEmpty [] == True\n",
            "type": "List a -> Bool"
          },
          {
            "name": "length",
            "comment": " Determine the length of a list.\n\n    length [1,2,3] == 3\n",
            "type": "List a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to every element of a list.\n\n    map sqrt [1,4,9] == [1,2,3]\n\n    map not [True,False,True] == [False,True,False]\n",
            "type": "(a -> b) -> List a -> List b"
          },
          {
            "name": "map2",
            "comment": " Combine two lists, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n\n    pairs : List a -> List b -> List (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights\n",
            "type": "(a -> b -> result) -> List a -> List b -> List result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> List a -> List b -> List c -> List result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> List a -> List b -> List c -> List d -> List result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> List a -> List b -> List c -> List d -> List e -> List result"
          },
          {
            "name": "maximum",
            "comment": " Find the maximum element in a non-empty list.\n\n    maximum [1,4,2] == Just 4\n    maximum []      == Nothing\n",
            "type": "List comparable -> Maybe.Maybe comparable"
          },
          {
            "name": "member",
            "comment": " Figure out whether a list contains a value.\n\n    member 9 [1,2,3,4] == False\n    member 4 [1,2,3,4] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "minimum",
            "comment": " Find the minimum element in a non-empty list.\n\n    minimum [3,2,1] == Just 1\n    minimum []      == Nothing\n",
            "type": "List comparable -> Maybe.Maybe comparable"
          },
          {
            "name": "partition",
            "comment": " Partition a list based on a predicate. The first list contains all values\nthat satisfy the predicate, and the second list contains all the value that do\nnot.\n\n    partition (\\x -> x < 3) [0..5] == ([0,1,2], [3,4,5])\n    partition isEven        [0..5] == ([0,2,4], [1,3,5])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "product",
            "comment": " Get the product of the list elements.\n\n    product [1..4] == 24\n",
            "type": "List number -> number"
          },
          {
            "name": "repeat",
            "comment": " Create a list with *n* copies of a value:\n\n    repeat 3 (0,0) == [(0,0),(0,0),(0,0)]\n",
            "type": "Int -> a -> List a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a list.\n\n    reverse [1..4] == [4,3,2,1]\n",
            "type": "List a -> List a"
          },
          {
            "name": "scanl",
            "comment": " Reduce a list from the left, building up all of the intermediate results into a list.\n\n    scanl (+) 0 [1,2,3,4] == [0,1,3,6,10]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "sort",
            "comment": " Sort values from lowest to highest\n\n    sort [3,1,5] == [1,3,5]\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort values by a derived property.\n\n    alice = { name=\"Alice\", height=1.62 }\n    bob   = { name=\"Bob\"  , height=1.85 }\n    chuck = { name=\"Chuck\", height=1.76 }\n\n    sortBy .name   [chuck,alice,bob] == [alice,bob,chuck]\n    sortBy .height [chuck,alice,bob] == [alice,chuck,bob]\n\n    sortBy String.length [\"mouse\",\"cat\"] == [\"cat\",\"mouse\"]\n",
            "type": "(a -> comparable) -> List a -> List a"
          },
          {
            "name": "sortWith",
            "comment": " Sort values with a custom comparison function.\n\n    sortWith flippedComparison [1..5] == [5,4,3,2,1]\n\n    flippedComparison a b =\n        case compare a b of\n          LT -> GT\n          EQ -> EQ\n          GT -> LT\n\nThis is also the most general sort function, allowing you\nto define any other: `sort == sortWith compare`\n",
            "type": "(a -> a -> Basics.Order) -> List a -> List a"
          },
          {
            "name": "sum",
            "comment": " Get the sum of the list elements.\n\n    sum [1..4] == 10\n",
            "type": "List number -> number"
          },
          {
            "name": "tail",
            "comment": " Extract the rest of the list.\n\n    tail [1,2,3] == Just [2,3]\n    tail [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "take",
            "comment": " Take the first *n* members of a list.\n\n    take 2 [1,2,3,4] == [1,2]\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "unzip",
            "comment": " Decompose a list of tuples into a tuple of lists.\n\n    unzip [(0, True), (17, False), (1337, True)] == ([0,17,1337], [True,False,True])\n",
            "type": "List ( a, b ) -> ( List a, List b )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Char",
        "comment": " Functions for working with characters. Character literals are enclosed in\n`'a'` pair of single quotes.\n\n# Classification\n@docs isUpper, isLower, isDigit, isOctDigit, isHexDigit\n\n# Conversion\n@docs toUpper, toLower, toLocaleUpper, toLocaleLower\n\n# Key Codes\n@docs KeyCode, toCode, fromCode\n\n",
        "aliases": [
          {
            "name": "KeyCode",
            "comment": " Keyboard keys can be represented as integers. These are called *key codes*.\nYou can use [`toCode`](#toCode) and [`fromCode`](#fromCode) to convert between\nkey codes and characters.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "fromCode",
            "comment": " Convert from key code. ",
            "type": "Char.KeyCode -> Char"
          },
          {
            "name": "isDigit",
            "comment": " True for ASCII digits `[0-9]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isHexDigit",
            "comment": " True for ASCII hexadecimal digits `[0-9a-fA-F]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isLower",
            "comment": " True for lower case ASCII letters. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isOctDigit",
            "comment": " True for ASCII octal digits `[0-7]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isUpper",
            "comment": " True for upper case ASCII letters. ",
            "type": "Char -> Bool"
          },
          {
            "name": "toCode",
            "comment": " Convert to key code.\n",
            "type": "Char -> Char.KeyCode"
          },
          {
            "name": "toLocaleLower",
            "comment": " Convert to lower case, according to any locale-specific case mappings. ",
            "type": "Char -> Char"
          },
          {
            "name": "toLocaleUpper",
            "comment": " Convert to upper case, according to any locale-specific case mappings. ",
            "type": "Char -> Char"
          },
          {
            "name": "toLower",
            "comment": " Convert to lower case. ",
            "type": "Char -> Char"
          },
          {
            "name": "toUpper",
            "comment": " Convert to upper case. ",
            "type": "Char -> Char"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Color",
        "comment": " Library for working with colors. Includes\n[RGB](https://en.wikipedia.org/wiki/RGB_color_model) and\n[HSL](http://en.wikipedia.org/wiki/HSL_and_HSV) creation, gradients, and\nbuilt-in names.\n\n# Colors\n@docs Color\n\n# Creation\n@docs rgb, rgba, hsl, hsla, greyscale, grayscale, complement\n\n# Gradients\n@docs Gradient, linear, radial\n\n# Extracting Colors\n@docs toRgb, toHsl\n\n# Built-in Colors\nThese colors come from the [Tango\npalette](http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines)\nwhich provides aesthetically reasonable defaults for colors. Each color also\ncomes with a light and dark version.\n\n### Standard\n@docs red, orange, yellow, green, blue, purple, brown\n\n### Light\n@docs lightRed, lightOrange, lightYellow, lightGreen, lightBlue, lightPurple, lightBrown\n\n### Dark\n@docs darkRed, darkOrange, darkYellow, darkGreen, darkBlue, darkPurple, darkBrown\n\n### Eight Shades of Grey\nThese colors are a compatible series of shades of grey, fitting nicely\nwith the Tango palette.\n@docs white, lightGrey, grey, darkGrey, lightCharcoal, charcoal, darkCharcoal, black\n\nThese are identical to the *grey* versions. It seems the spelling is regional, but\nthat has never helped me remember which one I should be writing.\n@docs lightGray, gray, darkGray\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Color",
            "comment": " Representation of colors.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Gradient",
            "comment": " Abstract representation of a color gradient.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "black",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "blue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "brown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "charcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "complement",
            "comment": " Produce a &ldquo;complementary color&rdquo;. The two colors will\naccent each other. This is the same as rotating the hue by 180&deg;.\n",
            "type": "Color.Color -> Color.Color"
          },
          {
            "name": "darkBlue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkBrown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkCharcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGreen",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGrey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkOrange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkPurple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkRed",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkYellow",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "gray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n",
            "type": "Float -> Color.Color"
          },
          {
            "name": "green",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "grey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n",
            "type": "Float -> Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives\nyou access to colors more like a color wheel, where all hues are arranged in a\ncircle that you specify with standard Elm angles (radians).\n\n    red   = hsl (degrees   0) 1 0.5\n    green = hsl (degrees 120) 1 0.5\n    blue  = hsl (degrees 240) 1 0.5\n\n    pastelRed = hsl (degrees 0) 0.7 0.7\n\nTo cycle through all colors, just cycle through degrees. The saturation level\nis how vibrant the color is, like a dial between grey and bright colors. The\nlightness level is a dial between white and black.\n",
            "type": "Float -> Float -> Float -> Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV)\nwith an alpha component for transparency.\n",
            "type": "Float -> Float -> Float -> Float -> Color.Color"
          },
          {
            "name": "lightBlue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightBrown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightCharcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGreen",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGrey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightOrange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightPurple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightRed",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightYellow",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "linear",
            "comment": " Create a linear gradient. Takes a start and end point and then a series of\n&ldquo;color stops&rdquo; that indicate how to interpolate between the start and\nend points. See [this example](http://elm-lang.org/examples/linear-gradient) for a\nmore visual explanation.\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> List ( Float, Color.Color ) -> Color.Gradient"
          },
          {
            "name": "orange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "purple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "radial",
            "comment": " Create a radial gradient. First takes a start point and inner radius.  Then\ntakes an end point and outer radius. It then takes a series of &ldquo;color\nstops&rdquo; that indicate how to interpolate between the inner and outer\ncircles. See [this example](http://elm-lang.org/examples/radial-gradient) for a\nmore visual explanation.\n",
            "type": "( Float, Float ) -> Float -> ( Float, Float ) -> Float -> List ( Float, Color.Color ) -> Color.Gradient"
          },
          {
            "name": "red",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Create RGB colors from numbers between 0 and 255 inclusive. ",
            "type": "Int -> Int -> Int -> Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Create RGB colors with an alpha component for transparency.\nThe alpha component is specified with numbers between 0 and 1. ",
            "type": "Int -> Int -> Int -> Float -> Color.Color"
          },
          {
            "name": "toHsl",
            "comment": " Extract the components of a color in the HSL format.\n",
            "type": "Color.Color -> { hue : Float , saturation : Float , lightness : Float , alpha : Float }"
          },
          {
            "name": "toRgb",
            "comment": " Extract the components of a color in the RGB format.\n",
            "type": "Color.Color -> { red : Int, green : Int, blue : Int, alpha : Float }"
          },
          {
            "name": "white",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "yellow",
            "comment": "",
            "type": "Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Result",
        "comment": " A `Result` is the result of a computation that may fail. This is a great\nway to manage errors in Elm.\n\n# Type and Constructors\n@docs Result\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs andThen\n\n# Handling Errors\n@docs withDefault, toMaybe, fromMaybe, formatError\n",
        "aliases": [],
        "types": [
          {
            "name": "Result",
            "comment": " A `Result` is either `Ok` meaning the computation succeeded, or it is an\n`Err` meaning that there was some failure.\n",
            "args": [
              "error",
              "value"
            ],
            "cases": [
              [
                "Ok",
                [
                  "value"
                ]
              ],
              [
                "Err",
                [
                  "error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together a sequence of computations that may fail. It is helpful\nto see its definition:\n\n    andThen : Result e a -> (a -> Result e b) -> Result e b\n    andThen result callback =\n        case result of\n          Ok value -> callback value\n          Err msg -> Err msg\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`toInt : String -> Result String Int`) to parse\na month and make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Result String Int\n    toValidMonth month =\n        if month >= 1 && month <= 12\n            then Ok month\n            else Err \"months must be between 1 and 12\"\n\n    toMonth : String -> Result String Int\n    toMonth rawString =\n        toInt rawString `andThen` toValidMonth\n\n    -- toMonth \"4\" == Ok 4\n    -- toMonth \"9\" == Ok 9\n    -- toMonth \"a\" == Err \"cannot parse to an Int\"\n    -- toMonth \"0\" == Err \"months must be between 1 and 12\"\n\nThis allows us to come out of a chain of operations with quite a specific error\nmessage. It is often best to create a custom type that explicitly represents\nthe exact ways your computation may fail. This way it is easy to handle in your\ncode.\n",
            "type": "Result.Result x a -> (a -> Result.Result x b) -> Result.Result x b"
          },
          {
            "name": "formatError",
            "comment": " Format the error value of a result. If the result is `Ok`, it stays exactly\nthe same, but if the result is an `Err` we will format the error. For example,\nsay the errors we get have too much information:\n\n    parseInt : String -> Result ParseError Int\n\n    type alias ParseError =\n        { message : String\n        , code : Int\n        , position : (Int,Int)\n        }\n\n    formatError .message (parseInt \"123\") == Ok 123\n    formatError .message (parseInt \"abc\") == Err \"char 'a' is not a number\"\n",
            "type": "(error -> error') -> Result.Result error a -> Result.Result error' a"
          },
          {
            "name": "fromMaybe",
            "comment": " Convert from a simple `Maybe` to interact with some code that primarily\nuses `Results`.\n\n    parseInt : String -> Maybe Int\n\n    resultParseInt : String -> Result String Int\n    resultParseInt string =\n        fromMaybe (\"error parsing string: \" ++ toString string) (parseInt string)\n",
            "type": "x -> Maybe.Maybe a -> Result.Result x a"
          },
          {
            "name": "map",
            "comment": " Apply a function to a result. If the result is `Ok`, it will be converted.\nIf the result is an `Err`, the same error value will propagate through.\n\n    map sqrt (Ok 4.0)          == Ok 2.0\n    map sqrt (Err \"bad input\") == Err \"bad input\"\n",
            "type": "(a -> value) -> Result.Result x a -> Result.Result x value"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two results, if both results are `Ok`. If not,\nthe first argument which is an `Err` will propagate through.\n\n    map2 (+) (String.toInt \"1\") (String.toInt \"2\") == Ok 3\n    map2 (+) (String.toInt \"1\") (String.toInt \"y\") == Err \"could not convert string 'y' to an Int\"\n    map2 (+) (String.toInt \"x\") (String.toInt \"y\") == Err \"could not convert string 'x' to an Int\"\n",
            "type": "(a -> b -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x value"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x e -> Result.Result x value"
          },
          {
            "name": "toMaybe",
            "comment": " Convert to a simpler `Maybe` if the actual error message is not needed or\nyou need to interact with some code that primarily uses maybes.\n\n    parseInt : String -> Result ParseError Int\n\n    maybeParseInt : String -> Maybe Int\n    maybeParseInt string =\n        toMaybe (parseInt string)\n",
            "type": "Result.Result x a -> Maybe.Maybe a"
          },
          {
            "name": "withDefault",
            "comment": " If the result is `Ok` return the value, but if the result is an `Err` then\nreturn a given default value. The following examples try to parse integers.\n\n    Result.withDefault 0 (String.toInt \"123\") == 123\n    Result.withDefault 0 (String.toInt \"abc\") == 0\n",
            "type": "a -> Result.Result x a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Regex",
        "comment": " A library for working with regular expressions. It uses [the\nsame kind of regular expressions accepted by JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n# Create\n@docs Regex, regex, escape, caseInsensitive\n\n# Helpful Data Structures\n\nThese data structures are needed to help define functions like [`find`](#find)\nand [`replace`](#replace).\n\n@docs HowMany, Match\n\n# Use\n@docs contains, find, replace, split\n\n",
        "aliases": [
          {
            "name": "Match",
            "comment": " A `Match` represents all of the details about a particular match in a string.\nHere are details on each field:\n\n  * `match` &mdash; the full string of the match.\n  * `submatches` &mdash; a regex might have [subpatterns, surrounded by\n    parentheses](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Parenthesized_Substring_Matches).\n    If there are N subpatterns, there will be N elements in the `submatches` list.\n    Each submatch in this list is a `Maybe` because not all subpatterns may trigger.\n    For example, `(regex \"(a+)|(b+)\")` will either match many `a`&rsquo;s or\n    many `b`&rsquo;s, but never both.\n  * `index` &mdash; the index of the match in the original string.\n  * `number` &mdash; if you find many matches, you can think of each one\n    as being labeled with a `number` starting at one. So the first time you\n    find a match, that is match `number` one. Second time is match `number` two.\n    This is useful when paired with `replace All` if replacement is dependent on how\n    many times a pattern has appeared before.\n",
            "args": [],
            "type": "{ match : String , submatches : List (Maybe.Maybe String) , index : Int , number : Int }"
          }
        ],
        "types": [
          {
            "name": "HowMany",
            "comment": " `HowMany` is used to specify how many matches you want to make. So\n`replace All` would replace every match, but `replace (AtMost 2)` would\nreplace at most two matches (i.e. zero, one, two, but never three or more).\n",
            "args": [],
            "cases": [
              [
                "All",
                []
              ],
              [
                "AtMost",
                [
                  "Int"
                ]
              ]
            ]
          },
          {
            "name": "Regex",
            "comment": " A regular expression, describing a certain set of strings.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "caseInsensitive",
            "comment": " Make a regex case insensitive ",
            "type": "Regex.Regex -> Regex.Regex"
          },
          {
            "name": "contains",
            "comment": " Check to see if a Regex is contained in a string.\n\n    contains (regex \"123\") \"12345\" == True\n    contains (regex \"b+\") \"aabbcc\" == True\n\n    contains (regex \"789\") \"12345\" == False\n    contains (regex \"z+\") \"aabbcc\" == False\n",
            "type": "Regex.Regex -> String -> Bool"
          },
          {
            "name": "escape",
            "comment": " Escape strings to be regular expressions, making all special characters\nsafe. So `regex (escape \"^a+\")` will match exactly `\"^a+\"` instead of a series\nof `a`&rsquo;s that start at the beginning of the line.\n",
            "type": "String -> String"
          },
          {
            "name": "find",
            "comment": " Find matches in a string:\n\n    findTwoCommas = find (AtMost 2) (regex \",\")\n\n      -- map .index (findTwoCommas \"a,b,c,d,e\") == [1,3]\n      -- map .index (findTwoCommas \"a b c d e\") == []\n\n    places = find All (regex \"[oi]n a (\\\\w+)\") \"I am on a boat in a lake.\"\n\n      -- map .match places == [\"on a boat\", \"in a lake\"]\n      -- map .submatches places == [ [Just \"boat\"], [Just \"lake\"] ]\n",
            "type": "Regex.HowMany -> Regex.Regex -> String -> List Regex.Match"
          },
          {
            "name": "regex",
            "comment": " Create a Regex that matches patterns [as specified in JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Writing_a_Regular_Expression_Pattern).\n\nBe careful to escape backslashes properly! For example, `\"\\w\"` is escaping the\nletter `w` which is probably not what you want. You probably want `\"\\\\w\"`\ninstead, which escapes the backslash.\n",
            "type": "String -> Regex.Regex"
          },
          {
            "name": "replace",
            "comment": " Replace matches. The function from `Match` to `String` lets\nyou use the details of a specific match when making replacements.\n\n    devowel = replace All (regex \"[aeiou]\") (\\_ -> \"\")\n\n      -- devowel \"The quick brown fox\" == \"Th qck brwn fx\"\n\n    reverseWords = replace All (regex \"\\\\w+\") (\\{match} -> String.reverse match)\n\n      -- reverseWords \"deliver mined parts\" == \"reviled denim strap\"\n",
            "type": "Regex.HowMany -> Regex.Regex -> (Regex.Match -> String) -> String -> String"
          },
          {
            "name": "split",
            "comment": " Split a string, using the regex as the separator.\n\n    split (AtMost 1) (regex \",\") \"tom,99,90,85\" == [\"tom\",\"99,90,85\"]\n\n    split All (regex \",\") \"a,b,c,d\" == [\"a\",\"b\",\"c\",\"d\"]\n",
            "type": "Regex.HowMany -> Regex.Regex -> String -> List String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Basics",
        "comment": " Tons of useful functions that get imported by default.\n\n# Equality\n@docs (==), (/=)\n\n# Comparison\n\nThese functions only work on `comparable` types. This includes numbers,\ncharacters, strings, lists of comparable things, and tuples of comparable\nthings. Note that tuples with 7 or more elements are not comparable; why\nare your tuples so big?\n\n@docs (<), (>), (<=), (>=), max, min, Order, compare\n\n# Booleans\n@docs not, (&&), (||), xor\n\n# Mathematics\n@docs (+), (-), (*), (/), (^), (//), rem, (%), negate, abs, sqrt, clamp, logBase, e\n\n# Trigonometry\n@docs pi, cos, sin, tan, acos, asin, atan, atan2\n\n# Number Conversions\n@docs round, floor, ceiling, truncate, toFloat\n\n# Angle Conversions\nAll angle conversions result in &ldquo;standard Elm angles&rdquo;\nwhich happen to be radians.\n\n@docs degrees, radians, turns\n\n# Polar Coordinates\n@docs toPolar, fromPolar\n\n# Floating Point Checks\n@docs isNaN, isInfinite\n\n# Strings and Lists\n@docs toString, (++)\n\n# Tuples\n@docs fst, snd\n\n# Higher-Order Helpers\n@docs identity, always, (<|), (|>), (<<), (>>), flip, curry, uncurry, Never\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Never",
            "comment": " A type that is \"uninhabited\". There are no values of type `Never`, and its\nprimary use is demanding that certain tasks cannot possibly fail.\n\nFor example, a task with type `(Task Never Int)` must *always* succeed with an\ninteger. For the task to fail, someone would need to say `(Task.fail ???)` but\nsince there is no value with type `Never` they could not fill in the question\nmarks!\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Order",
            "comment": " Represents the relative ordering of two things.\nThe relations are less than, equal to, and greater than.\n",
            "args": [],
            "cases": [
              [
                "LT",
                []
              ],
              [
                "EQ",
                []
              ],
              [
                "GT",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "%",
            "comment": " Perform [modular arithmetic](http://en.wikipedia.org/wiki/Modular_arithmetic).\n\n     7 % 2 == 1\n    -1 % 4 == 3\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "&&",
            "comment": " The logical AND operator. `True` if both inputs are `True`.\n\n**Note:** When used in the infix position, like `(left && right)`, the operator\nshort-circuits. This means if `left` is `False` we do not bother evaluating `right`\nand just return `False` overall.\n",
            "type": "Bool -> Bool -> Bool",
            "associativity": "right",
            "precedence": 3
          },
          {
            "name": "*",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "+",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 6
          },
          {
            "name": "++",
            "comment": " Put two appendable things together. This includes strings, lists, and text.\n\n    \"hello\" ++ \"world\" == \"helloworld\"\n    [1,1,2] ++ [3,5,8] == [1,1,2,3,5,8]\n",
            "type": "appendable -> appendable -> appendable",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "-",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 6
          },
          {
            "name": "/",
            "comment": " Floating point division. ",
            "type": "Float -> Float -> Float",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "//",
            "comment": " Integer division. The remainder is discarded. ",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "/=",
            "comment": " Check if values are not &ldquo;the same&rdquo;.\n\nSo `(a /= b)` is the same as `(not (a == b))`.\n",
            "type": "a -> a -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<<",
            "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    not << isEven << sqrt\n\nYou can think of this operator as equivalent to the following:\n\n    (g << f)  ==  (\\x -> g (f x))\n\nSo our example expands out to something like this:\n\n    \\n -> not (isEven (sqrt n))\n",
            "type": "(b -> c) -> (a -> b) -> a -> c",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "<=",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<|",
            "comment": " Backward function application `f <| x == f x`. This function is useful for\navoiding parentheses. Consider the following code to create a text element:\n\n    leftAligned (monospace (fromString \"code\"))\n\nThis can also be written as:\n\n    leftAligned <| monospace <| fromString \"code\"\n",
            "type": "(a -> b) -> a -> b",
            "associativity": "right",
            "precedence": 0
          },
          {
            "name": "==",
            "comment": " Check if values are &ldquo;the same&rdquo;.\n\n**Note:** Elm uses structural equality on tuples, records, and user-defined\nunion types. This means the values `(3, 4)` and `(3, 4)` are definitely equal.\nThis is not true in languages like JavaScript that use reference equality on\nobjects.\n\n**Note:** Equality (in the Elm sense) is not possible for certain types. For\nexample, the functions `(\\n -> n + 1)` and `(\\n -> 1 + n)` are &ldquo;the\nsame&rdquo; but detecting this in general is [undecidable][]. In a future\nrelease, the compiler will detect when `(==)` is used with problematic\ntypes and provide a helpful error message. This will require quite serious\ninfrastructure work that makes sense to batch with another big project, so the\nstopgap is to crash as quickly as possible. Problematic types include functions\nand JavaScript values like `Json.Encode.Value` which could contain functions\nif passed through a port.\n\n[undecidable]: https://en.wikipedia.org/wiki/Undecidable_problem\n",
            "type": "a -> a -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">=",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">>",
            "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    sqrt >> isEven >> not\n\nThis direction of function composition seems less pleasant than `(<<)` which\nreads nicely in expressions like: `filter (not << isRegistered) students`\n",
            "type": "(a -> b) -> (b -> c) -> a -> c",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "^",
            "comment": " Exponentiation\n\n    3^2 == 9\n",
            "type": "number -> number -> number",
            "associativity": "right",
            "precedence": 8
          },
          {
            "name": "abs",
            "comment": " Take the absolute value of a number. ",
            "type": "number -> number"
          },
          {
            "name": "acos",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "always",
            "comment": " Create a [constant function](http://en.wikipedia.org/wiki/Constant_function),\na function that *always* returns the same value regardless of what input you give.\nIt is defined as:\n\n    always a b = a\n\nIt totally ignores the second argument, so `always 42` is a function that always\nreturns 42. When you are dealing with higher-order functions, this comes in\nhandy more often than you might expect. For example, creating a zeroed out list\nof length ten would be:\n\n    map (always 0) [0..9]\n",
            "type": "a -> b -> a"
          },
          {
            "name": "asin",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "atan",
            "comment": " You probably do not want to use this. It takes `(y/x)` as the\nargument, so there is no way to know whether the negative signs comes from\nthe `y` or `x`. Thus, the resulting angle is always between &pi;/2 and -&pi;/2\n(in quadrants I and IV). You probably want to use `atan2` instead.\n",
            "type": "Float -> Float"
          },
          {
            "name": "atan2",
            "comment": " This helps you find the angle of a Cartesian coordinate.\nYou will almost certainly want to use this instead of `atan`.\nSo `atan2 y x` computes *atan(y/x)* but also keeps track of which\nquadrant the angle should really be in. The result will be between\n&pi; and -&pi;, giving you the full range of angles.\n",
            "type": "Float -> Float -> Float"
          },
          {
            "name": "ceiling",
            "comment": " Ceiling function, rounding up. ",
            "type": "Float -> Int"
          },
          {
            "name": "clamp",
            "comment": " Clamps a number within a given range. With the expression\n`clamp 100 200 x` the results are as follows:\n\n    100     if x < 100\n     x      if 100 <= x < 200\n    200     if 200 <= x\n",
            "type": "number -> number -> number -> number"
          },
          {
            "name": "compare",
            "comment": " Compare any two comparable values. Comparable values include `String`, `Char`,\n`Int`, `Float`, `Time`, or a list or tuple containing comparable values.\nThese are also the only values that work as `Dict` keys or `Set` members.\n",
            "type": "comparable -> comparable -> Basics.Order"
          },
          {
            "name": "cos",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "curry",
            "comment": " Change how arguments are passed to a function.\nThis splits paired arguments into two separate arguments.\n",
            "type": "(( a, b ) -> c) -> a -> b -> c"
          },
          {
            "name": "degrees",
            "comment": " Convert degrees to standard Elm angles (radians). ",
            "type": "Float -> Float"
          },
          {
            "name": "e",
            "comment": " An approximation of e. ",
            "type": "Float"
          },
          {
            "name": "flip",
            "comment": " Flip the order of the first two arguments to a function. ",
            "type": "(a -> b -> c) -> b -> a -> c"
          },
          {
            "name": "floor",
            "comment": " Floor function, rounding down. ",
            "type": "Float -> Int"
          },
          {
            "name": "fromPolar",
            "comment": " Convert polar coordinates (r,&theta;) to Cartesian coordinates (x,y). ",
            "type": "( Float, Float ) -> ( Float, Float )"
          },
          {
            "name": "fst",
            "comment": " Given a 2-tuple, returns the first value. ",
            "type": "( a, b ) -> a"
          },
          {
            "name": "identity",
            "comment": " Given a value, returns exactly the same value. This is called\n[the identity function](http://en.wikipedia.org/wiki/Identity_function).\n",
            "type": "a -> a"
          },
          {
            "name": "isInfinite",
            "comment": " Determine whether a float is positive or negative infinity.\n\n    isInfinite (0/0)     == False\n    isInfinite (sqrt -1) == False\n    isInfinite (1/0)     == True\n    isInfinite 1         == False\n\nNotice that NaN is not infinite! For float `n` to be finite implies that\n`not (isInfinite n || isNaN n)` evaluates to `True`.\n",
            "type": "Float -> Bool"
          },
          {
            "name": "isNaN",
            "comment": " Determine whether a float is an undefined or unrepresentable number.\nNaN stands for *not a number* and it is [a standardized part of floating point\nnumbers](http://en.wikipedia.org/wiki/NaN).\n\n    isNaN (0/0)     == True\n    isNaN (sqrt -1) == True\n    isNaN (1/0)     == False  -- infinity is a number\n    isNaN 1         == False\n",
            "type": "Float -> Bool"
          },
          {
            "name": "logBase",
            "comment": " Calculate the logarithm of a number with a given base.\n\n    logBase 10 100 == 2\n    logBase 2 256 == 8\n",
            "type": "Float -> Float -> Float"
          },
          {
            "name": "max",
            "comment": " Find the larger of two comparables. ",
            "type": "comparable -> comparable -> comparable"
          },
          {
            "name": "min",
            "comment": " Find the smaller of two comparables. ",
            "type": "comparable -> comparable -> comparable"
          },
          {
            "name": "negate",
            "comment": " Negate a number.\n\n    negate 42 == -42\n    negate -42 == 42\n    negate 0 == 0\n",
            "type": "number -> number"
          },
          {
            "name": "not",
            "comment": " Negate a boolean value.\n\n    not True == False\n    not False == True\n",
            "type": "Bool -> Bool"
          },
          {
            "name": "pi",
            "comment": " An approximation of pi. ",
            "type": "Float"
          },
          {
            "name": "radians",
            "comment": " Convert radians to standard Elm angles (radians). ",
            "type": "Float -> Float"
          },
          {
            "name": "rem",
            "comment": " Find the remainder after dividing one number by another.\n\n     7 `rem` 2 == 1\n    -1 `rem` 4 == -1\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "round",
            "comment": " Round a number to the nearest integer. ",
            "type": "Float -> Int"
          },
          {
            "name": "sin",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "snd",
            "comment": " Given a 2-tuple, returns the second value. ",
            "type": "( a, b ) -> b"
          },
          {
            "name": "sqrt",
            "comment": " Take the square root of a number. ",
            "type": "Float -> Float"
          },
          {
            "name": "tan",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "toFloat",
            "comment": " Convert an integer into a float. ",
            "type": "Int -> Float"
          },
          {
            "name": "toPolar",
            "comment": " Convert Cartesian coordinates (x,y) to polar coordinates (r,&theta;). ",
            "type": "( Float, Float ) -> ( Float, Float )"
          },
          {
            "name": "toString",
            "comment": " Turn any kind of value into a string. When you view the resulting string\nwith `Text.fromString` it should look just like the value it came from.\n\n    toString 42 == \"42\"\n    toString [1,2] == \"[1,2]\"\n    toString \"he said, \\\"hi\\\"\" == \"\\\"he said, \\\\\\\"hi\\\\\\\"\\\"\"\n",
            "type": "a -> String"
          },
          {
            "name": "truncate",
            "comment": " Truncate a number, rounding towards zero. ",
            "type": "Float -> Int"
          },
          {
            "name": "turns",
            "comment": " Convert turns to standard Elm angles (radians).\nOne turn is equal to 360&deg;.\n",
            "type": "Float -> Float"
          },
          {
            "name": "uncurry",
            "comment": " Change how arguments are passed to a function.\nThis combines two arguments into a single pair.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> c"
          },
          {
            "name": "xor",
            "comment": " The exclusive-or operator. `True` if exactly one input is `True`. ",
            "type": "Bool -> Bool -> Bool"
          },
          {
            "name": "|>",
            "comment": " Forward function application `x |> f == f x`. This function is useful\nfor avoiding parentheses and writing code in a more natural way.\nConsider the following code to create a pentagon:\n\n    scale 2 (move (10,10) (filled blue (ngon 5 30)))\n\nThis can also be written as:\n\n    ngon 5 30\n      |> filled blue\n      |> move (10,10)\n      |> scale 2\n",
            "type": "a -> (a -> b) -> b",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "||",
            "comment": " The logical OR operator. `True` if one or both inputs are `True`.\n\n**Note:** When used in the infix position, like `(left || right)`, the operator\nshort-circuits. This means if `left` is `True` we do not bother evaluating `right`\nand just return `True` overall.\n",
            "type": "Bool -> Bool -> Bool",
            "associativity": "right",
            "precedence": 2
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Platform.Sub",
        "comment": "\n\n@docs Sub, map, batch, none\n",
        "aliases": [],
        "types": [
          {
            "name": "Sub",
            "comment": " A subscription is a way of telling Elm, “Hey, let me know if anything\ninteresting happens over there!” So if you want listen for messages on a web\nsocket, you would tell Elm to create a subscription. If you want to get clock\nticks, you would tell Elm to subscribe to that. The cool thing here is that\nthis means *Elm* manages all the details of subscriptions instead of *you*.\nSo if a web socket goes down, *you* do not need to manually reconnect with an\nexponential backoff strategy, *Elm* does this all for you behind the scenes!\n\nEvery `Sub` specifies (1) which effects you need access to and (2) the type of\nmessages that will come back into your application.\n\n**Note:** Do not worry if this seems confusing at first! As with every Elm user\never, subscriptions will make more sense as you work through [the Elm Architecture\nTutorial](http://guide.elm-lang.org/architecture/index.html) and see how they fit\ninto a real application!\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "batch",
            "comment": "",
            "type": "List (Platform.Sub.Sub msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "(a -> msg) -> Platform.Sub.Sub a -> Platform.Sub.Sub msg"
          },
          {
            "name": "none",
            "comment": "",
            "type": "Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Platform.Cmd",
        "comment": "\n\n# Effects\n\nElm has **managed effects**, meaning that things like HTTP requests or writing\nto disk are all treated as *data* in Elm. When this data is given to the Elm\nruntime system, it can do some “query optimization” before actually performing\nthe effect. Perhaps unexpectedly, this managed effects idea is the heart of why\nElm is so nice for testing, reuse, reproducibility, etc.\n\nThere are two kinds of managed effects you will use in your programs: commands\nand subscriptions.\n\n@docs Cmd, map, batch, none, (!)\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Cmd",
            "comment": " A command is a way of telling Elm, “Hey, I want you to do this thing!”\nSo if you want to send an HTTP request, you would need to command Elm to do it.\nOr if you wanted to ask for geolocation, you would need to command Elm to go\nget it.\n\nEvery `Cmd` specifies (1) which effects you need access to and (2) the type of\nmessages that will come back into your application.\n\n**Note:** Do not worry if this seems confusing at first! As with every Elm user\never, commands will make more sense as you work through [the Elm Architecture\nTutorial](http://guide.elm-lang.org/architecture/index.html) and see how they\nfit into a real application!\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "!",
            "comment": "",
            "type": "model -> List (Platform.Cmd.Cmd msg) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "batch",
            "comment": "",
            "type": "List (Platform.Cmd.Cmd msg) -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "(a -> msg) -> Platform.Cmd.Cmd a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "none",
            "comment": "",
            "type": "Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Debug",
        "comment": " This library is for investigating bugs or performance problems. It should\n*not* be used in production code.\n\n# Debugging\n@docs log, crash\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "crash",
            "comment": " Crash the program with an error message. This is an uncatchable error,\nintended for code that is soon-to-be-implemented. For example, if you are\nworking with a large ADT and have partially completed a case expression, it may\nmake sense to do this:\n\n    type Entity = Ship | Fish | Captain | Seagull\n\n    drawEntity entity =\n      case entity of\n        Ship ->\n          ...\n\n        Fish ->\n          ...\n\n        _ ->\n          Debug.crash \"TODO\"\n\nThe Elm compiler recognizes each `Debug.crash` and when you run into it at\nruntime, the error will point to the corresponding module name and line number.\nFor `case` expressions that ends with a wildcard pattern and a crash, it will\nalso show the value that snuck through. In our example, that'd be `Captain` or\n`Seagull`.\n\n**Use this if** you want to do some testing while you are partway through\nwriting a function.\n\n**Do not use this if** you want to do some typical try-catch exception handling.\nUse the [`Maybe`](Maybe) or [`Result`](Result) libraries instead.\n",
            "type": "String -> a"
          },
          {
            "name": "log",
            "comment": " Log a tagged value on the developer console, and then return the value.\n\n    1 + log \"number\" 1        -- equals 2, logs \"number: 1\"\n    length (log \"start\" [])   -- equals 0, logs \"start: []\"\n\nNotice that `log` is not a pure function! It should *only* be used for\ninvestigating bugs or performance problems.\n",
            "type": "String -> a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Maybe",
        "comment": " This library fills a bunch of important niches in Elm. A `Maybe` can help\nyou with optional arguments, error handling, and records with optional fields.\n\n# Definition\n@docs Maybe\n\n# Common Helpers\n@docs withDefault, oneOf, map, map2, map3, map4, map5\n\n# Chaining Maybes\n@docs andThen\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Maybe",
            "comment": " Represent values that may or may not exist. It can be useful if you have a\nrecord field that is only filled in sometimes. Or if a function takes a value\nsometimes, but does not absolutely need it.\n\n    -- A person, but maybe we do not know their age.\n    type alias Person =\n        { name : String\n        , age : Maybe Int\n        }\n\n    tom = { name = \"Tom\", age = Just 42 }\n    sue = { name = \"Sue\", age = Nothing }\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Just",
                [
                  "a"
                ]
              ],
              [
                "Nothing",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together many computations that may fail. It is helpful to see its\ndefinition:\n\n    andThen : Maybe a -> (a -> Maybe b) -> Maybe b\n    andThen maybe callback =\n        case maybe of\n            Just value ->\n                callback value\n\n            Nothing ->\n                Nothing\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`head : List Int -> Maybe Int`) to get the\nfirst month from a `List` and then make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Maybe Int\n    toValidMonth month =\n        if month >= 1 && month <= 12 then\n            Just month\n        else\n            Nothing\n\n    getFirstMonth : List Int -> Maybe Int\n    getFirstMonth months =\n        head months `andThen` toValidMonth\n\nIf `head` fails and results in `Nothing` (because the `List` was `empty`),\nthis entire chain of operations will short-circuit and result in `Nothing`.\nIf `toValidMonth` results in `Nothing`, again the chain of computations\nwill result in `Nothing`.\n",
            "type": "Maybe.Maybe a -> (a -> Maybe.Maybe b) -> Maybe.Maybe b"
          },
          {
            "name": "map",
            "comment": " Transform a `Maybe` value with a given function:\n\n    map sqrt (Just 9) == Just 3\n    map sqrt Nothing == Nothing\n",
            "type": "(a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "map2",
            "comment": " Apply a function if all the arguments are `Just` a value.\n\n    map2 (+) (Just 3) (Just 4) == Just 7\n    map2 (+) (Just 3) Nothing == Nothing\n    map2 (+) Nothing (Just 4) == Nothing\n",
            "type": "(a -> b -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe value"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe value"
          },
          {
            "name": "oneOf",
            "comment": " Pick the first `Maybe` that actually has a value. Useful when you want to\ntry a couple different things, but there is no default value.\n\n    oneOf [ Nothing, Just 42, Just 71 ] == Just 42\n    oneOf [ Nothing, Nothing, Just 71 ] == Just 71\n    oneOf [ Nothing, Nothing, Nothing ] == Nothing\n",
            "type": "List (Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "withDefault",
            "comment": " Provide a default value, turning an optional value into a normal\nvalue.  This comes in handy when paired with functions like\n[`Dict.get`](Dict#get) which gives back a `Maybe`.\n\n    withDefault 100 (Just 42)   -- 42\n    withDefault 100 Nothing     -- 100\n\n    withDefault \"unknown\" (Dict.get \"Tom\" Dict.empty)   -- \"unknown\"\n\n",
            "type": "a -> Maybe.Maybe a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Bitwise",
        "comment": " Library for [bitwise operations](http://en.wikipedia.org/wiki/Bitwise_operation).\n\n# Basic Operations\n\n@docs and, or, xor, complement\n\n# Bit Shifts\n\n@docs shiftLeft, shiftRight, shiftRightLogical\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "and",
            "comment": " Bitwise AND\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "complement",
            "comment": " Flip each bit individually, often called bitwise NOT\n",
            "type": "Int -> Int"
          },
          {
            "name": "or",
            "comment": " Bitwise OR\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftLeft",
            "comment": " Shift bits to the left by a given offset, filling new bits with zeros.\nThis can be used to multiply numbers by powers of two.\n\n    8 `shiftLeft` 1 == 16\n    8 `shiftLeft` 2 == 32\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftRight",
            "comment": " Shift bits to the right by a given offset, filling new bits with\nwhatever is the topmost bit. This can be used to divide numbers by powers of two.\n\n     32 `shiftRight` 1 == 16\n     32 `shiftRight` 2 == 8\n    -32 `shiftRight` 1 == -16\n\nThis is called an [arithmetic right\nshift](http://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift),\noften written (>>), and sometimes called a sign-propagating\nright shift because it fills empty spots with copies of the highest bit.\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftRightLogical",
            "comment": " Shift bits to the right by a given offset, filling new bits with\nzeros.\n\n     32 `shiftRightLogical` 1 == 16\n     32 `shiftRightLogical` 2 == 8\n    -32 `shiftRightLogical` 1 == 2147483632\n\nThis is called an [logical right\nshift](http://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift), often written (>>>),\nand sometimes called a zero-fill right shift because it fills empty spots\nwith zeros.\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "xor",
            "comment": " Bitwise XOR\n",
            "type": "Int -> Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-lang/dom",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Dom.Scroll",
        "comment": " When you set `overflow-y: scroll` on an element, a scroll bar will appear\nwhen the content overflows the available space. When that happens, you may want\nto modify the scroll position yourself. For example, maybe you have a chat room\nthat autoscrolls as new messages come in. This module provides functions like\n`Dom.Scroll.toBottom` that let you do that kind of thing.\n\n# Vertical\n@docs toTop, toBottom, y, toY\n\n# Horizontal\n@docs toLeft, toRight, x, toX\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toBottom",
            "comment": " Find the node with the given `Id` and scroll it to the bottom.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toLeft",
            "comment": " Find the node with the given `Id` and scroll it to the far left.\n\nSo `toLeft id` is the same as `toX id 0`.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toRight",
            "comment": " Find the node with the given `Id` and scroll it to the far right.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toTop",
            "comment": " Find the node with the given `Id` and scroll it to the top.\n\nSo `toTop id` is the same as `toY id 0`.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "toX",
            "comment": " Set the horizontal scroll to whatever offset you want.\n\nIt works just like `toY`, so check out those docs for a more complete example.\n",
            "type": "Dom.Id -> Float -> Task.Task Dom.Error ()"
          },
          {
            "name": "toY",
            "comment": " Set the vertical scroll to whatever offset you want.\n\nImagine you have a chat room and you want to control how it scrolls. Say the\nfull chat is 400 pixels long, but it is in a box that limits the visible height\nto 100 pixels.\n\n  - If we say `toY \"chat\" 0` it will scroll to the very top.\n  - If we say `toY \"chat\" 300` it will be at the bottom.\n\nIf we provide values outside that range, they just get clamped, so\n`toY \"chat\" 900` is also scrolled to the bottom.\n",
            "type": "Dom.Id -> Float -> Task.Task Dom.Error ()"
          },
          {
            "name": "x",
            "comment": " How much this element is scrolled horizontally.\n\nSay you have a node that does not fit in its container. A scroll bar shows up.\nInitially you are at the far left, which means `x` is `0`. If you scroll right\n300 pixels, `x` will be `300`.\n\nThis is roughly the same as saying [`document.getElementById(id).scrollLeft`][docs].\n\n[docs]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n",
            "type": "Dom.Id -> Task.Task Dom.Error Float"
          },
          {
            "name": "y",
            "comment": " How much this element is scrolled vertically.\n\nSay you have a node that does not fit in its container. A scroll bar shows up.\nInitially you are at the top, which means `y` is `0`. If you scroll down 300\npixels, `y` will be `300`.\n\nThis is roughly the same as saying [`document.getElementById(id).scrollTop`][docs].\n\n[docs]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n",
            "type": "Dom.Id -> Task.Task Dom.Error Float"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Dom",
        "comment": "\n\n# Focus\n@docs focus, blur, Id\n\n# Errors\n@docs Error\n\n",
        "aliases": [
          {
            "name": "Id",
            "comment": " A unique identifier for a particular DOM node. When you create\n`<div id=\"my-thing\"></div>` you would refer to it with the `Id` `\"my-thing\"`.\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " All the functions here look up DOM nodes by ID. If you ask for an ID that\nis not currently attached to the DOM, you will get this error!\n",
            "args": [],
            "cases": [
              [
                "NotFound",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "blur",
            "comment": " On a website, there can only be one thing in focus at a time. A text field,\na check box, etc. Sometimes you want that thing to no longer be in focus. This\nis called &ldquo;blur&rdquo; for reasons that are unclear to almost everybody.\nSo this function tells a particular DOM node to lose focus.\n\n    Dom.blur \"my-thing\"\n\nThis is roughly the same as saying `document.getElementById(id).blur()`.\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          },
          {
            "name": "focus",
            "comment": " On a website, there can only be one thing in focus at a time. A text field,\na check box, etc. This function tells the Elm runtime to move the focus to a\nparticular DOM node.\n\n    Dom.focus \"my-thing\"\n\nThis is roughly the same as saying `document.getElementById(id).focus()`.\n\nNOTE: setting focus can silently fail if the element is invisible. This could be captured as an error by checking to see\nif document.activeElement actually got updated to the element we selected. https://jsbin.com/xeletez/edit?html,js,output\n",
            "type": "Dom.Id -> Task.Task Dom.Error ()"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Dom.LowLevel",
        "comment": " This is not for general use. It backs libraries like `elm-lang/mouse` and\n`elm-lang/window` which should cover your needs in most cases. In the rare\ncase that those packages do not seem to cover your scenario, first bring it up\nwith the community. Ask around and learn stuff first! Only get into these\nfunctions after that.\n\n# Global Event Listeners\n@docs onDocument, onWindow\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onDocument",
            "comment": " Add an event handler on the `document`. The resulting task will never end,\nand when you kill the process it is on, it will detach the relevant JavaScript\nevent listener.\n",
            "type": "String -> Json.Decode.Decoder msg -> (msg -> Task.Task Basics.Never ()) -> Task.Task Basics.Never Basics.Never"
          },
          {
            "name": "onWindow",
            "comment": " Add an event handler on `window`. The resulting task will never end, and\nwhen you kill the process it is on, it will detach the relevant JavaScript\nevent listener.\n",
            "type": "String -> Json.Decode.Decoder msg -> (msg -> Task.Task Basics.Never ()) -> Task.Task Basics.Never Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-lang/geolocation",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Geolocation",
        "comment": " Find out about where a user’s device is located. [Geolocation API][geo].\n\n[geo]: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n\n# Location\n@docs Location, Altitude, Movement\n\n# Subscribe to Changes\n@docs changes\n\n# Get Current Location\n@docs now, Error\n\n# Options\n@docs nowWith, Options, defaultOptions\n\n# Low-level Helpers\n\nThere are very few excuses to use this. Any normal user should be using\n`changes` instead.\n\n@docs watch, watchWith\n\n",
        "aliases": [
          {
            "name": "Altitude",
            "comment": " The altitude in meters relative to sea level is held in `value`. The `accuracy` field\ndescribes how accurate `value` is, also in meters.\n",
            "args": [],
            "type": "{ value : Float, accuracy : Float }"
          },
          {
            "name": "Location",
            "comment": " All available details of the device's current location in the world.\n\n  * `latitude` &mdash; the latitude in decimal degrees.\n  * `longitude` &mdash; the longitude in decimal degrees.\n  * `accuracy` &mdash; the accuracy of the latitude and longitude, expressed in meters.\n  * `altitude` &mdash; altitude information, if available.\n  * `movement` &mdash; information about how the device is moving, if available.\n  * `timestamp` &mdash; the time that this location reading was taken in milliseconds.\n",
            "args": [],
            "type": "{ latitude : Float , longitude : Float , accuracy : Float , altitude : Maybe.Maybe Geolocation.Altitude , movement : Maybe.Maybe Geolocation.Movement , timestamp : Time.Time }"
          },
          {
            "name": "Options",
            "comment": " There are a couple options you can mess with when requesting location data.\n\n  * `enableHighAccuracy` &mdash; When enabled, the device will attempt to provide\n    a more accurate location. This can result in slower response times or\n    increased power consumption (with a GPS chip on a mobile device for example).\n    When disabled, the device can take the liberty to save resources by responding\n    more quickly and/or using less power.\n  * `timeout` &mdash; Requesting a location can take time, so you have the option\n    to provide an upper bound in milliseconds on that wait.\n  * `maximumAge` &mdash; This API can return cached locations. If this is set\n    to `Just 400` you may get cached locations as long as they were read in the\n    last 400 milliseconds. If this is `Nothing` then the device must attempt\n    to retrieve the current location every time.\n",
            "args": [],
            "type": "{ enableHighAccuracy : Bool , timeout : Maybe.Maybe Int , maximumAge : Maybe.Maybe Int }"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " The `now` and `watch` functions may fail for a variaty of reasons.\n\n    * The user may reject the request to use their location.\n    * It may be impossible to get a location.\n    * If you set a timeout in the `Options` the request may just take too long.\n\nIn each case, the browser will provide a string with additional information.\n",
            "args": [],
            "cases": [
              [
                "PermissionDenied",
                [
                  "String"
                ]
              ],
              [
                "LocationUnavailable",
                [
                  "String"
                ]
              ],
              [
                "Timeout",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Movement",
            "comment": " Describes the motion of the device. If the device is not moving, this will\njust be `Static`. If the device is moving, you will see the `speed` in meters\nper second and the `degreesFromNorth` in degrees.\n\n\n**Note:** The `degreesFromNorth` value goes clockwise: 0° represents true\nnorth, 90° is east, 180° is south, 270° is west, etc.\n",
            "args": [],
            "cases": [
              [
                "Static",
                []
              ],
              [
                "Moving",
                [
                  "{ speed : Float, degreesFromNorth : Float }"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "changes",
            "comment": " Subscribe to any location changes. You will only receive updates if the\nuser is moving around.\n",
            "type": "(Geolocation.Location -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "defaultOptions",
            "comment": " The options you will want in 99% of cases. This will get you faster\nresults, less battery drain, no surprise failures due to timeouts, and no\nsurprising cached results.\n\n    { enableHighAccuracy = False\n    , timeout = Nothing\n    , maximumAge = Nothing\n    }\n",
            "type": "Geolocation.Options"
          },
          {
            "name": "now",
            "comment": " Request the location of the user’s device.\n\nOn the first request, the user will need to give permission to access this\ninformation. This task will block until they make a choice. If they do not\ngive permission, the task will result in a `PermissionDenied` error.\n",
            "type": "Task.Task Geolocation.Error Geolocation.Location"
          },
          {
            "name": "nowWith",
            "comment": " Same as `now` but you can customize exactly how locations are reported.\n",
            "type": "Geolocation.Options -> Task.Task Geolocation.Error Geolocation.Location"
          },
          {
            "name": "watch",
            "comment": " This is a low-level API that is used to define things like `changes`.\nIt is really only useful if you need to make an effect manager of your own.\nI feel this will include about 5 people ever.\n\nYou provide two functions. One two take some action on movement and one to\ntake some action on failure. The resulting task will just block forever,\nreporting to these two functions. If you would like to kill a `watch` task,\ndo something like this:\n\n    import Process\n    import Task\n\n    killWatch =\n      Process.spawn (watch onMove onError)\n        `Task.andThen` \\watchProcess ->\n\n      Process.kill watchProcess\n\n",
            "type": "(Geolocation.Location -> Task.Task Basics.Never ()) -> (Geolocation.Error -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"
          },
          {
            "name": "watchWith",
            "comment": " Same as `watch` but you can customize exactly how locations are reported.\n",
            "type": "Geolocation.Options -> (Geolocation.Location -> Task.Task Basics.Never ()) -> (Geolocation.Error -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/html",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Html.Keyed",
        "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This\nmakes it possible for the underlying diffing algorithm to reuse nodes more\nefficiently.\n\n# Keyed Nodes\n@docs node\n\n# Commonly Keyed Nodes\n@docs ol, ul\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "node",
            "comment": " Works just like `Html.node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n",
            "type": "String -> List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"
          },
          {
            "name": "ol",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"
          },
          {
            "name": "ul",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Html.App",
        "comment": " These functions will help you set up an Elm program that follows [the Elm\nArchitecture][arch], a pattern for creating great code that *stays* great as\nyour project grows.\n\nIf you are totally new to Elm, you should only worry about the `beginnerProgram`\nfunction. As you progress through [the tutorial][arch], more advanced functions\nlike `program` and `map` will be introduced gradually. The hope is that every\ntime Elm needs you to learn something, the usage path will clearly motivate and\nexplain the new concept!\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n# Nesting Views\n@docs map\n\n# Create a Program\n\nEvery Elm app needs to define a `main` value. That is what we are going to\nshow on screen. The following functions help you define `main`, so your first\nElm program will likely contain a definition like:\n\n    main =\n      Html.beginnerProgram\n        { model = model\n        , view = view\n        , update = update\n        }\n\nIf you are using `elm-reactor` you will just see everything on screen. If you\nare using `elm-make` it will be generating HTML files that you can open in any\nbrowser.\n\n@docs beginnerProgram, program, programWithFlags\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "beginnerProgram",
            "comment": " Create a [`Program`][program] that specifies how your whole app should\nwork. The essense of every Elm program is:\n\n  * **Model** &mdash; a nice representation of your application state.\n  * **View** &mdash; a function that turns models into HTML.\n  * **Update** &mdash; given a user-input messages and the model, produce a new model.\n\nBetween these three things, you have everything you need! When the user clicks\non a button, it produces a message. That message is piped into the `update`\nfunction, producing a new model. We use the `view` function to show the new\nmodel on screen. And then we just repeat this forever!\n\nCheck out [the Elm Architecture Tutorial][tutorial] for a a more complete\nexplanation along with some examples!\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial\n\n",
            "type": "{ model : model , view : model -> Html.Html msg , update : msg -> model -> model } -> Platform.Program Basics.Never"
          },
          {
            "name": "map",
            "comment": " This function is useful when nesting components with [the Elm\nArchitecture](https://github.com/evancz/elm-architecture-tutorial/). It lets\nyou transform the messages produced by a subtree.\n\nSay you have a node named `button` that produces `()` values when it is\nclicked. To get your model updating properly, you will probably want to tag\nthis `()` value like this:\n\n    type Msg = Click | ...\n\n    update msg model =\n      case msg of\n        Click ->\n          ...\n\n    view model =\n      map (\\_ -> Click) button\n\nSo now all the events produced by `button` will be transformed to be of type\n`Msg` so they can be handled by your update function!\n",
            "type": "(a -> msg) -> Html.Html a -> Html.Html msg"
          },
          {
            "name": "program",
            "comment": " Create a [`Program`][program] that specifies how your whole app should\nwork. Here we extend the basic model/view/update pattern we saw in\n`beginnerProgram` with a few things.\n\n> I would very highly recommend reading [the Elm Architecture Tutorial][tutorial]\nfor a proper introduction to all the new pieces here.\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial\n\nFirst we augment the `model` and `update` functions to return a pair of\n`model` and `Cmd msg`. A [command][cmd] is a way of saying “Hey Elm, I need\nyou to perform all these tasks.” This lets us update our model *and* make HTTP\nrequests or whatever else.\n\nSecond we add a `subscriptions` function. Similar to `view` it is always\napplied to the latest model, but instead of HTML it gives us a list of\n*subscriptions*. A [subscription][sub] is a way of saying “Hey Elm, I need\nyou to listen for any updates about these various things.” Now when you get\na geolocation change or a websocket message, it will be given to your update\nfunction.\n\n[cmd]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform-Cmd\n[sub]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform-Sub\n\nNow again, it is very important that you read [the Elm Architecture Tutorial][tutorial]\nbecause it describes how these building blocks work and how you can put them\ntogether into a nice modular architecture. I swear it will be faster to read\nthrough than to muddle around and try to sort it out by trial-and-error.\n",
            "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " Same as `program` but it lets you demand flags on initialization. So the\nJavaScript code to start a program with flags might look like this:\n\n```javascript\n// Program { userID : String, token : String }\n\nvar app = Elm.MyApp.fullscreen({\n    userID: 'Tom',\n    token: '12345'\n});\n```\n",
            "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program flags"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Html.Events",
        "comment": "\nIt is often helpful to create an [Union Type][] so you can have many different kinds\nof events as seen in the [TodoMVC][] example.\n\n[Union Type]: http://elm-lang.org/learn/Union-Types.elm\n[TodoMVC]: https://github.com/evancz/elm-todomvc/blob/master/Todo.elm\n\n# Mouse Helpers\n@docs onClick, onDoubleClick,\n      onMouseDown, onMouseUp,\n      onMouseEnter, onMouseLeave,\n      onMouseOver, onMouseOut\n\n# Form Helpers\n@docs onInput, onCheck, onSubmit\n\n# Focus Helpers\n@docs onBlur, onFocus\n\n# Custom Event Handlers\n@docs on, onWithOptions, Options, defaultOptions\n\n# Custom Decoders\n@docs targetValue, targetChecked, keyCode\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
            "args": [],
            "type": "{ stopPropagation : Bool, preventDefault : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n",
            "type": "Html.Events.Options"
          },
          {
            "name": "keyCode",
            "comment": " A `Json.Decoder` for grabbing `event.keyCode`. This helps you define\nkeyboard listeners like this:\n\n    import Json.Decode as Json\n\n    onKeyUp : (Int -> msg) -> Attribute msg\n    onKeyUp tagger =\n      on \"keyup\" (Json.map tagger keyCode)\n\n**Note:** It looks like the spec is moving away from `event.keyCode` and\ntowards `event.key`. Once this is supported in more browsers, we may add\nhelpers here for `onKeyUp`, `onKeyDown`, `onKeyPress`, etc.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "on",
            "comment": " Create a custom event listener. Normally this will not be necessary, but\nyou have the power! Here is how `onClick` is defined for example:\n\n    import Json.Decode as Json\n\n    onClick : msg -> Attribute msg\n    onClick message =\n      on \"click\" (Json.succeed message)\n\nThe first argument is the event name in the same format as with JavaScript's\n[`addEventListener`][aEL] function.\n\nThe second argument is a JSON decoder. Read more about these [here][decoder].\nWhen an event occurs, the decoder tries to turn the event object into an Elm\nvalue. If successful, the value is routed to your `update` function. In the\ncase of `onClick` we always just succeed with the given `message`.\n\nIf this is confusing, work through the [Elm Architecture Tutorial][tutorial].\nIt really does help!\n\n[aEL]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n[decoder]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial/\n",
            "type": "String -> Json.Decode.Decoder msg -> Html.Attribute msg"
          },
          {
            "name": "onBlur",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onCheck",
            "comment": " Capture [change](https://developer.mozilla.org/en-US/docs/Web/Events/change)\nevents on checkboxes. It will grab the boolean value from `event.target.checked`\non any input event.\n\nCheck out [targetChecked](#targetChecked) for more details on how this works.\n",
            "type": "(Bool -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onClick",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onDoubleClick",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onFocus",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onInput",
            "comment": " Capture [input](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevents for things like text fields or text areas.\n\nIt grabs the **string** value at `event.target.value`, so it will not work if\nneed some other type of information. For example, if you want to track inputs\non a range slider, make a custom handler with [`on`](#on).\n\nFor more details on how `onInput` works, check out [targetValue](#targetValue).\n",
            "type": "(String -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onMouseDown",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseEnter",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseLeave",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseOut",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseOver",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onMouseUp",
            "comment": "",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onSubmit",
            "comment": " Capture a [submit](https://developer.mozilla.org/en-US/docs/Web/Events/submit)\nevent with [`preventDefault`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\nin order to prevent the form from changing the page’s location. If you need\ndifferent behavior, use `onWithOptions` to create a customized version of\n`onSubmit`.\n",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onWithOptions",
            "comment": " Same as `on` but you can set a few options.\n",
            "type": "String -> Html.Events.Options -> Json.Decode.Decoder msg -> Html.Attribute msg"
          },
          {
            "name": "targetChecked",
            "comment": " A `Json.Decoder` for grabbing `event.target.checked`. We use this to define\n`onCheck` as follows:\n\n    import Json.Decode as Json\n\n    onCheck : (Bool -> msg) -> Attribute msg\n    onCheck tagger =\n      on \"input\" (Json.map tagger targetChecked)\n",
            "type": "Json.Decode.Decoder Bool"
          },
          {
            "name": "targetValue",
            "comment": " A `Json.Decoder` for grabbing `event.target.value`. We use this to define\n`onInput` as follows:\n\n    import Json.Decode as Json\n\n    onInput : (String -> msg) -> Attribute msg\n    onInput tagger =\n      on \"input\" (Json.map tagger targetValue)\n\nYou probably will never need this, but hopefully it gives some insights into\nhow to make custom event handlers.\n",
            "type": "Json.Decode.Decoder String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Html.Attributes",
        "comment": " Helper functions for HTML attributes. They are organized roughly by\ncategory. Each attribute is labeled with the HTML tags it can be used with, so\njust search the page for `video` if you want video stuff.\n\nIf you cannot find what you are looking for, go to the [Custom\nAttributes](#custom-attributes) section to learn how to create new helpers.\n\n# Special Attributes\n@docs style\n\n# Super Common Attributes\n@docs class, classList, id, title, hidden\n\n# Inputs\n@docs type', value, defaultValue, checked, placeholder, selected\n\n## Input Helpers\n@docs accept, acceptCharset, action, autocomplete, autofocus, autosave,\n    disabled, enctype, formaction, list, maxlength, minlength, method, multiple,\n    name, novalidate, pattern, readonly, required, size, for, form\n\n## Input Ranges\n@docs max, min, step\n\n## Input Text Areas\n@docs cols, rows, wrap\n\n\n# Links and Areas\n@docs href, target, download, downloadAs, hreflang, media, ping, rel\n\n## Maps\n@docs ismap, usemap, shape, coords\n\n\n# Embedded Content\n@docs src, height, width, alt\n\n## Audio and Video\n@docs autoplay, controls, loop, preload, poster, default, kind, srclang\n\n## iframes\n@docs sandbox, seamless, srcdoc\n\n# Ordered Lists\n@docs reversed, start\n\n# Tables\n@docs align, colspan, rowspan, headers, scope\n\n# Header Stuff\n@docs async, charset, content, defer, httpEquiv, language, scoped\n\n# Less Common Global Attributes\nAttributes that can be attached to any HTML tag but are less commonly used.\n@docs accesskey, contenteditable, contextmenu, dir, draggable, dropzone,\n      itemprop, lang, spellcheck, tabindex\n\n# Key Generation\n@docs challenge, keytype\n\n# Miscellaneous\n@docs cite, datetime, pubdate, manifest\n\n# Custom Attributes\n\nWhen using HTML and JS, there are two ways to specify parts of a DOM node.\n\n  1. Attributes &mdash; You can set things in HTML itself. So the `class`\n     in `<div class=\"greeting\"></div>` is called an *attribute*.\n\n  2. Properties &mdash; You can also set things in JS. So the `className`\n     in `div.className = 'greeting'` is called a *property*.\n\nSo the `class` attribute corresponds to the `className` property. At first\nglance, perhaps this distinction is defensible, but it gets much crazier.\n*There is not always a one-to-one mapping between attributes and properties!*\nYes, that is a true fact. Sometimes an attribute exists, but there is no\ncorresponding property. Sometimes changing an attribute does not change the\nunderlying property. For example, as of this writing the `webkit-playsinline`\nattribute can be used in HTML, but there is no corresponding property!\n\nPretty much all of the functions in `Html.Attributes` are defined with\n`property` and that is generally the preferred approach.\n\n@docs property, attribute\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accept",
            "comment": " List of types the server accepts, typically a file type.\nFor `form` and `input`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "acceptCharset",
            "comment": " List of supported charsets in a `form`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "accesskey",
            "comment": " Defines a keyboard shortcut to activate or add focus to the element. ",
            "type": "Char -> Html.Attribute msg"
          },
          {
            "name": "action",
            "comment": " The URI of a program that processes the information submitted via a `form`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "align",
            "comment": " Specifies the horizontal alignment of a `caption`, `col`, `colgroup`,\n`hr`, `iframe`, `img`, `table`, `tbody`,  `td`,  `tfoot`, `th`, `thead`, or\n`tr`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "alt",
            "comment": " Alternative text in case an image can't be displayed. Works with `img`,\n`area`, and `input`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "async",
            "comment": " Indicates that the `script` should be executed asynchronously. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "attribute",
            "comment": " Create arbitrary HTML *attributes*. Maps onto JavaScript&rsquo;s\n`setAttribute` function under the hood.\n\n    greeting : Html\n    greeting =\n        div [ attribute \"class\" \"greeting\" ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *attribute* name, so we use `class` as it would\nbe in HTML, not `className` as it would appear in JS.\n",
            "type": "String -> String -> Html.Attribute msg"
          },
          {
            "name": "autocomplete",
            "comment": " Indicates whether a `form` or an `input` can have their values automatically\ncompleted by the browser.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "autofocus",
            "comment": " The element should be automatically focused after the page loaded.\nFor `button`, `input`, `keygen`, `select`, and `textarea`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "autoplay",
            "comment": " The `audio` or `video` should play as soon as possible. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "autosave",
            "comment": " Previous entries into an `input` will be persisted across page loads,\nassociated with a unique ID. The previous entries will be displayed as\nsuggestions when the user types into an `input` that has an autosave attribute\nwith the same unique ID.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "challenge",
            "comment": " A challenge string that is submitted along with the public key in a `keygen`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "charset",
            "comment": " Declares the character encoding of the page or script. Common values include:\n\n  * UTF-8 - Character encoding for Unicode\n  * ISO-8859-1 - Character encoding for the Latin alphabet\n\nFor `meta` and `script`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "checked",
            "comment": " Indicates whether an `input` of type checkbox is checked. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "cite",
            "comment": " Contains a URI which points to the source of the quote or change in a\n`blockquote`, `del`, `ins`, or `q`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "class",
            "comment": " Often used with CSS to style elements with common properties. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "classList",
            "comment": " This function makes it easier to build a space-separated class attribute.\nEach class can easily be added and removed depending on the boolean value it\nis paired with.\n\n    renderMessage : Msg -> Html\n    renderMessage msg =\n      div\n        [\n          classList [\n            (\"message\", True),\n            (\"message-important\", msg.isImportant),\n            (\"message-read\", msg.isRead)\n          ]\n        ]\n        [ text msg.content ]\n",
            "type": "List ( String, Bool ) -> Html.Attribute msg"
          },
          {
            "name": "cols",
            "comment": " Defines the number of columns in a `textarea`. ",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "colspan",
            "comment": " The colspan attribute defines the number of columns a cell should span.\nFor `td` and `th`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "content",
            "comment": " A value associated with http-equiv or name depending on the context. For\n`meta`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "contenteditable",
            "comment": " Indicates whether the element's content is editable. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "contextmenu",
            "comment": " Defines the ID of a `menu` element which will serve as the element's\ncontext menu.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "controls",
            "comment": " Indicates whether the browser should show playback controls for the `audio`\nor `video`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "coords",
            "comment": " A set of values specifying the coordinates of the hot-spot region in an\n`area`. Needs to be paired with a `shape` attribute to be meaningful.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "datetime",
            "comment": " Indicates the date and time associated with the element.\nFor `del`, `ins`, `time`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "default",
            "comment": " Indicates that the `track` should be enabled unless the user's preferences\nindicate something different.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "defaultValue",
            "comment": " Defines an initial value which will be displayed in an `input` when that\n`input` is added to the DOM. Unlike `value`, altering `defaultValue` after the\n`input` element has been added to the DOM has no effect.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "defer",
            "comment": " Indicates that a `script` should be executed after the page has been\nparsed.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "dir",
            "comment": " Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl\n(Right-To-Left).\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "disabled",
            "comment": " Indicates whether the user can interact with a `button`, `fieldset`,\n`input`, `keygen`, `optgroup`, `option`, `select` or `textarea`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "download",
            "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "downloadAs",
            "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly, and that the downloaded resource with have the given filename.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "draggable",
            "comment": " Defines whether the element can be dragged. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "dropzone",
            "comment": " Indicates that the element accept the dropping of content on it. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "enctype",
            "comment": " How `form` data should be encoded when submitted with the POST method.\nOptions include: application/x-www-form-urlencoded, multipart/form-data, and\ntext/plain.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "for",
            "comment": " The element ID described by this `label` or the element IDs that are used\nfor an `output`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "form",
            "comment": " Indicates the element ID of the `form` that owns this particular `button`,\n`fieldset`, `input`, `keygen`, `label`, `meter`, `object`, `output`,\n`progress`, `select`, or `textarea`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "formaction",
            "comment": " Indicates the action of an `input` or `button`. This overrides the action\ndefined in the surrounding `form`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "headers",
            "comment": " A space separated list of element IDs indicating which `th` elements are\nheaders for this cell. For `td` and `th`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "height",
            "comment": " Declare the height of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "hidden",
            "comment": " Indicates the relevance of an element. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "href",
            "comment": " The URL of a linked resource, such as `a`, `area`, `base`, or `link`. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "hreflang",
            "comment": " Two-letter language code of the linked resource of an `a`, `area`, or `link`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "httpEquiv",
            "comment": " This attribute is an indicator that is paired with the `content` attribute,\nindicating what that content means. `httpEquiv` can take on three different\nvalues: content-type, default-style, or refresh. For `meta`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "id",
            "comment": " Often used with CSS to style a specific element. The value of this\nattribute must be unique.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ismap",
            "comment": " When an `img` is a descendent of an `a` tag, the `ismap` attribute\nindicates that the click location should be added to the parent `a`'s href as\na query string.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "itemprop",
            "comment": "",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "keytype",
            "comment": " Specifies the type of key generated by a `keygen`. Possible values are:\nrsa, dsa, and ec.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "kind",
            "comment": " Specifies the kind of text `track`. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "lang",
            "comment": " Defines the language used in the element. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "language",
            "comment": " Defines the script language used in a `script`. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "list",
            "comment": " Associates an `input` with a `datalist` tag. The datalist gives some\npre-defined options to suggest to the user as they interact with an input.\nThe value of the list attribute must match the id of a `datalist` node.\nFor `input`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "loop",
            "comment": " Indicates whether the `audio` or `video` should start playing from the\nstart when it's finished.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "manifest",
            "comment": " Specifies the URL of the cache manifest for an `html` tag. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "max",
            "comment": " Indicates the maximum value allowed. When using an input of type number or\ndate, the max value must be a number or date. For `input`, `meter`, and `progress`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "maxlength",
            "comment": " Defines the maximum number of characters allowed in an `input` or\n`textarea`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "media",
            "comment": " Specifies a hint of the target media of a `a`, `area`, `link`, `source`,\nor `style`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "method",
            "comment": " Defines which HTTP method to use when submitting a `form`. Can be GET\n(default) or POST.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "min",
            "comment": " Indicates the minimum value allowed. When using an input of type number or\ndate, the min value must be a number or date. For `input` and `meter`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "minlength",
            "comment": " Defines the minimum number of characters allowed in an `input` or\n`textarea`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "multiple",
            "comment": " Indicates whether multiple values can be entered in an `input` of type\nemail or file. Can also indicate that you can `select` many options.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "name",
            "comment": " Name of the element. For example used by the server to identify the fields\nin form submits. For `button`, `form`, `fieldset`, `iframe`, `input`, `keygen`,\n`object`, `output`, `select`, `textarea`, `map`, `meta`, and `param`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "novalidate",
            "comment": " This attribute indicates that a `form` shouldn't be validated when\nsubmitted.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "pattern",
            "comment": " Defines a regular expression which an `input`'s value will be validated\nagainst.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ping",
            "comment": " Specify a URL to send a short POST request to when the user clicks on an\n`a` or `area`. Useful for monitoring and tracking.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "placeholder",
            "comment": " Provides a hint to the user of what can be entered into an `input` or\n`textarea`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "poster",
            "comment": " A URL indicating a poster frame to show until the user plays or seeks the\n`video`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "preload",
            "comment": " Control how much of an `audio` or `video` resource should be preloaded. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "property",
            "comment": " Create arbitrary *properties*.\n\n    import Json.Encode as Json\n\n    greeting : Html\n    greeting =\n        div [ property \"className\" (Json.string \"greeting\") ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *property* name, so we use `className` as it\nwould be in JavaScript, not `class` as it would appear in HTML.\n",
            "type": "String -> Json.Encode.Value -> Html.Attribute msg"
          },
          {
            "name": "pubdate",
            "comment": " Indicates whether this date and time is the date of the nearest `article`\nancestor element. For `time`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "readonly",
            "comment": " Indicates whether an `input` or `textarea` can be edited. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "rel",
            "comment": " Specifies the relationship of the target object to the link object.\nFor `a`, `area`, `link`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "required",
            "comment": " Indicates whether this element is required to fill out or not.\nFor `input`, `select`, and `textarea`.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "reversed",
            "comment": " Indicates whether an ordered list `ol` should be displayed in a descending\norder instead of a ascending.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "rows",
            "comment": " Defines the number of rows in a `textarea`. ",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "rowspan",
            "comment": " Defines the number of rows a table cell should span over.\nFor `td` and `th`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "sandbox",
            "comment": " A space separated list of security restrictions you'd like to lift for an\n`iframe`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "scope",
            "comment": " Specifies the scope of a header cell `th`. Possible values are: col, row,\ncolgroup, rowgroup.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "scoped",
            "comment": " Indicates that a `style` should only apply to its parent and all of the\nparents children.\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "seamless",
            "comment": "  Make an `iframe` look like part of the containing document. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "selected",
            "comment": " Defines which `option` will be selected on page load. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "shape",
            "comment": " Declare the shape of the clickable area in an `a` or `area`. Valid values\ninclude: default, rect, circle, poly. This attribute can be paired with\n`coords` to create more particular shapes.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "size",
            "comment": " For `input` specifies the width of an input in characters.\n\nFor `select` specifies the number of visible options in a drop-down list.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "spellcheck",
            "comment": " Indicates whether spell checking is allowed for the element. ",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "src",
            "comment": " The URL of the embeddable content. For `audio`, `embed`, `iframe`, `img`,\n`input`, `script`, `source`, `track`, and `video`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "srcdoc",
            "comment": " An HTML document that will be displayed as the body of an `iframe`. It will\noverride the content of the `src` attribute if it has been specified.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "srclang",
            "comment": " A two letter language code indicating the language of the `track` text data.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "start",
            "comment": " Defines the first number of an ordered list if you want it to be something\nbesides 1.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "step",
            "comment": " Add a step size to an `input`. Use `step \"any\"` to allow any floating-point\nnumber to be used in the input.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "style",
            "comment": " Specify a list of styles.\n\n    myStyle : Attribute msg\n    myStyle =\n      style\n        [ (\"backgroundColor\", \"red\")\n        , (\"height\", \"90px\")\n        , (\"width\", \"100%\")\n        ]\n\n    greeting : Html msg\n    greeting =\n      div [ myStyle ] [ text \"Hello!\" ]\n\nThere is no `Html.Styles` module because best practices for working with HTML\nsuggest that this should primarily be specified in CSS files. So the general\nrecommendation is to use this function lightly.\n",
            "type": "List ( String, String ) -> Html.Attribute msg"
          },
          {
            "name": "tabindex",
            "comment": " Overrides the browser's default tab order and follows the one specified\ninstead.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "target",
            "comment": " Specify where the results of clicking an `a`, `area`, `base`, or `form`\nshould appear. Possible special values include:\n\n  * _blank &mdash; a new window or tab\n  * _self &mdash; the same frame (this is default)\n  * _parent &mdash; the parent frame\n  * _top &mdash; the full body of the window\n\nYou can also give the name of any `frame` you have created.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "title",
            "comment": " Text to be displayed in a tooltip when hovering over the element. ",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "type'",
            "comment": " Defines the type of a `button`, `input`, `embed`, `object`, `script`,\n`source`, `style`, or `menu`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "usemap",
            "comment": " Specify the hash name reference of a `map` that should be used for an `img`\nor `object`. A hash name reference is a hash symbol followed by the element's name or id.\nE.g. `\"#planet-map\"`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "value",
            "comment": " Defines a default value which will be displayed in a `button`, `option`,\n`input`, `li`, `meter`, `progress`, or `param`.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "width",
            "comment": " Declare the width of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "wrap",
            "comment": " Indicates whether the text should be wrapped in a `textarea`. Possible\nvalues are \"hard\" and \"soft\".\n",
            "type": "String -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Html.Lazy",
        "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Html` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> Html.Html msg) -> a -> Html.Html msg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> Html.Html msg) -> a -> b -> Html.Html msg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> Html.Html msg) -> a -> b -> c -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Html",
        "comment": " This file is organized roughly in order of popularity. The tags which you'd\nexpect to use frequently will be closer to the top.\n\n# Custom Nodes\n@docs text, node, Html, Attribute\n\n# Headers\n@docs h1, h2, h3, h4, h5, h6\n\n# Grouping Content\n@docs div, p, hr, pre, blockquote\n\n# Text\n@docs span, a, code, em, strong, i, b, u, sub, sup, br\n\n# Lists\n@docs ol, ul, li, dl, dt, dd\n\n# Emdedded Content\n@docs img, iframe, canvas, svg, math\n\n# Inputs\n@docs form, input, textarea, button, select, option\n\n# Sections\n@docs section, nav, article, aside, header, footer, address, main', body\n\n# Figures\n@docs figure, figcaption\n\n# Tables\n@docs table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th\n\n\n# Less Common Elements\n\n## Less Common Inputs\n@docs fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter\n\n\n## Audio and Video\n@docs audio, video, source, track\n\n## Embedded Objects\n@docs embed, object, param\n\n## Text Edits\n@docs ins, del\n\n## Semantic Text\n@docs small, cite, dfn, abbr, time, var, samp, kbd, s, q\n\n## Less Common Text Tags\n@docs mark, ruby, rt, rp, bdi, bdo, wbr\n\n# Interactive Elements\n@docs details, summary, menuitem, menu\n\n",
        "aliases": [
          {
            "name": "Attribute",
            "comment": " Set attributes on your `Html`.\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Property msg"
          },
          {
            "name": "Html",
            "comment": " The core building block used to build up HTML. It is backed by\n`VirtualDom.Node` in `elm-lang/virtual-dom` but that is not a super crucial\ndetail.\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Node msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " Represents a hyperlink, linking to another resource. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "abbr",
            "comment": " Represents an abbreviation or an acronym; the expansion of the\nabbreviation can be represented in the title attribute.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "address",
            "comment": " Defines a section containing contact information. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "article",
            "comment": " Defines self-contained content that could exist independently of the rest\nof the content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "aside",
            "comment": " Defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "audio",
            "comment": " Represents a sound or audio stream. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "b",
            "comment": " Represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate\nvoice.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "bdi",
            "comment": " Represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "bdo",
            "comment": " Represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "blockquote",
            "comment": " Represents a content that is quoted from another source. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "body",
            "comment": " Represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "br",
            "comment": " Represents a line break. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "button",
            "comment": " Represents a button. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "canvas",
            "comment": " Represents a bitmap area for graphics rendering. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "caption",
            "comment": " Represents the title of a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "cite",
            "comment": " Represents the title of a work. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "code",
            "comment": " Represents computer code. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "col",
            "comment": " Represents a column of a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "colgroup",
            "comment": " Represents a set of one or more columns of a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "datalist",
            "comment": " Represents a set of predefined options for other controls. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dd",
            "comment": " Represents the definition of the terms immediately listed before it. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "del",
            "comment": " Defines a removal from the document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "details",
            "comment": " Represents a widget from which the user can obtain additional information\nor controls.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dfn",
            "comment": " Represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "div",
            "comment": " Represents a generic container with no special meaning. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dl",
            "comment": " Defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "dt",
            "comment": " Represents a term defined by the next `dd`. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "em",
            "comment": " Represents emphasized text, like a stress accent. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "embed",
            "comment": " Represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "fieldset",
            "comment": " Represents a set of controls. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figcaption",
            "comment": " Represents the legend of a figure. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "figure",
            "comment": " Represents a figure illustrated as part of the document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "footer",
            "comment": " Defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "form",
            "comment": " Represents a form, consisting of controls, that can be submitted to a\nserver for processing.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h1",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h2",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h3",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h4",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h5",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "h6",
            "comment": "",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "header",
            "comment": " Defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "hr",
            "comment": " Represents a thematic break between paragraphs of a section or article or\nany longer content.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "i",
            "comment": " Represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "iframe",
            "comment": " Embedded an HTML document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "img",
            "comment": " Represents an image. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "input",
            "comment": " Represents a typed data field allowing the user to edit the data. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ins",
            "comment": " Defines an addition to the document. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "kbd",
            "comment": " Represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "keygen",
            "comment": " Represents a key-pair generator control. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "label",
            "comment": " Represents the caption of a form control. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "legend",
            "comment": " Represents the caption for a `fieldset`. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "li",
            "comment": " Defines a item of an enumeration list. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "main'",
            "comment": " Defines the main or important content in the document. There is only one\n`main` element in the document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "mark",
            "comment": " Represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "math",
            "comment": " Defines a mathematical formula. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "menu",
            "comment": " Represents a list of commands. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "menuitem",
            "comment": " Represents a command that the user can invoke. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "meter",
            "comment": " Represents a scalar measurement (or a fractional value), within a known\nrange.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "nav",
            "comment": " Defines a section that contains only navigation links.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "node",
            "comment": " General way to create HTML nodes. It is used to define all of the helper\nfunctions in this library.\n\n    div : List (Attribute msg) -> List (Html msg) -> Html msg\n    div attributes children =\n        node \"div\" attributes children\n\nYou can use this to create custom nodes if you need to create something that\nis not covered by the helper functions in this library.\n",
            "type": "String -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "object",
            "comment": " Represents an external resource, which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ol",
            "comment": " Defines an ordered list of items. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "optgroup",
            "comment": " Represents a set of options, logically grouped. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "option",
            "comment": " Represents an option in a `select` element or a suggestion of a `datalist`\nelement.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "output",
            "comment": " Represents the result of a calculation. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "p",
            "comment": " Defines a portion that should be displayed as a paragraph. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "param",
            "comment": " Defines parameters for use by plug-ins invoked by `object` elements. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "pre",
            "comment": " Indicates that its content is preformatted and that this format must be\npreserved.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "progress",
            "comment": " Represents the completion progress of a task. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "q",
            "comment": " Represents an inline quotation. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "rp",
            "comment": " Represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "rt",
            "comment": " Represents the text of a ruby annotation. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ruby",
            "comment": " Represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "s",
            "comment": " Represents content that is no longer accurate or relevant. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "samp",
            "comment": " Represents the output of a program or a computer. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "section",
            "comment": " Defines a section in a document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "select",
            "comment": " Represents a control allowing selection among a set of options. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "small",
            "comment": " Represents a side comment, that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "source",
            "comment": " Allows authors to specify alternative media resources for media elements\nlike `video` or `audio`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "span",
            "comment": " Represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like `class`, `lang`, or `dir`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "strong",
            "comment": " Represents especially important text. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "sub",
            "comment": " Represent a subscript. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "summary",
            "comment": " Represents a summary, caption, or legend for a given `details`. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "sup",
            "comment": " Represent a superscript. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "svg",
            "comment": " Defines an embedded vectorial image. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "table",
            "comment": " Represents data with more than one dimension. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tbody",
            "comment": " Represents the block of rows that describes the concrete data of a table.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "td",
            "comment": " Represents a data cell in a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "text",
            "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n      text \"Hello World!\"\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "textarea",
            "comment": " Represents a multiline text edit control. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tfoot",
            "comment": " Represents the block of rows that describes the column summaries of a table.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "th",
            "comment": " Represents a header cell in a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "thead",
            "comment": " Represents the block of rows that describes the column labels of a table.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "time",
            "comment": " Represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "tr",
            "comment": " Represents a row of cells in a table. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "track",
            "comment": " Allows authors to specify timed text track for media elements like `video`\nor `audio`.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "u",
            "comment": " Represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "ul",
            "comment": " Defines an unordered list of items. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "var",
            "comment": " Represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "video",
            "comment": " Represents a video, the associated audio and captions, and controls. ",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "wbr",
            "comment": " Represents a line break opportunity, that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
            "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-lang/keyboard",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Keyboard",
        "comment": " This library lets you listen to global keyboard events.\n\n# Key Codes\n@docs KeyCode\n\n# Subscriptions\n@docs presses, downs, ups\n\n",
        "aliases": [
          {
            "name": "KeyCode",
            "comment": " Keyboard keys can be represented as integers. These are called *key codes*.\nYou can use [`toCode`](http://package.elm-lang.org/packages/elm-lang/core/latest/Char#toCode)\nand [`fromCode`](http://package.elm-lang.org/packages/elm-lang/core/latest/Char#fromCode)\nto convert between key codes and characters.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "downs",
            "comment": " Subscribe to get codes whenever a key goes down.\n",
            "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "presses",
            "comment": " Subscribe to all key presses.\n",
            "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "ups",
            "comment": " Subscribe to get codes whenever a key goes up.\n",
            "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/lazy",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Lazy",
        "comment": " This library lets you delay a computation until later.\n\n# Basics\n@docs Lazy, lazy, force\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs apply, andThen\n",
        "aliases": [],
        "types": [
          {
            "name": "Lazy",
            "comment": " A wrapper around a value that will be lazily evaluated. ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Lazily chain together lazy computations, for when you have a series of\nsteps that all need to be performed lazily. This can be nice when you need to\npattern match on a value, for example, when appending lazy lists:\n\n    type List a = Empty | Node a (Lazy (List a))\n\n    cons : a -> Lazy (List a) -> Lazy (List a)\n    cons first rest =\n        Lazy.map (Node first) rest\n\n    append : Lazy (List a) -> Lazy (List a) -> Lazy (List a)\n    append lazyList1 lazyList2 =\n        lazyList1\n          `andThen` \\list1 ->\n              case list1 of\n                Empty ->\n                  lazyList2\n\n                Node first rest ->\n                  cons first (append rest list2))\n\nBy using `andThen` we ensure that neither `lazyList1` or `lazyList2` are forced\nbefore they are needed. So as written, the `append` function delays the pattern\nmatching until later.\n",
            "type": "Lazy.Lazy a -> (a -> Lazy.Lazy b) -> Lazy.Lazy b"
          },
          {
            "name": "apply",
            "comment": " Lazily apply a lazy function to a lazy value. This is pretty rare on its\nown, but it lets you map as high as you want.\n\n    map3 f a b == f `map` a `apply` b `apply` c\n\nIt is not the most beautiful, but it is equivalent and will let you create\n`map9` quite easily if you really need it.\n",
            "type": "Lazy.Lazy (a -> b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "force",
            "comment": " Force the evaluation of a lazy value. This means we only pay for the\ncomputation when we need it. Here is a rather contrived example.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> List.sum [1..1000000])\n\n    sums : (Int, Int, Int)\n    sums =\n        (force lazySum, force lazySum, force lazySum)\n\nWe are forcing this computation three times. The cool thing is that the first\ntime you `force` a value, the result is stored. This means you pay the cost on\nthe first one, but all the rest are very cheap, basically just looking up a\nvalue in memory.\n",
            "type": "Lazy.Lazy a -> a"
          },
          {
            "name": "lazy",
            "comment": " Delay the evaluation of a value until later. For example, maybe we will\nneed to generate a very long list and find its sum, but we do not want to do\nit unless it is absolutely necessary.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> sum [1..1000000])\n\nNow we only pay for `lazySum` if we actually need it.\n",
            "type": "(() -> a) -> Lazy.Lazy a"
          },
          {
            "name": "map",
            "comment": " Lazily apply a function to a lazy value.\n\n    lazySum : Lazy Int\n    lazySum =\n        map List.sum (lazy (\\() -> [1..1000000]))\n\nThe resulting lazy value will create a big list and sum it up when it is\nfinally forced.\n",
            "type": "(a -> b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "map2",
            "comment": " Lazily apply a function to two lazy values.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> List.sum [1..1000000])\n\n    lazySumPair : Lazy (Int, Int)\n    lazySumPair =\n        map2 (,) lazySum lazySum\n\n",
            "type": "(a -> b -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy d -> Lazy.Lazy result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy d -> Lazy.Lazy e -> Lazy.Lazy result"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/mouse",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Mouse",
        "comment": " This library lets you listen to global mouse events. This is useful\nfor a couple tricky scenarios including:\n\n  - Detecting a \"click\" outside the current component.\n  - Supporting drag-and-drop interactions.\n\n# Mouse Position\n@docs Position, position\n\n# Subscriptions\n@docs clicks, moves, downs, ups\n\n",
        "aliases": [
          {
            "name": "Position",
            "comment": " The position of the mouse relative to the whole document. So if you are\nscrolled down a bunch, you are still getting a coordinate relative to the\nvery top left corner of the *whole* document.\n",
            "args": [],
            "type": "{ x : Int, y : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "clicks",
            "comment": " Subscribe to mouse clicks anywhere on screen.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "downs",
            "comment": " Get a position whenever the user *presses* the mouse button.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "moves",
            "comment": " Subscribe to mouse moves anywhere on screen. It is best to unsubscribe if\nyou do not need these events. Otherwise you will handle a bunch of events for\nno benefit.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "position",
            "comment": " The decoder used to extract a `Position` from a JavaScript mouse event.\n",
            "type": "Json.Decode.Decoder Mouse.Position"
          },
          {
            "name": "ups",
            "comment": " Get a position whenever the user *releases* the mouse button.\n",
            "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/navigation",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Navigation",
        "comment": " This is a library for managing browser navigation yourself.\n\nThe core functionality is the ability to &ldquo;navigate&rdquo; to new URLs,\nchanging the address bar of the broswer *without* the browser kicking off a\nrequest to your servers. Instead, you manage the changes yourself in Elm.\n\n\n# Change the URL\n@docs newUrl, modifyUrl\n\n# Navigation\n@docs back, forward\n\n# Start your Program\n@docs program, programWithFlags, Parser, makeParser, Location\n\n",
        "aliases": [
          {
            "name": "Location",
            "comment": " A bunch of information about the address bar.\n\n**Note:** These fields correspond exactly with the fields of `document.location`\nas described [here](https://developer.mozilla.org/en-US/docs/Web/API/Location).\nGood luck with that.\n\n**Note 2:** You should be using a library like [`evancz/url-parser`][parse] to\ndeal with all this stuff, so generally speaking, you should not have to deal\nwith locations directly.\n\n[parse]: https://github.com/evancz/url-parser\n",
            "args": [],
            "type": "{ href : String , host : String , hostname : String , protocol : String , origin : String , port_ : String , pathname : String , search : String , hash : String , username : String , password : String }"
          }
        ],
        "types": [
          {
            "name": "Parser",
            "comment": " This library is primarily about treating the address bar as an input to\nyour program. A `Parser` helps you turn the string in the address bar into\ndata that is easier for your app to handle.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "back",
            "comment": " Go back some number of pages. So `back 1` goes back one page, and `back 2`\ngoes back two pages.\n\n**Note:** You only manage the browser history that *you* created. Think of this\nlibrary as letting you have access to a small part of the overall history. So\nif you go back farther than the history you own, you will just go back to some\nother website!\n",
            "type": "Int -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "forward",
            "comment": " Go forward some number of pages. So `forward 1` goes forward one page, and\n`forward 2` goes forward two pages. If there are no more pages in the future,\nthis will do nothing.\n\n**Note:** You only manage the browser history that *you* created. Think of this\nlibrary as letting you have access to a small part of the overall history. So\nif you go forward farther than the history you own, the user will end up on\nwhatever website they visited next!\n",
            "type": "Int -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "makeParser",
            "comment": " The `makeParser` function lets you parse the navigation state any way you\nwant.\n\n**Note:** Check out the examples associated with this GitHub repo to see a\nsimple usage. See [`evancz/url-parser`][parse] for a more complex example of\nURL parsing. The approach used there makes it pretty easy to turn strings into\nstructured data, and I hope it will serve as a baseline for other URL parsing\nlibraries that folks make.\n\n[parse]: https://github.com/evancz/url-parser\n",
            "type": "(Navigation.Location -> a) -> Navigation.Parser a"
          },
          {
            "name": "modifyUrl",
            "comment": " Modify the current URL. This *will not* add a new entry to the browser\nhistory. It just changes the one you are on right now.\n",
            "type": "String -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "newUrl",
            "comment": " Step to a new URL. This will add a new entry to the browser history.\n\n**Note:** If the user has gone `back` a few pages, there will be &ldquo;future\npages&rdquo; that the user can go `forward` to. Adding a new URL in that\nscenario will clear out any future pages. It is like going back in time and\nmaking a different choice.\n",
            "type": "String -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "program",
            "comment": " This function augments [`Html.App.program`][doc]. The new things include:\n\n  - `Parser` &mdash; Whenever this library changes the URL, the parser you\n  provide will run. This turns the raw URL string into useful data.\n\n  - `urlUpdate` &mdash; Whenever the `Parser` produces new data, we need to\n  update our model in some way to react to the change. The `urlUpdate` function\n  handles this case. (It works exactly like the normal `update` function. Take\n  in a message, update the model.)\n\n[doc]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App#program\n\n**Note:** The `urlUpdate` function is called every time the URL changes. This\nincludes things exposed by this library, like `back` and `newUrl`, as well as\nwhenever the user clicks the back or forward buttons of the browsers. If the\naddress changes, you should hear about it.\n",
            "type": "Navigation.Parser data -> { init : data -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , urlUpdate : data -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " Works the same as the `program` function, but can handle flags. See\n[`Html.App.programWithFlags`][doc] for more information.\n\n[doc]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App#programWithFlags\n",
            "type": "Navigation.Parser data -> { init : flags -> data -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , urlUpdate : data -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/page-visibility",
    "version": "1.0.0",
    "docs": [
      {
        "name": "PageVisibility",
        "comment": "\n\n# Page Visibility\n@docs Visibility, visibility, isHidden, isVisible\n\n# Changes\n@docs visibilityChanges\n\n# Low Level\n@docs onVisibilityChange\n",
        "aliases": [],
        "types": [
          {
            "name": "Visibility",
            "comment": " Value describing whether the page is hidden or visible.\n",
            "args": [],
            "cases": [
              [
                "Visible",
                []
              ],
              [
                "Hidden",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "isHidden",
            "comment": " Is the page hidden?\n",
            "type": "Task.Task x Bool"
          },
          {
            "name": "isVisible",
            "comment": " Is the page visible?\n",
            "type": "Task.Task x Bool"
          },
          {
            "name": "onVisibilityChange",
            "comment": " A normal user should never need this. This should only be useful if you are\ncreating an effect manager that needs to track page visibility for some reason.\nThe boolean value is from calling `isHidden`.\n\nThis task never completes. Use `Process.spawn` and `Process.kill` to run it in\na separate process and kill it when it is no longer needed.\n",
            "type": "(Bool -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"
          },
          {
            "name": "visibility",
            "comment": " Get the current page visibility.\n",
            "type": "Task.Task x PageVisibility.Visibility"
          },
          {
            "name": "visibilityChanges",
            "comment": " Subscribe to any visibility changes. You will get updates about the current\nvisibility.\n",
            "type": "(PageVisibility.Visibility -> msg) -> Platform.Sub.Sub msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/svg",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Svg.Keyed",
        "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This\nmakes it possible for the underlying diffing algorithm to reuse nodes more\nefficiently.\n\n# Keyed Nodes\n@docs node\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "node",
            "comment": " Works just like `Svg.node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n",
            "type": "String -> List (Svg.Attribute msg) -> List ( String, Svg.Svg msg ) -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Svg.Lazy",
        "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Svg` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> Svg.Svg msg) -> a -> Svg.Svg msg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> Svg.Svg msg) -> a -> b -> Svg.Svg msg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> Svg.Svg msg) -> a -> b -> c -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Svg.Events",
        "comment": "\n\n# Animation event attributes\n@docs onBegin, onEnd, onRepeat\n\n# Document event attributes\n@docs onAbort, onError, onResize, onScroll, onLoad, onUnload, onZoom\n\n# Graphical event attributes\n@docs onActivate, onClick, onFocusIn, onFocusOut, onMouseDown, onMouseMove,\n  onMouseOut, onMouseOver, onMouseUp\n\n# Custom Events\n@docs on\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "on",
            "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : msg -> Attribute msg\n    onClick msg =\n      on \"click\" (Json.succeed msg)\n\nYou first specify the name of the event in the same format as with JavaScript’s\n`addEventListener`. Next you give a JSON decoder, which lets you pull\ninformation out of the event object. If the decoder succeeds, it will produce\na message and route it to your `update` function.\n",
            "type": "String -> Json.Decode.Decoder msg -> Svg.Attribute msg"
          },
          {
            "name": "onAbort",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onActivate",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onBegin",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onClick",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onEnd",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onError",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onFocusIn",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onFocusOut",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onLoad",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseDown",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseMove",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseOut",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseOver",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onMouseUp",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onRepeat",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onResize",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onScroll",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onUnload",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          },
          {
            "name": "onZoom",
            "comment": "",
            "type": "msg -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Svg.Attributes",
        "comment": "\n\n# Regular attributes\n@docs accentHeight, accelerate, accumulate, additive, alphabetic, allowReorder,\n  amplitude, arabicForm, ascent, attributeName, attributeType, autoReverse,\n  azimuth, baseFrequency, baseProfile, bbox, begin, bias, by, calcMode,\n  capHeight, class, clipPathUnits, contentScriptType, contentStyleType, cx, cy,\n  d, decelerate, descent, diffuseConstant, divisor, dur, dx, dy, edgeMode,\n  elevation, end, exponent, externalResourcesRequired, filterRes, filterUnits,\n  format, from, fx, fy, g1, g2, glyphName, glyphRef, gradientTransform,\n  gradientUnits, hanging, height, horizAdvX, horizOriginX, horizOriginY, id,\n  ideographic, in', in2, intercept, k, k1, k2, k3, k4, kernelMatrix,\n  kernelUnitLength, keyPoints, keySplines, keyTimes, lang, lengthAdjust,\n  limitingConeAngle, local, markerHeight, markerUnits, markerWidth,\n  maskContentUnits, maskUnits, mathematical, max, media, method, min, mode,\n  name, numOctaves, offset, operator, order, orient, orientation, origin,\n  overlinePosition, overlineThickness, panose1, path, pathLength,\n  patternContentUnits, patternTransform, patternUnits, pointOrder, points,\n  pointsAtX, pointsAtY, pointsAtZ, preserveAlpha, preserveAspectRatio,\n  primitiveUnits, r, radius, refX, refY, renderingIntent, repeatCount,\n  repeatDur, requiredExtensions, requiredFeatures, restart, result, rotate,\n  rx, ry, scale, seed, slope, spacing, specularConstant, specularExponent,\n  speed, spreadMethod, startOffset, stdDeviation, stemh, stemv, stitchTiles,\n  strikethroughPosition, strikethroughThickness, string, style, surfaceScale,\n  systemLanguage, tableValues, target, targetX, targetY, textLength, title, to,\n  transform, type', u1, u2, underlinePosition, underlineThickness, unicode,\n  unicodeRange, unitsPerEm, vAlphabetic, vHanging, vIdeographic, vMathematical,\n  values, version, vertAdvY, vertOriginX, vertOriginY, viewBox, viewTarget,\n  width, widths, x, xHeight, x1, x2, xChannelSelector, xlinkActuate,\n  xlinkArcrole, xlinkHref, xlinkRole, xlinkShow, xlinkTitle, xlinkType,\n  xmlBase, xmlLang, xmlSpace, y, y1, y2, yChannelSelector, z, zoomAndPan\n\n# Presentation attributes\n@docs alignmentBaseline, baselineShift, clipPath, clipRule, clip,\n  colorInterpolationFilters, colorInterpolation, colorProfile, colorRendering,\n  color, cursor, direction, display, dominantBaseline, enableBackground,\n  fillOpacity, fillRule, fill, filter, floodColor, floodOpacity, fontFamily,\n  fontSizeAdjust, fontSize, fontStretch, fontStyle, fontVariant, fontWeight,\n  glyphOrientationHorizontal, glyphOrientationVertical, imageRendering,\n  kerning, letterSpacing, lightingColor, markerEnd, markerMid, markerStart,\n  mask, opacity, overflow, pointerEvents, shapeRendering, stopColor,\n  stopOpacity, strokeDasharray, strokeDashoffset, strokeLinecap,\n  strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, stroke,\n  textAnchor, textDecoration, textRendering, unicodeBidi, visibility,\n  wordSpacing, writingMode\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accelerate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "accentHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "accumulate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "additive",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "alignmentBaseline",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "allowReorder",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "alphabetic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "amplitude",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "arabicForm",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "ascent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "attributeName",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "attributeType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "autoReverse",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "azimuth",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "baseFrequency",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "baseProfile",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "baselineShift",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "bbox",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "begin",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "bias",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "by",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "calcMode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "capHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "class",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clip",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clipPath",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clipPathUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "clipRule",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "color",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorInterpolation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorInterpolationFilters",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorProfile",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "colorRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "contentScriptType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "contentStyleType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "cursor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "cx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "cy",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "d",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "decelerate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "descent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "diffuseConstant",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "direction",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "display",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "divisor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dominantBaseline",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dur",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "dy",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "edgeMode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "elevation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "enableBackground",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "end",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "exponent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "externalResourcesRequired",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fill",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fillOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fillRule",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "filterRes",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "filterUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "floodColor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "floodOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontFamily",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontSize",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontSizeAdjust",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontStretch",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontStyle",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontVariant",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fontWeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "format",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "from",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "fy",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "g1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "g2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphName",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphOrientationHorizontal",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphOrientationVertical",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "glyphRef",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "gradientTransform",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "gradientUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "hanging",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "height",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "horizAdvX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "horizOriginX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "horizOriginY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "id",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "ideographic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "imageRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "in'",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "in2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "intercept",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k3",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "k4",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "kernelMatrix",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "kernelUnitLength",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "kerning",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "keyPoints",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "keySplines",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "keyTimes",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lang",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lengthAdjust",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "letterSpacing",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lightingColor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "limitingConeAngle",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "local",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerEnd",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerMid",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerStart",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "markerWidth",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "mask",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "maskContentUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "maskUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "mathematical",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "max",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "media",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "method",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "min",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "mode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "name",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "numOctaves",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "offset",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "opacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "operator",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "order",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "orient",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "orientation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "origin",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "overflow",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "overlinePosition",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "overlineThickness",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "panose1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "path",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pathLength",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "patternContentUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "patternTransform",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "patternUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointOrder",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointerEvents",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "points",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointsAtX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointsAtY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "pointsAtZ",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "preserveAlpha",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "preserveAspectRatio",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "primitiveUnits",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "r",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "radius",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "refX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "refY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "renderingIntent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "repeatCount",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "repeatDur",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "requiredExtensions",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "requiredFeatures",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "restart",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "result",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "rotate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "rx",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "ry",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "scale",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "seed",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "shapeRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "slope",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "spacing",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "specularConstant",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "specularExponent",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "speed",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "spreadMethod",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "startOffset",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stdDeviation",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stemh",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stemv",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stitchTiles",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stopColor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stopOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strikethroughPosition",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strikethroughThickness",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "string",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "stroke",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeDasharray",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeDashoffset",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeLinecap",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeLinejoin",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeMiterlimit",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "strokeWidth",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "surfaceScale",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "systemLanguage",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "tableValues",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "target",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "targetX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "targetY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textAnchor",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textDecoration",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textLength",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "textRendering",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "title",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "to",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "transform",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "type'",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "u1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "u2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "underlinePosition",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "underlineThickness",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unicode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unicodeBidi",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unicodeRange",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "unitsPerEm",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vAlphabetic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vHanging",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vIdeographic",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vMathematical",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "values",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "version",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vertAdvY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vertOriginX",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "vertOriginY",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "viewBox",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "viewTarget",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "visibility",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "width",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "widths",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "wordSpacing",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "writingMode",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "x",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "x1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "x2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xChannelSelector",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xHeight",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkActuate",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkArcrole",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkHref",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkRole",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkShow",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkTitle",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xlinkType",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xmlBase",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xmlLang",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "xmlSpace",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "y",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "y1",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "y2",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "yChannelSelector",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "z",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "zoomAndPan",
            "comment": "",
            "type": "String -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Svg",
        "comment": "\n\n# SVG Nodes\n@docs Svg, Attribute, node, text\n\n# HTML Embedding\n@docs svg, foreignObject\n\n# Graphics elements\n@docs circle, ellipse, image, line, path, polygon, polyline, rect, use\n\n# Animation elements\n@docs animate, animateColor, animateMotion, animateTransform, mpath, set\n\n# Descriptive elements\n@docs desc, metadata, title\n\n# Containers\n@docs a, defs, g, marker, mask, missingGlyph, pattern, switch, symbol\n\n# Text\n@docs altGlyph, altGlyphDef, altGlyphItem, glyph, glyphRef, textPath, text',\n  tref, tspan\n\n# Fonts\n@docs font, fontFace, fontFaceFormat, fontFaceName, fontFaceSrc, fontFaceUri,\n  hkern, vkern\n\n# Gradients\n@docs linearGradient, radialGradient, stop\n\n# Filters\n@docs feBlend, feColorMatrix, feComponentTransfer, feComposite,\n  feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feFlood, feFuncA,\n  feFuncB, feFuncG, feFuncR, feGaussianBlur, feImage, feMerge, feMergeNode,\n  feMorphology, feOffset, feSpecularLighting, feTile, feTurbulence\n\n# Light source elements\n@docs feDistantLight, fePointLight, feSpotLight\n\n# Miscellaneous\n@docs clipPath, colorProfile, cursor, filter, script, style, view\n",
        "aliases": [
          {
            "name": "Attribute",
            "comment": " Set attributes on your `Svg`.\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Property msg"
          },
          {
            "name": "Svg",
            "comment": " The core building block to create SVG. This library is filled with helper\nfunctions to create these `Svg` values.\n\nThis is backed by `VirtualDom.Node` in `evancz/virtual-dom`, but you do not\nneed to know any details about that to use this library!\n",
            "args": [
              "msg"
            ],
            "type": "VirtualDom.Node msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " The SVG Anchor Element defines a hyperlink.\n",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "altGlyph",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "altGlyphDef",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "altGlyphItem",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animate",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animateColor",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animateMotion",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "animateTransform",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "circle",
            "comment": " The circle element is an SVG basic shape, used to create circles based on\na center point and a radius.\n\n    circle [ cx \"60\", cy \"60\", r \"50\" ] []\n",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "clipPath",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "colorProfile",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "cursor",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "defs",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "desc",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "ellipse",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feBlend",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feColorMatrix",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feComponentTransfer",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feComposite",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feConvolveMatrix",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feDiffuseLighting",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feDisplacementMap",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feDistantLight",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFlood",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncA",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncB",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncG",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feFuncR",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feGaussianBlur",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feImage",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feMerge",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feMergeNode",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feMorphology",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feOffset",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fePointLight",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feSpecularLighting",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feSpotLight",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feTile",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "feTurbulence",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "font",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fontFace",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fontFaceFormat",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fontFaceName",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fontFaceSrc",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "fontFaceUri",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "foreignObject",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Html.Html msg) -> Svg.Svg msg"
          },
          {
            "name": "g",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "glyph",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "glyphRef",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "hkern",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "image",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "line",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "linearGradient",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "marker",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "mask",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "metadata",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "missingGlyph",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "mpath",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "node",
            "comment": " Create any SVG node. To create a `<rect>` helper function, you would write:\n\n    rect : List (Attribute msg) -> List (Svg msg) -> Svg msg\n    rect attributes children =\n        node \"rect\" attributes children\n\nYou should always be able to use the helper functions already defined in this\nlibrary though!\n",
            "type": "String -> List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "path",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "pattern",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "polygon",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "polyline",
            "comment": " The polyline element is an SVG basic shape, used to create a series of\nstraight lines connecting several points. Typically a polyline is used to\ncreate open shapes.\n\n    polyline [ fill \"none\", stroke \"black\", points \"20,100 40,60 70,80 100,20\" ] []\n",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "radialGradient",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "rect",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "script",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "set",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "svg",
            "comment": " The root `<svg>` node for any SVG scene. This example shows a scene\ncontaining a rounded rectangle:\n\n    import Html\n    import Svg exposing (..)\n    import Svg.Attributes exposing (..)\n\n    roundRect : Html.Html msg\n    roundRect =\n        svg\n          [ width \"120\", height \"120\", viewBox \"0 0 120 120\" ]\n          [ rect [ x \"10\", y \"10\", width \"100\", height \"100\", rx \"15\", ry \"15\" ] [] ]\n",
            "type": "List (Html.Attribute msg) -> List (Svg.Svg msg) -> Html.Html msg"
          },
          {
            "name": "switch",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "symbol",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "text",
            "comment": " A simple text node, no tags at all.\n\nWarning: not to be confused with `text'` which produces the SVG `<text>` tag!\n",
            "type": "String -> Svg.Svg msg"
          },
          {
            "name": "text'",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "textPath",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "title",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "tref",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "tspan",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "use",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "view",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          },
          {
            "name": "vkern",
            "comment": "",
            "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-lang/trampoline",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Trampoline",
        "comment": " A [trampoline](http://en.wikipedia.org/wiki/Tail-recursive_function#Through_trampolining)\nmakes it possible to recursively call a function without growing the stack.\n\nPopular JavaScript implementations do not perform any tail-call elimination, so\nrecursive functions can cause a stack overflow if they go too deep. Trampolines\npermit unbounded recursion despite limitations in JavaScript.\n\nThis strategy may create many intermediate closures, which is very expensive in\nJavaScript, so use this library only when it is essential that you recurse deeply.\n\n# Trampolines\n@docs Trampoline, done, jump, evaluate\n",
        "aliases": [],
        "types": [
          {
            "name": "Trampoline",
            "comment": " A computation that has been broken up into a bunch of smaller chunks. The\nprogrammer explicitly adds \"pause points\" so each chunk of computation can be\nrun without making the stack any deeper.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "done",
            "comment": " When you do not want a computation to go through the trampoline.\n",
            "type": "a -> Trampoline.Trampoline a"
          },
          {
            "name": "evaluate",
            "comment": " Evaluate a trampolined value in constant space. ",
            "type": "Trampoline.Trampoline a -> a"
          },
          {
            "name": "jump",
            "comment": " When you want a computation to be delayed so that it is handled by the\ntrampoline.\n",
            "type": "(() -> Trampoline.Trampoline a) -> Trampoline.Trampoline a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/virtual-dom",
    "version": "1.1.1",
    "docs": [
      {
        "name": "VirtualDom",
        "comment": " API to the core diffing algorithm. Can serve as a foundation for libraries\nthat expose more helper functions for HTML or SVG.\n\n# Create\n@docs Node, text, node\n\n# Declare Properties and Attributes\n@docs Property, property, attribute, attributeNS\n\n# Styles\n@docs style\n\n# Events\n@docs on, onWithOptions, Options, defaultOptions\n\n# Routing Messages\n@docs map\n\n# Optimizations\n@docs lazy, lazy2, lazy3, keyedNode\n\n# Programs\n@docs programWithFlags\n\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
            "args": [],
            "type": "{ stopPropagation : Bool, preventDefault : Bool }"
          }
        ],
        "types": [
          {
            "name": "Node",
            "comment": " An immutable chunk of data representing a DOM node. This can be HTML or SVG.\n",
            "args": [
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Property",
            "comment": " When using HTML and JS, there are two ways to specify parts of a DOM node.\n\n  1. Attributes &mdash; You can set things in HTML itself. So the `class`\n     in `<div class=\"greeting\"></div>` is called an *attribute*.\n\n  2. Properties &mdash; You can also set things in JS. So the `className`\n     in `div.className = 'greeting'` is called a *property*.\n\nSo the `class` attribute corresponds to the `className` property. At first\nglance, perhaps this distinction is defensible, but it gets much crazier.\n*There is not always a one-to-one mapping between attributes and properties!*\nYes, that is a true fact. Sometimes an attribute exists, but there is no\ncorresponding property. Sometimes changing an attribute does not change the\nunderlying property. For example, as of this writing, the `webkit-playsinline`\nattribute can be used in HTML, but there is no corresponding property!\n",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "attribute",
            "comment": " Create arbitrary HTML *attributes*. Maps onto JavaScript’s `setAttribute`\nfunction under the hood.\n\n    greeting : Html\n    greeting =\n        node \"div\" [ attribute \"class\" \"greeting\" ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *attribute* name, so we use `class` as it would\nbe in HTML, not `className` as it would appear in JS.\n",
            "type": "String -> String -> VirtualDom.Property msg"
          },
          {
            "name": "attributeNS",
            "comment": " Would you believe that there is another way to do this?! This corresponds\nto JavaScript's `setAttributeNS` function under the hood. It is doing pretty\nmuch the same thing as `attribute` but you are able to have \"namespaced\"\nattributes. This is used in some SVG stuff at least.\n",
            "type": "String -> String -> String -> VirtualDom.Property msg"
          },
          {
            "name": "defaultOptions",
            "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n",
            "type": "VirtualDom.Options"
          },
          {
            "name": "keyedNode",
            "comment": " Works just like `node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n",
            "type": "String -> List (VirtualDom.Property msg) -> List ( String, VirtualDom.Node msg ) -> VirtualDom.Node msg"
          },
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> VirtualDom.Node msg) -> a -> VirtualDom.Node msg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> VirtualDom.Node msg) -> a -> b -> VirtualDom.Node msg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> VirtualDom.Node msg) -> a -> b -> c -> VirtualDom.Node msg"
          },
          {
            "name": "map",
            "comment": " This function is useful when nesting components with [the Elm\nArchitecture](https://github.com/evancz/elm-architecture-tutorial/). It lets\nyou transform the messages produced by a subtree.\n\nSay you have a node named `button` that produces `()` values when it is\nclicked. To get your model updating properly, you will probably want to tag\nthis `()` value like this:\n\n    type Msg = Click | ...\n\n    update msg model =\n      case msg of\n        Click ->\n          ...\n\n    view model =\n      map (\\_ -> Click) button\n\nSo now all the events produced by `button` will be transformed to be of type\n`Msg` so they can be handled by your update function!\n",
            "type": "(a -> msg) -> VirtualDom.Node a -> VirtualDom.Node msg"
          },
          {
            "name": "node",
            "comment": " Create a DOM node with a tag name, a list of HTML properties that can\ninclude styles and event listeners, a list of CSS properties like `color`, and\na list of child nodes.\n\n    import Json.Encode as Json\n\n    hello : Node msg\n    hello =\n      node \"div\" [] [ text \"Hello!\" ]\n\n    greeting : Node msg\n    greeting =\n      node \"div\"\n        [ property \"id\" (Json.string \"greeting\") ]\n        [ text \"Hello!\" ]\n",
            "type": "String -> List (VirtualDom.Property msg) -> List (VirtualDom.Node msg) -> VirtualDom.Node msg"
          },
          {
            "name": "on",
            "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : msg -> Property msg\n    onClick msg =\n      on \"click\" (Json.succeed msg)\n\nYou first specify the name of the event in the same format as with JavaScript’s\n`addEventListener`. Next you give a JSON decoder, which lets you pull\ninformation out of the event object. If the decoder succeeds, it will produce\na message and route it to your `update` function.\n",
            "type": "String -> Json.Decode.Decoder msg -> VirtualDom.Property msg"
          },
          {
            "name": "onWithOptions",
            "comment": " Same as `on` but you can set a few options.\n",
            "type": "String -> VirtualDom.Options -> Json.Decode.Decoder msg -> VirtualDom.Property msg"
          },
          {
            "name": "programWithFlags",
            "comment": " The most generic way to create a [`Program`][program]. It is the primitive\nbehind things like `beginnerProgram` and `program` in [the `Html.App` module][app].\nRead about it there if you'd like to learn more about this.\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[app]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App\n",
            "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> VirtualDom.Node msg } -> Platform.Program flags"
          },
          {
            "name": "property",
            "comment": " Create arbitrary *properties*.\n\n    import JavaScript.Encode as Json\n\n    greeting : Html\n    greeting =\n        node \"div\" [ property \"className\" (Json.string \"greeting\") ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *property* name, so we use `className` as it\nwould be in JavaScript, not `class` as it would appear in HTML.\n",
            "type": "String -> Json.Decode.Value -> VirtualDom.Property msg"
          },
          {
            "name": "style",
            "comment": " Specify a list of styles.\n\n    myStyle : Property msg\n    myStyle =\n      style\n        [ (\"backgroundColor\", \"red\")\n        , (\"height\", \"90px\")\n        , (\"width\", \"100%\")\n        ]\n\n    greeting : Node msg\n    greeting =\n      node \"div\" [ myStyle ] [ text \"Hello!\" ]\n\n",
            "type": "List ( String, String ) -> VirtualDom.Property msg"
          },
          {
            "name": "text",
            "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n    text \"Hello World!\"\n",
            "type": "String -> VirtualDom.Node msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "elm-lang/websocket",
    "version": "1.0.1",
    "docs": [
      {
        "name": "WebSocket",
        "comment": " Web sockets make it cheaper to talk to your servers.\n\nConnecting to a server takes some time, so with web sockets, you make that\nconnection once and then keep using. The major benefits of this are:\n\n  1. It faster to send messages. No need to do a bunch of work for every single\n  message.\n\n  2. The server can push messages to you. With normal HTTP you would have to\n  keep *asking* for changes, but a web socket, the server can talk to you\n  whenever it wants. This means there is less unnecessary network traffic.\n\nThe API here attempts to cover the typical usage scenarios, but if you need\nmany unique connections to the same endpoint, you need a different library.\n\n# Web Sockets\n@docs listen, keepAlive, send\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "keepAlive",
            "comment": " Keep a connection alive, but do not report any messages. This is useful\nfor keeping a connection open for when you only need to `send` messages. So\nyou might say something like this:\n\n    subscriptions model =\n      keepAlive \"ws://echo.websocket.org\"\n\n**Note:** If the connection goes down, the effect manager tries to reconnect\nwith an exponential backoff strategy. Any messages you try to `send` while the\nconnection is down are queued and will be sent as soon as possible.\n",
            "type": "String -> Platform.Sub.Sub msg"
          },
          {
            "name": "listen",
            "comment": " Subscribe to any incoming messages on a websocket. You might say something\nlike this:\n\n    type Msg = Echo String | ...\n\n    subscriptions model =\n      listen \"ws://echo.websocket.org\" Echo\n\n**Note:** If the connection goes down, the effect manager tries to reconnect\nwith an exponential backoff strategy. Any messages you try to `send` while the\nconnection is down are queued and will be sent as soon as possible.\n",
            "type": "String -> (String -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "send",
            "comment": " Send a message to a particular address. You might say something like this:\n\n    send \"ws://echo.websocket.org\" \"Hello!\"\n\n**Note:** It is important that you are also subscribed to this address with\n`listen` or `keepAlive`. If you are not, the web socket will be created to\nsend one message and then closed. Not good!\n",
            "type": "String -> String -> Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "WebSocket.LowLevel",
        "comment": " Low-level bindings to [the JavaScript API for web sockets][ws]. This is\nuseful primarily for making effect modules like [WebSocket](/WebSocket). So\nif you happen to be the creator of Elixir’s Phoenix framework, and you want\nit to be super easy to use channels, this module will help you make a really\nnice subscription-based API. If you are someone else, you probably do not want\nthese things.\n\n[ws]: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n\n# WebSockets\n@docs WebSocket\n\n# Using WebSockets\n@docs open, Settings, send, close, closeWith, bytesQueued\n\n# Errors\n@docs BadOpen, BadClose, BadSend\n\n",
        "aliases": [
          {
            "name": "Settings",
            "comment": " The settings describe how a `WebSocket` works as long as it is still open.\n\nThe `onMessage` function gives you access to (1) the `WebSocket` itself so you\ncan use functions like `send` and `close` and (2) the `Message` from the server\nso you can decide what to do next.\n\nThe `onClose` function tells you everything about why the `WebSocket` is\nclosing. There are a ton of codes with standardized meanings, so learn more\nabout them [here](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent).\n\nYou will typically want to set up a channel before opening a WebSocket. That\nway the `onMessage` and `onClose` can communicate with the other parts of your\nprogram. **Ideally this is handled by the effect library you are using though.\nMost people should not be working with this stuff directly.**\n",
            "args": [],
            "type": "{ onMessage : WebSocket.LowLevel.WebSocket -> String -> Task.Task Basics.Never () , onClose : { code : Int, reason : String, wasClean : Bool } -> Task.Task Basics.Never () }"
          }
        ],
        "types": [
          {
            "name": "BadClose",
            "comment": " It is possible to provide invalid codes or reasons for closing a\nconnection. The connection will still be closed, but the `closeWith` function\nwill give you `BadCode` if an invalid code was specified or `BadReason` if your\nreason is too long or contains unpaired surrogates.\n",
            "args": [],
            "cases": [
              [
                "BadCode",
                []
              ],
              [
                "BadReason",
                []
              ]
            ]
          },
          {
            "name": "BadOpen",
            "comment": " Opening the websocket went wrong because:\n\n  1. Maybe you are on an `https://` domain trying to use an `ws://` websocket\n  instead of `wss://`.\n\n  2. You gave an invalid URL or something crazy.\n\n",
            "args": [],
            "cases": [
              [
                "BadSecurity",
                []
              ],
              [
                "BadArgs",
                []
              ]
            ]
          },
          {
            "name": "BadSend",
            "comment": " There are a few ways a send can go wrong. The send function will ultimately\ngive you a `NotOpen` if the connection is no longer open or a `BadString` if\nthe string has unpaired surrogates (badly formatted UTF-16).\n",
            "args": [],
            "cases": [
              [
                "NotOpen",
                []
              ],
              [
                "BadString",
                []
              ]
            ]
          },
          {
            "name": "WebSocket",
            "comment": " A value representing an open connection to a server. Normally every single\nHTTP request must establish a connection with the server, but here we just set\nit up once and keep using it. This means it is faster to send messages.\n\nThere is a request/response pattern for all HTTP requests. Client asks for\nsomething, server gives some response. With websockets, you can drive messages\nfrom the server instead.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bytesQueued",
            "comment": " The number of bytes of data queued by `send` but not yet transmitted to the\nnetwork. If you have been sending data to a closed connection, it will just\npile up on the queue endlessly.\n",
            "type": "WebSocket.LowLevel.WebSocket -> Task.Task x Int"
          },
          {
            "name": "close",
            "comment": " Close a `WebSocket`. If the connection is already closed, it does nothing.\n",
            "type": "WebSocket.LowLevel.WebSocket -> Task.Task x ()"
          },
          {
            "name": "closeWith",
            "comment": " Closes the `WebSocket`. If the connection is already closed, it does nothing.\n\nIn addition to providing the `WebSocket` you want to close, you must provide:\n\n  1. A status code explaining why the connection is being closed. The default\n  value is 1000, indicating indicates a normal \"transaction complete\" closure.\n  There are a ton of different status codes though. See them all\n  [here](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent).\n\n  2. A human-readable string explaining why the connection is closing. This\n  string must be no longer than 123 bytes of UTF-8 text (not characters).\n\n",
            "type": "Int -> String -> WebSocket.LowLevel.WebSocket -> Task.Task x (Maybe.Maybe WebSocket.LowLevel.BadClose)"
          },
          {
            "name": "open",
            "comment": " Attempt to open a connection to a particular URL.\n",
            "type": "String -> WebSocket.LowLevel.Settings -> Task.Task WebSocket.LowLevel.BadOpen WebSocket.LowLevel.WebSocket"
          },
          {
            "name": "send",
            "comment": " Send a string over the `WebSocket` to the server. If there is any problem\nwith the send, you will get some data about it as the result of running this\ntask.\n",
            "type": "WebSocket.LowLevel.WebSocket -> String -> Task.Task x (Maybe.Maybe WebSocket.LowLevel.BadSend)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "elm-lang/window",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Window",
        "comment": " Your application lives in some sort of window. This library helps you\nfigure out how big that window is.\n\n# Window Size\n@docs Size, size, width, height, resizes\n\n",
        "aliases": [
          {
            "name": "Size",
            "comment": " The size of the window in pixels.\n",
            "args": [],
            "type": "{ width : Int, height : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "height",
            "comment": " Get the current window height.\n",
            "type": "Task.Task x Int"
          },
          {
            "name": "resizes",
            "comment": " Subscribe to any changes in window size.\n",
            "type": "(Window.Size -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "size",
            "comment": " Get the current window size.\n",
            "type": "Task.Task x Window.Size"
          },
          {
            "name": "width",
            "comment": " Get the current window width.\n",
            "type": "Task.Task x Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "emtenet/elm-component-support",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Component.App",
        "comment": " These functions help you define a `main` value as required by all Elm applications.\n\n@docs program, beginnerProgram\n\n# Wrap program in some `Html`\n\nIf you want to wrap your top level component in some `Html` with out\nintroducing a new component then try something like this:\n\n    import Html exposing (Html)\n    import Html.Attributes\n    import Component.App\n    import CounterList\n\n    main =\n        Component.App.beginnerProgram\n            { init = CounterList.init\n            , view = view\n            , update = CounterList.update\n            }\n\n\n    view : (CounterList.Msg -> msg) -> CounterList.Model -> Html msg\n    view tag model =\n        Html.div [ style ] [ CounterList.view tag model ]\n\n\n    style : Html.Attribute msg\n    style =\n        Html.Attributes.style\n            [ ( \"maxWidth\", \"300px\" )\n            , ( \"margin\", \"0px auto\" )\n            ]\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "beginnerProgram",
            "comment": " If you have no need for commands or subscriptions then you can use this\nsimpler function, something like this:\n\n    import TopLevelComponent\n\n    main =\n      Update.App.beginnerProgram\n        { init = TopLevelComponent.init\n        , view = TopLevelComponent.view\n        , update = TopLevelComponent.update\n        }\n",
            "type": "{ init : model , update : msg -> model -> Component.Update.Action msg model , view : (msg -> msg) -> model -> Html.Html msg } -> Platform.Program Basics.Never"
          },
          {
            "name": "program",
            "comment": " Your main elm file will likely contain something like this:\n\n    import TopLevelComponent\n\n    main =\n      Update.App.program\n        { init = TopLevelComponent.init\n        , view = TopLevelComponent.view\n        , update = TopLevelComponent.update\n        , subscriptions = TopLevelComponent.subscriptions\n        }\n",
            "type": "{ init : model , update : msg -> model -> Component.Update.Action msg model , view : (msg -> msg) -> model -> Html.Html msg , subscriptions : (msg -> msg) -> model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Component.Update",
        "comment": " Building blocks for writing component update functions.\n\n# Update functions\n\nComponent update functions have the following type signature:\n\n    import Component.Update as Update\n\n    update : Msg -> Model -> Update.Action Msg Model\n\n# Update actions\n\nComponent update functions, on receipt of a message, can do a combination of:\n\n    * Update the component's `model`,\n    * Forward messages to a child `component` or list of `components`,\n    * Return an `event` to the parent component,\n    * Request a command (`cmd`) to be performed,\n    * Inject an additional message (`msg`) through the update function, or\n    * **ignore** the message.\n\n@docs Action\n\n# Simple actions\n\n@docs ignore, model, event, eventIgnored, cmd, msg\n\n# Combinations of actions\n\n@docs modelAndEvent\n\n# Child components\n\nMessages addressed to components can be processed by calling `component` or\n`components`, these will process any child component's actions and feed any\nevents back into your update function.\n\n@docs component, components\n\n# Application support\n\n@docs program\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " Represents the actions an update function may perform.\n",
            "args": [
              "msg",
              "model"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "cmd",
            "comment": " Request an command is performed.\n\n    Update.cmd (WebSocket.send \"ws://echo.websocket.org\" \"Message to be sent\")\n",
            "type": "Platform.Cmd.Cmd msg -> Component.Update.Action msg model"
          },
          {
            "name": "component",
            "comment": " Forward messages to a child component.\n\n    import Counter\n    import Component.Update as Update\n\n    type Msg\n        = Top Counter.Msg\n        | Bottom Counter.Msg\n\n    type alias Model =\n        { top : Counter.Model\n        , bottom : Counter.Model\n        }\n\n    update : Msg -> Model -> Update.Action Msg Model\n    update msg' model =\n        case msg' of\n            Top msg ->\n                Update.component msg model.top (Top) (\\x -> { model | top = x }) Counter.update\n\n            Bottom msg ->\n                Update.component msg model.bottom (Bottom) (\\x -> { model | bottom = x }) Counter.update\n",
            "type": "msg -> model -> (msg -> msg') -> (model -> model') -> (msg -> model -> Component.Update.Action msg model) -> Component.Update.Action msg' model'"
          },
          {
            "name": "components",
            "comment": " Forward messages to a list of child components.\n\n    import Counter\n    import Component.Update as Update\n\n    type Msg = Counter Int Counter.Msg\n\n    type alias Model =\n        { counters : List ( Int, Counter.Model )\n        }\n\n    update : Msg -> Model -> Update.Action Msg Model\n    update msg' model =\n        case msg' of\n            Counter id msg ->\n                Update.components id msg model.counters (Counter id) (\\x -> { model | counters = x }) Counter.update\n",
            "type": "id -> msg -> List ( id, model ) -> (msg -> msg') -> (List ( id, model ) -> model') -> (msg -> model -> Component.Update.Action msg model) -> Component.Update.Action msg' model'"
          },
          {
            "name": "event",
            "comment": " Return an event to the parent component.\n\nYour `Msg` union type will be divided into private component messages and\nevent messages returned to the parent component.\n\n    module Button exposing (Msg, init, update, view)\n\n    import Html\n    import Html.Events\n    import Component.Update as Update\n\n    type Msg\n        = Click\n        | ClickEvent\n\n    init = ()\n\n    update msg model =\n        case msg of\n            Click ->\n                -- start animations, check if enabled ...\n                Update.event ClickEvent\n\n            ClickEvent ->\n                Update.eventIgnored\n",
            "type": "msg -> Component.Update.Action msg model"
          },
          {
            "name": "eventIgnored",
            "comment": " Used to document that the message was an event intended for the parent\ncomponent, but the parent component did not process the message and passed\nit back to your component.\n\nSee above example for `event`.\n",
            "type": "Component.Update.Action msg model"
          },
          {
            "name": "ignore",
            "comment": " Used to indicate that no action is to be performed.\n\nUseful as a placeholder until some update code is written.\n",
            "type": "Component.Update.Action msg model"
          },
          {
            "name": "model",
            "comment": " Update the model\n\n    case msg of\n        Increment\n            Update.model { model | counter = model.counter + 1 }\n\n",
            "type": "model -> Component.Update.Action msg model"
          },
          {
            "name": "modelAndEvent",
            "comment": " Update the model and return an event to the parent component.\n\nSee `model` and `event` for usage suggestions.\n",
            "type": "model -> msg -> Component.Update.Action msg model"
          },
          {
            "name": "msg",
            "comment": " Inject a message back into the update function.\n\nUseful for renaming common events that come from multiple child components.\n\n    case msg of\n        SearchButton Button.ClickEvent ->\n            Update.msg StartSearch\n\n        SearchTextBox TextBox.EnterPressedEvent ->\n            Update.msg StartSearch\n\n        StartSearch ->\n            ...\n\n        ...\n",
            "type": "msg -> Component.Update.Action msg model"
          },
          {
            "name": "program",
            "comment": " Utility function used by `Component.App.program` to convert a top level\ncomponent update function to one suitable for `Html.App.program`.\n",
            "type": "(msg -> model -> Component.Update.Action msg model) -> msg -> model -> ( model, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ersocon/creditcard-validation",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Payment.CreditCard.Validation",
        "comment": " This library can be used to validate a credit card number. It implements\nthe Luhn algorithm which checks for the checksum of the card. In general it\nworks with credit card numbers of all types (Visa, Mastercard, Maestro,\nAmerican Express, ...).\n\nBehind the scenes it transforms the given number into a list of strings to\ncreate single digits. This implementation may change in future. API will stay\nas is.\n\nThe main use case is the validation of credit card numbers entered by users in\nan input field. To avoid dependencies to parser libraries there is no\nfunction with the signature of String -> Bool.\n\n# Definition\n@docs isValid\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "isValid",
            "comment": " Check the given credit card number for validity ",
            "type": "Int -> Bool"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "erwald/elm-edit-distance",
    "version": "1.1.0",
    "docs": [
      {
        "name": "EditDistance",
        "comment": "  The EditDistance module allows for calculating the Levenshtein distance\nbetween two lists, or the actual edit steps required to go from one to the\nother.\n\n# Edit Steps\n@docs EditStep, edits, editsFromStrings, editsWithCostFunc, editsWithCostFuncFromStrings\n\n# Levenshtein\n@docs levenshtein, levenshteinFromStrings\n\n",
        "aliases": [],
        "types": [
          {
            "name": "EditStep",
            "comment": " Describes an edit step used to go from one list to another.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Insert",
                [
                  "a",
                  "Int"
                ]
              ],
              [
                "Delete",
                [
                  "a",
                  "Int"
                ]
              ],
              [
                "Substitute",
                [
                  "a",
                  "Int"
                ]
              ],
              [
                "Move",
                [
                  "a",
                  "Int",
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "edits",
            "comment": " Calculate the minimum steps (insertions, deletions, moves and substitutions)\nrequired to turn one given list into another.\n\n    edits (String.toList \"kitten\") (String.toList \"sitting\") ==\n      [ Substitute 's' 0\n      , Substitute 'i' 4\n      , Insert 'g' 6\n      ]\n\n    edits (String.toList \"garvey\") (String.toList \"avery\") ==\n      [ Delete 'g' 0\n      , Move 'r' 2 3\n      ]\n\nThe resulting indices reflect edits where _deletions are made first_, before\ninsertions and substitutions. That is, indices for deletions refer to the source\nlist, whereas indices for insertions and substitutions refer to the latter,\nintermediate lists.\n",
            "type": "List comparable -> List comparable -> List (EditDistance.EditStep comparable)"
          },
          {
            "name": "editsFromStrings",
            "comment": " Same as the `edits` function, but for String values.\n\n    editsFromStrings \"kitten\" \"sitting\" ==\n      [ Substitute 's' 0\n      , Substitute 'i' 4\n      , Insert 'g' 6\n      ]\n\n    editsFromStrings \"garvey\" \"avery\" ==\n      [ Delete 'g' 0\n      , Move 'r' 2 3\n      ]\n",
            "type": "String -> String -> List (EditDistance.EditStep Char)"
          },
          {
            "name": "editsWithCostFunc",
            "comment": " Same as `edits`, but also takes a custom cost function, which takes an\nEditStep (of type Insert, Delete or Substitute) and returns a cost (i.e. an\nInt).\n\n    edits (String.toList \"abc\") (String.toList \"adc\") ==\n      [ Substitute 'd' 1\n      ]\n\n    -- Make substitutions more costly.\n    costFunc editStep =\n      case editStep of\n        Substitute _ _ -> 3\n        _ -> 1\n\n    -- Substitutions are replaced by insertions and deletions.\n    editsWithCostFunc costFunc (String.toList \"abc\") (String.toList \"adc\") ==\n      [ Insert 'd' 1\n      , Delete 'b' 1\n      ]\n\n(Note that the cost function is applied _before_ insertions and deletions are\nconverted into moves, meaning it will never receive an EditStep of type Move as\nan argument.)\n",
            "type": "(EditDistance.EditStep comparable -> Int) -> List comparable -> List comparable -> List (EditDistance.EditStep comparable)"
          },
          {
            "name": "editsWithCostFuncFromStrings",
            "comment": " Same as the `editsWithCostFunc` function, but for String values.\n\n    editsFromStrings \"abc\" \"adc\" ==\n      [ Substitute 'd' 1\n      ]\n\n    -- Make substitutions more costly.\n    costFunc editStep =\n      case editStep of\n        Substitute _ -> 3\n        _ -> 1\n\n    -- Substitutions are replaced by insertions and deletions.\n    editsWithCostFuncFromStrings costFunc \"abc\" \"adc\" ==\n      [ Insert 'd' 1\n      , Delete 'b' 1\n      ]\n",
            "type": "(EditDistance.EditStep Char -> Int) -> String -> String -> List (EditDistance.EditStep Char)"
          },
          {
            "name": "levenshtein",
            "comment": " Calculate the Levenshtein distance between two lists, i.e. how many\ninsertions, deletions or substitutions are required to turn one given list\ninto another.\n\n    levenshtein (String.toList \"kitten\") (String.toList \"sitting\")\n      == 3\n\n    levenshtein (String.toList \"preterit\") (String.toList \"zeitgeist\")\n      == 6\n\n    levenshtein (String.toList \"garvey\") (String.toList \"avery\")\n      == 3\n",
            "type": "List comparable -> List comparable -> Int"
          },
          {
            "name": "levenshteinFromStrings",
            "comment": " Same as the `levenshtein` function, but for String values.\n\n    levenshtein \"kitten\" \"sitting\" == 3\n\n    levenshtein \"preterit\" \"zeitgeist\" == 6\n\n    levenshtein \"garvey\" \"avery\" == 3\n",
            "type": "String -> String -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-color-extra",
    "version": "3.0.4",
    "docs": [
      {
        "name": "Color.Gradient",
        "comment": "\n# Gradient\n@docs GradientStop, Gradient, Palette, gradient, gradientFromStops\n",
        "aliases": [
          {
            "name": "Gradient",
            "comment": " ",
            "args": [],
            "type": "List Color.Gradient.GradientStop"
          },
          {
            "name": "GradientStop",
            "comment": " A color and a stop value that indicates where the color appears in a gradient.\n The stop value must be between `0` and `1`.\n",
            "args": [],
            "type": "( Float, Color.Color )"
          },
          {
            "name": "Palette",
            "comment": " Create a new gradient `Palette` from a given `Palette`, with a given size.\n",
            "args": [],
            "type": "List Color.Color"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "gradient",
            "comment": " Create a new `Palette`  with gradient colors from a given `Palette`,\n with a given size.\n\n    p1 : Palette\n    p1 =\n      [ rgb 200 0 200\n      , rgb 0 100 100\n      , rgb 100 0 0\n      ]\n    gradient RGB p1 5 -- [RGBA 200 0 200 1,RGBA 100 50 150 1,RGBA 0 100 100 1,RGBA 50 50 50 1,RGBA 100 0 0 1]\n",
            "type": "Color.Interpolate.Space -> Color.Gradient.Palette -> Int -> Color.Gradient.Palette"
          },
          {
            "name": "gradientFromStops",
            "comment": " Create a new `Palette`  with gradient colors from a given `Gradient`,\n with a given size.\n\n    g : Gradient\n    g =\n      [ (0, rgb 200 0 200)\n      , (0.25, rgb 0 100 100)\n      , (1, rgb 150 175 160)\n      ]\n    gradientFromStops RGB g 5 -- [RGBA 200 0 200 1,RGBA 0 100 100 1,RGBA 50 125 120 1,RGBA 100 150 140 1,RGBA 150 175 160 1]\n",
            "type": "Color.Interpolate.Space -> Color.Gradient.Gradient -> Int -> Color.Gradient.Palette"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Color.Interpolate",
        "comment": "\n# Interpolate\nInterpolate between two colors\n\n@docs Space, interpolate\n",
        "aliases": [],
        "types": [
          {
            "name": "Space",
            "comment": " The color space that is used for the interpolation\n",
            "args": [],
            "cases": [
              [
                "RGB",
                []
              ],
              [
                "HSL",
                []
              ],
              [
                "LAB",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "interpolate",
            "comment": " Linear interpolation of two colors by a factor between `0` and `1`.\n",
            "type": "Color.Interpolate.Space -> Color.Color -> Color.Color -> Float -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Color.Manipulate",
        "comment": " A library for creating and manipulating colors.\n\n\n# Color adjustment\n@docs darken, lighten, saturate, desaturate, rotateHue, fadeIn, fadeOut, grayscale\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "darken",
            "comment": " Decrease the lightning of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "desaturate",
            "comment": " Decrease the saturation of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeIn",
            "comment": " Increase the opacity of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeOut",
            "comment": " Decrease the opacity of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Convert the color to a greyscale version, aka set saturation to 0\n",
            "type": "Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": " Increase the lightning of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "rotateHue",
            "comment": " Change the hue of a color. The angle value must be in degrees\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "saturate",
            "comment": " Increase the saturation of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Color.Blending",
        "comment": "\n# Blending\nBased on the [Compositing and Blending Level 1](https://www.w3.org/TR/compositing-1/#blending)\n\n@docs multiply, screen, overlay, difference, exclusion, hardlight, softlight, colorBurn, colorDodge, lighten, darken\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "colorBurn",
            "comment": "\nDarkens the backdrop color to reflect the source color.\nPainting with white produces no change.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "colorDodge",
            "comment": "\nBrightens the backdrop color to reflect the source color.\nPainting with black produces no changes.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "darken",
            "comment": "\nSelects the darker of the backdrop and source colors.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "difference",
            "comment": "\nSubtracts the darker of the two constituent colors from the lighter color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "exclusion",
            "comment": "\nProduces an effect similar to that of the Difference mode but lower in contrast.\nPainting with white inverts the backdrop color; painting with black produces no change\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "hardlight",
            "comment": "\nMultiplies or screens the colors, depending on the source color value.\nThe effect is similar to shining a harsh spotlight on the backdrop.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": "\nSelects the lighter of the backdrop and source colors.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "multiply",
            "comment": "\nThe source color is multiplied by the destination color and replaces the destination.\n\nThe resultant color is always at least as dark as either the source or destination color.\nMultiplying any color with black results in black.\nMultiplying any color with white preserves the original color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "overlay",
            "comment": "\nMultiplies or screens the colors, depending on the backdrop color value.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "screen",
            "comment": "\nMultiplies the complements of the backdrop and source color values,\n then complements the result.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "softlight",
            "comment": "\nDarkens or lightens the colors, depending on the source color value.\nThe effect is similar to shining a diffused spotlight on the backdrop.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Color.Convert",
        "comment": "\n#Convert\nConvert colors to differnt string formats and hexadecimal strings to colors.\n\n@docs colorToCssRgb, colorToCssRgba, colorToCssHsl, colorToCssHsla, colorToHex, hexToColor, colorToLab, labToColor\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "colorToCssHsl",
            "comment": "\nConverts a color to an css hsl string.\n\n    colorToCssRgb (hsl 1 1 0.5) -- \"hsl(1, 1, 0.5)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssHsla",
            "comment": "\nConverts a color to an css hsla string.\n\n    colorToCssRgb (hsla 1 1 0.5 1) -- \"hsla(56, 100%, 50%, 1)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssRgb",
            "comment": "\nConverts a color to an css rgb string.\n\n    colorToCssRgb (rgb 255 0 0 ) -- \"rgb(255, 0, 0)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssRgba",
            "comment": "\nConverts a color to an css rgba string.\n\n    colorToCssRgb (rgba 255 0 0 0.5) -- \"rgb(255, 0, 0, 0.5)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToHex",
            "comment": "\nConverts a color to a hexadecimal string.\n\n    hexToColor (rgb 255 0 0) -- \"#ff0000\"\n\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToLab",
            "comment": " Convert color to CIELAB- color space\n",
            "type": "Color.Color -> { l : Float, a : Float, b : Float }"
          },
          {
            "name": "hexToColor",
            "comment": "\nConverts a string to `Maybe` of color.\n\n    hexToColor \"#ff0000\" -- \"Just RGB 255 0 0\"\n    hexToColor \"ff0000\" -- \"Just RGB 255 0 0\"\n    hexToColor \"1234\" -- \"Nothing\"\n\n",
            "type": "String -> Maybe.Maybe Color.Color"
          },
          {
            "name": "labToColor",
            "comment": " Convert a color in CIELAB- color space to Elm `Color`\n",
            "type": "{ l : Float, a : Float, b : Float } -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-simplex-noise",
    "version": "1.2.2",
    "docs": [
      {
        "name": "Noise",
        "comment": " This is a library to generate simplex noise in Elm.\n\nThe code is a port of the [simplex noise JavaScript version](https:--github.com/jwagner/simplex-noise.js) by Jonas Wagner.\n\n## Example usage\n\n    (perm, newSeed) = permutationTable (initialSeed 42) -- generate the permutation table\n    noiseValue = noise3d perm 1 1 1\n\n# Permutation tables\n@docs permutationTable, PermutationTable\n\n# Genarate noise\n@docs noise4d, noise3d, noise2d\n\n",
        "aliases": [
          {
            "name": "PermutationTable",
            "comment": "\nPermutation table that is needed to generate the noise value.\n",
            "args": [],
            "type": "{ perm : Array.Array Int, permMod12 : Array.Array Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "noise2d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x and y value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float"
          },
          {
            "name": "noise3d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x, y and z value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float -> Float"
          },
          {
            "name": "noise4d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x, y, z and w value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float -> Float -> Float"
          },
          {
            "name": "permutationTable",
            "comment": "\nGenrate the permutation tables that are needed to calculate the noise value.\nThe function takes a seed and returns the table and  a new seed.\n",
            "type": "Random.Seed -> ( Noise.PermutationTable, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-wallpaper",
    "version": "2.1.4",
    "docs": [
      {
        "name": "WallpaperGroup.Pattern",
        "comment": "\nCreates wallpaper group based pattern\n\n#create pattern\n@docs pattern\n@docs bounding\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bounding",
            "comment": "\n  get the bounding box for a specific pattern group\n\n",
            "type": "WallpaperGroup.Group.Group -> WallpaperGroup.Geom.BoundingBox.BoundingBox"
          },
          {
            "name": "pattern",
            "comment": "\n  Create pattern by passing a group the number of columns and rows and tiles.\n\n",
            "type": "WallpaperGroup.Group.Group -> Int -> Int -> List (List { x : Float, y : Float }) -> List (List (List { x : Float, y : Float }))"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "WallpaperGroup.Group",
        "comment": "\nThe predefined Groups according to\n[this](https://en.wikipedia.org/wiki/Wallpaper_group) Wikipedia entry\n\n@docs Group\n",
        "aliases": [],
        "types": [
          {
            "name": "Group",
            "comment": "\nCreate a pattern width the specific width and/or height.\nFor triangle shaped pattern only the width of the base line is needed.\n",
            "args": [],
            "cases": [
              [
                "P1",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Pm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Pg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Cm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2mg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2gg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "C2mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4mg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P3",
                [
                  "Float"
                ]
              ],
              [
                "P3m1",
                [
                  "Float"
                ]
              ],
              [
                "P31m",
                [
                  "Float"
                ]
              ],
              [
                "P6",
                [
                  "Float"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "WallpaperGroup.Geom.BoundingBox",
        "comment": "\nBounding box of a single pattern.\n\n@docs BoundingBox\n\n",
        "aliases": [],
        "types": [
          {
            "name": "BoundingBox",
            "comment": "\n  Bounding box can be a triangle oder a rect.\n\n",
            "args": [],
            "cases": [
              [
                "Triangle",
                [
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }"
                ]
              ],
              [
                "Rect",
                [
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "etaque/elm-hexagons",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Hexagons.Grid",
        "comment": " A naive grid storage for hexagons: `Dict Int (Dict Int a)`\n\n# Types\n@docs Grid, Row, Tile\n\n# Finders\n@docs get, list, getPoint\n\n# Modifiers\n@docs set, delete\n",
        "aliases": [
          {
            "name": "Grid",
            "comment": " A grid is a Dict of rows ",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Int (Hexagons.Grid.Row a)"
          },
          {
            "name": "Row",
            "comment": " A row is a Dict of values ",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Int a"
          },
          {
            "name": "Tile",
            "comment": " A tile has coords and some content ",
            "args": [
              "a"
            ],
            "type": "{ content : a, coords : Hexagons.Axial }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "delete",
            "comment": " Remove content from those axial coordinates within grid ",
            "type": "Hexagons.Axial -> Hexagons.Grid.Grid a -> Hexagons.Grid.Grid a"
          },
          {
            "name": "get",
            "comment": " Find eventual content in grid on those axial coordinates ",
            "type": "Hexagons.Grid.Grid a -> Hexagons.Axial -> Maybe.Maybe a"
          },
          {
            "name": "getPoint",
            "comment": " Given an hexagonal grid definition (radius and grid),\nwhat's in the hexagon holding this point?\n",
            "type": "Float -> Hexagons.Grid.Grid a -> Hexagons.Point -> Maybe.Maybe a"
          },
          {
            "name": "list",
            "comment": " Produce a list of all tiles within grid ",
            "type": "Hexagons.Grid.Grid a -> List (Hexagons.Grid.Tile a)"
          },
          {
            "name": "set",
            "comment": " Add or update content to grid on those axial coordinates ",
            "type": "a -> Hexagons.Axial -> Hexagons.Grid.Grid a -> Hexagons.Grid.Grid a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Hexagons",
        "comment": " Suite of functions for hexagonal grid computing, focused on horizontal grids (\"pointy topped\" hexagons) with axial coordinate system.\n\nSee http://www.redblobgames.com/grids/hexagons for reference.\n\n# Types\n@docs Axial, Point\n\n# Conversions\n@docs dims, axialToPoint, pointToAxial\n\n# Measuring\n@docs axialDistance\n\n# Drawing\n@docs axialLine, axialRange\n",
        "aliases": [
          {
            "name": "Axial",
            "comment": " Axial coordinates of an hexagon with a grid ",
            "args": [],
            "type": "( Int, Int )"
          },
          {
            "name": "Point",
            "comment": " Point on screen (pixel) ",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "axialDistance",
            "comment": " Distance between two axial coordinates ",
            "type": "Hexagons.Axial -> Hexagons.Axial -> Int"
          },
          {
            "name": "axialLine",
            "comment": " List all hexagons composing a line between two hexagons.\n\nSee [Line Drawing](http://www.redblobgames.com/grids/hexagons/#line-drawing) on Red Blob Games\n ",
            "type": "Hexagons.Axial -> Hexagons.Axial -> List Hexagons.Axial"
          },
          {
            "name": "axialRange",
            "comment": " List all hexagons within given distance of this one.\n\nSee [Range](http://www.redblobgames.com/grids/hexagons/#range) on Red Blob Games\n",
            "type": "Hexagons.Axial -> Int -> List Hexagons.Axial"
          },
          {
            "name": "axialToPoint",
            "comment": " Given hex radius and axial coords, return pixel coords of its center\n",
            "type": "Float -> Hexagons.Axial -> Hexagons.Point"
          },
          {
            "name": "dims",
            "comment": " Given radius, returns width and height of hexagon\n",
            "type": "Float -> ( Float, Float )"
          },
          {
            "name": "pointToAxial",
            "comment": " Given hex radius and pixel coords, returns corresponding axial coords\n",
            "type": "Float -> Hexagons.Point -> Hexagons.Axial"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "etaque/elm-response",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Response",
        "comment": "\nResponse utilities for Elm Architecture. Build responses from tasks, pipe them, map over.\n\n# Construct\n@docs Response, res, taskRes, withCmd, withTask, withNone\n\n# Transform\n@docs mapModel, mapCmd, mapBoth\n",
        "aliases": [
          {
            "name": "Response",
            "comment": " A response is an updated model and some cmd. ",
            "args": [
              "model",
              "msg"
            ],
            "type": "( model, Platform.Cmd.Cmd msg )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "mapBoth",
            "comment": " Map over model and cmd. ",
            "type": "(m -> m') -> (a -> a') -> Response.Response m a -> Response.Response m' a'"
          },
          {
            "name": "mapCmd",
            "comment": " Map over cmd. ",
            "type": "(a -> a') -> Response.Response m a -> Response.Response m a'"
          },
          {
            "name": "mapModel",
            "comment": " Map over model. ",
            "type": "(m -> m') -> Response.Response m a -> Response.Response m' a"
          },
          {
            "name": "res",
            "comment": " Canonical usage: construct a result from model and cmd. ",
            "type": "model -> Platform.Cmd.Cmd msg -> Response.Response model msg"
          },
          {
            "name": "taskRes",
            "comment": " Construct a result from model and task. ",
            "type": "model -> (x -> msg) -> (a -> msg) -> Task.Task x a -> Response.Response model msg"
          },
          {
            "name": "withCmd",
            "comment": " Construct a result from model and cmd, flipped for piping:\n\n    { model | foo = bar }\n      |> withCmd someCmd\n ",
            "type": "Platform.Cmd.Cmd a -> m -> Response.Response m a"
          },
          {
            "name": "withNone",
            "comment": " Construct a result from model without cmd, flipped for piping:\n\n    { model | foo = bar }\n      |> withNone\n ",
            "type": "m -> Response.Response m a"
          },
          {
            "name": "withTask",
            "comment": " Construct a result from model and task, flipped for piping:\n\n    { model | foo = bar }\n      |> withTask someTask\n ",
            "type": "(x -> msg) -> (a -> msg) -> Task.Task x a -> model -> Response.Response model msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "etaque/elm-route-parser",
    "version": "2.2.1",
    "docs": [
      {
        "name": "RouteParser.QueryString",
        "comment": " Tools for query string parsing and extraction\n\n@docs QueryString, parse\n",
        "aliases": [
          {
            "name": "QueryString",
            "comment": " A parsed query string is a Dict of param names to param value list.\n",
            "args": [],
            "type": "Dict.Dict String (List String)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "parse",
            "comment": " Parse a query string. Parsed string must include the leading \"?\" char.\n",
            "type": "String -> RouteParser.QueryString.QueryString"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "RouteParser",
        "comment": " A typed router in Elm, with a nice DSL built on top of parser cominators\n(see [README](https://github.com/etaque/elm-route-parser) for usage).\n\n# DSL for simple cases\n@docs int, string, customParam, static, dyn1, dyn2, dyn3\n\n# Other route matcher builders\n@docs parserMatcher, rawMatcher, mapMatcher, mapMatchers\n\n# Because eventually you'll have to run the router\n@docs match, router\n\n# Types\n@docs Matcher, Param, Router\n",
        "aliases": [
          {
            "name": "Router",
            "comment": " A router is composed of a route parser, and a path generator.\n",
            "args": [
              "route"
            ],
            "type": "{ fromPath : String -> Maybe.Maybe route, toPath : route -> String }"
          }
        ],
        "types": [
          {
            "name": "Matcher",
            "comment": " A single route parser\n",
            "args": [
              "route"
            ],
            "cases": []
          },
          {
            "name": "Param",
            "comment": " A param parser in a route\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "customParam",
            "comment": " Build a custom param extractor from a parser instance\n",
            "type": "Combine.Parser a -> RouteParser.Param a"
          },
          {
            "name": "dyn1",
            "comment": " Matcher for a path with one dynamic param.\n\n    type Route = Topic Int\n    matchers = [ dyn1 Topic \"/topic/\" int \"/edit\" ]\n\n    match matchers \"/topic/1/edit\" == Just (Topic 1)\n",
            "type": "(a -> route) -> String -> RouteParser.Param a -> String -> RouteParser.Matcher route"
          },
          {
            "name": "dyn2",
            "comment": " Matcher for a path with two dynamic params.\n\n    type Route = SubTopic Int Int\n    matchers = [ dyn2 SubTopic \"/topic/\" int \"/\" int \"\" ]\n\n    match matchers \"/topic/1/2\" == Just (SubTopic 1 2)\n",
            "type": "(a -> b -> route) -> String -> RouteParser.Param a -> String -> RouteParser.Param b -> String -> RouteParser.Matcher route"
          },
          {
            "name": "dyn3",
            "comment": " Matcher for a path with three dynamic params.\n\n    type Route = Something String String String\n    matchers = [ dyn3 Something \"/some/\" string \"/thing/\" string \"/here/\" string \"\" ]\n\n    match matchers \"/some/cool/thing/must-be/here/i-guess\" == Just (Something \"cool\" \"must-be\" \"i-guess\")\n",
            "type": "(a -> b -> c -> route) -> String -> RouteParser.Param a -> String -> RouteParser.Param b -> String -> RouteParser.Param c -> String -> RouteParser.Matcher route"
          },
          {
            "name": "int",
            "comment": " Extract an Int param\n",
            "type": "RouteParser.Param Int"
          },
          {
            "name": "mapMatcher",
            "comment": " Map the result of the match\n",
            "type": "(a -> b) -> RouteParser.Matcher a -> RouteParser.Matcher b"
          },
          {
            "name": "mapMatchers",
            "comment": " map a list of matchers from a route type to another route type.\nUseful for subrouting, like delegating one of the routes to another type :\n\n    -- global routing:\n\n    type Route = Home | Admin AdminRoute\n\n    matchers =\n      [ static Home \"/\" ] ++ (mapMatchers Admin adminMatchers)\n\n    -- can be delegated to a component without knowdedge of global routing:\n\n    type AdminRoute = Dashboard | Users\n\n    adminMatchers =\n      [ static Dashboard \"/admin\", static Users \"/users\" ]\n",
            "type": "(a -> b) -> List (RouteParser.Matcher a) -> List (RouteParser.Matcher b)"
          },
          {
            "name": "match",
            "comment": " Given a list of matchers and a path, return the first successful match of the path.\n",
            "type": "List (RouteParser.Matcher route) -> String -> Maybe.Maybe route"
          },
          {
            "name": "parserMatcher",
            "comment": " Build a route from a Parser instance\n",
            "type": "Combine.Parser route -> RouteParser.Matcher route"
          },
          {
            "name": "rawMatcher",
            "comment": " Build a route from a raw matcher function\n",
            "type": "(String -> Maybe.Maybe route) -> RouteParser.Matcher route"
          },
          {
            "name": "router",
            "comment": " Full-featured router. A record with two properties:\n\n* `fromPath` to maybe get the route from a path,\n* `toPath`to build the path from the route, typically for links in the views.\n",
            "type": "List (RouteParser.Matcher route) -> (route -> String) -> RouteParser.Router route"
          },
          {
            "name": "static",
            "comment": " Matcher for a static path.\n\n    type Route = About\n    matchers = [ static About \"/about\" ]\n\n    match matchers \"/about\" == Just About\n",
            "type": "route -> String -> RouteParser.Matcher route"
          },
          {
            "name": "string",
            "comment": " Extract a String param\n",
            "type": "RouteParser.Param String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "etaque/elm-simple-form",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Form.Input",
        "comment": "\n@docs Input\n\n@docs baseInput, textInput, passwordInput, textArea, checkboxInput, selectInput, radioInput\n\n@docs dumpErrors\n",
        "aliases": [
          {
            "name": "Input",
            "comment": " An input renders Html from a field state and list of additional attributes.\nAll input functions using this type alias are pre-wired with event handlers.\n",
            "args": [
              "e",
              "a"
            ],
            "type": "Form.FieldState e a -> List (Html.Attribute Form.Msg) -> Html.Html Form.Msg"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "baseInput",
            "comment": " Untyped input, first param is `type` attribute.\n",
            "type": "String -> (String -> Form.Field.Field) -> Form.Input.Input e String"
          },
          {
            "name": "checkboxInput",
            "comment": " Checkbox input.\n",
            "type": "Form.Input.Input e Bool"
          },
          {
            "name": "dumpErrors",
            "comment": " Dump all form errors in a `<pre>` tag. Useful for debugging.\n",
            "type": "Form.Form e o -> Html.Html msg"
          },
          {
            "name": "passwordInput",
            "comment": " Password input.\n",
            "type": "Form.Input.Input e String"
          },
          {
            "name": "radioInput",
            "comment": " Radio input.\n",
            "type": "String -> Form.Input.Input e String"
          },
          {
            "name": "selectInput",
            "comment": " Select input.\n",
            "type": "List ( String, String ) -> Form.Input.Input e String"
          },
          {
            "name": "textArea",
            "comment": " Textarea.\n",
            "type": "Form.Input.Input e String"
          },
          {
            "name": "textInput",
            "comment": " Text input.\n",
            "type": "Form.Input.Input e String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Form",
        "comment": " Simple forms made easy: A Dict implementation of the core `Json.Decode` API,\nwith state lifecycle and input helpers for the views.\n\n# Types\n@docs Msg, Form, FieldState\n\n# Init/update lifecyle\n@docs initial, update\n\n# Field state accessors\n@docs getFieldAsString, getFieldAsBool\n\n# Global state accessors\n@docs getFocus, isSubmitted, getErrors, getOutput\n",
        "aliases": [
          {
            "name": "FieldState",
            "comment": " Field state containing all necessary data for view and update,\ncan be retrived with `Form.getFieldAsString` or `Form.getFieldAsBool`.\n\n * `path` - qualified path of the field in the form, with dots for nested fields (`field.subfield`)\n * `value` - a `Maybe` of the requested type\n * `error` - a `Maybe` of the field error\n * `liveError` - same but with added logic for live validation\n    (see [`getLiveErrorAt`](https://github.com/etaque/elm-simple-form/blob/master/src/Form.elm) impl)\n * `isDirty` - if the field content has been changed since last validation\n * `isChanged` - if the field value has changed since last init/reset\n * `hasFocus` - if the field is currently focused\n",
            "args": [
              "e",
              "a"
            ],
            "type": "{ path : String , value : Maybe.Maybe a , error : Maybe.Maybe (Form.Error.Error e) , liveError : Maybe.Maybe (Form.Error.Error e) , isDirty : Bool , isChanged : Bool , hasFocus : Bool }"
          }
        ],
        "types": [
          {
            "name": "Form",
            "comment": " Form to embed in your model. Type parameters are:\n\n * `customError` - a custom error type to extend built-in errors (set to `()` if you don't need it)\n * `output` - the type of the validation output.\n",
            "args": [
              "customError",
              "output"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Form messages for `update`.\n",
            "args": [],
            "cases": [
              [
                "NoOp",
                []
              ],
              [
                "Focus",
                [
                  "String"
                ]
              ],
              [
                "Blur",
                [
                  "String"
                ]
              ],
              [
                "Input",
                [
                  "String",
                  "Form.Field.Field"
                ]
              ],
              [
                "Submit",
                []
              ],
              [
                "Validate",
                []
              ],
              [
                "Reset",
                [
                  "List ( String, Form.Field.Field )"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "getErrors",
            "comment": " Get list of errors on qualified paths.\n",
            "type": "Form.Form e o -> List ( String, Form.Error.Error e )"
          },
          {
            "name": "getFieldAsBool",
            "comment": " Get field state at path, with value as a `Bool`.\n",
            "type": "String -> Form.Form e o -> Form.FieldState e Bool"
          },
          {
            "name": "getFieldAsString",
            "comment": " Get field state at path, with value as a `String`.\n",
            "type": "String -> Form.Form e o -> Form.FieldState e String"
          },
          {
            "name": "getFocus",
            "comment": " Return currently focused field, if any.\n",
            "type": "Form.Form e o -> Maybe.Maybe String"
          },
          {
            "name": "getOutput",
            "comment": " Get form output, in case of validation success.\n",
            "type": "Form.Form e o -> Maybe.Maybe o"
          },
          {
            "name": "initial",
            "comment": " Initial form state. See `Form.Field` for initial fields, and `Form.Validate` for validation.\n",
            "type": "List ( String, Form.Field.Field ) -> Form.Validate.Validation e output -> Form.Form e output"
          },
          {
            "name": "isSubmitted",
            "comment": " Get form submission state. Useful to show errors on unchanged fields.\n",
            "type": "Form.Form e o -> Bool"
          },
          {
            "name": "update",
            "comment": " Update form state with the given message\n",
            "type": "Form.Msg -> Form.Form e output -> Form.Form e output"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Form.Validate",
        "comment": " Form validation.\n\n# Combinators\n@docs Validation, get, map, succeed, andThen, pipeTo, apply, customError, defaultValue, formatError\n\n# Fixed-size forms\n@docs form1, form2, form3, form4, form5, form6, form7, form8\n\n# Type extractors\n@docs string, int, float, bool, date, maybe, email, url, emptyString\n\n# Common filters\n@docs minInt, maxInt, minFloat, maxFloat, minLength, maxLength, nonEmpty, format, includedIn\n\n# Custom validations\n@docs fail, succeed, customValidation, oneOf\n",
        "aliases": [
          {
            "name": "Validation",
            "comment": " A validation is a function that takes a form field and returns a result\nbeing either a validation error or the expected object.\n",
            "args": [
              "customError",
              "output"
            ],
            "type": "Form.Field.Field -> Result.Result (Form.Error.Error customError) output"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Apply a new validation to the result of the validation.\n\n    get \"myfield\" (int `andThen` minInt 10)\n",
            "type": "Form.Validate.Validation e a -> (a -> Form.Validate.Validation e b) -> Form.Validate.Validation e b"
          },
          {
            "name": "apply",
            "comment": " Incremental form validation for records with more that 8 fields.\n\n    Form.succeed SomeRecord\n      `apply` (\"foo\" `at` string)\n      `apply` (\"bar\" `at` string)\n",
            "type": "Form.Validate.Validation e (a -> b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          },
          {
            "name": "bool",
            "comment": " Validation a Bool.\n",
            "type": "Form.Validate.Validation e Bool"
          },
          {
            "name": "customError",
            "comment": " Helper to create a CustomError.\n",
            "type": "e -> Form.Error.Error e"
          },
          {
            "name": "customValidation",
            "comment": " Custom validation for your special cases.\n",
            "type": "Form.Validate.Validation e a -> (a -> Result.Result (Form.Error.Error e) b) -> Form.Validate.Validation e b"
          },
          {
            "name": "date",
            "comment": " Validation a Date using `Date.fromString`.\n",
            "type": "Form.Validate.Validation e Date.Date"
          },
          {
            "name": "defaultValue",
            "comment": " Rescue a failed validation with the supplied value.\n",
            "type": "a -> Form.Validate.Validation e a -> Form.Validate.Validation e a"
          },
          {
            "name": "email",
            "comment": " Check if the string is a valid email address.\n",
            "type": "Form.Validate.Validation e String"
          },
          {
            "name": "emptyString",
            "comment": " Validate an empty string, otherwise failing with InvalidString.\nUseful with `oneOf` for optional fields with format validation.\n",
            "type": "Form.Validate.Validation e String"
          },
          {
            "name": "fail",
            "comment": " A validation that always fails. Useful for contextual validation.\n",
            "type": "Form.Error.Error e -> Form.Validate.Validation e a"
          },
          {
            "name": "float",
            "comment": " Validation a float using `String.toFloat`.\n",
            "type": "Form.Validate.Validation e Float"
          },
          {
            "name": "form1",
            "comment": " Validation a form with one field.\n",
            "type": "(a -> field) -> Form.Validate.Validation e a -> Form.Validate.Validation e field"
          },
          {
            "name": "form2",
            "comment": " Validation a form with two fields.\n",
            "type": "(a -> b -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e m"
          },
          {
            "name": "form3",
            "comment": " Validation a form with three fields.\n",
            "type": "(a -> b -> c -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e c -> Form.Validate.Validation e m"
          },
          {
            "name": "form4",
            "comment": " Validation a form with four fields.\n",
            "type": "(a -> b -> c -> d -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e c -> Form.Validate.Validation e d -> Form.Validate.Validation e m"
          },
          {
            "name": "form5",
            "comment": " Validation a form with five fields.\n",
            "type": "(a -> b -> c -> d -> e -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err m"
          },
          {
            "name": "form6",
            "comment": " Validation a form with six fields.\n",
            "type": "(a -> b -> c -> d -> e -> f -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err m"
          },
          {
            "name": "form7",
            "comment": " Validation a form with seven fields.\n",
            "type": "(a -> b -> c -> d -> e -> f -> g -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err g -> Form.Validate.Validation err m"
          },
          {
            "name": "form8",
            "comment": " Validation a form with eight fields.\n",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err g -> Form.Validate.Validation err h -> Form.Validate.Validation err m"
          },
          {
            "name": "format",
            "comment": " Validates format of the string.\n",
            "type": "Regex.Regex -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "formatError",
            "comment": " Call Result.formatError on validation result.\n",
            "type": "(Form.Error.Error e -> Form.Error.Error e) -> Form.Validate.Validation e a -> Form.Validate.Validation e a"
          },
          {
            "name": "get",
            "comment": " Access the given field in the group.\n\n    get \"name\" string\n",
            "type": "String -> Form.Validate.Validation e a -> Form.Validate.Validation e a"
          },
          {
            "name": "includedIn",
            "comment": " Check if the string is included in the given list.\n",
            "type": "List String -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "int",
            "comment": " Validation an integer using `String.toInt`.\n",
            "type": "Form.Validate.Validation e Int"
          },
          {
            "name": "map",
            "comment": " Map over the result of the validation.\n\n    get \"myfield\" (string |> map String.trim)\n",
            "type": "(a -> b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          },
          {
            "name": "maxFloat",
            "comment": " Max value for Float.\n",
            "type": "Float -> Float -> Form.Validate.Validation e Float"
          },
          {
            "name": "maxInt",
            "comment": " Max value for Int.\n",
            "type": "Int -> Int -> Form.Validate.Validation e Int"
          },
          {
            "name": "maxLength",
            "comment": " Max length for String.\n",
            "type": "Int -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "maybe",
            "comment": " Transform validation result to `Maybe`, using `Result.toMaybe`.\n",
            "type": "Form.Validate.Validation e a -> Form.Validate.Validation e (Maybe.Maybe a)"
          },
          {
            "name": "minFloat",
            "comment": " Min value for Float.\n",
            "type": "Float -> Float -> Form.Validate.Validation e Float"
          },
          {
            "name": "minInt",
            "comment": " Min value for Int.\n",
            "type": "Int -> Int -> Form.Validate.Validation e Int"
          },
          {
            "name": "minLength",
            "comment": " Min length for String.\n",
            "type": "Int -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "nonEmpty",
            "comment": " Fails if `String.isEmpty`.\n",
            "type": "String -> Form.Validate.Validation e String"
          },
          {
            "name": "oneOf",
            "comment": " First successful validation wins, from left to right.\n",
            "type": "List (Form.Validate.Validation e a) -> Form.Validate.Validation e a"
          },
          {
            "name": "pipeTo",
            "comment": " Same as `andThen`, but flipped for piping.\n\n    int |> pipeTo (minInt 10)\n",
            "type": "(a -> Form.Validate.Validation e b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          },
          {
            "name": "string",
            "comment": " Validation a String.\n",
            "type": "Form.Validate.Validation e String"
          },
          {
            "name": "succeed",
            "comment": " A validation that always succeeds. Useful for contextual validation.\n",
            "type": "a -> Form.Validate.Validation e a"
          },
          {
            "name": "url",
            "comment": " Check if the string is a valid URL.\n",
            "type": "Form.Validate.Validation e String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Form.Field",
        "comment": " Read and write field values.\n\n# Constructors\n@docs Field, group\n\n# Value readers\n@docs at, asString, asBool\n",
        "aliases": [],
        "types": [
          {
            "name": "Field",
            "comment": " Form field. Can either be a group of named fields, or a final field.\n",
            "args": [],
            "cases": [
              [
                "Group",
                [
                  "Dict.Dict String Form.Field.Field"
                ]
              ],
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "Textarea",
                [
                  "String"
                ]
              ],
              [
                "Select",
                [
                  "String"
                ]
              ],
              [
                "Radio",
                [
                  "String"
                ]
              ],
              [
                "Check",
                [
                  "Bool"
                ]
              ],
              [
                "EmptyField",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "asBool",
            "comment": " Get field value as boolean.\n",
            "type": "Form.Field.Field -> Maybe.Maybe Bool"
          },
          {
            "name": "asString",
            "comment": " Get field value as string.\n",
            "type": "Form.Field.Field -> Maybe.Maybe String"
          },
          {
            "name": "at",
            "comment": " Get field at name, for nested forms.\n",
            "type": "String -> Form.Field.Field -> Maybe.Maybe Form.Field.Field"
          },
          {
            "name": "group",
            "comment": " Build a group of values, for nested forms.\n",
            "type": "List ( String, Form.Field.Field ) -> Form.Field.Field"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Form.Error",
        "comment": " Validation errors.\n\n@docs Error, getAt\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " A validation error. See `Form.Validate.customError` for `CustomError` building.\n",
            "args": [
              "e"
            ],
            "cases": [
              [
                "GroupErrors",
                [
                  "Dict.Dict String (Form.Error.Error e)"
                ]
              ],
              [
                "Empty",
                []
              ],
              [
                "InvalidString",
                []
              ],
              [
                "InvalidEmail",
                []
              ],
              [
                "InvalidUrl",
                []
              ],
              [
                "InvalidFormat",
                []
              ],
              [
                "InvalidInt",
                []
              ],
              [
                "InvalidFloat",
                []
              ],
              [
                "InvalidBool",
                []
              ],
              [
                "InvalidDate",
                []
              ],
              [
                "SmallerIntThan",
                [
                  "Int"
                ]
              ],
              [
                "GreaterIntThan",
                [
                  "Int"
                ]
              ],
              [
                "SmallerFloatThan",
                [
                  "Float"
                ]
              ],
              [
                "GreaterFloatThan",
                [
                  "Float"
                ]
              ],
              [
                "ShorterStringThan",
                [
                  "Int"
                ]
              ],
              [
                "LongerStringThan",
                [
                  "Int"
                ]
              ],
              [
                "NotIncludedIn",
                []
              ],
              [
                "CustomError",
                [
                  "e"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "getAt",
            "comment": " Get error at name, for nested errors.\n",
            "type": "String -> Form.Error.Error e -> Maybe.Maybe (Form.Error.Error e)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "etaque/elm-transit",
    "version": "7.0.2",
    "docs": [
      {
        "name": "Transit",
        "comment": " Styled transitions with minimal boilerplate, typically for page transitions in single page apps.\n\nSee README or [example](https://github.com/etaque/elm-transit/blob/master/example/src/Main.elm) for usage.\n\nUses elm-animations and Cmd.tick for animation logic.\n\n# State\n@docs Transition, WithTransition, empty\n\n# Update\n@docs Msg, start, tick, subscriptions\n\n# View\n@docs getValue, getStep, Step\n",
        "aliases": [
          {
            "name": "WithTransition",
            "comment": " Extended type for the parent model holding the transition. ",
            "args": [
              "model"
            ],
            "type": "{ model | transition : Transit.Transition }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Transition msg, to be wrapped in your own msg type. ",
            "args": [
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Step",
            "comment": " Transition step: Exit -> *send message* -> Enter -> Done. ",
            "args": [],
            "cases": [
              [
                "Exit",
                []
              ],
              [
                "Enter",
                []
              ],
              [
                "Done",
                []
              ]
            ]
          },
          {
            "name": "Transition",
            "comment": " Opaque type for transition state storage. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Empty transition state, as initial value in the model. ",
            "type": "Transit.Transition"
          },
          {
            "name": "getStep",
            "comment": " Extract current animation step. ",
            "type": "Transit.Transition -> Transit.Step"
          },
          {
            "name": "getValue",
            "comment": " Extract current animation value (a float between 0 and 1). ",
            "type": "Transit.Transition -> Float"
          },
          {
            "name": "start",
            "comment": " Start the transition with the following parameters:\n\n* `tagger` to wrap Transit's Msg into your app's Msg type (consistent with `tick` signature, saves you one `Cmd.map`)\n* `parentMsg` to send at end of exit\n* `durations` of transition steps (exit phase then enter phase)\n* `parent` is the model storing the Transition, to update with new transition state\n\nReturns a tuple that you can directly emit from your `update`.\n ",
            "type": "(Transit.Msg msg -> msg) -> msg -> ( Time.Time, Time.Time ) -> Transit.WithTransition parent -> ( Transit.WithTransition parent, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "subscriptions",
            "comment": " Animation frame subscription. Must be called by your component's subscription function. ",
            "type": "(Transit.Msg msg -> msg) -> Transit.WithTransition parent -> Platform.Sub.Sub msg"
          },
          {
            "name": "tick",
            "comment": " Where all the logic happens. Run transition steps, and triggers timeline's parent message when needed.\n\n* `tagger` to wrap Transit's msg into app's Msg type, has to be same type of timeline.msg,\n* `msg` is the Transit message to process,\n* `parent` is the model storing the Transition, for transition state update.\n ",
            "type": "(Transit.Msg msg -> msg) -> Transit.Msg msg -> Transit.WithTransition parent -> ( Transit.WithTransition parent, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "etaque/elm-transit-style",
    "version": "3.0.0",
    "docs": [
      {
        "name": "TransitStyle",
        "comment": " Animations for elm-transit, to be used on elm-html `style` attribute.\n\n    div\n      [ style (fadeSlide 100 model.transition) ]\n      [ text \"Some content\" ]\n\n# Combinations\n@docs fadeSlide\n\n# Slide left\n@docs slide, slideOut, slideIn\n\n# Fade\n@docs fade, fadeOut, fadeIn\n\n# Tooling to create animations\n@docs compose, Style\n",
        "aliases": [
          {
            "name": "Style",
            "comment": " Just an alias for elm-html style value ",
            "args": [],
            "type": "List ( String, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Compose an animation with `exit` and `enter` phases. ",
            "type": "(Float -> TransitStyle.Style) -> (Float -> TransitStyle.Style) -> Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "fade",
            "comment": " Fade animation ",
            "type": "Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "fadeIn",
            "comment": " Fade in (enter). ",
            "type": "Float -> TransitStyle.Style"
          },
          {
            "name": "fadeOut",
            "comment": " Fade out (exit). ",
            "type": "Float -> TransitStyle.Style"
          },
          {
            "name": "fadeSlide",
            "comment": " Combine fade and slideLeft with the specified offset ",
            "type": "Float -> Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "slide",
            "comment": " Slide animation, with the specified offset.\nGreater than 0 to right, lesser to left.\n",
            "type": "Float -> Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "slideIn",
            "comment": " Slide in (enter) by translating on X for desired offset ",
            "type": "Float -> Float -> TransitStyle.Style"
          },
          {
            "name": "slideOut",
            "comment": " Slide out (exit) by translating on X for desired offset ",
            "type": "Float -> Float -> TransitStyle.Style"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "evancz/elm-graphics",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Collage",
        "comment": " The collage API is for freeform graphics. You can move, rotate, scale, etc.\nall sorts of forms including lines, shapes, images, and elements.\n\nCollages use the same coordinate system you might see in an algebra or physics\nproblem. The origin (0,0) is at the center of the collage, not the top left\ncorner as in some other graphics libraries. Furthermore, the y-axis points up,\nso moving a form 10 units in the y-axis will move it up on screen.\n\n# Unstructured Graphics\n@docs collage, Form\n\n# Creating Forms\n@docs toForm, filled, textured, gradient, outlined, traced, text, outlinedText\n\n# Transforming Forms\n@docs move, moveX, moveY, scale, rotate, alpha\n\n# Grouping Forms\nGrouping forms makes it easier to write modular graphics code. You can create\na form that is a composite of many subforms. From there it is easy to transform\nit as a single unit.\n\n@docs group, groupTransform\n\n# Shapes\n@docs Shape, rect, oval, square, circle, ngon, polygon\n\n# Paths\n@docs Path, segment, path\n\n# Line Styles\n@docs solid, dashed, dotted, LineStyle, LineCap, LineJoin, defaultLine\n\n",
        "aliases": [
          {
            "name": "LineStyle",
            "comment": " All of the attributes of a line style. This lets you build up a line style\nhowever you want. You can also update existing line styles with record updates.\n",
            "args": [],
            "type": "{ color : Color.Color , width : Float , cap : Collage.LineCap , join : Collage.LineJoin , dashing : List Int , dashOffset : Int }"
          }
        ],
        "types": [
          {
            "name": "Form",
            "comment": " A visual `Form` has a shape and texture. This can be anything from a red\nsquare to a circle textured with stripes.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LineCap",
            "comment": " The shape of the ends of a line. ",
            "args": [],
            "cases": [
              [
                "Flat",
                []
              ],
              [
                "Round",
                []
              ],
              [
                "Padded",
                []
              ]
            ]
          },
          {
            "name": "LineJoin",
            "comment": " The shape of the &ldquo;joints&rdquo; of a line, where each line segment\nmeets. `Sharp` takes an argument to limit the length of the joint. This\ndefaults to 10.\n",
            "args": [],
            "cases": [
              [
                "Smooth",
                []
              ],
              [
                "Sharp",
                [
                  "Float"
                ]
              ],
              [
                "Clipped",
                []
              ]
            ]
          },
          {
            "name": "Path",
            "comment": " A 2D path. Paths are a sequence of points. They do not have a color.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Shape",
            "comment": " A 2D shape. Shapes are closed polygons. They do not have a color or\ntexture, that information can be filled in later.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "alpha",
            "comment": " Set the alpha of a `Form`. The default is 1, and 0 is totally transparent. ",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "circle",
            "comment": " A circle with a given radius. ",
            "type": "Float -> Collage.Shape"
          },
          {
            "name": "collage",
            "comment": " Create a collage with certain dimensions and content. It takes width and height\narguments to specify dimensions, and then a list of 2D forms to decribe the content.\n\nUnlike with `Element`s, these 2D forms can be moved and rotated however you like.\nThe forms are drawn in the order of the list, i.e., `collage w h [a, b]` will\ndraw `b` on top of `a`.\n",
            "type": "Int -> Int -> List Collage.Form -> Element.Element"
          },
          {
            "name": "dashed",
            "comment": " Create a dashed line style with a given color. Dashing equals `[8,4]`. ",
            "type": "Color.Color -> Collage.LineStyle"
          },
          {
            "name": "defaultLine",
            "comment": " The default line style, which is solid black with flat caps and sharp joints.\nYou can use record updates to build the line style you\nwant. For example, to make a thicker line, you could say:\n\n    { defaultLine | width = 10 }\n",
            "type": "Collage.LineStyle"
          },
          {
            "name": "dotted",
            "comment": " Create a dotted line style with a given color. Dashing equals `[3,3]`. ",
            "type": "Color.Color -> Collage.LineStyle"
          },
          {
            "name": "filled",
            "comment": " Create a filled in shape. ",
            "type": "Color.Color -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "gradient",
            "comment": " Fill a shape with a [gradient](Color#linear). ",
            "type": "Color.Gradient -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "group",
            "comment": " Flatten many forms into a single `Form`. This lets you move and rotate them\nas a single unit, making it possible to build small, modular components.\nForms will be drawn in the order that they are listed, as in `collage`.\n",
            "type": "List Collage.Form -> Collage.Form"
          },
          {
            "name": "groupTransform",
            "comment": " Flatten many forms into a single `Form` and then apply a matrix\ntransformation. Forms will be drawn in the order that they are listed, as in\n`collage`.\n",
            "type": "Transform.Transform -> List Collage.Form -> Collage.Form"
          },
          {
            "name": "move",
            "comment": " Move a form by the given amount (x, y). This is a relative translation so\n`(move (5,10) form)` would move `form` five pixels to the right and ten pixels up.\n",
            "type": "( Float, Float ) -> Collage.Form -> Collage.Form"
          },
          {
            "name": "moveX",
            "comment": " Move a shape in the x direction. This is relative so `(moveX 10 form)` moves\n`form` 10 pixels to the right.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "moveY",
            "comment": " Move a shape in the y direction. This is relative so `(moveY 10 form)` moves\n`form` upwards by 10 pixels.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "ngon",
            "comment": " A regular polygon with N sides. The first argument specifies the number\nof sides and the second is the radius. So to create a pentagon with radius\n30 you would say:\n\n    ngon 5 30\n",
            "type": "Int -> Float -> Collage.Shape"
          },
          {
            "name": "outlined",
            "comment": " Outline a shape with a given line style. ",
            "type": "Collage.LineStyle -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "outlinedText",
            "comment": " Create some outlined text. Since we are just outlining the text, the color\nis taken from the `LineStyle` attribute instead of the `Text`.\n",
            "type": "Collage.LineStyle -> Text.Text -> Collage.Form"
          },
          {
            "name": "oval",
            "comment": " An oval with a given width and height. ",
            "type": "Float -> Float -> Collage.Shape"
          },
          {
            "name": "path",
            "comment": " Create a path that follows a sequence of points. ",
            "type": "List ( Float, Float ) -> Collage.Path"
          },
          {
            "name": "polygon",
            "comment": " Create an arbitrary polygon by specifying its corners in order.\n`polygon` will automatically close all shapes, so the given list\nof points does not need to start and end with the same position.\n",
            "type": "List ( Float, Float ) -> Collage.Shape"
          },
          {
            "name": "rect",
            "comment": " A rectangle with a given width and height. ",
            "type": "Float -> Float -> Collage.Shape"
          },
          {
            "name": "rotate",
            "comment": " Rotate a form by a given angle. Rotate takes standard Elm angles (radians)\nand turns things counterclockwise. So to turn `form` 30&deg; to the left\nyou would say, `(rotate (degrees 30) form)`.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "scale",
            "comment": " Scale a form by a given factor. Scaling by 2 doubles both dimensions,\nand quadruples the area.\n",
            "type": "Float -> Collage.Form -> Collage.Form"
          },
          {
            "name": "segment",
            "comment": " Create a path along a given line segment. ",
            "type": "( Float, Float ) -> ( Float, Float ) -> Collage.Path"
          },
          {
            "name": "solid",
            "comment": " Create a solid line style with a given color. ",
            "type": "Color.Color -> Collage.LineStyle"
          },
          {
            "name": "square",
            "comment": " A square with a given edge length. ",
            "type": "Float -> Collage.Shape"
          },
          {
            "name": "text",
            "comment": " Create some text. Details like size and color are part of the `Text` value\nitself, so you can mix colors and sizes and fonts easily.\n",
            "type": "Text.Text -> Collage.Form"
          },
          {
            "name": "textured",
            "comment": " Create a textured shape. The texture is described by some url and is\ntiled to fill the entire shape.\n",
            "type": "String -> Collage.Shape -> Collage.Form"
          },
          {
            "name": "toForm",
            "comment": " Turn any `Element` into a `Form`. This lets you use text, gifs, and video\nin your collage. This means you can move, rotate, and scale\nan `Element` however you want.\n",
            "type": "Element.Element -> Collage.Form"
          },
          {
            "name": "traced",
            "comment": " Trace a path with a given line style. ",
            "type": "Collage.LineStyle -> Collage.Path -> Collage.Form"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Element",
        "comment": " Graphical elements that snap together to build complex widgets and layouts.\nEach Element is a rectangle with a known width and height, making them easy to\ncombine and position.\n\n# Elements\n@docs Element, toHtml\n\n# Show Anything\n@docs show\n\n# Images\n@docs image, fittedImage, croppedImage, tiledImage\n\n# Text\nEach of the following functions places [`Text`](Text) into a box. The function\nyou use determines the alignment of the text.\n\n@docs leftAligned, rightAligned, centered, justified\n\n# Styling\n@docs width, height, size, color, opacity, link, tag\n\n# Inspection\n@docs widthOf, heightOf, sizeOf\n\n# Layout\n@docs flow, Direction, up, down, left, right, inward, outward\n\n## Layout Aliases\nThere are also some convenience functions for working\nwith `flow` in specific cases:\n\n@docs layers, above, below, beside\n\n# Positioning\n@docs empty, spacer, container\n\n## Specific Positions\n\n@docs Position, middle, midTop, midBottom, midLeft, midRight, topLeft,\n  topRight, bottomLeft, bottomRight\n\nIf you need more precision, you can create custom positions.\n\n@docs Pos, absolute, relative, middleAt, midTopAt, midBottomAt, midLeftAt,\n      midRightAt, topLeftAt, topRightAt, bottomLeftAt, bottomRightAt\n",
        "aliases": [],
        "types": [
          {
            "name": "Direction",
            "comment": " Represents a `flow` direction for a list of elements.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Element",
            "comment": " A graphical element that can be rendered on screen. Every element is a\nrectangle with a known width and height, so they can be composed and stacked\neasily.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Pos",
            "comment": " Specifies a distance from a particular location within a `container`, like\n“20 pixels right and up from the center”. You can use `absolute` or `relative`\nto specify a `Pos` in pixels or as a percentage of the container.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Position",
            "comment": " Specifies a position for an element within a `container`, like “the top\nleft corner”.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "above",
            "comment": " Stack elements vertically.\nTo put `a` above `b` you would say: ``a `above` b``\n",
            "type": "Element.Element -> Element.Element -> Element.Element"
          },
          {
            "name": "absolute",
            "comment": " A position specified in pixels. If you want something 10 pixels to the\nright of the middle of a container, you would write this:\n\n    middleAt (absolute 10) (absolute 0)\n\n",
            "type": "Int -> Element.Pos"
          },
          {
            "name": "below",
            "comment": " Stack elements vertically.\nTo put `a` below `b` you would say: ``a `below` b``\n",
            "type": "Element.Element -> Element.Element -> Element.Element"
          },
          {
            "name": "beside",
            "comment": " Put elements beside each other horizontally.\nTo put `a` beside `b` you would say: ``a `beside` b``\n",
            "type": "Element.Element -> Element.Element -> Element.Element"
          },
          {
            "name": "bottomLeft",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "bottomLeftAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "bottomRight",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "bottomRightAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "centered",
            "comment": " Center text in the text block. There is equal spacing on either side of a\nline of text.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "color",
            "comment": " Create an `Element` with a given background color. ",
            "type": "Color.Color -> Element.Element -> Element.Element"
          },
          {
            "name": "container",
            "comment": " Put an element in a container. This lets you position the element really\neasily, and there are tons of ways to set the `Position`.\nTo center `element` exactly in a 300-by-300 square you would say:\n\n    container 300 300 middle element\n\nBy setting the color of the container, you can create borders.\n",
            "type": "Int -> Int -> Element.Position -> Element.Element -> Element.Element"
          },
          {
            "name": "croppedImage",
            "comment": " Create a cropped image. Take a rectangle out of the picture starting\nat the given top left coordinate. If you have a 140-by-140 image,\nthe following will cut a 100-by-100 square out of the middle of it.\n\n    croppedImage (20,20) 100 100 \"yogi.jpg\"\n",
            "type": "( Int, Int ) -> Int -> Int -> String -> Element.Element"
          },
          {
            "name": "down",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "empty",
            "comment": " An Element that takes up no space. Good for things that appear conditionally:\n\n    flow down [ img1, if showMore then img2 else empty ]\n",
            "type": "Element.Element"
          },
          {
            "name": "fittedImage",
            "comment": " Create a fitted image given a width, height, and image source.\nThis will crop the picture to best fill the given dimensions.\n",
            "type": "Int -> Int -> String -> Element.Element"
          },
          {
            "name": "flow",
            "comment": " Have a list of elements flow in a particular direction.\nThe `Direction` starts from the first element in the list.\n\n    flow right [a,b,c]\n\n        +---+---+---+\n        | a | b | c |\n        +---+---+---+\n",
            "type": "Element.Direction -> List Element.Element -> Element.Element"
          },
          {
            "name": "height",
            "comment": " Create an `Element` with a given height. ",
            "type": "Int -> Element.Element -> Element.Element"
          },
          {
            "name": "heightOf",
            "comment": " Get the height of an Element ",
            "type": "Element.Element -> Int"
          },
          {
            "name": "image",
            "comment": " Create an image given a width, height, and image source. ",
            "type": "Int -> Int -> String -> Element.Element"
          },
          {
            "name": "inward",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "justified",
            "comment": " Align text along the left and right sides of the text block. Word spacing is\nadjusted to make this possible.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "layers",
            "comment": " Layer elements on top of each other, starting from the bottom:\n`layers == flow outward`\n",
            "type": "List Element.Element -> Element.Element"
          },
          {
            "name": "left",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "leftAligned",
            "comment": " Align text along the left side of the text block. This is sometimes known as\n*ragged right*.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "link",
            "comment": " Create an `Element` that is a hyper-link. ",
            "type": "String -> Element.Element -> Element.Element"
          },
          {
            "name": "midBottom",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midBottomAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "midLeft",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midLeftAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "midRight",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midRightAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "midTop",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "midTopAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "middle",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "middleAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "opacity",
            "comment": " Create an `Element` with a given opacity. Opacity is a number between 0 and 1\nwhere 0 means totally clear.\n",
            "type": "Float -> Element.Element -> Element.Element"
          },
          {
            "name": "outward",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "relative",
            "comment": " A position specified as a percentage. If you want something 10% away from\nthe top left corner, you would say:\n\n    topLeftAt (relative 0.1) (relative 0.1)\n",
            "type": "Float -> Element.Pos"
          },
          {
            "name": "right",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "rightAligned",
            "comment": " Align text along the right side of the text block. This is sometimes known\nas *ragged left*.\n",
            "type": "Text.Text -> Element.Element"
          },
          {
            "name": "show",
            "comment": " Convert anything to its textual representation and make it displayable in\nthe browser. Excellent for debugging.\n\n    show value =\n      leftAligned (Text.monospace (Text.fromString (toString value)))\n",
            "type": "a -> Element.Element"
          },
          {
            "name": "size",
            "comment": " Create an `Element` with a new width and height. ",
            "type": "Int -> Int -> Element.Element -> Element.Element"
          },
          {
            "name": "sizeOf",
            "comment": " Get the width and height of an Element ",
            "type": "Element.Element -> ( Int, Int )"
          },
          {
            "name": "spacer",
            "comment": " Create an empty box. This is useful for getting your spacing right and\nfor making borders.\n",
            "type": "Int -> Int -> Element.Element"
          },
          {
            "name": "tag",
            "comment": " Create an `Element` with a tag. This lets you link directly to it.\nThe element `(tag \"all-about-badgers\" thirdParagraph)` can be reached\nwith a link like this: `/facts-about-animals.elm#all-about-badgers`\n",
            "type": "String -> Element.Element -> Element.Element"
          },
          {
            "name": "tiledImage",
            "comment": " Create a tiled image. Repeat the image to fill the given width and height.\n\n    tiledImage 100 100 \"yogi.jpg\"\n",
            "type": "Int -> Int -> String -> Element.Element"
          },
          {
            "name": "toHtml",
            "comment": " Convert an element into HTML, so it can be embedded anywhere in your\nprogram.\n",
            "type": "Element.Element -> Html.Html msg"
          },
          {
            "name": "topLeft",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "topLeftAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "topRight",
            "comment": "",
            "type": "Element.Position"
          },
          {
            "name": "topRightAt",
            "comment": "",
            "type": "Element.Pos -> Element.Pos -> Element.Position"
          },
          {
            "name": "up",
            "comment": "",
            "type": "Element.Direction"
          },
          {
            "name": "width",
            "comment": " Create an `Element` with a given width. ",
            "type": "Int -> Element.Element -> Element.Element"
          },
          {
            "name": "widthOf",
            "comment": " Get the width of an Element ",
            "type": "Element.Element -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Transform",
        "comment": " A library for performing [2D matrix transformations][affine].  It\nis used primarily with the `groupTransform` function from\n[`Graphics.Collage`](Graphics-Collage) and allows you to do things\nlike rotation, scaling, translation, shearing, and reflection.\n\nNote that all the matrices in this library are 3x3 matrices of homogeneous\ncoordinates, used for [affine transformations][affine]. Since the bottom row as\nalways `0 0 1` in these matrices, it is omitted in the diagrams below.\n\n [affine]: http://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\n\n# Transforms\n@docs Transform, identity, matrix, rotation, translation, scale, scaleX, scaleY\n\n# Multiplication\n@docs multiply\n",
        "aliases": [],
        "types": [
          {
            "name": "Transform",
            "comment": " A matrix representing a 2D transformation.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "identity",
            "comment": " Create an identity transform. Transforming by the identity does\nnot change anything, but it can come in handy as a default or\nbase case.\n\n        / 1 0 0 \\\n        \\ 0 1 0 /\n",
            "type": "Transform.Transform"
          },
          {
            "name": "matrix",
            "comment": " Create a transformation matrix. This lets you create transforms\nsuch as scales, shears, reflections, and translations.\n\n    matrix a b c d x y\n\n        / a b x \\\n        \\ c d y /\n\nNote that `x` and `y` are the translation values.\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Transform.Transform"
          },
          {
            "name": "multiply",
            "comment": " Multiply two transforms together.\n\n    multiply m n\n\n        / ma mb mx \\     / na nb nx \\\n        | mc md my |  .  | nc nd ny |\n        \\  0  0  1 /     \\  0  0  1 /\n",
            "type": "Transform.Transform -> Transform.Transform -> Transform.Transform"
          },
          {
            "name": "rotation",
            "comment": " Create a [rotation matrix](http://en.wikipedia.org/wiki/Rotation_matrix).\nGiven an angle t, it creates a counterclockwise rotation matrix:\n\n    rotation t\n\n        / cos t  -sin t  0 \\\n        \\ sin t   cos t  0 /\n",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "scale",
            "comment": " Creates a transformation matrix for scaling by a all directions.\n\n    scale s\n\n      / s 0 0 \\\n      \\ 0 s 0 /\n",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "scaleX",
            "comment": " Create a transformation for horizontal scaling. ",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "scaleY",
            "comment": " Create a transformation for vertical scaling. ",
            "type": "Float -> Transform.Transform"
          },
          {
            "name": "translation",
            "comment": " Create a transformation matrix for translation.\n\n    translation x y\n\n        / 1 0 x \\\n        \\ 0 1 y /\n",
            "type": "Float -> Float -> Transform.Transform"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Text",
        "comment": " A library for styling and displaying text. While the\n[`String`](String) library focuses on representing and manipulating\nstrings of character strings, the `Text` library focuses on how those\nstrings should look on screen. It lets you make text bold or italic,\nset the typeface, set the text size, etc.\n\n# Text\n@docs Text\n\n# Creating Text\n@docs fromString, empty, append, concat, join\n\n# Links and Style\n@docs link, typeface, monospace, height, color, bold, italic, line, Line,\n    style, Style, defaultStyle\n\n",
        "aliases": [
          {
            "name": "Style",
            "comment": " Represents all the ways you can style `Text`. If the `typeface` list is\nempty or the `height` is `Nothing`, the users will fall back on their browser's\ndefault settings. The following `Style` is black, 16 pixel tall, underlined, and\nTimes New Roman (assuming that typeface is available on the user's computer):\n\n    { typeface = [ \"Times New Roman\", \"serif\" ]\n    , height   = Just 16\n    , color    = black\n    , bold     = False\n    , italic   = False\n    , line     = Just Under\n    }\n",
            "args": [],
            "type": "{ typeface : List String , height : Maybe.Maybe Float , color : Color.Color , bold : Bool , italic : Bool , line : Maybe.Maybe Text.Line }"
          }
        ],
        "types": [
          {
            "name": "Line",
            "comment": " Styles for lines on text. This allows you to add an underline, an overline,\nor a strike out text:\n\n    line Under   (fromString \"underline\")\n    line Over    (fromString \"overline\")\n    line Through (fromString \"strike out\")\n",
            "args": [],
            "cases": [
              [
                "Under",
                []
              ],
              [
                "Over",
                []
              ],
              [
                "Through",
                []
              ]
            ]
          },
          {
            "name": "Text",
            "comment": " Represents styled text. It can be rendered with collages or with elements.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "append",
            "comment": " Put two chunks of text together.\n\n    append (fromString \"hello \") (fromString \"world\") == fromString \"hello world\"\n",
            "type": "Text.Text -> Text.Text -> Text.Text"
          },
          {
            "name": "bold",
            "comment": " Make text bold.\n\n    fromString \"sometimes you want \" ++ bold (fromString \"emphasis\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "color",
            "comment": " Set the color of some text.\n\n    color red (fromString \"Red\")\n",
            "type": "Color.Color -> Text.Text -> Text.Text"
          },
          {
            "name": "concat",
            "comment": " Put many chunks of text together.\n\n    concat\n      [ fromString \"type \"\n      , bold (fromString \"Maybe\")\n      , fromString \" = Just a | Nothing\"\n      ]\n",
            "type": "List Text.Text -> Text.Text"
          },
          {
            "name": "defaultStyle",
            "comment": " Plain black text. It uses the browsers default typeface and text height.\nNo decorations are used.\n\n    { typeface = []\n    , height = Nothing\n    , color = black\n    , bold = False\n    , italic = False\n    , line = Nothing\n    }\n",
            "type": "Text.Style"
          },
          {
            "name": "empty",
            "comment": " Text with nothing in it.\n\n    empty = fromString \"\"\n",
            "type": "Text.Text"
          },
          {
            "name": "fromString",
            "comment": " Convert a string into text which can be styled and displayed. To show the\nstring `\"Hello World!\"` on screen in italics, you could say:\n\n    main = leftAligned (italic (fromString \"Hello World!\"))\n",
            "type": "String -> Text.Text"
          },
          {
            "name": "height",
            "comment": " Set the height of some text.\n\n    height 40 (fromString \"Title\")\n",
            "type": "Float -> Text.Text -> Text.Text"
          },
          {
            "name": "italic",
            "comment": " Make text italic.\n\n    fromString \"make it \" ++ italic (fromString \"important\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "join",
            "comment": " Put many chunks of text together with a separator.\n\n    chunks : List Text\n    chunks = List.map fromString [\"lions\",\"tigers\",\"bears\"]\n\n    join (fromString \", \") chunks == fromString \"lions, tigers, bears\"\n",
            "type": "Text.Text -> List Text.Text -> Text.Text"
          },
          {
            "name": "line",
            "comment": " Put lines on text.\n\n    line Under   (fromString \"underlined\")\n    line Over    (fromString \"overlined\")\n    line Through (fromString \"strike out\")\n",
            "type": "Text.Line -> Text.Text -> Text.Text"
          },
          {
            "name": "link",
            "comment": " Create a link by providing a URL and the text of the link.\n\n    link \"http://elm-lang.org\" (fromString \"Elm Website\")\n",
            "type": "String -> Text.Text -> Text.Text"
          },
          {
            "name": "monospace",
            "comment": " Switch to a monospace typeface. Good for code snippets.\n\n    monospace (fromString \"foldl (+) 0 [1,2,3]\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "style",
            "comment": " Set the style of some text. For example, if you design a `Style` called\n`footerStyle` that is specifically for the bottom of your page, you could apply\nit to text like this:\n\n    style footerStyle (fromString \"the old prince / 2007\")\n",
            "type": "Text.Style -> Text.Text -> Text.Text"
          },
          {
            "name": "typeface",
            "comment": " Provide a list of preferred typefaces for some text.\n\n    [\"helvetica\",\"arial\",\"sans-serif\"]\n\nNot every browser has access to the same typefaces, so rendering will use the\nfirst typeface in the list that is found on the user's computer. If there are\nno matches, it will use their default typeface. This works the same as the CSS\nfont-family property.\n",
            "type": "List String -> Text.Text -> Text.Text"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "evancz/elm-http",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Http",
        "comment": "\n\n# Encoding and Decoding\n@docs url, uriEncode, uriDecode\n\n# Fetch Strings and JSON\n@docs getString, get, post, Error\n\n# Body Values\n@docs Body, empty, string, multipart, Data, stringData\n\n# Arbitrary Requests\n@docs send, Request, Settings, defaultSettings\n\n# Responses\n@docs Response, Value, fromJson, RawError\n",
        "aliases": [
          {
            "name": "Request",
            "comment": " Fully specify the request you want to send. For example, if you want to\nsend a request between domains (CORS request) you will need to specify some\nheaders manually.\n\n    corsPost : Request\n    corsPost =\n        { verb = \"POST\"\n        , headers =\n            [ (\"Origin\", \"http://elm-lang.org\")\n            , (\"Access-Control-Request-Method\", \"POST\")\n            , (\"Access-Control-Request-Headers\", \"X-Custom-Header\")\n            ]\n        , url = \"http://example.com/hats\"\n        , body = empty\n        }\n",
            "args": [],
            "type": "{ verb : String , headers : List ( String, String ) , url : String , body : Http.Body }"
          },
          {
            "name": "Response",
            "comment": " All the details of the response. There are many weird facts about\nresponses which include:\n\n  * The `status` may be 0 in the case that you load something from `file://`\n  * You cannot handle redirects yourself, they will all be followed\n    automatically. If you want to know if you have gone through one or more\n    redirect, the `url` field will let you know who sent you the response, so\n    you will know if it does not match the URL you requested.\n  * You are allowed to have duplicate headers, and their values will be\n    combined into a single comma-separated string.\n\nWe have left these underlying facts about `XMLHttpRequest` as is because one\ngoal of this library is to give a low-level enough API that others can build\nwhatever helpful behavior they want on top of it.\n",
            "args": [],
            "type": "{ status : Int , statusText : String , headers : Dict.Dict String String , url : String , value : Http.Value }"
          },
          {
            "name": "Settings",
            "comment": " Configure your request if you need specific behavior.\n\n  * `timeout` lets you specify how long you are willing to wait for a response\n    before giving up. By default it is 0 which means &ldquo;never give\n    up!&rdquo;\n\n  * `onStart` and `onProgress` allow you to monitor progress. This is useful\n    if you want to show a progress bar when uploading a large amount of data.\n\n  * `desiredResponseType` lets you override the MIME type of the response, so\n    you can influence what kind of `Value` you get in the `Response`.\n",
            "args": [],
            "type": "{ timeout : Time.Time , onStart : Maybe.Maybe (Task.Task () ()) , onProgress : Maybe.Maybe (Maybe.Maybe { loaded : Int, total : Int } -> Task.Task () ()) , desiredResponseType : Maybe.Maybe String , withCredentials : Bool }"
          }
        ],
        "types": [
          {
            "name": "Body",
            "comment": " An opaque type representing the body of your HTTP message. With GET\nrequests this is empty, but in other cases it may be a string or blob.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Data",
            "comment": " Represents data that can be put in a multi-part body. Right now it only\nsupports strings, but we will support blobs and files when we get an API for\nthem in Elm.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Error",
            "comment": " The kinds of errors you typically want in practice. When you get a\nresponse but its status is not in the 200 range, it will trigger a\n`BadResponse`. When you try to decode JSON but something goes wrong,\nyou will get an `UnexpectedPayload`.\n",
            "args": [],
            "cases": [
              [
                "Timeout",
                []
              ],
              [
                "NetworkError",
                []
              ],
              [
                "UnexpectedPayload",
                [
                  "String"
                ]
              ],
              [
                "BadResponse",
                [
                  "Int",
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "RawError",
            "comment": " The things that count as errors at the lowest level. Technically, getting\na response back with status 404 is a &ldquo;successful&rdquo; response in that\nyou actually got all the information you asked for.\n\nThe `fromJson` function and `Error` type provide higher-level errors, but the\npoint of `RawError` is to allow you to define higher-level errors however you\nwant.\n",
            "args": [],
            "cases": [
              [
                "RawTimeout",
                []
              ],
              [
                "RawNetworkError",
                []
              ]
            ]
          },
          {
            "name": "Value",
            "comment": " The information given in the response. Currently there is no way to handle\n`Blob` types since we do not have an Elm API for that yet. This type will\nexpand as more values become available in Elm itself.\n",
            "args": [],
            "cases": [
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "Blob",
                [
                  "Http.Blob"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultSettings",
            "comment": " The default settings used by `get` and `post`.\n\n    { timeout = 0\n    , onStart = Nothing\n    , onProgress = Nothing\n    , desiredResponseType = Nothing\n    , withCredentials = False\n    }\n",
            "type": "Http.Settings"
          },
          {
            "name": "empty",
            "comment": " An empty request body, no value will be sent along.\n",
            "type": "Http.Body"
          },
          {
            "name": "fromJson",
            "comment": " Turn a `Response` into an Elm value that is easier to deal with. Helpful\nif you are making customized HTTP requests with `send`, as is the case with\n`get` and `post`.\n\nGiven a `Response` this function will:\n\n  * Check that the status code is in the 200 range.\n  * Make sure the response `Value` is a string.\n  * Convert the string to Elm with the given `Decoder`.\n\nAssuming all these steps succeed, you will get an Elm value as the result!\n",
            "type": "Json.Decode.Decoder a -> Task.Task Http.RawError Http.Response -> Task.Task Http.Error a"
          },
          {
            "name": "get",
            "comment": " Send a GET request to the given URL. You also specify how to decode the\nresponse.\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        get (list string) \"http://example.com/hat-categories.json\"\n\n",
            "type": "Json.Decode.Decoder value -> String -> Task.Task Http.Error value"
          },
          {
            "name": "getString",
            "comment": " Send a GET request to the given URL. You will get the entire response as a\nstring.\n\n    hats : Task Error String\n    hats =\n        getString \"http://example.com/hat-categories.markdown\"\n\n",
            "type": "String -> Task.Task Http.Error String"
          },
          {
            "name": "multipart",
            "comment": " Create multi-part request bodies, allowing you to send many chunks of data\nall in one request. All chunks of data must be given a name.\n\nCurrently, you can only construct `stringData`, but we will support `blobData`\nand `fileData` once we have proper APIs for those types of data in Elm.\n",
            "type": "List Http.Data -> Http.Body"
          },
          {
            "name": "post",
            "comment": " Send a POST request to the given URL, carrying the given body. You also\nspecify how to decode the response with [a JSON decoder][json].\n\n[json]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        post (list string) \"http://example.com/hat-categories.json\" empty\n\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "send",
            "comment": " Send a request exactly how you want it. The `Settings` argument lets you\nconfigure things like timeouts and progress monitoring. The `Request` argument\ndefines all the information that will actually be sent along to a server.\n\n    crossOriginGet : String -> String -> Task RawError Response\n    crossOriginGet origin url =\n      send defaultSettings\n        { verb = \"GET\"\n        , headers = [(\"Origin\", origin)]\n        , url = url\n        , body = empty\n        }\n",
            "type": "Http.Settings -> Http.Request -> Task.Task Http.RawError Http.Response"
          },
          {
            "name": "string",
            "comment": " Provide a string as the body of the request. Useful if you need to send\nJSON data to a server that does not belong in the URL.\n\n    import Json.Decode as JS\n\n    coolestHats : Task Error (List String)\n    coolestHats =\n        post\n          (JS.list JS.string)\n          \"http://example.com/hats\"\n          (string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "String -> Http.Body"
          },
          {
            "name": "stringData",
            "comment": " A named chunk of string data.\n\n    import Json.Encode as JS\n\n    body =\n      multipart\n        [ stringData \"user\" (JS.encode user)\n        , stringData \"payload\" (JS.encode payload)\n        ]\n",
            "type": "String -> String -> Http.Data"
          },
          {
            "name": "uriDecode",
            "comment": " Decode a URI string. Same behavior as JavaScript's `decodeURIComponent`\nfunction.\n",
            "type": "String -> String"
          },
          {
            "name": "uriEncode",
            "comment": " Encode a string to be placed in any part of a URI. Same behavior as\nJavaScript's `encodeURIComponent` function.\n",
            "type": "String -> String"
          },
          {
            "name": "url",
            "comment": " Create a properly encoded URL with a [query string][qs]. The first argument is\nthe portion of the URL before the query string, which is assumed to be\nproperly encoded already. The second argument is a list of all the\nkey/value pairs needed for the query string. Both the keys and values\nwill be appropriately encoded, so they can contain spaces, ampersands, etc.\n\n[qs]: http://en.wikipedia.org/wiki/Query_string\n\n    url \"http://example.com/users\" [ (\"name\", \"john doe\"), (\"age\", \"30\") ]\n    -- http://example.com/users?name=john+doe&age=30\n",
            "type": "String -> List ( String, String ) -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "evancz/elm-markdown",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Markdown",
        "comment": " A library for markdown parsing. This is just an Elm API built on top of the\n[marked](https://github.com/chjj/marked) project which focuses on speed.\n\n# Parsing Markdown\n@docs toHtml\n\n# Parsing with Custom Options\n@docs Options, defaultOptions, toHtmlWith\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Some parser options so you can tweak things for your particular case.\n\n  * `githubFlavored` &mdash; overall reasonable improvements on the original\n    markdown parser as described [here][gfm]. This includes stuff like [fenced\n    code blocks][fenced]. There are some odd parts though, such as [tables][]\n    and a setting to turn all newlines into newlines in the resulting output,\n    so there are settings to turn those on or off based on your preference.\n\n  * `defaultHighlighting` &mdash; a default language to use for code blocks that do\n    not have a language tag. So setting this to `Just \"elm\"` will treat all\n    unlabeled code blocks as Elm code. (This relies on [highlight.js][highlight]\n    as explained in the README [here](../#code-blocks).)\n\n  * `sanitize` &mdash; this determines if all HTML should be escaped. If you\n    are parsing user markdown or user input can somehow reach the markdown\n    parser, you should almost certainly turn on sanitation. If it is just you\n    writing markdown, turning sanitation off is a nice way to do some HTML\n    tricks if it is needed.\n\n  * `smartypants` &mdash; This will automatically upgrade quotes to the\n    prettier versions and turn dashes into [em dashes or en dashes][dash]\n\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown/\n[fenced]: https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks\n[tables]: https://help.github.com/articles/github-flavored-markdown/#tables\n[highlight]: https://highlightjs.org/\n[dash]: http://en.wikipedia.org/wiki/Dash\n",
            "args": [],
            "type": "{ githubFlavored : Maybe.Maybe { tables : Bool, breaks : Bool } , defaultHighlighting : Maybe.Maybe String , sanitize : Bool , smartypants : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " The `Options` used by the `toElement` and `toHtml` functions.\n\n    { githubFlavored = Just { tables = False, breaks = False }\n    , defaultHighlighting = Nothing\n    , sanitize = False\n    , smartypants = False\n    }\n",
            "type": "Markdown.Options"
          },
          {
            "name": "toHtml",
            "comment": " Turn a markdown string into an HTML element, using the `defaultOptions`.\n\n    bodyParagraph : Html msg\n    bodyParagraph =\n       Markdown.toHtml [class \"body\"] \"\"\"\n\n    # Changing History\n\n    In addition to time travel, Elm Reactor lets you change history...\n\n    \"\"\"\n",
            "type": "List (Html.Attribute msg) -> String -> Html.Html msg"
          },
          {
            "name": "toHtmlWith",
            "comment": " Maybe you want to parse user input into markdown. To stop them from adding\n`<script>` tags, you can use modified parsing options.\n\n    options : Options\n    options =\n        { defaultOptions | sanitize = True }\n\n    toMarkdown : String -> Html\n    toMarkdown userInput =\n        Markdown.toHtmlWith options [] userInput\n",
            "type": "Markdown.Options -> List (Html.Attribute msg) -> String -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "evancz/elm-sortable-table",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Table",
        "comment": "\n\nThis library helps you create sortable tables. The crucial feature is that it\nlets you own your data separately and keep it in whatever format is best for\nyou. This way you are free to change your data without worrying about the table\n&ldquo;getting out of sync&rdquo; with the data. Having a single source of\ntruth is pretty great!\n\nI recommend checking out the [examples][] to get a feel for how it works.\n\n[examples]: https://github.com/evancz/elm-tables/tree/master/examples\n\n# View\n\n@docs view\n\n# Configuration\n\n@docs config, stringColumn, intColumn, floatColumn\n\n# State\n\n@docs State, initialSort\n\n\n# Crazy Customization\n\nIf you are new to this library, you can probably stop reading here. After this\npoint are a bunch of ways to customize your table further. If it does not\nprovide what you need, you may just want to write a custom table yourself. It\nis not that crazy.\n\n## Custom Columns\n\n@docs Column, customColumn, veryCustomColumn,\n  Sorter, unsortable, increasingBy, decreasingBy,\n  increasingOrDecreasingBy, decreasingOrIncreasingBy\n\n## Custom Tables\n\n@docs Config, customConfig, Customizations, HtmlDetails, Status,\n  defaultCustomizations\n",
        "aliases": [
          {
            "name": "Customizations",
            "comment": " There are quite a lot of ways to customize the `<table>` tag. You can add\na `<caption>` which can be styled via CSS. You can do crazy stuff with\n`<thead>` to group columns in weird ways. You can have a `<tfoot>` tag for\nsummaries of various columns. And maybe you want to put attributes on `<tbody>`\nor on particular rows in the body. All these customizations are available to you.\n\n**Note:** The level of craziness possible in `<thead>` and `<tfoot>` are so\nhigh that I could not see how to provide the full functionality *and* make it\nimpossible to do bad stuff. So just be aware of that, and share any stories\nyou have. Stories make it possible to design better!\n",
            "args": [
              "data",
              "msg"
            ],
            "type": "{ tableAttrs : List (Html.Attribute msg) , caption : Maybe.Maybe (Table.HtmlDetails msg) , thead : List ( String, Table.Status, Html.Attribute msg ) -> Table.HtmlDetails msg , tfoot : Maybe.Maybe (Table.HtmlDetails msg) , tbodyAttrs : List (Html.Attribute msg) , rowAttrs : data -> List (Html.Attribute msg) }"
          },
          {
            "name": "HtmlDetails",
            "comment": " Sometimes you must use a `<td>` tag, but the attributes and children are up\nto you. This type lets you specify all the details of an HTML node except the\ntag name.\n",
            "args": [
              "msg"
            ],
            "type": "{ attributes : List (Html.Attribute msg) , children : List (Html.Html msg) }"
          }
        ],
        "types": [
          {
            "name": "Column",
            "comment": " Describes how to turn `data` into a column in your table.\n",
            "args": [
              "data",
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Config",
            "comment": " Configuration for your table, describing your columns.\n\n**Note:** Your `Config` should *never* be held in your model.\nIt should only appear in `view` code.\n",
            "args": [
              "data",
              "msg"
            ],
            "cases": []
          },
          {
            "name": "Sorter",
            "comment": " Specifies a particular way of sorting data.\n",
            "args": [
              "data"
            ],
            "cases": []
          },
          {
            "name": "State",
            "comment": " Tracks which column to sort by.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Status",
            "comment": " The status of a particular column, for use in the `thead` field of your\n`Customizations`.\n\n  - If the column is unsortable, the status will always be `Unsortable`.\n  - If the column can be sorted in one direction, the status will be `Sortable`.\n    The associated boolean represents whether this column is selected. So it is\n    `True` if the table is currently sorted by this column, and `False` otherwise.\n  - If the column can be sorted in either direction, the status will be `Reversible`.\n    The associated maybe tells you whether this column is selected. It is\n    `Just isReversed` if the table is currently sorted by this column, and\n    `Nothing` otherwise. The `isReversed` boolean lets you know which way it\n    is sorted.\n\nThis information lets you do custom header decorations for each scenario.\n",
            "args": [],
            "cases": [
              [
                "Unsortable",
                []
              ],
              [
                "Sortable",
                [
                  "Bool"
                ]
              ],
              [
                "Reversible",
                [
                  "Maybe.Maybe Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "config",
            "comment": " Create the `Config` for your `view` function. Everything you need to\nrender your columns efficiently and handle selection of columns.\n\nSay we have a `List Person` that we want to show as a table. The table should\nhave a column for name and age. We would create a `Config` like this:\n\n    import Table\n\n    type Msg = NewTableState State | ...\n\n    config : Table.Config Person Msg\n    config =\n      Table.config\n        { toId = .name\n        , toMsg = NewTableState\n        , columns =\n            [ Table.stringColumn \"Name\" .name\n            , Table.intColumn \"Age\" .age\n            ]\n        }\n\nYou provide the following information in your table configuration:\n\n  - `toId` &mdash; turn a `Person` into a unique ID. This lets us use\n  [`Html.Keyed`][keyed] under the hood to make resorts faster.\n  - `columns` &mdash; specify some columns to show.\n  - `toMsg` &mdash; a way send new table states to your app as messages.\n\nSee the [examples][] to get a better feel for this!\n\n[keyed]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Keyed\n[examples]: https://github.com/evancz/elm-tables/tree/master/examples\n",
            "type": "{ toId : data -> String , toMsg : Table.State -> msg , columns : List (Table.Column data msg) } -> Table.Config data msg"
          },
          {
            "name": "customColumn",
            "comment": " Perhaps the basic columns are not quite what you want. Maybe you want to\ndisplay monetary values in thousands of dollars, and `floatColumn` does not\nquite cut it. You could define a custom column like this:\n\n    import Table\n\n    dollarColumn : String -> (data -> Float) -> Column data msg\n    dollarColumn name toDollars =\n      Table.customColumn\n        { name = name\n        , viewData = \\data -> viewDollars (toDollars data)\n        , sorter = Table.decreasingBy toDollars\n        }\n\n    viewDollars : Float -> String\n    viewDollars dollars =\n      \"$\" ++ toString (round (dollars / 1000)) ++ \"k\"\n\nThe `viewData` field means we will displays the number `12345.67` as `$12k`.\n\nThe `sorter` field specifies how the column can be sorted. In `dollarColumn` we\nare saying that it can *only* be shown from highest-to-lowest monetary value.\nMore about sorters soon!\n",
            "type": "{ name : String , viewData : data -> String , sorter : Table.Sorter data } -> Table.Column data msg"
          },
          {
            "name": "customConfig",
            "comment": " Just like `config` but you can specify a bunch of table customizations.\n",
            "type": "{ toId : data -> String , toMsg : Table.State -> msg , columns : List (Table.Column data msg) , customizations : Table.Customizations data msg } -> Table.Config data msg"
          },
          {
            "name": "decreasingBy",
            "comment": " Create a sorter that can only display the data in decreasing order. If we\nwant a table of countries, sorted by population from highest to lowest, we\nwould say this:\n\n    sorter : Sorter { a | population : comparable }\n    sorter =\n      decreasingBy .population\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "decreasingOrIncreasingBy",
            "comment": " Sometimes you want to be able to sort data in increasing *or* decreasing\norder. Maybe you have a bunch of data about orange juice, and you want to know\nboth which has the most sugar, and which has the least sugar. Both interesting!\nThis function lets you see both, starting with decreasing order.\n\n    sorter : Sorter { a | sugar : comparable }\n    sorter =\n      decreasingOrIncreasingBy .sugar\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "defaultCustomizations",
            "comment": " The customizations used in `config` by default.\n",
            "type": "Table.Customizations data msg"
          },
          {
            "name": "floatColumn",
            "comment": "",
            "type": "String -> (data -> Float) -> Table.Column data msg"
          },
          {
            "name": "increasingBy",
            "comment": " Create a sorter that can only display the data in increasing order. If we\nwant a table of people, sorted alphabetically by name, we would say this:\n\n    sorter : Sorter { a | name : comparable }\n    sorter =\n      increasingBy .name\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "increasingOrDecreasingBy",
            "comment": " Sometimes you want to be able to sort data in increasing *or* decreasing\norder. Maybe you have race times for the 100 meter sprint. This function lets\nsort by best time by default, but also see the other order.\n\n    sorter : Sorter { a | time : comparable }\n    sorter =\n      increasingOrDecreasingBy .time\n",
            "type": "(data -> comparable) -> Table.Sorter data"
          },
          {
            "name": "initialSort",
            "comment": " Create a table state. By providing a column name, you determine which\ncolumn should be used for sorting by default. So if you want your table of\nyachts to be sorted by length by default, you might say:\n\n    import Table\n\n    Table.initialSort \"Length\"\n",
            "type": "String -> Table.State"
          },
          {
            "name": "intColumn",
            "comment": "",
            "type": "String -> (data -> Int) -> Table.Column data msg"
          },
          {
            "name": "stringColumn",
            "comment": "",
            "type": "String -> (data -> String) -> Table.Column data msg"
          },
          {
            "name": "unsortable",
            "comment": " A sorter for columns that are unsortable. Maybe you have a column in your\ntable for delete buttons that delete the row. It would not make any sense to\nsort based on that column.\n",
            "type": "Table.Sorter data"
          },
          {
            "name": "veryCustomColumn",
            "comment": " It is *possible* that you want something crazier than `customColumn`. In\nthat unlikely scenario, this function lets you have full control over the\nattributes and children of each `<td>` cell in this column.\n\nSo maybe you want to a dollars column, and the dollar signs should be green.\n\n    import Html exposing (Html, Attribute, span, text)\n    import Html.Attributes exposing (style)\n    import Table\n\n    dollarColumn : String -> (data -> Float) -> Column data msg\n    dollarColumn name toDollars =\n      Table.veryCustomColumn\n        { name = name\n        , viewData = \\data -> viewDollars (toDollars data)\n        , sorter = Table.decreasingBy toDollars\n        }\n\n    viewDollars : Float -> Table.HtmlDetails msg\n    viewDollars dollars =\n      Table.HtmlDetails []\n        [ span [ style [(\"color\",\"green\")] ] [ text \"$\" ]\n        , text (toString (round (dollars / 1000)) ++ \"k\")\n        ]\n",
            "type": "{ name : String , viewData : data -> Table.HtmlDetails msg , sorter : Table.Sorter data } -> Table.Column data msg"
          },
          {
            "name": "view",
            "comment": " Take a list of data and turn it into a table. The `Config` argument is the\nconfiguration for the table. It describes the columns that we want to show. The\n`State` argument describes which column we are sorting by at the moment.\n\n**Note:** The `State` and `List data` should live in your `Model`. The `Config`\nfor the table belongs in your `view` code. I very strongly recommend against\nputting `Config` in your model. Describe any potential table configurations\nstatically, and look for a different library if you need something crazier than\nthat.\n",
            "type": "Table.Config data msg -> Table.State -> List data -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "evancz/focus",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Focus",
        "comment": " Our goal is to update a field deep inside some nested records. For example,\nif we want to add one to `object.physics.velocity.x` or set it to zero, we would\nbe writing code like this:\n\n    update (physics => velocity => x) (\\x -> x + 1) object\n\n    set (physics => velocity => x) 0 object\n\nThis means you could avoid writing record update syntax which would be messier.\n\n**Warning!** It is possible that the concept of a `Focus` is harmful to code\nquality in that it can help you to be lax with abstraction boundaries.\n\nBy making it easy to look deep inside of data structures, it encourages you to\nstop thinking about how to make these substructures modular, perhaps leading\nto messier architecture *and* some extra conceptual complexity. It may also\nmake your code slower by encouraging you to take many passes over data,\ncreating lots of intermediate data structures for no particular reason.\n*Use with these risk in mind!*\n\n# Focus\n@docs Focus\n\n# Get, Set, Update\n@docs get, set, update\n\n# Compose Foci\n@docs (=>)\n\n# Create your own Focus\n@docs create\n",
        "aliases": [],
        "types": [
          {
            "name": "Focus",
            "comment": " A `Focus` lets you focus on a small part of some larger data structure.\nMaybe this means a certain field in a record or a certain element in an array.\nThe focus then lets you `get`, `set`, and `update` this small part of a big\nvalue.\n",
            "args": [
              "big",
              "small"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "=>",
            "comment": " The power of this library comes from the fact that you can compose many\nfoci. This means we can update a field deep inside some nested records. For\nexample, perhaps we want to add one to `object.physics.velocity.x` or set it to\nzero.\n\n    physics  : Focus { record | physics  : a } a\n    velocity : Focus { record | velocity : a } a\n    x        : Focus { record | x        : a } a\n    y        : Focus { record | y        : a } a\n\n    update (physics => velocity => x) (\\x -> x + 1) object\n\n    set (physics => velocity => x) 0 object\n\nThis would be a lot messier with typical record update syntax! This is what\nmakes this library worthwhile, but also what makes it dangerous. You will be\ndoing a lot of silly work if you start writing code like this:\n\n    object\n      |> set (physics => velocity => x) 0\n      |> set (physics => velocity => y) 0\n\nIt is pretty, but you pay for it in performance because you take two passes\nover `object` instead of one. It may be best to do the last step with typical\nrecord updates so that this can be done in one pass.\n",
            "type": "Focus.Focus big medium -> Focus.Focus medium small -> Focus.Focus big small"
          },
          {
            "name": "create",
            "comment": " A `Focus` is a value. It describes a strategy for getting and updating\nthings. This function lets you define a `Focus` yourself by providing a `get`\nfunction and an `update` function.\n",
            "type": "(big -> small) -> ((small -> small) -> big -> big) -> Focus.Focus big small"
          },
          {
            "name": "get",
            "comment": " Get a small part of a big thing.\n\n    x : Focus { record | x:a } a\n\n    get x { x=3, y=4 } == 3\n\nSeems sort of silly given that you can just say `.x` to do the same thing. It\nwill become much more useful when we can begin to compose foci, so keep reading!\n",
            "type": "Focus.Focus big small -> big -> small"
          },
          {
            "name": "set",
            "comment": " Set a small part of a big thing.\n\n    x : Focus { record | x:a } a\n\n    set x 42 { x=3, y=4 } == { x=42, y=4 }\n",
            "type": "Focus.Focus big small -> small -> big -> big"
          },
          {
            "name": "update",
            "comment": " Update a small part of a big thing.\n\n    x : Focus { record | x:a } a\n\n    update x sqrt { x=9, y=10 } == { x=3, y=10 }\n\nThis lets us chain updates without any special record syntax:\n\n    x : Focus { record | x:a } a\n    y : Focus { record | y:a } a\n\n    point\n      |> update x sqrt\n      |> update y sqrt\n\nThe downside of this approach is that this means we take two passes over the\nrecord, whereas normal record syntax would only have required one. It may be\nbest to use a mix `Focus` and typical record updates to minimize traversals.\n",
            "type": "Focus.Focus big small -> (small -> small) -> big -> big"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "evancz/url-parser",
    "version": "1.0.0",
    "docs": [
      {
        "name": "UrlParser",
        "comment": " This library helps you turn URLs into nicely structured data.\n\nIt is designed to be used with `elm-lang/navigation` to help folks create\nsingle-page applications (SPAs) where you manage browser navigation yourself.\n\n# Parsers\n@docs Parser, s, string, int\n\n# Combining Parsers\n@docs (</>), oneOf, format, custom\n\n# Run Parsers\n@docs parse\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Parser",
            "comment": " A `Parser` is a way of turning a URL like `/blog/42/cat-herding-techniques`\ninto structured data.\n\nThe two type variables can be a bit tricky to understand. I think the best way\nto proceed is to just start using it. You can go far if you just assume it will\ndo the intuitive thing.\n\n**Note:** If you *insist* on digging deeper, I recommend figuring out the type\nof `int </> int` based on the type signatures for `int` and `</>`. You may be\nable to just know based on intuition, but instead, you should figure out\nexactly how every type variable gets unified. It is pretty cool! From there,\nmaybe check out the implementation a bit.\n",
            "args": [
              "formatter",
              "result"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "</>",
            "comment": " Combine parsers. It can be used to combine very simple building blocks\nlike this:\n\n    hello : Parser (String -> a) a\n    hello =\n      s \"hello\" </> string\n\nSo we can say hello to whoever we want. It can also be used to put together\narbitrarily complex parsers, so you *could* say something like this too:\n\n    doubleHello : Parser (String -> String -> a) a\n    doubleHello =\n      hello </> hello\n\nThis would match URLs like `/hello/alice/hello/bob`. The point is more that you\ncan build complex URL parsers in submodules and then put them on the end of\nparsers in parent modules.\n",
            "type": "UrlParser.Parser a b -> UrlParser.Parser b c -> UrlParser.Parser a c",
            "associativity": "right",
            "precedence": 8
          },
          {
            "name": "custom",
            "comment": " Create a custom segment parser. The `int` and `string` parsers are actually\ndefined with it like this:\n\n    import String\n\n    string : Parser (String -> a) a\n    string =\n      custom \"STRING\" Ok\n\n    int : Parser (Int -> a) a\n    int =\n      custom \"NUMBER\" String.toInt\n\nThe first argument is to help with error messages. It lets us say something\nlike, &ldquo;Got to the end of the URL but wanted /STRING&rdquo; instead of\nsomething totally nonspecific. The second argument lets you process the URL\nsegment however you want.\n\nAn example usage would be a parser that only accepts segments with a particular\nfile extension. So stuff like this:\n\n    css : Parser (String -> a) a\n    css =\n      custom \"FILE.css\" <| \\str ->\n        if String.endsWith \".css\" str then\n          Ok str\n\n        else\n          Err \"Need something that ends with .css\"\n",
            "type": "String -> (String -> Result.Result String a) -> UrlParser.Parser (a -> output) output"
          },
          {
            "name": "format",
            "comment": " Customize an existing parser. Perhaps you want a parser that matches any\nstring, but gives you the result with all lower-case letters:\n\n    import String\n\n    caseInsensitiveString : Parser (String -> a) a\n    caseInsensitiveString =\n      format String.toLower string\n\n    -- String.toLower : String -> String\n    -- string : Parser (String -> a) a\n\nI recommend working through how the type variables in `format` would get\nunified to get a better idea of things, but an intuition of how to use things\nis probably enough.\n",
            "type": "formatter -> UrlParser.Parser formatter a -> UrlParser.Parser (a -> result) result"
          },
          {
            "name": "int",
            "comment": " A parser that matches any integer. So the following parser will match\nURLs like `/blog/42` where `42` can be replaced by any positive number.\n\n    blog : Parser (Int -> a) a\n    blog =\n      s \"blog\" </> int\n\n**Note:** this parser will only match URLs with exactly two segments. So things\nlike `/blog/42/cat-herding-techniques` would fail. You could use `blog </> string`\nto handle that scenario if you wanted though!\n",
            "type": "UrlParser.Parser (Int -> a) a"
          },
          {
            "name": "oneOf",
            "comment": " Try a bunch of parsers one at a time. This is useful when there is a known\nset of branches that are possible. For example, maybe we have a website that\njust has a blog and a search:\n\n    type DesiredPage = Blog Int | Search String\n\n    desiredPage : Parser (DesiredPage -> a) a\n    desiredPage =\n      oneOf\n        [ format Blog (s \"blog\" </> int)\n        , format Search (s \"search\" </> string)\n        ]\n\nThe `desiredPage` parser will first try to match things like `/blog/42` and if\nthat fails it will try to match things like `/search/badgers`. It fails if none\nof the parsers succeed.\n",
            "type": "List (UrlParser.Parser a b) -> UrlParser.Parser a b"
          },
          {
            "name": "parse",
            "comment": " Actually run a parser. For example, if we want to handle blog posts with\nan ID number and a name, we might write something like this:\n\n    blog : Parser (Int -> String -> a) a\n    blog =\n      s \"blog\" </> int </> string\n\n    result : Result String (Int, String)\n    result =\n      parse (,) blog \"/blog/42/cat-herding-techniques\"\n\n    -- result == OK (42, \"cat-herding-techniques\")\n\nNotice that we use the `(,)` function for building tuples as the first argument\nto `parse`. The `blog` parser requires a formatter of type `(Int -> String -> a)`\nso we need to provide that to actually run things.\n\n**Note:** The error messages are intended to be fairly helpful. They are\nnice for debugging during development, but probably too detailed to show\ndirectly to users.\n",
            "type": "formatter -> UrlParser.Parser formatter a -> String -> Result.Result String a"
          },
          {
            "name": "s",
            "comment": " A parser that matches *exactly* the given string. So the following parser\nwill match the URL `/hello/world` and nothing else:\n\n    helloWorld : Parser a a\n    helloWorld =\n      s \"hello\" </> s \"world\"\n",
            "type": "String -> UrlParser.Parser a a"
          },
          {
            "name": "string",
            "comment": " A parser that matches any string. So the following parser will match\nURLs like `/search/whatever` where `whatever` can be replaced by any string\nyou can imagine.\n\n    search : Parser (String -> a) a\n    search =\n      s \"search\" </> string\n\n**Note:** this parser will only match URLs with exactly two segments. So things\nlike `/search/this/that` would fail. You could use `search </> string` to handle\nthat case if you wanted though!\n",
            "type": "UrlParser.Parser (String -> a) a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "fapian/elm-html-aria",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Html.Attributes.Aria",
        "comment": " Additional attributes for html\n\n# Aria role\n@docs role\n\n# Aria Attributes\n@docs ariaActiveDescendant\n@docs ariaChecked\n@docs ariaDescribedby\n@docs ariaDisabled\n@docs ariaExpanded\n@docs ariaHidden\n@docs ariaLabel\n@docs ariaLabelledby\n@docs ariaLive\n@docs ariaReadonly\n@docs ariaRequired\n@docs ariaSelected\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "ariaActiveDescendant",
            "comment": " Identifies the currently active descendant of a composite widget.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-activedescendant).\n\n    div [ ariaActiveDescendant \"id\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaChecked",
            "comment": " Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-checked).\n\n    div [ ariaChecked \"true\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaDescribedby",
            "comment": " Identifies the element (or elements) that describes the object.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-describedby).\n\n    div [ ariaDescribedby \"id\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaDisabled",
            "comment": " Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-disabled).\n\n    div [ ariaDisabled True ] [ text \"Hello aria!\" ]\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "ariaExpanded",
            "comment": " Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-expanded).\n\n    div [ ariaExpanded \"true\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaHidden",
            "comment": " Indicates that the element and all of its descendants are not visible or perceivable to any user as implemented by the author.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden).\n\n    div [ ariaHidden True ] [ text \"Hello aria!\" ]\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "ariaLabel",
            "comment": " Defines a string value that labels the current element.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-label).\n\n    div [ ariaLabel \"label\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaLabelledby",
            "comment": " Identifies the element (or elements) that labels the current element.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-labelledby).\n\n    div [ ariaLabelledby \"id\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaLive",
            "comment": " Indicates that an element will be updated, and describes the types of updates the user agents,\nassistive technologies, and user can expect from the live region.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-live).\n\n    input [ ariaLive \"assertive\" ] []\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "ariaReadonly",
            "comment": " Indicates that the element is not editable, but is otherwise operable.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-readonly).\n\n    div [ ariaReadonly True ] [ text \"Hello aria!\" ]\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "ariaRequired",
            "comment": " Indicates that user input is required on the element before a form may be submitted.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-required).\n\n    div [ ariaRequired True ] [ text \"Hello aria!\" ]\n",
            "type": "Bool -> Html.Attribute msg"
          },
          {
            "name": "ariaSelected",
            "comment": " Indicates the current \"selected\" state of various widgets.\nSee the [official specs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-selected).\n\n    div [ ariaSelected \"true\" ] [ text \"Hello aria!\" ]\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "role",
            "comment": " An attribute to support the role classification of elements.\nSee the [official specs](https://www.w3.org/TR/role-attribute).\n\n    div [ role \"button\" ] [ text \"Submit\" ]\n",
            "type": "String -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "fauu/elm-selectable-text",
    "version": "2.0.1",
    "docs": [
      {
        "name": "SelectableText",
        "comment": " A selectable text component that renders provided text and lets the \nuser select words using mouse. All the elements of the selection are assigned a \ncustomizable css class. The model contains the selected phrase in form of a\nstring to be used by the parent component.\n\n# Model\n@docs defaultOptions, Model, initialModel\n\n# Messages\n@docs Msg\n\n# View function\n@docs view\n\n# Update function\n@docs update\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The component model. The `selectedPhrase` field contains the selected phrase\nas a string which can be read by the parent component.\n",
            "args": [],
            "type": "{ text : SelectableText.Text , mouseOverWordNo : Maybe.Maybe SelectableText.ElementNo , selecting : Bool , selection : Maybe.Maybe SelectableText.Selection , selectedPhrase : Maybe.Maybe String , options : SelectableText.Options }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " A type representing component messages. The `RenderText` message should be\nused to pass a string to be parsed and rendered by the component from the parent\ncomponent.\n\n\n    message : Msg -> Cmd Msg\n    message msg =\n      Task.perform identity identity (Task.succeed msg)\n\n    -- inside parent's update function\n    RawTextFetched rawText ->\n      model \n        ! [ message\n              <| SelectableTextMsg \n              <| SelectableText.RenderText rawText\n          ] \n\n",
            "args": [],
            "cases": [
              [
                "RenderText",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " Default component options:\n  - **id** = \"text\" - The HTML id attribute for the root tag\n  - **selectedElementClass** = \"selected\" - The CSS class of the selected\n  elements\n  - **placeholderText** = \"\" - A string that will be displayed until a text is\n  provided by the parent using the `RenderText` message\n  - **allowInterparagraphSelection** = True - Whether to allow the selection to\n  span across multiple paragraphs\n  - **maxSelectionLength** = Nothing - Maximal selection length in words\n",
            "type": "SelectableText.Options"
          },
          {
            "name": "initialModel",
            "comment": " Initializes the component. Expects user to provide a `defaultOptions`\nrecord with desired extensions.\n\n    import SelectableText exposing (defaultOptions)\n\n    selectableTextModel = \n      SelectableText.initialModel \n        { defaultOptions \n          | id = \"my-text\"\n          , placeholderText = \"Loading...\"\n          , allowInterparagraphSelection = False\n          }\n  \n",
            "type": "SelectableText.Options -> SelectableText.Model"
          },
          {
            "name": "update",
            "comment": " The selectable text update function.\n",
            "type": "SelectableText.Msg -> SelectableText.Model -> ( SelectableText.Model, Platform.Cmd.Cmd SelectableText.Msg )"
          },
          {
            "name": "view",
            "comment": " The selectable text view. Renders a `div` element containing the text.\n",
            "type": "SelectableText.Model -> Html.Html SelectableText.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "fbonetti/elm-geodesy",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Geodesy",
        "comment": "\n\n# Types\n\n@docs Coordinate, DegreesMinutesSeconds, Unit\n\n# Helpers\n\n@docs decimalDegrees, degreesMinutesSeconds\n\n# Great-circle path (\"as the crow flies\")\n@docs distance, initialBearing, finalBearing, midpoint\n\n# Rhumb line\n@docs rhumbDistance, rhumbBearing, rhumbMidpoint\n\n",
        "aliases": [
          {
            "name": "Coordinate",
            "comment": " Latitude & longitude pair, in decimal degrees\n",
            "args": [],
            "type": "( Float, Float )"
          },
          {
            "name": "DegreesMinutesSeconds",
            "comment": " Representation of degrees in degrees, minutes, and seconds\n",
            "args": [],
            "type": "( Int, Int, Float )"
          }
        ],
        "types": [
          {
            "name": "Unit",
            "comment": " Distance can be returned as kilometers, meters, miles, or feet\n",
            "args": [],
            "cases": [
              [
                "Kilometers",
                []
              ],
              [
                "Meters",
                []
              ],
              [
                "Miles",
                []
              ],
              [
                "Feet",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "decimalDegrees",
            "comment": " Converts degrees, minutes, and seconds into decimal degrees\n",
            "type": "Geodesy.DegreesMinutesSeconds -> Float"
          },
          {
            "name": "degreesMinutesSeconds",
            "comment": " Converts decimal degrees into degrees, minutes, and seconds\n",
            "type": "Float -> Geodesy.DegreesMinutesSeconds"
          },
          {
            "name": "distance",
            "comment": " Great-circle distance between two points on a sphere\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Unit -> Float"
          },
          {
            "name": "finalBearing",
            "comment": " The final compass bearing of a great-circle path\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Float"
          },
          {
            "name": "initialBearing",
            "comment": " The initial compass bearing of a great-circle path\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Float"
          },
          {
            "name": "midpoint",
            "comment": " Half-way point along a great circle path\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Coordinate"
          },
          {
            "name": "rhumbBearing",
            "comment": " Constant compass bearing needed to traverse a rhumb line\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Float"
          },
          {
            "name": "rhumbDistance",
            "comment": " Rhumb line distance between two points\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Unit -> Float"
          },
          {
            "name": "rhumbMidpoint",
            "comment": " Half-way point along a rhumb line\n",
            "type": "Geodesy.Coordinate -> Geodesy.Coordinate -> Geodesy.Coordinate"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "fbonetti/elm-phoenix-socket",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Phoenix.Socket",
        "comment": "\n\n# Socket\n@docs Socket, Msg, init, withDebug, withoutHeartbeat, withHeartbeatInterval, update, listen\n\n# Channels\n@docs join, leave\n\n# Events\n@docs on, off\n\n# Sending messages\n@docs push\n\n",
        "aliases": [
          {
            "name": "Socket",
            "comment": " Stores channels, event handlers, and configuration options\n",
            "args": [
              "msg"
            ],
            "type": "{ path : String , debug : Bool , channels : Dict.Dict String (Phoenix.Channel.Channel msg) , events : Dict.Dict ( String, String ) (Json.Encode.Value -> msg) , pushes : Dict.Dict Int (Phoenix.Push.Push msg) , ref : Int , heartbeatIntervalSeconds : Float , withoutHeartbeat : Bool }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " ",
            "args": [
              "msg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initializes a `Socket` with the given path\n",
            "type": "String -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "join",
            "comment": " Joins a channel\n\n    payload = Json.Encode.object [ (\"user_id\", Json.Encode.string \"123\") ]\n    channel = Channel.init \"rooms:lobby\" |> Channel.withPayload payload\n    (socket', cmd) = join channel socket\n\n",
            "type": "Phoenix.Channel.Channel msg -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "leave",
            "comment": " Leaves a channel\n\n    (socket', cmd) = leave \"rooms:lobby\" socket\n\n",
            "type": "String -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "listen",
            "comment": " Listens for phoenix messages and converts them into type `msg`\n",
            "type": "Phoenix.Socket.Socket msg -> (Phoenix.Socket.Msg msg -> msg) -> Platform.Sub.Sub msg"
          },
          {
            "name": "off",
            "comment": " Removes an event handler\n\n    socket\n      |> off \"new:msg\" \"rooms:lobby\"\n      |> off \"alert:msg\" \"rooms:lobby\"\n\n",
            "type": "String -> String -> Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "on",
            "comment": " Registers an event handler\n\n    socket\n      |> on \"new:msg\" \"rooms:lobby\" ReceiveChatMessage\n      |> on \"alert:msg\" \"rooms:lobby\" ReceiveAlertMessage\n\n",
            "type": "String -> String -> (Json.Encode.Value -> msg) -> Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "push",
            "comment": " Pushes a message\n\n    push' = Phoenix.Push.init \"new:msg\" \"rooms:lobby\"\n    (socket', cmd) = push push' socket\n\n",
            "type": "Phoenix.Push.Push msg -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "update",
            "comment": " ",
            "type": "Phoenix.Socket.Msg msg -> Phoenix.Socket.Socket msg -> ( Phoenix.Socket.Socket msg , Platform.Cmd.Cmd (Phoenix.Socket.Msg msg) )"
          },
          {
            "name": "withDebug",
            "comment": " When enabled, prints all incoming Phoenix messages to the console\n",
            "type": "Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "withHeartbeatInterval",
            "comment": " Sends the heartbeat every interval in seconds\n\n    Default is 30 seconds\n",
            "type": "Float -> Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          },
          {
            "name": "withoutHeartbeat",
            "comment": " Turns off the heartbeat\n",
            "type": "Phoenix.Socket.Socket msg -> Phoenix.Socket.Socket msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Phoenix.Push",
        "comment": "\n\n@docs Push, init, withPayload, onError, onOk\n\n",
        "aliases": [
          {
            "name": "Push",
            "comment": " Represents a message being pushed to the server\n",
            "args": [
              "msg"
            ],
            "type": "{ event : String , channel : String , payload : Json.Encode.Value , onOk : Maybe.Maybe (Json.Encode.Value -> msg) , onError : Maybe.Maybe (Json.Encode.Value -> msg) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "init",
            "comment": " Initializes a push with the given event and channel\n\n    init \"new:msg\" \"rooms:lobby\"\n\n",
            "type": "String -> String -> Phoenix.Push.Push msg"
          },
          {
            "name": "onError",
            "comment": " Attaches an error handler\n\n    init \"new:msg\" \"rooms:lobby\"\n      |> onError HandlePushError\n\n",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Push.Push msg -> Phoenix.Push.Push msg"
          },
          {
            "name": "onOk",
            "comment": " Attaches a success handler\n\n    init \"new:msg\" \"rooms:lobby\"\n      |> onOk HandlePushOk\n\n",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Push.Push msg -> Phoenix.Push.Push msg"
          },
          {
            "name": "withPayload",
            "comment": " Attaches a payload\n\n    payload = JE.object [ (\"body\", JE.string \"Hello World!\") ]\n    init \"new:msg\" \"rooms:lobby\"\n      |> withPayload payload\n\n",
            "type": "Json.Encode.Value -> Phoenix.Push.Push msg -> Phoenix.Push.Push msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Phoenix.Channel",
        "comment": "\n\n@docs Channel, State, init, withPayload, onError, onClose, onJoin, onJoinError, setState\n\n",
        "aliases": [
          {
            "name": "Channel",
            "comment": " Represents a phoenix channel\n",
            "args": [
              "msg"
            ],
            "type": "{ name : String , payload : Json.Encode.Value , state : Phoenix.Channel.State , onClose : Maybe.Maybe (Json.Encode.Value -> msg) , onError : Maybe.Maybe (Json.Encode.Value -> msg) , onJoin : Maybe.Maybe (Json.Encode.Value -> msg) , onJoinError : Maybe.Maybe (Json.Encode.Value -> msg) , joinRef : Int , leaveRef : Int }"
          }
        ],
        "types": [
          {
            "name": "State",
            "comment": " All possible states a channel can be in\n",
            "args": [],
            "cases": [
              [
                "Closed",
                []
              ],
              [
                "Errored",
                []
              ],
              [
                "Joined",
                []
              ],
              [
                "Joining",
                []
              ],
              [
                "Leaving",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initializes a channel\n\n    init \"rooms:lobby\"\n\n",
            "type": "String -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onClose",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onError",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onJoin",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "onJoinError",
            "comment": " ",
            "type": "(Json.Encode.Value -> msg) -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "setState",
            "comment": " Sets the state of a channel. Internal use only.\n",
            "type": "Phoenix.Channel.State -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          },
          {
            "name": "withPayload",
            "comment": " Attaches a payload that's used for authentication\n\n    payload = JE.object [ (\"user_id\", JE.string \"123\") ]\n    init \"rooms:lobby\"\n      |> withPayload payload\n\n",
            "type": "Json.Encode.Value -> Phoenix.Channel.Channel msg -> Phoenix.Channel.Channel msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "folkertdev/elm-deque",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Deque",
        "comment": " A Deque (double-ended queue) in Elm.\n\nA deque is a data type for which elements can be efficiently added or removed from either the front or the back.\n\nInternally, this is a head-tail linked list, modeled after this [deque in Haskell](https://hackage.haskell.org/package/deque-0.1.12/docs/Data-Dequeue.html) which\nin turn is based on Chris Okasaki's Purely Functional Data Structures. A head-tail linked list is based on two lists: one for the head and one for the tail.\nThis means that pop and push on either side are operations on the front portion of an elm list, which is very efficient (`O(n)`).\n\nThe deque rebalances (moves elements from the front to the rear or vice versa) when either one\nis 4 times as large as the other. This is a costly operation and therefore used as little as possible.\n\nIt is possible to set a maximum number of elements for the deque. The default is an unlimited\nsize. When an item is pushed onto a full deque, an item is popped (and discarded) at the other end.\n\n\n#Type and Constructors\n@docs Deque\n\n#Build\n@docs empty, singleton, pushFront, pushBack\n\n#Lists\n@docs fromList, toList\n\n#Bound\n@docs getMaxSize, setMaxSize\n\n#Query\n@docs isEmpty, member, first, last, popFront, popBack, takeFront, takeBack\n\n#Transform\n\nSimple transform functions. To use more complex functions, like `map2` or `concat`, just\nconvert the deque to a list, apply the operation and convert back.\n\n@docs map, filter, foldl, foldr, partition\n\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Deque",
            "comment": " The deque datatype\n\nDeque equality with `(==)` is unreliable (equivalent deques can have a different distribution of elements between the back\nand the front) and should not be used.\n\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Create an empty deque.\n",
            "type": "Deque.Deque a"
          },
          {
            "name": "filter",
            "comment": " Keep an element when it satisfies a predicate.\n",
            "type": "(a -> Bool) -> Deque.Deque a -> Deque.Deque a"
          },
          {
            "name": "first",
            "comment": " Extract the first element of a deque\n",
            "type": "Deque.Deque a -> Maybe.Maybe a"
          },
          {
            "name": "foldl",
            "comment": " Fold over the deque from left to right (highest priority to lowest priority).\n",
            "type": "(a -> b -> b) -> b -> Deque.Deque a -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the deque from right to left (lowest priority to highest priority).\n",
            "type": "(a -> b -> b) -> b -> Deque.Deque a -> b"
          },
          {
            "name": "fromList",
            "comment": " Create a deque from a list.\n",
            "type": "List a -> Deque.Deque a"
          },
          {
            "name": "getMaxSize",
            "comment": " Get the maximum number of elements this deque can hold. A value of Nothing\nmeans the deque can hold an unlimited number of items (which is the default).\n",
            "type": "Deque.Deque a -> Maybe.Maybe Int"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a deque is empty.\n",
            "type": "Deque.Deque a -> Bool"
          },
          {
            "name": "last",
            "comment": " Extract the last element of a deque.\n",
            "type": "Deque.Deque a -> Maybe.Maybe a"
          },
          {
            "name": "map",
            "comment": " Apply a function to all elements in a deque.\n\n",
            "type": "(a -> b) -> Deque.Deque a -> Deque.Deque b"
          },
          {
            "name": "member",
            "comment": " Figure out whether a deque contains a value.\n",
            "type": "a -> Deque.Deque a -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a deque according to a predicate. The first deque contains\nall elements that satisfy the predicate, and the second contains the rest.\n",
            "type": "(a -> Bool) -> Deque.Deque a -> ( Deque.Deque a, Deque.Deque a )"
          },
          {
            "name": "popBack",
            "comment": " Gives Maybe the last element, and the deque without the last element.\nIf there are no elements, the empty deque is returned.\n",
            "type": "Deque.Deque a -> ( Maybe.Maybe a, Deque.Deque a )"
          },
          {
            "name": "popFront",
            "comment": " Gives Maybe the first element, and the deque without the first element.\nIf there are no elements, the empty deque is returned.\n",
            "type": "Deque.Deque a -> ( Maybe.Maybe a, Deque.Deque a )"
          },
          {
            "name": "pushBack",
            "comment": " Add an element to the back of the deque.\n",
            "type": "a -> Deque.Deque a -> Deque.Deque a"
          },
          {
            "name": "pushFront",
            "comment": " Add an element to the front of the deque.\n",
            "type": "a -> Deque.Deque a -> Deque.Deque a"
          },
          {
            "name": "setMaxSize",
            "comment": " Sets a bound to the number of elements the deque can hold.\na maxSize of Nothing means the deque's size is unbound,\nJust a value bounds the deque's size at that value.\n\nIf the deque is larger than the bound, items are dropped from the back.\n\n    Deque.fromList [0..9]\n        |> setMaxSize (Just 5)\n        -- toList would give [ 0, 1, 2, 3, 4 ]\n        |> pushFront 42\n        -- toList would give [ 42, 0, 1, 2, 3 ]\n        |> pushBack -1\n        -- toList would give [ 0, 1, 2, 3, -1 ]\n        |> setMaxSize Nothing\n        |> pushFront 73\n        -- toList would give [ 73, 0, 1, 2, 3 -1 ]\n\n",
            "type": "Maybe.Maybe Int -> Deque.Deque a -> Deque.Deque a"
          },
          {
            "name": "singleton",
            "comment": " Create a deque with one element.\n",
            "type": "a -> Deque.Deque a"
          },
          {
            "name": "takeBack",
            "comment": " Take the last `n` members of a deque.\n\n    Deque.fromList [2..10]\n        |> Deque.takeBack 3\n        -- == [ 10, 9, 8 ]\n",
            "type": "Int -> Deque.Deque a -> List a"
          },
          {
            "name": "takeFront",
            "comment": " Take the first `n` members of a deque.\n\n    Deque.fromList [2..10]\n        |> Deque.takeBack 3\n        -- == [ 2, 3, 4 ]\n",
            "type": "Int -> Deque.Deque a -> List a"
          },
          {
            "name": "toList",
            "comment": " Convert a deque to a list.\n",
            "type": "Deque.Deque a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "folkertdev/elm-state",
    "version": "1.0.0",
    "docs": [
      {
        "name": "State",
        "comment": " This library provides ways to compose functions of the type\n`s -> (a, s)`. This composition threads state through a computation\n\nFrom time to time, you'll see a pattern like this in your code\n\n```elm\n(newValue,     newState)     = f state\n(newerValue,   newerState)   = g newValue   newState\n(newererValue, newererState) = h newerValue newerState\n```\n\nThis pattern is ugly and error-prone (because of typo's, for instance).\nIt can be abstracted by creating a function that composes `f` and `g` (\nthe output of `f` is the input to `g`).\n\n```elm\nf :      s -> (a, s)\ng : a -> s -> (a, s)\n```\n\nThis library implements this composition and provides a bunch of helper functions for\nworking with State. For a more in-depth explanation of how the implementation works,\nsee the [derivation](https://github.com/folkertdev/elm-state#derivation). For more detailed, higher\nlevel documentation, please see the [readme](https://github.com/folkertdev/elm-state) and the [examples](https://github.com/folkertdev/elm-state/tree/master/examples)\n\n#Type and Constructors\n@docs State, state, embed, advance\n\n#Mapping\n@docs map, map2, map3\n\n#Chaining\n@docs andMap, andThen, join\n\n#Changing State\n@docs get, put, modify\n\n#Running State\n@docs run, finalValue, finalState\n\n#Generalized list functions\n@docs traverse, combine, filterM, foldlM\n\n#Notes for the Haskellers/curious\n\nThe `State` type of this package is the `State Monad`. This wording is a little weird, it'd be better to say that\n`State` is a `Monad`.\n\nMonad is a concept from a branch of mathematics called category theory. In short, it is a type on which\n`andThen` is defined (examples in core are Random, Maybe, Result and Decoder). Many useful types are monads,\nand therefore being familiar with the concept can be very helpful in functional programming.\n\nMonads are also called 'computation builders': They allow for an elegant way of chaining computations with `andThen`\n (see the [README](https://github.com/folkertdev/elm-state#structuring-computation-with-andthen)).\nElm wants to be a simple, easy to learn language, and therefore monads aren't really talked about (yet). I've tried to limit the jargon in the documentation to a minimum.\nIf anything in the docs here or in the repository is still unclear, please open an issue [on the repo](https://github.com/folkertdev/elm-state/issues).\n",
        "aliases": [],
        "types": [
          {
            "name": "State",
            "comment": " Type that represents state.\n\nNote that `State` wraps a function, not a concrete value.\n",
            "args": [
              "state",
              "value"
            ],
            "cases": [
              [
                "State",
                [
                  "state -> ( value, state )"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "advance",
            "comment": " Wrap a function as a State. Remember that `State` is just a wrapper around\na function of type `s -> ( a, s )`.\n",
            "type": "(s -> ( a, s )) -> State.State s a"
          },
          {
            "name": "andMap",
            "comment": " Apply a function wrapped in a state to a value wrapped in a state.\nThis is very useful for applying stateful arguments one by one.\n\nThe use of `andMap` can be substituted by using mapN. The following\nexpressions are equivalent.\n\n    f `map` arg1 `andMap` arg2 == State.map2 f arg1 args\n\n\nIn general, using the `mapN` functions is preferable. The `mapN` functions can\nbe defined up to an arbitrary `n` using `andMap`.\n\n    f `map` arg1 `andMap` arg2 ... `andMap` argN\n        == State.mapN f arg1 arg2 ... argN\n",
            "type": "State.State s (a -> b) -> State.State s a -> State.State s b"
          },
          {
            "name": "andThen",
            "comment": " Chain two operations with state.\n\nThe [readme](https://github.com/folkertdev/elm-state) has a section on [structuring computation\nwith `andThen`](https://github.com/folkertdev/elm-state#structuring-computation-with-andthen).\n",
            "type": "State.State s a -> (a -> State.State s b) -> State.State s b"
          },
          {
            "name": "combine",
            "comment": " Combine a list of State's into one by composition.\nThe resulting value is a list of the results of subcomputations.\n",
            "type": "List (State.State s a) -> State.State s (List a)"
          },
          {
            "name": "embed",
            "comment": " Embed a function into State. The function is applied to the state, the result\nwill become the value.\n\nIt is implemented as:\n\n    embed : (a -> b) -> State a b\n    embed f =\n        State (\\s -> ( f s, s ))\n\nThis function can be extended as follows:\n\n    embed2 : (a -> b -> c) -> a -> State b c\n    embed2 f arg1 =\n        embed (f arg1)\n",
            "type": "(a -> b) -> State.State a b"
          },
          {
            "name": "filterM",
            "comment": " Generalize `List.filter` to work on `State`. Composes only the states that satisfy the predicate.\n\n    like : String -> String\n    like subject =\n        \"I like \" ++ subject ++ \"s\"\n\n    rodents =\n        [ \"hamster\", \"rabbit\", \"guinea pig\" ]\n\n    result =\n        filterM (State.embed << List.member) rodents\n            |> State.map (List.map like)\n            |> State.map (String.join \" and \")\n            |> State.run [ \"cat\", \"dog\", \"hamster\" ]\n            -- ==  ([\"I like hamsters\"], [\"cat\", \"dog\", \"hamster\"])\n\n\n",
            "type": "(a -> State.State s Bool) -> List a -> State.State s (List a)"
          },
          {
            "name": "finalState",
            "comment": " Thread the state through a computation,\nand return only the final state\n\n    primesUpTo : Int -> Array Int\n    primesUpTo n =\n        let\n            initialState =\n                Array.repeat n True\n                    |> Array.set 0 False\n                    |> Array.set 1 False\n        in\n            recurse 2 cycle\n                |> State.finalState initialState\n                |> Array.indexedMap (,)\n                |> Array.filter (\\( i, v ) -> v == True)\n                |> Array.map fst\n\nSee [SieveOfErastosthenes.elm](https://github.com/folkertdev/elm-state/blob/master/examples/SieveOfEratosthenes.elm) for the full example.\n",
            "type": "s -> State.State s a -> s"
          },
          {
            "name": "finalValue",
            "comment": " Thread the state through a computation,\nand return only the computed value\n\n    fibs : List Int -> List Int\n    fibs =\n        let\n            initialState =\n                Dict.fromList [ ( 0, 1 ), ( 1, 1 ) ]\n        in\n            State.finalValue initialState << fibsHelper\n\n    -- fibsHelper : List Int -> State (Dict Int Int) (List Int)\n\nSee [Fibonacci.elm](https://github.com/folkertdev/elm-state/blob/master/examples/Fibonacci.elm) for the full example.\n",
            "type": "s -> State.State s a -> a"
          },
          {
            "name": "foldlM",
            "comment": " Compose a list of updated states into one. Also called `foldM`.\n",
            "type": "(b -> a -> State.State s b) -> b -> List a -> State.State s b"
          },
          {
            "name": "get",
            "comment": " Get the current state. Typically the state is\nmodified somehow and then put back with put.\n",
            "type": "State.State s s"
          },
          {
            "name": "join",
            "comment": " Discard a level of state.\n",
            "type": "State.State s (State.State s a) -> State.State s a"
          },
          {
            "name": "map",
            "comment": " Apply a function to the value that the state holds\n",
            "type": "(a -> b) -> State.State s a -> State.State s b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to the value of two states. The newest state will be kept\n",
            "type": "(a -> b -> c) -> State.State s a -> State.State s b -> State.State s c"
          },
          {
            "name": "map3",
            "comment": " Apply a function to the value of three states. The newest state will be kept\n\nThe definition of map3 is in terms of andMap, which can be used to create\nmap4, map5 ect.\n\n```\nmap3\n    : (a -> b -> c -> d)\n    -> State s a\n    -> State s b\n    -> State s c\n    -> State s d\nmap3 f step1 step2 step3 =\n    f `map` step1 `andMap` step2 `andMap` step3\n```\n",
            "type": "(a -> b -> c -> d) -> State.State s a -> State.State s b -> State.State s c -> State.State s d"
          },
          {
            "name": "modify",
            "comment": " Modify the state. This is a combination of set and put\n\nAn example using `State.get` and `State.modify`:\n\n    terminator : Int -> State (Dict Int Int) Int\n    terminator n =\n        if n == 1 || n == 89 then\n            state n\n        else\n            let\n                updateWithValue : Int -> State (Dict Int Int) Int\n                updateWithValue value =\n                    modify (Dict.insert n value)\n                        |> State.map (\\_ -> value)\n\n                updateIfNeeded\n                    :  Dict Int Int\n                    -> State (Dict Int Int) Int\n                updateIfNeeded dict =\n                    case Dict.get n dict of\n                        Just v ->\n                            state v\n\n                        Nothing ->\n                            terminator (step n)\n                                `andThen` updateWithValue\n            in\n                get `andThen` updateIfNeeded\n",
            "type": "(s -> s) -> State.State s ()"
          },
          {
            "name": "put",
            "comment": " Replace the current state with a new one.\n",
            "type": "s -> State.State s ()"
          },
          {
            "name": "run",
            "comment": " Thread the state through a computation,\nand return both the final state and the computed value\n\nNote for Haskellers: the argument order is swapped. This is more\nnatural in elm because code is often structured left to right using `(|>)`.\n",
            "type": "s -> State.State s a -> ( a, s )"
          },
          {
            "name": "state",
            "comment": " Create a new State from a value of any type.\n",
            "type": "value -> State.State state value"
          },
          {
            "name": "traverse",
            "comment": " Generalize `List.map` to work with `State`.\n\nWhen you have a function the works on a single element,\n\n    mark : Int -> State (Array Bool) ()\n    mark index =\n        State.modify (Array.set index False)\n\ntraverse can be used to let it work on a list of elements,\ntaking care of threading the state through.\n\n    markMany : List Int -> State (Array Bool) (List ())\n    markMany = State.traverse mark\n\nThis function is also called `mapM`.\n",
            "type": "(a -> State.State s b) -> List a -> State.State s (List b)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "folkertdev/outmessage",
    "version": "1.0.2",
    "docs": [
      {
        "name": "OutMessage",
        "comment": "\n\n**Note: **  This library is opinionated. The usage of an OutMsg is a technique to extend The Elm Architecture (TEA) to support\nchild-parent communication. The [README](https://github.com/folkertdev/outmessage/blob/master/README.md) covers the design.\n\nThe OutMsg pattern has two components:\n\n* OutMsg, a user-defined type (just like Model or Msg) with the specific purpose of notifying a parent component.\n* `interpretOutMsg`, a function that converts OutMsg values into side-effects (commands and changes to the model)\n\nOutMsg values can be captured in the parent's update function, and handled there by `interpretOutMsg`.\nThe basic pattern can be extended to return multiple OutMsg using List or to optionally return no OutMsg using Maybe.\n\n#Evaluators\n@docs evaluate, evaluateMaybe, evaluateList, evaluateResult\n\n#Mapping\n@docs mapComponent, mapCmd, mapOutMsg\n\n#Helpers\n@docs toNested, fromNested\n\n#Internals\n\nInternal functions that can be used to create custom evaluators.\n\nAn evaluator has three basic components:\n\n* **A state creator**, often using `OutMessage.wrap`.\n* **A state modifier**, any function from the State package (see the use of State.traverse in evaluateList).\n* **A state evaluator** that runs the state and creates a 'vanilla' elm value.\n\nThis package uses the [State](http://package.elm-lang.org/packages/folkertdev/elm-state/1.0.0/) package for threading the model through a series of\nupdates and accumulating commands.\n\n@docs wrap, run\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "evaluate",
            "comment": " Turn an `OutMsg` value into commands and model changes.\n\nThe arguments are:\n* `interpretOutMsg`, a user-defined function that turns OutMsg values into\n    model changes and effects.\n* a tuple containing the model (updated with the child component),\ncommands (of the parent's Msg type) and an OutMsg. This package exposes\nhelpers to construct this tuple from the value that a child update function returns.\n\n\nExample usage:\n```elm\n-- in update : Msg -> Model -> (Model, Cmd Msg)\n-- assuming interpretOutMsg : OutMsg -> Model -> (Model, Cmd Msg)\n-- ChildComponentModule.update\n--       : ChildMsg\n--       -> ChildModel -> (ChildModel, Cmd ChildMsg, OutMsg)\nChildComponentMessageWrapper childMsg ->\n    ChildComponentModule.update childMsg model.child\n        -- update the model with the new child component\n        |> OutMessage.mapComponent\n            (\\newChild -> { model | child = newChild }\n        -- convert child cmd to parent cmd\n        |> OutMessage.mapCmd ChildComponentMessageWrapper\n        -- apply outmsg changes\n        |> OutMessage.evaluate interpretOutMsg\n```\n",
            "type": "(outMsg -> model -> ( model, Platform.Cmd.Cmd msg )) -> ( model, Platform.Cmd.Cmd msg, outMsg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "evaluateList",
            "comment": " Turn a `List OutMsg` into effects and model changes.\n\nTakes care of threading the state. When interpreting an OutMsg changes the model,\nthe updated model will be used for subsequent interpretations of OutMsgs. Cmds are\naccumulated and batched.\n",
            "type": "(outMsg -> model -> ( model, Platform.Cmd.Cmd msg )) -> ( model, Platform.Cmd.Cmd msg, List outMsg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "evaluateMaybe",
            "comment": " Turn a `Maybe OutMsg` into effects and model changes.\n\nHas a third argument for a default command that is used when OutMsg is Nothing.\n",
            "type": "(outMsg -> model -> ( model, Platform.Cmd.Cmd msg )) -> Platform.Cmd.Cmd msg -> ( model, Platform.Cmd.Cmd msg, Maybe.Maybe outMsg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "evaluateResult",
            "comment": " Turn a `Result error OutMsg` into effects and model changes\n\nHas a third argument for a function that turns errors into a command that is used when\nOutMsg is Err error.\n",
            "type": "(outMsg -> model -> ( model, Platform.Cmd.Cmd msg )) -> (error -> Platform.Cmd.Cmd msg) -> ( model, Platform.Cmd.Cmd msg, Result.Result error outMsg ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "fromNested",
            "comment": " Join the component, command and outmessage into a flat tuple.\n",
            "type": "( ( a, b ), c ) -> ( a, b, c )"
          },
          {
            "name": "mapCmd",
            "comment": " Apply a function over the Msg from the child.\n",
            "type": "(childmsg -> parentmsg) -> ( a, Platform.Cmd.Cmd childmsg, c ) -> ( a, Platform.Cmd.Cmd parentmsg, c )"
          },
          {
            "name": "mapComponent",
            "comment": " Apply a function over the updated child component.\n",
            "type": "(childComponent -> a) -> ( childComponent, b, c ) -> ( a, b, c )"
          },
          {
            "name": "mapOutMsg",
            "comment": " Apply a function over the child's OutMsg.\n",
            "type": "(outMsg -> c) -> ( a, b, outMsg ) -> ( a, b, c )"
          },
          {
            "name": "run",
            "comment": " Evaluate a `State model (Cmd msg)` given a model, and commands to prepend.\n\n    wrap (interpretOutMsg) myOutMsg\n        |> run Cmd.none myModel\n",
            "type": "Platform.Cmd.Cmd msg -> model -> State.State model (Platform.Cmd.Cmd msg) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "toNested",
            "comment": " Helper to split the OutMsg from the normal type that `update` has.\n\nThe functions `fst` and `snd` can now be used, which can be handy.\n",
            "type": "( a, b, c ) -> ( ( a, b ), c )"
          },
          {
            "name": "wrap",
            "comment": " Embed a function into [State](http://package.elm-lang.org/packages/folkertdev/elm-state/1.0.0/)\n\n",
            "type": "(outmsg -> model -> ( model, Platform.Cmd.Cmd msg )) -> outmsg -> State.State model (Platform.Cmd.Cmd msg)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "fredcy/elm-debouncer",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Debounce",
        "comment": "\n\nThis provides a component that can \"debounce\" a changing value: monitor a\ntime-varying sequence of values and output the latest value every time there is\nno further change for some minimum interval.\n\nThis implementation attempts to minimize the number of `update` calls by using\n`Process.sleep` to manage the settling time (rather than recalculating elapsed\ninterval on every fine-grained tick). An added tuple element in the `update`\nfunction's return value provides the notification to the parent of the settled\nvalue. It's also possible to poll the settled value.\n\n# Types\n@docs Model, Msg\n\n# Update\n@docs init, update\n\n# Read\n@docs settled\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Debouncer model. Each instance handles a single time-varying sequence of the\nsame type (the `datatype`).\n",
            "args": [
              "datatype"
            ],
            "type": "{ data : datatype , settled : datatype , sleepCount : Int , settleTime : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Use the `Change` message to pass a new value to debouncer.\n",
            "args": [
              "datatype"
            ],
            "cases": [
              [
                "Change",
                [
                  "datatype"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initialize the debouncer with the time to wait for changing values to settle\nand the initial settled value.\n",
            "type": "Time.Time -> datatype -> Debounce.Model datatype"
          },
          {
            "name": "settled",
            "comment": " Access the settled value.\n",
            "type": "Debounce.Model datatype -> datatype"
          },
          {
            "name": "update",
            "comment": " Update the debouncer as a typical TEA component. The return value adds a\nfinal tuple element that is `Nothing` while the value is still changing and\n`Just x` when the value has settled to `x`.\n",
            "type": "Debounce.Msg datatype -> Debounce.Model datatype -> ( Debounce.Model datatype , Platform.Cmd.Cmd (Debounce.Msg datatype) , Maybe.Maybe datatype )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "fredcy/elm-defer-command",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Defer",
        "comment": " Defer one or more commands to run after the browser render-loop has run at\nleast once.\n\nThis is useful such as when setting focus on a newly-created element as we can\nbe sure that the element is in the actual DOM and and be manipulated via port\ncommands.\n\n# Wiring\n@docs Model, Msg, init, update, subscriptions\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Holds commands to be deferred, if any.\n",
            "args": [],
            "type": "List (Platform.Cmd.Cmd Defer.Msg)"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " The `AddCmd` message is used by the parent module to add a command to be\ndeferred.\n",
            "args": [],
            "cases": [
              [
                "AddCmd",
                [
                  "Platform.Cmd.Cmd Defer.Msg"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Initialize this component with a list of commands.\n",
            "type": "List (Platform.Cmd.Cmd Defer.Msg) -> Defer.Model"
          },
          {
            "name": "subscriptions",
            "comment": " Subscriptions used to manage deferred commands. Add this to the parent\nprogram's subscriptions.\n",
            "type": "Defer.Model -> Platform.Sub.Sub Defer.Msg"
          },
          {
            "name": "update",
            "comment": " Update the component model.\n",
            "type": "Defer.Msg -> Defer.Model -> ( Defer.Model, Platform.Cmd.Cmd Defer.Msg )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "fredcy/elm-parseint",
    "version": "1.3.0",
    "docs": [
      {
        "name": "ParseInt",
        "comment": " Convert String value to Int, or Int to String, with given radix.\n\n# Functions\n@docs parseInt, parseIntOct, parseIntHex, parseIntRadix, toRadix, toRadix', toOct, toHex, intFromChar, charFromInt\n\n# Errors\n@docs Error\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " Possible Result.Err returns from these functions.\n",
            "args": [],
            "cases": [
              [
                "InvalidChar",
                [
                  "Char"
                ]
              ],
              [
                "OutOfRange",
                [
                  "Char"
                ]
              ],
              [
                "InvalidRadix",
                [
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "charFromInt",
            "comment": " Convert Int to corresponding Char representing it as a digit. Values from\n10..15 are represented as upper-case 'A'..'F'. Values 16 and above extend the\nhexadecimal characters in the natural way. This function assumes that the input\nvalue is in the range 0 .. 36.\n",
            "type": "Int -> Char"
          },
          {
            "name": "intFromChar",
            "comment": " Convert an alphanumeric character to an int value as a \"digit\", validating\nagainst the given radix. Alphabetic characters past \"F\" are extended in the\nnatural way: 'G' == 16, 'H' == 17, etc. Upper and lower case are treated the\nsame. Passing a non-alphanumeric character results in the `InvalidChar`\nerror. If the resulting value would be greater than the given radix, an\n`OutOfRange` error results instead.\n",
            "type": "Int -> Char -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseInt",
            "comment": " Convert String to Int assuming base 10.\n\n    parseInt \"314159\" == Ok 314159\n    parseInt \"foo\" = Err (OutOfRange 'o')\n\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntHex",
            "comment": " Convert String to Int assuming base 16 (hexadecimal). No leading characters\nare expected; input starting with \"0x\" (or any other out of range character)\nwill cause an `Err` return.\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntOct",
            "comment": " Convert String to Int assuming base 8 (octal). No leading '0' is required.\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntRadix",
            "comment": " Convert String to Int assuming given radix. Radix can be any of\n2..36. Leading zeroes are ignored. Valid characters are the alphanumerics: those\nin the ASCII range [0-9a-zA-Z]. Case does not matter. For radixes beyond 16 the\nnormal [A-F] range for hexadecimal is extended in the natural way. Any invalid\ncharacter results in a `Err` return. Any valid character outside of the range\ndefined by the radix also results in an `Err`. In particular, any initial '-' or\n' ' (space) is an error. An `Ok` return means that the entire input string was\nconsumed. The empty string results in `Ok 0`\n\n    parseIntRadix 16 \"DEADBEEF\" = Ok 3735928559\n",
            "type": "Int -> String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "toHex",
            "comment": " Convert Int to hexadecimal String.\n",
            "type": "Int -> String"
          },
          {
            "name": "toOct",
            "comment": " Convert Int to octal String.\n",
            "type": "Int -> String"
          },
          {
            "name": "toRadix",
            "comment": " Convert Int to String assuming given radix. Radix values from 2..36 are\nallowed; others result in an `Err InvalidRadix`. Negative numbers get an initial\n'-'.\n\n    toRadix 16 1234 == Ok \"4D2\"\n    toRadix 8 -99 == Ok \"-143\"\n",
            "type": "Int -> Int -> Result.Result ParseInt.Error String"
          },
          {
            "name": "toRadix'",
            "comment": " Convert Int to String assuming given radix. Radix value must be in 2..36\n(not checked, so it can crash).\n\n    toRadix' 16 3735928559 == \"DEADBEEF\"\n    toRadix' 37 36 --> crash\n",
            "type": "Int -> Int -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "garetht/elm-dynamic-style",
    "version": "2.0.0",
    "docs": [
      {
        "name": "DynamicStyle",
        "comment": "\n# Library for simple, dynamic style effects\n\n@docs hover, hover', pressure, pressure', focus, focus', cssStateEffect, CSSKey, CSSValue, JSEventAttribute\n\nThe goal of this library is make locally stateful, declarative CSS effects\n(e.g., :hover, :focus, etc.) as easy in Elm as they are with stylesheets.\n\nFor example, the following achieves the same effect as setting the\n:hover attribute in your stylesheet:\n\n    div\n      ( hover\n          [ (\"color\",\"blue\",\"lightblue\") ]\n      )\n      [ text \"so cool!\" ]\n\nYou may user the primed versions as shorthand to provide a base list of\nstyles, like this:\n\n    div\n      ( hover'\n          [ (\"font-size\",\"20px\")\n          , (\"font-face\",\"Droid Sans Mono\")\n          ]\n          [ (\"color\",\"blue\",\"lightblue\") ]\n      )\n      [ text \"wow\" ]\n\nCompletely painless!\n\n* Note: the effects in this library consume whatever JS hooks are needed\nto achieve the effect on that element (e.g., hover consumes onmouseover and\nonmouseout, but you are still free to use onclick). If for some reason you\ndo want to do both a CSS transition and have your application respond to\nan event, you can simply make a wrapper element and hook its events.\n\n",
        "aliases": [
          {
            "name": "CSSKey",
            "comment": "\nThe key for a CSS property.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "CSSValue",
            "comment": "\nThe value of a CSS property.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "JSEventAttribute",
            "comment": "\nThe name of a JavaScript event attribute.\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "cssStateEffect",
            "comment": "\nConstruct your own stateful effects.\n\nProvide:\n- A list of events that deactivate your effect\n- One event that activates your effect\n- A list of styles (key, value) to apply constantly (the inactive event styles are added to these)\n- A list of styles (key, valueIfInactive, valueIfActive) that depend on the stateful effect\n\nA list of attributes will be generated to implement the effect, using inline js and css\n",
            "type": "List DynamicStyle.JSEventAttribute -> DynamicStyle.JSEventAttribute -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          },
          {
            "name": "focus",
            "comment": "\nChange styles when the user focuses on element. For example,\n\n    pressure [(\"border-color\",\"black\",\"blue\")]\n\nwill render a black border\nnormally, but a blue border when the user focuses on the element.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          },
          {
            "name": "focus'",
            "comment": "\nShorthand to add a list of static base styles.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          },
          {
            "name": "hover",
            "comment": "\nChange styles when the user hovers over an element. For example,\n\n    hover [(\"color\",\"black\",\"blue\")]\n\nwill render black text normally, but\nblue text when the user hovers over the element.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          },
          {
            "name": "hover'",
            "comment": "\nShorthand to add a list of static base styles.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          },
          {
            "name": "pressure",
            "comment": "\nChange styles when the user pushes on element. For example,\n\n    pressure [(\"color\",\"black\",\"blue\")]\n\nwill render black text normally, but\nblue text when the user pushes the mouse down on the element.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          },
          {
            "name": "pressure'",
            "comment": "\nShorthand to add a list of static base styles.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List (Html.Attribute msg)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "geekyme/elm-charts",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Chart",
        "comment": " This module comprises tools to create and modify a model of the data, labels and styling, and then the function `toHtml` renders the model using one of the provided views.\n\n# Chart constructors\n@docs hBar, vBar, pie, lChart\n\n# Customisers\n@docs title, colours, colors, addValueToLabel, updateStyles\n\n# Rendering\n@docs toHtml\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addValueToLabel",
            "comment": " addValueToLabel adds the data value of each item to the data label. This is applied by default in hBar.\n\n    vBar vs ls \"Title\"\n        |> addValueToLabel\n        |> toHtml\n",
            "type": "ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "colors",
            "comment": " colors supports alternative spelling of colours\n",
            "type": "List String -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "colours",
            "comment": " colours replaces the default colours. Bar charts use just one colour, which will be the head of the list provided.\n\n    vChart vs ls\n        |> colours [\"steelblue\"]\n        |> toHtml\n\n    pie vs ls\n        |> colours [\"steelblue\", \"#96A65B\", \"#D9A679\", \"#593F27\", \"#A63D33\"]\n        |> toHtml\n",
            "type": "List String -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "hBar",
            "comment": " The horizontal bar chart results in a set of bars, one above the other, of lengths in proportion to the value. A label with the data value is printed in each bar.\n\n    hBar vals labels\n        |> title \"My Chart\"\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          },
          {
            "name": "lChart",
            "comment": " The line chart is useful for time series, or other data where the values relate to each other in some way.\n\n    lChart vals labels\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          },
          {
            "name": "pie",
            "comment": " The pie chart results in a circle cut into coloured segments of size proportional to the data value.\n\n    pie vals labels\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          },
          {
            "name": "title",
            "comment": " title adds a title to the model.\n\n    -- e.g. build a chart from scratch\n    chartInit vs ls BarHorizontal\n        |> title \"This will be the title\"\n        |> toHtml\n",
            "type": "String -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "toHtml",
            "comment": " toHtml is called last, and causes the chart data to be rendered to html.\n\n    hBar vs ls\n        |> toHtml\n",
            "type": "ChartModel.Model -> Html.Html a"
          },
          {
            "name": "updateStyles",
            "comment": " updateStyles replaces styles for a specified part of the chart. Charts have the following div structure\n\n    .container\n        .title\n        .chart-container\n            .chart      (container for the bars or pie segments)\n                .chart-elements\n            .legend     (also for the label container in a vertical bar chart)\n                .legend-labels\n\n    vChart vs ls\n        |> updateStyles \"chart\" [ ( \"color\", \"black\" ) ]\n        |> toHtml\n",
            "type": "String -> List ChartModel.Style -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "vBar",
            "comment": " The vertical bar chart results in a set of bars of lengths in proportion to the value. A label is printed below each bar.\n\n    vBar vals labels\n        |> title \"My Chart\"\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ggb/elm-bloom",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Bloom",
        "comment": " Elm [Bloom filter](https://en.wikipedia.org/wiki/Bloom_filter) implementation using [Murmur3](https://en.wikipedia.org/wiki/MurmurHash). It may not be the fastest implementation, but it is simple and easy to use. This [blog post](https://corte.si/posts/code/bloom-filter-rules-of-thumb/index.html) with rules of thumb for choosing m and k might be helpful. \n\nUse it as follows:\n\n    import Bloom exposing (empty, add, test)\n\n    -- create an empty filter with m elements and k hashes\n    emptyFilter = empty 1000 4\n\n    -- add elements to the filter\n    filter = \n      List.foldr \n        add\n        emptyFilter \n        [\"foo\", \"bar\", \"baz\", ... ]\n\n    -- check if elements are recognized by the filter\n    test \"bar\" filter == True\n    test \"barr\" filter == False\n\n# Data\n\n@docs Filter\n\n# Create, manipulate and test\n\n@docs empty, add, test\n\n",
        "aliases": [
          {
            "name": "Filter",
            "comment": " The Filter struct holds an array containing the actual filter, but also the values for m and k (for simplicity).\n",
            "args": [],
            "type": "{ set : Array.Array Int, m : Int, k : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Adds elements to an existing Filter.\n\n    import Bloom exposing (add, empty)\n\n    t = List.foldr add (empty 20 3) [\"foo\", \"bar\", \"baz\"]\n",
            "type": "String -> Bloom.Filter -> Bloom.Filter"
          },
          {
            "name": "empty",
            "comment": " Creates an empty Filter, containing m elements and using k hashes.\n\n    import Bloom\n\n    Bloom.empty 10 3 |> Array.toList\n\n    -- {m=10, k=3, set=[0,0,0,0,0,0,0,0,0,0]}\n",
            "type": "Int -> Int -> Bloom.Filter"
          },
          {
            "name": "test",
            "comment": " Tests if a filter contains an element. By its probalistic nature this function may yield false positive results.\n\n    import Bloom exposing (add, empty)\n\n    -- create filter t\n    \n    test \"foo\" t == True\n    test \"fou\" t == False\n",
            "type": "String -> Bloom.Filter -> Bool"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ggb/elm-sentiment",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Sentiment",
        "comment": " elm-sentiment is an Elm module that uses the [AFINN-111](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text. Other wordlists are easy to integrate.\n\nIt is inspired by the the [Sentiment](https://github.com/thisandagain/sentiment)-module for Node.js.\n\n**Please note** that a wordlist-based approach for sentiment analysis might not be the best available approach for every (your) application. It is a simple and easy to use solution that does not need training like a Bayes classifier, that might perform better in classifying sentiments.  \n\n@docs Result\n\n# Helper\n\n@docs trim, tokenize\n\n# Analysis\n\n@docs analyse, analyseWith\n\n",
        "aliases": [
          {
            "name": "Result",
            "comment": " The Result-type describes the information returned by a call to analyse or analyseWith. The struct contains all tokens, the sum of positive and negative scores etc. The value comparative is the overall score divided by the number of words in the input string. \n",
            "args": [],
            "type": "{ tokens : List String , score : Int , words : List String , positive : List Int , negative : List Int , comparative : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "analyse",
            "comment": " Analyse a string and return a struct of type Result. The function basically calls analyseWith, but with (good) defaults.\n\n    import Sentiment\n\n    result = Sentiment.analyse \"Best movie ever!\"\n\n    -- result.score == 3\n",
            "type": "String -> Sentiment.Result"
          },
          {
            "name": "analyseWith",
            "comment": " Analyse a given string and return a struct of type Result. This function expects a dictionary containing a word list, a dictionary with additional sentiment information and a tokenizer function.\n\n    import Sentiment\n    import WordList.Afinn as Afinn\n    import String\n    import Dict\n\n    result = \n      Sentiment.analyseWith \n        Afinn.get\n        (Dict.fromList [(\":-)\",3),(\":-|\", 0),(\":-(\", -3)])\n        (String.toLower >> String.words)\n        \"Best movie ever! :-)\"\n\n    -- result.score == 6\n",
            "type": "Dict.Dict String Int -> Dict.Dict String Int -> (String -> List String) -> String -> Sentiment.Result"
          },
          {
            "name": "tokenize",
            "comment": " Split a string into words, turn all words into lowercase and remove everything that is not necessary (e. g. whitespace or special characters).\n\n    import Sentiment\n\n    Sentiment.tokenize \" --- Hello, World! :) \"\n\n    -- [\"hello\",\"world\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "trim",
            "comment": " Trim a given input string.\n\n    import Sentiment\n\n    Sentiment.trim \"  --- Hello!, \"\n\n    -- Hello\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "WordList.Afinn",
        "comment": " This module contains a single function with the whole [AFINN-111](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist.\n\n@docs get\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "get",
            "comment": " AFINN-111 wordlist as dictionary. The key is a word, the value the related sentiment score.\n",
            "type": "Dict.Dict String Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ggb/elm-trend",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Seasonal",
        "comment": " Contains functions to create a seasonal forecast based on the Holt-Winters method for seasonal forecasting.\n\n@docs forecast, forecastWith\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "forecast",
            "comment": " Creates a forecast with default parameters (alpha = 0.5, beta = 0.4, gamma = 0.6, number of forecasted values = length of period). You only need to specify the length of a season (number of values per season). \n",
            "type": "Int -> List Float -> Maybe.Maybe (List Float)"
          },
          {
            "name": "forecastWith",
            "comment": " Creates a seasonal forecast. Set the following parameters:\n\n* alpha: overall smoothing parameter (between 0 and 1)\n* beta: seasonal smoothing parameter (between 0 and 1)\n* gamma: trend smoothing parameter (between 0 and 1)\n* m: number of values to forecast (between 0 and period)\n* period: values per season (length of period) in the historical data\n* data: list of float values with historical data\n",
            "type": "Float -> Float -> Float -> Int -> Int -> List Float -> Maybe.Maybe (List Float)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Linear",
        "comment": " Contains functions to create a linear forecast, i. e. a simple trend line.\n\n@docs regression, forecast\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "forecast",
            "comment": " Creates a list of tuples with forecasted values. The first parameter indicates how many values.\n\nPlease note that this function expects to get a sorted list of points. It will create a range based on the last point. \n\n    vals = [(0, 0), (0.5, 0.25), (1, 0.5), (3, 1.5)]\n    \n    forecast 3 vals == [(4, 2), (5, 2.5), (6, 3)]\n",
            "type": "Int -> List ( Float, Float ) -> List ( Float, Float )"
          },
          {
            "name": "regression",
            "comment": " Expects a list of Float-tuples, where the first element is the x- and the second element is the y-coordinate of a point. It returns a linear function, that gets a Float and emits new values.\n\n    vals = [(0, 0), (1, 0.5), (2, 1), (3, 1.5)]\n    regressionFunction = regression vals\n\n    regressionFunction 4 == 2\n",
            "type": "List ( Float, Float ) -> Float -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ggb/numeral-elm",
    "version": "1.2.1",
    "docs": [
      {
        "name": "Numeral",
        "comment": " Elm module for (advanced) number formatting. It is a direct port of [Numeral.js](http://numeraljs.com/) and it is possible to use the same format strings. Manipulation and unformatting of numbers is not yet supported.\n\nIf you create a new language-file, please let me know or send a pull request.\n\n# Formatting\n\n@docs format, formatWithLanguage\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Same as formatWithLanguage, but English is set as default language.\n\n    format \"$0,0.00\" 1000.234 == \"$1,000.23\"\n",
            "type": "String -> Float -> String"
          },
          {
            "name": "formatWithLanguage",
            "comment": " Format a number with a given language.\n\n    import Language.Japanese as Japanese\n\n    myFormat = formatWithLanguage Japanese.lang \"0.0a\"\n\n    -- map myFormat [10123.12, 235798239.3242] == [\"10.1千\",\"235.8百万\"]\n",
            "type": "Language.Language -> String -> Float -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Languages.English",
        "comment": " English language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=englishOrdinal\n      , currency=\n        { symbol=\"$\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Languages.Japanese",
        "comment": " Japanese language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"千\"\n        , million=\"百万\"\n        , billion=\"十億\"\n        , trillion=\"兆\"\n        }\n      , ordinal=japaneseOrdinal\n      , currency=\n        { symbol=\"¥\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Languages.French",
        "comment": " French language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\" \"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=frenchOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Languages.Italian",
        "comment": " Italian language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\".\"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"mila\"\n        , million=\"mln\"\n        , billion=\"mld\"\n        , trillion=\"bil\"\n        }\n      , ordinal=italianOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Languages.German",
        "comment": " German language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\" \"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=germanOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Languages.BritishEnglish",
        "comment": " British English language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=englishOrdinal\n      , currency=\n        { symbol=\"£\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Language",
        "comment": " Type definition for language configurations.\n\nTo implement a new language configuration, copy an existing one and modify it.\n\n@docs Ordinal, Language\n\n",
        "aliases": [
          {
            "name": "Language",
            "comment": " Language defines the delimiters, abbreviations, ordinal and currency symbol.\n",
            "args": [],
            "type": "{ delimiters : Language.Delimiters , abbreviations : Language.Abbreviations , ordinal : Language.Ordinal , currency : Language.Currency }"
          },
          {
            "name": "Ordinal",
            "comment": " Type of a function that takes a float as input and returns an ordinal abbreviation string.\n",
            "args": [],
            "type": "Float -> String"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ggb/porterstemmer",
    "version": "1.0.1",
    "docs": [
      {
        "name": "PorterStemmer",
        "comment": " Elm implementation of the classical Porter Stemming-algorithm. The algorithm\nis described in [this paper](http://tartarus.org/martin/PorterStemmer/def.txt)\nand on [Wikipedia](https://en.wikipedia.org/wiki/Stemming).\nThe implementation is inspired by the [JavaScript](http://tartarus.org/martin/PorterStemmer/js.txt)-\nand the [Haskell](http://tartarus.org/martin/PorterStemmer/haskell.txt)-implementation.\n\nThe module exposes a single function.\n\n@docs stem\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "stem",
            "comment": " The stem-function takes a word and returns its stem.\n\n    stem \"sky\" == \"sky\"\n    stem \"hopefulness\" == \"hope\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "halfzebra/elm-sierpinski",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Sierpinski",
        "comment": " This module provides a set of helpers for generating Seierpinski fractal\nusing Graphics module.\n\n# Definition\n@docs Point, Triangle, Painted\n\n# Type casting Helpers\n@docs toPolygon, toPainted, toFilled\n\n# Geometrical Helpers\n@docs equaliteral, midpoint\n\n# Fractal generation\n@docs recursive, embedded, children\n\n",
        "aliases": [
          {
            "name": "Painted",
            "comment": " A triangle with color value, ready to be rendered on to Collage.\n\n    painted =\n            toPainted (rgb 240 173 0) (Triangle (Point 0 0) (Point 5 5) (Point 0 5))\n",
            "args": [
              "a"
            ],
            "type": "{ a | color : Color.Color }"
          },
          {
            "name": "Point",
            "comment": " A point woth coordinates.\n\n    midpoint (Point 0 0) (Point 5 5) -- Point 2.5 2.5\n",
            "args": [],
            "type": "{ x : Float, y : Float }"
          },
          {
            "name": "Triangle",
            "comment": " Type alias for representing a triangle.\n\n    triangle =\n        Triangle (Point 0 0) (Point 5 5) (Point 0 5)\n\n\n    toPolygon triangle --\n",
            "args": [],
            "type": "{ a : Sierpinski.Point, b : Sierpinski.Point, c : Sierpinski.Point }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "children",
            "comment": " Produces a list of child triangles from container Triangle and embedded Triangle.\n\n\n    parent =\n        (Triangle (Point 0 0) (Point 5 5) (Point 0 5))\n\n    current =\n        embedded parent\n\n    children parent current\n",
            "type": "Sierpinski.Triangle -> Sierpinski.Triangle -> List Sierpinski.Triangle"
          },
          {
            "name": "embedded",
            "comment": " Create a new triangle, using midpoints of parent's sides.\n\n    embedded (Triangle (Point 0 0) (Point 5 5) (Point 0 5))\n",
            "type": "Sierpinski.Triangle -> Sierpinski.Triangle"
          },
          {
            "name": "equaliteral",
            "comment": " Produces an initial container equaliteral triangle for the fractal.\n\n    equaliteral ((toFloat Window.width) / 3)\n",
            "type": "Float -> Sierpinski.Triangle"
          },
          {
            "name": "midpoint",
            "comment": " Calculate the midpoint between two points.\n\n    midpoint (Point 0 0) (Point 5 5)\n",
            "type": "Sierpinski.Point -> Sierpinski.Point -> Sierpinski.Point"
          },
          {
            "name": "recursive",
            "comment": " Recursive function for generating the fractal, requires depth,\nlist of existing Triangles(used in recursion) and container Triangle for the fractal.\n\n    recursive 5 [] (equaliteral ((toFloat Window.width) / 3))\n",
            "type": "Int -> List Sierpinski.Triangle -> Sierpinski.Triangle -> List Sierpinski.Triangle"
          },
          {
            "name": "toFilled",
            "comment": " Converts a triangle in to a polygon, filled with color.\n\n    painted =\n            toPainted (rgb 240 173 0) (Triangle (Point 0 0) (Point 5 5) (Point 0 5))\n\n    toFilled painted\n",
            "type": "Sierpinski.Painted Sierpinski.Triangle -> Collage.Form"
          },
          {
            "name": "toPainted",
            "comment": " Convert triangle in to Painted Triangle, which can be filled with a color and rendered.\n\n    toPainted (rgb 240 173 0) (Triangle (Point 0 0) (Point 5 5) (Point 0 5))\n",
            "type": "Color.Color -> Sierpinski.Triangle -> Sierpinski.Painted Sierpinski.Triangle"
          },
          {
            "name": "toPolygon",
            "comment": " Convert Triangle in to polygon Shape.\n\n    toPolygon (Triangle (Point 0 0) (Point 5 5) (Point 0 5))\n",
            "type": "Sierpinski.Triangle -> Collage.Shape"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "hoelzro/elm-drag",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Drag",
        "comment": " This module listens for mouse events and creates drag events that\ncontain the delta x and y of the mouse's movement when the button is\npressed down.\n\n# TEA Data Structures\n@docs Model, Msg\n\n# TEA Functions\n@docs initialModel, subscriptions, update\n\n    import Html.App as App\n    import Html exposing (Html, text)\n\n    import Drag\n\n    type alias Model = {\n        dragModel : Drag.Model,\n        dragDistance : Int\n      }\n\n    type Msg =\n      DragMsg Drag.Msg |\n      Drag (Int, Int)\n\n    init : (Model, Cmd Msg)\n    init =\n      let initialModel = {\n        dragModel = Drag.initialModel,\n        dragDistance = 0\n      } in (initialModel, Cmd.none)\n\n    subscriptions : Model -> Sub Msg\n    subscriptions model = Drag.subscriptions DragMsg model.dragModel\n\n    update : Msg -> Model -> (Model, Cmd Msg)\n    update msg model =\n      case msg of\n        DragMsg msg ->\n          let (newDragModel, dragCmd) = Drag.update Drag msg model.dragModel\n          in ({model | dragModel = newDragModel}, dragCmd)\n        Drag (dx, dy) -> ({ model | dragDistance = model.dragDistance + (abs dx) + (abs dy) }, Cmd.none)\n\n    view : Model -> Html Msg\n    view model = text <| toString model\n\n    main : Program Never\n    main = App.program {\n        init = init,\n        update = update,\n        subscriptions = subscriptions,\n        view = view\n      }\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The internal state of the drag module.  You don't need to poke into this\nat all; you just need to make sure it's present in your application's model\nand that you update it when Drag events occur.\n",
            "args": [],
            "type": "{ isDown : Bool, currPosition : ( Int, Int ) }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Internal messages for the drag module.  You need to make sure a\nconstructor for your application's Msg type exists that wraps this,\nand that you handle it by calling Drag.update to update the drag\nmodel in your application's update function.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "initialModel",
            "comment": " The initial state for the drag module.  Use in your application's\ninit function to initialize the drag model part of your model.\n",
            "type": "Drag.Model"
          },
          {
            "name": "subscriptions",
            "comment": " Returns a subscription for the events that elm-drag needs to function.\nThe first argument is a constructor that converts elm-drag messages into\nyour application's messages; usually you'll have a `type Msg = DragMsg Drag.Msg`\nconstructor, so this argument would just be `DragMsg`.  The second argument\nis the drag model.\n",
            "type": "(Drag.Msg -> msg) -> Drag.Model -> Platform.Sub.Sub msg"
          },
          {
            "name": "update",
            "comment": " Updates the drag model.  The first argument is a function that\nconverts an `(Int, Int)` to your application's message type; if you\nhave a `type Msg = Drag (Int, Int)`, this would just be `Drag`.\nThe second and third arguments are the drag message and model that\nyou're currently processing.\n",
            "type": "(( Int, Int ) -> msg) -> Drag.Msg -> Drag.Model -> ( Drag.Model, Platform.Cmd.Cmd msg )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "hrldcpr/elm-cons",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Cons",
        "comment": " This library provides a type for non-empty lists, called `Cons`.\n\nBeing able to encode non-emptiness in the type system can lead to simpler, clearer code.\n\nFor example, to find the largest element in a List, you have to account for the empty list, which complicates things:\n\n    maximum : List comparable -> Maybe comparable\n    maximum l =\n      case l of\n        [] -> Nothing\n        first::rest -> Just <| List.foldl max first rest\n\nUsing Cons, on the other hand, the type system knows the list will never be empty, leading to much simpler code:\n\n    maximum : Cons comparable -> comparable\n    maximum = foldl1 max\n\n\n# Basics\n\n@docs Cons, cons, uncons, singleton, toList\n\n\n# Avoiding Maybe\n\nSome functions on Lists are forced to use Maybe to handle the empty list. The following functions are quivalent to their List counterparts, but with no need for Maybe.\n\n@docs head, tail, minimum, maximum\n\n\n# Convenient Folding\n\nFolds over Lists require a start value, but the following fold functions take the start value from the cons.\n\n@docs foldl1, foldr1, scanl1\n\n\n# List May Be Cons\n\nA cons can't be empty, but a `Maybe (Cons a)` can be, if we treat Nothing as empty.\n\nThus `List a` and `Maybe (Cons a)` are completely equivalent, and the following functions let you go back and forth between them.\n\nThis is useful for recursion on Cons. For example, to recursively find the maximum element of a cons:\n\n    maximum : Cons comparable -> comparable\n    maximum c =\n      case uncons' c of\n        (first, Nothing) -> first\n        (first, Just rest) -> max first <| maximum rest\n\n@docs fromList, cons', uncons', tail', toList', forList\n\n\n# Preserving Non-Emptiness\n\nThe following functions preserve non-emptiness, so given a cons they return a cons.\n\n@docs reverse, append, appendList, appendToList, concat, intersperse, unzip, map, map2, map3, map4, map5, concatMap, indexedMap, scanl, scanlList, sort, sortBy, sortWith\n\n\n# List Functions\n\nEvery function from the List library has been adapted to Cons.\n\nThe following are just convenience functions which convert the cons to a list and then apply the corresponding list function. For example, the definition of `sum` is:\n\n    sum = toList >> List.sum\n\n@docs isEmpty, length, member, filter, take, drop, partition, filterMap, foldl, foldr, sum, product, all, any\n",
        "aliases": [],
        "types": [
          {
            "name": "Cons",
            "comment": " A non-empty list of elements of type `a`.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " True if and only if all elements of the cons satisfy the given predicate.\n\n    c = cons 1 [2, 3]\n    all (\\x -> x > 2) == False\n    all (\\x -> x > 0) == True\n",
            "type": "(a -> Bool) -> Cons.Cons a -> Bool"
          },
          {
            "name": "any",
            "comment": " True if and only if any elements of the cons satisfy the given predicate.\n\n    c = cons 1 [2, 3]\n    any (\\x -> x > 5) == False\n    any (\\x -> x > 2) == True\n",
            "type": "(a -> Bool) -> Cons.Cons a -> Bool"
          },
          {
            "name": "append",
            "comment": " Append the second cons to the first.\n\n    c = cons 1 [2, 3]\n    d = cons 4 [5, 6]\n    append c d == cons 1 [2, 3, 4, 5, 6]\n",
            "type": "Cons.Cons a -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "appendList",
            "comment": " Append a list to a cons.\n\n    c = cons 1 [2, 3]\n    l = [4, 5, 6]\n    appendList c l == cons 1 [2, 3, 4, 5, 6]\n",
            "type": "Cons.Cons a -> List a -> Cons.Cons a"
          },
          {
            "name": "appendToList",
            "comment": " Append a cons to a list.\n\n    l = [1, 2, 3]\n    c = cons 4 [5, 6]\n    appendToList l c == cons 1 [2, 3, 4, 5, 6]\n",
            "type": "List a -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "concat",
            "comment": " Concatenate a non-empty list of non-empty lists.\n\n    c = cons 1 [2, 3]\n    d = singleton 4\n    e = cons 5 [6]\n    cs = cons c [d, e]\n    concat cs == cons 1 [2, 3, 4, 5, 6]\n\n    concat == foldr1 append\n",
            "type": "Cons.Cons (Cons.Cons a) -> Cons.Cons a"
          },
          {
            "name": "concatMap",
            "comment": " Also known as \"flat map\", map each element of the cons to a cons, and then concatenate them together.\n\n    f : number -> Cons number\n    f x = cons x [-x]\n\n    c = cons 1 [2, 3]\n    concatMap f c == cons 1 [-1, 2, -2, 3, -3]\n\n    concatMap f == concat << map f\n",
            "type": "(a -> Cons.Cons b) -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "cons",
            "comment": " A cons with the given head and tail. Equivalent to ::\n\n    c = cons 1 [2, 3]\n    head c == 1\n    tail c == [2, 3]\n\n",
            "type": "a -> List a -> Cons.Cons a"
          },
          {
            "name": "cons'",
            "comment": " A cons with the given head and tail.\n\n    c = cons' \"a\" Nothing\n    toList c == [\"a\"]\n\n    d = cons' 1 <| Just <| cons' 2 <| Just <| cons' 3 Nothing\n    toList d = [1, 2, 3]\n",
            "type": "a -> Maybe.Maybe (Cons.Cons a) -> Cons.Cons a"
          },
          {
            "name": "drop",
            "comment": " The cons without its first *n* elements. This can't generally be a cons itself, because it might be empty.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    drop 2 c == [\"c\"]\n    drop 100 c == []\n    drop -10 c == toList c\n",
            "type": "Int -> Cons.Cons a -> List a"
          },
          {
            "name": "filter",
            "comment": " The list of elements from the cons which satisfy the given predicate. This can't generally be a cons itself, because it might be empty.\n\n    c = cons 1 [2, 3]\n    filter (\\x -> x > 10) c == []\n    filter (\\x -> x > 1) c == [2, 3]\n",
            "type": "(a -> Bool) -> Cons.Cons a -> List a"
          },
          {
            "name": "filterMap",
            "comment": " Map the given Maybe function over the cons, discarding every Nothing. This can't generally be a cons itself, because it might be empty.\n\n    String.toInt : String -> Maybe Int\n\n    c = cons \"1\" [\"a\", \"2\", \"b\"]\n    filterMap String.toInt c == [1, 2]\n",
            "type": "(a -> Maybe.Maybe b) -> Cons.Cons a -> List b"
          },
          {
            "name": "foldl",
            "comment": " Reduce the cons from the left, starting with the given value. To start with the first value in the cons, use [foldl1](#foldl1).\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldl1 step \"x\" c == \"xabc\"\n",
            "type": "(a -> b -> b) -> b -> Cons.Cons a -> b"
          },
          {
            "name": "foldl1",
            "comment": " Reduce the cons from the left.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldl1 step c == \"abc\"\n",
            "type": "(a -> a -> a) -> Cons.Cons a -> a"
          },
          {
            "name": "foldr",
            "comment": " Reduce the cons from the right, starting with the given value. To start with the last value in the cons, use [foldr1](#foldr1).\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldr1 step \"x\" c == \"xcba\"\n",
            "type": "(a -> b -> b) -> b -> Cons.Cons a -> b"
          },
          {
            "name": "foldr1",
            "comment": " Reduce the cons from the right.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldr1 step c == \"cba\"\n",
            "type": "(a -> a -> a) -> Cons.Cons a -> a"
          },
          {
            "name": "forList",
            "comment": " Convert a function that operates on Cons to a function that operates on List, where the empty list results in Nothing.\n\n    maximum : Cons comparable -> comparable\n    maximum = foldl1 max\n\n    listMaximum : List comparable -> Maybe comparable\n    listMaximum = forList maximum\n\n    listMaximum [] == Nothing\n    listMaximum [1, 2, 3] == Just 3\n",
            "type": "(Cons.Cons a -> b) -> List a -> Maybe.Maybe b"
          },
          {
            "name": "fromList",
            "comment": " Convert the list to the equivalent cons, or Nothing for the empty list.\n\n    fromList [] == Nothing\n    fromList [1, 2, 3] == Just <| cons 1 [2, 3]\n",
            "type": "List a -> Maybe.Maybe (Cons.Cons a)"
          },
          {
            "name": "head",
            "comment": " The first element of the cons.\n\n    c = cons 1 [2, 3]\n    head c == 1\n",
            "type": "Cons.Cons a -> a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function to each element of the cons, as well as the index.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    indexedMap (,) c == cons (0, \"a\") [(1, \"b\"), (2, \"c\")]\n",
            "type": "(Int -> a -> b) -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "intersperse",
            "comment": " Intersperse the value between each element of the cons.\n\n    c = cons \"first\" [\"second\", \"third\"]\n    intersperse \"and\" c == cons \"first\" [\"and\", \"second\", \"and\", \"third\"]\n",
            "type": "a -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "isEmpty",
            "comment": " Always false for a cons, only here to make porting List code easier.\n\n    isEmpty == always False\n",
            "type": "Cons.Cons a -> Bool"
          },
          {
            "name": "length",
            "comment": " The number of elements in the cons.\n\n    c = cons 1 [2, 3]\n    length c == 3\n",
            "type": "Cons.Cons a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to each element of the cons.\n\n    c = cons 1 [4, 9]\n    map sqrt c == cons 1 [2, 3]\n",
            "type": "(a -> b) -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to each pair of elements, limited by the shortest cons.\n\n    zip : Cons a -> Cons b -> Cons (a, b)\n    zip = map2 (,)\n    c = cons 1 [2, 3]\n    d = cons \"a\" [\"b\", \"c\", \"d\", \"e\"]\n    zip c d = cons (1, \"a\") [(2, \"b\"), (3, \"c\")]\n",
            "type": "(a -> b -> c) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c -> Cons.Cons d"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c -> Cons.Cons d -> Cons.Cons e"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c -> Cons.Cons d -> Cons.Cons e -> Cons.Cons f"
          },
          {
            "name": "maximum",
            "comment": " The largest element of the cons.\n\n    c = cons 1 [2, 3]\n    maximum c == 3\n\n    maximum == foldl1 max\n",
            "type": "Cons.Cons comparable -> comparable"
          },
          {
            "name": "member",
            "comment": " True if and only if the given element is in the given cons.\n\n    c = cons 1 [2, 3]\n    member 5 c == False\n    member 2 c == True\n",
            "type": "a -> Cons.Cons a -> Bool"
          },
          {
            "name": "minimum",
            "comment": " The smallest element of the cons.\n\n    c = cons 1 [2, 3]\n    minimum c == 1\n\n    minimum == foldl1 min\n",
            "type": "Cons.Cons comparable -> comparable"
          },
          {
            "name": "partition",
            "comment": " Partition the cons into two lists, the first containing the elements which satisfy the given predicate, the second containing the elements which don't. These can't generally be a cons themselves, since one might be empty.\n\n    c = cons 1 [2, 3]\n    partition (\\x -> x > 1) c == ([2, 3], [1])\n",
            "type": "(a -> Bool) -> Cons.Cons a -> ( List a, List a )"
          },
          {
            "name": "product",
            "comment": " The product of the elements of the cons.\n\n    c = cons 2 [3, 4]\n    product c == 24\n",
            "type": "Cons.Cons number -> number"
          },
          {
            "name": "reverse",
            "comment": " Reverse the cons.\n\n    c = cons 1 [2, 3]\n    reverse c == cons 3 [2, 1]\n",
            "type": "Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "scanl",
            "comment": " Reduce the cons from the left, producing a cons of all intermediate results.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    scanl step \"\" c == cons \"\" [\"a\", \"ab\", \"abc\"]\n",
            "type": "(a -> b -> b) -> b -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "scanl1",
            "comment": " Reduce the cons from the left, producing a cons of all intermediate results.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    scanl1 step c == cons \"a\" [\"ab\", \"abc\"]\n",
            "type": "(a -> a -> a) -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "scanlList",
            "comment": " Reduce the list from the left, producing a cons of all intermediate results, since even for the empty list there is one intermediate result.\n\nEquivalent to List.scanl, but with a more specific return type.\n\n    step value result = result ++ value\n    scanlList step \"\" [] == cons \"\" []\n    scanlList step \"\" [\"a\", \"b\", \"c\"] == cons \"\" [\"a\", \"ab\", \"abc\"]\n",
            "type": "(a -> b -> b) -> b -> List a -> Cons.Cons b"
          },
          {
            "name": "singleton",
            "comment": " A cons containing only the given element.\n\n    c = singleton \"a\"\n    toList c == [\"a\"]\n",
            "type": "a -> Cons.Cons a"
          },
          {
            "name": "sort",
            "comment": " Sort the cons in ascending order.\n\n    c = cons 2 [3, 1]\n    sort c == cons 1 [2, 3]\n",
            "type": "Cons.Cons comparable -> Cons.Cons comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort the cons in ascending order, by applying the given function to each value.\n\n    alice = {name=\"Alice\", age=30}\n    bob = {name=\"Bob\", age=20}\n    charlie = {name=\"Charlie\", age=40}\n\n    c = cons alice [bob, charlie]\n    sortBy .age c == cons bob [alice, charlie]\n",
            "type": "(a -> comparable) -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "sortWith",
            "comment": " Sort the cons in ascending order, based on the given comparison function.\n\n    reverseCompare : comparable -> comparable -> Order\n    reverseCompare x y =\n      case compare x y of\n        LT -> GT\n        EQ -> EQ\n        GT -> LT\n\n    c = cons \"b\" [\"a\", \"c\"]\n    sortWith reverseCompare c == cons \"c\" [\"b\", \"a\"]\n\n    sortWith compare == sort\n",
            "type": "(a -> a -> Basics.Order) -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "sum",
            "comment": " The sum of the elements of the cons.\n\n    c = cons 2 [3, 4]\n    sum c == 9\n",
            "type": "Cons.Cons number -> number"
          },
          {
            "name": "tail",
            "comment": " The list of all elements after the first element of the cons.\n\n    c = cons 1 [2, 3]\n    tail c == [2, 3]\n",
            "type": "Cons.Cons a -> List a"
          },
          {
            "name": "tail'",
            "comment": " The tail of the cons.\n\n    c = cons' \"a\" Nothing\n    tail' c == Nothing\n\n    d = cons' 1 <| Just <| cons' 2 <| Just <| cons' 3 Nothing\n    tail' d == Just <| cons' 2 <| Just <| cons' 3 Nothing\n\n    length : Cons a -> Int\n    length c =\n      case tail' c of\n        Nothing -> 1\n        Just rest -> 1 + length rest\n",
            "type": "Cons.Cons a -> Maybe.Maybe (Cons.Cons a)"
          },
          {
            "name": "take",
            "comment": " The first *n* elements of the cons, up to the length of the cons. This can't generally be a cons itself, since *n* might not be positive.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    take 2 c == [\"a\", \"b\"]\n    take 100 c == toList c\n    take -10 c == []\n",
            "type": "Int -> Cons.Cons a -> List a"
          },
          {
            "name": "toList",
            "comment": " Convert the cons to the equivalent list.\n\n    c = cons 1 [2, 3]\n    toList c == [1, 2, 3]\n",
            "type": "Cons.Cons a -> List a"
          },
          {
            "name": "toList'",
            "comment": " Convert the cons to the equivalent list, or the empty list for Nothing.\n\nThis is the inverse of fromList.\n\n    c = fromList []\n    c == Nothing\n    toList' c == []\n\n    c = fromList [1, 2, 3]\n    c == Just <| cons 1 [2, 3]\n    toList' c == [1, 2, 3]\n",
            "type": "Maybe.Maybe (Cons.Cons a) -> List a"
          },
          {
            "name": "uncons",
            "comment": " The head and tail of the cons.\n\n    c = cons 1 [2, 3]\n    uncons c == (1, [2, 3])\n",
            "type": "Cons.Cons a -> ( a, List a )"
          },
          {
            "name": "uncons'",
            "comment": " The head and tail of the cons.\n\n    c = cons' \"a\" Nothing\n    uncons' c == (\"a\", Nothing)\n\n    d = cons' 1 <| Just <| cons' 2 <| Just <| cons' 3 Nothing\n    uncons' d == (1, Just <| cons' 2 <| Just <| cons' 3 Nothing)\n\n    maximum : Cons comparable -> comparable\n    maximum c =\n      case uncons' c of\n        (first, Nothing) -> first\n        (first, Just rest) -> max first <| maximum rest\n",
            "type": "Cons.Cons a -> ( a, Maybe.Maybe (Cons.Cons a) )"
          },
          {
            "name": "unzip",
            "comment": " A tuple of each cons, corresponding to a cons of tuples.\n\n    c = cons (1, \"a\") [(2, \"b\"), (3, \"c\")]\n    unzip c == (cons 1 [2, 3], cons \"a\" [\"b\", \"c\"])\n",
            "type": "Cons.Cons ( a, b ) -> ( Cons.Cons a, Cons.Cons b )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "imeckler/either",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Either",
        "comment": " A simple module providing an Either type.\n\n# Types\n@docs Either\n\n# Maps\n@docs mapLeft, mapRight, mapBoth\n\n# Elimination\n@docs elim, isLeft, isRight\n",
        "aliases": [],
        "types": [
          {
            "name": "Either",
            "comment": " For when you want a function that needs to take/return values of\n    two different types and you don't want to define a whole type. ",
            "args": [
              "a",
              "b"
            ],
            "cases": [
              [
                "Left",
                [
                  "a"
                ]
              ],
              [
                "Right",
                [
                  "b"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "elim",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(a -> c) -> (b -> c) -> Either.Either a b -> c"
          },
          {
            "name": "isLeft",
            "comment": " ",
            "type": "Either.Either a b -> Bool"
          },
          {
            "name": "isRight",
            "comment": " ",
            "type": "Either.Either a b -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(a -> a') -> (b -> b') -> Either.Either a b -> Either.Either a' b'"
          },
          {
            "name": "mapLeft",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(a -> a') -> Either.Either a b -> Either.Either a' b"
          },
          {
            "name": "mapRight",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(b -> b') -> Either.Either a b -> Either.Either a b'"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "imeckler/queue",
    "version": "1.1.3",
    "docs": [
      {
        "name": "Queue",
        "comment": " Just a simple queue data type.\n\n# Type\n@docs Queue\n\n# Construction\n@docs empty, push\n\n# Inspection\n@docs pop\n\n# Utilities\n@docs isEmpty, length, map, toList\n",
        "aliases": [
          {
            "name": "Queue",
            "comment": " A queue is a sequence supporting O(1) appending (`push`) of a new\n    element to the back and amortizsed O(1) removal of the element at the\n    front (`pop`). ",
            "args": [
              "a"
            ],
            "type": "Queue.Internal.Queue a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " An empty queue, ready for pushin'. ",
            "type": "Queue.Queue a"
          },
          {
            "name": "isEmpty",
            "comment": " ",
            "type": "Queue.Queue a -> Bool"
          },
          {
            "name": "length",
            "comment": " ",
            "type": "Queue.Queue a -> Int"
          },
          {
            "name": "map",
            "comment": " ",
            "type": "(a -> b) -> Queue.Queue a -> Queue.Queue b"
          },
          {
            "name": "pop",
            "comment": " Get the first element of the queue and the queue with the first element\n    removed. Returns nothing if the queue is empty. Amortized O(1). ",
            "type": "Queue.Queue a -> Maybe.Maybe ( a, Queue.Queue a )"
          },
          {
            "name": "push",
            "comment": " Put the given element at the back of the given queue. O(1). ",
            "type": "a -> Queue.Queue a -> Queue.Queue a"
          },
          {
            "name": "toList",
            "comment": " A list consisting of the elements in the order in which they were put into the\n    queue (i.e., \"front to back\"). ",
            "type": "Queue.Queue a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Queue.Internal",
        "comment": " Internal representation of the queue type.\n\n@docs Queue\n",
        "aliases": [],
        "types": [
          {
            "name": "Queue",
            "comment": " See [this blog post](http://parametricity.com/posts/2015-02-19-animating.html). ",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Queue",
                [
                  "List a",
                  "List a"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "imeckler/ratio",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Ratio",
        "comment": " A simple module providing a ratio type for rational numbers \n\n# Types\n@docs Rational\n\n# Introduction\n@docs over, fromInt\n\n# Operations\n@docs add, multiply, divide, negate\n\n# Elimination\n@docs numerator, denominator, split, toFloat\n\n# Util\n@docs gcd \n\n",
        "aliases": [],
        "types": [
          {
            "name": "Rational",
            "comment": " \"Arbitrary\" (up to `max_int` size) precision fractional numbers. Think of\n    it as the length of a rigid bar that you've constructed from a bunch of\n    initial bars of the same fixed length\n    by the operations of gluing bars together and shrinking a\n    given bar so that an integer number of copies of it glues together to\n    make another given bar.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Addition. It's like gluing together two bars of the given lengths. ",
            "type": "Ratio.Rational -> Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "denominator",
            "comment": " ",
            "type": "Ratio.Rational -> Int"
          },
          {
            "name": "divide",
            "comment": " Division. It's sort of like multiplication! ",
            "type": "Ratio.Rational -> Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "fromInt",
            "comment": " `fromInt x = over x 1` ",
            "type": "Int -> Ratio.Rational"
          },
          {
            "name": "gcd",
            "comment": " The biggest number that divides both arguments (the greatest common divisor). ",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "multiply",
            "comment": " Mulitplication. `mulitply x (c / d)` is the length of the bar that you'd get\n    if you glued `c` copies of a bar of length `x` end-to-end and then shrunk it\n    down enough so that `d` copies of the shrunken bar would fit in the big\n    glued bar. ",
            "type": "Ratio.Rational -> Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "negate",
            "comment": " This doesn't really fit with the bar metaphor but this is multiplication by `-1`. ",
            "type": "Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "numerator",
            "comment": " ",
            "type": "Ratio.Rational -> Int"
          },
          {
            "name": "over",
            "comment": " `over x y` is like `x / y`. ",
            "type": "Int -> Int -> Ratio.Rational"
          },
          {
            "name": "split",
            "comment": " `split x = (numerator x, denominator x)` ",
            "type": "Ratio.Rational -> ( Int, Int )"
          },
          {
            "name": "toFloat",
            "comment": " ",
            "type": "Ratio.Rational -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ingara/elm-asoiaf-api",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Asoiaf.Api",
        "comment": "\n\n# Characters\n@docs getCharacters, getCharacter, queryCharacters\n\n# Houses\n@docs getHouses, getHouse, queryHouses\n\n# Books\n@docs getBooks, getBook, queryBooks\n\n# Pagination\n@docs Pagination, defaultPagination\n\n# Queries\n@docs CharacterQuery, HouseQuery, BookQuery, defaultCharacterQuery, defaultHouseQuery, defaultBookQuery\n\n",
        "aliases": [
          {
            "name": "BookQuery",
            "comment": " Represents the fields we can query books by\n",
            "args": [],
            "type": "{ name : Maybe.Maybe String , fromReleaseDate : Maybe.Maybe Date.Date , toReleaseDate : Maybe.Maybe Date.Date }"
          },
          {
            "name": "CharacterQuery",
            "comment": " Represents the fields we can query characters by\n",
            "args": [],
            "type": "{ name : Maybe.Maybe String , gender : Maybe.Maybe String , culture : Maybe.Maybe String , born : Maybe.Maybe Int , died : Maybe.Maybe Int , isAlive : Maybe.Maybe Bool }"
          },
          {
            "name": "HouseQuery",
            "comment": " Represents the fields we can query houses by\n",
            "args": [],
            "type": "{ name : Maybe.Maybe String , region : Maybe.Maybe String , words : Maybe.Maybe String , hasWords : Maybe.Maybe Bool , hasTitles : Maybe.Maybe Bool , hasSeats : Maybe.Maybe Bool , hasDiedOut : Maybe.Maybe Bool , hasAncestralWeapons : Maybe.Maybe Bool }"
          },
          {
            "name": "Pagination",
            "comment": " All requests are paginated. Use this to specify which page to request and\nwhat page size to use.\n",
            "args": [],
            "type": "{ page : Int, pageSize : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultBookQuery",
            "comment": " Default book query. No fields specified.\n",
            "type": "Asoiaf.Api.BookQuery"
          },
          {
            "name": "defaultCharacterQuery",
            "comment": " Default character query. No fields specified.\n",
            "type": "Asoiaf.Api.CharacterQuery"
          },
          {
            "name": "defaultHouseQuery",
            "comment": " Default house query. No fields specified.\n",
            "type": "Asoiaf.Api.HouseQuery"
          },
          {
            "name": "defaultPagination",
            "comment": " Default pagination.\n\n    { page = 1\n    , pageSize = 10\n    }\n",
            "type": "Asoiaf.Api.Pagination"
          },
          {
            "name": "getBook",
            "comment": " Get a book by id\n",
            "type": "Asoiaf.Models.Id -> Task.Task Http.Error Asoiaf.Models.Book"
          },
          {
            "name": "getBooks",
            "comment": " Get a list of books\n",
            "type": "Asoiaf.Api.Pagination -> Task.Task Http.Error (List Asoiaf.Models.Book)"
          },
          {
            "name": "getCharacter",
            "comment": " Get a character by id\n",
            "type": "Asoiaf.Models.Id -> Task.Task Http.Error Asoiaf.Models.Character"
          },
          {
            "name": "getCharacters",
            "comment": " Get a list of characters\n",
            "type": "Asoiaf.Api.Pagination -> Task.Task Http.Error (List Asoiaf.Models.Character)"
          },
          {
            "name": "getHouse",
            "comment": " Get a house by id\n",
            "type": "Asoiaf.Models.Id -> Task.Task Http.Error Asoiaf.Models.House"
          },
          {
            "name": "getHouses",
            "comment": " Get a list of houses\n",
            "type": "Asoiaf.Api.Pagination -> Task.Task Http.Error (List Asoiaf.Models.House)"
          },
          {
            "name": "queryBooks",
            "comment": " Query books\n\n    pagination =\n      { page = 1\n      , pageSize = 25\n      }\n    query =\n      { defaultBookQuery\n      | name = Just \"A Game of Thrones\"\n      }\n    queryBooks pagination query == [ { name = \"A Game of Thrones\", ... } ]\n",
            "type": "Asoiaf.Api.Pagination -> Asoiaf.Api.BookQuery -> Task.Task Http.Error (List Asoiaf.Models.Book)"
          },
          {
            "name": "queryCharacters",
            "comment": " Query characters\n\n    pagination =\n      { page = 1\n      , pageSize = 25\n      }\n    query =\n      { defaultCharacterQuery\n      | name = Just \"Jon Snow\"\n      }\n    queryCharacters pagination query == [ { name = \"Jon Snow\", ... } ]\n",
            "type": "Asoiaf.Api.Pagination -> Asoiaf.Api.CharacterQuery -> Task.Task Http.Error (List Asoiaf.Models.Character)"
          },
          {
            "name": "queryHouses",
            "comment": " Query houses\n\n    pagination =\n      { page = 1\n      , pageSize = 25\n      }\n    query =\n      { defaultBookQuery\n      | words = Just \"Winter is Coming\"\n      }\n    queryHouses pagination query == [ { name = \"House Stark of Winterfell\", ... } ]\n",
            "type": "Asoiaf.Api.Pagination -> Asoiaf.Api.HouseQuery -> Task.Task Http.Error (List Asoiaf.Models.House)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Asoiaf.Models",
        "comment": " Models\n\n# Types\n@docs Character, House, Book, Url, Id\n\n# Utils\n@docs getId\n\n# Decoders\n@docs decodeCharacter, decodeHouse, decodeBook\n\n# Encoders\n@docs encodeCharacter, encodeHouse, encodeBook\n\n",
        "aliases": [
          {
            "name": "Book",
            "comment": " Represents a book\n",
            "args": [],
            "type": "{ url : String , name : String , isbn : String , authors : List String , numberOfPages : Int , publisher : String , country : String , mediaType : String , released : String , characters : List String , povCharacters : List String }"
          },
          {
            "name": "Character",
            "comment": " Represents a character\n",
            "args": [],
            "type": "{ url : String , name : String , gender : String , culture : String , born : String , died : String , titles : List String , aliases : List String , father : String , mother : String , spouse : String , allegiances : List String , books : List String , povBooks : List String , tvSeries : List String , playedBy : List String }"
          },
          {
            "name": "House",
            "comment": " Represents a house\n",
            "args": [],
            "type": "{ url : String , name : String , region : String , coatOfArms : String , words : String , titles : List String , seats : List String , currentLord : String , heir : String , overlord : String , founded : String , founder : String , diedOut : String , ancestralWeapons : List String , cadetBranches : List String , swornMembers : List String }"
          },
          {
            "name": "Id",
            "comment": " Represents an id\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "Url",
            "comment": " Represents a url\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "decodeBook",
            "comment": " Json decode a book\n",
            "type": "Json.Decode.Decoder Asoiaf.Models.Book"
          },
          {
            "name": "decodeCharacter",
            "comment": " Json decode a character\n",
            "type": "Json.Decode.Decoder Asoiaf.Models.Character"
          },
          {
            "name": "decodeHouse",
            "comment": " Json decode a house\n",
            "type": "Json.Decode.Decoder Asoiaf.Models.House"
          },
          {
            "name": "encodeBook",
            "comment": " Json encode a book\n",
            "type": "Asoiaf.Models.Book -> Json.Encode.Value"
          },
          {
            "name": "encodeCharacter",
            "comment": " Json encode a character\n",
            "type": "Asoiaf.Models.Character -> Json.Encode.Value"
          },
          {
            "name": "encodeHouse",
            "comment": " Json encode a House\n",
            "type": "Asoiaf.Models.House -> Json.Encode.Value"
          },
          {
            "name": "getId",
            "comment": " Gets the id from the end of a URL as used in the ASOIAF API.\n\n    getId \"http://www.anapioficeandfire.com/api/houses/362\" == 362\n\nUseful for for example getting ids of the books a character is appearing in\n\n    getBookIds : Character -> List Int\n    getBookIds character =\n      List.map getId character.books\n",
            "type": "Asoiaf.Models.Url -> Asoiaf.Models.Id"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "janiczek/elm-markov",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Markov",
        "comment": "\n\n# Building a Markov chain\n@docs StateMachine, fromInput, fromInputs, addInput\n\n# Inspecting a Markov chain\n@docs probabilities\n\n# Generators\n@docs firstState, nextState, walk\n\n",
        "aliases": [
          {
            "name": "StateMachine",
            "comment": " The `StateMachine` type holds all the needed info for the Markov chain to run.\n",
            "args": [
              "comparable"
            ],
            "type": "{ inputs : List (List comparable) , transitions : Markov.Transitions comparable , intervals : comparable -> Markov.Intervals comparable }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addInput",
            "comment": " Train the Markov chain on some more input.\n",
            "type": "List comparable -> Markov.StateMachine comparable -> Markov.StateMachine comparable"
          },
          {
            "name": "firstState",
            "comment": " Generate a random first state.\n",
            "type": "Markov.StateMachine comparable -> Random.Pcg.Generator (Maybe.Maybe comparable)"
          },
          {
            "name": "fromInput",
            "comment": " Create a Markov chain with the given input.\n",
            "type": "List comparable -> Markov.StateMachine comparable"
          },
          {
            "name": "fromInputs",
            "comment": " Create a Markov chain with the given inputs.\n",
            "type": "List (List comparable) -> Markov.StateMachine comparable"
          },
          {
            "name": "nextState",
            "comment": " Generate a random next state given the current state.\n",
            "type": "Markov.StateMachine comparable -> comparable -> Random.Pcg.Generator (Maybe.Maybe comparable)"
          },
          {
            "name": "probabilities",
            "comment": " Get probabilities for a given starting state.\n",
            "type": "Markov.Transitions comparable -> comparable -> Markov.Probabilities comparable"
          },
          {
            "name": "walk",
            "comment": " Generate a random walk of max length given by the second parameter.\n",
            "type": "Markov.StateMachine comparable -> Int -> Random.Pcg.Generator (List comparable)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jasonmahr/html-escape-sequences",
    "version": "2.0.5",
    "docs": [
      {
        "name": "Unicode",
        "comment": " Use HTML escape sequences with elm-lang/html. Supports all Unicode\ncharacters and recognizes decimal, hexadecimal and named escape sequences.\n@docs unEsc, text', txt\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "text'",
            "comment": " Unescapes a string and then invokes `Html.text` on the result.\n\n    Html.text \"© &copy; &#169;\"  -- renders © &copy; &#169; to the page\n    text'     \"© &copy; &#169;\"  -- renders © © ©\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "txt",
            "comment": " Alias for `text'` that avoids apostrophes.\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "unEsc",
            "comment": " Unescapes all valid HTML escape sequences within a string.\n\n    unEsc \"© &COPY; &copy; &#169; &#x000A9; &cpy;\" == \"© © © © © &cpy;\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jastice/boxes-and-bubbles",
    "version": "3.0.0",
    "docs": [
      {
        "name": "BoxesAndBubbles",
        "comment": " The interface for the Boxes and Bubbles physics engine.\n\n# Concepts\n\n## Simulation\n\nBoxes and Bubbles implements a very simple physics simulation. It updates a list of bodies\nat each step. There is no time-normalized integration - if you run it with higher fps, \nit will run faster.\n\nSee the [example code](https://github.com/jastice/boxes-and-bubbles/blob/master/Example.elm) \nand the [example animation](http://jastice.github.io/boxes-and-bubbles/) that it produces\nfor a working usage example.\n\n## Bodies\n\nEverything in Boxes and Bubbles is a Body. A Body is a Box, or a Bubble.\n\nBodies have some properties:\n\n* `position` -- reference point and center of body\n* `velocity` -- direction and speed of movement\n* `mass` -- the mass (stored as inverseMass)\n* `restitution` -- bounciness factor: how much force is preserved on collisions\n* `shape` -- radius for Bubble, extents for Box, wrapped in an ADT.\n\nBodies can have infinite mass. Infinite mass bodies are not affected by any forces.\n\n## Forces\n\nTwo types of global forces: gravity and ambient. Both are vectors,\nso that they could point in any direction. Both can vary over time.\nAmbient force takes the mass of objects into account, while gravity does not.\n\n# Functions\n\n## Constructors and helpers\n\n@docs bubble, box, bounds\n\n## Running the simulation\n\n@docs step\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bounds",
            "comment": " Create a bounding box made up of boxes with infinite mass.\n\n    bounds (width,height) thickness restitution center meta\n\nCreate bounds with width and height 800, 50 thick walls and 0.6 restitution and a String tag\nat the origin:\n\n    bounds (800,800) 50 0.6 (0,0) \"tag\"\n\n",
            "type": "BoxesAndBubbles.Math2D.Vec2 -> Float -> Float -> BoxesAndBubbles.Math2D.Vec2 -> meta -> List (BoxesAndBubbles.Bodies.Body meta)"
          },
          {
            "name": "box",
            "comment": " Create a box. Mass is derived from density and size.\n    \n    box (width,height) position velocity density restitution\n\nCreate a box with width 100, height 20, density 1 and restitution 1\nat origin, moving toward the upper right:\n\n    box (100,20) 1 1 (0,0) (3,3)\n",
            "type": "BoxesAndBubbles.Math2D.Vec2 -> Float -> Float -> BoxesAndBubbles.Math2D.Vec2 -> BoxesAndBubbles.Math2D.Vec2 -> meta -> BoxesAndBubbles.Bodies.Body meta"
          },
          {
            "name": "bubble",
            "comment": " Create a bubble. Mass is derived from density and size.\n\n    bubble radius density restitution position velocity meta\n\nCreate a bubble with radius 100 with density 1 and restitution 1\nat origin and a string \"tag\", moving toward the upper right:\n\n    bubble 100 1 1 (0,0) (3,3) \"tag\"\n",
            "type": "Float -> Float -> Float -> BoxesAndBubbles.Math2D.Vec2 -> BoxesAndBubbles.Math2D.Vec2 -> meta -> BoxesAndBubbles.Bodies.Body meta"
          },
          {
            "name": "step",
            "comment": " Perform a step in the physics simulation. Applies forces to objects and updates them based\non their velocity and collisions. Order of bodies in input list is not preserved in the output.\n\nThe `gravity` parameter give a global force that ignores object masses, while `force` \ntakes mass into account. Since both types of forces are vectors, they can point in any direction.\nThe ambient force can be used to simulate a current, for example.\n\n    step gravity ambient bodies\n\nApply a downward gravity and sideways ambient force to bodies:\n\n    step (0,-0.2) (20,0) bodies\n",
            "type": "BoxesAndBubbles.Math2D.Vec2 -> BoxesAndBubbles.Math2D.Vec2 -> List (BoxesAndBubbles.Bodies.Body meta) -> List (BoxesAndBubbles.Bodies.Body meta)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "BoxesAndBubbles.Engine",
        "comment": " The actual physics implementation of Boxes and Bubbles.\n\n## Exposed functions\n\nExposes some internal functions mostly for use in the actual API \nand to let you fine-tune your application.\nPlease consult the source code to understand these functions.\nNo implication of API stability.\n\n@docs update, collide, collideWith\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "collide",
            "comment": " Recursive collision resolution.\n\nInternal method, exposed only for your convenience. \nNo implication of API stability.\n",
            "type": "List (BoxesAndBubbles.Bodies.Body a) -> List (BoxesAndBubbles.Bodies.Body a) -> List (BoxesAndBubbles.Bodies.Body a)"
          },
          {
            "name": "collideWith",
            "comment": " Collide a0 with all the bodies, modifying b along the way.\n\n   return (updated a0, [updated bodies])\n\n   Internal method, exposed only for your convenience. No implication of API stability.\n",
            "type": "BoxesAndBubbles.Bodies.Body a -> List (BoxesAndBubbles.Bodies.Body a) -> List (BoxesAndBubbles.Bodies.Body a) -> List (BoxesAndBubbles.Bodies.Body a)"
          },
          {
            "name": "update",
            "comment": " Update body position with its speed and apply additional forces.\n\nMay be used to gain a more fine-grained control over what forces affect.\nNo implication of API stability.\n",
            "type": "BoxesAndBubbles.Math2D.Vec2 -> BoxesAndBubbles.Math2D.Vec2 -> BoxesAndBubbles.Bodies.Body a -> BoxesAndBubbles.Bodies.Body a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "BoxesAndBubbles.Bodies",
        "comment": " # Boxes and Bubbles Bodies.\nDefines bodies as used by the Boxes and Bubbles engine. You will need these data types to \ndisplay and modify bodies being calculated. For creating them, you may prefer the constructor \nfunctions in the BoxesAndBubbles module.\n\n@docs Body, Shape\n\n",
        "aliases": [
          {
            "name": "Body",
            "comment": " A rigid body in the Boxes and Bubbles universe, as used internally by the engine.\nMass is stored as inverse, because it is more convenient for calculation.\n\nType parameter `meta` can be used to attach arbitrary other information used\nby your application to bodies. For example: label, hit points, an object type ADT, or more low-level, \nan id used to associate the body with arbitrary other data via a Dict.\n",
            "args": [
              "meta"
            ],
            "type": "{ pos : BoxesAndBubbles.Math2D.Vec2 , velocity : BoxesAndBubbles.Math2D.Vec2 , inverseMass : Float , restitution : Float , shape : BoxesAndBubbles.Bodies.Shape , meta : meta }"
          }
        ],
        "types": [
          {
            "name": "Shape",
            "comment": " Shape data for a body. \nA bubble is defined by its radius.\nA box is defined by its extents (half-width/half-height from the center).\nWe use half-lengths because that's what is convenient for calculation, and it's most consistent\nwith using radius for circles.\n",
            "args": [],
            "cases": [
              [
                "Box",
                [
                  "BoxesAndBubbles.Math2D.Vec2"
                ]
              ],
              [
                "Bubble",
                [
                  "Float"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "javcasas/elm-decimal",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Data.Decimal",
        "comment": "\n\n# The datatype\n@docs Decimal\n\n# From stuff\n@docs fromInt\n@docs fromIntWithExponent\n@docs fromString\n@docs fromFloat\n@docs unsafeFromString\n\n# To stuff\n@docs toString\n@docs toFloat\n\n# Arithmetic operations\n@docs add\n@docs sub\n@docs negate\n@docs mul\n@docs fastdiv\n\n# Rounding\n@docs truncate\n@docs round\n\n# Comparing\n@docs gt\n@docs gte\n@docs eq\n@docs neq\n@docs lt\n@docs lte\n@docs compare\n\n# Misc operations\n@docs abs\n@docs getDigit\n\n# Common numbers\n@docs zero\n@docs one\n@docs minusOne\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Decimal",
            "comment": "\nThe Decimal data type\nIt is represented as mantissa * 10 ^ exponent\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "abs",
            "comment": "\nAbsolute value (sets the sign as positive)\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "add",
            "comment": "\nAddition\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "compare",
            "comment": "\nCompares two Decimals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Basics.Order"
          },
          {
            "name": "eq",
            "comment": "\nEquals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "fastdiv",
            "comment": "\nFast and dirty division. Don't expect too much precision from this division. Dividing by zero is bad, and Nothing will be returned.\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Maybe.Maybe Data.Decimal.Decimal"
          },
          {
            "name": "fromFloat",
            "comment": "\nConverts a Float to a Decimal\n",
            "type": "Float -> Maybe.Maybe Data.Decimal.Decimal"
          },
          {
            "name": "fromInt",
            "comment": "\nConverts an Int to a Decimal\n",
            "type": "Int -> Data.Decimal.Decimal"
          },
          {
            "name": "fromIntWithExponent",
            "comment": "\nConverts an Int to a Decimal, but specifying the exponent\n",
            "type": "Int -> Int -> Data.Decimal.Decimal"
          },
          {
            "name": "fromString",
            "comment": "\nConverts a String to a Maybe Decimal. The string shall be in the format [<sign>]<numbers>[.<numbers>][e<numbers>]\n",
            "type": "String -> Maybe.Maybe Data.Decimal.Decimal"
          },
          {
            "name": "getDigit",
            "comment": "\nGets the specified digit from a Decimal. The digits are:\n0 -> units\n1 -> tens\n2 -> hundreds\nand so on\n-1 -> tenths\n-2 -> hundredths\nand so on\n",
            "type": "Int -> Data.Decimal.Decimal -> Int"
          },
          {
            "name": "gt",
            "comment": "\nGreater than\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "gte",
            "comment": "\nGreater than or equals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "lt",
            "comment": "\nLess than\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "lte",
            "comment": "\nLess than or equals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "minusOne",
            "comment": "\nThe number -1\n",
            "type": "Data.Decimal.Decimal"
          },
          {
            "name": "mul",
            "comment": "\nMultiplication\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "negate",
            "comment": "\nChanges the sign of a Decimal\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "neq",
            "comment": "\nNot equals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "one",
            "comment": "\nThe number 1\n",
            "type": "Data.Decimal.Decimal"
          },
          {
            "name": "round",
            "comment": "\nRounds the Decimal to the specified decimal places\n",
            "type": "Int -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "sub",
            "comment": "\nSubstraction\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "toFloat",
            "comment": "\nConverts a Decimal to a Float\n",
            "type": "Data.Decimal.Decimal -> Float"
          },
          {
            "name": "toString",
            "comment": "\nConverts a Decimal to a String\n",
            "type": "Data.Decimal.Decimal -> String"
          },
          {
            "name": "truncate",
            "comment": "\nTruncates the Decimal to the specified decimal places\n",
            "type": "Int -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "unsafeFromString",
            "comment": "\nConverts a String to a Decimal,\nbut if the string does not represent\na valid Decimal, it crashes.\nUseful for Decimal constants.\n",
            "type": "String -> Data.Decimal.Decimal"
          },
          {
            "name": "zero",
            "comment": "\nThe number 0\n",
            "type": "Data.Decimal.Decimal"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "javcasas/elm-integer",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Data.Integer",
        "comment": " Infinite digits integers\n# The datatype\n@docs Integer\n@docs Sign\n\n# From/To\n@docs fromInt\n@docs fromString\n@docs toString\n\n# Common operations\n@docs add\n@docs sub\n@docs negate\n@docs mul\n@docs divmod\n@docs unsafeDivmod\n@docs abs\n@docs sign\n\n# Comparison\n@docs compare\n@docs gt\n@docs gte\n@docs lt\n@docs lte\n@docs eq\n@docs neq\n@docs max\n@docs min\n\n# Common numbers\n@docs zero\n@docs one\n@docs minusOne\n\n# Internals\n@docs max_digit_value\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Integer",
            "comment": " Integer type ",
            "args": [],
            "cases": []
          },
          {
            "name": "Sign",
            "comment": " The sign of the integer ",
            "args": [],
            "cases": [
              [
                "Positive",
                []
              ],
              [
                "Negative",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "abs",
            "comment": " Absolute value ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "add",
            "comment": " Adds two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "compare",
            "comment": " Compares two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Basics.Order"
          },
          {
            "name": "divmod",
            "comment": " Division and modulus ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Maybe.Maybe ( Data.Integer.Integer, Data.Integer.Integer )"
          },
          {
            "name": "eq",
            "comment": " Equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "fromInt",
            "comment": " Makes an Integer from an Int ",
            "type": "Int -> Data.Integer.Integer"
          },
          {
            "name": "fromString",
            "comment": " Makes an Integer from a String ",
            "type": "String -> Maybe.Maybe Data.Integer.Integer"
          },
          {
            "name": "gt",
            "comment": " Greater than ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "gte",
            "comment": " Greater than or equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "lt",
            "comment": " Less than ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "lte",
            "comment": " Less than or equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "max",
            "comment": " Returns the largest of two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "max_digit_value",
            "comment": " Enough to hold digit * digit without overflowing to double ",
            "type": "Int"
          },
          {
            "name": "min",
            "comment": " Returns the smallest of two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "minusOne",
            "comment": " Number -1 ",
            "type": "Data.Integer.Integer"
          },
          {
            "name": "mul",
            "comment": " Multiplies two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "negate",
            "comment": " Changes the sign of an Integer ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "neq",
            "comment": " Not equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "one",
            "comment": " Number 1 ",
            "type": "Data.Integer.Integer"
          },
          {
            "name": "sign",
            "comment": " Get the sign of the integer ",
            "type": "Data.Integer.Integer -> Data.Integer.Sign"
          },
          {
            "name": "sub",
            "comment": " Substracts the second Integer from the first ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "toString",
            "comment": " Converts the Integer to a String ",
            "type": "Data.Integer.Integer -> String"
          },
          {
            "name": "unsafeDivmod",
            "comment": " divmod that returns the pair of values, or crashes if the divisor is zero ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> ( Data.Integer.Integer, Data.Integer.Integer )"
          },
          {
            "name": "zero",
            "comment": " Number 0 ",
            "type": "Data.Integer.Integer"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jergason/elm-hash",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Hash",
        "comment": " A simple hash function for Elm.\n\n@docs hash\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "hash",
            "comment": "\nHashes a String to an Int using the\n[djb2](http://www.cse.yorku.ca/~oz/hash.html) algorithm. This is in no way\ncryptographically secure. It is just for turning abirary strings in to numbers.\n\n    hash \"yolo swaggins\" == 2438413579\n",
            "type": "String -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jinjor/elm-diff",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Diff",
        "comment": " Compares two list and returns how they have changed.\nEach function internally uses Wu's [O(NP) algorithm](http://myerslab.mpi-cbg.de/wp-content/uploads/2014/06/np_diff.pdf).\n\n# Types\n@docs Change\n\n# Diffing\n@docs diff, diffLines\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Change",
            "comment": " This describes how each line has changed and also contains its value.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Added",
                [
                  "a"
                ]
              ],
              [
                "Removed",
                [
                  "a"
                ]
              ],
              [
                "NoChange",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Compares general lists.\n\n```\ndiff [1, 3] [2, 3] == [Removed 1, Added 2, NoChange 3] -- True\n```\n\n",
            "type": "List a -> List a -> List (Diff.Change a)"
          },
          {
            "name": "diffLines",
            "comment": " Compares two text.\n\nGiving the following text\n\n```\na = \"\"\"aaa\nbbb\nddd\"\"\"\n\nb = \"\"\"zzz\naaa\nccc\nddd\"\"\"\n```\n\nresults in\n\n```\n[ Added \"zzz\"\n, NoChange \"aaa\"\n, Removed \"bbb\"\n, Added \"ccc\"\n, NoChange \"ddd\"\n]\n```\n\n.\n\n",
            "type": "String -> String -> List (Diff.Change String)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jinjor/elm-inline-hover",
    "version": "1.0.1",
    "docs": [
      {
        "name": "InlineHover",
        "comment": " Wrap any elements defined in [Html](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html)\n# Make Special Elements\n@docs hover\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "hover",
            "comment": " Make a special element that can notice hover state.\n```\nmain =\n  ul []\n    [ hover styles li [] [ text \"Hello\" ]\n    , hover styles li [] [ text \"World\" ]\n    ]\n\nstyles =\n  [(\"background\", \"#abd\")]\n```\n",
            "type": "List ( String, String ) -> (List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg) -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jinjor/elm-time-travel",
    "version": "1.0.17",
    "docs": [
      {
        "name": "TimeTravel.Navigation",
        "comment": " Each functions in this module has the same interface as [Navigation](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation)\n\n# Create a Program\n@docs program, programWithFlags\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "program",
            "comment": " See [Navigation.program](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#program)\n",
            "type": "Navigation.Parser data -> { init : data -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , urlUpdate : data -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " See [Navigation.programWithFlags](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#programWithFlags)\n",
            "type": "Navigation.Parser data -> { init : flags -> data -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , urlUpdate : data -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "TimeTravel.Html.App",
        "comment": " Each functions in this module has the same interface as [Html.App](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App)\n\n# Start your Program\n@docs beginnerProgram, program, programWithFlags\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "beginnerProgram",
            "comment": " See [Html.App.beginnerProgram](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App#beginnerProgram)\n",
            "type": "{ model : model , view : model -> Html.Html msg , update : msg -> model -> model } -> Platform.Program Basics.Never"
          },
          {
            "name": "program",
            "comment": " See [Html.App.program](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App#program)\n",
            "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " See [Html.App.programWithFlags](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App#programWithFlags)\n",
            "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "joneshf/elm-constraint",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Constraint.Monoid",
        "comment": "\n@docs Monoid\n@docs nTimes\n",
        "aliases": [
          {
            "name": "Monoid",
            "comment": "\nGeneralized identity.\n",
            "args": [
              "a",
              "r"
            ],
            "type": "Constraint.Semigroup.Semigroup a { r | identity : a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "nTimes",
            "comment": "\nConcatenate a value `n` times.\n",
            "type": "Int -> a -> Constraint.Constraint (Constraint.Monoid.Monoid a r) a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Constraint.Ord",
        "comment": "\n@docs Ord\n@docs ordEither, ordList, ordMaybe\n@docs max, min\n",
        "aliases": [
          {
            "name": "Ord",
            "comment": "\nGeneralized ordering.\n",
            "args": [
              "a",
              "r"
            ],
            "type": "{ r | compare : a -> a -> Basics.Order }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "max",
            "comment": "\nFind the larger of two values.\n",
            "type": "a -> a -> Constraint.Constraint (Constraint.Ord.Ord a r) a"
          },
          {
            "name": "min",
            "comment": "\nFind the smaller of two values.\n",
            "type": "a -> a -> Constraint.Constraint (Constraint.Ord.Ord a r) a"
          },
          {
            "name": "ordEither",
            "comment": "\nIf we have an `Ord a r` and an `Ord b r`, then we can make an `Ord (Result a b) r`.\n",
            "type": "Constraint.Ord.Ord a r -> Constraint.Ord.Ord b r -> Constraint.Ord.Ord (Result.Result a b) r"
          },
          {
            "name": "ordList",
            "comment": "\nIf we have an `Ord a r`, then we can make an `Ord (List a) r`.\n",
            "type": "Constraint.Ord.Ord a r -> Constraint.Ord.Ord (List a) r"
          },
          {
            "name": "ordMaybe",
            "comment": "\nIf we have an `Ord a r`, then we can make an `Ord (Maybe a) r`.\n",
            "type": "Constraint.Ord.Ord a r -> Constraint.Ord.Ord (Maybe.Maybe a) r"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Constraint.Eq",
        "comment": "\n@docs Eq\n@docs eqEither, eqList, eqMaybe\n@docs (===), (=/=)\n",
        "aliases": [
          {
            "name": "Eq",
            "comment": "\nGeneralized equality.\n",
            "args": [
              "a",
              "r"
            ],
            "type": "{ r | eq : a -> a -> Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "=/=",
            "comment": "\nNegation of `(===)`.\n",
            "type": "a -> a -> Constraint.Constraint (Constraint.Eq.Eq a r) Bool"
          },
          {
            "name": "===",
            "comment": "\nOperator alias for `eq`.\n",
            "type": "a -> a -> Constraint.Constraint (Constraint.Eq.Eq a r) Bool"
          },
          {
            "name": "eqEither",
            "comment": "\nIf we have an `Eq a r` and an `Eq b r`, then we can make an `Eq (Result a b) r`.\n",
            "type": "Constraint.Eq.Eq a r -> Constraint.Eq.Eq b r -> Constraint.Eq.Eq (Result.Result a b) r"
          },
          {
            "name": "eqList",
            "comment": "\nIf we have an `Eq a r`, then we can make an `Eq (List a) r`.\n",
            "type": "Constraint.Eq.Eq a r -> Constraint.Eq.Eq (List a) r"
          },
          {
            "name": "eqMaybe",
            "comment": "\nIf we have an `Eq a r`, then we can make an `Eq (Maybe a) r`.\n",
            "type": "Constraint.Eq.Eq a r -> Constraint.Eq.Eq (Maybe.Maybe a) r"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Constraint.Semigroup",
        "comment": "\n@docs Semigroup\n@docs (++)\n",
        "aliases": [
          {
            "name": "Semigroup",
            "comment": "\nGeneralized concatenation.\n",
            "args": [
              "a",
              "r"
            ],
            "type": "{ r | concat : a -> a -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "++",
            "comment": "\nOperator alias for `concat`.\n",
            "type": "a -> a -> Constraint.Constraint (Constraint.Semigroup.Semigroup a r) a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Constraint",
        "comment": "\n@docs Constraint\n@docs (<&>), (>>=)\n@docs andThen, ap, ask, bind, constraints, map, pam, pure, run, with\n",
        "aliases": [],
        "types": [
          {
            "name": "Constraint",
            "comment": "\nThis type goes by many names: Reader, Kleisli, Function, etc.\n\nThis is simply a wrapper around `a -> b`.\n",
            "args": [
              "r",
              "a"
            ],
            "cases": [
              [
                "Constraint",
                [
                  "r -> a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "<&>",
            "comment": "\nAn operator alias for `pam`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Constraint.Constraint r a -> (a -> b) -> Constraint.Constraint r b"
          },
          {
            "name": ">>=",
            "comment": "\nAn operator alias for `andThen`.\n",
            "type": "Constraint.Constraint r a -> (a -> Constraint.Constraint r b) -> Constraint.Constraint r b"
          },
          {
            "name": "andThen",
            "comment": "\nLike `bind` but flipped.\n",
            "type": "Constraint.Constraint r a -> (a -> Constraint.Constraint r b) -> Constraint.Constraint r b"
          },
          {
            "name": "ap",
            "comment": "\nApplies the output of a `Constraint` to the output of another `Constraint`\n",
            "type": "Constraint.Constraint r (a -> b) -> Constraint.Constraint r a -> Constraint.Constraint r b"
          },
          {
            "name": "ask",
            "comment": "\nThreads the input directly through the output.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Constraint.Constraint a a"
          },
          {
            "name": "bind",
            "comment": "\nSubstitutes a value in a `Constraint`.\n",
            "type": "(a -> Constraint.Constraint r b) -> Constraint.Constraint r a -> Constraint.Constraint r b"
          },
          {
            "name": "constraints",
            "comment": "\nAn alias for `ask` that sometimes makes things easier to read.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Constraint.Constraint a a"
          },
          {
            "name": "map",
            "comment": "\nTransforms the output with the given function.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> b) -> Constraint.Constraint r a -> Constraint.Constraint r b"
          },
          {
            "name": "pam",
            "comment": "\nLike `map` but flipped.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Constraint.Constraint r a -> (a -> b) -> Constraint.Constraint r b"
          },
          {
            "name": "pure",
            "comment": "\nEmbeds a value in a `Constraint`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "a -> Constraint.Constraint r a"
          },
          {
            "name": "run",
            "comment": "\nUnwraps the `Constraint` constructor.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Constraint.Constraint r a -> r -> a"
          },
          {
            "name": "with",
            "comment": "\nLike `run` but flipped.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "r -> Constraint.Constraint r a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "joneshf/elm-mom",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Mom.Option",
        "comment": "\n@docs Option\n@docs none, run, some\n",
        "aliases": [
          {
            "name": "Option",
            "comment": "\nA computation that may fail with no information about the failure.\n",
            "args": [
              "a"
            ],
            "type": "Mom.Mom (Maybe.Maybe a) a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "none",
            "comment": "\nA failed computation.\n",
            "type": "Mom.Option.Option a"
          },
          {
            "name": "run",
            "comment": "\nRun the computation extracting the value to `Maybe a`.\n",
            "type": "Mom.Option.Option a -> Maybe.Maybe a"
          },
          {
            "name": "some",
            "comment": "\nA successful computation.\n",
            "type": "a -> Mom.Option.Option a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Mom.Identity",
        "comment": "\n@docs Identity\n@docs identity, run\n",
        "aliases": [
          {
            "name": "Identity",
            "comment": "\nA computation with no effects.\n",
            "args": [
              "a"
            ],
            "type": "Mom.Mom a a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "identity",
            "comment": "\nAlias for `pure`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "a -> Mom.Identity.Identity a"
          },
          {
            "name": "run",
            "comment": "\nRemove the value the computation.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Identity.Identity a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Mom.Either",
        "comment": "\n@docs Either\n@docs left, right, run\n",
        "aliases": [
          {
            "name": "Either",
            "comment": "\nA computation that may fail with additional information about the failure.\n",
            "args": [
              "a",
              "b"
            ],
            "type": "Mom.Mom (Result.Result a b) b"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "left",
            "comment": "\nA failed computation.\n",
            "type": "a -> Mom.Either.Either a b"
          },
          {
            "name": "right",
            "comment": "\nA successful computation.\n",
            "type": "b -> Mom.Either.Either a b"
          },
          {
            "name": "run",
            "comment": "\nRun the computation extracting the value to `Result a b`.\n",
            "type": "Mom.Either.Either a b -> Result.Result a b"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Mom.Always",
        "comment": "\n@docs Always\n@docs always, run\n",
        "aliases": [
          {
            "name": "Always",
            "comment": "\nA computation that never changes its value.\n",
            "args": [
              "a",
              "b"
            ],
            "type": "Mom.Mom a b"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "always",
            "comment": "\nA value that never changes in the computation.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "a -> Mom.Always.Always a b"
          },
          {
            "name": "run",
            "comment": "\nRemove the value the computation.\n",
            "type": "Mom.Always.Always a b -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Mom",
        "comment": "\n@docs Mom\n@docs (#>), (*>), (<#>), (<$), (<$>), (<*), (<*>), (<=<), (=<<), (>=>), (>>=)\n@docs ap, bind, callCC, forever, join, map, pure, run, unless, when, with\n",
        "aliases": [],
        "types": [
          {
            "name": "Mom",
            "comment": "\nGeneralizes most computational effects.\n\nBased on ideas from http://blog.sigfpe.com/2008/12/mother-of-all-monads.html and http://fplab.bitbucket.org/posts/2007-12-09-continuations-and-classic.html\n",
            "args": [
              "r",
              "a"
            ],
            "cases": [
              [
                "Mom",
                [
                  "(a -> r) -> r"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "#>",
            "comment": "\nFlipped version of `(<$)`.\nPun with \"dollar\" and \"pound\".\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r a -> b -> Mom.Mom r b"
          },
          {
            "name": "*>",
            "comment": "\nExecutes both computational effects ignoring the value of the first.\n",
            "type": "Mom.Mom r a -> Mom.Mom r b -> Mom.Mom r b"
          },
          {
            "name": "<#>",
            "comment": "\nFlipped version of `(<$>)`.\nPun with \"dollar\" and \"pound\".\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r a -> (a -> b) -> Mom.Mom r b"
          },
          {
            "name": "<$",
            "comment": "\nReplaces values of a computational effect by the given function.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "b -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "<$>",
            "comment": "\nAn operator alias for `map`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> b) -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "<*",
            "comment": "\nExecutes both computational effects ignoring the value of the second.\n",
            "type": "Mom.Mom r a -> Mom.Mom r b -> Mom.Mom r a"
          },
          {
            "name": "<*>",
            "comment": "\nAn operator alias for `ap`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r (a -> b) -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "<=<",
            "comment": "\nFlipped version of `(>=>)`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(b -> Mom.Mom r c) -> (a -> Mom.Mom r b) -> a -> Mom.Mom r c"
          },
          {
            "name": "=<<",
            "comment": "\nAn operator alias for `bind`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> Mom.Mom r b) -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": ">=>",
            "comment": "\nSequences two computational effect substitutions.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> Mom.Mom r b) -> (b -> Mom.Mom r c) -> a -> Mom.Mom r c"
          },
          {
            "name": ">>=",
            "comment": "\nFlipped version of `(=<<)`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r a -> (a -> Mom.Mom r b) -> Mom.Mom r b"
          },
          {
            "name": "ap",
            "comment": "\nTransforms values of a computational effect by the given function in the computational effect.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r (a -> b) -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "bind",
            "comment": "\nSubstitues a value in an effectful computation.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> Mom.Mom r b) -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "callCC",
            "comment": "\nControl flow primitive for effectful computations.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "((a -> Mom.Mom r b) -> Mom.Mom r a) -> Mom.Mom r a"
          },
          {
            "name": "forever",
            "comment": "\nExecutes the effectful computation forever.\n",
            "type": "Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "join",
            "comment": "\nRemoves a layer of computational effects.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r (Mom.Mom r a) -> Mom.Mom r a"
          },
          {
            "name": "map",
            "comment": "\nTransforms values of a computational effect by the given function.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> b) -> Mom.Mom r a -> Mom.Mom r b"
          },
          {
            "name": "pure",
            "comment": "\nEmbeds a pure value into an effectful computation.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "a -> Mom.Mom r a"
          },
          {
            "name": "run",
            "comment": "\nExtracts the computational effects to the elm level.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "Mom.Mom r a -> (a -> r) -> r"
          },
          {
            "name": "unless",
            "comment": "\nExecutes the effectful computation only when the `Bool` is false.\n",
            "type": "Bool -> Mom.Mom r () -> Mom.Mom r ()"
          },
          {
            "name": "when",
            "comment": "\nExecutes the effectful computation only when the `Bool` is true.\n",
            "type": "Bool -> Mom.Mom r () -> Mom.Mom r ()"
          },
          {
            "name": "with",
            "comment": "\nFlipped version of `run`\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
            "type": "(a -> r) -> Mom.Mom r a -> r"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "joneshf/elm-proof",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Don't.Worry.I.Know.What.I'm.Doing",
        "comment": "\nSometimes you need to tell the compiler that everything will be alright.\n\nUsually this happens when you are case matching on something,\nyou can prove that certain cases cannot happen,\nbut elm still wants you to handle the cases that cannot happen anyway.\n\n@docs believe_me\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "believe_me",
            "comment": "\nThis is just [`Debug.crash`](http://package.elm-lang.org/packages/elm-lang/core/latest/Debug#crash) with a prefixed error message.\n\nIf you use this, pass in a string of your module name and the name of the function where you think you're smarter than the compiler.\n",
            "type": "String -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Equality",
        "comment": "\nA module providing primitives for proving type equalities.\n\nType equality is stronger than type equivalence.\nWith equivalence, we assert that there is some way to get from one type to the other (and back again).\nWith equality, we assert that there is exactly one type we're even talking about!\n\n@docs Equal, refl, symm, trans, inj, symmInj, cast, symmCast\n\n# Example\n\nThe [Equivalence example][] left a bad taste at the end with the realization that we weren't able to protect the generation of the view at compile time.\nFortunately all is not lost.\nWe can use a type very similar to [Equiv a b][], and not export its constructor.\nThen, a malicious user cannot attempt to create their own \"proof\" ad-hoc.\n\n[Equal a b][] is just such a type.\nLet's start by replacing all occurrences of [Equiv a b][] with [Equal a b][]:\n\n```elm\ntype Model permissions\n  = ModelUser (Equal permissions User) { name : String }\n  | ModelMod (Equal permissions Mod) { name : String }\n  | ModelAdmin (Equal permissions Admin) { name : String }\n```\n\nWe have a very similar API, so we can reuse the function [refl][] when creating `modelUser` and friends.\n\nWhen we go to dispatch on the proofs, we can't destructure so we use [cast][] and [symmCast][] instead.\n\n```elm\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser proof record ->\n      Html.App.map (symmCast proof) (viewUser Comment)\n\n    ModelMod proof record ->\n      Html.App.map (symmCast proof) (viewMod Warn)\n\n    ModelAdmin proof record ->\n      Html.App.map (symmCast proof) (viewAdmin Delete)\n```\n\nThat's it!\n\nNow, if a malicious user tries to use `viewAdmin` in the `ModelMod` case, we get a compile time error!\nFinally, we have elm helping us in a way that is even more productive than before!\nAlso, If we attempt to use any view at the top level (like in `main`), then the top level will only work for a certain permission level.\nLike if we wanted to use `viewUser` at the top level, then the model could only work for `Model User`, and the current update would not typecheck at all!\n\nIf removing whole classes of bugs isn't pragmatic, I don't know what is.\n\nLet's see it all together for completeness sake:\n\n```elm\ntype User\n  = Comment\n\ntype Mod\n  = Warn\n\ntype Admin\n  = Delete\n\ntype Model permissions\n  = ModelUser (Equal permissions User) { name : String }\n  | ModelMod (Equal permissions Mod) { name : String }\n  | ModelAdmin (Equal permissions Admin) { name : String }\n\nmodelUser : String -> Model User\nmodelUser name =\n  ModelUser refl { name = name }\n\nmodelMod : String -> Model Mod\nmodelMod name =\n  ModelMod refl { name = name }\n\nmodelAdmin : String -> Model Admin\nmodelAdmin name =\n  ModelAdmin refl { name = name }\n\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser proof record ->\n      Html.App.map (symmCast proof) (viewUser Comment)\n\n    ModelMod proof record ->\n      Html.App.map (symmCast proof) (viewMod Warn)\n\n    ModelAdmin proof record ->\n      Html.App.map (symmCast proof) (viewAdmin Delete)\n\nviewUser : User -> Html User\nviewUser Comment =\n  text \"Welcome friend!\"\n\nviewMod : Mod -> Html Mod\nviewMod Warn =\n  button [ onClick Warn ]\n    [ text \"Warn all users\" ]\n\nviewAdmin : Admin -> Html Admin\nviewAdmin Delete =\n  button [ onClick Delete ]\n    [ text \"Delete all users\" ]\n```\n\n[cast]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equality#cast\n[Equal a b]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equality#Equal\n[Equiv a b]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equivalence#Equiv\n[Equivalence example]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equivalence#example\n[refl]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equality#refl\n[symmCast]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equality#symmCast\n",
        "aliases": [],
        "types": [
          {
            "name": "Equal",
            "comment": "\nA type that expresses two types being equal.\n\nThe only reason this works is that the value constructor is not exposed from the module.\nIf the value constructor is exposed, we end up with only being able to express equivalence.\n",
            "args": [
              "a",
              "b"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "cast",
            "comment": "\nIf we know that `a` is equal to `b`, and we have an `a`,\nthen we can get a `b`.\n",
            "type": "Equality.Equal a b -> a -> b"
          },
          {
            "name": "inj",
            "comment": "\nType equalities are injective.\n\nIf we know `a` is equal to `c`, and if we know `b` is equal to `c`,\nthen we also know `a` is equal to `b`.\n",
            "type": "Equality.Equal a c -> Equality.Equal b c -> Equality.Equal a b"
          },
          {
            "name": "refl",
            "comment": "\nType equalities are reflexive.\n\nTrivially, every type is equal to itself.\n",
            "type": "Equality.Equal a a"
          },
          {
            "name": "symm",
            "comment": "\nType equalities are symmetric.\n\nIf we know `a` is equal to `b`, then we also know `b` is equal to `a`.\n",
            "type": "Equality.Equal a b -> Equality.Equal b a"
          },
          {
            "name": "symmCast",
            "comment": "\nIf we know that `a` is equal to `b`, and we have a `b`,\nthen we can get an `a`.\n",
            "type": "Equality.Equal a b -> b -> a"
          },
          {
            "name": "symmInj",
            "comment": "\nType equalities are injective in a symmetric way.\n\nIf we know `a` is equal to `b`, and if we know `a` is equal to `c`,\nthen we also know `b` is equal to `c`.\n",
            "type": "Equality.Equal a b -> Equality.Equal a c -> Equality.Equal b c"
          },
          {
            "name": "trans",
            "comment": "\nType equalities are transitive.\n\nIf we know `a` is equal to `b`, and if we know `b` is equal to `c`,\nthen we also know `a` is equal to `c`.\n",
            "type": "Equality.Equal a b -> Equality.Equal b c -> Equality.Equal a c"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Equivalence",
        "comment": "\nA module providing primitives for proving type equivalence.\n\n@docs Equiv, refl, symm, trans\n\n# Example\n\nWe can motivate this module by stealing the example from [elm-proxy][].\nWe've got different permission levels in our program that we want to enforce:\n\n```elm\ntype Permissions\n  = User\n  | Mod\n  | Admin\n```\n\nThe simple thing to do is throw this into a field in a `Model`:\n\n```elm\ntype alias Model =\n  { name : String\n  , permissions : Permissions\n  }\n```\n\nBut, then elm gives us no help when we mess up:\n\n```elm\nview : Model -> Html Msg\nview model =\n  case model.permissions of\n    User ->\n      viewUser\n\n    Mod ->\n      viewAdmin\n\n    Admin ->\n      viewMod\n\nviewUser : Html msg\nviewUser =\n  text \"Welcome friend!\"\n\nviewMod : Html Msg\nviewMod =\n  button [ onClick Mod ]\n    [ text \"Warn all users\" ]\n\nviewAdmin : Html Msg\nviewAdmin =\n  button [ onClick Admin ]\n    [ text \"Delete all users\" ]\n```\n\nElm happily compiles this program, and the `Mod`s can now delete all the users while the `Admin`s can't do anything to stop them!\n\nWith the solution proposed by [elm-proxy][] we have compile time guarantees that we can't accidentally use `Mod` as a `User` or some such. It's a very light weight start to getting more confidence in our codebase.\n\nFor all its good, it has one important drawback.\nIf we're not careful, we can [`reproxy`][reproxy] to an illegal state.\nSo while [elm-proxy][] is a great first step toward ensuring some confidence in our program, it's just that: a first step.\nLet's take another step :).\n\n## Equivalences\n\nWe want to take a slightly different approach to solving this problem than [elm-proxy][].\nWe want to use type equivalences as proofs rather than passing around dummy arguments.\n\nType equivalences are represented here as a pair of functions between two types.\nThe definition, is exactly that:\n\n```elm\ntype alias Equiv a b =\n  (a -> b, b -> a)\n```\n\nWe are stating that `a` is equivalent to `b` when we have a function that maps `a`s to `b`s and a function that maps `b`s to `a`s.\n\nWe can use `Equiv a b` to express the differences in each permission of our program.\n\nAgain, let's start by bumping our value level permission constructors to the type level:\n\n```elm\ntype User\n  = User\n\ntype Mod\n  = Mod\n\ntype Admin\n  = Admin\n```\n\nNow that we have different types, let's talk about how we want to use the types.\nWe'd like to be able to have each view depend on the permission level and send messages of the same level as well.\nWe want functions with the types like: `User -> Html User`, `Mod -> Html Mod`, and `Admin -> Html Admin`.\nLet's define these:\n\n```elm\nviewUser : User -> Html User\nviewUser User =\n  text \"Welcome friend!\"\n\nviewMod : Mod -> Html Mod\nviewMod Mod =\n  button [ onClick Mod ]\n    [ text \"Warn all users\" ]\n\nviewAdmin : Admin -> Html Admin\nviewAdmin Admin =\n  button [ onClick Admin ]\n    [ text \"Delete all users\" ]\n```\n\nThose value level constructors are a bit weird.\nLet's rename them:\n\n```elm\ntype User\n  = Comment\n\ntype Mod\n  = Warn\n\ntype Admin\n  = Delete\n\nviewUser : User -> Html User\nviewUser Comment =\n  text \"Welcome friend!\"\n\nviewMod : Mod -> Html Mod\nviewMod Warn =\n  button [ onClick Warn ]\n    [ text \"Warn all users\" ]\n\nviewAdmin : Admin -> Html Admin\nviewAdmin Delete =\n  button [ onClick Delete ]\n    [ text \"Delete all users\" ]\n```\n\nThat's a little better :).\n\nNow that we have views for each individual permission level we'll need some way to combine each view into one top-level view.\nThe way that will play out will make more sense if we define our model first.\n\n## Defining the model\n\nThink about what we want.\nWe want to express that the permissions are exactly one of three levels.\nOur model should not be a record, as records do not model exclusive cases.\nWe should model this as a union type with each case holding the appropriate type we want each case to handle:\n\n```elm\ntype Model\n  = ModelUser User { name : String }\n  | ModelMod Mod { name : String }\n  | ModelAdmin Admin { name : String }\n```\n\nHowever, this just puts us in the same boat as the [elm-proxy][] solution.\nWe want to express at the type level that, \"No matter what case in the model we're looking at, we only use the appropriate view function\".\nWe need to lift up to the type level what each case contains.\nIn some sense, we want to \"index\" the model based on the type it contains.\n\nFor example, in the `ModelUser` case, we want to \"index\" it based on the fact that it is a `User`.\nBut elm doesn't let us express that concept clearly, we have to fake it with type equivalences:\n\n```elm\ntype Model permissions\n  = ModelUser (Equiv permissions User) { name : String }\n  | ModelMod (Equiv permissions Mod) { name : String }\n  | ModelAdmin (Equiv permissions Admin) { name : String }\n```\n\nWe are expressing that whatever case the `Model permissions` takes on has a proof of its equivalence in the respective case.\n\nIt might make more sense if we look at how we can construct one of these cases.\nTo make a `ModelUser`, we need to provide it two things:\n\n1. An equivalence between some `permissions` and `User`.\n1. A record with a `name` field that is a `String`.\n\nThe latter part is easy:\n\n```elm\nmodelUser =\n  ModelUser _ { name = \"Pat\" }\n```\n\nBut what can we provide as the equivalence?\nThat's up to us to decide!\nWe need a pair of functions that go from `permissions -> User` and `User -> permissions`.\nThe first function is easy—we could always return `Comment`.\nThe second function is harder (actually it's impossible in general for all `permissions`).\n\nRather than trying to think through what possible implementations we can make, let's instead think about the type we want `modelUser` to have.\nWe're trying to construct a `Model User`, so that's the type we want `modelUser` to have!\n\n```elm\nmodelUser : Model User\nmodelUser =\n  ModelUser _ { name = \"Pat\" }\n```\n\nSince we've chosen a **specific** `permissions`—namely `User`—we have all the information we need.\nWe have specified that we want the equivalence to have the type `Equiv User User`.\nIn other words, we need to provide a pair of functions with type `User -> User` and `User -> User`.\nWell that's easy, just return the argument in each case:\n\n```elm\nmodelUser : Model User\nmodelUser =\n  ModelUser (\\x -> x, \\x -> x) { name = \"Pat\" }\n```\n\nSo, we've manage to construct a \"proof\" that we have a \"model\" with \"permissions\" equivalent to \"User\".\nCool!\n\nSince this case is so common, this library provides an equivalence between the same type like we've defined up above: [`refl : Equiv a a`][refl].\n\n# Defining the Unified View Function\n\nNow, we can move on to displaying our model in a unified way.\nWe want to be able to say that for any `Model permissions` we're given, we can convert it to an `Html permissions`:\n\n```elm\nview : Model permissions -> Html permissions\n```\n\nLet's start implementing it, taking it one case at a time:\n\n```elm\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser eq record ->\n      viewUser Comment\n    _ ->\n      text \"\"\n```\n\nIf we attempt to compile this, we end up getting an error.\nElm is rightly inferring that the type is actually `Model permissions -> Html User`.\nWe've stated that in the `ModelUser` case we want to return an `Html User`.\nBut we've annotated the type as returning an `Html permissions`.\n\nThis is great!\nWe still have the ability to say that we will not accidentally return the wrong thing.\nAnd we cannot return any particular html value, we have to return one with `permissions` that match the `permissions` of the model.\n\nWhat we need is a way to change the `Html User` to `Html permissions`.\nThankfully, `Html.App` provides a function `map : (a -> b) -> Html a -> Html b`.\nSo, if we can find a function `User -> permissions`, we can use `map` to get the type we want.\nWe have a `Model permissions`, and the case we're in is the `ModelUser` case.\nThat means we have an `Equiv permissions User`.\nAnd remember that `Equiv permissions User` is just an alias for `(permissions -> User, User -> permissions)`.\n\nWe're carrying around just the very function we're looking for!\nHow lucky, ;).\n\n```elm\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser (to, from) record ->\n      Html.App.map from (viewUser Comment)\n    _ ->\n      text \"\"\n```\n\nAnd we can fill in the rest of the function:\n\n```elm\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser (to, from) record ->\n      Html.App.map from (viewUser Comment)\n\n    ModelMod (to, from) record ->\n      Html.App.map from (viewMod Warn)\n\n    ModelAdmin (to, from) record ->\n      Html.App.map from (viewAdmin Delete)\n```\n\nSo, where are we now?\nCan we still accidentally mess up and use the wrong view function:\n\n```elm\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser (to, from) record ->\n      Html.App.map from (viewUser Comment)\n\n    ModelMod (to, from) record ->\n      Html.App.map from (viewAdmin Delete)\n\n    ModelAdmin (to, from) record ->\n      Html.App.map from (viewMod Warn)\n```\n\nIf we try to compile this, we get an error that `map` is given the wrong argument.\nIt's expecting an `Html Mod` but receiving an `Html Admin` or vice versa.\nThis is because we have `from : Mod -> permissions` and not `from : Admin -> permissions` or whatever.\nSo each case carries with it only the equivalence it can use, and not some other equivalence.\n\n## Success!!\n\nWe did it!\nWe made a type level assertion that we wanted to only display the appropriate view in each case, and elm made sure we didn't mess up!\n\nOf course, this solution isn't perfect, but it's safer than the [elm-proxy][] solution!\n\nWhat if we try to be malicious and provide a different `from` function?\n\n```elm\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser (to, from) record ->\n      Html.App.map from (viewUser Comment)\n\n    ModelMod (to, from) record ->\n      let\n        malicious : Admin -> permissions\n        malicious _ =\n          from Warn\n      in\n        Html.App.map malicious (viewAdmin Delete)\n\n    ModelAdmin (to, from) record ->\n      let\n        malicious : Mod -> permissions\n        malicious _ =\n          from Delete\n      in\n        Html.App.map malicious (viewMod Warn)\n```\n\nWell first of all, that won't typecheck, as there's no sense of type variable scoping in elm.\nBut, assuming we comment out the type signatures, it'll type check fine.\nSounds kind of bad initially.\nBut think about it in depth a bit more.\n\nThis malicious function allows the view to be displayed, but any `permissions` coming from said view are still being translated into the appropriate level.\nMeaning, that even if a `Mod` can see what an `Admin` sees, they can't actually do any of the actions that view says they can.\n\nIn other words, if a `Mod` had this \"malicious\" view, they would see a button that said \"Delete all users\".\nBut when they press the button, they would only be warning users not deleting them.\nObviously that's bad for its own reasons, but this example was contrived anyway :).\n\nWe still have a guarantee that each level respects their permission level.\nAnd really that's all we wanted to begin with.\n\n## Finally\n\nAfter a little clean up, we have the following solution:\n\n```elm\ntype User\n  = Comment\n\ntype Mod\n  = Warn\n\ntype Admin\n  = Delete\n\ntype Model permissions\n  = ModelUser (Equiv permissions User) { name : String }\n  | ModelMod (Equiv permissions Mod) { name : String }\n  | ModelAdmin (Equiv permissions Admin) { name : String }\n\nmodelUser : String -> Model User\nmodelUser name =\n  ModelUser refl { name = name }\n\nmodelMod : String -> Model Mod\nmodelMod name =\n  ModelMod refl { name = name }\n\nmodelAdmin : String -> Model Admin\nmodelAdmin name =\n  ModelAdmin refl { name = name }\n\nview : Model permissions -> Html permissions\nview model =\n  case model of\n    ModelUser (_, from) record ->\n      Html.App.map from (viewUser Comment)\n\n    ModelMod (_, from) record ->\n      Html.App.map from (viewMod Warn)\n\n    ModelAdmin (_, from) record ->\n      Html.App.map from (viewAdmin Delete)\n\nviewUser : User -> Html User\nviewUser Comment =\n  text \"Welcome friend!\"\n\nviewMod : Mod -> Html Mod\nviewMod Warn =\n  button [ onClick Warn ]\n    [ text \"Warn all users\" ]\n\nviewAdmin : Admin -> Html Admin\nviewAdmin Delete =\n  button [ onClick Delete ]\n    [ text \"Delete all users\" ]\n```\n\n[elm-proxy]: http://package.elm-lang.org/packages/joneshf/elm-proxy/latest\n[Proxy]: http://package.elm-lang.org/packages/joneshf/elm-proxy/latest/Proxy#Proxy\n[permissions]: https://github.com/joneshf/elm-proof/tree/master/examples/permissions\n[refl]: http://package.elm-lang.org/packages/joneshf/elm-proof/latest/Equivalence#refl\n[reproxy]: http://package.elm-lang.org/packages/joneshf/elm-proxy/latest/Proxy#reproxy\n\n",
        "aliases": [
          {
            "name": "Equiv",
            "comment": "\nWe represent type equivalence by a type isomorphism.\n\nIf we want to say two types are equivalent,\nwe need to provide a way to convert between them.\n\nN.B. This is different from type equality in important ways.\nFor more information, see:\nParametricity, Type Equality and Higher-order Polymorphism (Vytiniotis, Weirich)\nhttp://repository.upenn.edu/cgi/viewcontent.cgi?article=1675&context=cis_papers\n",
            "args": [
              "a",
              "b"
            ],
            "type": "( a -> b, b -> a )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "refl",
            "comment": "\nType equivalences are reflexive.\n\nEvery type is equivalent to itself.\n\nThat is to say:\n`Int` is equivalent to `Int`,\n`Maybe a` is equivalent to `Maybe a`,\nand so on.\n",
            "type": "Equivalence.Equiv a a"
          },
          {
            "name": "symm",
            "comment": "\nType equivalences are symmetric.\n\nIf we know `a` is equivalent to `b`, then we also know `b` is equivalent to `a`.\n",
            "type": "Equivalence.Equiv a b -> Equivalence.Equiv b a"
          },
          {
            "name": "trans",
            "comment": "\nType equivalences are transitive.\n\nIf we know `a` is equivalent to `b`, and if we know `b` is equivalent to `c`,\nthen we also know `a` is equivalent to `c`.\n",
            "type": "Equivalence.Equiv a b -> Equivalence.Equiv b c -> Equivalence.Equiv a c"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "joneshf/elm-proxy",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Proxy",
        "comment": "\nA module that allow you to pass around type level information for compile-time verification.\n\n@docs Proxy, reproxy\n",
        "aliases": [],
        "types": [
          {
            "name": "Proxy",
            "comment": "\nRoughly equivalent to `()` with type level information.\n\nCan be used to disambiguate between values at the type level.\nCan also be used to pass \"dummy\" values to functions.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Proxy",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "reproxy",
            "comment": "\nUseful for easily changing the type of a proxy value.\n\nFor example, if you needed to enforce a different invariant in an algorithm,\nyou could `reproxy` the current invariant without headache.\n",
            "type": "Proxy.Proxy a -> Proxy.Proxy b"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "joneshf/elm-tagged",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Tagged",
        "comment": "\n\nA module that allows you to \"tag\" a value.\n\n@docs Tagged, tag, retag, untag, map, ap, bind, extend\n",
        "aliases": [],
        "types": [
          {
            "name": "Tagged",
            "comment": "\nA Type that pairs a `value` with a `tag`.\n\nThe `tag` is ignored at runtime as evidenced by the only value constructor:\n\n```elm\nTagged : value -> Tagged tag value\n```\n",
            "args": [
              "tag",
              "value"
            ],
            "cases": [
              [
                "Tagged",
                [
                  "value"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "ap",
            "comment": "\nUseful for composing functions together infix:\n\n```elm\nfoo =\n  Array.set `map` index `ap` value `ap` arr\n```\n",
            "type": "Tagged.Tagged tag (oldValue -> newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
          },
          {
            "name": "bind",
            "comment": "\nUseful for restricting the tag created in a polymorphic function.\n",
            "type": "(oldValue -> Tagged.Tagged tag newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
          },
          {
            "name": "extend",
            "comment": "\nUseful when you have a function that throws away a tag prematurely,\nbut you still need the tag later.\n",
            "type": "(Tagged.Tagged tag oldValue -> newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
          },
          {
            "name": "map",
            "comment": "\nUseful for composing functions together infix:\n\n```elm\nfoo =\n  Array.set `map` index `ap` value `ap` arr\n```\n",
            "type": "(oldValue -> newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
          },
          {
            "name": "retag",
            "comment": "\nExplicitly changes the tag of a value.\n\nForces you to recognize that the value is being interpreted differently from before.\n",
            "type": "Tagged.Tagged oldTag value -> Tagged.Tagged newTag value"
          },
          {
            "name": "tag",
            "comment": "\nAn alias for the `Tagged` value constructor.\n",
            "type": "value -> Tagged.Tagged tag value"
          },
          {
            "name": "untag",
            "comment": "\nWe can remove the tag when we're done making additional compile-time assertions.\n",
            "type": "Tagged.Tagged tag value -> value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "joneshf/elm-these",
    "version": "1.0.2",
    "docs": [
      {
        "name": "These",
        "comment": "\nA type that may be an `a`, a `b`, or both an `a` and a `b` at once.\n\n@docs These, these, mapBoth, mergeWith, merge\n",
        "aliases": [],
        "types": [
          {
            "name": "These",
            "comment": "\nThis type is very closely related to [Result a b](http://package.elm-lang.org/packages/elm-lang/core/latest/Result#Result).\n\nWhile [Result a b](http://package.elm-lang.org/packages/elm-lang/core/latest/Result#Result)\nmodels exclusive-or, this type models inclusive-or.\n",
            "args": [
              "a",
              "b"
            ],
            "cases": [
              [
                "This",
                [
                  "a"
                ]
              ],
              [
                "That",
                [
                  "b"
                ]
              ],
              [
                "These",
                [
                  "a",
                  "b"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "mapBoth",
            "comment": "\nThere is only one implementation of this function.\nIt is fully described by the type signature.\n\nReplace any `a`s with `c`s and replace any `b`s with `d`s.\n",
            "type": "(a -> c) -> (b -> d) -> These.These a b -> These.These c d"
          },
          {
            "name": "merge",
            "comment": "\nA version of [mergeWith](#mergeWith) that does not modify the `This a` or `That a` values.\n",
            "type": "(a -> a -> a) -> These.These a a -> a"
          },
          {
            "name": "mergeWith",
            "comment": "\nSimilar to [these](#these).\n\nThe difference is that in the `These a b` case\nwe apply the second and third functions and merge the results with the first function.\n",
            "type": "(c -> c -> c) -> (a -> c) -> (b -> c) -> These.These a b -> c"
          },
          {
            "name": "these",
            "comment": "\nDestroy the structure of a [These a b](#These).\n\nThe first two functions are applied to the `This a` and `That b` values, respectively.\nThe third function is applied to the `These a b` value.\n",
            "type": "(a -> c) -> (b -> c) -> (a -> b -> c) -> These.These a b -> c"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "justinmimbs/elm-date-extra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Date.Extra",
        "comment": " A `Date` represents a moment in time, encoded by two essential pieces of\ninformation: the number of milliseconds since 1 January 1970 UTC, and the\noffset between UTC and the current machine's local time. Extractions of a\n`Date` (e.g. `Date.month`, `Date.hour`) return representations of the date in\nlocal time, while `Date.toTime` returns the UTC representation.\n\n# Common Constructors\n@docs fromParts, fromCalendarDate, fromIsoString\n\n# Formatted Strings\n@docs toFormattedString, toUtcFormattedString, toIsoString, toUtcIsoString\n\n# Operations\n## Dates as Atomic Values\n@docs equal, compare, isBetween, clamp\n\n## Dates as Composite Values\nThese functions work on dates within the context of a given interval of time.\n@docs Interval, equalBy, floor, ceiling, add, diff, range\n\n# Extractions\n@docs monthNumber, quarter, ordinalDay, fractionalDay, weekdayNumber, weekNumber, weekYear, offsetFromUtc\n\n# Detailed Specification\nIn some cases you may want to specify a date with a time zone offset or from\nweek-date or ordinal-date parts. The `fromSpec` function provides a way to\ndo this.\n@docs fromSpec\n\n## TimeZone\n@docs TimeZone, utc, offset, local\n\n## TimeSpec\n@docs TimeSpec, noTime, atTime\n\n## DateSpec\n@docs DateSpec, calendarDate, weekDate, ordinalDate\n",
        "aliases": [],
        "types": [
          {
            "name": "DateSpec",
            "comment": " Represents a day.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Interval",
            "comment": " Represents an interval of time.\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ],
              [
                "Quarter",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Monday",
                []
              ],
              [
                "Tuesday",
                []
              ],
              [
                "Wednesday",
                []
              ],
              [
                "Thursday",
                []
              ],
              [
                "Friday",
                []
              ],
              [
                "Saturday",
                []
              ],
              [
                "Sunday",
                []
              ]
            ]
          },
          {
            "name": "TimeSpec",
            "comment": " Represents a time of day.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "TimeZone",
            "comment": " Represents a time zone.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a number of whole intervals to a date.\n\n    Date.add Week 2 (Date.fromParts 2007 Mar 15 11 55 0 0)\n    -- <29 March 2007, 11:55>\n\nWhen adding Month, Quarter, or Year intervals, day values are clamped at the\nend of the month if necessary.\n\n    Date.add Month 1 (Date.fromParts 2000 Jan 31 0 0 0 0)\n    -- <29 February 2000>\n",
            "type": "Date.Extra.Interval -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "atTime",
            "comment": " Create a `TimeSpec` from time parts (hour, minute, second, millisecond).\n",
            "type": "Int -> Int -> Int -> Int -> Date.Extra.TimeSpec"
          },
          {
            "name": "calendarDate",
            "comment": " Create a `DateSpec` from calendar-date parts (year, month, day).\n",
            "type": "Int -> Date.Month -> Int -> Date.Extra.DateSpec"
          },
          {
            "name": "ceiling",
            "comment": " Round up a date to the beginning of the closest interval. The resulting\ndate will be greater than or equal to the one provided.\n\n    Date.ceiling Monday (Date.fromParts 1999 Dec 31 23 59 59 999)\n    -- <3 January 2000>\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date"
          },
          {
            "name": "clamp",
            "comment": " Clamp a date within a given range. The expression `Date.clamp min max x`\nreturns one of `min`, `max`, or `x`, ensuring the returned date is not before\n`min` and not after `max`.\n",
            "type": "Date.Date -> Date.Date -> Date.Date -> Date.Date"
          },
          {
            "name": "compare",
            "comment": " Compare two dates. This can be used as the compare function for\n`List.sortWith`.\n",
            "type": "Date.Date -> Date.Date -> Basics.Order"
          },
          {
            "name": "diff",
            "comment": " Find the difference, as a number of whole intervals, between two dates.\n\n    Date.diff Month\n      (Date.fromParts 2007 Mar 15 11 55 0 0)\n      (Date.fromParts 2007 Sep 1 0 0 0 0)\n    -- 5\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date -> Int"
          },
          {
            "name": "equal",
            "comment": " Test equality of two dates.\n",
            "type": "Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "equalBy",
            "comment": " Test if two dates fall within the same interval.\n\n    dec31 = Date.fromCalendarDate 1999 Dec 31\n    jan1 = Date.fromCalendarDate 2000 Jan 1\n\n    Date.equalBy Month dec31 jan1 -- False\n    Date.equalBy Week  dec31 jan1 -- True\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "floor",
            "comment": " Round down a date to the beginning of the closest interval. The resulting\ndate will be less than or equal to the one provided.\n\n    Date.floor Hour (Date.fromParts 1999 Dec 31 23 59 59 999)\n    -- <31 December 1999, 23:00>\n",
            "type": "Date.Extra.Interval -> Date.Date -> Date.Date"
          },
          {
            "name": "fractionalDay",
            "comment": " Extract the fractional day of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the float 0.4895833333333333.\n",
            "type": "Date.Date -> Float"
          },
          {
            "name": "fromCalendarDate",
            "comment": " Convenience function for creating a `Date` from only the year, month, and\nday parts.\n\n    Date.fromCalendarDate 2000 Jan 1\n",
            "type": "Int -> Date.Month -> Int -> Date.Date"
          },
          {
            "name": "fromIsoString",
            "comment": " Attempt to create a `Date` from a string representing a date in\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n\n    Date.fromIsoString \"2000-01-01\"\n    -- Just <1 January 2000, local time>\n\n    Date.fromIsoString \"2009-W01-1T00Z\"\n    -- Just <29 December 2008, UTC>\n\n    Date.fromIsoString \"2016-218T20:00-03:00\"\n    -- Just <5 August 2016, 23:00, UTC>\n\n    Date.fromIsoString \"1/1/2000\"\n    -- Nothing\n\nWhen a `Date` is created with a specified time zone offset (e.g. `\"-03:00\"`),\nits extractions still reflect the current machine's local time, and\n`Date.toTime` still reflects its UTC time.\n",
            "type": "String -> Maybe.Maybe Date.Date"
          },
          {
            "name": "fromParts",
            "comment": " Create a `Date` from the following parts, given in local time:\n\n- year\n- month\n- day\n- hour\n- minute\n- second\n- millisecond\n\n\n    import Date exposing (Month(..))\n    import Date.Extra as Date\n\n    Date.fromParts 1999 Dec 31 23 59 0 0\n    -- <31 December 1999, 23:59, local time>\n\nThe values of the parts are not checked to ensure a valid date representation,\nnor are they clamped to a valid range; instead, providing values outside a\nvalid range results in underflow or overflow.\n\n    Date.fromParts 2007 Feb 29 0 0 0 0\n    -- <1 March 2007>\n",
            "type": "Int -> Date.Month -> Int -> Int -> Int -> Int -> Int -> Date.Date"
          },
          {
            "name": "fromSpec",
            "comment": " Create a `Date` from a specified time zone, time of day, and day.\n\n    Date.fromSpec\n      local\n      noTime\n      (calendarDate 2000 Jan 1)\n    -- <1 January 2000, local time>\n\n    Date.fromSpec\n      utc\n      noTime\n      (weekDate 2009 1 1)\n    -- <29 December 2008, UTC>\n\n    Date.fromSpec\n      (offset -180)\n      (atTime 20 0 0 0)\n      (ordinalDate 2016 218)\n    -- <5 August 2016, 23:00, UTC>\n\nWhen a `Date` is created with a specified time zone offset (e.g. `offset -180`),\nits extractions still reflect the current machine's local time, and\n`Date.toTime` still reflects its UTC time.\n",
            "type": "Date.Extra.TimeZone -> Date.Extra.TimeSpec -> Date.Extra.DateSpec -> Date.Date"
          },
          {
            "name": "isBetween",
            "comment": " Test if a date is within a given range, inclusive of the range values. The\nexpression `Date.isBetween a b x` tests if `x` is between `a` and `b`.\n",
            "type": "Date.Date -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "local",
            "comment": " Do not specify a time zone, but use the local offset instead.\n",
            "type": "Date.Extra.TimeZone"
          },
          {
            "name": "monthNumber",
            "comment": " Extract the month number of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 6.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "noTime",
            "comment": " Do not specify a time of day (default to 00:00).\n",
            "type": "Date.Extra.TimeSpec"
          },
          {
            "name": "offset",
            "comment": " Create a `TimeZone` with a specific offset from UTC time, given in minutes.\n",
            "type": "Int -> Date.Extra.TimeZone"
          },
          {
            "name": "offsetFromUtc",
            "comment": " Extract the local offset from UTC time, in minutes, of a date. Given a date\nwith a local offset of UTC-05:00 this returns the integer -300.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "ordinalDate",
            "comment": " Create a `DateSpec` from ordinal-date parts (year, ordinalDay).\n",
            "type": "Int -> Int -> Date.Extra.DateSpec"
          },
          {
            "name": "ordinalDay",
            "comment": " Extract the ordinal day of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 174.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "quarter",
            "comment": " Extract the quarter of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 2.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "range",
            "comment": " Create a list of dates, at rounded intervals, increasing by a step value,\nbetween two dates. The list will start at or after the first date, and end\nbefore the second date.\n\n    Date.range Day 2\n      (Date.fromParts 2007 Mar 15 11 55 0 0)\n      (Date.fromParts 2007 Mar 22 0 0 0 0)\n    -- [<16 March 2007>, <18 March 2007>, <20 March 2007>]\n",
            "type": "Date.Extra.Interval -> Int -> Date.Date -> Date.Date -> List Date.Date"
          },
          {
            "name": "toFormattedString",
            "comment": " Convert a date to a string using a pattern as a template.\n\n    Date.toFormattedString\n      \"EEEE, MMMM d, y 'at' h:mm a\"\n      (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"Thursday, March 15, 2007 at 1:45 PM\"\n\nEach alphabetic character in the pattern represents date or time information;\nthe number of times a character is repeated specifies the form of the name to\nuse (e.g. \"Tue\", \"Tuesday\") or the padding of numbers (e.g. \"1\", \"01\").\nFormatting characters are escaped within single-quotes, and a single-quote is\nescaped as a sequence of two single-quotes, whether appearing inside or outside\nan escaped sequence.\n\nPatterns are based on Date Format Patterns in [Unicode Technical\nStandard #35](http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns).\nOnly the following subset of formatting characters are available:\n\n    \"y\" -- year\n    \"Y\" -- week-numbering year\n    \"Q\" -- quarter\n    \"M\" -- month\n    \"w\" -- week number\n    \"d\" -- day\n    \"D\" -- ordinal day\n    \"E\" -- day of week\n    \"e\" -- weekday number / day of week\n    \"a\" -- day period (AM, PM)\n    \"b\" -- day period (am, pm, noon, midnight)\n    \"h\" -- hour (12-hour clock)\n    \"H\" -- hour (24-hour clock)\n    \"m\" -- minute\n    \"s\" -- second\n    \"S\" -- fractional second\n    \"X\" -- time offset, using \"Z\" when offset is 0\n    \"x\" -- time offset\n\nThe non-standard pattern field \"ddd\" is available to indicate the day of the\nmonth with an ordinal suffix (e.g. \"1st\", \"15th\"), as the current standard does\nnot include such a field.\n\n    Date.toFormattedString\n      \"MMMM ddd, y\"\n      (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"March 15th, 2007\"\n",
            "type": "String -> Date.Date -> String"
          },
          {
            "name": "toIsoString",
            "comment": " Convenience function for formatting a date to ISO 8601 (extended\ndate and time format with local time offset).\n\n    Date.toIsoString (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"2007-03-15T13:45:56.067-04:00\"\n    -- (example has a local offset of UTC-04:00)\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "toUtcFormattedString",
            "comment": " Convert a date to a string just like `toFormattedString`, but using the UTC\nrepresentation instead of the local representation of the date.\n",
            "type": "String -> Date.Date -> String"
          },
          {
            "name": "toUtcIsoString",
            "comment": " Convenience function for formatting a date, in UTC representation, to ISO\n8601 (extended date and time format with \"Z\" for time offset).\n\n    Date.toUtcIsoString (Date.fromParts 2007 Mar 15 13 45 56 67)\n    -- \"2007-03-15T17:45:56.067Z\"\n    -- (example has a local offset of UTC-04:00)\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "utc",
            "comment": " UTC time zone.\n",
            "type": "Date.Extra.TimeZone"
          },
          {
            "name": "weekDate",
            "comment": " Create a `DateSpec` from week-date parts (weekYear, weekNumber, weekdayNumber).\n",
            "type": "Int -> Int -> Int -> Date.Extra.DateSpec"
          },
          {
            "name": "weekNumber",
            "comment": " Extract the week number of a date. Given the date 23 June 1990 at\n11:45 a.m. this returns the integer 25.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "weekYear",
            "comment": " Extract the week-numbering year of a date. Given the date 23 June\n1990 at 11:45 a.m. this returns the integer 1990.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "weekdayNumber",
            "comment": " Extract the weekday number (beginning at 1 for Monday) of a date. Given\nthe date 23 June 1990 at 11:45 a.m. this returns the integer 6.\n",
            "type": "Date.Date -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Date.Extra.Facts",
        "comment": " This module contains reference information that may be useful when working with\ndates, but it doesn't contain functions for working with the `Date` type directly.\n\n# Basics\n@docs isLeapYear, daysInMonth, daysBeforeStartOfMonth, months\n\n# Conversions\n@docs monthNumberFromMonth, monthFromMonthNumber, weekdayNumberFromDayOfWeek, dayOfWeekFromWeekdayNumber\n\n# Constants\nValues for the number of milliseconds per date part. These are equivalent to\nthe constants available in the `Time` core library, but typed as integers\ninstead of floats.\n@docs msPerSecond, msPerMinute, msPerHour, msPerDay\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayOfWeekFromWeekdayNumber",
            "comment": "\n    dayOfWeekFromWeekdayNumber 1 -- Mon\n",
            "type": "Int -> Date.Day"
          },
          {
            "name": "daysBeforeStartOfMonth",
            "comment": "\n    daysBeforeStartOfMonth 2000 Mar -- 60\n    daysBeforeStartOfMonth 2001 Mar -- 59\n",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "daysInMonth",
            "comment": "\n    daysInMonth 2000 Feb -- 29\n    daysInMonth 2001 Feb -- 28\n",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "isLeapYear",
            "comment": "",
            "type": "Int -> Bool"
          },
          {
            "name": "monthFromMonthNumber",
            "comment": "\n    monthFromMonthNumber 1 -- Jan\n",
            "type": "Int -> Date.Month"
          },
          {
            "name": "monthNumberFromMonth",
            "comment": "\n    monthNumberFromMonth Jan -- 1\n",
            "type": "Date.Month -> Int"
          },
          {
            "name": "months",
            "comment": " An ordered list of `Date.Month` values.\n",
            "type": "List Date.Month"
          },
          {
            "name": "msPerDay",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "msPerHour",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "msPerMinute",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "msPerSecond",
            "comment": "",
            "type": "Int"
          },
          {
            "name": "weekdayNumberFromDayOfWeek",
            "comment": "\n    weekdayNumberFromDayOfWeek Mon -- 1\n",
            "type": "Date.Day -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "jvoigtlaender/elm-memo",
    "version": "2.0.4",
    "docs": [
      {
        "name": "Memo",
        "comment": " Most basic memoization functionality.\n\nFor documentation, see the [README](.).\n\n@docs memo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "memo",
            "comment": "\n",
            "type": "(comparable -> b) -> List comparable -> comparable -> Maybe.Maybe b"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "jweir/elm-iso8601",
    "version": "3.0.0",
    "docs": [
      {
        "name": "ISO8601",
        "comment": " This package provides functionality for working with time and strings based\non the ISO 8601 standard i.e. `2016-03-31T12:13:14.22-04:00`\n\n# Time record\n@docs Time, Weekday, Offset\n\n# Accessors\n@docs year, month, day, hour, minute, second, millisecond, offset, weekday\n\n# Parsing\n@docs fromString, toString\n\n# Time conversion\n@docs toTime, fromTime\n",
        "aliases": [
          {
            "name": "Offset",
            "comment": " Offset represents the hour and minute timezone offset from UTC.\n\n",
            "args": [],
            "type": "( Int, Int )"
          },
          {
            "name": "Time",
            "comment": " Record representing the time. Offset is tuple representing the hour and minute ± from UTC.\n\n",
            "args": [],
            "type": "ISO8601.Model"
          }
        ],
        "types": [
          {
            "name": "Weekday",
            "comment": " Represents one of the seven days of the week\n",
            "args": [],
            "cases": [
              [
                "Mon",
                []
              ],
              [
                "Tue",
                []
              ],
              [
                "Wed",
                []
              ],
              [
                "Thu",
                []
              ],
              [
                "Fri",
                []
              ],
              [
                "Sat",
                []
              ],
              [
                "Sun",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "day",
            "comment": " return the day\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "fromString",
            "comment": " Given an ISO 8601 compatible string, returns a Time record.\n\n````elm\nISO8601.fromString \"2016-01-01T01:30:00-04:00\"\n-- { year = 2016, month = 1, day = 1, hour = 1, minute = 30, second = 0, millisecond = 0, offset = (-4,0) }\n    : ISO8601.Time\nISO8601.fromString \"2016-11-07\"\n--{ year = 2016, month = 11, day = 7, hour = 0, minute = 0, second = 0, millisecond = 0, offset = (0,0) }\n    : ISO8601.Time\n```\n\n",
            "type": "String -> Result.Result String ISO8601.Time"
          },
          {
            "name": "fromTime",
            "comment": " Converts the milliseconds relative to the Unix epoch to a Time record.\n",
            "type": "Int -> ISO8601.Time"
          },
          {
            "name": "hour",
            "comment": " return the hour\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "millisecond",
            "comment": " return the millisecond\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "minute",
            "comment": " return the minute\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "month",
            "comment": " return the month\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "offset",
            "comment": " return the offset\n",
            "type": "ISO8601.Time -> ISO8601.Offset"
          },
          {
            "name": "second",
            "comment": " return the secon\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "toString",
            "comment": " Converts a Time record to an ISO 8601 formated string.\n",
            "type": "ISO8601.Time -> String"
          },
          {
            "name": "toTime",
            "comment": " Converts the Time to milliseconds relative to the Unix epoch: `1970-01-01T00:00:00Z`\n",
            "type": "ISO8601.Time -> Int"
          },
          {
            "name": "weekday",
            "comment": " Returns the day of the week from the Time record\n",
            "type": "ISO8601.Time -> ISO8601.Weekday"
          },
          {
            "name": "year",
            "comment": " return the year\n",
            "type": "ISO8601.Time -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "jystic/elm-font-awesome",
    "version": "2.0.0",
    "docs": [
      {
        "name": "FontAwesome",
        "comment": " This module exposes 694 scalable vector icons as Elm HTML\ncomponents. If you need to use them as Elements, try the 'toElement'\nfunction from 'elm-html'.\n\nAll icon functions expect a color and a size, which is used as both the width\nand the height.\n\n# Icons\n@docs fa_500px\n@docs adjust\n@docs adn\n@docs align_center\n@docs align_justify\n@docs align_left\n@docs align_right\n@docs amazon\n@docs ambulance\n@docs anchor\n@docs android\n@docs angellist\n@docs angle_double_down\n@docs angle_double_left\n@docs angle_double_right\n@docs angle_double_up\n@docs angle_down\n@docs angle_left\n@docs angle_right\n@docs angle_up\n@docs apple\n@docs archive\n@docs area_chart\n@docs arrow_circle_down\n@docs arrow_circle_left\n@docs arrow_circle_o_down\n@docs arrow_circle_o_left\n@docs arrow_circle_o_right\n@docs arrow_circle_o_up\n@docs arrow_circle_right\n@docs arrow_circle_up\n@docs arrow_down\n@docs arrow_left\n@docs arrow_right\n@docs arrow_up\n@docs arrows_alt\n@docs arrows_h\n@docs arrows_v\n@docs arrows\n@docs asterisk\n@docs at\n@docs automobile\n@docs backward\n@docs balance_scale\n@docs ban\n@docs bank\n@docs bar_chart_o\n@docs bar_chart\n@docs barcode\n@docs bars\n@docs battery_0\n@docs battery_1\n@docs battery_2\n@docs battery_3\n@docs battery_4\n@docs battery_empty\n@docs battery_full\n@docs battery_half\n@docs battery_quarter\n@docs battery_three_quarters\n@docs bed\n@docs beer\n@docs behance_square\n@docs behance\n@docs bell_o\n@docs bell_slash_o\n@docs bell_slash\n@docs bell\n@docs bicycle\n@docs binoculars\n@docs birthday_cake\n@docs bitbucket_square\n@docs bitbucket\n@docs bitcoin\n@docs black_tie\n@docs bluetooth_b\n@docs bluetooth\n@docs bold\n@docs bolt\n@docs bomb\n@docs book\n@docs bookmark_o\n@docs bookmark\n@docs briefcase\n@docs btc\n@docs bug\n@docs building_o\n@docs building\n@docs bullhorn\n@docs bullseye\n@docs bus\n@docs buysellads\n@docs cab\n@docs calculator\n@docs calendar_check_o\n@docs calendar_minus_o\n@docs calendar_o\n@docs calendar_plus_o\n@docs calendar_times_o\n@docs calendar\n@docs camera_retro\n@docs camera\n@docs car\n@docs caret_down\n@docs caret_left\n@docs caret_right\n@docs caret_square_o_down\n@docs caret_square_o_left\n@docs caret_square_o_right\n@docs caret_square_o_up\n@docs caret_up\n@docs cart_arrow_down\n@docs cart_plus\n@docs cc_amex\n@docs cc_diners_club\n@docs cc_discover\n@docs cc_jcb\n@docs cc_mastercard\n@docs cc_paypal\n@docs cc_stripe\n@docs cc_visa\n@docs cc\n@docs certificate\n@docs chain_broken\n@docs chain\n@docs check_circle_o\n@docs check_circle\n@docs check_square_o\n@docs check_square\n@docs check\n@docs chevron_circle_down\n@docs chevron_circle_left\n@docs chevron_circle_right\n@docs chevron_circle_up\n@docs chevron_down\n@docs chevron_left\n@docs chevron_right\n@docs chevron_up\n@docs child\n@docs chrome\n@docs circle_o_notch\n@docs circle_o\n@docs circle_thin\n@docs circle\n@docs clipboard\n@docs clock_o\n@docs clone\n@docs close\n@docs cloud_download\n@docs cloud_upload\n@docs cloud\n@docs cny\n@docs code_fork\n@docs code\n@docs codepen\n@docs codiepie\n@docs coffee\n@docs cog\n@docs cogs\n@docs columns\n@docs comment_o\n@docs comment\n@docs commenting_o\n@docs commenting\n@docs comments_o\n@docs comments\n@docs compass\n@docs compress\n@docs connectdevelop\n@docs contao\n@docs copy\n@docs copyright\n@docs creative_commons\n@docs credit_card_alt\n@docs credit_card\n@docs crop\n@docs crosshairs\n@docs css3\n@docs cube\n@docs cubes\n@docs cut\n@docs cutlery\n@docs dashboard\n@docs dashcube\n@docs database\n@docs dedent\n@docs delicious\n@docs desktop\n@docs deviantart\n@docs diamond\n@docs digg\n@docs dollar\n@docs dot_circle_o\n@docs download\n@docs dribbble\n@docs dropbox\n@docs drupal\n@docs edge\n@docs edit\n@docs eject\n@docs ellipsis_h\n@docs ellipsis_v\n@docs empire\n@docs envelope_o\n@docs envelope_square\n@docs envelope\n@docs eraser\n@docs eur\n@docs euro\n@docs exchange\n@docs exclamation_circle\n@docs exclamation_triangle\n@docs exclamation\n@docs expand\n@docs expeditedssl\n@docs external_link_square\n@docs external_link\n@docs eye_slash\n@docs eye\n@docs eyedropper\n@docs facebook_f\n@docs facebook_official\n@docs facebook_square\n@docs facebook\n@docs fast_backward\n@docs fast_forward\n@docs fax\n@docs feed\n@docs female\n@docs fighter_jet\n@docs file_archive_o\n@docs file_audio_o\n@docs file_code_o\n@docs file_excel_o\n@docs file_image_o\n@docs file_movie_o\n@docs file_o\n@docs file_pdf_o\n@docs file_photo_o\n@docs file_picture_o\n@docs file_powerpoint_o\n@docs file_sound_o\n@docs file_text_o\n@docs file_text\n@docs file_video_o\n@docs file_word_o\n@docs file_zip_o\n@docs file\n@docs files_o\n@docs film\n@docs filter\n@docs fire_extinguisher\n@docs fire\n@docs firefox\n@docs flag_checkered\n@docs flag_o\n@docs flag\n@docs flash\n@docs flask\n@docs flickr\n@docs floppy_o\n@docs folder_o\n@docs folder_open_o\n@docs folder_open\n@docs folder\n@docs font\n@docs fonticons\n@docs fort_awesome\n@docs forumbee\n@docs forward\n@docs foursquare\n@docs frown_o\n@docs futbol_o\n@docs gamepad\n@docs gavel\n@docs gbp\n@docs ge\n@docs gear\n@docs gears\n@docs genderless\n@docs get_pocket\n@docs gg_circle\n@docs gg\n@docs gift\n@docs git_square\n@docs git\n@docs github_alt\n@docs github_square\n@docs github\n@docs gittip\n@docs glass\n@docs globe\n@docs google_plus_square\n@docs google_plus\n@docs google_wallet\n@docs google\n@docs graduation_cap\n@docs gratipay\n@docs group\n@docs h_square\n@docs hacker_news\n@docs hand_grab_o\n@docs hand_lizard_o\n@docs hand_o_down\n@docs hand_o_left\n@docs hand_o_right\n@docs hand_o_up\n@docs hand_paper_o\n@docs hand_peace_o\n@docs hand_pointer_o\n@docs hand_rock_o\n@docs hand_scissors_o\n@docs hand_spock_o\n@docs hand_stop_o\n@docs hashtag\n@docs hdd_o\n@docs header\n@docs headphones\n@docs heart_o\n@docs heart\n@docs heartbeat\n@docs history\n@docs home\n@docs hospital_o\n@docs hotel\n@docs hourglass_1\n@docs hourglass_2\n@docs hourglass_3\n@docs hourglass_end\n@docs hourglass_half\n@docs hourglass_o\n@docs hourglass_start\n@docs hourglass\n@docs houzz\n@docs html5\n@docs i_cursor\n@docs ils\n@docs image\n@docs inbox\n@docs indent\n@docs industry\n@docs info_circle\n@docs info\n@docs inr\n@docs instagram\n@docs institution\n@docs internet_explorer\n@docs intersex\n@docs ioxhost\n@docs italic\n@docs joomla\n@docs jpy\n@docs jsfiddle\n@docs key\n@docs keyboard_o\n@docs krw\n@docs language\n@docs laptop\n@docs lastfm_square\n@docs lastfm\n@docs leaf\n@docs leanpub\n@docs legal\n@docs lemon_o\n@docs level_down\n@docs level_up\n@docs life_bouy\n@docs life_buoy\n@docs life_ring\n@docs life_saver\n@docs lightbulb_o\n@docs line_chart\n@docs link\n@docs linkedin_square\n@docs linkedin\n@docs linux\n@docs list_alt\n@docs list_ol\n@docs list_ul\n@docs list\n@docs location_arrow\n@docs lock\n@docs long_arrow_down\n@docs long_arrow_left\n@docs long_arrow_right\n@docs long_arrow_up\n@docs magic\n@docs magnet\n@docs mail_forward\n@docs mail_reply_all\n@docs mail_reply\n@docs male\n@docs map_marker\n@docs map_o\n@docs map_pin\n@docs map_signs\n@docs map\n@docs mars_double\n@docs mars_stroke_h\n@docs mars_stroke_v\n@docs mars_stroke\n@docs mars\n@docs maxcdn\n@docs meanpath\n@docs medium\n@docs medkit\n@docs meh_o\n@docs mercury\n@docs microphone_slash\n@docs microphone\n@docs minus_circle\n@docs minus_square_o\n@docs minus_square\n@docs minus\n@docs mixcloud\n@docs mobile_phone\n@docs mobile\n@docs modx\n@docs money\n@docs moon_o\n@docs mortar_board\n@docs motorcycle\n@docs mouse_pointer\n@docs music\n@docs navicon\n@docs neuter\n@docs newspaper_o\n@docs object_group\n@docs object_ungroup\n@docs odnoklassniki_square\n@docs odnoklassniki\n@docs opencart\n@docs openid\n@docs opera\n@docs optin_monster\n@docs outdent\n@docs pagelines\n@docs paint_brush\n@docs paper_plane_o\n@docs paper_plane\n@docs paperclip\n@docs paragraph\n@docs paste\n@docs pause_circle_o\n@docs pause_circle\n@docs pause\n@docs paw\n@docs paypal\n@docs pencil_square_o\n@docs pencil_square\n@docs pencil\n@docs percent\n@docs phone_square\n@docs phone\n@docs photo\n@docs picture_o\n@docs pie_chart\n@docs pied_piper_alt\n@docs pied_piper\n@docs pinterest_p\n@docs pinterest_square\n@docs pinterest\n@docs plane\n@docs play_circle_o\n@docs play_circle\n@docs play\n@docs plug\n@docs plus_circle\n@docs plus_square_o\n@docs plus_square\n@docs plus\n@docs power_off\n@docs print\n@docs product_hunt\n@docs puzzle_piece\n@docs qq\n@docs qrcode\n@docs question_circle\n@docs question\n@docs quote_left\n@docs quote_right\n@docs ra\n@docs random\n@docs rebel\n@docs recycle\n@docs reddit_alien\n@docs reddit_square\n@docs reddit\n@docs refresh\n@docs registered\n@docs remove\n@docs renren\n@docs reorder\n@docs repeat\n@docs reply_all\n@docs reply\n@docs retweet\n@docs rmb\n@docs road\n@docs rocket\n@docs rotate_left\n@docs rotate_right\n@docs rouble\n@docs rss_square\n@docs rss\n@docs rub\n@docs ruble\n@docs rupee\n@docs safari\n@docs save\n@docs scissors\n@docs scribd\n@docs search_minus\n@docs search_plus\n@docs search\n@docs sellsy\n@docs send_o\n@docs send\n@docs server\n@docs share_alt_square\n@docs share_alt\n@docs share_square_o\n@docs share_square\n@docs share\n@docs shekel\n@docs sheqel\n@docs shield\n@docs ship\n@docs shirtsinbulk\n@docs shopping_bag\n@docs shopping_basket\n@docs shopping_cart\n@docs sign_in\n@docs sign_out\n@docs signal\n@docs simplybuilt\n@docs sitemap\n@docs skyatlas\n@docs skype\n@docs slack\n@docs sliders\n@docs slideshare\n@docs smile_o\n@docs soccer_ball_o\n@docs sort_alpha_asc\n@docs sort_alpha_desc\n@docs sort_amount_asc\n@docs sort_amount_desc\n@docs sort_asc\n@docs sort_desc\n@docs sort_down\n@docs sort_numeric_asc\n@docs sort_numeric_desc\n@docs sort_up\n@docs sort\n@docs soundcloud\n@docs space_shuttle\n@docs spinner\n@docs spoon\n@docs spotify\n@docs square_o\n@docs square\n@docs stack_exchange\n@docs stack_overflow\n@docs star_half_empty\n@docs star_half_full\n@docs star_half_o\n@docs star_half\n@docs star_o\n@docs star\n@docs steam_square\n@docs steam\n@docs step_backward\n@docs step_forward\n@docs stethoscope\n@docs sticky_note_o\n@docs sticky_note\n@docs stop_circle_o\n@docs stop_circle\n@docs stop\n@docs street_view\n@docs strikethrough\n@docs stumbleupon_circle\n@docs stumbleupon\n@docs subscript\n@docs subway\n@docs suitcase\n@docs sun_o\n@docs superscript\n@docs support\n@docs table\n@docs tablet\n@docs tachometer\n@docs tag\n@docs tags\n@docs tasks\n@docs taxi\n@docs television\n@docs tencent_weibo\n@docs terminal\n@docs text_height\n@docs text_width\n@docs th_large\n@docs th_list\n@docs th\n@docs thumb_tack\n@docs thumbs_down\n@docs thumbs_o_down\n@docs thumbs_o_up\n@docs thumbs_up\n@docs ticket\n@docs times_circle_o\n@docs times_circle\n@docs times\n@docs tint\n@docs toggle_down\n@docs toggle_left\n@docs toggle_off\n@docs toggle_on\n@docs toggle_right\n@docs toggle_up\n@docs trademark\n@docs train\n@docs transgender_alt\n@docs transgender\n@docs trash_o\n@docs trash\n@docs tree\n@docs trello\n@docs tripadvisor\n@docs trophy\n@docs truck\n@docs try\n@docs tty\n@docs tumblr_square\n@docs tumblr\n@docs turkish_lira\n@docs tv\n@docs twitch\n@docs twitter_square\n@docs twitter\n@docs umbrella\n@docs underline\n@docs undo\n@docs university\n@docs unlink\n@docs unlock_alt\n@docs unlock\n@docs unsorted\n@docs upload\n@docs usb\n@docs usd\n@docs user_md\n@docs user_plus\n@docs user_secret\n@docs user_times\n@docs user\n@docs users\n@docs venus_double\n@docs venus_mars\n@docs venus\n@docs viacoin\n@docs video_camera\n@docs vimeo_square\n@docs vimeo\n@docs vine\n@docs vk\n@docs volume_down\n@docs volume_off\n@docs volume_up\n@docs warning\n@docs wechat\n@docs weibo\n@docs weixin\n@docs whatsapp\n@docs wheelchair\n@docs wifi\n@docs wikipedia_w\n@docs windows\n@docs won\n@docs wordpress\n@docs wrench\n@docs xing_square\n@docs xing\n@docs y_combinator_square\n@docs y_combinator\n@docs yahoo\n@docs yc_square\n@docs yc\n@docs yelp\n@docs yen\n@docs youtube_play\n@docs youtube_square\n@docs youtube\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adjust",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "adn",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "align_center",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "align_justify",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "align_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "align_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "amazon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ambulance",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "anchor",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "android",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angellist",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_double_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_double_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_double_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_double_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "angle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "apple",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "archive",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "area_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_o_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_o_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_circle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrow_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrows",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrows_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrows_h",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "arrows_v",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "asterisk",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "at",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "automobile",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "backward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "balance_scale",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ban",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bank",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bar_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bar_chart_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "barcode",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_0",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_1",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_2",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_3",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_4",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_empty",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_full",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_half",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_quarter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "battery_three_quarters",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bed",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "beer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "behance",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "behance_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bell",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bell_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bell_slash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bell_slash_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bicycle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "binoculars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "birthday_cake",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bitbucket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bitbucket_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bitcoin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "black_tie",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bluetooth_b",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bold",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bolt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bomb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "book",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bookmark",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bookmark_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "briefcase",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "btc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bug",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "building",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "building_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bullhorn",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bullseye",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "bus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "buysellads",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cab",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calculator",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calendar",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calendar_check_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calendar_minus_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calendar_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calendar_plus_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "calendar_times_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "camera",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "camera_retro",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "car",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_square_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_square_o_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_square_o_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_square_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "caret_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cart_arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cart_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_amex",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_diners_club",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_discover",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_jcb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_mastercard",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_paypal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_stripe",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cc_visa",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "certificate",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chain",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chain_broken",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "check",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "check_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "check_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "check_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "check_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_circle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_circle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_circle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_circle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chevron_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "child",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "chrome",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "circle_o_notch",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "circle_thin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "clipboard",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "clock_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "clone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "close",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cloud",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cloud_download",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cloud_upload",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cny",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "code",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "code_fork",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "codepen",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "codiepie",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "coffee",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cog",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cogs",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "columns",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "comment",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "comment_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "commenting",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "commenting_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "comments",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "comments_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "compass",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "compress",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "connectdevelop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "contao",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "copy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "copyright",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "creative_commons",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "credit_card",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "credit_card_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "crop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "crosshairs",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "css3",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cube",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cubes",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cut",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "cutlery",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dashboard",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dashcube",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "database",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dedent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "delicious",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "desktop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "deviantart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "diamond",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "digg",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dollar",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dot_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "download",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dribbble",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "dropbox",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "drupal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "edge",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "edit",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "eject",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ellipsis_h",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ellipsis_v",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "empire",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "envelope",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "envelope_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "envelope_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "eraser",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "eur",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "euro",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "exchange",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "exclamation",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "exclamation_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "exclamation_triangle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "expand",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "expeditedssl",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "external_link",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "external_link_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "eye",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "eye_slash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "eyedropper",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fa_500px",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "facebook",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "facebook_f",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "facebook_official",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "facebook_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fast_backward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fast_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fax",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "feed",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "female",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fighter_jet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_archive_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_audio_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_code_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_excel_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_image_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_movie_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_pdf_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_photo_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_picture_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_powerpoint_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_sound_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_text",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_text_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_video_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_word_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "file_zip_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "files_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "film",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fire",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fire_extinguisher",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "firefox",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "flag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "flag_checkered",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "flag_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "flash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "flask",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "flickr",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "floppy_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "folder",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "folder_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "folder_open",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "folder_open_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "font",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fonticons",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "fort_awesome",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "forumbee",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "foursquare",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "frown_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "futbol_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gamepad",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gavel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gbp",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ge",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gear",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gears",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "genderless",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "get_pocket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gg",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gg_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gift",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "git",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "git_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "github",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "github_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "github_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gittip",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "glass",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "globe",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "google",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "google_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "google_plus_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "google_wallet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "graduation_cap",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "gratipay",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "group",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "h_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hacker_news",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_grab_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_lizard_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_o_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_o_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_paper_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_peace_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_pointer_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_rock_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_scissors_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_spock_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hand_stop_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hashtag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hdd_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "header",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "headphones",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "heart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "heart_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "heartbeat",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "history",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "home",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hospital_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hotel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_1",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_2",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_3",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_end",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_half",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "hourglass_start",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "houzz",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "html5",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "i_cursor",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ils",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "image",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "inbox",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "indent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "industry",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "info",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "info_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "inr",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "instagram",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "institution",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "internet_explorer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "intersex",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ioxhost",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "italic",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "joomla",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "jpy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "jsfiddle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "key",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "keyboard_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "krw",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "language",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "laptop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "lastfm",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "lastfm_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "leaf",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "leanpub",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "legal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "lemon_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "level_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "level_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "life_bouy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "life_buoy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "life_ring",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "life_saver",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "lightbulb_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "line_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "link",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "linkedin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "linkedin_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "linux",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "list",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "list_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "list_ol",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "list_ul",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "location_arrow",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "lock",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "long_arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "long_arrow_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "long_arrow_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "long_arrow_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "magic",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "magnet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mail_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mail_reply",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mail_reply_all",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "male",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "map_marker",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "map_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "map_pin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "map_signs",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mars_double",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mars_stroke",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mars_stroke_h",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mars_stroke_v",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "maxcdn",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "meanpath",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "medium",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "medkit",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "meh_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mercury",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "microphone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "microphone_slash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "minus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "minus_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "minus_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "minus_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mixcloud",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mobile",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mobile_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "modx",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "money",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "moon_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mortar_board",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "motorcycle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "mouse_pointer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "music",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "navicon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "neuter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "newspaper_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "object_group",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "object_ungroup",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "odnoklassniki",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "odnoklassniki_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "opencart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "openid",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "opera",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "optin_monster",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "outdent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pagelines",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paint_brush",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paper_plane",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paper_plane_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paperclip",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paragraph",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paste",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pause",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pause_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pause_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paw",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "paypal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pencil",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pencil_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pencil_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "percent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "phone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "phone_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "photo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "picture_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pie_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pied_piper",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pied_piper_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pinterest",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pinterest_p",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "pinterest_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "plane",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "play",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "play_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "play_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "plug",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "plus_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "plus_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "plus_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "power_off",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "print",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "product_hunt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "puzzle_piece",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "qq",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "qrcode",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "question",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "question_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "quote_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "quote_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ra",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "random",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rebel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "recycle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "reddit",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "reddit_alien",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "reddit_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "refresh",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "registered",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "remove",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "renren",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "reorder",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "repeat",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "reply",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "reply_all",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "retweet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rmb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "road",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rocket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rotate_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rotate_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rouble",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rss",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rss_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rub",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ruble",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "rupee",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "safari",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "save",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "scissors",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "scribd",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "search",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "search_minus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "search_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sellsy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "send",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "send_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "server",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "share",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "share_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "share_alt_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "share_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "share_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "shekel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sheqel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "shield",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ship",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "shirtsinbulk",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "shopping_bag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "shopping_basket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "shopping_cart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sign_in",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sign_out",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "signal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "simplybuilt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sitemap",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "skyatlas",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "skype",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "slack",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sliders",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "slideshare",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "smile_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "soccer_ball_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_alpha_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_alpha_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_amount_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_amount_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_numeric_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_numeric_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sort_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "soundcloud",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "space_shuttle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "spinner",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "spoon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "spotify",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stack_exchange",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stack_overflow",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "star",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "star_half",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "star_half_empty",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "star_half_full",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "star_half_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "star_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "steam",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "steam_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "step_backward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "step_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stethoscope",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sticky_note",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sticky_note_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stop_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stop_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "street_view",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "strikethrough",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stumbleupon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "stumbleupon_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "subscript",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "subway",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "suitcase",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "sun_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "superscript",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "support",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "table",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tablet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tachometer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tags",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tasks",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "taxi",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "television",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tencent_weibo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "terminal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "text_height",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "text_width",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "th",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "th_large",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "th_list",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "thumb_tack",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "thumbs_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "thumbs_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "thumbs_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "thumbs_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "ticket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "times",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "times_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "times_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tint",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "toggle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "toggle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "toggle_off",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "toggle_on",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "toggle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "toggle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "trademark",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "train",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "transgender",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "transgender_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "trash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "trash_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tree",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "trello",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tripadvisor",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "trophy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "truck",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "try",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tty",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tumblr",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tumblr_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "turkish_lira",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "tv",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "twitch",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "twitter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "twitter_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "umbrella",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "underline",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "undo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "university",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "unlink",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "unlock",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "unlock_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "unsorted",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "upload",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "usb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "usd",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "user",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "user_md",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "user_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "user_secret",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "user_times",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "users",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "venus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "venus_double",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "venus_mars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "viacoin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "video_camera",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "vimeo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "vimeo_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "vine",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "vk",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "volume_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "volume_off",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "volume_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "warning",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "wechat",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "weibo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "weixin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "whatsapp",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "wheelchair",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "wikipedia_w",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "windows",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "won",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "wordpress",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "wrench",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "xing",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "xing_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "y_combinator",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "y_combinator_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "yahoo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "yc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "yc_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "yelp",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "yen",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "youtube",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "youtube_play",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          },
          {
            "name": "youtube_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "knledg/touch-events",
    "version": "1.0.1",
    "docs": [
      {
        "name": "TouchEvents",
        "comment": " The is a library to provide touch event helpers\n\n# Types\n@docs TouchEvent, Direction, Touch\n\n# Helpers\n@docs emptyTouch, getDirectionX\n\n# Event Handlers\n@docs onTouchEvent, onTouchEnd, onTouchStart\n\n",
        "aliases": [
          {
            "name": "Touch",
            "comment": " Type alias for the touch record on the touch event object\n",
            "args": [],
            "type": "{ clientX : Float, clientY : Float }"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " Supported touch directions\n",
            "args": [],
            "cases": [
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Up",
                []
              ],
              [
                "Down",
                []
              ]
            ]
          },
          {
            "name": "TouchEvent",
            "comment": " Supported touch event types\n",
            "args": [],
            "cases": [
              [
                "TouchStart",
                []
              ],
              [
                "TouchEnd",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "emptyTouch",
            "comment": " Returns a `Touch` record with 0 as default values\n",
            "type": "TouchEvents.Touch"
          },
          {
            "name": "getDirectionX",
            "comment": " Gets the direction of the swipe on the x axis (`Left` or `Right`)\n",
            "type": "Float -> Float -> TouchEvents.Direction"
          },
          {
            "name": "onTouchEnd",
            "comment": " Lower level \"touchend\" event handler\n\nTakes the application `Msg` type which should take `TouchEvents.Touch`\nas a payload\n\n```\ntype Msg\n  = UserSwipeEnd TouchEvents.Touch\n\nview model =\n  div\n    [ TouchEvents.onTouchEnd UserSwipeEnd\n    ]\n    []\n```\n",
            "type": "(TouchEvents.Touch -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onTouchEvent",
            "comment": " Higher level touch event handler\n\nThis takes a TouchEvent type and application `Msg` type.\nThe `Msg` type should take a `TouchEvent.Touch` type.\n\n```\ntype Msg\n  = UserSwipeStart TouchEvents.Touch\n\nview model =\n  div\n    [ TouchEvents.onTouchEvent TouchEvents.TouchStart UserSwipeStart\n    ]\n    []\n```\n",
            "type": "TouchEvents.TouchEvent -> (TouchEvents.Touch -> msg) -> Html.Attribute msg"
          },
          {
            "name": "onTouchStart",
            "comment": " Lower level \"touchstart\" event handler\n\nTakes the application `Msg` type which should take `TouchEvents.Touch`\nas a payload\n\n```\ntype Msg\n  = UserSwipeStart TouchEvents.Touch\n\nview model =\n  div\n    [ TouchEvents.onTouchStart UserSwipeStart\n    ]\n    []\n```\n",
            "type": "(TouchEvents.Touch -> msg) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-astar",
    "version": "2.0.2",
    "docs": [
      {
        "name": "AStar",
        "comment": " The A-Star pathfinding algorithm.\n\n@docs Position\n@docs Path\n@docs findPath\n@docs straightLineCost\n@docs pythagoreanCost\n",
        "aliases": [
          {
            "name": "Path",
            "comment": " A path is a `List` of `Position`s.\n",
            "args": [],
            "type": "List AStar.Position"
          },
          {
            "name": "Position",
            "comment": " A position is just a pair of (x,y) coordinates.\n",
            "args": [],
            "type": "( Int, Int )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "findPath",
            "comment": " Find a path between the `start` and `end` `Position`s. You must\n  supply a cost function and a move function.\n\n  The cost function must estimate the distance between any two\n  positions. It doesn't really matter how accurate this estimate is,\n  as long as it *never* underestimates.\n\n  The move function takes a `Position` and returns a `Set` of possible\n  places you can move to in one step.\n\n  If this function returns `Nothing`, there is no path between the two\n  points. Otherwise it returns `Just` a `List` of steps from `start`\n  to `end`.\n\n  Example usage.\n\n     import AStar exposing (..)\n\n\n     type World =\n         ...your custom code...\n\n\n     movesFrom : World -> Position -> Set Position\n     movesFrom world (x,y) =\n         ...your custom code...\n\n\n     findPath\n         straightLineCost\n         (movesFrom currentWorld)\n         ( 0, 0 ) ( 2, 0 )\n     --> Just [ ( 1, 0 ), ( 2, 0 ) ]\n",
            "type": "(AStar.Position -> AStar.Position -> Float) -> (AStar.Position -> Set.Set AStar.Position) -> AStar.Position -> AStar.Position -> Maybe.Maybe AStar.Path"
          },
          {
            "name": "pythagoreanCost",
            "comment": " An alternative costing algorithm, which calculates pythagorean distance.\n",
            "type": "AStar.Position -> AStar.Position -> Float"
          },
          {
            "name": "straightLineCost",
            "comment": " A simple costing algorithm. Think of it as the number of moves a\nrook/castle would have to make on a chessboard. Even if your piece can\nmove diagonally it will still work! A-Star only requires that the cost\nfunction never *under*estimates.\n",
            "type": "AStar.Position -> AStar.Position -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-cdn",
    "version": "1.2.0",
    "docs": [
      {
        "name": "CDN",
        "comment": " CDN provides handy links to the web CSS frameworks you want at-hand.\n\nTo use, just put the stylesheet you want in your top-level view function, like so:\n\n    import CDN exposing (bootstrap)\n\n    rootView model =\n        div []\n            [ bootstrap.css\n            , ...\n            ]\n\n@docs bootstrap\n@docs skeleton\n@docs reset\n@docs foundation\n@docs fontAwesome\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bootstrap",
            "comment": " [Bootstrap 3](http://getbootstrap.com/)\n",
            "type": "{ css : Html.Html msg, theme : Html.Html msg, js : Html.Html msg }"
          },
          {
            "name": "fontAwesome",
            "comment": " [FontAwesome 4](http://fontawesome.io/)\n",
            "type": "{ css : Html.Html msg }"
          },
          {
            "name": "foundation",
            "comment": " [Foundation 6](http://foundation.zurb.com/)\n",
            "type": "{ css : Html.Html msg, js : Html.Html msg }"
          },
          {
            "name": "reset",
            "comment": " [Eric Meyer's CSS reset](http://meyerweb.com/eric/tools/css/reset/)\n",
            "type": "{ css : Html.Html msg }"
          },
          {
            "name": "skeleton",
            "comment": " [Skeleton 2](http://getskeleton.com/)\n",
            "type": "{ css : Html.Html msg }"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-dialog",
    "version": "3.0.2",
    "docs": [
      {
        "name": "Dialog",
        "comment": " Elm Modal Dialogs.\n\n@docs Config, view, map, mapMaybe\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration for the dialog you display. The `header`, `body`\nand `footer` are all `Maybe (Html msg)` blocks. Those `(Html msg)` blocks can\nbe as simple or as complex as any other view function.\n\nUse only the ones you want and set the others to `Nothing`.\n\nThe `closeMessage` is an optional `Signal.Message` we will send when the user\nclicks the 'X' in the top right. If you don't want that X displayed, use `Nothing`.\n",
            "args": [
              "msg"
            ],
            "type": "{ closeMessage : Maybe.Maybe msg , header : Maybe.Maybe (Html.Html msg) , body : Maybe.Maybe (Html.Html msg) , footer : Maybe.Maybe (Html.Html msg) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "map",
            "comment": "\nThis function is useful when nesting components with the Elm\nArchitecture. It lets you transform the messages produced by a\nsubtree.\n",
            "type": "(a -> b) -> Dialog.Config a -> Dialog.Config b"
          },
          {
            "name": "mapMaybe",
            "comment": " For convenience, a varient of `map` which assumes you're dealing with a `Maybe (Config a)`, which is often the case.\n",
            "type": "(a -> b) -> Maybe.Maybe (Dialog.Config a) -> Maybe.Maybe (Dialog.Config b)"
          },
          {
            "name": "view",
            "comment": " Renders a modal dialog whenever you supply a `Config msg`.\n\nTo use this, include this view in your *top-level* view function,\nright at the top of the DOM tree, like so:\n\n    type Message\n      = ...\n      | ...\n      | AcknowledgeDialog\n\n\n    view : -> Model -> Html Message\n    view model =\n      div\n        []\n        [ ...\n        , ...your regular view code....\n        , ...\n        , Dialog.view\n            (if model.shouldShowDialog then\n              Just { closeMessage = Just AcknowledgeDialog\n                   , header = Just (text \"Alert!\"\n                   , body = Just (p [] [text \"Let me tell you something important...\"])\n                   , footer = Nothing\n                   }\n             else\n              Nothing\n            )\n        ]\n\n\nIt's then up to you to replace `model.shouldShowDialog` with whatever\nlogic should cause the dialog to be displayed, and to handle an\n`AcknowledgeDialog` message with whatever logic should occur when the user\ncloses the dialog.\n\nSee the `examples/` directory for examples of how this works for apps\nlarge and small.\n\n",
            "type": "Maybe.Maybe (Dialog.Config msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-exts",
    "version": "25.10.0",
    "docs": [
      {
        "name": "Exts.Html",
        "comment": " Extensions to the `Html` library.\n\n@docs matchText, nbsp\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matchText",
            "comment": " Highlight regex matches in a given piece of text. This is most easily explained with an example:\n\n    import Regex exposing (regex)\n    import Html.Attributes exposing (class)\n\n    matchText\n      [class \"match\"]\n      (regex \"the\")\n      \"the quick brown fox jumped over the lazy dog\"\n\n    =>\n\n    [span [class \"match\"] [text \"the\"]\n    ,text \" quick brown fox jumped over \"\n    ,span [class \"match\"] [text \"the\"]\n    ,text \" lazy dog\"]\n\n    Now you can add a CSS rule like `.match {background-color: yellow;}` to highlight matches\n    for the user.\n\n    (Note that you can supply any attributes you like for the matched sections, or an empty list.)\n\n",
            "type": "List (Html.Attribute msg) -> Regex.Regex -> String -> List (Html.Html msg)"
          },
          {
            "name": "nbsp",
            "comment": " A non-breaking space. elm-html doesn't support escape sequences\nlike `text \"&nbsp\"`, so use this string instead.\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Array",
        "comment": " Extensions to the core `Array` library.\n\n@docs update\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "update",
            "comment": " 'Update' the entry at position `n`, by applying `f` to it. If the\nindex is out of range, the array is unaltered.\n",
            "type": "Int -> (a -> a) -> Array.Array a -> Array.Array a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.String",
        "comment": " Extensions to the core `String` library.\n\n@docs removePrefix\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "removePrefix",
            "comment": " Strip a leading string from a `String`.\n",
            "type": "String -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Validation",
        "comment": " Simple tools for validation. See also [Richard Feldman's elm-validate](http://package.elm-lang.org/packages/rtfeldman/elm-validate/latest).\n\n@docs Validator, apply, (|:), required, notBlank, matches, email, emailRegex\n",
        "aliases": [
          {
            "name": "Validator",
            "comment": " A validator is a function that takes a possibly-invalid form, and\neither returns an error message, or a form that is definitely valid. For example:\n\n    type alias Form =\n      { message : Maybe String\n      , email : Maybe String\n      , firstName : Maybe String\n      , age : Maybe Int\n      }\n\n    type alias ValidForm =\n      { message : String\n      , email : String\n      , firstName : String\n      , age : Int\n      }\n\n    validateForm : Form -> Result String ValidForm\n    validateForm form =\n      Ok ValidForm\n        |: notBlank \"Message is required and may not be blank.\" form.message\n        |: email \"Email is required and may not be blank.\" form.email\n        |: matches (caseInsensitive (regex \"^[a-z]+$\")) \"First name may only contain letters.\" form.firstName\n        |: required \"Age is required\" form.age\n\nAn error message is typically a `String`, but may be any type you choose.\n",
            "args": [
              "e",
              "a",
              "b"
            ],
            "type": "Maybe.Maybe a -> Result.Result e b"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Chain validators together.\n\n(Hat tip to CircuitHub, who inspired the syntax and guided the code with their [elm-json-extra](http://package.elm-lang.org/packages/circuithub/elm-json-extra/latest) library.)\n",
            "type": "Result.Result e (a -> b) -> Result.Result e a -> Result.Result e b"
          },
          {
            "name": "email",
            "comment": " A basic email regex. This is incredibly simplistic, but is\nincluded for convenience.\n\nRemember that the only real way to validate an email address is to\nsend something to it and get a reply.\n",
            "type": "e -> Exts.Validation.Validator e String String"
          },
          {
            "name": "emailRegex",
            "comment": " ",
            "type": "Regex.Regex"
          },
          {
            "name": "matches",
            "comment": " A field that must match the given regex.\n",
            "type": "Regex.Regex -> e -> Exts.Validation.Validator e String String"
          },
          {
            "name": "notBlank",
            "comment": " A field that might be `Nothing`, but is only valid if it is a non-empty `String`.\n",
            "type": "e -> Exts.Validation.Validator e String String"
          },
          {
            "name": "required",
            "comment": " A field that might be `Nothing`, but is only valid if it is `Just a`.\n",
            "type": "e -> Exts.Validation.Validator e a a"
          },
          {
            "name": "|:",
            "comment": " Convenient synonym for `apply`.\n",
            "type": "Result.Result e (a -> b) -> Result.Result e a -> Result.Result e b"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Task",
        "comment": " Extensions to the core `Process` library.\n\n@docs delay, asCmd\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "asCmd",
            "comment": " Turn a `Task` into a `Cmd` which returns a `Result`.\n",
            "type": "Task.Task e a -> Platform.Cmd.Cmd (Result.Result e a)"
          },
          {
            "name": "delay",
            "comment": " Delay running the `Task` for a given `Time`.\n\nThis is just the example given in `Task.sleep` wrapped up, because it's o useful.\n",
            "type": "Time.Time -> Task.Task e a -> Task.Task e a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Delta",
        "comment": " A system for tracking players that enter and leave a stage, a-la D3.\n\nImplementation detail: This code is hampered by the lack of Elm's type classes. Note the following:\n1. Performance may degrade badly as the number of elements increases.\n2. It is up to you to ensure (a) implments Eq correctly.\n\n@docs Delta, empty, generation\n",
        "aliases": [
          {
            "name": "Delta",
            "comment": " A data-structure that maintains the difference list of entering, continuing and leaving players.\n",
            "args": [
              "a"
            ],
            "type": "{ entering : List a, continuing : List a, leaving : List a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " A default starting state for Deltas.\n",
            "type": "Exts.Delta.Delta a"
          },
          {
            "name": "generation",
            "comment": " Update the delta by inspecting a list of players.\n",
            "type": "List a -> Exts.Delta.Delta a -> Exts.Delta.Delta a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Tuple",
        "comment": " Extensions for tuples.\n\n@docs indexedPair\n@docs first\n@docs second\n@docs both\n@docs pair\n@docs fork\n@docs onFirst\n@docs onSecond\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "both",
            "comment": " Update both components of a pair with a single function.\n",
            "type": "(a -> b) -> ( a, a ) -> ( b, b )"
          },
          {
            "name": "first",
            "comment": " Update the first component of a pair.\n",
            "type": "(a -> a') -> ( a, b ) -> ( a', b )"
          },
          {
            "name": "fork",
            "comment": " Generate a pair from a single value and a left & right function.\n",
            "type": "(a -> b) -> (a -> c) -> a -> ( b, c )"
          },
          {
            "name": "indexedPair",
            "comment": " Turn a items into a key-value pair.\n\n  See also `Exts.Dict.indexBy` and `Exts.Dict.groupBy`.\n",
            "type": "(a -> b) -> a -> ( b, a )"
          },
          {
            "name": "onFirst",
            "comment": " Apply a function that considers both elements of a pair and changes the first.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> ( c, b )"
          },
          {
            "name": "onSecond",
            "comment": " Apply a function that considers both elements of a pair and changes the second.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> ( a, c )"
          },
          {
            "name": "pair",
            "comment": " Update both components of a pair with two functions.\n",
            "type": "(a -> a') -> (b -> b') -> ( a, b ) -> ( a', b' )"
          },
          {
            "name": "second",
            "comment": " Update the second component of a pair.\n",
            "type": "(b -> b') -> ( a, b ) -> ( a, b' )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Maybe",
        "comment": " Extensions to the core `Maybe` library.\n\n@docs isJust, isNothing, maybe, mappend, catMaybes, join, maybeDefault, matches, validate, when\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "catMaybes",
            "comment": " Extract all the `Just` values from a List of Maybes.\n",
            "type": "List (Maybe.Maybe a) -> List a"
          },
          {
            "name": "isJust",
            "comment": " Boolean checks.\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "isNothing",
            "comment": " ",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "join",
            "comment": " Join together two `Maybe` values using the supplied function. If\neither value is `Nothing`, the result is `Nothing`.\n",
            "type": "(a -> b -> c) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c"
          },
          {
            "name": "mappend",
            "comment": " Join two `Maybe`s together as though they were one.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe ( a, b )"
          },
          {
            "name": "matches",
            "comment": " Check the if value in the `Maybe` matches a predicate. If it does, pass it through, if not, return nothing.\n\n    matches isEven (Just 2) => Just 2\n    matches isEven (Just 3) => Nothing\n    matches isEven Nothing => Nothing\n",
            "type": "(a -> Bool) -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "maybe",
            "comment": " Apply a function to a value, returning the default if the value is `Nothing`.\n",
            "type": "b -> (a -> b) -> Maybe.Maybe a -> b"
          },
          {
            "name": "maybeDefault",
            "comment": " If `x` is a `Just _` value, return it, otherwise return `Just default`.\n",
            "type": "a -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "validate",
            "comment": " Validate a value against a predicate, returning a `Maybe`.\n\n    validate isEven 2 => Just 2\n    validate isEven 3 => Nothing\n",
            "type": "(a -> Bool) -> a -> Maybe.Maybe a"
          },
          {
            "name": "when",
            "comment": " When `test` returns true, return `Just value`, otherwise return `Nothing`.\n",
            "type": "Bool -> a -> Maybe.Maybe a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Set",
        "comment": " Extensions to the core `Set` library.\n\n@docs select, uniqueItems, toggle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "select",
            "comment": " Pull any items from a list where (f x) is in the given set.\n",
            "type": "(a -> comparable) -> Set.Set comparable -> List a -> List a"
          },
          {
            "name": "toggle",
            "comment": " If x is a member of the set, remove it. Otherwise, add it.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "uniqueItems",
            "comment": " Dive into a `List` to get a set of values.\n\n  For example, pulling a `Set` of countries from a `List` of users.\n",
            "type": "(a -> Maybe.Maybe comparable) -> List a -> Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.RemoteData",
        "comment": " **NOTE:** This file has been promoted to its own project. Please see\nthe [RemoteData for Elm package](http://package.elm-lang.org/packages/krisajenkins/remotedata/latest).\nThis file will be remove from elm-exts in a future release.\n\n\n\nA datatype representing fetched data.\n\nIf you find yourself continually using `Maybe (Result Error a)` to\nrepresent loaded data, or you have a habit of shuffling errors away to\nwhere they can be quietly ignored, consider using this. It makes it\neasier to represent the real state of a remote data fetch and handle\nit properly.\n\n\nFor more on the motivation, take a look at the blog post [How Elm Slays A UI Antipattern](http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html).\n\n\nTo use the datatype, let's look at an example that loads `News` from a feed.\n\nFirst you add to your model, wrapping the data you want in `WebData`:\n\n\n    type alias Model =\n        { news : WebData News }\n\n\nThen add in a message that will deliver the response:\n\n\n    type alias Msg\n        = NewsResponse (WebData News)\n\n\nNow we can create an HTTP get:\n\n\n    getNews : Cmd Msg\n    getNews =\n        Http.get decodeNews \"/news\"\n            |> RemoteData.asCmd\n            |> Cmd.map NewsResponse\n\n\nWe trigger it in our `init` function:\n\n\n    init : ( Model, Cmd Msg)\n    init =\n        ( { news = Loading }\n        , getNews\n        )\n\n\nWe handle it in our `update` function:\n\n\n    update msg model =\n        case msg of\n            NewsResponse response ->\n                ( { model | news = response }\n                , Cmd.none\n                )\n\n\n\nMost of this you'd already have in your app, and the changes are just\nwrapping the datatype in `Webdata`, and updating the `Http.get` call\nto add in `RemoteData.asCmd`.\n\nNow we get to where we really want to be, rendering the data and\nhandling the different states in the UI gracefully:\n\n\n    view : Model -> Html msg\n    view model =\n      case model.news of\n        NotAsked -> text \"Initialising.\"\n\n        Loading -> text \"Loading.\"\n\n        Failure err -> text (\"Error: \" ++ toString err)\n\n        Success news -> viewNews news\n\n\n    viewNews : News -> Html msg\n    viewNews news =\n        div []\n            [h1 [] [text \"Here is the news.\"]\n            , ...]\n\n@docs RemoteData, WebData, map, mapFailure, mapBoth, andThen, withDefault, fromResult, asCmd, fromTask, append, mappend, isSuccess, update\n\n",
        "aliases": [
          {
            "name": "WebData",
            "comment": " While `RemoteData` can model any type of error, the most common\none you'll actually encounter is when you fetch data from a REST\ninterface, and get back `RemoteData Http.Error a`. Because that case\nis so common, `WebData` is provided as a useful alias.\n",
            "args": [
              "a"
            ],
            "type": "Exts.RemoteData.RemoteData Http.Error a"
          }
        ],
        "types": [
          {
            "name": "RemoteData",
            "comment": " Frequently when you're fetching data from an API, you want to represent four different states:\n  * `NotAsked` - We haven't asked for the data yet.\n  * `Loading` - We've asked, but haven't got an answer yet.\n  * `Failure` - We asked, but something went wrong. Here's the error.\n  * `Success` - Everything worked, and here's the data.\n",
            "args": [
              "e",
              "a"
            ],
            "cases": [
              [
                "NotAsked",
                []
              ],
              [
                "Loading",
                []
              ],
              [
                "Failure",
                [
                  "e"
                ]
              ],
              [
                "Success",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together RemoteData function calls.\n",
            "type": "Exts.RemoteData.RemoteData e a -> (a -> Exts.RemoteData.RemoteData e b) -> Exts.RemoteData.RemoteData e b"
          },
          {
            "name": "append",
            "comment": " Append - join two `RemoteData` values together as though\nthey were one.\n\nIf their value is `NotAsked`, the result is `NotAsked`.\nIf their value is `Loading`, the result is `Loading`.\nIf both values are `Failure`, the left one wins.\n",
            "type": "Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData e b -> Exts.RemoteData.RemoteData e ( a, b )"
          },
          {
            "name": "asCmd",
            "comment": " Convert a web `Task`, probably produced from elm-http, to a `Cmd (RemoteData e a)`.\n",
            "type": "Task.Task e a -> Platform.Cmd.Cmd (Exts.RemoteData.RemoteData e a)"
          },
          {
            "name": "fromResult",
            "comment": " Convert a `Result Error`, probably produced from elm-http, to a RemoteData value.\n",
            "type": "Result.Result e a -> Exts.RemoteData.RemoteData e a"
          },
          {
            "name": "fromTask",
            "comment": " Convert from a `Task` that may succeed or fail, to one that always\nsucceeds with the `RemoteData` that captures any errors.\n",
            "type": "Task.Task e a -> Task.Task Basics.Never (Exts.RemoteData.RemoteData e a)"
          },
          {
            "name": "isSuccess",
            "comment": " State-checking predicate. Returns true if we've successfully loaded some data.\n",
            "type": "Exts.RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function into the `Success` value.\n",
            "type": "(a -> b) -> Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData e b"
          },
          {
            "name": "mapBoth",
            "comment": " Map function into both the `Success` and `Failure` value.\n",
            "type": "(a -> b) -> (e -> f) -> Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData f b"
          },
          {
            "name": "mapFailure",
            "comment": " Map a function into the `Failure` value.\n",
            "type": "(e -> f) -> Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData f a"
          },
          {
            "name": "mappend",
            "comment": " DEPRECATED: Old, incorrect name for `append`.\n",
            "type": "Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData e b -> Exts.RemoteData.RemoteData e ( a, b )"
          },
          {
            "name": "update",
            "comment": " Apply an Elm update function - `Model -> (Model, Cmd Msg)` - to any `Successful`-ly loaded data.\n\nIt's quite common in Elm to want to run a model-update function, over\nsome remote data, but only once it's actually been loaded.\n\nFor example, we might want to handle UI messages changing the users\nsettings, but that only makes sense once those settings have been\nreturned from the server.\n\nThis function makes it more convenient to reach inside a\n`RemoteData.Success` value and apply an update. If the data in not\n`Success a`, it is return unchanged with a `Cmd.none`.\n\n",
            "type": "(a -> ( a, Platform.Cmd.Cmd b )) -> Exts.RemoteData.RemoteData e a -> ( Exts.RemoteData.RemoteData e a, Platform.Cmd.Cmd b )"
          },
          {
            "name": "withDefault",
            "comment": " Return the `Success` value, or the default.\n",
            "type": "a -> Exts.RemoteData.RemoteData e a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Result",
        "comment": " Extensions to the core `Result` library.\n\n@docs mapBoth, isOk, isErr, fromOk, fromErr, mappend\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromErr",
            "comment": " ",
            "type": "Result.Result e a -> Maybe.Maybe e"
          },
          {
            "name": "fromOk",
            "comment": " Convert a `Result` to a `Maybe`.\n",
            "type": "Result.Result e a -> Maybe.Maybe a"
          },
          {
            "name": "isErr",
            "comment": " ",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "isOk",
            "comment": " Boolean checks for success/failure.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " Apply functions to both sides of a `Result`, transforming the error and ok types.\n",
            "type": "(e -> f) -> (a -> b) -> Result.Result e a -> Result.Result f b"
          },
          {
            "name": "mappend",
            "comment": " Monoidal append - join two Results together as though they were one.\n",
            "type": "Result.Result e a -> Result.Result e b -> Result.Result e ( a, b )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Json.Decode",
        "comment": " Extensions to the core `Json.Decode` library.\n\n@docs stringIgnoringBlanks\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "stringIgnoringBlanks",
            "comment": " A decoder like `(maybe string)`, except an empty or whitespace string is treated as `Nothing`.\n\nUseful for dirty data-models.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe String)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.List",
        "comment": " Extensions to the core `List` library.\n\n@docs chunk, mergeBy, singleton, maybeSingleton, firstMatch, rest, unique\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chunk",
            "comment": " Split a list into chunks of length `n`.\n\n  Be aware that the last sub-list may be smaller than `n`-items long.\n\n  For example `chunk 3 [1..10] => [[1,2,3], [4,5,6], [7,8,9], [10]]`\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "firstMatch",
            "comment": " Find the first element in the `List` that matches the given predicate.\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "maybeSingleton",
            "comment": " Wrap a maybe item into a `List`. If the item is `Nothing`, the `List` is empty.\n",
            "type": "Maybe.Maybe a -> List a"
          },
          {
            "name": "mergeBy",
            "comment": " Merge two lists. The first argument is a function which returns\nthe unique ID of each element. Where an element appears more than\nonce, the last won wins.\n",
            "type": "(a -> comparable) -> List a -> List a -> List a"
          },
          {
            "name": "rest",
            "comment": " Like List.tail, but if the list is empty it returns an empty list rather than `Nothing`.\n",
            "type": "List a -> List a"
          },
          {
            "name": "singleton",
            "comment": " Wrap a single item into a `List`.\n",
            "type": "a -> List a"
          },
          {
            "name": "unique",
            "comment": " Return a new list with duplicates removed. Order is preserved.\n",
            "type": "List comparable -> List comparable"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Json.Encode",
        "comment": " Extensions to the core `Json.Encode` library.\n\n@docs set, dict, tuple2\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Encode a `Dict` to a JSON array .\n",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "set",
            "comment": " Encode a `Set` to a JSON array .\n",
            "type": "(comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value"
          },
          {
            "name": "tuple2",
            "comment": " Encode a pair to a JSON array .\n",
            "type": "(a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> ( a, b ) -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.LatLng",
        "comment": " Calculations between points on the earth.\n\n@docs distanceBetween, bearingTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bearingTo",
            "comment": " Calculate the heading you'd need to travel on to get from point a to point b.\n",
            "type": "{ a | latitude : Float, longitude : Float } -> { b | latitude : Float, longitude : Float } -> Float"
          },
          {
            "name": "distanceBetween",
            "comment": " Calculate the distance in kilometers between two points.\n\n  Note that this assumes the earth is spherical, which is not true, but may be true enough for your purposes.\n",
            "type": "{ a | latitude : Float, longitude : Float } -> { b | latitude : Float, longitude : Float } -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Html.Events",
        "comment": " Extensions to the `Html.Events` library.\n\n@docs onEnter, onSelect\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onEnter",
            "comment": " Send a message when the user hits enter.\n",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "onSelect",
            "comment": " An event handler for `<select>` tags. Set the child `<option>` tag's value to \"\" to get a `Nothing`.\n",
            "type": "(Maybe.Maybe String -> msg) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Int",
        "comment": " Extensions to the core `Int` library.\n\n@docs floorBy\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "floorBy",
            "comment": " Round an int down to the nearest multiple of a factor.\n\n    floorBy  2 143 => Just 142\n    floorBy 50 143 => Just 100\n    floorBy  0 143 => Nothing\n",
            "type": "Int -> Int -> Maybe.Maybe Int"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Html.Table",
        "comment": " Helpers for simple data tables. Define how a list of items can be\nrendered as a table. The definition is a `List` of `(column-title,\ncolumn-value-accessor)` pairs.\n\n  I find this approach works well for simple tables, but breaks down\n  as soon as you need much customisation. Use it to get you started\n  quickly, but be ready to rewrite when this 80% case no longer suits.\n\n@docs CellDef, TableDef, simpleTable, simpleTableRow, titleGroup, valueGroup\n",
        "aliases": [
          {
            "name": "CellDef",
            "comment": " A table definition looks something like:\n\n    [(text \"Name\", .name >> text)\n    ,(text \"Name\", .age >> toString >> text)]\n\n",
            "args": [
              "a",
              "msg"
            ],
            "type": "( Html.Html msg, a -> Html.Html msg )"
          },
          {
            "name": "TableDef",
            "comment": " ",
            "args": [
              "a",
              "msg"
            ],
            "type": "List (Exts.Html.Table.CellDef a msg)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "simpleTable",
            "comment": " Given a table definition, render a list of elements as HTML.\n",
            "type": "Exts.Html.Table.TableDef a msg -> List a -> Html.Html msg"
          },
          {
            "name": "simpleTableRow",
            "comment": " Given a table definition, render an element to a <tr> tag. This is\nlower-level. Usually you will want `simpleTable` instead.\n",
            "type": "Exts.Html.Table.TableDef a msg -> a -> Html.Html msg"
          },
          {
            "name": "titleGroup",
            "comment": " titleGroup and valueGroup are used to create columns that stack multiple pairs. For example:\n\n    [(titleGroup [\"Latitude\", \"Longitude\"]\n     ,valueGroup [.location >> .lat >> toString >> text\n                 ,.location >> .lng >> toString >> text])\n\n",
            "type": "List String -> Html.Html msg"
          },
          {
            "name": "valueGroup",
            "comment": " ",
            "type": "List (a -> Html.Html msg) -> a -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Http",
        "comment": " Extensions to the `Http` library.\n\n@docs handleError, put, postContent, postForm, postJson, cgiParameters\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cgiParameters",
            "comment": " Encode a CGI parameter list.\n",
            "type": "List ( String, String ) -> String"
          },
          {
            "name": "handleError",
            "comment": " Lift a raw Http response into a `Task Error Response`, using the same rules `Http` uses internally.\n",
            "type": "Task.Task Http.RawError Http.Response -> Task.Task Http.Error Http.Response"
          },
          {
            "name": "postContent",
            "comment": " Send a `POST` request with the given content-type.\n",
            "type": "String -> Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "postForm",
            "comment": " Send a `POST` request with appropriate headers for form payloads.\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "postJson",
            "comment": " Send a `POST` request with appropriate headers JSON payloads.\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "put",
            "comment": " Send a simple `PUT` request.\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Float",
        "comment": " Extensions to the core `Float` library.\n\n@docs roundTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "roundTo",
            "comment": " Round a `Float` to a given number of decimal places.\n",
            "type": "Int -> Float -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Html.Bootstrap.Glyphicons",
        "comment": " Type-safe glyphicons for Twitter Bootstrap 3 users.\n\n@docs glyphicon, Glyphicon\n",
        "aliases": [],
        "types": [
          {
            "name": "Glyphicon",
            "comment": " A type-safe list of all available glyphicons in Bootstrap. To fit\nElm's syntax we convert from kebab-case to CamelCase, so\n`\"glyphicon-star-empty\"` becomes the type constructor `StarEmpty`.\n",
            "args": [],
            "cases": [
              [
                "Asterisk",
                []
              ],
              [
                "Plus",
                []
              ],
              [
                "Euro",
                []
              ],
              [
                "Eur",
                []
              ],
              [
                "Minus",
                []
              ],
              [
                "Cloud",
                []
              ],
              [
                "Envelope",
                []
              ],
              [
                "Pencil",
                []
              ],
              [
                "Glass",
                []
              ],
              [
                "Music",
                []
              ],
              [
                "Search",
                []
              ],
              [
                "Heart",
                []
              ],
              [
                "Star",
                []
              ],
              [
                "StarEmpty",
                []
              ],
              [
                "User",
                []
              ],
              [
                "Film",
                []
              ],
              [
                "ThLarge",
                []
              ],
              [
                "Th",
                []
              ],
              [
                "ThList",
                []
              ],
              [
                "Ok",
                []
              ],
              [
                "Remove",
                []
              ],
              [
                "ZoomIn",
                []
              ],
              [
                "ZoomOut",
                []
              ],
              [
                "Off",
                []
              ],
              [
                "Signal",
                []
              ],
              [
                "Cog",
                []
              ],
              [
                "Trash",
                []
              ],
              [
                "Home",
                []
              ],
              [
                "File",
                []
              ],
              [
                "Time",
                []
              ],
              [
                "Road",
                []
              ],
              [
                "DownloadAlt",
                []
              ],
              [
                "Download",
                []
              ],
              [
                "Upload",
                []
              ],
              [
                "Inbox",
                []
              ],
              [
                "PlayCircle",
                []
              ],
              [
                "Repeat",
                []
              ],
              [
                "Refresh",
                []
              ],
              [
                "ListAlt",
                []
              ],
              [
                "Lock",
                []
              ],
              [
                "Flag",
                []
              ],
              [
                "Headphones",
                []
              ],
              [
                "VolumeOff",
                []
              ],
              [
                "VolumeDown",
                []
              ],
              [
                "VolumeUp",
                []
              ],
              [
                "Qrcode",
                []
              ],
              [
                "Barcode",
                []
              ],
              [
                "Tag",
                []
              ],
              [
                "Tags",
                []
              ],
              [
                "Book",
                []
              ],
              [
                "Bookmark",
                []
              ],
              [
                "Print",
                []
              ],
              [
                "Camera",
                []
              ],
              [
                "Font",
                []
              ],
              [
                "Bold",
                []
              ],
              [
                "Italic",
                []
              ],
              [
                "TextHeight",
                []
              ],
              [
                "TextWidth",
                []
              ],
              [
                "AlignLeft",
                []
              ],
              [
                "AlignCenter",
                []
              ],
              [
                "AlignRight",
                []
              ],
              [
                "AlignJustify",
                []
              ],
              [
                "List",
                []
              ],
              [
                "IndentLeft",
                []
              ],
              [
                "IndentRight",
                []
              ],
              [
                "FacetimeVideo",
                []
              ],
              [
                "Picture",
                []
              ],
              [
                "MapMarker",
                []
              ],
              [
                "Adjust",
                []
              ],
              [
                "Tint",
                []
              ],
              [
                "Edit",
                []
              ],
              [
                "Share",
                []
              ],
              [
                "Check",
                []
              ],
              [
                "Move",
                []
              ],
              [
                "StepBackward",
                []
              ],
              [
                "FastBackward",
                []
              ],
              [
                "Backward",
                []
              ],
              [
                "Play",
                []
              ],
              [
                "Pause",
                []
              ],
              [
                "Stop",
                []
              ],
              [
                "Forward",
                []
              ],
              [
                "FastForward",
                []
              ],
              [
                "StepForward",
                []
              ],
              [
                "Eject",
                []
              ],
              [
                "ChevronLeft",
                []
              ],
              [
                "ChevronRight",
                []
              ],
              [
                "PlusSign",
                []
              ],
              [
                "MinusSign",
                []
              ],
              [
                "RemoveSign",
                []
              ],
              [
                "OkSign",
                []
              ],
              [
                "QuestionSign",
                []
              ],
              [
                "InfoSign",
                []
              ],
              [
                "Screenshot",
                []
              ],
              [
                "RemoveCircle",
                []
              ],
              [
                "OkCircle",
                []
              ],
              [
                "BanCircle",
                []
              ],
              [
                "ArrowLeft",
                []
              ],
              [
                "ArrowRight",
                []
              ],
              [
                "ArrowUp",
                []
              ],
              [
                "ArrowDown",
                []
              ],
              [
                "ShareAlt",
                []
              ],
              [
                "ResizeFull",
                []
              ],
              [
                "ResizeSmall",
                []
              ],
              [
                "ExclamationSign",
                []
              ],
              [
                "Gift",
                []
              ],
              [
                "Leaf",
                []
              ],
              [
                "Fire",
                []
              ],
              [
                "EyeOpen",
                []
              ],
              [
                "EyeClose",
                []
              ],
              [
                "WarningSign",
                []
              ],
              [
                "Plane",
                []
              ],
              [
                "Calendar",
                []
              ],
              [
                "Random",
                []
              ],
              [
                "Comment",
                []
              ],
              [
                "Magnet",
                []
              ],
              [
                "ChevronUp",
                []
              ],
              [
                "ChevronDown",
                []
              ],
              [
                "Retweet",
                []
              ],
              [
                "ShoppingCart",
                []
              ],
              [
                "FolderClose",
                []
              ],
              [
                "FolderOpen",
                []
              ],
              [
                "ResizeVertical",
                []
              ],
              [
                "ResizeHorizontal",
                []
              ],
              [
                "Hdd",
                []
              ],
              [
                "Bullhorn",
                []
              ],
              [
                "Bell",
                []
              ],
              [
                "Certificate",
                []
              ],
              [
                "ThumbsUp",
                []
              ],
              [
                "ThumbsDown",
                []
              ],
              [
                "HandRight",
                []
              ],
              [
                "HandLeft",
                []
              ],
              [
                "HandUp",
                []
              ],
              [
                "HandDown",
                []
              ],
              [
                "CircleArrowRight",
                []
              ],
              [
                "CircleArrowLeft",
                []
              ],
              [
                "CircleArrowUp",
                []
              ],
              [
                "CircleArrowDown",
                []
              ],
              [
                "Globe",
                []
              ],
              [
                "Wrench",
                []
              ],
              [
                "Tasks",
                []
              ],
              [
                "Filter",
                []
              ],
              [
                "Briefcase",
                []
              ],
              [
                "Fullscreen",
                []
              ],
              [
                "Dashboard",
                []
              ],
              [
                "Paperclip",
                []
              ],
              [
                "HeartEmpty",
                []
              ],
              [
                "Link",
                []
              ],
              [
                "Phone",
                []
              ],
              [
                "Pushpin",
                []
              ],
              [
                "Usd",
                []
              ],
              [
                "Gbp",
                []
              ],
              [
                "Sort",
                []
              ],
              [
                "SortByAlphabet",
                []
              ],
              [
                "SortByAlphabetAlt",
                []
              ],
              [
                "SortByOrder",
                []
              ],
              [
                "SortByOrderAlt",
                []
              ],
              [
                "SortByAttributes",
                []
              ],
              [
                "SortByAttributesAlt",
                []
              ],
              [
                "Unchecked",
                []
              ],
              [
                "Expand",
                []
              ],
              [
                "CollapseDown",
                []
              ],
              [
                "CollapseUp",
                []
              ],
              [
                "LogIn",
                []
              ],
              [
                "Flash",
                []
              ],
              [
                "LogOut",
                []
              ],
              [
                "NewWindow",
                []
              ],
              [
                "Record",
                []
              ],
              [
                "Save",
                []
              ],
              [
                "Open",
                []
              ],
              [
                "Saved",
                []
              ],
              [
                "Import",
                []
              ],
              [
                "Export",
                []
              ],
              [
                "Send",
                []
              ],
              [
                "FloppyDisk",
                []
              ],
              [
                "FloppySaved",
                []
              ],
              [
                "FloppyRemove",
                []
              ],
              [
                "FloppySave",
                []
              ],
              [
                "FloppyOpen",
                []
              ],
              [
                "CreditCard",
                []
              ],
              [
                "Transfer",
                []
              ],
              [
                "Cutlery",
                []
              ],
              [
                "Header",
                []
              ],
              [
                "Compressed",
                []
              ],
              [
                "Earphone",
                []
              ],
              [
                "PhoneAlt",
                []
              ],
              [
                "Tower",
                []
              ],
              [
                "Stats",
                []
              ],
              [
                "SdVideo",
                []
              ],
              [
                "HdVideo",
                []
              ],
              [
                "Subtitles",
                []
              ],
              [
                "SoundStereo",
                []
              ],
              [
                "SoundDolby",
                []
              ],
              [
                "Sound51",
                []
              ],
              [
                "Sound61",
                []
              ],
              [
                "Sound71",
                []
              ],
              [
                "CopyrightMark",
                []
              ],
              [
                "RegistrationMark",
                []
              ],
              [
                "CloudDownload",
                []
              ],
              [
                "CloudUpload",
                []
              ],
              [
                "TreeConifer",
                []
              ],
              [
                "TreeDeciduous",
                []
              ],
              [
                "Cd",
                []
              ],
              [
                "SaveFile",
                []
              ],
              [
                "OpenFile",
                []
              ],
              [
                "LevelUp",
                []
              ],
              [
                "Copy",
                []
              ],
              [
                "Paste",
                []
              ],
              [
                "Alert",
                []
              ],
              [
                "Equalizer",
                []
              ],
              [
                "King",
                []
              ],
              [
                "Queen",
                []
              ],
              [
                "Pawn",
                []
              ],
              [
                "Bishop",
                []
              ],
              [
                "Knight",
                []
              ],
              [
                "BabyFormula",
                []
              ],
              [
                "Tent",
                []
              ],
              [
                "Blackboard",
                []
              ],
              [
                "Bed",
                []
              ],
              [
                "Apple",
                []
              ],
              [
                "Erase",
                []
              ],
              [
                "Hourglass",
                []
              ],
              [
                "Lamp",
                []
              ],
              [
                "Duplicate",
                []
              ],
              [
                "PiggyBank",
                []
              ],
              [
                "Scissors",
                []
              ],
              [
                "Bitcoin",
                []
              ],
              [
                "Btc",
                []
              ],
              [
                "Xbt",
                []
              ],
              [
                "Yen",
                []
              ],
              [
                "Jpy",
                []
              ],
              [
                "Ruble",
                []
              ],
              [
                "Rub",
                []
              ],
              [
                "Scale",
                []
              ],
              [
                "IceLolly",
                []
              ],
              [
                "IceLollyTasted",
                []
              ],
              [
                "Education",
                []
              ],
              [
                "OptionHorizontal",
                []
              ],
              [
                "OptionVertical",
                []
              ],
              [
                "MenuHamburger",
                []
              ],
              [
                "ModalWindow",
                []
              ],
              [
                "Oil",
                []
              ],
              [
                "Grain",
                []
              ],
              [
                "Sunglasses",
                []
              ],
              [
                "TextSize",
                []
              ],
              [
                "TextColor",
                []
              ],
              [
                "TextBackground",
                []
              ],
              [
                "ObjectAlignTop",
                []
              ],
              [
                "ObjectAlignBottom",
                []
              ],
              [
                "ObjectAlignHorizontal",
                []
              ],
              [
                "ObjectAlignLeft",
                []
              ],
              [
                "ObjectAlignVertical",
                []
              ],
              [
                "ObjectAlignRight",
                []
              ],
              [
                "TriangleRight",
                []
              ],
              [
                "TriangleLeft",
                []
              ],
              [
                "TriangleBottom",
                []
              ],
              [
                "TriangleTop",
                []
              ],
              [
                "Console",
                []
              ],
              [
                "Superscript",
                []
              ],
              [
                "Subscript",
                []
              ],
              [
                "MenuLeft",
                []
              ],
              [
                "MenuRight",
                []
              ],
              [
                "MenuDown",
                []
              ],
              [
                "MenuUp",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "glyphicon",
            "comment": " Type-checked Glyphicons.\n",
            "type": "Exts.Html.Bootstrap.Glyphicons.Glyphicon -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Html.Attributes",
        "comment": " Extensions to the `Html.Attributes` library.\n\n@docs defaultValue, defaultString, defaultInt, defaultFloat, styleList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "defaultFloat",
            "comment": " Convenience version of `defaultValue`, for `Float`s.\n",
            "type": "Float -> Html.Attribute msg"
          },
          {
            "name": "defaultInt",
            "comment": " Convenience version of `defaultValue`, for `Int`s.\n",
            "type": "Int -> Html.Attribute msg"
          },
          {
            "name": "defaultString",
            "comment": " Convenience version of `defaultValue`, for `String`s.\n",
            "type": "String -> Html.Attribute msg"
          },
          {
            "name": "defaultValue",
            "comment": " Set a default value for an input field.\n",
            "type": "Json.Encode.Value -> Html.Attribute msg"
          },
          {
            "name": "styleList",
            "comment": " This function makes it easier to specify a conditional set of styles.\n   This the style-equivalent of elm-html's classList.\n",
            "type": "List ( String, String, Bool ) -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Html.Bootstrap",
        "comment": " Base classes for Twitter Bootstrap 3 users.\n\n@docs stylesheet, container, containerFluid, row, formGroup, empty, twoColumns, Ratio, video, popover, PopoverDirection, clearfix, well, jumbotron, badge\n",
        "aliases": [],
        "types": [
          {
            "name": "PopoverDirection",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Bottom",
                []
              ],
              [
                "Left",
                []
              ]
            ]
          },
          {
            "name": "Ratio",
            "comment": " Aspect ratios for responsive video embedding.\n",
            "args": [],
            "cases": [
              [
                "SixteenByNine",
                []
              ],
              [
                "FourByThree",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "badge",
            "comment": " Bootstrap badge component.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "clearfix",
            "comment": " Bootstrap clearfix.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "container",
            "comment": " Bootstrap grid container.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "containerFluid",
            "comment": " Bootstrap grid fluid container.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "empty",
            "comment": " The minimum markup - an empty span.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "formGroup",
            "comment": " Bootstrap form group.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "jumbotron",
            "comment": " Bootstrap jumbotron component.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "popover",
            "comment": " Interface to the bootstrap popover that does not require bootstrap.js.\n",
            "type": "Exts.Html.Bootstrap.PopoverDirection -> Bool -> List ( String, String ) -> Maybe.Maybe String -> Html.Html msg -> Html.Html msg"
          },
          {
            "name": "row",
            "comment": " Bootstrap grid row.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "stylesheet",
            "comment": " A tag that loads Bootstrap from a CDN.\n\nYou'll probably only want to use this to get you started. By the time you go\ninto production, you should probably be loading this file in the `<head>` tag\nof your page.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "twoColumns",
            "comment": " Two evenly-sized columns. Must be used within a row.\n",
            "type": "List (Html.Html msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "video",
            "comment": " Embed a responsive video.\n",
            "type": "Exts.Html.Bootstrap.Ratio -> String -> Html.Html msg"
          },
          {
            "name": "well",
            "comment": " Bootstrap well component.\n",
            "type": "List (Html.Html msg) -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Basics",
        "comment": " Extensions to the core `Basics` library.\n\n@docs compareBy\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "compareBy",
            "comment": " Compare two things by running the supplied function of both, and comparing the results.\n\n",
            "type": "(a -> comparable) -> a -> a -> Basics.Order"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Dict",
        "comment": " Extensions to the core `Dict` library.\n\n@docs indexBy\n@docs groupBy\n@docs frequency\n@docs getWithDefault\n@docs foldToList\n@docs updateDict\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "foldToList",
            "comment": " Run a function over the dictionary entries, resulting in a list of the final results.\n",
            "type": "(comparable -> v -> b) -> Dict.Dict comparable v -> List b"
          },
          {
            "name": "frequency",
            "comment": " Create a frequency-map from the given list.\n",
            "type": "List comparable -> Dict.Dict comparable Int"
          },
          {
            "name": "getWithDefault",
            "comment": " Attempt to find a key, if it's not there, return a default value.\n",
            "type": "a -> comparable -> Dict.Dict comparable a -> a"
          },
          {
            "name": "groupBy",
            "comment": " Group a list of items by a key.\n\n  Supply an indexing function (eg. `.id`) and a list of\n  items. `groupBy` returns a dictionary of group-key/list-of-items.\n\n  If the indexing function returns a unique key for every item, consider `indexBy` instead.\n",
            "type": "(v -> comparable) -> List v -> Dict.Dict comparable (List v)"
          },
          {
            "name": "indexBy",
            "comment": " Turn a list of items into an indexed dictionary.\n\n  Supply an indexing function (eg. `.id`) and a list of\n  items. `indexBy` returns a dictionary with each item stored under\n  its index.\n\n  This code assumes each index is unique. If that is not the case, you\n  should use `groupBy` instead.\n",
            "type": "(v -> comparable) -> List v -> Dict.Dict comparable v"
          },
          {
            "name": "updateDict",
            "comment": " Apply an Elm update function - `Model -> (Model, Cmd Msg)` - to a `Dict` entry, if present.\n\nIt's quite common in Elm to want to run a model-update function, over\nsome dictionary of models, but only if that model is available.\n\nThis function makes it more convenient to reach inside a `Dict` and\napply an update. If the data is not there, the `Dict` is returned\nunchanged with a `Cmd.none`.\n\n",
            "type": "(a -> ( a, Platform.Cmd.Cmd cmd )) -> comparable -> Dict.Dict comparable a -> ( Dict.Dict comparable a, Platform.Cmd.Cmd cmd )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Exts.Date",
        "comment": " Extensions to the core `Date` library.\n\n@docs toISOString\n@docs toRFC3339\n@docs monthNumber\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "monthNumber",
            "comment": " Extract the month of a given date as an `Int`. January is 1.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "toISOString",
            "comment": " Format a `Date` as an ISO-standard string.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "toRFC3339",
            "comment": " Format a `Date` as an RFC-3339 standard string\n\n  This is useful for passing a `Date` as a value to an HTML input. (See [the W3 spec](https://www.w3.org/TR/html-markup/input.date.html#input.date.attrs.value) for details.)\n",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "krisajenkins/formatting",
    "version": "3.1.0",
    "docs": [
      {
        "name": "Formatting",
        "comment": " A type-safe string formatting library. It fulfils the need for\nstring-interpolation or a `printf` function, without sacrificing Elm's\nruntime guarantees or requiring any language-level changes. It also\ncomposes well, to make building up complex formatters easy.\n\nExample:\n\n    import Formatting exposing (..)\n\n    greeting =\n        s \"Hello \" <> string <> s \"!\"\n\n    print greeting \"Kris\"\n\n    --> \"Hello Kris!\"\n\n@docs Format\n@docs (<>)\n@docs map\n@docs premap\n@docs print\n@docs html\n@docs s\n@docs string\n@docs int\n@docs float\n@docs any\n@docs wrap\n@docs pad\n@docs padLeft\n@docs padRight\n@docs dp\n@docs roundTo\n",
        "aliases": [],
        "types": [
          {
            "name": "Format",
            "comment": " A string formatter. This type holds all the information we need to\ncreate a formatting function, wrapped up in a way that makes it easy\nto compose.\n\nBuild one of these up with primitives like `s`, `string` and `int`,\njoin them together with `<>`, and when you're done, generate the final\nprinting function with `print`.\n",
            "args": [
              "r",
              "a"
            ],
            "cases": [
              [
                "Format",
                [
                  "(String -> r) -> a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "<>",
            "comment": " Compose two formatters together.\n",
            "type": "Formatting.Format b a -> Formatting.Format c b -> Formatting.Format c a",
            "associativity": "right",
            "precedence": 8
          },
          {
            "name": "any",
            "comment": " A placeholder for any value that we can call `toString` on.\n\n\nEagle-eyed readers of the source will notice that we use this same\nfunction to define `int` and `float`, since `toString` gives us the\nright result for both of those types.\n\nThe sole difference is, `int` and `float` have more restrictive type\nsignatures.\n",
            "type": "Formatting.Format r (a -> r)"
          },
          {
            "name": "dp",
            "comment": " *DEPRECATED*: Use `roundTo` instead.\n",
            "type": "number -> Formatting.Format a (Float -> a)"
          },
          {
            "name": "float",
            "comment": " A placeholder for a `Float` argument.\n",
            "type": "Formatting.Format r (Float -> r)"
          },
          {
            "name": "html",
            "comment": " Convenience function. Like `print`, but returns an `Html.text`\nnode as its final result, instead of a `String`.\n\nHint: If you're using any formatters where whitespace is sigificant,\nyou might well need one or both of these CSS rules:\n\n    font-family: monospace;\n    white-space: pre;\n",
            "type": "Formatting.Format (Html.Html msg) a -> a"
          },
          {
            "name": "int",
            "comment": " A placeholder for an `Int` argument.\n",
            "type": "Formatting.Format r (Int -> r)"
          },
          {
            "name": "map",
            "comment": " Create a new formatter by applying a function to the output of this formatter.\n\nFor example:\n\n    import String exposing (toUpper)\n\n    format = s \"Name: \" <> map toUpper string\n\n...produces a formatter that uppercases the name:\n\n    print format \"Kris\"\n\n    --> \"Name: KRIS\"\n\n",
            "type": "(String -> String) -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "pad",
            "comment": " `String.pad` lifted into the world of Formatters.\n\nFor example:\n\n    print (pad 10 '-' string) \"KRIS\"\n\n    --> \"---KRIS---\"\n\n",
            "type": "Int -> Char -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "padLeft",
            "comment": " `String.padLeft` lifted into the world of Formatters.\n\nFor example:\n\n    print (padLeft 10 '_' float) 1.72\n\n    --> \"______1.72\"\n\n",
            "type": "Int -> Char -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "padRight",
            "comment": " `String.padRight` lifted into the world of Formatters.\n\nFor example:\n\n    print (padRight 10 '.' int) 789\n\n    --> \"789.......\"\n\n",
            "type": "Int -> Char -> Formatting.Format r a -> Formatting.Format r a"
          },
          {
            "name": "premap",
            "comment": " Create a new formatter by applying a function to the input of this\nformatter. The dual of `map`.\n\nFor example:\n\n    format = s \"Height: \" <> premap .height float\n\n...produces a formatter that accesses a `.height` record field:\n\n    print format { height: 1.72 }\n\n    --> \"Height: 1.72\"\n\n",
            "type": "(a -> b) -> Formatting.Format r (b -> v) -> Formatting.Format r (a -> v)"
          },
          {
            "name": "print",
            "comment": " Turn your formatter into a function that's just waiting for its arguments.\n\nGiven this format:\n\n\n    orderFormat =\n        s \"FREE: \" <> int <> s \" x \" <> string  <> s \"!\"\n\n\n...we can either use it immediately:\n\n\n    order : String\n    order = print orderFormat 2 \"Ice Cream\"\n\n    --> \"FREE: 2 x Ice Cream!\"\n\n\n...or turn it into an ordinary function to be used later:\n\n\n    orderFormatter : Int -> String -> String\n    orderFormatter =\n        print orderFormat\n\n\n    ...elsewhere...\n\n\n    order : String\n    order = orderFormatter 2 \"Ice Cream\"\n\n    --> \"FREE: 2 x Ice Cream!\"\n",
            "type": "Formatting.Format String a -> a"
          },
          {
            "name": "roundTo",
            "comment": " A float rounded to `n` decimal places.\n",
            "type": "number -> Formatting.Format a (Float -> a)"
          },
          {
            "name": "s",
            "comment": " A boilerplate string.\n",
            "type": "String -> Formatting.Format r r"
          },
          {
            "name": "string",
            "comment": " A placeholder for a `String` argument.\n",
            "type": "Formatting.Format r (String -> r)"
          },
          {
            "name": "wrap",
            "comment": " `wrap` one string with another. It's convenient for building strings\nlike `\"Invalid key '<keyname>'.\"  For example:\n\n    print (wrap \"'\" string) \"tester\"\n\n    --> \"'tester'\"\n",
            "type": "String -> Formatting.Format r a -> Formatting.Format r a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "krisajenkins/history",
    "version": "1.1.0",
    "docs": [
      {
        "name": "History",
        "comment": " Manage browser history and link creation using the HTML5 history API.\n\n@docs History, Router, Parser, Path, create\n",
        "aliases": [
          {
            "name": "History",
            "comment": " History's prime concern is turning URIs into views, and views into URIs.\n",
            "args": [
              "view"
            ],
            "type": "{ parser : String -> view, router : view -> String }"
          },
          {
            "name": "Parser",
            "comment": " ",
            "args": [
              "view"
            ],
            "type": "String -> view"
          },
          {
            "name": "Path",
            "comment": " A path is just a URI split up into sections. For example\n`/account/1234/settings` would convert to the path\n`[\"account\", \"1234\", \"settings\"]`.\n",
            "args": [],
            "type": "List String"
          },
          {
            "name": "Router",
            "comment": " ",
            "args": [
              "view"
            ],
            "type": "view -> String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "create",
            "comment": " Create a history manager by supplying one function that goes from\n`Path` to `view`, and one that goes the other way from `view` to\n`Path`.\n",
            "type": "(History.Path -> view) -> (view -> History.Path) -> History.History view"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "krisajenkins/remotedata",
    "version": "2.1.1",
    "docs": [
      {
        "name": "RemoteData",
        "comment": " A datatype representing fetched data.\n\nIf you find yourself continually using `Maybe (Result Error a)` to\nrepresent loaded data, or you have a habit of shuffling errors away to\nwhere they can be quietly ignored, consider using this. It makes it\neasier to represent the real state of a remote data fetch and handle\nit properly.\n\n\nFor more on the motivation, take a look at the blog post [How Elm Slays A UI Antipattern](http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html).\n\n\nTo use the datatype, let's look at an example that loads `News` from a feed.\n\nFirst you add to your model, wrapping the data you want in `WebData`:\n\n\n    type alias Model =\n        { news : WebData News }\n\n\nThen add in a message that will deliver the response:\n\n\n    type alias Msg\n        = NewsResponse (WebData News)\n\n\nNow we can create an HTTP get:\n\n\n    getNews : Cmd Msg\n    getNews =\n        Http.get decodeNews \"/news\"\n            |> RemoteData.asCmd\n            |> Cmd.map NewsResponse\n\n\nWe trigger it in our `init` function:\n\n\n    init : ( Model, Cmd Msg)\n    init =\n        ( { news = Loading }\n        , getNews\n        )\n\n\nWe handle it in our `update` function:\n\n\n    update msg model =\n        case msg of\n            NewsResponse response ->\n                ( { model | news = response }\n                , Cmd.none\n                )\n\n\n\nMost of this you'd already have in your app, and the changes are just\nwrapping the datatype in `Webdata`, and updating the `Http.get` call\nto add in `RemoteData.asCmd`.\n\nNow we get to where we really want to be, rendering the data and\nhandling the different states in the UI gracefully:\n\n\n    view : Model -> Html msg\n    view model =\n      case model.news of\n        NotAsked -> text \"Initialising.\"\n\n        Loading -> text \"Loading.\"\n\n        Failure err -> text (\"Error: \" ++ toString err)\n\n        Success news -> viewNews news\n\n\n    viewNews : News -> Html msg\n    viewNews news =\n        div []\n            [h1 [] [text \"Here is the news.\"]\n            , ...]\n\n@docs RemoteData\n@docs WebData\n@docs map\n@docs mapFailure\n@docs mapBoth\n@docs andThen\n@docs withDefault\n@docs fromResult\n@docs toMaybe\n@docs asCmd\n@docs fromTask\n@docs append\n@docs isSuccess\n@docs update\n\n",
        "aliases": [
          {
            "name": "WebData",
            "comment": " While `RemoteData` can model any type of error, the most common\none you'll actually encounter is when you fetch data from a REST\ninterface, and get back `RemoteData Http.Error a`. Because that case\nis so common, `WebData` is provided as a useful alias.\n",
            "args": [
              "a"
            ],
            "type": "RemoteData.RemoteData Http.Error a"
          }
        ],
        "types": [
          {
            "name": "RemoteData",
            "comment": " Frequently when you're fetching data from an API, you want to represent four different states:\n  * `NotAsked` - We haven't asked for the data yet.\n  * `Loading` - We've asked, but haven't got an answer yet.\n  * `Failure` - We asked, but something went wrong. Here's the error.\n  * `Success` - Everything worked, and here's the data.\n",
            "args": [
              "e",
              "a"
            ],
            "cases": [
              [
                "NotAsked",
                []
              ],
              [
                "Loading",
                []
              ],
              [
                "Failure",
                [
                  "e"
                ]
              ],
              [
                "Success",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together RemoteData function calls.\n",
            "type": "RemoteData.RemoteData e a -> (a -> RemoteData.RemoteData e b) -> RemoteData.RemoteData e b"
          },
          {
            "name": "append",
            "comment": " Append - join two `RemoteData` values together as though\nthey were one.\n\nIf either value is `NotAsked`, the result is `NotAsked`.\nIf either value is `Loading`, the result is `Loading`.\nIf both values are `Failure`, the left one wins.\n",
            "type": "RemoteData.RemoteData e a -> RemoteData.RemoteData e b -> RemoteData.RemoteData e ( a, b )"
          },
          {
            "name": "asCmd",
            "comment": " Convert a web `Task`, probably produced from elm-http, to a `Cmd (RemoteData e a)`.\n",
            "type": "Task.Task e a -> Platform.Cmd.Cmd (RemoteData.RemoteData e a)"
          },
          {
            "name": "fromResult",
            "comment": " Convert a `Result Error`, probably produced from elm-http, to a RemoteData value.\n",
            "type": "Result.Result e a -> RemoteData.RemoteData e a"
          },
          {
            "name": "fromTask",
            "comment": " Convert from a `Task` that may succeed or fail, to one that always\nsucceeds with the `RemoteData` that captures any errors.\n",
            "type": "Task.Task e a -> Task.Task Basics.Never (RemoteData.RemoteData e a)"
          },
          {
            "name": "isSuccess",
            "comment": " State-checking predicate. Returns true if we've successfully loaded some data.\n",
            "type": "RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function into the `Success` value.\n",
            "type": "(a -> b) -> RemoteData.RemoteData e a -> RemoteData.RemoteData e b"
          },
          {
            "name": "mapBoth",
            "comment": " Map function into both the `Success` and `Failure` value.\n",
            "type": "(a -> b) -> (e -> f) -> RemoteData.RemoteData e a -> RemoteData.RemoteData f b"
          },
          {
            "name": "mapFailure",
            "comment": " Map a function into the `Failure` value.\n",
            "type": "(e -> f) -> RemoteData.RemoteData e a -> RemoteData.RemoteData f a"
          },
          {
            "name": "toMaybe",
            "comment": " Convert a `RemoteData e a` to a `Maybe a`\n",
            "type": "RemoteData.RemoteData e a -> Maybe.Maybe a"
          },
          {
            "name": "update",
            "comment": " Apply an Elm update function - `Model -> (Model, Cmd Msg)` - to any `Successful`-ly loaded data.\n\nIt's quite common in Elm to want to run a model-update function, over\nsome remote data, but only once it's actually been loaded.\n\nFor example, we might want to handle UI messages changing the users\nsettings, but that only makes sense once those settings have been\nreturned from the server.\n\nThis function makes it more convenient to reach inside a\n`RemoteData.Success` value and apply an update. If the data is not\n`Success a`, it is return unchanged with a `Cmd.none`.\n\n",
            "type": "(a -> ( b, Platform.Cmd.Cmd c )) -> RemoteData.RemoteData e a -> ( RemoteData.RemoteData e b, Platform.Cmd.Cmd c )"
          },
          {
            "name": "withDefault",
            "comment": " Return the `Success` value, or the default.\n",
            "type": "a -> RemoteData.RemoteData e a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "league/difference-list",
    "version": "1.1.0",
    "docs": [
      {
        "name": "DList",
        "comment": " A representation of lists with an efficient append operation.\n\nThis is particularly useful for efficient logging and pretty printing, where\nrepeatedly appending lists quickly becomes too expensive. Internally, `DList`\nis a function that prepends elements to its parameter. Thus the `append`\noperation is just function composition. Ultimately, a `DList` is converted to a\nregular `List` by applying the function to the empty list.\n\nSome limitations of the `DList` representation are:\n\n  - We cannot ask for the length of a `DList` without converting it to a\n    regular list.\n\n  - We cannot test equality on two `DList` structures without converting them\n    to regular lists.\n\n@docs DList, toList\n\n# Construction\n@docs empty, singleton, cons, snoc, append, (+&+), fromList\n\n# Processing\n@docs concat, foldr, intersperse, map\n\n",
        "aliases": [],
        "types": [
          {
            "name": "DList",
            "comment": " A difference list containing elements of type `a`. ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "+&+",
            "comment": " An operator for append. ",
            "type": "DList.DList a -> DList.DList a -> DList.DList a",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "append",
            "comment": " Concatenate two lists. ",
            "type": "DList.DList a -> DList.DList a -> DList.DList a"
          },
          {
            "name": "concat",
            "comment": " Concatenate a list of difference lists. ",
            "type": "List (DList.DList a) -> DList.DList a"
          },
          {
            "name": "cons",
            "comment": " Prepend an element onto the front of the list. ",
            "type": "a -> DList.DList a -> DList.DList a"
          },
          {
            "name": "empty",
            "comment": " The empty list. ",
            "type": "DList.DList a"
          },
          {
            "name": "foldr",
            "comment": " Iterate through a `DList`. ",
            "type": "(a -> b -> b) -> b -> DList.DList a -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a regular Elm `List` to a difference list. ",
            "type": "List a -> DList.DList a"
          },
          {
            "name": "intersperse",
            "comment": " Intersperse the contents of a `DList` between other lists. ",
            "type": "DList.DList a -> List (DList.DList a) -> DList.DList a"
          },
          {
            "name": "map",
            "comment": " Apply a function to each element, accumulating the results as a `DList`. ",
            "type": "(a -> b) -> DList.DList a -> DList.DList b"
          },
          {
            "name": "singleton",
            "comment": " Construct a list containing one element. ",
            "type": "a -> DList.DList a"
          },
          {
            "name": "snoc",
            "comment": " Add an element onto the back of the list. O(1) just like `append`. ",
            "type": "DList.DList a -> a -> DList.DList a"
          },
          {
            "name": "toList",
            "comment": " Convert to a regular Elm `List` by applying the underlying function\n    representation. ",
            "type": "DList.DList a -> List a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "league/unique-id",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Unique",
        "comment": "\nPure generation of unique identifiers in Elm.\n\n# Types\n@docs Id, Unique\n\n# Run\n@docs run\n\n# Introduction\n@docs return, unique\n\n# Sequencing\n@docs andThen, map, map2, map3, replicate, sequence\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Id",
            "comment": " The type of an identifier. Identifiers are integers, but this is an opaque\ntype so that we cannot introduce them by accident. Equality and toString are\nsupported on `Id` values.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Unique",
            "comment": " A calculation that consumes unique identifiers and produces a value of type\n`a`.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " TODO ",
            "type": "Unique.Unique a -> (a -> Unique.Unique b) -> Unique.Unique b"
          },
          {
            "name": "map",
            "comment": " Apply a function to the result of a `Unique` computation. ",
            "type": "(a -> b) -> Unique.Unique a -> Unique.Unique b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to the result of two `Unique` computations. ",
            "type": "(a -> b -> c) -> Unique.Unique a -> Unique.Unique b -> Unique.Unique c"
          },
          {
            "name": "map3",
            "comment": " Apply a function to the result of three `Unique` computations. ",
            "type": "(a -> b -> c -> d) -> Unique.Unique a -> Unique.Unique b -> Unique.Unique c -> Unique.Unique d"
          },
          {
            "name": "replicate",
            "comment": " Repeatedly invoke a `Unique` computation, generating a list of results. ",
            "type": "Int -> Unique.Unique a -> Unique.Unique (List a)"
          },
          {
            "name": "return",
            "comment": " Return a constant value without consuming any IDs. ",
            "type": "a -> Unique.Unique a"
          },
          {
            "name": "run",
            "comment": " Run a computation that consumes unique IDs. Within one invocation of `run`,\nthe generated `Id` values are guaranteed to be unique. However, multiple\ninvocations of `run` will generate conflicting `Id`s. ",
            "type": "Unique.Unique a -> a"
          },
          {
            "name": "sequence",
            "comment": " Execute a list of `Unique` computations in order. ",
            "type": "List (Unique.Unique a) -> Unique.Unique (List a)"
          },
          {
            "name": "unique",
            "comment": " Generate a unique ID. ",
            "type": "Unique.Unique Unique.Id"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lorenzo/elm-string-addons",
    "version": "2.0.1",
    "docs": [
      {
        "name": "String.Addons",
        "comment": " Additional functions for working with Strings\n\n## Modifying\n\n@docs toSentenceCase, toTitleCase\n\n## Replacing\n\n@docs replace, replaceSlice\n\n## Splitting\n\n@docs break, softBreak\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "break",
            "comment": " Breaks a string into a list of strings of maximum the provided size.\n\n    break 10 \"The quick brown fox\" == [\"The quick \", \"brown fox\"]\n    break 2 \"\" == [\"\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "replace",
            "comment": " Replace all occurrences of the search string with the substitution string.\n\n    replace \"Mary\" \"Sue\" \"Hello, Mary\" == \"Hello, Sue\"\n\n",
            "type": "String -> String -> String -> String"
          },
          {
            "name": "replaceSlice",
            "comment": " Replace text within a portion of a string given a substitution\nstring, a start index and an end index.\n\n    replaceSlice \"Sue\" 4 6 \"Hi, Bob\" == \"Hi, Sue\"\n    replaceSlice \"elephants\" 0  6 \"snakes on a plane!\" == \"elephants on a plane!\"\n    replaceSlice \"under\" 7  9 \"snakes on a plane!\" == \"snakes under a plane!\"\n\n",
            "type": "String -> Int -> Int -> String -> String"
          },
          {
            "name": "softBreak",
            "comment": " Breaks a string into a list of strings of maximum the provided size,\nwithout cutting words at the edge.\n\n    softBreak 6 \"The quick brown fox\" == [\"The quick\", \" brown\", \" fox\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "toSentenceCase",
            "comment": " Make a string's first character uppercase\n\n    toSentenceCase \"this is a phrase\" == \"This is a phare\"\n    toSentenceCase \"hello, world\" == \"Hello, world\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "toTitleCase",
            "comment": " Uppercase the first character of each word in a string\n\n    toTitleCase \"this is a phrase\" == \"This Is A Phrase\"\n    toTitleCase \"hello, world\" == \"Hello, World\"\n\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lorenzo/elm-tree-diagram",
    "version": "1.0.0",
    "docs": [
      {
        "name": "TreeDiagram",
        "comment": " This library provides functions drawing diagrams of trees.\n\n# Building a tree\n@docs Tree, node\n\n# Drawing a tree using cavas\n@docs CanvasNode, CanvasEdge, drawCollage\n\n# Drawing a tree using SVG\n@docs SvgNode, SvgEdge, drawSvg\n\n# Tree layout options\n@docs TreeLayout, defaultTreeLayout, TreeOrientation, leftToRight, rightToLeft, bottomToTop, topToBottom\n",
        "aliases": [
          {
            "name": "CanvasEdge",
            "comment": " Alias for functions that draw edges using Canvas\n",
            "args": [],
            "type": "TreeDiagram.Coord -> TreeDiagram.Coord -> Collage.Form"
          },
          {
            "name": "CanvasNode",
            "comment": " Alias for functions that draw nodes using Canvas\n",
            "args": [
              "a"
            ],
            "type": "a -> Collage.Form"
          },
          {
            "name": "SvgEdge",
            "comment": " Alias for functions that draw edges using SVG\n",
            "args": [
              "b"
            ],
            "type": "TreeDiagram.Coord -> TreeDiagram.Coord -> Svg.Svg b"
          },
          {
            "name": "SvgNode",
            "comment": " Alias for functions that draw nodes using SVG\n",
            "args": [
              "a",
              "b"
            ],
            "type": "a -> Svg.Svg b"
          },
          {
            "name": "TreeLayout",
            "comment": " Options to be passed to `draw` for laying out the tree:\n  * orientation: direction of the tree from root to leaves.\n  * levelHeight: vertical distance between parent and child nodes.\n  * subtreeDistance: horizontal distance between subtrees.\n  * siblingDistance: horizontal distance between siblings. This is usually set\n    below `subtreeDistance` to produce a clearer distinction between sibling\n    nodes and non-siblings on the same level of the tree.\n  * padding: amount of space to leave around the edges of the diagram.\n",
            "args": [],
            "type": "{ orientation : TreeDiagram.TreeOrientation , levelHeight : Int , siblingDistance : Int , subtreeDistance : Int , padding : Int }"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " A tree data structure\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "TreeOrientation",
            "comment": " Direction of the tree from root to leaves\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bottomToTop",
            "comment": " Bottom-to-top tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          },
          {
            "name": "defaultTreeLayout",
            "comment": " A set of default values that should be modified to create your TreeLayout\n",
            "type": "TreeDiagram.TreeLayout"
          },
          {
            "name": "drawCollage",
            "comment": " Draws the tree using the provided functions for drawings nodes and edges.\n    TreeLayout contains some more options for positioning the tree.\n    Returns a Canvas Element\n",
            "type": "TreeDiagram.TreeLayout -> TreeDiagram.CanvasNode a -> TreeDiagram.CanvasEdge -> TreeDiagram.Tree a -> VirtualDom.Node b"
          },
          {
            "name": "drawSvg",
            "comment": " Draws the tree using the provided functions for drawings nodes and edges.\n    TreeLayout contains some more options for positioning the tree.\n    Returns a Svg\n",
            "type": "TreeDiagram.TreeLayout -> TreeDiagram.SvgNode a b -> TreeDiagram.SvgEdge b -> TreeDiagram.Tree a -> Svg.Svg b"
          },
          {
            "name": "leftToRight",
            "comment": " Left-to-right tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          },
          {
            "name": "node",
            "comment": " Constructs a tree out of a root value and a list of subtrees\n",
            "type": "a -> List (TreeDiagram.Tree a) -> TreeDiagram.Tree a"
          },
          {
            "name": "rightToLeft",
            "comment": " Right-to-left tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          },
          {
            "name": "topToBottom",
            "comment": " Top-to-bottom tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "lovasoa/choices",
    "version": "3.1.1",
    "docs": [
      {
        "name": "Choices",
        "comment": " This library allows you to draw an HTML GUI for choices  between different values\n\n# Model\n@docs Model, Answer, makeModel, makeModelFromTuples, getAllSelected, getSelected, setSelected\n\n# View\n@docs ViewParams, ViewType, view, genericView\n\n# Update\n@docs Msg, update\n",
        "aliases": [
          {
            "name": "Answer",
            "comment": " Represents a choice (one of the possible answers) and its human description",
            "args": [
              "valueType"
            ],
            "type": "{ value : valueType, selected : Bool, description : String }"
          },
          {
            "name": "Model",
            "comment": " A list of answsers (or choices) ",
            "args": [
              "valueType"
            ],
            "type": "List (Choices.Answer valueType)"
          },
          {
            "name": "ViewParams",
            "comment": " Parameters of a view\n  * viewType : html element to use\n  * name : name HTML element\n",
            "args": [],
            "type": "{ viewType : Choices.ViewType, name : String }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Indicate how to update the model",
            "args": [
              "valueType"
            ],
            "cases": []
          },
          {
            "name": "ViewType",
            "comment": " What Html element to use in order to draw the GUI.\n  * **InputCheckbox** : Use `<input type='checkbox'>`\n  * **InputRadio** : Use `<input type='radio'>`\n  * **HtmlSelect** *allowMultiple*: Use `<select [multiple]>`\n",
            "args": [],
            "cases": [
              [
                "InputCheckbox",
                []
              ],
              [
                "InputRadio",
                []
              ],
              [
                "HtmlSelect",
                [
                  "Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "genericView",
            "comment": " Given a ViewParams and a Model, create the corresponding Html elements\n",
            "type": "Choices.ViewParams -> Choices.Model valueType -> Html.Html (Choices.Msg valueType)"
          },
          {
            "name": "getAllSelected",
            "comment": " get a list of all answers that have been selected\n\n    getAllSelected\n      [\n        {value: 1, selected:True, description:\"This is answer number 1\"}\n        {value: 2, selected:False, description:\"This is answer number 2\"}\n        {value: 3, selected:True, description:\"This is answer number 2\"}\n      ]\n        == [1,3]\n",
            "type": "Choices.Model valueType -> List valueType"
          },
          {
            "name": "getSelected",
            "comment": " get the first selected answer\n\n    getSelected\n      [\n        {value: 1, selected:False, description:\"This is answer number 1\"}\n        {value: 2, selected:False, description:\"This is answer number 2\"}\n      ]\n        == Nothing\n\n    getSelected\n      [\n        {value: 1, selected:False, description:\"This is answer number 1\"}\n        {value: 2, selected:True, description:\"This is answer number 2\"}\n      ]\n        == Just 1\n",
            "type": "Choices.Model valueType -> Maybe.Maybe valueType"
          },
          {
            "name": "makeModel",
            "comment": " Make a model from a list of values a function associating a value to its description\n\n    makeModel (\\n -> \"This is answer number \" ++ toString n) [1,2] ==\n      [\n        {value: 1, selected:False, description:\"This is answer number 1\"}\n        {value: 2, selected:False, description:\"This is answer number 2\"}\n      ]\n\n    makeModel snd [(True, \"Yes\"), (False, \"No\")]\n",
            "type": "(a -> String) -> List a -> Choices.Model a"
          },
          {
            "name": "makeModelFromTuples",
            "comment": " Make a model from a list of (value, description) tuples\n\n    makeModelFromTuples  [(True, \"Yes\"), (False, \"No\")]\n",
            "type": "List ( a, String ) -> Choices.Model a"
          },
          {
            "name": "setSelected",
            "comment": "Set the set of selected elements",
            "type": "List valueType -> Choices.Model valueType -> Choices.Model valueType"
          },
          {
            "name": "update",
            "comment": " update the model ",
            "type": "Choices.Msg valueType -> Choices.Model valueType -> Choices.Model valueType"
          },
          {
            "name": "view",
            "comment": " A view that uses the InputRadio display, and that has its input name set to \"ElmChoices\" ",
            "type": "Choices.Model valueType -> Html.Html (Choices.Msg valueType)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lovasoa/elm-component-list",
    "version": "1.0.5",
    "docs": [
      {
        "name": "ComponentList",
        "comment": " This library implements a generic list component, that, given a component type, creates a list of it\nIt can be used everywhere in your interface where there are list of elements with\nwhich the user can interact.\n\nThe generated html will have this form:\n\n    <div class=\"ComponentList\">\n      <ul>\n        <li class=\"Component\">\n          {{YOUR COMPONENT}}\n          <div class=\"ComponentListActions\">\n            <button>{{Your deleteModelTxt}}</button>\n            <button>{{Your newModelTxt}}</button>\n          </div>\n        </li>\n      </ul>\n      <button class=\"newComponent\">{{Your newModelTxt}}</button>\n    </div>\n\n\n# Model\n\n## Model creation\nHow to create a `ComponentList.Model` from your own component model.\n\n@docs init, setModels, Model\n\n## Get the information back from the `ComponentList`\n@docs getModels\n\n# Update\n@docs Msg, update\n\n# View\nCreate a list view from your own component's view\n@docs ViewParams, view\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Represents a model.",
            "args": [
              "componentModel"
            ],
            "type": "{ models : List ( ComponentList.ID, componentModel ) , nextID : ComponentList.ID , defaultModel : componentModel }"
          },
          {
            "name": "ViewParams",
            "comment": " Represents the text to display in the GUI view\n\n  * *newModelTxt* : text to display in the \"+\" button\n  * *deleteModelTxt* : text to display in the \"-\" button\n",
            "args": [],
            "type": "{ newModelTxt : String, deleteModelTxt : String }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Represents a model update message.\n`componentMsg` is the type of the component messages.\n",
            "args": [
              "componentMsg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "getModels",
            "comment": "Get the the models of the elements of a `ComponentList` ",
            "type": "ComponentList.Model a -> List a"
          },
          {
            "name": "init",
            "comment": " Create a new model representing a list of elements of the given model.\nWhen a new element will be added to the list, its initial model will be the model\ngiven as the first parameter of this function.\n\n    -- EXAMPLE\n    -- simple component, representing a string, and printing it to a text field\n    cModel = \"Hello\"\n    cUpdate v _ = v\n    cView cmodel = input [onInput identity, value cmodel] []\n    main =\n      App.beginnerProgram {\n        model = init cModel,\n        view = view (ViewParams \"New hello\" \"Delete this hello\") cView,\n        update = update cUpdate\n      }\n",
            "type": "a -> ComponentList.Model a"
          },
          {
            "name": "setModels",
            "comment": "Set the the models of the elements of a `ComponentList` ",
            "type": "List a -> ComponentList.Model a -> ComponentList.Model a"
          },
          {
            "name": "update",
            "comment": " Given the component update function, returns a `ComponentList` update function\n\n    updateComponentList = ComponentList.update updateComponent\n",
            "type": "(compMsg -> compModel -> compModel) -> ComponentList.Msg compMsg -> ComponentList.Model compModel -> ComponentList.Model compModel"
          },
          {
            "name": "view",
            "comment": " Given a component view function, return a ComponentList view function\n\n    params = ViewParams \"New component\" \"Delete this component\"\n    listView = ComponentList.view params componentView\n",
            "type": "ComponentList.ViewParams -> (compModel -> Html.Html compMsg) -> ComponentList.Model compModel -> Html.Html (ComponentList.Msg compMsg)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lovasoa/elm-csv",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Csv",
        "comment": " A CSV parser.\n\n## Parser\n@docs Csv, parseWith, parse, split, splitWith\n",
        "aliases": [
          {
            "name": "Csv",
            "comment": " The `Csv` type structure.\n",
            "args": [],
            "type": "{ headers : List String, records : List (List String) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "parse",
            "comment": " Convert a string of comma-separated values into a `Csv` structure.\n\n    -- { headers = [\"id\", \"value\"], records = [[\"1\", \"one\"], [\"2\", \"two\"]] }\n\n    Csv.parse \"id,value\\n1,one\\n2,two\\n\"\n",
            "type": "String -> Csv.Csv"
          },
          {
            "name": "parseWith",
            "comment": " Convert a string of values separated by a *separator* into a `Csv` structure.\n\n    -- { headers = [\"id\", \"value\"], records = [[\"1\", \"one\"], [\"2\", \"two\"]] }\n    Csv.parseWith \",\" \"id,value\\n1,one\\n2,two\\n\"\n",
            "type": "String -> String -> Csv.Csv"
          },
          {
            "name": "split",
            "comment": " Convert a string of comma-separated values into a list of lists.\n\n    -- [[\"id\", \"value\"], [\"1\", \"one\"], [\"2\", \"two\"]]\n\n    Csv.split \"id,value\\n1,one\\n2,two\\n\"\n",
            "type": "String -> List (List String)"
          },
          {
            "name": "splitWith",
            "comment": " Convert a string of values separated by a character into a list of lists.\n\n    -- [[\"id\", \"value\"], [\"1\", \"one\"], [\"2\", \"two\"]]\n    Csv.splitWith \",\" \"id,value\\n1,one\\n2,two\\n\"\n",
            "type": "String -> String -> List (List String)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lovasoa/elm-jsonpseudolist",
    "version": "1.0.0",
    "docs": [
      {
        "name": "JsonPseudoList",
        "comment": "\nElm Json.Decoder for javascript Array-like objects, of the form:\n\n    {length:2, 0:value0, 1:value1}\n\n@docs jsonPseudoList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "jsonPseudoList",
            "comment": " Read an object of the form\n{\n  \"length\" : 2\n  \"0\" : Object0\n  \"1\" : Object1\n}\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lukewestby/elm-http-builder",
    "version": "2.1.0",
    "docs": [
      {
        "name": "HttpBuilder",
        "comment": " Extra helpers for more easily building Http requests that require greater\nconfiguration than what is provided by `elm-http` out of the box.\n\n\n# Start a request\n@docs RequestBuilder, url, get, post, put, patch, delete, options, trace, head\n\n# Configure request properties\n@docs withHeader, withHeaders, withBody, withStringBody, withJsonBody, withMultipartBody, withMultipartStringBody, withUrlEncodedBody\n\n# Configure settings\n@docs withTimeout, withStartHandler, withProgressHandler, withMimeType, withCredentials\n\n# Custom configurations\n@docs withCacheBuster, withZeroStatusAllowed\n\n# Send the request\n@docs send\n\n# Parse the response\n@docs BodyReader, stringReader, jsonReader, Error, Response\n\n# Inspect the request\n@docs toRequest, toSettings, Request, Settings\n",
        "aliases": [
          {
            "name": "BodyReader",
            "comment": " A function for transforming raw response bodies into a useful value. Plain\nstring and JSON decoding readers are provided, and the string reader can be\nused as a basis for more custom readers. When future Http value types become\nsupported matching readers will be added to extract them.\n",
            "args": [
              "a"
            ],
            "type": "Http.Value -> Result.Result String a"
          },
          {
            "name": "Request",
            "comment": " Re-export `Http.Request`\n",
            "args": [],
            "type": "Http.Request"
          },
          {
            "name": "Response",
            "comment": " Represents a response from the server, including both a decoded JSON payload\nand basic network information.\n",
            "args": [
              "a"
            ],
            "type": "{ data : a , status : Int , statusText : String , headers : Dict.Dict String String , url : String }"
          },
          {
            "name": "Settings",
            "comment": " Re-export `Http.Settings`\n",
            "args": [],
            "type": "Http.Settings"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " Indicates that _some_ kind of failure occured along the path of making and\nreceiving the request. This includes a timeout or network issue, a failure to\nparse the response body, or a status code outside the 200 range. In the case\nthat the error is due to a non-2xx response code, the full response is provided\nand the data decoded as JSON using the decoder for errors passed to `send`.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "UnexpectedPayload",
                [
                  "String"
                ]
              ],
              [
                "NetworkError",
                []
              ],
              [
                "Timeout",
                []
              ],
              [
                "BadResponse",
                [
                  "HttpBuilder.Response a"
                ]
              ]
            ]
          },
          {
            "name": "RequestBuilder",
            "comment": " A type for chaining request configuration\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "delete",
            "comment": " Start building a DELETE request with a given URL\n\n    delete \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "get",
            "comment": " Start building a GET request with a given URL\n\n    get \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "head",
            "comment": " Start building a HEAD request with a given URL\n\n    head \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "jsonReader",
            "comment": " Attempts to decode the raw response body with the given\n`Json.Decode.Decoder`, failing if the body is malformed or not readable as a\nstring.\n",
            "type": "Json.Decode.Decoder a -> HttpBuilder.BodyReader a"
          },
          {
            "name": "options",
            "comment": " Start building a OPTIONS request with a given URL\n\n    options \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "patch",
            "comment": " Start building a PATCH request with a given URL\n\n    patch \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "post",
            "comment": " Start building a POST request with a given URL\n\n    post \"https://example.com/api/items\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "put",
            "comment": " Start building a PUT request with a given URL\n\n    put \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "send",
            "comment": " Once you're finished building up a request, send it with readers for the\nsuccessful response value as well as the server error response value.\n\n    -- In this example a succesful response from the server looks like\n    -- [\"string\", \"string\", \"string\"], and an error body might look like\n    -- \"Bad Request\" or something similar, such that it is a string that is\n    -- not valid JSON (it would need to look like \"\\\"Bad Request\\\"\" to be\n    -- decodable as JSON).\n\n    successDecoder : Json.Decode.Decoder (List String)\n    successDecoder =\n        Json.Decode.list Json.Decode.string\n\n    get \"https://example.com/api/items\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withTimeout (10 * Time.second)\n        |> send (jsonReader successDecoder) stringReader\n",
            "type": "HttpBuilder.BodyReader a -> HttpBuilder.BodyReader b -> HttpBuilder.RequestBuilder -> Task.Task (HttpBuilder.Error b) (HttpBuilder.Response a)"
          },
          {
            "name": "stringReader",
            "comment": " Attempts to read a raw response body as a plain text string, failing if the\nbody is not readable as a string.\n",
            "type": "HttpBuilder.BodyReader String"
          },
          {
            "name": "toRequest",
            "comment": " Extract the Http.Request component of the builder, for introspection and\ntesting\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.Request"
          },
          {
            "name": "toSettings",
            "comment": " Extract the Http.Settings component of the builder, for introspection and\ntesting\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.Settings"
          },
          {
            "name": "trace",
            "comment": " Start building a TRACE request with a given URL\n\n    trace \"https://example.com/api/items/1\"\n",
            "type": "String -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "url",
            "comment": " Construct a url using String, String key value pairs for the query string.\nSee `Http.url`.\n\n    googleUrl =\n        url \"https://google.com\" [(\"q\", \"elm\")]\n",
            "type": "String -> List ( String, String ) -> String"
          },
          {
            "name": "withBody",
            "comment": " Add a body to a request for requests that allow bodies.\n\n    post \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withBody (Http.string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "Http.Body -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withCacheBuster",
            "comment": " Injects a cache busting url param into the url with the current timestamp as\nthe value to prevent the server from caching responses\n    get \"https://example.com/api/items/1\"\n        |> withCredentials\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withCredentials",
            "comment": " Set the `withCredentials` flag on the request to True. Works via\n[`XMLHttpRequest#withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n\n    get \"https://example.com/api/items/1\"\n        |> withCredentials\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withHeader",
            "comment": " Add a single header to a request\n\n    get \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n",
            "type": "String -> String -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withHeaders",
            "comment": " Add many headers to a request\n\n    get \"https://example.com/api/items/1\"\n        |> withHeaders [(\"Content-Type\", \"application/json\"), (\"Accept\", \"application/json\")]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withJsonBody",
            "comment": " Convenience function for adding a JSON body to a request\n\n    params = Json.Encode.object\n        [ (\"sortBy\", Json.Encode.string \"coolness\")\n        , (\"take\", Json.Encode.int 10)\n        ]\n\n    post \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withJsonBody params\n",
            "type": "Json.Encode.Value -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withMimeType",
            "comment": " Set the desired type of the response for the request, works via\n[`XMLHttpRequest#overrideMimeType()`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#overrideMimeType())\n\n    get \"https://example.com/api/items/1\"\n        |> withMimeType (onProgressHandler)\n",
            "type": "String -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withMultipartBody",
            "comment": " Convenience function for adding a multiplart body to a request\n\n    post \"https://example.com/api/items/1\"\n        |> withMultipartBody [Http.stringData \"user\" (JS.encode user)]\n",
            "type": "List Http.Data -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withMultipartStringBody",
            "comment": " Convience function for adding multipart bodies composed of String, String\nkey-value pairs. Since `Http.stringData` is currently the only `Http.Data`\ncreator having this function removes the need to use the `Http.Data` type in\nyour type signatures.\n\n    post \"https://example.com/api/items/1\"\n        |> withMultipartStringBody [(\"user\", JS.encode user)]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withProgressHandler",
            "comment": " Set the `onProgress` setting on the request\n\n    get \"https://example.com/api/items/1\"\n        |> withProgressHandler (onProgressHandler)\n",
            "type": "(Maybe.Maybe { loaded : Int, total : Int } -> Task.Task () ()) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withStartHandler",
            "comment": " Set the `onStart` setting on the request\n\n    get \"https://example.com/api/items/1\"\n        |> withStartHandler (onStartTask)\n",
            "type": "Task.Task () () -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withStringBody",
            "comment": " Convenience function for adding a string body to a request\n\n    post \"https://example.com/api/items/1\"\n        |> withHeader \"Content-Type\" \"application/json\"\n        |> withStringBody \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\"\n",
            "type": "String -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withTimeout",
            "comment": " Set the `timeout` setting on the request\n\n    get \"https://example.com/api/items/1\"\n        |> withTimeout (10 * Time.second)\n",
            "type": "Time.Time -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withUrlEncodedBody",
            "comment": " Convenience function for adding url encoded bodies\n\n    post \"https://example.com/api/whatever\"\n        |> withUrlEncodedBody [(\"user\", \"Evan\"), (\"pwd\", \"secret\")]\n",
            "type": "List ( String, String ) -> HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          },
          {
            "name": "withZeroStatusAllowed",
            "comment": " Explicitly allows a require for a file:// url with a response status code\nof 0 to pass through successfully. This is a common issue when dealing with\nfile:// urls in environments like cordova, and using this function will allow\nyou to work around the problem on an opt-in basis.\n",
            "type": "HttpBuilder.RequestBuilder -> HttpBuilder.RequestBuilder"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "lukewestby/elm-template",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Template.Infix",
        "comment": " Infix operators for more concise template construction\n\n@docs (<%), (%>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "%>",
            "comment": " Operator alias for andString\n\n    template \"my string \" <% .hello %> \" another string\"\n",
            "type": "Template.Template record -> String -> Template.Template record"
          },
          {
            "name": "<%",
            "comment": " Operator alias for andValue\n\n    template \"my string \" <% .hello\n",
            "type": "Template.Template record -> (record -> String) -> Template.Template record"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Template",
        "comment": " Type-safe string templating\n\n# types\n@docs Template\n\n# construction\n@docs template, withValue, withString, andValue, andString\n\n# rendering\n@docs render\n\n",
        "aliases": [
          {
            "name": "Template",
            "comment": " A list of the components of a template\n",
            "args": [
              "a"
            ],
            "type": "List (Template.Component a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andString",
            "comment": " Attach a string to a template inline\n\n    template \"my string \" `andValue` .hello `andString` \" another string\"\n",
            "type": "Template.Template record -> String -> Template.Template record"
          },
          {
            "name": "andValue",
            "comment": " Attach a record accessor to a template inline\n\n    template \"my string \" `andValue` .hello\n",
            "type": "Template.Template record -> (record -> String) -> Template.Template record"
          },
          {
            "name": "render",
            "comment": " Walks through a template's components and renders them to a single string\n\n    render\n      (template \"my string \" `andValue` .hello)\n      ({ hello = \"world\" })\n",
            "type": "Template.Template record -> record -> String"
          },
          {
            "name": "template",
            "comment": " Create an initial template starting with the given string\n\n    template \"my string \"\n",
            "type": "String -> Template.Template record"
          },
          {
            "name": "withString",
            "comment": " Attach a string to a template\n\n    template \"my string \"\n        |> withValue .hello\n        |> withString \" another string\"\n",
            "type": "String -> Template.Template record -> Template.Template record"
          },
          {
            "name": "withValue",
            "comment": " Attach a record accessor to a template\n\n    template \"my string \"\n        |> withValue .hello\n",
            "type": "(record -> String) -> Template.Template record -> Template.Template record"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lukewestby/package-info",
    "version": "1.0.0",
    "docs": [
      {
        "name": "PackageInfo",
        "comment": " Types and JSON helpers for loading and manipulating the contents of an\nelm-package.json file\n\n# Types\n@docs PackageInfo, Dependency\n\n# JSON\n@docs decoder, encoder\n",
        "aliases": [
          {
            "name": "Dependency",
            "comment": " A dependency of a package, by name and version constraints\n",
            "args": [],
            "type": "{ name : String , versionRange : PackageInfo.VersionRange.VersionRange }"
          },
          {
            "name": "PackageInfo",
            "comment": " All data that can be found in an elm-package.json file\n",
            "args": [],
            "type": "{ version : PackageInfo.Version.Version , summary : String , repository : String , license : String , sourceDirectories : List String , exposedModules : List String , dependencies : List PackageInfo.Dependency , elmVersion : PackageInfo.VersionRange.VersionRange , nativeModules : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " A decoder for the contents of an elm-package.json file\n",
            "type": "Json.Decode.Decoder PackageInfo.PackageInfo"
          },
          {
            "name": "encoder",
            "comment": " An encoder to generate the JSON expected to be in an elm-package.json file\nfrom the PackageInfo type\n",
            "type": "PackageInfo.PackageInfo -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "PackageInfo.VersionRange",
        "comment": " A type and functions for managing version range constraint expressions found\nin an elm-package.json file\n\n# Type\n@docs VersionRange\n\n# Creation\n@docs enclosing\n\n# Comparison\n@docs contains\n\n# Strings\n@docs toString, fromString\n\n# JSON\n@docs decoder, encoder\n",
        "aliases": [
          {
            "name": "VersionRange",
            "comment": " Represents the contents of a version range constraint, expressed as\n\"X1.Y1.Z1 <= v < X2.Y2.Z2\" in an elm-package.json file\n",
            "args": [],
            "type": "{ minimum : PackageInfo.Version.Version , maximum : PackageInfo.Version.Version }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "contains",
            "comment": " Determine whether the given Version falls inside of the given VersionRange\n",
            "type": "PackageInfo.Version.Version -> PackageInfo.VersionRange.VersionRange -> Bool"
          },
          {
            "name": "decoder",
            "comment": " Decode a JSON string of the format \"X1.Y1.Z1 <= v < X2.Y2.Z2\" as a\nVersionRange\n",
            "type": "Json.Decode.Decoder PackageInfo.VersionRange.VersionRange"
          },
          {
            "name": "enclosing",
            "comment": " Create a VersionRange that starts at the given Version and ends at the next\nhighest major version from the given Version\n",
            "type": "PackageInfo.Version.Version -> PackageInfo.VersionRange.VersionRange"
          },
          {
            "name": "encoder",
            "comment": " Encode a VersionRange as a JSON string with the format\n\"X1.Y1.Z1 <= v < X2.Y2.Z2\"\n",
            "type": "PackageInfo.VersionRange.VersionRange -> Json.Encode.Value"
          },
          {
            "name": "fromString",
            "comment": " Parse a VersionRange from a string with the format\n\"X1.Y1.Z1 <= v < X2.Y2.Z2\"\n",
            "type": "String -> Result.Result String PackageInfo.VersionRange.VersionRange"
          },
          {
            "name": "toString",
            "comment": " Convert an existing VersionRange back into a string with the format\n\"X1.Y1.Z1 <= v < X2.Y2.Z2\"\n",
            "type": "PackageInfo.VersionRange.VersionRange -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "PackageInfo.Version",
        "comment": " A type and functions for managing SemVer version strings found in an\nelm-package.json file\n\n# Type\n@docs Version\n\n# Comparison\n@docs compare\n\n# Strings\n@docs toString, fromString\n\n# JSON\n@docs decoder, encoder\n",
        "aliases": [
          {
            "name": "Version",
            "comment": " Represents the contents of a SemVer version\n",
            "args": [],
            "type": "{ major : Int, minor : Int, patch : Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compare",
            "comment": " Assess whether a given version is greater than the other based on the SemVer\nscheme.\n",
            "type": "PackageInfo.Version.Version -> PackageInfo.Version.Version -> Basics.Order"
          },
          {
            "name": "decoder",
            "comment": " Parse a JSON string of format X.Y.Z as a Version\n",
            "type": "Json.Decode.Decoder PackageInfo.Version.Version"
          },
          {
            "name": "encoder",
            "comment": " Convert a Version back into a JSON string value\n",
            "type": "PackageInfo.Version.Version -> Json.Encode.Value"
          },
          {
            "name": "fromString",
            "comment": " Parse a Version from a string X.Y.Z, where X is the major version, Y is the\nminor version, and Z is the patch version. Subversions of format X.Y.Z-alpha.1\nare not supported.\n",
            "type": "String -> Result.Result String PackageInfo.Version.Version"
          },
          {
            "name": "toString",
            "comment": " Convert a value of type Version back into a string with the format X.Y.Z\n",
            "type": "PackageInfo.Version.Version -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lukewestby/worker",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Worker",
        "comment": " Start Elm applications without a view\n\n@docs programWithFlags, program\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "program",
            "comment": " Start a worker program, including extra Cmds to wrap init and update in case\nyou want to include port calls on every Msg.\n\n    port modelOut : Model -> Cmd msg\n\n    main : Program Never\n    main =\n        Worker.worker modelOut\n            { init = init\n            , update = update\n            , subscriptions = subscriptions\n            }\n",
            "type": "(model -> Platform.Cmd.Cmd msg) -> { init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " Start a worker program with flags from the outside world, including extra\nCmds to wrap init and update in case you want to include port calls on every\nMsg.\n\nIn your Elm program\n\n    port modelOut : Model -> Cmd msg\n\n    main : Program { userId: String, token : String }\n    main =\n        Worker.workerWithFlags modelOut\n            { init = \\{ userId, token } -> init userId token\n            , update = update\n            , subscriptions = subscriptions\n            }\n\nIn JavaScript\n\n    var app = Elm.MyApp.worker({\n        userId: 'Tom',\n        token: '12345'\n    });\n",
            "type": "(model -> Platform.Cmd.Cmd msg) -> { init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "lynn/elm-arithmetic",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Arithmetic",
        "comment": " A library that provides useful number-theoretical functions for dealing\nwith integers, primes, divisibility, et cetera.\n\n# Primes\n@docs isPrime, primesBelow, primeFactors, primeExponents\n\n# Parity\n@docs isEven, isOdd\n\n# Divisors\n@docs divides, isMultipleOf, divisors, properDivisors, divisorCount\n\n# GCD and LCM\n@docs gcd, lcm, isCoprimeTo, totient, extendedGcd\n\n# Base conversion\n@docs toBase, fromBase\n\n# Squares\n@docs squareRoot, safeSquareRoot, intSquareRoot, exactIntSquareRoot, isSquare\n\n# Cubes\n@docs cubeRoot, intCubeRoot, exactIntCubeRoot, isCube\n\n# Modular arithmetic\n@docs powerMod, modularInverse, chineseRemainder\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chineseRemainder",
            "comment": " Given a list of residue-modulus pairs `[(r1, m1), (r2, m2), ...]`, solve\nthe system of linear congruences:\n\n    x = r1 (mod m1)\n    x = r2 (mod m2)\n    ...\n\nLet `M` be the product of all moduli in the list. The [Chinese remainder\ntheorem](https://en.wikipedia.org/wiki/Chinese_remainder_theorem) tells us that\n\n* if all of the moduli are pairwise coprime (their `gcd` is 1), there are\n  infinitely many solutions, all congruent `mod M`;\n* if there is a pair of non-coprime moduli in the list, there is no solution.\n\nThe result is a solution `Just x` with `0 <= x < M` in the first case; or\n`Nothing` if the system is unsolvable.\n\n    chineseRemainder [(10, 11), (4, 12), (12, 13)] == Just 1000\n        -- Solution to x = 10 (mod 11), x = 4 (mod 12), x = 12 (mod 13).\n\n    chineseRemainder [(2, 3), (4, 6)] == Nothing\n        -- 3 and 6 are not coprime, so there is no solution.\n\n    chineseRemainder [] == Just 0\n        -- The trivial solution, modulo M = 1.\n",
            "type": "List ( Int, Int ) -> Maybe.Maybe Int"
          },
          {
            "name": "cubeRoot",
            "comment": " Take the cube root of a number.\n\n    cubeRoot 15.625 == 2.5\n",
            "type": "Float -> Float"
          },
          {
            "name": "divides",
            "comment": " Test whether one number divides another.\n\n    10 `divides` 120 == True\n    10 `divides` 125 == False\n",
            "type": "Int -> Int -> Bool"
          },
          {
            "name": "divisorCount",
            "comment": " Get the number of divisors of a number (counting itself).\n",
            "type": "Int -> Int"
          },
          {
            "name": "divisors",
            "comment": " Get all divisors of a number, in ascending order.\n\n    divisors 20 == [1, 2, 4, 5, 10, 20]\n",
            "type": "Int -> List Int"
          },
          {
            "name": "exactIntCubeRoot",
            "comment": " Return `Just s` if the given integer is a cube, and `s` is its cube root;\notherwise, return `Nothing`.\n\n    exactIntCubeRoot 800 == Nothing\n    exactIntCubeRoot 1000 == Just 10\n",
            "type": "Int -> Maybe.Maybe Int"
          },
          {
            "name": "exactIntSquareRoot",
            "comment": " Return `Just s` if the given integer is a square, and `s` is its square\nroot; otherwise, return `Nothing`.\n\n    exactIntSquareRoot 20 == Nothing\n    exactIntSquareRoot 25 == Just 5\n",
            "type": "Int -> Maybe.Maybe Int"
          },
          {
            "name": "extendedGcd",
            "comment": " Given `a` and `b`, compute integers `(d, u, v)` so that `a * u + b * v ==\nd` where `d == gcd a b`. (These are known as [Bézout coefficients](\nhttps://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity). If the inputs are both\npositive, the solution returned satisfies `abs u < b // gcd a b` and\n`abs v < a // gcd a b`.)\n\n    extendedGcd 1215 465 == (15, -13, 34)\n        -- because gcd 1215 465 == 15 == -13 * 1215 + 34 * 465\n",
            "type": "Int -> Int -> ( Int, Int, Int )"
          },
          {
            "name": "fromBase",
            "comment": " Interpret a list of digits as a number in the given base. The input is\nexpected to consist of integers `d` for which `0 <= d < base`.\n\n    fromBase 2 [1, 0, 1, 0, 1, 0] = 42\n",
            "type": "Int -> List Int -> Int"
          },
          {
            "name": "gcd",
            "comment": " Calculate the greatest common divisor of two integers. `gcd x 0` and\n`gcd 0 x` both return `x`. Negative arguments are made positive first.\n\n    gcd 56 80 == 8\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "intCubeRoot",
            "comment": " Integer cube root, rounding down.\n\n    intCubeRoot 800 == 9\n    intCubeRoot 1000 == 10\n",
            "type": "Int -> Int"
          },
          {
            "name": "intSquareRoot",
            "comment": " Take the square root, rounding down. Return `NaN` (not a number) for\nnegative arguments.\n\n    intSquareRoot 20 == 4\n    intSquareRoot 25 == 5\n",
            "type": "Int -> Int"
          },
          {
            "name": "isCoprimeTo",
            "comment": " Test whether two integers are coprime.\n\n    56 `isCoprimeTo` 80 == False\n    5 `isCoprimeTo` 8\n",
            "type": "Int -> Int -> Bool"
          },
          {
            "name": "isCube",
            "comment": " Test whether a number is a cube.\n\n    isCube 800 == False\n    isCube 1000 == True\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isEven",
            "comment": " Test whether an integer is even.\n\n    isEven 2 == True\n    isEven 3 == False\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isMultipleOf",
            "comment": " Test whether one number is a multiple of another.\n\n    120 `isMultipleOf` 10 == True\n    125 `isMultipleOf` 10 == False\n",
            "type": "Int -> Int -> Bool"
          },
          {
            "name": "isOdd",
            "comment": " Test whether an integer is odd.\n\n    isOdd 2 == False\n    isOdd 3 == True\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isPrime",
            "comment": " Test whether an integer is a positive prime.\n\n    isPrime 2357 == True\n    isPrime 500 == False\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isSquare",
            "comment": " Test whether a number is a square.\n\n    isSquare 20 == False\n    isSquare 25 == True\n",
            "type": "Int -> Bool"
          },
          {
            "name": "lcm",
            "comment": " Calculate the least common multiple of two integers. `lcm x 0` and\n`lcm 0 x` both return `0`. Negative arguments are made positive first.\n\n    lcm 56 80 == 560\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "modularInverse",
            "comment": " Given a number `a` and a modulus `n`, return the multiplicative inverse of\n`a` modulo `n`, if it exists. That is: try to return `Just b`, with\n`0 <= b < n`, so that `a * b == 1` modulo `n`, but return `Nothing` if no such\n`b` exists. (`b` exists precisely when `a` and the modulus `n` are coprime.)\n\n    modularInverse 3 11 == Just 4    -- 3 * 4 == 12 == 1 (mod 11)\n    modularInverse 3 15 == Nothing   -- 3 and 15 aren't coprime\n",
            "type": "Int -> Int -> Maybe.Maybe Int"
          },
          {
            "name": "powerMod",
            "comment": " `powerMod b e m` efficiently calculates `b ^ e` (modulo `m`). It assumes\n`b >= 0`, `e >= 0` and `m >= 1`.\n\nFor example, to compute `4147 ^ 8671 % 1000` efficiently:\n\n    powerMod 4147 8671 1000 == 803\n",
            "type": "Int -> Int -> Int -> Int"
          },
          {
            "name": "primeExponents",
            "comment": " Return a list of all prime-exponent pairs for a given positive integer's\nprime decomposition, with the primes in ascending order. If the input is less\nthan 2, the empty list is returned.\n\n    primeExponents 24 == [(2, 3), (5, 2)]                -- 2^3 * 5^2\n    primeExponents 531764 == [(2, 1), (11, 2), (13, 3)]  -- 2^1 * 11^2 * 13^3\n    primeExponents 1 == []                               -- empty product\n",
            "type": "Int -> List ( Int, Int )"
          },
          {
            "name": "primeFactors",
            "comment": " Return a list of all prime factors for a given positive integer, in\nascending order. If the input is less than 2, the empty list is returned.\n\n    primeFactors 24 == [2, 2, 2, 3]\n    primeFactors 767 == [13, 59]\n    primeFactors 1 == []\n",
            "type": "Int -> List Int"
          },
          {
            "name": "primesBelow",
            "comment": " Get all primes in the given range `[0..n-1]`, using the Sieve of\nEratosthenes.\n\n    primesBelow 4 == [2, 3]\n    primesBelow 17 == [2, 3, 5, 7, 11, 13]\n",
            "type": "Int -> List Int"
          },
          {
            "name": "properDivisors",
            "comment": " Get all proper divisors (i.e., divisors less than the input) of a number,\nin ascending order.\n\n    properDivisors 20 == [1, 2, 4, 5, 10]\n",
            "type": "Int -> List Int"
          },
          {
            "name": "safeSquareRoot",
            "comment": " Safely take the square root of a number: return `Just (squareRoot n)` if\nthe input `n` is nonnegative; otherwise, return `Nothing`.\n\n    squareRoot 5.76 == Just 2.4\n    squareRoot (-1) == Nothing\n",
            "type": "Float -> Maybe.Maybe Float"
          },
          {
            "name": "squareRoot",
            "comment": " Take the square root of a number. Return `NaN` (not a number) for negative\narguments.\n\n    squareRoot 5.76 == 2.4\n    squareRoot (-1) |> isNaN\n",
            "type": "Float -> Float"
          },
          {
            "name": "toBase",
            "comment": " Convert a number to a list of digits in the given base. The input number is\nmade positive first.\n\n    toBase 2 42 = [1, 0, 1, 0, 1, 0]  -- 42 in binary\n",
            "type": "Int -> Int -> List Int"
          },
          {
            "name": "totient",
            "comment": " Compute Euler's totient function `φ(n)`: the number of positive integers\n`1 <= k <= n` for which `gcd(n, k) == 1`. The input is made positive first.\n\n    totient 99 == 60\n    totient 1450 == 560\n",
            "type": "Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "lynn/elm-ordinal",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Ordinal",
        "comment": " A library for converting integers (`23`, `0`, `-2`) to English ordinal\nstrings (`\"23rd\"`, `\"0th\"`, `\"-2nd\"`).\n\n# Ordinal conversion\n@docs ordinal\n@docs ordinalSuffix\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "ordinal",
            "comment": " Convert an integer into an English ordinal number string (like `\"4th\"`).\n\n    ordinal 42 == \"42nd\"\n    ordinal 0 == \"0th\"\n    ordinal (-1) == \"-1st\"\n",
            "type": "Int -> String"
          },
          {
            "name": "ordinalSuffix",
            "comment": " Get the English ordinal suffix (st/nd/rd/th) for a given integer.\n\n    ordinalSuffix 42 == \"nd\"\n    ordinalSuffix 0 == \"th\"\n    ordinalSuffix (-1) == \"st\"\n",
            "type": "Int -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "maksar/elm-function-extra",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Function.Extra",
        "comment": " Higher-order helpers for working with functions.\n\n# Higher-order helpers\n@docs map, map2, map3, map4, twice\n@docs apply, andThen\n@docs curry3, curry4, curry5\n@docs uncurry3, uncurry4, uncurry5\n@docs on\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Connect the result `a` of the first function to the first argument of the second function to form a pipeline.\nThen, send `x` into each function along the pipeline in order to execute it in a sequential manner.\n\nThe `(x -> ...)` signature is sometimes refered to as a *\"reader\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `andThen` to repeatedly read from the environment `x` and send the result into to the next function, which in turn reads from the environment `x` again and so forth.\n\n    (f `andThen` g `andThen` h) x == (h (g (f x) x) x)\n",
            "type": "(x -> a) -> (a -> x -> b) -> x -> b"
          },
          {
            "name": "apply",
            "comment": " Incrementally apply more functions, similar to `map`*N* where *N* is not fixed.\n\nThe `(x -> ...)` signature is sometimes refered to as a *\"reader\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `apply` to read an arbitrary number of arguments from the same environment `x`.\n\n    (f `apply` ga `apply` gb `apply` gc) x == f x (ga x) (gb x) (gc x)\n                                           == (map4 identity f ga gb gc) x\n                                           == (identity `map` f `apply` ga `apply` gb `apply` gc) x\n\n    (f' `map` ga `apply` gb `apply` gc) x  == f' (ga x) (gb x) (gc x) x\n                                           == (map3 f' ga gb gc) x\n\nAlso notice the type signatures...\n\n    ga                                   : x -> a\n    gb                                   : x -> b\n    gc                                   : x -> c\n\n    f                                    : x -> a -> b -> c -> d\n    (f `apply` ga)                       : x -> b -> c -> d\n    (f `apply` ga `apply` gb)            : x -> c -> d\n    (f `apply` ga `apply` gb `apply` gc) : x -> d\n\n    f'                                   : a -> b -> c -> d\n    (f' `map` ga)                        : x -> b -> c -> d\n    (f' `map` ga `apply` gb)             : x -> c -> d\n    (f' `map` ga `apply` gb `apply` gc)  : x -> d\n\n",
            "type": "(x -> a -> b) -> (x -> a) -> x -> b"
          },
          {
            "name": "curry3",
            "comment": " Change how arguments are passed to a function.\nThis splits 3-tupled arguments into three separate arguments.\n",
            "type": "(( a, b, c ) -> x) -> a -> b -> c -> x"
          },
          {
            "name": "curry4",
            "comment": " Change how arguments are passed to a function.\nThis splits 4-tupled arguments into four separate arguments.\n",
            "type": "(( a, b, c, d ) -> x) -> a -> b -> c -> d -> x"
          },
          {
            "name": "curry5",
            "comment": " Change how arguments are passed to a function.\nThis splits 5-tupled arguments into five separate arguments.\n",
            "type": "(( a, b, c, d, e ) -> x) -> a -> b -> c -> d -> e -> x"
          },
          {
            "name": "map",
            "comment": " Map into a function with a fixed input `x`. This function is just an alias for `(<<)`, the function composition operator.\n\n    (f `map` g `map` h) == (f << g << h) -- Note that `map` refers to Function.map not List.map!\n\nThe `(x -> ...)` signature is sometimes refered to as a *\"reader\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map` to transform a *\"reader\"* that produces an `a` into a *\"reader\"* that produces a `b`.\n",
            "type": "(a -> b) -> (x -> a) -> x -> b"
          },
          {
            "name": "map2",
            "comment": " Send a single argument `x` into a binary function using two intermediate mappings.\n\n    (map2 f ga gb) x == (f (ga x) (gb x)) x\n\nThe `(x -> ...)` signatures are sometimes refered to as *\"readers\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map2` to read two variables from the environment `x` before applying them to a binary function `f`.\n",
            "type": "(a -> b -> c) -> (x -> a) -> (x -> b) -> x -> c"
          },
          {
            "name": "map3",
            "comment": " Send a single argument `x` into a ternary function using three intermediate mappings.\n\n    (map3 f ga gb gc) x == (f (ga x) (gb x) (gc x)) x\n\nThe `(x -> ...)` signatures are sometimes refered to as *\"readers\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map3` to read three variables from the environment `x` before applying them to a ternary function `f`.\n",
            "type": "(a -> b -> c -> d) -> (x -> a) -> (x -> b) -> (x -> c) -> x -> d"
          },
          {
            "name": "map4",
            "comment": " Send a single argument `x` into a quaternary function using four intermediate mappings.\nUse `apply` as an infix combinator in order to deal with a larger numbers of arguments.\n\n    (map4 f ga gb gc gd) x == (f (ga x) (gb x) (gc x) (gd x)) x\n\nThe `(x -> ...)` signatures are sometimes refered to as *\"readers\"* of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map4` to read four variables from the environment `x` before applying them to a quaternary function `f`.\n",
            "type": "(a -> b -> c -> d -> e) -> (x -> a) -> (x -> b) -> (x -> c) -> (x -> d) -> x -> e"
          },
          {
            "name": "on",
            "comment": " Apply a binary function using a transformation on both input parameters.\n\n    (*) `on` f == \\x y -> f x * f y\n    sortBy (compare `on` fst) == sortBy (\\x y -> fst x `compare` fst y)\n",
            "type": "(b -> b -> c) -> (a -> b) -> a -> a -> c"
          },
          {
            "name": "twice",
            "comment": " Applies given function `f` twice.\n\n    (twice f) == (f << f)\n",
            "type": "(a -> a) -> a -> a"
          },
          {
            "name": "uncurry3",
            "comment": " Change how arguments are passed to a function.\nThis combines three arguments into a single 3-tuple.\n",
            "type": "(a -> b -> c -> x) -> ( a, b, c ) -> x"
          },
          {
            "name": "uncurry4",
            "comment": " Change how arguments are passed to a function.\nThis combines four arguments into a single 4-tuple.\n",
            "type": "(a -> b -> c -> d -> x) -> ( a, b, c, d ) -> x"
          },
          {
            "name": "uncurry5",
            "comment": " Change how arguments are passed to a function.\nThis combines five arguments into a single 5-tuple.\n",
            "type": "(a -> b -> c -> d -> e -> x) -> ( a, b, c, d, e ) -> x"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "maksar/elm-workflow",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Workflow",
        "comment": " Workflow simulates voting process on multiple steps.\n    Each step has a threshold value.\n    To proceed to the next step, it's necessary to get threshold number of votes.\n    Power users can force skip one step.\n    User with ar least `VOTE` permission can `reject` the curren step (previous step re-starts).\n    Inactive users canot `approve` or `reject`. User can only vote once on the same step.\n\n# Definition\n@docs Workflow\n\n# Creating Workflow\n@docs init\n\n# Interactions\n@docs approve, reject\n\n# Inspecting state\n@docs finished\n",
        "aliases": [
          {
            "name": "Workflow",
            "comment": " Record representing workflow status. Consists of:\n    `stepsConfig` - array, containing step's threshold values;\n    `currentStep` integer - number of the current workflow step;\n    `votes` - array of votes on each step.\n",
            "args": [],
            "type": "{ stepsConfig : Array.Array Int , currentStep : Int , votes : Array.Array (GenericSet.GenericSet User.User) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "approve",
            "comment": " Performs approve (vote) operation from given `User` on a `Workflow`.\n\n    init [ 1, 2 ] |> approve (create \"Bob\" True [VOTE]) == { stepsConfig = Array.fromList [1,2], currentStep = 1, votes = Array.fromList [Set.fromList [User { name = \"Bob\", active = True, permissions = Array.fromList [VOTE] }],Set.fromList []] }\n",
            "type": "User.User -> Workflow.Workflow -> Workflow.Workflow"
          },
          {
            "name": "finished",
            "comment": " Returns high-level `Workflow` completion status. `Workflow` becomes completed after going through all its steps.\n",
            "type": "Workflow.Workflow -> Bool"
          },
          {
            "name": "init",
            "comment": " Creates `Workflow` from provided list of threshold values.\n\n    init [ 1, 2 ] == { stepsConfig = Array.fromList [1,2], currentStep = 0, votes = Array.fromList [Set.fromList [],Set.fromList []] }\n",
            "type": "List Int -> Workflow.Workflow"
          },
          {
            "name": "reject",
            "comment": " Performs reject operation from given `User` on a `Workflow`.\n",
            "type": "User.User -> Workflow.Workflow -> Workflow.Workflow"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "User",
        "comment": " User type, instances of which should be used in `Workflow`s\n\n# Definition\n@docs User\n\n# Creating User\n@docs create\n\n# Taking User Apart\n@docs name, active, inactive, permissions\n\n# Getting Permission for a step\n@docs permission\n\n# Comparing Users\n@docs compare\n",
        "aliases": [],
        "types": [
          {
            "name": "User",
            "comment": " Container for all attributes, required by `Workflow` to operate. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "active",
            "comment": " Extracts operational status from `User` instance.\n\n    active <| create \"Bob\" True [ NONE, VOTE ] == True\n",
            "type": "User.User -> Bool"
          },
          {
            "name": "compare",
            "comment": " Compare names of the two given users, returning `Order`. No other attributes are taken into account.\n\n    compare (create \"Bob\" True [ NONE ]) (create \"Alice\" True [ NONE ]) == False\n    compare (create \"Bob\" True [ NONE ]) (create \"Bob\" False [ ]) == True\n",
            "type": "User.User -> User.User -> Basics.Order"
          },
          {
            "name": "create",
            "comment": " Creates instance of the `User` by name, operational status, and list of Permissions for each step.\n\n    create \"Bob\" True [ NONE, VOTE ] == User \"Bob\" True Array.fromList [ NONE, VOTE ]\n",
            "type": "String -> Bool -> List Permission.Permission -> User.User"
          },
          {
            "name": "inactive",
            "comment": " Extracts operational status from `User` instance.\n\n    inactive <| create \"Bob\" False [ NONE, VOTE ] == True\n",
            "type": "User.User -> Bool"
          },
          {
            "name": "name",
            "comment": " Extracts name from `User` instance.\n\n    name <| create \"Bob\" True [ NONE, VOTE ] == \"Bob\"\n",
            "type": "User.User -> String"
          },
          {
            "name": "permission",
            "comment": " Gets permission from a user to a particular step of the `Workflow`.\n    If permission wasn't found, `NONE` will be returned.\n\n    permission 0 <| create \"Bob\" True [ NONE, VOTE ] == NONE\n    permission 1 <| create \"Bob\" True [ NONE, VOTE ] == VOTE\n    permission 2 <| create \"Bob\" True [ NONE, VOTE ] == NONE\n",
            "type": "Int -> User.User -> Permission.Permission"
          },
          {
            "name": "permissions",
            "comment": " Extracts list of `Permission`s from `User` instance.\n\n    permissions <| create \"Bob\" True [ NONE, VOTE ] == [ NONE, VOTE ]\n",
            "type": "User.User -> List Permission.Permission"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Permission",
        "comment": " Permission type dictating what `User` can do on particular `Workflow` step.\n\n# Definition\n@docs Permission\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Permission",
            "comment": " User can vote (having `VOTE` permission) on particular step of the `Workflow` or completely skip the whole step\n    (having `FORCE` permission). Without any permissions (`NONE`), `User` cannot affect the `Workflow`.\n",
            "args": [],
            "cases": [
              [
                "VOTE",
                []
              ],
              [
                "FORCE",
                []
              ],
              [
                "NONE",
                []
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "marcosh/elm-html-to-unicode",
    "version": "1.0.1",
    "docs": [
      {
        "name": "ElmEscapeHtml",
        "comment": " This library allows to escape html string and unescape named and numeric\ncharacter references (e.g. &gt;, &#62;, &x3e;) to the corresponding unicode\ncharacters\n\n#Definition\n@docs escape, unescape\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "escape",
            "comment": " Escapes a string converting characters that could be used to inject XSS\nvectors (http://wonko.com/post/html-escaping). At the moment we escape &, <, >,\n\", ', `, , !, @, $, %, (, ), =, +, {, }, [ and ]\n\nfor example\n\nescape \"&<>\\\"\" == \"&amp;&lt;&gt;&quot;\"\n",
            "type": "String -> String"
          },
          {
            "name": "unescape",
            "comment": " Unescapes a string, converting all named and numeric character references\n(e.g. &gt;, &#62;, &x3e;) to their corresponding unicode characters.\n\nfor example\n\nunescape \"&quot;&amp;&lt;&gt;\" == \"\\\"&<>\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "massung/elm-css",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Css",
        "comment": " This module is designed to allow you to add type-safe CSS styling\nto your rendered Html via style tags. It has basic support for @import\ndirectives and CSS rules.\n\nAssuming you have types for id and class attributes, you \"compile\" a\nStylesheet with the stylesheet function and use the functions returned\nin the Stylesheet to generate id and class attributes.\n\nFor example:\n\n    type Id = MyId\n    type Class = MyClass\n    \n    -- import some google fonts\n    imports =\n        [\"https://fonts.googleapis.com/css?family=Droid+Sans:400,700\"\n        ]\n\n    -- create ruels, notice the use of MyId and MyClass. \n    rules =\n        [ { selectors = [ Css.Id MyId ]\n          , descriptor = [ (\"color\", \"red\") ]\n          }\n        , { selectors = [ Css.Class MyClass ]\n          , descriptor = [ (\"color\", \"blue\") ]\n          }\n        ]\n    \n    -- compile a stylesheet with imports and a single rule\n    stylesheet = Css.stylesheet imports rules\n    \n    -- now, add the style node, and safely use your ids and classes\n    html =\n        div []\n            [ Css.style [ Html.Attributes.scoped True ] stylesheet\n            , div [ stylesheet.id MyId ] [ text \"Using MyId\" ]\n            , div [ stylesheet.class MyClass ] [ text \"Using MyClass\" ]\n            ]\n\n# Types\n@docs Stylesheet, Sel, Pseudo, Descriptor, Rule\n\n# Functions\n@docs stylesheet, style\n",
        "aliases": [
          {
            "name": "Descriptor",
            "comment": " A list of key/value style properties. ",
            "args": [],
            "type": "List ( String, String )"
          },
          {
            "name": "Rule",
            "comment": " A Rule is a list of matching selectors and a descriptor, which is\na list of key/value style pairs. Each selector is a separate possible match\nfor the rule. For example:\n\n    [ Sel.Id MyId\n    , Sel.Class MyClass\n    , Sel.Type \"div\"\n    , Sel.Sibling (Sel.Type \"a\") (Sel.Type \"hr\")\n    ]\n    \nThat list of selectors would be the same as the following rule in CSS:\n\n    #MyId, .MyClass, div, hr a { ... }\n",
            "args": [
              "id",
              "cls"
            ],
            "type": "{ selectors : List (Css.Sel id cls), descriptor : Css.Descriptor }"
          },
          {
            "name": "Stylesheet",
            "comment": " A Stylesheet is a \"compiled\" Html text node, as well as functions\nthat allow you to safely create Html.Attributes for the id and class of\nyour tags. It is returned by the stylesheet function.\n",
            "args": [
              "id",
              "cls",
              "msg"
            ],
            "type": "{ node : Html.Html msg , id : id -> Html.Attribute msg , class : cls -> Html.Attribute msg , classes : List cls -> Html.Attribute msg }"
          }
        ],
        "types": [
          {
            "name": "Pseudo",
            "comment": " Pseudo CSS selectors and elements. These are chained together in the\nPseudo selector.\n",
            "args": [],
            "cases": [
              [
                "Any",
                []
              ],
              [
                "Default",
                []
              ],
              [
                "Link",
                []
              ],
              [
                "Visited",
                []
              ],
              [
                "Hover",
                []
              ],
              [
                "Active",
                []
              ],
              [
                "Focus",
                []
              ],
              [
                "Target",
                []
              ],
              [
                "Enabled",
                []
              ],
              [
                "Disabled",
                []
              ],
              [
                "Checked",
                []
              ],
              [
                "Indeterminate",
                []
              ],
              [
                "Invalid",
                []
              ],
              [
                "Valid",
                []
              ],
              [
                "Fullscreen",
                []
              ],
              [
                "Root",
                []
              ],
              [
                "Scope",
                []
              ],
              [
                "FirstChild",
                []
              ],
              [
                "LastChild",
                []
              ],
              [
                "NthChild",
                [
                  "Int"
                ]
              ],
              [
                "NthLastChild",
                [
                  "Int"
                ]
              ],
              [
                "NthOfType",
                [
                  "String"
                ]
              ],
              [
                "NthLastOfType",
                [
                  "String"
                ]
              ],
              [
                "FirstOfType",
                []
              ],
              [
                "LastOfType",
                []
              ],
              [
                "OnlyOfType",
                []
              ],
              [
                "Empty",
                []
              ],
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Lang",
                [
                  "String"
                ]
              ],
              [
                "Dir",
                [
                  "String"
                ]
              ],
              [
                "FirstLetter",
                []
              ],
              [
                "FirstLine",
                []
              ],
              [
                "Before",
                []
              ],
              [
                "After",
                []
              ],
              [
                "Selection",
                []
              ],
              [
                "Backdrop",
                []
              ]
            ]
          },
          {
            "name": "Sel",
            "comment": " CSS rule selectors follow the all the selectors found [here](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)\nexcept for attribute selectors.\n\nThe most common selectors are the Type, Id, and Class selectors. The others\nare combinator selectors or pseudo-class/element selectors. Some examples:\n\n    -- div { ... }\n    Type \"div\"\n    \n    -- #MyId { ... }\n    Id MyId\n    \n    -- .MyClass { ... }\n    Class MyClass\n    \n    -- div #Content { ... }\n    Descendant (Id Content) (Type \"div\")\n    \n    -- span > .MyClass { ... }\n    Child (Class MyClass) (Type \"span\")\n    \n    -- hr ~ p:first-line:first-letter { ... }\n    Pseudo [FirstLine, FirstLetter] <| Sibling (Type \"p\") (Type \"hr\")\n\nTake a moment to notice that for combinators, the most specific element being\nstyled (what would be last in the selector) appears first in code.\n",
            "args": [
              "id",
              "cls"
            ],
            "cases": [
              [
                "Type",
                [
                  "String"
                ]
              ],
              [
                "Id",
                [
                  "id"
                ]
              ],
              [
                "Class",
                [
                  "cls"
                ]
              ],
              [
                "Descendant",
                [
                  "Css.Sel id cls",
                  "Css.Sel id cls"
                ]
              ],
              [
                "Child",
                [
                  "Css.Sel id cls",
                  "Css.Sel id cls"
                ]
              ],
              [
                "Sibling",
                [
                  "Css.Sel id cls",
                  "Css.Sel id cls"
                ]
              ],
              [
                "Adjacent",
                [
                  "Css.Sel id cls",
                  "Css.Sel id cls"
                ]
              ],
              [
                "Pseudo",
                [
                  "List Css.Pseudo",
                  "Css.Sel id cls"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "style",
            "comment": " Render a style tag node. This is no different than  ",
            "type": "List (Html.Attribute msg) -> Css.Stylesheet id cls msg -> Html.Html msg"
          },
          {
            "name": "stylesheet",
            "comment": " Compiles a Stylesheet if given a list of urls to @import and\na list of Rules to generate. The Stylesheet contains the imports,\nrules (rendered as strings) and functions for creating type-safe\nid and class attributes.\n",
            "type": "List String -> List (Css.Rule id cls) -> Css.Stylesheet id cls msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mattjbray/elm-prismicio",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Prismic",
        "comment": " An Elm SDK for [Prismic.io](https://prismic.io).\n\n# Initialisation\n@docs init\n\n# Making a request\n@docs api, form, bookmark, submit, collectResponses\n\n# Customising the request\n@docs ref, query, none\n\n# Predicates\n@docs at, atL, any, fulltext\n\n# Types\n\n## Models\n@docs Url, Model, ModelWithApi, Model'\n\n## Errors\n@docs PrismicError\n\n## Api\n@docs Api, RefProperties, Ref, Form, FormField, FieldType, Experiments\n\n## Requests\n@docs Predicate, Request\n\n## Response\n@docs Response\n\n## Documents\n\n### Default document\n@docs DefaultDocType, DocumentField, decodeDefaultDocType\n\n### Custom documents\n\nYou can create your own Elm types to represent your documents using the\nfollowing components.\n\n#### Structured Text\n@docs StructuredText, StructuredTextElement, SimpleStructuredTextField, SimpleStructuredTextType, Span, SpanType\n\n#### Image\n@docs ImageViews, ImageView, ImageDimensions\n\n#### Embed\n@docs Embed, EmbedRich, EmbedVideo\n\n#### Link\n@docs Link, DocumentReference\n\n### Custom document decoders\n\n@docs decodeStructuredText\n@docs decodeImageViews\n@docs decodeLink\n@docs decodeEmbed\n\n## Viewing documents\n@docs structuredTextAsHtml\n@docs defaultLinkResolver\n\n### `StructuredText` helpers\n@docs getTitle, getFirstImage, getFirstParagraph, getText, getTexts\n",
        "aliases": [
          {
            "name": "Api",
            "comment": " The `Api` for your Prismic repository.\n\nYour app can look things up in this if you need to (for example, to resolve\nlinks using the bookmarks `Dict`).\n",
            "args": [],
            "type": "{ refs : List Prismic.RefProperties , bookmarks : Dict.Dict String String , types : Dict.Dict String String , tags : List String , version : String , forms : Dict.Dict String Prismic.Form , oauthInitiate : String , oauthToken : String , license : String , experiments : Prismic.Experiments }"
          },
          {
            "name": "DefaultDocType",
            "comment": " A default document type.\n\nNormally you will want to define your own document types and decoders.\n",
            "args": [],
            "type": "Dict.Dict String (Dict.Dict String (List Prismic.DocumentField))"
          },
          {
            "name": "DocumentReference",
            "comment": " A referenced to a Prismic document.\n",
            "args": [],
            "type": "{ id : String , slug : String , tags : List String , linkedDocumentType : String }"
          },
          {
            "name": "EmbedRich",
            "comment": " Rich embed elements.\n",
            "args": [],
            "type": "{ authorName : String , authorUrl : Prismic.Url , cacheAge : String , embedUrl : Prismic.Url , height : Maybe.Maybe Int , html : String , providerName : String , providerUrl : Prismic.Url , title : String , url : Prismic.Url , version : String , width : Int }"
          },
          {
            "name": "EmbedVideo",
            "comment": " Video embed elements.\n",
            "args": [],
            "type": "{ authorName : String , authorUrl : Prismic.Url , embedUrl : Prismic.Url , height : Int , html : String , providerName : String , providerUrl : Prismic.Url , thumbnailHeight : Int , thumbnailUrl : Prismic.Url , thumbnailWidth : Int , title : String , version : String , width : Int }"
          },
          {
            "name": "Experiments",
            "comment": " TODO: Experiments are not Strings.  Fill out this type.\n",
            "args": [],
            "type": "{ draft : List String, running : List String }"
          },
          {
            "name": "Form",
            "comment": " Properties representing a Prismic form.\n\nThese are used to construct a default query.\n",
            "args": [],
            "type": "{ method : String , enctype : String , action : Prismic.Url , fields : Dict.Dict String Prismic.FormField , rel : Maybe.Maybe String , name : Maybe.Maybe String }"
          },
          {
            "name": "FormField",
            "comment": " A field in a Prismic form.\n\nThese are combined to construct query parameters for the eventual Http request.\n",
            "args": [],
            "type": "{ fieldType : Prismic.FieldType , multiple : Bool , default : Maybe.Maybe String }"
          },
          {
            "name": "ImageDimensions",
            "comment": " Dimensions of an image view.\n",
            "args": [],
            "type": "{ width : Int, height : Int }"
          },
          {
            "name": "ImageView",
            "comment": " Properties for a single image view.\n",
            "args": [],
            "type": "{ alt : Maybe.Maybe String , copyright : Maybe.Maybe String , url : Prismic.Url , dimensions : Prismic.ImageDimensions }"
          },
          {
            "name": "ImageViews",
            "comment": " A collection of image views.\n",
            "args": [],
            "type": "{ main : Prismic.ImageView , views : Dict.Dict String Prismic.ImageView }"
          },
          {
            "name": "Model",
            "comment": " This is the main user-facing type for elm-prismicio's internal state.\n\nThe `Api` is represented as `Maybe Api`, because we may not have fetched it yet.\n",
            "args": [],
            "type": "Prismic.Model' (Maybe.Maybe Prismic.Api)"
          },
          {
            "name": "Model'",
            "comment": " The generic `Model'` type, where the `Api` is represented by a type parameter.\n\nYou will be using the specialised `Model` type in user code.\n",
            "args": [
              "api"
            ],
            "type": "{ api : api , url : Prismic.Url , nextRequestId : Int , cache : Dict.Dict String Json.Decode.Value }"
          },
          {
            "name": "ModelWithApi",
            "comment": " This variation of the Model type is returned by `api`, when we know we have successfully retreived the `Api`.\n\nIt is used internally by elm-prismicio.\n",
            "args": [],
            "type": "Prismic.Model' Prismic.Api"
          },
          {
            "name": "RefProperties",
            "comment": " Properties representing a Prismic ref.\n\nMost of the time you will be working with the `master` ref, which is added to\nall requests by default.\n",
            "args": [],
            "type": "{ id : String , ref : Prismic.Ref , label : String , isMasterRef : Bool }"
          },
          {
            "name": "Request",
            "comment": " Represents a Prismic request.\n",
            "args": [],
            "type": "{ action : Prismic.Url, ref : Prismic.Ref, q : String }"
          },
          {
            "name": "Response",
            "comment": " Represents a Prismic response.\n\nThis type is parameterized by `docType`, which is determined by the `Decoder`\nyou pass to `submit`.\n",
            "args": [
              "docType"
            ],
            "type": "{ license : String , nextPage : Maybe.Maybe Prismic.Url , page : Int , prevPage : Maybe.Maybe Prismic.Url , results : List (Prismic.SearchResult docType) , resultsPerPage : Int , resultsSize : Int , totalPages : Int , totalResultsSize : Int , version : String }"
          },
          {
            "name": "SimpleStructuredTextField",
            "comment": " \"Simple\" `StructuredText` elements, such as headings and paragraphs.\n",
            "args": [],
            "type": "{ fieldType : Prismic.SimpleStructuredTextType , text : String , spans : List Prismic.Span }"
          },
          {
            "name": "Span",
            "comment": " `Span`s are nested within \"simple\" `StructuredText` elements.\n",
            "args": [],
            "type": "{ start : Int, end : Int, spanType : Prismic.SpanType }"
          },
          {
            "name": "StructuredText",
            "comment": " `StructuredText` is a list of `StructuredTextElement`s.\n",
            "args": [],
            "type": "List Prismic.StructuredTextElement"
          }
        ],
        "types": [
          {
            "name": "DocumentField",
            "comment": " A field in the `DefaultDocType`.\n",
            "args": [],
            "cases": [
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "StructuredText",
                [
                  "Prismic.StructuredText"
                ]
              ],
              [
                "Select",
                [
                  "String"
                ]
              ],
              [
                "Color",
                [
                  "String"
                ]
              ],
              [
                "Image",
                [
                  "Prismic.ImageViews"
                ]
              ],
              [
                "Number",
                [
                  "Float"
                ]
              ],
              [
                "Date",
                [
                  "String"
                ]
              ],
              [
                "Link",
                [
                  "Prismic.Link"
                ]
              ]
            ]
          },
          {
            "name": "Embed",
            "comment": " Embed elements.\n",
            "args": [],
            "cases": [
              [
                "EVideo",
                [
                  "Prismic.EmbedVideo"
                ]
              ],
              [
                "ERich",
                [
                  "Prismic.EmbedRich"
                ]
              ]
            ]
          },
          {
            "name": "FieldType",
            "comment": " The type of values for a Prismic form field.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Link",
            "comment": " Links to other documents or to the web.\n",
            "args": [],
            "cases": [
              [
                "DocumentLink",
                [
                  "Prismic.DocumentReference",
                  "Bool"
                ]
              ],
              [
                "WebLink",
                [
                  "Prismic.Url"
                ]
              ]
            ]
          },
          {
            "name": "Predicate",
            "comment": " The type representing Prismic query predicates.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "PrismicError",
            "comment": " The possible errors elm-prismicio raises.\n",
            "args": [],
            "cases": [
              [
                "FormDoesNotExist",
                [
                  "String"
                ]
              ],
              [
                "RefDoesNotExist",
                [
                  "String"
                ]
              ],
              [
                "BookmarkDoesNotExist",
                [
                  "String"
                ]
              ],
              [
                "FetchApiError",
                [
                  "Http.Error"
                ]
              ],
              [
                "SubmitRequestError",
                [
                  "Http.Error"
                ]
              ]
            ]
          },
          {
            "name": "Ref",
            "comment": " A type to disambiguate `Ref`s from other `String`s.\n",
            "args": [],
            "cases": [
              [
                "Ref",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "SimpleStructuredTextType",
            "comment": " Types of \"simple\" `StructuredText` elements.\n",
            "args": [],
            "cases": [
              [
                "Heading1",
                []
              ],
              [
                "Heading2",
                []
              ],
              [
                "Heading3",
                []
              ],
              [
                "Paragraph",
                []
              ],
              [
                "ListItem",
                []
              ]
            ]
          },
          {
            "name": "SpanType",
            "comment": " Types of spans.\n",
            "args": [],
            "cases": [
              [
                "Em",
                []
              ],
              [
                "Strong",
                []
              ],
              [
                "Hyperlink",
                [
                  "Prismic.Link"
                ]
              ]
            ]
          },
          {
            "name": "StructuredTextElement",
            "comment": " An element of `StructuredText`.\n",
            "args": [],
            "cases": [
              [
                "SSimple",
                [
                  "Prismic.SimpleStructuredTextField"
                ]
              ],
              [
                "SImage",
                [
                  "Prismic.ImageView"
                ]
              ],
              [
                "SEmbed",
                [
                  "Prismic.Embed"
                ]
              ]
            ]
          },
          {
            "name": "Url",
            "comment": " Disambiguate `Url`s from `String`s\n",
            "args": [],
            "cases": [
              [
                "Url",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "any",
            "comment": " Match documents having any of `values` at `fragment`.\n",
            "type": "String -> List String -> Prismic.Predicate"
          },
          {
            "name": "api",
            "comment": " Go and fetch the Prismic API, if it has not already been fetched. You must\nstart every Prismic request with this function.\n",
            "type": "Prismic.Model -> Task.Task Prismic.PrismicError Prismic.ModelWithApi"
          },
          {
            "name": "at",
            "comment": " Match documents having `value` at `fragment`.\n",
            "type": "String -> String -> Prismic.Predicate"
          },
          {
            "name": "atL",
            "comment": " Match documents having a list of `values` at `fragment`.\n",
            "type": "String -> List String -> Prismic.Predicate"
          },
          {
            "name": "bookmark",
            "comment": " Convenience function for fetching a bookmarked document.\n",
            "type": "String -> Task.Task Prismic.PrismicError Prismic.ModelWithApi -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi )"
          },
          {
            "name": "collectResponses",
            "comment": " The `submit` `Task` returns an updated Prismic `Model` with the request and\nresponse cached.\n\nIn your app's `update` function, you should merge this with the existing cache\nusing `collectResponses`.\n",
            "type": "Prismic.Model -> Prismic.Model -> Prismic.Model"
          },
          {
            "name": "decodeDefaultDocType",
            "comment": " Decode a result to a `DefaultDocType`.\n",
            "type": "Json.Decode.Decoder Prismic.DefaultDocType"
          },
          {
            "name": "decodeEmbed",
            "comment": " Decode an `Embed` field.\n",
            "type": "Json.Decode.Decoder Prismic.Embed"
          },
          {
            "name": "decodeImageViews",
            "comment": " Decode an `ImageField`.\n",
            "type": "Json.Decode.Decoder Prismic.ImageViews"
          },
          {
            "name": "decodeLink",
            "comment": " Decode a `Link`.\n",
            "type": "Json.Decode.Decoder Prismic.Link"
          },
          {
            "name": "decodeStructuredText",
            "comment": " Decode some `StructuredText`.\n",
            "type": "Json.Decode.Decoder Prismic.StructuredText"
          },
          {
            "name": "defaultLinkResolver",
            "comment": " Provide a default URL for `linkedDocuments`:\n\n    Url \"documents/doc.id/doc.slug\"\n",
            "type": "Prismic.DocumentReference -> Prismic.Url"
          },
          {
            "name": "form",
            "comment": " Choose a form on which to base the rest of the Prismic request.\n",
            "type": "String -> Task.Task Prismic.PrismicError Prismic.ModelWithApi -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi )"
          },
          {
            "name": "fulltext",
            "comment": " Match documents with a full text search at `fragment`.\n",
            "type": "String -> String -> Prismic.Predicate"
          },
          {
            "name": "getFirstImage",
            "comment": " Get the first image out of some `StructuredText`, if there is one.\n",
            "type": "Prismic.StructuredText -> Maybe.Maybe Prismic.ImageView"
          },
          {
            "name": "getFirstParagraph",
            "comment": " Get the first paragraph out of some `StructuredText`, if there is one.\n",
            "type": "Prismic.StructuredText -> Maybe.Maybe Prismic.StructuredTextElement"
          },
          {
            "name": "getText",
            "comment": " Get the contents of a single `StructuredText` element as a `String`.\n",
            "type": "Prismic.StructuredTextElement -> String"
          },
          {
            "name": "getTexts",
            "comment": " Get the contents of a some `StructuredText` as a `String`.\n",
            "type": "Prismic.StructuredText -> String"
          },
          {
            "name": "getTitle",
            "comment": " Get the first title out of some `StructuredText`, if there is one.\n",
            "type": "Prismic.StructuredText -> Maybe.Maybe Prismic.StructuredTextElement"
          },
          {
            "name": "init",
            "comment": " Initialise the Prismic model with the URL for your Prismic repository. Save\nthis in your application's Model somewhere.\n\n    type alias Model =\n        { prismic : Prismic.Model }\n\n    init =\n        { prismic =\n            Prismic.init (Url \"https://lesbonneschoses.prismic.io/api\")\n        }\n",
            "type": "Prismic.Url -> Prismic.Model"
          },
          {
            "name": "none",
            "comment": " Pass the request through unmodified.\n\nUseful for conditionally adding a query.\n",
            "type": "Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.Model' api ) -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.Model' api )"
          },
          {
            "name": "query",
            "comment": " Override a Form's default query.\n\nSee the section on `Predicate`s below for how to construct a `Predicate`.\n",
            "type": "List Prismic.Predicate -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi ) -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi )"
          },
          {
            "name": "ref",
            "comment": " Override a Form's default ref\n",
            "type": "String -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi ) -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi )"
          },
          {
            "name": "structuredTextAsHtml",
            "comment": " Render some `StructuredText` as HTML.\n\nYou must supply a `linkResolver` to resolve any links in the `StructuredText`.\nIf you don't care about this, you can use the `defaultLinkResolver`.\n",
            "type": "(Prismic.DocumentReference -> Prismic.Url) -> Prismic.StructuredText -> List (Html.Html msg)"
          },
          {
            "name": "submit",
            "comment": " Submit the request.\n\nPass this function a `Json.Decoder` to decode each document in the response into\nyour own Elm type, or use `decodeDefaultDocType`.\n",
            "type": "Json.Decode.Decoder docType -> Task.Task Prismic.PrismicError ( Prismic.Request, Prismic.ModelWithApi ) -> Task.Task Prismic.PrismicError ( Prismic.Response docType, Prismic.Model )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mbylstra/elm-html-helpers",
    "version": "1.0.2",
    "docs": [
      {
        "name": "HtmlHelpers",
        "comment": " Some helper functions for creating html }\n\n@docs aButton\n@docs emptyHtml\n@docs maybeHtml\n@docs maybeView\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "aButton",
            "comment": " create an `a` tag with no href that can be used as a button\n",
            "type": "msg -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "emptyHtml",
            "comment": " A span tag with style set to display: none.\n",
            "type": "Html.Html msg"
          },
          {
            "name": "maybeHtml",
            "comment": " Return empty html if the argument is Nothing\n",
            "type": "Maybe.Maybe (Html.Html msg) -> Html.Html msg"
          },
          {
            "name": "maybeView",
            "comment": " If the model is Nothing, then return emply html, else call the given\n  view function on the model.\n",
            "type": "(model -> Html.Html msg) -> Maybe.Maybe model -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "HtmlHelpers.Events",
        "comment": " Some event helpers\n\n@docs stopClickPropagation\n@docs onClickWithDefaultPrevented\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onClickWithDefaultPrevented",
            "comment": " an onClick handler, where the default is prevented ",
            "type": "msg -> Html.Attribute msg"
          },
          {
            "name": "stopClickPropagation",
            "comment": " Return an attribute that stops click propagation. A message must be supplied.\n    Pass a NoOp message if you don't want the click to do anything.\n",
            "type": "msg -> Html.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "mdgriffith/elm-color-mixing",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Color.Mixing",
        "comment": "\n\n@docs Factor, lighten, darken, saturate, desaturate, fade, fadeIn, fadeOut,  mix, spin, tint, shade\n\n@docs average, difference, exclusion, hardlight, multiply, negation, overlay, screen, softlight\n\n\n",
        "aliases": [
          {
            "name": "Factor",
            "comment": " A Float that should be between 0.0 and 1.0\n\n",
            "args": [],
            "type": "Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "average",
            "comment": " Compute the average of two colors on a per-channel (RGB) basis.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "darken",
            "comment": " Decrease the lightness of a color.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "desaturate",
            "comment": " Decrease the saturation of a color in the HSL color space by an absolute amount.\n\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "difference",
            "comment": " Subtracts the second color from the first color on a channel-by-channel basis. Negative values are inverted. Subtracting black results in no change; subtracting white results in color inversion.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "exclusion",
            "comment": " A similar effect to difference with lower contrast.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "fade",
            "comment": " Set the absolute transparency of a color.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeIn",
            "comment": " Decrease the transparency of a color, making it more opaque.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeOut",
            "comment": " Increase the transparency of a color, making it less opaque.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "hardlight",
            "comment": " The same as overlay but with the color roles reversed.\n\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": " Increase the lightness of a color.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "mix",
            "comment": " Mix two colors together in variable proportion. Opacity is included in the calculations.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "multiply",
            "comment": " Multiply two colors. Corresponding RGB channels from each of the two colors are multiplied together then divided by 255. The result is a darker color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "negation",
            "comment": " Do the opposite effect to difference.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "overlay",
            "comment": " Combines the effects of both multiply and screen. Conditionally make light channels lighter and dark channels darker.\n\n__Note:__ The results of the conditions are determined by the first color parameter.\n\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "saturate",
            "comment": " Increase the saturation of a color in the HSL color space by an absolute amount.\n\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "screen",
            "comment": " Do the opposite of `multiply`. The result is a brighter color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "shade",
            "comment": " Mix color with black in variable proportion.  Same as calling `mix` with black.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "softlight",
            "comment": " Similar to overlay but avoids pure black resulting in pure black, and pure white resulting in pure white.\n\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "spin",
            "comment": " Rotate the hue angle of a color in either direction.\n\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "tint",
            "comment": " Mix color with white in variable proportion. Same as calling `mix` with white.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mdgriffith/elm-style-animation",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Style",
        "comment": " This library is for animating css properties and is meant to work well with elm-html.\n\nThe easiest way to get started with this library is to check out the examples that are included with the [source code](https://github.com/mdgriffith/elm-style-animation).\n\nOnce you have the basic structure of how to use this library, you can refer to this documentation to fill any gaps.\n\n\n# Base Definitions\n@docs Animation\n\n# Starting an animation\n@docs animate, queue, repeat, queueRepeat, forever\n\n# Creating animations\n@docs delay, spring, duration, easing, andThen\n\n# Animating Properties\n@docs to, set, update\n\n# Render a Animation into CSS or as SVG attributes\n@docs render, renderAttr\n\n# Set the starting style\n@docs init\n\n# Managing Commands\n@docs on, tick\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Animation",
            "comment": " An Animation of CSS properties.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Append another keyframe.  This is used for multistage animations.\n\nFor example, to cycle through colors, we'd use the following:\n\n      Style.animate\n          |> Style.to\n              [ BackgroundColor\n                    Style.toRGBA 100 100 100 1.0\n              ]\n          |> Style.andThen -- create a new keyframe\n          |> Style.duration (1*second)\n          |> Style.to\n              [ BackgroundColor\n                    Style.toRGBA 178 201 14 1.0\n              ]\n          |> Style.andThen\n          |> Style.to\n              [ BackgroundColor\n                    Style.toRGBA 58 40 69 1.0\n              ]\n          |> Style.on model.style\n",
            "type": "Style.PreAction -> Style.PreAction"
          },
          {
            "name": "animate",
            "comment": " Begin describing an animation.  This animation will cleanly interrupt any animation that is currently running.\n\n      Style.animate\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left 0 Px\n             , Opacity 1\n             ]\n         |> Style.on model.style\n\n",
            "type": "Style.PreAction"
          },
          {
            "name": "delay",
            "comment": " Specify a delay.\nIf not specified, the default is 0.\n\n     Style.animate\n         |> Style.duration (0.4*second)\n         |> Style.delay (0.5*second)\n         |> Style.to\n             [ Left 0 Px\n             , Opacity 1\n             ]\n         |> Style.on model.style\n",
            "type": "Time.Time -> Style.PreAction -> Style.PreAction"
          },
          {
            "name": "duration",
            "comment": " Specify a duration.  This is ignored unless an easing is specified as well!  This is because spring functions (the default), have dynamically created durations.\n\nIf an easing is specified but no duration, the default duration is 350ms.\n\n     Style.animate\n         |> Style.easing (\\x -> x)  -- linear easing\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left 0 Px\n             , Opacity 1\n             ]\n         |> Style.on model.style\n",
            "type": "Time.Time -> Style.PreAction -> Style.PreAction"
          },
          {
            "name": "easing",
            "comment": " Specify an easing function.  It is expected that values should match up at the beginning and end.  So, f 0 == 0 and f 1 == 1.  The default easing is sinusoidal in-out.\n\n",
            "type": "(Float -> Float) -> Style.PreAction -> Style.PreAction"
          },
          {
            "name": "forever",
            "comment": " For use when defining animations that repeat forever.\n\n  import Style exposing (forever)\n\n  Style.repeat forever\n       |> Style.update\n              [ Rotate ((+) 1) Turn\n              ]\n       |> Style.on model.style\n\n",
            "type": "Float"
          },
          {
            "name": "init",
            "comment": " Create an initial style for your init model.\n\n__Note__ All properties that you animate must be present in the init or else that property won't be animated.\n\n",
            "type": "Style.PropertyHelpers.Style -> Style.Animation"
          },
          {
            "name": "on",
            "comment": " Apply an update to a Animation model.\n\n     Style.animate\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left 0 Px\n             , Opacity 1\n             ]\n         |> Style.on model.style\n\n",
            "type": "Style.Animation -> Style.PreAction -> Style.Animation"
          },
          {
            "name": "queue",
            "comment": " The same as `animate` but instead of interrupting the current animation, this will queue up after the current animation is finished.\n\n      Style.queue\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left (Style.to 0) Px\n             , Opacity (Style.to 1)\n             ]\n         |> Style.on model.style\n\n",
            "type": "Style.PreAction"
          },
          {
            "name": "queueRepeat",
            "comment": " Start a repeating animation after the current animation has finished.\n\n      Style.queueRepeat 3\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left (Style.to 0) Px\n             , Opacity (Style.to 1)\n             ]\n         |> Style.on model.style\n\nYou can repeat forever by providing Infinity as the number.\n\n      Style.queueRepeat forever\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left (Style.to 0) Px\n             , Opacity (Style.to 1)\n             ]\n         |> Style.on model.style\n\n\n",
            "type": "Float -> Style.PreAction"
          },
          {
            "name": "render",
            "comment": " Render into concrete css that can be directly applied to 'style' in elm-html\n\n    div [ style Style.render widget.style) ] [ ]\n\n",
            "type": "Style.Animation -> List ( String, String )"
          },
          {
            "name": "renderAttr",
            "comment": " Render into svg attributes.\n\n    polygon (Style.renderAttr widget.style) [ ]\n\n",
            "type": "Style.Animation -> List (Svg.Attribute msg)"
          },
          {
            "name": "repeat",
            "comment": " Interrupt the current animation and begin repeating the specified one.\n\n      Style.repeat 3\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left (Style.to 0) Px\n             , Opacity (Style.to 1)\n             ]\n         |> Style.on model.style\n\nYou can repeat forever by providing Infinity as the number.\n\n      Style.repeat forever\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Left (Style.to 0) Px\n             , Opacity (Style.to 1)\n             ]\n         |> Style.on model.style\n\n\n",
            "type": "Float -> Style.PreAction"
          },
          {
            "name": "set",
            "comment": " Apply a style immediately.  This takes a list of static style properties, meaning the no `Style.to` functions, only concrete numbers and values.\n\n\n    Style.animate\n         |> Style.duration (0.4*second)\n         |> Style.to\n             [ Opacity (Style.to 1)\n             ]\n      |> Style.andThen\n         |> Style.set\n             [ Display None\n             ]\n         |> Style.on model.style\n\n",
            "type": "Style.PropertyHelpers.Style -> Style.PreAction -> Style.PreAction"
          },
          {
            "name": "spring",
            "comment": " Animate based on spring physics.\n\nYou'll need to provide both a stiffness and a dampness to this function.\n\n__Note:__ This will cause both `duration` and `easing` to be ignored as they are now controlled by the spring.\n\n     Style.animate\n      -- |> Style.spring Style.noWobble -- set using a UI preset\n         |> Style.spring\n                { stiffness = 400\n                , damping = 28\n                }\n         |> Style.to\n             [ Left (Style.to 0) Px\n             , Opacity (Style.to 1)\n             ]\n         |> Style.on model.style\n",
            "type": "Style.Spring.Presets.SpringProps -> Style.PreAction -> Style.PreAction"
          },
          {
            "name": "tick",
            "comment": " Step the animation\n",
            "type": "Float -> Style.Animation -> Style.Animation"
          },
          {
            "name": "to",
            "comment": " Animate to a statically specified style.\n\n",
            "type": "Style.PropertyHelpers.Style -> Style.PreAction -> Style.PreAction"
          },
          {
            "name": "update",
            "comment": " Update a style based on it's previous value.\n\n     Style.animate\n          |> Style.update\n              [ Cx ((+) 1)\n              , Cy ((+) 1)\n              , Color greyscale\n              ]\n          |> Style.on model.style\n\n",
            "type": "List Style.PropertyHelpers.Retarget -> Style.PreAction -> Style.PreAction"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Style.Spring.Presets",
        "comment": "\n\n@docs SpringProps, noWobble, gentle, wobbly, stiff\n\n",
        "aliases": [
          {
            "name": "SpringProps",
            "comment": " A type for spring properties, stiffness and damping.\n",
            "args": [],
            "type": "{ stiffness : Float, damping : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "gentle",
            "comment": " A spring preset.\n",
            "type": "Style.Spring.Presets.SpringProps"
          },
          {
            "name": "noWobble",
            "comment": " A spring preset.\n",
            "type": "Style.Spring.Presets.SpringProps"
          },
          {
            "name": "stiff",
            "comment": " A spring preset.\n",
            "type": "Style.Spring.Presets.SpringProps"
          },
          {
            "name": "wobbly",
            "comment": " A spring preset.\n",
            "type": "Style.Spring.Presets.SpringProps"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Style.Properties",
        "comment": "\nAll animatable properties.\n\n@docs Property\n\n@docs Length, Angle, DisplayMode\n\n@docs PathCommand\n\n@docs alignStartingPoint\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Angle",
            "comment": " Units representing angles.\n",
            "args": [],
            "cases": [
              [
                "Deg",
                []
              ],
              [
                "Grad",
                []
              ],
              [
                "Rad",
                []
              ],
              [
                "Turn",
                []
              ]
            ]
          },
          {
            "name": "DisplayMode",
            "comment": " A Display value used for the display property.\nA display mode is not animated but can be set using Html.Animation.set\n",
            "args": [],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Inline",
                []
              ],
              [
                "InlineBlock",
                []
              ],
              [
                "Block",
                []
              ],
              [
                "Flex",
                []
              ],
              [
                "InlineFlex",
                []
              ],
              [
                "ListItem",
                []
              ]
            ]
          },
          {
            "name": "Length",
            "comment": " Units representing length.\n",
            "args": [],
            "cases": [
              [
                "Px",
                []
              ],
              [
                "Percent",
                []
              ],
              [
                "Rem",
                []
              ],
              [
                "Em",
                []
              ],
              [
                "Ex",
                []
              ],
              [
                "Ch",
                []
              ],
              [
                "Vh",
                []
              ],
              [
                "Vw",
                []
              ],
              [
                "Vmin",
                []
              ],
              [
                "Vmax",
                []
              ],
              [
                "Mm",
                []
              ],
              [
                "Cm",
                []
              ],
              [
                "In",
                []
              ],
              [
                "Pt",
                []
              ],
              [
                "Pc",
                []
              ]
            ]
          },
          {
            "name": "PathCommand",
            "comment": " Describe a path.  To be used in conjunction with the D property for styling svg.\n\n`To` versions of the commands are absolute, while others are relative.\n\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Move",
                [
                  "a",
                  "a"
                ]
              ],
              [
                "MoveTo",
                [
                  "a",
                  "a"
                ]
              ],
              [
                "Line",
                [
                  "a",
                  "a"
                ]
              ],
              [
                "LineTo",
                [
                  "a",
                  "a"
                ]
              ],
              [
                "Horizontal",
                [
                  "a"
                ]
              ],
              [
                "HorizontalTo",
                [
                  "a"
                ]
              ],
              [
                "Vertical",
                [
                  "a"
                ]
              ],
              [
                "VerticalTo",
                [
                  "a"
                ]
              ],
              [
                "Curve",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "CurveTo",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "Quadratic",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "QuadraticTo",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "SmoothQuadratic",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "SmoothQuadraticTo",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "Smooth",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "SmoothTo",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "Arc",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "ArcTo",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "LargeArc",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "LargeArcTo",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "Close",
                []
              ]
            ]
          },
          {
            "name": "Property",
            "comment": " All currently animatable properties.\n",
            "args": [
              "a",
              "color"
            ],
            "cases": [
              [
                "Display",
                [
                  "Style.Properties.DisplayMode"
                ]
              ],
              [
                "Opacity",
                [
                  "a"
                ]
              ],
              [
                "Height",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Width",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Left",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Top",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Right",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Bottom",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MaxHeight",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MaxWidth",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MinHeight",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MinWidth",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Padding",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "PaddingLeft",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "PaddingRight",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "PaddingTop",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "PaddingBottom",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Margin",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MarginLeft",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MarginRight",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MarginTop",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "MarginBottom",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BorderWidth",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BorderRadius",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BorderTopLeftRadius",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BorderTopRightRadius",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BorderBottomLeftRadius",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BorderBottomRightRadius",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "LetterSpacing",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "LineHeight",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "BackgroundPosition",
                [
                  "a",
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Color",
                [
                  "color"
                ]
              ],
              [
                "BackgroundColor",
                [
                  "color"
                ]
              ],
              [
                "BorderColor",
                [
                  "color"
                ]
              ],
              [
                "TransformOrigin",
                [
                  "a",
                  "a",
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Matrix",
                [
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "Matrix3d",
                [
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "Translate",
                [
                  "a",
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Translate3d",
                [
                  "a",
                  "a",
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "TranslateX",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "TranslateY",
                [
                  "a",
                  "Style.Properties.Length"
                ]
              ],
              [
                "Scale",
                [
                  "a"
                ]
              ],
              [
                "Scale3d",
                [
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "ScaleX",
                [
                  "a"
                ]
              ],
              [
                "ScaleY",
                [
                  "a"
                ]
              ],
              [
                "ScaleZ",
                [
                  "a"
                ]
              ],
              [
                "Rotate",
                [
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "Rotate3d",
                [
                  "a",
                  "a",
                  "a",
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "RotateX",
                [
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "RotateY",
                [
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "Skew",
                [
                  "a",
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "SkewX",
                [
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "SkewY",
                [
                  "a",
                  "Style.Properties.Angle"
                ]
              ],
              [
                "Perspective",
                [
                  "a"
                ]
              ],
              [
                "X",
                [
                  "a"
                ]
              ],
              [
                "Y",
                [
                  "a"
                ]
              ],
              [
                "Cx",
                [
                  "a"
                ]
              ],
              [
                "Cy",
                [
                  "a"
                ]
              ],
              [
                "R",
                [
                  "a"
                ]
              ],
              [
                "Rx",
                [
                  "a"
                ]
              ],
              [
                "Ry",
                [
                  "a"
                ]
              ],
              [
                "D",
                [
                  "List (Style.Properties.PathCommand a)"
                ]
              ],
              [
                "Points",
                [
                  "List ( a, a )"
                ]
              ],
              [
                "Fill",
                [
                  "color"
                ]
              ],
              [
                "Stroke",
                [
                  "color"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "alignStartingPoint",
            "comment": " Given two lists of coordinates, rotate the list so that the lowest coordinate is first.\n\nThis is useful to align polygon coordinates so that they can morph smoothely into each other.\n",
            "type": "List ( Float, Float ) -> List ( Float, Float )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mgold/elm-animation",
    "version": "1.0.4",
    "docs": [
      {
        "name": "Animation",
        "comment": " A library for animating between two `Float` values. For example, animate a panel's width from 100px to 300px over 2\nseconds, or make a button spin and grow on hover. Everything is a pure function (no signals or tasks), so you can use it\neasily within your architecture. You can also inspect animations to determine if they are still running and for how\nlong, and even smoothly retarget a different destination midflight.\n\nThe library encapsulates a 3-stage animation pipeline:\n\n* **Timekeeping:** Creating and running an animation requires the current time, which is best obtained with\n    [`AnimationFrame.times`](http://package.elm-lang.org/packages/elm-lang/animation-frame/latest/AnimationFrame#times).\n    You can also specify the duration of animation, and delay it prior to starting.\n\n* **Easing:** An easing function makes an animation come alive with acceleration or even elasticity. You can find all\n    kinds of crazy easing functions in [this library](http://package.elm-lang.org/packages/elm-community/easing-functions/latest/Ease).\n\n* **Interpolation:** It wouldn't be very useful is all animations went from 0 to 1 (the default), would it? You can\n    specify values to animate `from` and `to`. Furthermore, you can set the average speed (distance between these two\n    values per milisecond) instead of a duration.\n\nOnce you have your value at the current time, you can render it to any frontend you choose: Collage, Element, Html,\n[Turtles](http://package.elm-lang.org/packages/mgold/elm-turtle-graphics/latest)...\n\n## Basic Usage\n`animation` creates an animation starting at the given time (usually the current time). `animate` takes the current time\nand an animation, and produces the current value. Animations go through three phases (not related to the three stages of\nrendering): they are scheduled, they run, and then they are done.\n\n````elm\nimport Animation exposing (..)\nimport Time exposing (second)\n\nmyAnim = animation 0 |> from 100 |> to 300 |> duration (4*second) |> delay (1*second)\nList.map (\\t -> animate (t*second) myAnim) [0..6]\n-- [100, 100, 129.29, 200, 270.71, 300, 300]\n````\n\nNotice that the value remains constant during the delay and after the animation is done. You can also use `static` to\ncreate animations of constant value. By using these two degenerate cases, you ought to be able to keep animations in\nyour model without worrying about when they aren't actually animating.\n\n# Create\n@docs animation, static\n\n# Run\n@docs animate\n\n# Modify\n## Settings\nYou may set an animation's duration or speed but not both, since one determines the other.\n@docs duration, speed, delay, ease, from, to\n\n## Interruptions\n@docs undo, retarget\n\n# Inspect\n## Equality\n@docs equals\n\n## Lifecycle\n@docs isScheduled, isRunning, isDone\n\n## Physics\n@docs timeElapsed, timeRemaining, velocity\n\n## Settings\n@docs getStart, getDuration, getSpeed, getDelay, getEase, getFrom, getTo\n\n# The Animation Type\n@docs Animation\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Animation",
            "comment": " An Animation is an opaque type that represents a time-varying number (floating point value).\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "animate",
            "comment": " Produce the value of an animation at a given time.\n",
            "type": "Time.Time -> Animation.Animation -> Float"
          },
          {
            "name": "animation",
            "comment": " Create an animation that begins at the given time. By default, animations have no delay, last 750ms, and interpolate\nbetween 0 and 1 with a sinusoidal easing function. All of these can be changed.\n",
            "type": "Time.Time -> Animation.Animation"
          },
          {
            "name": "delay",
            "comment": " Set the delay of an animation to the time specified. An animation will not start until after the delay. The default\ndelay is 0. Note that the `Time` argument is _not_ the current running time but the delay to be set.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "duration",
            "comment": " Set the duration of an animation to the time specified. Note that the `Time` argument is _not_ the current running\ntime but the duration to be set.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "ease",
            "comment": " Set the easing function of an animation. It is expected that `f 0 == 0` and `f 1 == 1`. The default is a sinusoidal\nin-out.\n",
            "type": "(Float -> Float) -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "equals",
            "comment": " Equality on animations. Compared to `(==)` (which should not be used), this\nfunction handles the conversion of speed and duration, and start and delay. It\nalso samples the easing functions, which may produce false positives (but\nusually not in practice).\n\n    -- These are True\n    animation 0 `equals` animation 0\n    (animation 0 |> delay 10) `equals` animation 10\n    (animation 0 |> duration 1000) `equals` (animation 0 |> speed 0.001)\n\n    -- These are False\n    static 0 `equals` animation 0\n    (animation 0 |> from -1) `equals` animation 0\n    (animation 0 |> ease identity) `equals` animation 0\n",
            "type": "Animation.Animation -> Animation.Animation -> Bool"
          },
          {
            "name": "from",
            "comment": " Set the initial value of an animation. The default is 0.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "getDelay",
            "comment": " Get the delay of the animation.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getDuration",
            "comment": " Get the duration of the animation, not counting delay.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getEase",
            "comment": " Get the easing function of the animation.\n",
            "type": "Animation.Animation -> Float -> Float"
          },
          {
            "name": "getFrom",
            "comment": " Get the initial value of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "getSpeed",
            "comment": " Get the average speed of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "getStart",
            "comment": " Get the start time of the animation, not accounting for delay. For animations created with `animate`, this is the\nargument that was passed. For interrupted animations, this is when the interruption occured.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getTo",
            "comment": " Get the final value of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "isDone",
            "comment": " Determine if an animation is done, meaning that it has arrived at its final value. Static animations are always\ndone.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "isRunning",
            "comment": " Determine if an animation is running, meaning that it is currently changing value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "isScheduled",
            "comment": " Determine if an animation is scheduled, meaning that it has not yet changed value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "retarget",
            "comment": " Change the `to` value of a running animation, without an abrupt change in velocity. The easing function will be\nretained (but you can change it with `ease`). The animation will retain its average speed (but not necessarily\nduration). If you retarget multiple animations at once (e.g. x and y), you will need to sync their durations (perhaps to\nthe `timeRemaining` in the old animations).\n\nIf the retargeted animation is still scheduled, the `to` value is replaced. If it's already done, `from` becomes the\nold `to`, `to` and `start` are set to the values provided, and the delay is set to zero. If the old and new `to` values\nare the same, the animation is unchanged.\n",
            "type": "Time.Time -> Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "speed",
            "comment": " Set the _average_ speed of an animation. Speed is the rate at which the animation progresses between the `from` and\n`to` values per milisecond. Most easing functions will deviate from the average speed. You do not need to worry about\nthe sign. It is safe to alter the `from` and `to` values after setting speed.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "static",
            "comment": " Create a static animation that is always the given value.\n",
            "type": "Float -> Animation.Animation"
          },
          {
            "name": "timeElapsed",
            "comment": " Get the time elapsed since the animation started playing (after the end of delay). Will be zero for animations that\nare still scheduled, and is not bounded for animations that are already done.\n",
            "type": "Time.Time -> Animation.Animation -> Time.Time"
          },
          {
            "name": "timeRemaining",
            "comment": " Get the time that the animation has yet to play (or be delayed) before becoming done. Will be zero for animations\nthat are already done.\n",
            "type": "Time.Time -> Animation.Animation -> Time.Time"
          },
          {
            "name": "to",
            "comment": " Set the final value of an animation. The default is 1.\n\nFor animations that are already running, use `retarget`.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "undo",
            "comment": " Run an animation in reverse from its current state, beginning immediately (even if the animation was delayed or has\nbeen done for a while).\n\nUsually you don't want to undo an animation that has been retargeted; just retarget it again. Similarly, undoing an\nundone animation is frequently not what you want.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "velocity",
            "comment": " Get the _current_ velocity of the animation, aproximated by looking 10ms forwards and backwards (the central\ndifference). The velocity may be negative.\n",
            "type": "Time.Time -> Animation.Animation -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mgold/elm-date-format",
    "version": "1.1.4",
    "docs": [
      {
        "name": "Date.Format",
        "comment": " Format strings for dates.\n\n@docs format, formatISO8601\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Use a format string to format a date. See the\n[README](https://github.com/mgold/elm-date-format/blob/master/README.md) for a\nlist of accepted formatters.\n",
            "type": "String -> Date.Date -> String"
          },
          {
            "name": "formatISO8601",
            "comment": " Formats a UTC date acording to\n[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601). This is commonly used to\nsend dates to a server. For example: `2016-01-06T09:22:00Z`.\n",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mgold/elm-nonempty-list",
    "version": "2.0.1",
    "docs": [
      {
        "name": "List.Nonempty",
        "comment": " A list that cannot be empty. The head and tail can be accessed without Maybes. Most other list functions are\navailable.\n\n# Definition\n@docs Nonempty\n\n# Create\n@docs fromElement, fromList\n\n# Access\n@docs head, tail, toList, get, sample\n\n# Inspect\nNonempty lists support equality with the usual `(==)` operator (provided their contents also support equality).\n@docs isSingleton, length, member, all, any\n\n# Convert\n@docs cons, (:::), append, pop, reverse, concat\n\n# Swap\n@docs replaceHead, replaceTail, dropTail\n\n# Map\n@docs map, indexedMap, map2, andMap, concatMap\n\n# Filter\n@docs filter\n\n# Fold\nTo fold or scan from the right, reverse the list first.\n@docs foldl, foldl1, scanl, scanl1\n\n# Sort\n@docs sort, sortBy, sortWith\n\n# Deduplicate\nThe nonempty list's elements must support equality (e.g. not functions). Otherwise  you will get a runtime error.\n@docs dedup, uniq\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Nonempty",
            "comment": " The Nonempty type. If you have both a head and tail, you can construct a\nnonempty list directly. Otherwise use the helpers below instead.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Nonempty",
                [
                  "a",
                  "List a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": ":::",
            "comment": " Infix cons. Note that you cannot use this for pattern matching. Be sure to add `exposing ((:::))` to your import.\n\n    4 ::: Nonempty 3 [2,1] == Nonempty 4 [3,2,1]\n\nNote: the infix associativity and precedence are not set for this operator, because doing so can cause\n[conflicts](https://github.com/elm-lang/elm-compiler/issues/1096) that are hard to work around. In most cases this\nshouldn't matter.\n\n",
            "type": "a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "all",
            "comment": " Determine if all elements satisfy the predicate.\n",
            "type": "(a -> Bool) -> List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "andMap",
            "comment": " Map over an arbitrary number of nonempty lists.\n\n    map2 (,) xs ys == map (,) xs `andMap` ys\n    head (map (,,) xs `andMap` ys `andMap` zs) == (head xs, head ys, head zs)\n",
            "type": "List.Nonempty.Nonempty (a -> b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "any",
            "comment": " Determine if any elements satisfy the predicate.\n",
            "type": "(a -> Bool) -> List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "append",
            "comment": " Append two nonempty lists together. `(++)` is _not_ supported.\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "concat",
            "comment": " Flatten a nonempty list of nonempty lists into a single nonempty list.\n",
            "type": "List.Nonempty.Nonempty (List.Nonempty.Nonempty a) -> List.Nonempty.Nonempty a"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a nonempty list and flatten the resulting nonempty lists. If you're chaining, you can\ndefine `andThen = flip concatMap`.\n",
            "type": "(a -> List.Nonempty.Nonempty b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "cons",
            "comment": " Add another element as the head of the list, pushing the previous head to the tail.\n",
            "type": "a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "dedup",
            "comment": " Remove _adjacent_ duplicate elements from the nonempty list.\n\n    dedup (Nonempty 1 [2, 2, 1]) == Nonempty 1 [2, 1]\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "dropTail",
            "comment": " Replace the tail with the empty list while leaving the head alone.\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "filter",
            "comment": " Filter a nonempty list. If all values are filtered out, return the singleton list containing the default value\nprovided. If any value is retained, the default value is not used. If you want to deal with a Maybe instead, use\n`toList >> List.filter yourPredicate >> fromList`.\n\n    filter isEven 0 (Nonempty 7 [2, 5]) == fromElement 2\n    filter isEven 0 (Nonempty 7 []) == fromElement 0\n\n",
            "type": "(a -> Bool) -> a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "foldl",
            "comment": " Reduce a nonempty list from the left with a base case.\n\n    foldl (++) \"\" (Nonempty \"a\" [\"b\", \"c\"]) == \"cba\"\n",
            "type": "(a -> b -> b) -> b -> List.Nonempty.Nonempty a -> b"
          },
          {
            "name": "foldl1",
            "comment": " Reduce a nonempty list from the left _without_ a base case. As per Elm convention, the first argument is the current\nelement and the second argument is the accumulated value. The function is first invoked on the _second_ element, using\nthe first element as the accumulated value, except for singleton lists in which has the head is returned.\n\n    foldl1 (++) (Nonempty \"a\" [\"b\", \"c\"]) == \"cba\"\n    foldl1 (++) (fromElement \"a\") == \"a\"\n\n    findMe = 42\n    minimizeMe n = abs (n-findMe)\n    nearest = foldl1 (\\a b -> if minimizeMe a < minimizeMe b then a else b) (Nonempty 10 [20,30,40,50,60])\n    nearest == 40\n",
            "type": "(a -> a -> a) -> List.Nonempty.Nonempty a -> a"
          },
          {
            "name": "fromElement",
            "comment": " Create a singleton list with the given element.\n",
            "type": "a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "fromList",
            "comment": " Create a nonempty list from an ordinary list, failing on the empty list.\n",
            "type": "List a -> Maybe.Maybe (List.Nonempty.Nonempty a)"
          },
          {
            "name": "get",
            "comment": " Get the item at the specified index. The head has index 0. Indices are modulused by the length so out-of-range\nerrors can't happen. This means that negative indices are supported, e.g. -1 to get the last element.\n",
            "type": "Int -> List.Nonempty.Nonempty a -> a"
          },
          {
            "name": "head",
            "comment": " Return the head of the list.\n",
            "type": "List.Nonempty.Nonempty a -> a"
          },
          {
            "name": "indexedMap",
            "comment": " Same as `map` but the function is also applied to the index of each element (starting at zero).\n",
            "type": "(Int -> a -> b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "isSingleton",
            "comment": " Determine if the nonempty list has exactly one element.\n",
            "type": "List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "length",
            "comment": " Find the length of the nonempty list.\n",
            "type": "List.Nonempty.Nonempty a -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function over a nonempty list.\n",
            "type": "(a -> b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "map2",
            "comment": " Map a function over two nonempty lists.\n",
            "type": "(a -> b -> c) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b -> List.Nonempty.Nonempty c"
          },
          {
            "name": "member",
            "comment": " Determine if an element is present in the nonempty list.\n",
            "type": "a -> List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "pop",
            "comment": " Pop and discard the head, or do nothing for a singleton list. Useful if you\nwant to exhaust a list but hang on to the last item indefinitely.\n\n    pop (Nonempty 3 [2,1]) == Nonempty 2 [1]\n    pop (Nonempty 1 []) == Nonempty 1 []\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "replaceHead",
            "comment": " Exchange the head element while leaving the tail alone.\n",
            "type": "a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "replaceTail",
            "comment": " Exchange the tail for another while leaving the head alone.\n",
            "type": "List a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a nonempty list.\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "sample",
            "comment": " Create a random generator that returns a value of the nonempty list chosen uniformly at random.\n",
            "type": "List.Nonempty.Nonempty a -> Random.Generator a"
          },
          {
            "name": "scanl",
            "comment": " Like `foldl`, but keep each intermediate value. For example, scan addition to create the cumulative sum up to each\nelement. The head of the new nonempty list is always the base case provided, and the length increases by 1.\n\n    scanl (++) \"\" (Nonempty \"a\" [\"b\", \"c\"]) == Nonempty \"\" [\"a\",\"ba\",\"cba\"]\n",
            "type": "(a -> b -> b) -> b -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "scanl1",
            "comment": " Like `foldl1`, but keep each intermediate value. The head and length are not changed.\n\nThis example starts with the number of ways to roll exactly index _i_ on two six-sided dice (the probability density\nfunction), and turns it into the number of ways to roll at least _i_ (the cumulative density function).\n\n    dicePDF = Nonempty 0 [0,1,2,3,4,5,6,5,4,3,2,1]\n    diceCDF = scanl1 (+) dicePDF\n    diceCDF == Nonempty 0 [0,1,3,6,10,15,21,26,30,33,35,36]\n",
            "type": "(a -> a -> a) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "sort",
            "comment": " Sort a nonempty list of comparable things, lowest to highest.\n",
            "type": "List.Nonempty.Nonempty comparable -> List.Nonempty.Nonempty comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort a nonempty list of things by a derived property.\n",
            "type": "(a -> comparable) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "sortWith",
            "comment": " Sort a nonempty list of things by a custom comparison function.\n",
            "type": "(a -> a -> Basics.Order) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "tail",
            "comment": " Return the tail of the list.\n",
            "type": "List.Nonempty.Nonempty a -> List a"
          },
          {
            "name": "toList",
            "comment": " Convert to an ordinary list.\n",
            "type": "List.Nonempty.Nonempty a -> List a"
          },
          {
            "name": "uniq",
            "comment": " Remove _all_ duplicate elements from the nonempty list, with the remaining elements ordered by first occurrence.\n\n    uniq (Nonempty 1 [2, 2, 1]) == Nonempty 1 [2]\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "mgold/elm-random-pcg",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Random.Pcg.Interop",
        "comment": " Provides a function to create a PCG seed from a seed in the core library.\nThis is useful for library writers who need a splittable or most robust PRNG but\ndon't want to require client code to use the PCG implementation.\n\n```elm\nimport Random\nimport Random.Pcg\nimport Random.Pcg.Interop as Random.Pcg\n```\n\n@docs fission\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fission",
            "comment": " Use the core library's random seed to produce a PCG random seed.\n\nIt seems that the package website doesn't show modules in type annotations, so here it is in full:\n\n    fission : Random.Generator (Random.Pcg.Seed)\n\n",
            "type": "Random.Generator Random.Pcg.Seed"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Random.Pcg",
        "comment": " Generate psuedo-random numbers and values, by constructing\n[generators](#Generator) for them. There are a bunch of basic generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier generators\nwith functions like [`list`](#list) and [`map`](#map).\n\nYou run a `Generator` by calling the [`step`](#step) function, which\nalso takes a random [`Seed`](#Seed), and passes back a new seed. You should\nnever use the same seed twice because you will get the same result! If you need\nrandom values over time, you should store the most recent seed in your model.\nAlternatively, use [`generate`](#generate) to obtain random values from the Elm\nruntime.\n\nThis is an implementation of [PCG](http://www.pcg-random.org/) by M. E. O'Neil,\nand is not cryptographically secure.\n\n# Getting Started\n@docs initialSeed, step, generate\n\n# Basic Generators\n@docs Generator, bool, int, float, oneIn, sample\n\n# Combining Generators\n@docs pair, list, maybe, choice, choices, frequency\n\n# Custom Generators\n@docs constant, map, map2, map3, map4, map5, andMap, andThen, filter\n\n# Working With Seeds\n@docs Seed, independentSeed, fastForward, toJson, fromJson\n\n# Constants\n@docs minInt, maxInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Seed",
            "comment": " A `Seed` is the source of randomness in the whole system. It hides the\ncurrent state of the random number generator.\n\nGenerators, not seeds, are the primary data structure for generating random\nvalues. Generators are much easier to chain and combine than functions that take\nand return seeds. Creating and managing seeds should happen \"high up\" in your\nprogram.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Map over any number of generators.\n\n    randomPerson : Generator Person\n    randomPerson =\n      person `map` genFirstName\n          `andMap` genLastName\n          `andMap` genBirthday\n          `andMap` genPhoneNumber\n          `andMap` genAddress\n          `andMap` genEmail\n",
            "type": "Random.Pcg.Generator (a -> b) -> Random.Pcg.Generator a -> Random.Pcg.Generator b"
          },
          {
            "name": "andThen",
            "comment": " Chain random operations by providing a callback that accepts a\nrandomly-generated value. The random value can be used to drive more randomness.\n\nThe argument order matches `andThen`s from core, but requires the use of `flip`\nto match `map` or work with `|>` chains.\n\nThis example shows how we can use `andThen` to generate a list of random values\n*and* random length. Then we use `map` to apply a stateless function to that\nlist. Assume we already have `genName : Generator String` defined.\n\n    authors : Generator String\n    authors =\n      int 1 5 -- number of authors\n      |> (flip andThen) (\\i -> list i genName)\n      |> map (\\ns ->\n        case ns of\n          [n] ->\n            \"Author: \" ++ n\n          n::ns ->\n            \"Authors: \" ++ String.join \", \" ns ++ \" and \" ++ n\n          [] ->\n            \"This can't happen\"\n        )\n\nIf you find yourself calling `constant` in every branch of the callback, you can\nprobably use `map` instead.\n",
            "type": "Random.Pcg.Generator a -> (a -> Random.Pcg.Generator b) -> Random.Pcg.Generator b"
          },
          {
            "name": "bool",
            "comment": " Create a generator that produces boolean values with equal probability. This\nexample simulates flipping three coins and checking if they're all heads.\n\n    threeHeads : Generator Bool\n    threeHeads =\n      map3 (\\a b c -> a && b && c) bool bool bool\n",
            "type": "Random.Pcg.Generator Bool"
          },
          {
            "name": "choice",
            "comment": " Choose between two values with equal probability.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n      choice Heads Tails\n",
            "type": "a -> a -> Random.Pcg.Generator a"
          },
          {
            "name": "choices",
            "comment": " Create a generator that chooses a generator from a list of generators\nwith equal probability.\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List (Random.Pcg.Generator a) -> Random.Pcg.Generator a"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always produces the value provided. This is useful\nwhen creating complicated chained generators and you need to handle a simple\ncase. It's also useful for the base case of recursive generators.\n",
            "type": "a -> Random.Pcg.Generator a"
          },
          {
            "name": "fastForward",
            "comment": " Fast forward a seed the given number of steps, which may be negative (the\nseed will be \"rewound\"). This allows a single seed to serve as a random-access\nlookup table of random numbers. (To be sure no one else uses the seed, use\n`step independentSeed` to split off your own.)\n\n    diceRollTable : Int -> Int\n    diceRollTable i =\n      fastForward i mySeed |> step (int 1 6) |> fst\n",
            "type": "Int -> Random.Pcg.Seed -> Random.Pcg.Seed"
          },
          {
            "name": "filter",
            "comment": " Filter a generator so that all generated values satisfy the given predicate.\n\n    evens : Generator Int\n    evens =\n      filter (\\i -> i % 2 == 0) (int minInt maxInt)\n\n**Warning:** If the predicate is unsatisfiable, the generator will not terminate, your\napplication will crash with a stack overflow, and you will be sad. You should\nalso avoid predicates that are merely very difficult to satisfy.\n\n    badCrashingGenerator =\n      filter (\\_ -> False) anotherGenerator\n\n    likelyCrashingGenerator =\n      filter (\\i -> i % 2000 == 0) (int minInt maxInt)\n",
            "type": "(a -> Bool) -> Random.Pcg.Generator a -> Random.Pcg.Generator a"
          },
          {
            "name": "float",
            "comment": " Generate floats in a given range. The following example is a generator\nthat produces numbers between 0 and 1.\n\n    probability : Generator Float\n    probability =\n      float 0 1\n",
            "type": "Float -> Float -> Random.Pcg.Generator Float"
          },
          {
            "name": "frequency",
            "comment": " Create a generator that chooses a generator from a list of generators\nbased on the provided weight. The likelihood of a given generator being\nchosen is its weight divided by the total weight (which doesn't have to equal 1).\n\n**Warning:** Do not pass an empty list or your program will crash! In practice\nthis is usually not a problem since you pass a list literal.\n",
            "type": "List ( Float, Random.Pcg.Generator a ) -> Random.Pcg.Generator a"
          },
          {
            "name": "fromJson",
            "comment": " A JSON decoder that can recover seeds encoded using `toJson`. Alternatively,\npass an integer to create a seed using `initialSeed`.\n\n    Json.Decode.decodeValue fromJson (toJson mySeed) == Ok mySeed\n",
            "type": "Json.Decode.Decoder Random.Pcg.Seed"
          },
          {
            "name": "generate",
            "comment": " Create a Command that will generate random values according to the supplied\n`Generator`.\n\nThink of this function as an alternative to `step`, since they both provide a\nway to actually get the random values that you want. This function frees you\nfrom worrying about seeds entirely, but as a tradeoff, you get your random\nvalues asynchronously, in their own Message. Additionally, due to constraints on\nthird-party packages, it's possible that multiple commands sent at the same\nmoment will return the same values.\n\nYou can also think of this function as an alternative to `independentSeed`,\nsince they both allow you to use randomness in deeply nested components. In the\ncase of this function, it's through sending Commands up the chain that you have\nto set up anyway.\n",
            "type": "(a -> msg) -> Random.Pcg.Generator a -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "independentSeed",
            "comment": " A generator that produces a seed that is independent of any other seed in\nthe program. These seeds will generate their own unqiue sequences of random\nvalues. They are useful when you need an unknown amount of randomness *later*\nbut can request only a fixed amount of randomness *now*.\n\nLet's say you write a component that uses some randomness to initialize itself\nand then never needs randomness again. You can easily write a `Generator\nComponent` by mapping over the generators it needs. But if component requires\nrandomness after initialization, it should keep its own independent seed, which\nit can get by mapping over *this* generator.\n\n    type alias Component = { seed : Seed }\n\n    genComponent : Generator Component\n    genComponent = map Component independentSeed\n\nIf you have a lot of components, you can initialize them like so:\n\n    genComponents : List (Seed -> a) -> Generator (List a)\n    genComponents constructors =\n        list (List.length constructors) independentSeed\n            |> map (List.map2 (<|) constructors)\n\nThe independent seeds are extremely likely to be distinct for all practical\npurposes. However, it is not proven that there are no pathological cases.\n",
            "type": "Random.Pcg.Generator Random.Pcg.Seed"
          },
          {
            "name": "initialSeed",
            "comment": " Initialize the state of the random number generator. The input should be\na randomly chosen 32-bit integer. You can generate and copy random integers to\ncreate a reproducible psuedo-random generator.\n\n    $ node\n    > Math.floor(Math.random()*0xFFFFFFFF)\n    227852860\n\n    -- Elm\n    seed0 : Seed\n    seed0 = initialSeed 227852860\n\nAlternatively, you can generate the random integers on page load and pass them\nthrough a port. The program will be different every time.\n\n    -- Elm\n    port randomSeed : Int\n\n    seed0 : Seed\n    seed0 = initialSeed randomSeed\n\n    -- JS\n    Elm.ModuleName.fullscreen(\n      { randomSeed: Math.floor(Math.random()*0xFFFFFFFF) })\n\nEither way, you should initialize a random seed only once. After that, whenever\nyou use a seed, you'll get another one back.\n",
            "type": "Int -> Random.Pcg.Seed"
          },
          {
            "name": "int",
            "comment": " Generate 32-bit integers in a given range, inclusive.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n\n*Performance note:* This function will be ~1.5x faster if the range (i.e. `max - min + 1`) is a power of two. The\neffect will only be noticable if you are generating tens of thousands of random integers.\n\n",
            "type": "Int -> Int -> Random.Pcg.Generator Int"
          },
          {
            "name": "list",
            "comment": " Create a list of random values of a given length.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n",
            "type": "Int -> Random.Pcg.Generator a -> Random.Pcg.Generator (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the values produced by a generator using a stateless function as a\ncallback.\n\nThese examples show how to generate letters based on a basic integer generator.\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n",
            "type": "(a -> b) -> Random.Pcg.Generator a -> Random.Pcg.Generator b"
          },
          {
            "name": "map2",
            "comment": " Combine two generators. This is useful when you have a function with two\narguments that both need to be given random inputs.\n\n    pointInCircle : Float -> Generator (Float, Float)\n    pointInCircle radius =\n      let\n        r = float 0 radius\n        theta = map degrees (float 0 360)\n      in\n        map2 (curry fromPolar) r theta\n\n",
            "type": "(a -> b -> c) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c"
          },
          {
            "name": "map3",
            "comment": " Combine three generators. This could be used to produce random colors.\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (float 0 360)) (float 0 1) (float 0 1)\n",
            "type": "(a -> b -> c -> d) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c -> Random.Pcg.Generator d"
          },
          {
            "name": "map4",
            "comment": " Combine four generators. This could be used to produce random transparent\ncolors.\n\n    rgba : Generator Color.Color\n    rgba =\n      map4 Color.rgba (int 0 255) (int 0 255) (int 0 255) (float 0 1)\n",
            "type": "(a -> b -> c -> d -> e) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c -> Random.Pcg.Generator d -> Random.Pcg.Generator e"
          },
          {
            "name": "map5",
            "comment": " Combine five generators.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator c -> Random.Pcg.Generator d -> Random.Pcg.Generator e -> Random.Pcg.Generator f"
          },
          {
            "name": "maxInt",
            "comment": " The maximum value for randomly generated 32-bit ints.\n",
            "type": "Int"
          },
          {
            "name": "maybe",
            "comment": " Produce `Just` a value on `True`, and `Nothing` on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.Pcg.Generator Bool -> Random.Pcg.Generator a -> Random.Pcg.Generator (Maybe.Maybe a)"
          },
          {
            "name": "minInt",
            "comment": " The minimum value for randomly generated 32-bit ints.\n",
            "type": "Int"
          },
          {
            "name": "oneIn",
            "comment": " Produce `True` one-in-n times on average.\n\nDo not pass a value less then one to this function.\n\n    flippedHeads = oneIn 2\n    rolled6 = oneIn 6\n    criticalHit = oneIn 20\n",
            "type": "Int -> Random.Pcg.Generator Bool"
          },
          {
            "name": "pair",
            "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n",
            "type": "Random.Pcg.Generator a -> Random.Pcg.Generator b -> Random.Pcg.Generator ( a, b )"
          },
          {
            "name": "sample",
            "comment": " Given a list, choose an element uniformly at random. `Nothing` is only\nproduced if the list is empty.\n\n    type Direction = North | South | East | West\n\n    direction : Generator Direction\n    direction =\n      sample [North, South, East, West]\n        |> map (Maybe.withDefault North)\n\n",
            "type": "List a -> Random.Pcg.Generator (Maybe.Maybe a)"
          },
          {
            "name": "step",
            "comment": " Generate a random value as specified by a given `Generator`, using a `Seed`\nand returning a new one.\n\nIn the following example, we are trying to generate numbers between 0 and 100\nwith the `int 0 100` generator. Each time we call `generate` we need to provide\na seed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\n    (x, seed1) = step (int 0 100) seed0\n    (y, seed2) = step (int 0 100) seed1\n    (z, seed3) = step (int 0 100) seed2\n    [x, y, z] -- [85, 0, 38]\n\nNotice that we use different seeds on each line. This is important! If you reuse\nthe same seed, you get the same results.\n\n    (x, _) = step (int 0 100) seed0\n    (y, _) = step (int 0 100) seed0\n    (z, _) = step (int 0 100) seed0\n    [x,y,z] -- [85, 85, 85]\n\nAs you can see, threading seeds through many calls to `step` is tedious and\nerror-prone. That's why this library includes many functions to build more\ncomplicated generators, allowing you to call `step` only a small number of\ntimes.\n\nOur example is best written as:\n\n    (xs, newSeed) = step (list 3 <| int 0 100) seed0\n    xs -- [85, 0, 38]\n\n",
            "type": "Random.Pcg.Generator a -> Random.Pcg.Seed -> ( a, Random.Pcg.Seed )"
          },
          {
            "name": "toJson",
            "comment": " Serialize a seed as a [JSON\nvalue](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode#Value)\nto be sent out a port, stored in local storage, and so on. The seed can be\nrecovered using `fromJson`.\n\nDo not inspect or change the resulting JSON value.\n",
            "type": "Random.Pcg.Seed -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "mukeshsoni/elm-rope",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Rope",
        "comment": "\nThis module implements the rope data structure which is used to store and manipulate large strings.\nIt's more performant and memory efficient for operations like inserting a substring into a string,\nconcatenating two strings etc.\n\n# Definition\n@docs Rope\n\n# Common Helpers\n@docs build, buildWithMaxLeafCapacity, concat, getSize, toString, atIndex, getCharAt, split, insert, delete, substr\n",
        "aliases": [],
        "types": [
          {
            "name": "Rope",
            "comment": "\nRope type is used to store strings of arbitrary length. It's implemented as a\nbinary tree. The strings themselves are stored in the leaves of the tree.\nThe intermediary nodes store weight, which help navigating the tree when trying to\nsplit the tree or perform other operations like insert another string in between or pull out a substring\nfrom the string\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "atIndex",
            "comment": "\nReturns the character at a given index in the string encoded in the rope. Returns `Nothing`, if the index is unreachable.\n",
            "type": "Rope.Rope -> Int -> Maybe.Maybe Char"
          },
          {
            "name": "build",
            "comment": "\nBuild a rope, give a string. Takes `maxLeafNodeCapacity` as 10 (max length of a string stored in leaf node).\n",
            "type": "String -> Rope.Rope"
          },
          {
            "name": "buildWithMaxLeafCapacity",
            "comment": "\nLike `build`, but user can specify the max capacity of leaf node.\n",
            "type": "Int -> String -> Rope.Rope"
          },
          {
            "name": "concat",
            "comment": "Concatenate two ropes into a single rope.",
            "type": "Rope.Rope -> Rope.Rope -> Rope.Rope"
          },
          {
            "name": "delete",
            "comment": "\ndeletes a substring from the rope given a startIndex and the length of substring to be deleted.\nE.g. assume r is a Rope which has the string `I blamah you`, then `Rope.delete 3 3 r` will delete\n\"lam\" from the rope and return another rope which contains `i bah you`\n",
            "type": "Int -> Int -> Rope.Rope -> Rope.Rope"
          },
          {
            "name": "getCharAt",
            "comment": "Get character at ith position in the string. If ith position doesnt' exist, return Nothing",
            "type": "String -> Int -> Maybe.Maybe Char"
          },
          {
            "name": "getSize",
            "comment": "Returns the length of the string contained in the rope.",
            "type": "Rope.Rope -> Int"
          },
          {
            "name": "insert",
            "comment": "\ninserts a string in the rope at the given index\n",
            "type": "Int -> String -> Rope.Rope -> Rope.Rope"
          },
          {
            "name": "split",
            "comment": "\nSplits the rope at the given index into two ropes. Split forms the basis of insertion operation.\n",
            "type": "Int -> Rope.Rope -> ( Rope.Rope, Rope.Rope )"
          },
          {
            "name": "substr",
            "comment": "\nfinds substring from index i for length j\n",
            "type": "Int -> Int -> Rope.Rope -> String"
          },
          {
            "name": "toString",
            "comment": "\nReturns the string which the rope has encoded.\n",
            "type": "Rope.Rope -> String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "ndr-qef/microkanren.elm",
    "version": "1.0.1",
    "docs": [
      {
        "name": "MicroKanren.Operators",
        "comment": " Infix operators for μKanren\n\n@docs (++), (>>=), (===), (≡)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "++",
            "comment": " Infix alias of `mplus`. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Stream a -> MicroKanren.Stream a"
          },
          {
            "name": "===",
            "comment": " Infix alias of `identical`. ",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Goal a"
          },
          {
            "name": ">>=",
            "comment": " Infix alias of `bind`. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Goal a -> MicroKanren.Stream a"
          },
          {
            "name": "≡",
            "comment": " Unicode alias of `identical`. ",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Goal a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "MicroKanren",
        "comment": " μKanren provides a minimal, independent core for relational programming in Elm,\nas described by Hemann and Friedmann in [µKanren: A Minimal Functional Core\nfor Relational Programming](http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf).\n\nThis module only provides a barebones typed foundation upon which it is possible\nto build larger languages in the [miniKanren family](http://www.minikanren.org),\nand lacks much of the convenience user-facing libraries rightfully require.\n\n## Terms of a μKanren Program\n@docs Var, Term, Substitution\n\n### Traversing and Manipulating Substitutions\n@docs walk, extend, unify\n\n## Creating and Manipulating Streams\n@docs State\n@docs Stream, mzero\n@docs Goal, unit\n@docs mplus, bind\n\n## Goal Constructors\n@docs callFresh, identical, conjoin, disjoin\n",
        "aliases": [
          {
            "name": "Goal",
            "comment": " A goal to be pursued within the received state.\nA successful goal returns a non-empty stream, containing the states which satisfied it. ",
            "args": [
              "a"
            ],
            "type": "MicroKanren.State a -> MicroKanren.Stream a"
          },
          {
            "name": "State",
            "comment": " A state encapsulates the substitution `s`, which encompasses current variable-term bindings,\nand the counter `c`, which represents the index of the next unbound (“fresh”) logic variable. ",
            "args": [
              "a"
            ],
            "type": "{ s : MicroKanren.Substitution a, c : MicroKanren.Var }"
          },
          {
            "name": "Substitution",
            "comment": " A dictionary of variable-term bindings. ",
            "args": [
              "a"
            ],
            "type": "Dict.Dict MicroKanren.Var (MicroKanren.Term a)"
          },
          {
            "name": "Var",
            "comment": " The `Var` type is an index (or counter),\nused to track the results of logic operations. ",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [
          {
            "name": "Stream",
            "comment": " A potentially infinite sequence of states.\n\nA stream may be:\n  - empty;\n  - mature, when the head is a state that has already been computed;\n  - immature, when the head is a thunk containing a delayed computation.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Empty",
                []
              ],
              [
                "Immature",
                [
                  "() -> MicroKanren.Stream a"
                ]
              ],
              [
                "Mature",
                [
                  "MicroKanren.State a",
                  "MicroKanren.Stream a"
                ]
              ]
            ]
          },
          {
            "name": "Term",
            "comment": " The terms on which a μKanren program operates.\n\nThree variants are established:\n  - `LVar`, the identifier of a logic variable; effectively a term-level `Var`\n    acting as a reference.\n  - `LVal`, which wraps some value of type `a` for use by logic operations.\n  - `Pair`, two terms of the same type `a`.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "LVar",
                [
                  "MicroKanren.Var"
                ]
              ],
              [
                "LVal",
                [
                  "a"
                ]
              ],
              [
                "Pair",
                [
                  "MicroKanren.Term a",
                  "MicroKanren.Term a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "bind",
            "comment": " Invoke a goal on each element of the given stream,\nand interleave the resulting streams. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Goal a -> MicroKanren.Stream a"
          },
          {
            "name": "callFresh",
            "comment": " Create a goal which introduces a new logic variable for use by another goal. ",
            "type": "(MicroKanren.Term a -> MicroKanren.Goal a) -> MicroKanren.Goal a"
          },
          {
            "name": "conjoin",
            "comment": " Create a goal which succeeds if the second goal is achievable within the stream\ngenerated by the first goal.\n\nEffectively a binary conjunction of goals. ",
            "type": "MicroKanren.Goal a -> MicroKanren.Goal a -> MicroKanren.Goal a"
          },
          {
            "name": "disjoin",
            "comment": " Create a goal which succeeds if either of the received goals are achieved.\n\nEffectively a binary disjunction of goals. ",
            "type": "MicroKanren.Goal a -> MicroKanren.Goal a -> MicroKanren.Goal a"
          },
          {
            "name": "extend",
            "comment": " Extend the substitution with a new variable-term binding. ",
            "type": "MicroKanren.Var -> MicroKanren.Term a -> MicroKanren.Substitution a -> MicroKanren.Substitution a"
          },
          {
            "name": "identical",
            "comment": " Create a goal which succeeds if the two terms unify in the received state. ",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Goal a"
          },
          {
            "name": "mplus",
            "comment": " Merge two streams by interleaving their states, so that infinite streams\nwill not prevent finite streams from yielding their state. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Stream a -> MicroKanren.Stream a"
          },
          {
            "name": "mzero",
            "comment": " An alias for the empty stream. ",
            "type": "MicroKanren.Stream a"
          },
          {
            "name": "unify",
            "comment": " Unify two terms in the received substitution `s`,\npotentially extending it.\n\n- `LVar` variables unify when they refer to the same index,\n  i.e. they are the same variable. `s` is returned unchanged..\n- `LVal` values unify when they are equivalent under Elm's native `(==)`.\n  `s` is returned unchanged.\n- Pairs unify when their terms unify pairwise.\n- Finally, an `LVar` variable and an `LVal` value unify under an extended substitution `s'`,\n  where they form a new binding.\n\nIf unification fails, `Nothing` is returned.\n",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Substitution a -> Maybe.Maybe (MicroKanren.Substitution a)"
          },
          {
            "name": "unit",
            "comment": " The trivial goal, which lifts the state into a mature stream\nwhose only element is that state. ",
            "type": "MicroKanren.Goal a"
          },
          {
            "name": "walk",
            "comment": " Given a `LVar`, traverse the substitution and return its value.\nIf the given term cannot be found, or is not a variable, the term itself is returned. ",
            "type": "MicroKanren.Term a -> MicroKanren.Substitution a -> MicroKanren.Term a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "newlandsvalley/elm-comidi",
    "version": "2.1.0",
    "docs": [
      {
        "name": "CoMidi",
        "comment": "  Library for parsing MIDI file contents using parser combinators,\n\n# Definition\n\n# Functions\n@docs normalise, parse, translateRunningStatus\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "normalise",
            "comment": " normalise the input before we parse by masking off all but the least significant 8 bits ",
            "type": "String -> String"
          },
          {
            "name": "parse",
            "comment": " entry point - Parse a normalised MIDI file image ",
            "type": "String -> Result.Result String MidiTypes.MidiRecording"
          },
          {
            "name": "translateRunningStatus",
            "comment": " translate the Running Status messages in each track to the expanded form (NoteOn/NoteOff etc) ",
            "type": "Result.Result String MidiTypes.MidiRecording -> Result.Result String MidiTypes.MidiRecording"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "MidiTypes",
        "comment": "  Type Definition of a MIDI recording\n\n# Definition\n\n# Data Types\n@docs Header, Track, MidiEvent, MidiMessage,  MidiRecording\n\n",
        "aliases": [
          {
            "name": "Header",
            "comment": " Midi Header ",
            "args": [],
            "type": "{ formatType : Int, trackCount : Int, ticksPerBeat : Int }"
          },
          {
            "name": "MidiMessage",
            "comment": " Midi Message ",
            "args": [],
            "type": "( MidiTypes.Ticks, MidiTypes.MidiEvent )"
          },
          {
            "name": "MidiRecording",
            "comment": " Midi Recording ",
            "args": [],
            "type": "( MidiTypes.Header, List MidiTypes.Track )"
          },
          {
            "name": "Track",
            "comment": " Midi Track ",
            "args": [],
            "type": "List MidiTypes.MidiMessage"
          }
        ],
        "types": [
          {
            "name": "MidiEvent",
            "comment": " Midi Event ",
            "args": [],
            "cases": [
              [
                "SequenceNumber",
                [
                  "Int"
                ]
              ],
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "Copyright",
                [
                  "String"
                ]
              ],
              [
                "TrackName",
                [
                  "String"
                ]
              ],
              [
                "InstrumentName",
                [
                  "String"
                ]
              ],
              [
                "Lyrics",
                [
                  "String"
                ]
              ],
              [
                "Marker",
                [
                  "String"
                ]
              ],
              [
                "CuePoint",
                [
                  "String"
                ]
              ],
              [
                "ChannelPrefix",
                [
                  "Int"
                ]
              ],
              [
                "Tempo",
                [
                  "Int"
                ]
              ],
              [
                "SMPTEOffset",
                [
                  "Int",
                  "Int",
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "TimeSignature",
                [
                  "Int",
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "KeySignature",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "SequencerSpecific",
                [
                  "String"
                ]
              ],
              [
                "SysEx",
                [
                  "String"
                ]
              ],
              [
                "Unspecified",
                [
                  "Int",
                  "List Int"
                ]
              ],
              [
                "NoteOn",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "NoteOff",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "NoteAfterTouch",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "ControlChange",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "ProgramChange",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "ChannelAfterTouch",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "PitchBend",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "RunningStatus",
                [
                  "Int",
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "noahzgordon/elm-jsonapi",
    "version": "2.0.1",
    "docs": [
      {
        "name": "JsonApi.Decode",
        "comment": " Library for decoding JSONAPI-compliant payloads\n\n@docs document, errors\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "document",
            "comment": " Decode a JSONAPI-compliant payload.\n",
            "type": "Json.Decode.Decoder JsonApi.Data.Document"
          },
          {
            "name": "errors",
            "comment": " Decode the errors returned from a JSON API-compliant server.\n",
            "type": "Json.Decode.Decoder (List JsonApi.ErrorObject)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "JsonApi.Resources",
        "comment": " Helper functions for working with a single JsonApi Resource\n\n# Common Helpers\n@docs id, attributes, attribute, links, relatedResource, relatedResourceCollection, meta, relatedLinks, relatedMeta\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "attribute",
            "comment": " Serialize a single attributes of a Resource. You must provide the string key of the attribute\n    and a Json Decoder to convert the attribute into a type that you define.\n",
            "type": "String -> Json.Decode.Decoder a -> JsonApi.Data.Resource -> Result.Result String a"
          },
          {
            "name": "attributes",
            "comment": " Serialize the attributes of a Resource. Because the attributes are unstructured,\n    you must provide a Json Decoder to convert them into a type that you define.\n",
            "type": "Json.Decode.Decoder a -> JsonApi.Data.Resource -> Result.Result String a"
          },
          {
            "name": "id",
            "comment": " Get the string ID of a Resource\n",
            "type": "JsonApi.Data.Resource -> String"
          },
          {
            "name": "links",
            "comment": " Pull the attributes off of a Resource.\n",
            "type": "JsonApi.Data.Resource -> JsonApi.Data.Links"
          },
          {
            "name": "meta",
            "comment": " Pull the meta value off of a Resource.\n",
            "type": "JsonApi.Data.Resource -> JsonApi.Data.Meta"
          },
          {
            "name": "relatedLinks",
            "comment": " Retreive the links from a relationship.\n    Will return an Err if the relationship does not exist.\n",
            "type": "String -> JsonApi.Data.Resource -> Result.Result String JsonApi.Data.Links"
          },
          {
            "name": "relatedMeta",
            "comment": " Retreive the meta information from a relationship.\n    Will return an Err if the relationship does not exist.\n",
            "type": "String -> JsonApi.Data.Resource -> Result.Result String JsonApi.Data.Meta"
          },
          {
            "name": "relatedResource",
            "comment": " Find a related resource.\n    Will return an Err if a resource collection is found.\n",
            "type": "String -> JsonApi.Data.Resource -> Result.Result String JsonApi.Data.Resource"
          },
          {
            "name": "relatedResourceCollection",
            "comment": " Find a related collection of resources.\n    Will return an Err if a single resource is found.\n",
            "type": "String -> JsonApi.Data.Resource -> Result.Result String (List JsonApi.Data.Resource)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "JsonApi.Documents",
        "comment": " Helper functions for working with a full JsonApi Document\n\n# Common Helpers\n@docs links, jsonapi, primaryResource, primaryResourceCollection, meta\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "jsonapi",
            "comment": " Fetch information from the top-level 'jsonapi' object\n",
            "type": "JsonApi.Data.Document -> Maybe.Maybe JsonApi.Data.JsonApiObject"
          },
          {
            "name": "links",
            "comment": " Fetch the top-level links object from the document.\n",
            "type": "JsonApi.Data.Document -> JsonApi.Data.Links"
          },
          {
            "name": "meta",
            "comment": " Fetch the top-level meta object from the document.\n",
            "type": "JsonApi.Data.Document -> JsonApi.Data.Meta"
          },
          {
            "name": "primaryResource",
            "comment": " Retrieve the primary resource from a decoded Document.\n    This function assumes a singular primary resource.\n",
            "type": "JsonApi.Data.Document -> Result.Result String JsonApi.Data.Resource"
          },
          {
            "name": "primaryResourceCollection",
            "comment": " Retrieve the primary resource from a decoded Document.\n    This function assumes a singular primary resource.\n",
            "type": "JsonApi.Data.Document -> Result.Result String (List JsonApi.Data.Resource)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "JsonApi",
        "comment": " A library for processing and working with JSON API payloads.\n\n# Generic Data Types\n@docs Document, Resource, Links, Meta, ErrorObject\n\n",
        "aliases": [
          {
            "name": "Document",
            "comment": " Data type representing the entire JsonApi document.\n",
            "args": [],
            "type": "JsonApi.Data.Document"
          },
          {
            "name": "ErrorObject",
            "comment": " Data type describing the types of problems that can be encountered when processing a JSON API payload.\n\n",
            "args": [],
            "type": "{ id : Maybe.Maybe String , links : Maybe.Maybe JsonApi.Data.ErrorLinks , status : Maybe.Maybe String , code : Maybe.Maybe String , title : Maybe.Maybe String , detail : Maybe.Maybe String , source : Maybe.Maybe JsonApi.Data.Source , meta : JsonApi.Meta }"
          },
          {
            "name": "Links",
            "comment": " Data type representing a JsonApi links object.\n    See: jsonapi.org/format/#document-links\n",
            "args": [],
            "type": "JsonApi.Data.Links"
          },
          {
            "name": "Meta",
            "comment": " Data type representing a JsonApi meta object. Alias for Json.Encode.Value.\n    See: jsonapi.org/format/#document-meta\n",
            "args": [],
            "type": "JsonApi.Data.Meta"
          },
          {
            "name": "Resource",
            "comment": " Data type representing a single JsonApi resource.\n",
            "args": [],
            "type": "JsonApi.Data.Resource"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "nphollon/collision",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Collision",
        "comment": " Detect collisions between rigid three-dimensional objects. The process goes like this:\n\n1. Start with a set of triangular faces that describe the shape of an object.\n\n2. Use `create` to convert the list of faces into a `Bounds` value. Creating the bounds can be time-consuming, so you will want to do this before you start the time loop.\n\n3. If you want to create your bounds ahead of time, you can `encode` them to JSON and `decode` them later.\n\n4. Once your simulation/game is running, test for collisions using `collide`.\n\nThis module will not work for 2D objects.\n\n# Geometry\n@docs Vector, vector, Quaternion, quaternion, axisAngleRotation, Face, face\n\n# Creating Bounds\n@docs Bounds, create, empty\n\n# Checking Collisions\n@docs Body, collide\n\n# Working with JSON\n@docs encode, decode\n",
        "aliases": [
          {
            "name": "Body",
            "comment": " An object that is positioned and oriented in three-dimensional space. The bounds of the object are given in the body's reference frame. Before testing for a collision, we use the position and orientation to move the bounds into the world's reference frame.\n\nThis way, we can move our objects through the world, but we don't have to re-compute the bounds (as long as the object does not change shape).\n",
            "args": [
              "a"
            ],
            "type": "{ a | position : Collision.Vector, orientation : Collision.Quaternion, bounds : Collision.Bounds }"
          },
          {
            "name": "Bounds",
            "comment": " The boundary data for an object, stored as an OBBTree.\n",
            "args": [],
            "type": "OBBTree.OBBTree"
          },
          {
            "name": "Face",
            "comment": " A triangle. The surface of your colliding objects is described by a collection of triangular faces.\n",
            "args": [],
            "type": "Face.Face"
          },
          {
            "name": "Quaternion",
            "comment": " Stores a three-dimensional rotation.\n",
            "args": [],
            "type": "Quaternion.Quaternion"
          },
          {
            "name": "Vector",
            "comment": " Stores a three-dimensional position.\n",
            "args": [],
            "type": "Vector.Vector"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "axisAngleRotation",
            "comment": " Given an axis to rotate around and an angle of rotation, create a quaternion.\n",
            "type": "Collision.Vector -> Float -> Collision.Quaternion"
          },
          {
            "name": "collide",
            "comment": " Determine whether two bodies collide.\n",
            "type": "Collision.Body b -> Collision.Body b' -> Bool"
          },
          {
            "name": "create",
            "comment": " Generate the bounding tree for an object. The list of faces defines the surface.\n\nThe overall time to build the OBBTree is O(n log^2 n), where n is the number of faces.\n",
            "type": "List Collision.Face -> Collision.Bounds"
          },
          {
            "name": "decode",
            "comment": " A JSON decoder for an OBBTree encoded with the above function.\n",
            "type": "Json.Decode.Decoder Collision.Bounds"
          },
          {
            "name": "empty",
            "comment": " Create an empty bounding tree. This will not collide with anything.\n",
            "type": "Collision.Bounds"
          },
          {
            "name": "encode",
            "comment": " Encode an OBBTree as JSON.\n",
            "type": "Collision.Bounds -> Json.Encode.Value"
          },
          {
            "name": "face",
            "comment": " Create a triangular face, given the positions of its three vertexes. The vertexes can be given in any order.\n",
            "type": "Collision.Vector -> Collision.Vector -> Collision.Vector -> Collision.Face"
          },
          {
            "name": "quaternion",
            "comment": " Create a quaternion from w, x, y, and z coordinates.\n",
            "type": "Float -> Float -> Float -> Float -> Collision.Quaternion"
          },
          {
            "name": "vector",
            "comment": " Create a vector from x, y, and z coordinates.\n",
            "type": "Float -> Float -> Float -> Collision.Vector"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ohanhi/keyboard-extra",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Keyboard.Extra",
        "comment": " Convenience helpers for working with keyboard inputs.\n\n# Helpers\n@docs isPressed, pressedDown\n\n# Directions\n@docs arrows, wasd, Direction, arrowsDirection, wasdDirection\n\n# Wiring\n@docs Model, Msg, subscriptions, init, update\n\n# Keyboard keys\n@docs Key\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The internal representation of `Keyboard.Extra`. Useful for type annotation.\n",
            "args": [],
            "type": "{ keysDown : Set.Set Keyboard.KeyCode }"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " Type representation of the arrows.\n",
            "args": [],
            "cases": [
              [
                "North",
                []
              ],
              [
                "NorthEast",
                []
              ],
              [
                "East",
                []
              ],
              [
                "SouthEast",
                []
              ],
              [
                "South",
                []
              ],
              [
                "SouthWest",
                []
              ],
              [
                "West",
                []
              ],
              [
                "NorthWest",
                []
              ],
              [
                "NoDirection",
                []
              ]
            ]
          },
          {
            "name": "Key",
            "comment": " These are all the keys that have names in `Keyboard.Extra`.\n",
            "args": [],
            "cases": [
              [
                "Cancel",
                []
              ],
              [
                "Help",
                []
              ],
              [
                "BackSpace",
                []
              ],
              [
                "Tab",
                []
              ],
              [
                "Clear",
                []
              ],
              [
                "Enter",
                []
              ],
              [
                "Shift",
                []
              ],
              [
                "Control",
                []
              ],
              [
                "Alt",
                []
              ],
              [
                "Pause",
                []
              ],
              [
                "CapsLock",
                []
              ],
              [
                "Escape",
                []
              ],
              [
                "Convert",
                []
              ],
              [
                "NonConvert",
                []
              ],
              [
                "Accept",
                []
              ],
              [
                "ModeChange",
                []
              ],
              [
                "Space",
                []
              ],
              [
                "PageUp",
                []
              ],
              [
                "PageDown",
                []
              ],
              [
                "End",
                []
              ],
              [
                "Home",
                []
              ],
              [
                "ArrowLeft",
                []
              ],
              [
                "ArrowUp",
                []
              ],
              [
                "ArrowRight",
                []
              ],
              [
                "ArrowDown",
                []
              ],
              [
                "Select",
                []
              ],
              [
                "Print",
                []
              ],
              [
                "Execute",
                []
              ],
              [
                "PrintScreen",
                []
              ],
              [
                "Insert",
                []
              ],
              [
                "Delete",
                []
              ],
              [
                "Number0",
                []
              ],
              [
                "Number1",
                []
              ],
              [
                "Number2",
                []
              ],
              [
                "Number3",
                []
              ],
              [
                "Number4",
                []
              ],
              [
                "Number5",
                []
              ],
              [
                "Number6",
                []
              ],
              [
                "Number7",
                []
              ],
              [
                "Number8",
                []
              ],
              [
                "Number9",
                []
              ],
              [
                "Colon",
                []
              ],
              [
                "Semicolon",
                []
              ],
              [
                "LessThan",
                []
              ],
              [
                "Equals",
                []
              ],
              [
                "GreaterThan",
                []
              ],
              [
                "QuestionMark",
                []
              ],
              [
                "At",
                []
              ],
              [
                "CharA",
                []
              ],
              [
                "CharB",
                []
              ],
              [
                "CharC",
                []
              ],
              [
                "CharD",
                []
              ],
              [
                "CharE",
                []
              ],
              [
                "CharF",
                []
              ],
              [
                "CharG",
                []
              ],
              [
                "CharH",
                []
              ],
              [
                "CharI",
                []
              ],
              [
                "CharJ",
                []
              ],
              [
                "CharK",
                []
              ],
              [
                "CharL",
                []
              ],
              [
                "CharM",
                []
              ],
              [
                "CharN",
                []
              ],
              [
                "CharO",
                []
              ],
              [
                "CharP",
                []
              ],
              [
                "CharQ",
                []
              ],
              [
                "CharR",
                []
              ],
              [
                "CharS",
                []
              ],
              [
                "CharT",
                []
              ],
              [
                "CharU",
                []
              ],
              [
                "CharV",
                []
              ],
              [
                "CharW",
                []
              ],
              [
                "CharX",
                []
              ],
              [
                "CharY",
                []
              ],
              [
                "CharZ",
                []
              ],
              [
                "Super",
                []
              ],
              [
                "ContextMenu",
                []
              ],
              [
                "Sleep",
                []
              ],
              [
                "Numpad0",
                []
              ],
              [
                "Numpad1",
                []
              ],
              [
                "Numpad2",
                []
              ],
              [
                "Numpad3",
                []
              ],
              [
                "Numpad4",
                []
              ],
              [
                "Numpad5",
                []
              ],
              [
                "Numpad6",
                []
              ],
              [
                "Numpad7",
                []
              ],
              [
                "Numpad8",
                []
              ],
              [
                "Numpad9",
                []
              ],
              [
                "Multiply",
                []
              ],
              [
                "Add",
                []
              ],
              [
                "Separator",
                []
              ],
              [
                "Subtract",
                []
              ],
              [
                "Decimal",
                []
              ],
              [
                "Divide",
                []
              ],
              [
                "F1",
                []
              ],
              [
                "F2",
                []
              ],
              [
                "F3",
                []
              ],
              [
                "F4",
                []
              ],
              [
                "F5",
                []
              ],
              [
                "F6",
                []
              ],
              [
                "F7",
                []
              ],
              [
                "F8",
                []
              ],
              [
                "F9",
                []
              ],
              [
                "F10",
                []
              ],
              [
                "F11",
                []
              ],
              [
                "F12",
                []
              ],
              [
                "F13",
                []
              ],
              [
                "F14",
                []
              ],
              [
                "F15",
                []
              ],
              [
                "F16",
                []
              ],
              [
                "F17",
                []
              ],
              [
                "F18",
                []
              ],
              [
                "F19",
                []
              ],
              [
                "F20",
                []
              ],
              [
                "F21",
                []
              ],
              [
                "F22",
                []
              ],
              [
                "F23",
                []
              ],
              [
                "F24",
                []
              ],
              [
                "NumLock",
                []
              ],
              [
                "ScrollLock",
                []
              ],
              [
                "Circumflex",
                []
              ],
              [
                "Exclamation",
                []
              ],
              [
                "DoubleQuote",
                []
              ],
              [
                "Hash",
                []
              ],
              [
                "Dollar",
                []
              ],
              [
                "Percent",
                []
              ],
              [
                "Ampersand",
                []
              ],
              [
                "Underscore",
                []
              ],
              [
                "OpenParen",
                []
              ],
              [
                "CloseParen",
                []
              ],
              [
                "Asterisk",
                []
              ],
              [
                "Plus",
                []
              ],
              [
                "Pipe",
                []
              ],
              [
                "HyphenMinus",
                []
              ],
              [
                "OpenCurlyBracket",
                []
              ],
              [
                "CloseCurlyBracket",
                []
              ],
              [
                "Tilde",
                []
              ],
              [
                "VolumeMute",
                []
              ],
              [
                "VolumeDown",
                []
              ],
              [
                "VolumeUp",
                []
              ],
              [
                "Comma",
                []
              ],
              [
                "Minus",
                []
              ],
              [
                "Period",
                []
              ],
              [
                "Slash",
                []
              ],
              [
                "BackQuote",
                []
              ],
              [
                "OpenBracket",
                []
              ],
              [
                "BackSlash",
                []
              ],
              [
                "CloseBracket",
                []
              ],
              [
                "Quote",
                []
              ],
              [
                "Meta",
                []
              ],
              [
                "Altgr",
                []
              ],
              [
                "Other",
                []
              ]
            ]
          },
          {
            "name": "Msg",
            "comment": " The message type `Keyboard.Extra` uses.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "arrows",
            "comment": " Gives the arrow keys' pressed down state as follows:\n\n- `{ x = 0, y = 0 }` when pressing no arrows.\n- `{ x =-1, y = 0 }` when pressing the left arrow.\n- `{ x = 1, y = 1 }` when pressing the up and right arrows.\n- `{ x = 0, y =-1 }` when pressing the down, left, and right arrows (left and right cancel out).\n",
            "type": "Keyboard.Extra.Model -> Keyboard.Arrows.Arrows"
          },
          {
            "name": "arrowsDirection",
            "comment": " Gives the arrow keys' pressed down state as follows:\n\n- `None` when pressing no arrows.\n- `West` when pressing the left arrow.\n- `NorthEast` when pressing the up and right arrows.\n- `South` when pressing the down, left, and right arrows (left and right cancel out).\n",
            "type": "Keyboard.Extra.Model -> Keyboard.Extra.Direction"
          },
          {
            "name": "init",
            "comment": " Use this to initialize the component.\n",
            "type": "( Keyboard.Extra.Model, Platform.Cmd.Cmd Keyboard.Extra.Msg )"
          },
          {
            "name": "isPressed",
            "comment": " Check the pressed down state of any `Key`.\n",
            "type": "Keyboard.Extra.Key -> Keyboard.Extra.Model -> Bool"
          },
          {
            "name": "pressedDown",
            "comment": " Get the full list of keys that are currently pressed down.\n",
            "type": "Keyboard.Extra.Model -> List Keyboard.Extra.Key"
          },
          {
            "name": "subscriptions",
            "comment": " You will need to add this to your program's subscriptions.\n",
            "type": "Platform.Sub.Sub Keyboard.Extra.Msg"
          },
          {
            "name": "update",
            "comment": " You need to call this to have the component update.\n",
            "type": "Keyboard.Extra.Msg -> Keyboard.Extra.Model -> ( Keyboard.Extra.Model, Platform.Cmd.Cmd Keyboard.Extra.Msg )"
          },
          {
            "name": "wasd",
            "comment": " Similar to `arrows`, gives the W, A, S and D keys' pressed down state.\n\n- `{ x = 0, y = 0 }` when pressing none of W, A, S and D.\n- `{ x =-1, y = 0 }` when pressing A.\n- `{ x = 1, y = 1 }` when pressing W and D.\n- `{ x = 0, y =-1 }` when pressing A, S and D (A and D cancel out).\n",
            "type": "Keyboard.Extra.Model -> Keyboard.Arrows.Arrows"
          },
          {
            "name": "wasdDirection",
            "comment": " Similar to `arrows`, gives the W, A, S and D keys' pressed down state.\n\n- `None` when pressing none of W, A, S and D.\n- `West` when pressing A.\n- `NorthEast` when pressing W and D.\n- `South` when pressing A, S and D (A and D cancel out).\n",
            "type": "Keyboard.Extra.Model -> Keyboard.Extra.Direction"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "ondras/elm-irc",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Irc.App",
        "comment": " elm-irc client library, the Elm Architecture wrapper\n@docs program\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "program",
            "comment": " A specilized version of `Html.App.program` that features the extra `onIrc` callback ",
            "type": "{ cfg : Irc.Types.Config , init : model , onIrc : Irc.Types.Message -> model -> Irc.Commands.CommandSet a -> ( model, Platform.Cmd.Cmd (Irc.App.Msg x) ) , update : x -> model -> Irc.Commands.CommandSet a -> ( model, Platform.Cmd.Cmd (Irc.App.Msg x) ) , view : model -> Html.Html x } -> Platform.Program Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Irc",
        "comment": " elm-irc library, the core component\n@docs process, listen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "listen",
            "comment": " subscribe to IRC events ",
            "type": "Irc.Types.Config -> Platform.Sub.Sub Irc.Types.Message"
          },
          {
            "name": "process",
            "comment": " let the IRC client itself react to a particular message ",
            "type": "Irc.Types.Config -> Irc.Types.Message -> Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Irc.Commands",
        "comment": " elm-irc library, commands to be sent to the IRC server\n@docs commands, stringify, CommandSet\n",
        "aliases": [
          {
            "name": "CommandSet",
            "comment": " a set of commands for a particular server ",
            "args": [
              "msg"
            ],
            "type": "{ join : String -> Platform.Cmd.Cmd msg , nick : String -> Platform.Cmd.Cmd msg , raw : String -> List String -> Platform.Cmd.Cmd msg , kick : String -> String -> Maybe.Maybe String -> Platform.Cmd.Cmd msg , register : Irc.Types.User -> Platform.Cmd.Cmd msg , query : String -> String -> Platform.Cmd.Cmd msg , message : String -> String -> Platform.Cmd.Cmd msg , part : String -> Maybe.Maybe String -> Platform.Cmd.Cmd msg , pong : String -> Platform.Cmd.Cmd msg , topic : String -> Maybe.Maybe String -> Platform.Cmd.Cmd msg }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "commands",
            "comment": " generate command variants for a particular server configuration ",
            "type": "Irc.Types.Config -> Irc.Commands.CommandSet x"
          },
          {
            "name": "stringify",
            "comment": " serialize individual IRC data to a raw string ",
            "type": "String -> List String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Irc.Types",
        "comment": " elm-irc library, types and definitions\n@docs Config, User, Message\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Server configuration: nickname, username, fullname ",
            "args": [],
            "type": "{ proxy : String, server : String, user : Irc.Types.User }"
          },
          {
            "name": "User",
            "comment": " User record: nickname, username, fullname ",
            "args": [],
            "type": "{ nick : String, username : String, fullname : String }"
          }
        ],
        "types": [
          {
            "name": "Message",
            "comment": " IRC message type ",
            "args": [],
            "cases": [
              [
                "Unknown",
                [
                  "String"
                ]
              ],
              [
                "Ping",
                [
                  "String"
                ]
              ],
              [
                "Notice",
                [
                  "String"
                ]
              ],
              [
                "Query",
                [
                  "{ from : Irc.Types.User, to : String, text : String }"
                ]
              ],
              [
                "Message",
                [
                  "{ from : Irc.Types.User, channel : String, text : String }"
                ]
              ],
              [
                "Registered",
                []
              ],
              [
                "Joined",
                [
                  "{ who : Irc.Types.User, channel : String }"
                ]
              ],
              [
                "Parted",
                [
                  "{ who : Irc.Types.User , channel : String , reason : Maybe.Maybe String }"
                ]
              ],
              [
                "Topic",
                [
                  "{ who : Irc.Types.User, channel : String, text : Maybe.Maybe String }"
                ]
              ],
              [
                "Nick",
                [
                  "{ who : Irc.Types.User, nick : String }"
                ]
              ],
              [
                "Kicked",
                [
                  "{ who : Irc.Types.User , whom : String , channel : String , reason : Maybe.Maybe String }"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "overminddl1/program-ex",
    "version": "2.0.3",
    "docs": [
      {
        "name": "ProgramEx",
        "comment": "\n@docs programExBuilderWithFlags, programExBuilderWithFlagsAndNavigation\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "programExBuilderWithFlags",
            "comment": "\nPass in the usual callbacks and it returns a built callback set.\n\nThis can be used via Html.App.programWithFlags like:\n\n    Html.App.programWithFlags\n      ( programExBuilderWithFlags\n        { init=init\n        , filter=filter\n        , update=update\n        , view=view\n        , subscriptions=subscriptions\n        }\n      )\n",
            "type": "{ init : flags -> ( userModel, Platform.Cmd.Cmd userMsg ) , filters : userMsg -> userModel -> ( userMsg, ProgramEx.States.States userModel userMsg ) , update : userMsg -> userModel -> ( userModel, Platform.Cmd.Cmd userMsg ) , view : userModel -> Html.Html userMsg , subscriptions : userModel -> Platform.Sub.Sub userMsg } -> { init : flags -> ( ProgramEx.Model userModel userMsg, Platform.Cmd.Cmd userMsg ) , update : userMsg -> ProgramEx.Model userModel userMsg -> ( ProgramEx.Model userModel userMsg, Platform.Cmd.Cmd userMsg ) , view : ProgramEx.Model userModel userMsg -> Html.Html userMsg , subscriptions : ProgramEx.Model userModel userMsg -> Platform.Sub.Sub userMsg }"
          },
          {
            "name": "programExBuilderWithFlagsAndNavigation",
            "comment": "\nPass in the usual callbacks and it returns a built callback set.\n\nThis can be used via Html.App.programWithFlags like:\n\n    Navigation.programWithFlags urlParser\n      ( programExBuilderWithFlagsAndNavigation\n        { init=init\n        , filter=filter\n        , update=update\n        , view=view\n        , subscriptions=subscriptions\n        , urlUpdate=urlUpdate\n        }\n      )\n",
            "type": "{ init : flags -> navParseResult -> ( userModel, Platform.Cmd.Cmd userMsg ) , filters : userMsg -> userModel -> ( userMsg, ProgramEx.States.States userModel userMsg ) , update : userMsg -> userModel -> ( userModel, Platform.Cmd.Cmd userMsg ) , view : userModel -> Html.Html userMsg , subscriptions : userModel -> Platform.Sub.Sub userMsg , urlUpdate : navData -> userModel -> ( userModel, Platform.Cmd.Cmd userMsg ) } -> { init : flags -> navParseResult -> ( ProgramEx.Model userModel userMsg, Platform.Cmd.Cmd userMsg ) , update : userMsg -> ProgramEx.Model userModel userMsg -> ( ProgramEx.Model userModel userMsg, Platform.Cmd.Cmd userMsg ) , view : ProgramEx.Model userModel userMsg -> Html.Html userMsg , subscriptions : ProgramEx.Model userModel userMsg -> Platform.Sub.Sub userMsg , urlUpdate : navData -> ProgramEx.Model userModel userMsg -> ( ProgramEx.Model userModel userMsg, Platform.Cmd.Cmd userMsg ) }"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "ProgramEx.States",
        "comment": "\nThis module handles the States structure that controls how callbacks will be called\n\nExample usage via in a filter callback:\n\n    filters : Msg -> Model -> ( Msg, States Model Msg )\n    filters msg model =\n        let\n            log =\n                debug_log (model.programFlags.debug_log |> Maybe.withDefault False) \"filters\" ( msg, model )\n        in\n            case msg of\n                Helpers helpersMsg ->\n                    ( msg\n                    , States.enableAll |> States.delegate (helpers_delegate Helpers helpersMsg)\n                    )\n\n                Mdl mdlMsg ->\n                    ( msg\n                    , States.enableAll\n                        |> States.delegate\n                            { key = \"Mdl\"\n                            , update = Just (\\_ o -> Material.update mdlMsg o)\n                            , subscriptions = Just (\\o -> Material.subscriptions Mdl o)\n                            }\n                    )\n\n                MesgList_Scroll scrolled ->\n                    case model.loc of\n                        RoomLocation rid _ ->\n                            let\n                                doLoad : Bool\n                                doLoad =\n                                    (model.firstMessageReached == False)\n                                        && (scrolled.pos < 16)\n                                        && (model.isLoadingOlder == False)\n                                        && ((Dict.size model.active_room_msgs) >= 10)\n                            in\n                                if doLoad then\n                                    ( MesgList_LoadOlder rid, States.enableAll )\n                                else\n                                    ( msg, States.disableAll )\n\n                        _ ->\n                            ( msg, States.disableAll )\n\n                _ ->\n                    ( msg, States.enableAll )\n\n\n@docs States, Callbacks, Delegates\n@docs defaultOn, defaultOff\n@docs enableAll, disableAll\n@docs enableOnly, disableOnly\n@docs enable, disable\n@docs delegate\n@docs doUpdate, doSubscriptions, doView, getDelegates\n",
        "aliases": [
          {
            "name": "Delegates",
            "comment": " Delegate record, fill this in to specify delegates for a module\n",
            "args": [
              "userModel",
              "userMsg"
            ],
            "type": "{ key : String , update : Maybe.Maybe (userMsg -> userModel -> ( userModel, Platform.Cmd.Cmd userMsg )) , subscriptions : Maybe.Maybe (userModel -> Platform.Sub.Sub userMsg) }"
          }
        ],
        "types": [
          {
            "name": "Callbacks",
            "comment": " Various supported states that can be allowed or denied\n",
            "args": [],
            "cases": [
              [
                "Update",
                []
              ],
              [
                "Subscriptions",
                []
              ],
              [
                "View",
                []
              ]
            ]
          },
          {
            "name": "States",
            "comment": " Holds the State information\n",
            "args": [
              "userModel",
              "userMsg"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultOff",
            "comment": " Gets the default state set, everything is disabled\n",
            "type": "ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "defaultOn",
            "comment": " Gets the default state set, everything is enabled\n",
            "type": "ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "delegate",
            "comment": " Changes the callback functions for these callbacks to the specified ones, useful for TEA modules delegation\n\nExample use:\n\n    filters : Msg -> Model -> ( Msg, States )\n    filters msg model =\n      case msg of\n        Material\n",
            "type": "ProgramEx.States.Delegates userModel userMsg -> ProgramEx.States.States userModel userMsg -> ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "disable",
            "comment": " Returns a new state from an old disabling a specific callback\n",
            "type": "ProgramEx.States.Callbacks -> ProgramEx.States.States userModel userMsg -> ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "disableAll",
            "comment": " Runs no callbacks at all, same as `defaultOff`\n",
            "type": "ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "disableOnly",
            "comment": " Returns a State that will only allow all callbacks except the ones specified\n",
            "type": "List ProgramEx.States.Callbacks -> ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "doSubscriptions",
            "comment": " Gets from the state if the subscriptions callback should be run\n",
            "type": "ProgramEx.States.States userModel userMsg -> Bool"
          },
          {
            "name": "doUpdate",
            "comment": " Gets from the state if the update callback should be run\n",
            "type": "ProgramEx.States.States userModel userMsg -> Bool"
          },
          {
            "name": "doView",
            "comment": " Gets from the state if the view callback should be run\n",
            "type": "ProgramEx.States.States userModel userMsg -> Bool"
          },
          {
            "name": "enable",
            "comment": " Returns a new state from an old enabling a specific callback\n",
            "type": "ProgramEx.States.Callbacks -> ProgramEx.States.States userModel userMsg -> ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "enableAll",
            "comment": " Runs all callbacks as expected, same as `defaultOn`\n",
            "type": "ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "enableOnly",
            "comment": " Returns a State that will only allow these callbacks to run\n",
            "type": "List ProgramEx.States.Callbacks -> ProgramEx.States.States userModel userMsg"
          },
          {
            "name": "getDelegates",
            "comment": " Gets the delegates for this state\n",
            "type": "ProgramEx.States.States userModel userMsg -> Maybe.Maybe (ProgramEx.States.Delegates userModel userMsg)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "paramanders/elm-hexagon",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Hexagon",
        "comment": " Create SVG hexagons with rounded corners\n\n# Definition\n@docs Point, Hexagon\n\n# Common Helpers\n@docs p, hex\n\n# Rendering\n@docs svgHexagon\n\n",
        "aliases": [
          {
            "name": "Hexagon",
            "comment": " Hexagon definition to generate SVG tags from |",
            "args": [],
            "type": "{ center : Hexagon.Point, rotation : Float, radius : Float }"
          },
          {
            "name": "Point",
            "comment": " Point definition to define hexagon center & corner points |",
            "args": [],
            "type": "{ x : Float, y : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "hex",
            "comment": " Shortcut to create a `Hexagon` |",
            "type": "Hexagon.Point -> Float -> Float -> Hexagon.Hexagon"
          },
          {
            "name": "p",
            "comment": " Shortcut to create a `Point` |",
            "type": "Float -> Float -> Hexagon.Point"
          },
          {
            "name": "svgHexagon",
            "comment": " Create a SVG path for a `Hexagon` definition |",
            "type": "List (Svg.Attribute msg) -> Hexagon.Hexagon -> Svg.Svg msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "pdamoc/elm-css",
    "version": "3.0.2",
    "docs": [
      {
        "name": "Css",
        "comment": " This module provides functions to help you write your CSS in Elm.\n\nThe names of some of the functions/values clash. Here are the resolutions:\n1. for values add a prime mark as in `left'`, `right'` or `flex'`\n2. `em` is used for the unit measurement. For the type selector use `em'`\n3. for pseudoselectors `:left` and `:right` use `leftP` and `rightP`\n\n# Types\n\n@docs Rule, Declaration, Namespace\n\n# Integration functions\n\n@docs styledNode, render, prettyPrint, withNamespace, namespace, importUrl\n\n\n# Selector combinators\n@docs descendant, child, sibling, adjacent\n\n# Pseudo Selectors\n\n\n\n@docs any, default, link, visited, hover, active, focus, target, enabled, disabled, checked, indeterminate, invalid, valid, fullscreen, root, scope, firstChild, lastChild, nthChild, nthLastChild, nthOfType, nthLastOfType, firstOfType, lastOfType, onlyOfType, lang, dir, empty, leftP, rightP, firstLetter, firstLine, before, after, selection, backdrop\n\n# Basic Selectors\n@docs (.), (#), (.:), (#:), (!:), everything\n\n# Type Selectors\n@docs h1, h2, h3, h4, h5, h6, div, p, hr, pre, blockquote, span, a, code, em', strong, i, b, u, sub, sup, br, ol, ul, li, dl, dt, dd, img, iframe, canvas, svg, math, form, input, textarea, button, select, option, section, nav, article, aside, header, footer, address, main', body, figure, figcaption, table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th, fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter, audio, video, source, track, embed, object, param, ins, del, small, cite, dfn, abbr, time, var, samp, kbd, s, q, mark, ruby, rt, rp, bdi, bdo, wbr, details, summary, menuitem, menu\n\n# Declarations\n\n# Units\n@docs px, pc, pct, em, rem, vw, vh, deg, rad, just, color'\n\n\n# Properties\n@docs alignContent, alignItems, alignSelf, all, animation, animationDelay, animationDirection, animationDuration, animationFillMode, animationIterationCount, animationName, animationPlayState, animationTimingFunction, backfaceVisibility, background, backgroundAttachment, backgroundBlendMode, backgroundClip, backgroundColor, backgroundImage, backgroundOrigin, backgroundPosition, backgroundRepeat, backgroundSize, border, borderAll, borderBottom, borderBottomColor, borderBottomLeftRadius, borderBottomRightRadius, borderBottomStyle, borderBottomWidth, borderCollapse, borderColor, borderImage, borderImageOutset, borderImageRepeat, borderImageSlice, borderImageSource, borderImageWidth, borderLeft, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRight, borderRightColor, borderRightStyle, borderRightWidth, borderSpacing, borderStyle, borderTop, borderTopColor, borderTopLeftRadius, borderTopRightRadius, borderTopStyle, borderTopWidth, borderWidth, bottom, boxShadow, boxSizing, captionSide, clear, clip, color, columnCount, columnFill, columnGap, columnRule, columnRuleColor, columnRuleStyle, columnRuleWidth, columnSpan, columnWidth, columns, content, counterIncrement, counterReset, cursor, direction, display, displayFlex, emptyCells, filter, flex, flexBasis, flexDirection, flexFlow, flexGrow, flexShrink, flexWrap, float, font, fontFamily, fontFamilies, fontSize, fontSizeAdjust, fontStretch, fontStyle, fontVariant, fontWeight, hangingPunctuation, height, justifyContent, left, letterSpacing, lineHeight, listStyle, listStyleImage, listStylePosition, listStyleType, margin, marginAll, marginBottom, marginLeft, marginRight, marginTop, maxHeight, maxWidth, minHeight, minWidth, navDown, navIndex, navLeft, navRight, navUp, opacity, order, outline, outlineColor, outlineOffset, outlineStyle, outlineWidth, overflow, overflowX, overflowY, padding, paddingAll, paddingBottom, paddingLeft, paddingRight, paddingTop, pageBreakAfter, pageBreakBefore, pageBreakInside, perspective, perspectiveOrigin, position, quotes, resize, right, tabSize, tableLayout, textAlign, textAlignLast, textDecoration, textDecorationColor, textDecorationLine, textDecorationStyle, textIndent, textJustify, textOverflow, textShadow, textTransform, top, transform, transformOrigin, transformStyle, transition, transitionDelay, transitionDuration, transitionProperty, transitionTimingFunction, unicodeBidi, verticalAlign, visibility, whiteSpace, width, wordBreak, wordSpacing, wordWrap, zIndex\n\n# Transform Values\n@docs matrix, translate, translateX, translateY , scale, scaleX , scaleY , rotate , skew , skewX, skewY\n\n# Values\n\n@docs init, inherit, absolute, relative, static, auto, inline, block, inlineBlock, flex', inlineFlex, listItem, runIn, table', inlineTable, tableCaption, tableColumnGroup, tableHeaderGroup, tableFooterGroup, tableRowGroup, tableCell, tableColumn, tableRow, baseline, center, flexStart, flexEnd, spaceBetween, spaceAround, column, columnReverse, row, rowReverse, wrap, nowrap, wrapReverse, none, left', right', both, normal, italic, oblique, smallCaps, repeat, repeatX, repeatY, noRepeat, scroll, visible, fixed, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset, inside, outside, rtl, justify, underline, overline, lineThrough, embed', bidiOverride, pre', preLine, preWrap, borderBox, pointer, middle, collapse, uppercase, lowercase, capitalize\n\n",
        "aliases": [
          {
            "name": "Declaration",
            "comment": " A declaration is a pair of a property name and a value.\n",
            "args": [],
            "type": "( String, String )"
          },
          {
            "name": "Namespace",
            "comment": " A Namespace is a tupple of three functions that help create the id, class and classList\n",
            "args": [
              "a",
              "b",
              "msg"
            ],
            "type": "( a -> Html.Attribute msg , b -> Html.Attribute msg , List b -> Html.Attribute msg )"
          },
          {
            "name": "Rule",
            "comment": " A rule consists of a selector and a list of declarations.\n",
            "args": [],
            "type": "{ selector : String, declarations : List Css.Declaration }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "!:",
            "comment": " Combines an type selector with a pseudo selector\n",
            "type": "(List Css.Declaration -> Css.Rule) -> String -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "#",
            "comment": " Creates a rule with an id selector\n",
            "type": "a -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "#:",
            "comment": " Combines an id selector with a pseudo selector\n",
            "type": "a -> String -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": ".",
            "comment": " Creates a rule with a class selector\n",
            "type": "a -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": ".:",
            "comment": " Combines a class selector with a pseudo selector\n",
            "type": "a -> String -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "a",
            "comment": " Selector for type a\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "abbr",
            "comment": " Selector for type abbr\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "absolute",
            "comment": " absolute\n",
            "type": "String"
          },
          {
            "name": "active",
            "comment": " :active\n",
            "type": "String"
          },
          {
            "name": "address",
            "comment": " Selector for type address\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "adjacent",
            "comment": " Adjacent combination of selectors\n",
            "type": "List (List Css.Declaration -> Css.Rule) -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "after",
            "comment": " ::after\n",
            "type": "String"
          },
          {
            "name": "alignContent",
            "comment": " align-content\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "alignItems",
            "comment": " align-items\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "alignSelf",
            "comment": " align-self\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "all",
            "comment": " all\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animation",
            "comment": " animation\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationDelay",
            "comment": " animation-delay\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationDirection",
            "comment": " animation-direction\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationDuration",
            "comment": " animation-duration\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationFillMode",
            "comment": " animation-fill-mode\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationIterationCount",
            "comment": " animation-iteration-count\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationName",
            "comment": " animation-name\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationPlayState",
            "comment": " animation-play-state\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "animationTimingFunction",
            "comment": " animation-timing-function\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "any",
            "comment": " :any\n",
            "type": "String"
          },
          {
            "name": "article",
            "comment": " Selector for type article\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "aside",
            "comment": " Selector for type aside\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "audio",
            "comment": " Selector for type audio\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "auto",
            "comment": " auto\n",
            "type": "String"
          },
          {
            "name": "b",
            "comment": " Selector for type b\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "backdrop",
            "comment": " ::backdrop\n",
            "type": "String"
          },
          {
            "name": "backfaceVisibility",
            "comment": " backface-visibility\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "background",
            "comment": " background\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundAttachment",
            "comment": " background-attachment\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundBlendMode",
            "comment": " background-blend-mode\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundClip",
            "comment": " background-clip\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundColor",
            "comment": " background-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundImage",
            "comment": " background-image\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundOrigin",
            "comment": " background-origin\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundPosition",
            "comment": " background-position\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundRepeat",
            "comment": " background-repeat\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "backgroundSize",
            "comment": " background-size\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "baseline",
            "comment": " baseline\n",
            "type": "String"
          },
          {
            "name": "bdi",
            "comment": " Selector for type bdi\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "bdo",
            "comment": " Selector for type bdo\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "before",
            "comment": " ::before\n",
            "type": "String"
          },
          {
            "name": "bidiOverride",
            "comment": " bidi-override\n",
            "type": "String"
          },
          {
            "name": "block",
            "comment": " block\n",
            "type": "String"
          },
          {
            "name": "blockquote",
            "comment": " Selector for type blockquote\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "body",
            "comment": " Selector for type body\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "border",
            "comment": " border : takes a list with all the values\n",
            "type": "List String -> Css.Declaration"
          },
          {
            "name": "borderAll",
            "comment": " borderAll : single value border\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBottom",
            "comment": " border-bottom\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBottomColor",
            "comment": " border-bottom-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBottomLeftRadius",
            "comment": " border-bottom-left-radius\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBottomRightRadius",
            "comment": " border-bottom-right-radius\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBottomStyle",
            "comment": " border-bottom-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBottomWidth",
            "comment": " border-bottom-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderBox",
            "comment": " border-box\n",
            "type": "String"
          },
          {
            "name": "borderCollapse",
            "comment": " border-collapse\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderColor",
            "comment": " border-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderImage",
            "comment": " border-image\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderImageOutset",
            "comment": " border-image-outset\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderImageRepeat",
            "comment": " border-image-repeat\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderImageSlice",
            "comment": " border-image-slice\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderImageSource",
            "comment": " border-image-source\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderImageWidth",
            "comment": " border-image-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderLeft",
            "comment": " border-left\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderLeftColor",
            "comment": " border-left-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderLeftStyle",
            "comment": " border-left-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderLeftWidth",
            "comment": " border-left-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderRadius",
            "comment": " border-radius\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderRight",
            "comment": " border-right\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderRightColor",
            "comment": " border-right-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderRightStyle",
            "comment": " border-right-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderRightWidth",
            "comment": " border-right-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderSpacing",
            "comment": " border-spacing\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderStyle",
            "comment": " border-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderTop",
            "comment": " border-top\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderTopColor",
            "comment": " border-top-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderTopLeftRadius",
            "comment": " border-top-left-radius\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderTopRightRadius",
            "comment": " border-top-right-radius\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderTopStyle",
            "comment": " border-top-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderTopWidth",
            "comment": " border-top-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "borderWidth",
            "comment": " border-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "both",
            "comment": " both\n",
            "type": "String"
          },
          {
            "name": "bottom",
            "comment": " bottom\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "boxShadow",
            "comment": " box-shadow\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "boxSizing",
            "comment": " box-sizing\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "br",
            "comment": " Selector for type br\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "button",
            "comment": " Selector for type button\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "canvas",
            "comment": " Selector for type canvas\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "capitalize",
            "comment": " capitalize\n",
            "type": "String"
          },
          {
            "name": "caption",
            "comment": " Selector for type caption\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "captionSide",
            "comment": " caption-side\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "center",
            "comment": " center\n",
            "type": "String"
          },
          {
            "name": "checked",
            "comment": " :checked\n",
            "type": "String"
          },
          {
            "name": "child",
            "comment": " Child combination of selectors\n",
            "type": "List (List Css.Declaration -> Css.Rule) -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "cite",
            "comment": " Selector for type cite\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "clear",
            "comment": " clear\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "clip",
            "comment": " clip\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "code",
            "comment": " Selector for type code\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "col",
            "comment": " Selector for type col\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "colgroup",
            "comment": " Selector for type colgroup\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "collapse",
            "comment": " collapse\n",
            "type": "String"
          },
          {
            "name": "color",
            "comment": " color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "color'",
            "comment": " Color to webcolor\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "column",
            "comment": " column\n",
            "type": "String"
          },
          {
            "name": "columnCount",
            "comment": " column-count\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnFill",
            "comment": " column-fill\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnGap",
            "comment": " column-gap\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnReverse",
            "comment": " column-reverse\n",
            "type": "String"
          },
          {
            "name": "columnRule",
            "comment": " column-rule\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnRuleColor",
            "comment": " column-rule-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnRuleStyle",
            "comment": " column-rule-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnRuleWidth",
            "comment": " column-rule-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnSpan",
            "comment": " column-span\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columnWidth",
            "comment": " column-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "columns",
            "comment": " columns\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "content",
            "comment": " content\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "counterIncrement",
            "comment": " counter-increment\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "counterReset",
            "comment": " counter-reset\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "cursor",
            "comment": " cursor\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "dashed",
            "comment": " dashed\n",
            "type": "String"
          },
          {
            "name": "datalist",
            "comment": " Selector for type datalist\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "dd",
            "comment": " Selector for type dd\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "default",
            "comment": " :default\n",
            "type": "String"
          },
          {
            "name": "deg",
            "comment": " deg\n",
            "type": "number -> String"
          },
          {
            "name": "del",
            "comment": " Selector for type del\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "descendant",
            "comment": " Descendant combination of selectors\n",
            "type": "List (List Css.Declaration -> Css.Rule) -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "details",
            "comment": " Selector for type details\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "dfn",
            "comment": " Selector for type dfn\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "dir",
            "comment": " :dir(\n",
            "type": "String -> String"
          },
          {
            "name": "direction",
            "comment": " direction\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "disabled",
            "comment": " :disabled\n",
            "type": "String"
          },
          {
            "name": "display",
            "comment": " display\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "displayFlex",
            "comment": " shortcut for display:flex\n",
            "type": "Css.Declaration"
          },
          {
            "name": "div",
            "comment": " Selector for type div\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "dl",
            "comment": " Selector for type dl\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "dotted",
            "comment": " dotted\n",
            "type": "String"
          },
          {
            "name": "double",
            "comment": " double\n",
            "type": "String"
          },
          {
            "name": "dt",
            "comment": " Selector for type dt\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "em",
            "comment": " em\n",
            "type": "number -> String"
          },
          {
            "name": "em'",
            "comment": " Selector for type em\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "embed",
            "comment": " Selector for type embed\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "embed'",
            "comment": " embed\n",
            "type": "String"
          },
          {
            "name": "empty",
            "comment": " :empty\n",
            "type": "String"
          },
          {
            "name": "emptyCells",
            "comment": " empty-cells\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "enabled",
            "comment": " :enabled\n",
            "type": "String"
          },
          {
            "name": "everything",
            "comment": " Creates a rule with selector \"*\"\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "fieldset",
            "comment": " Selector for type fieldset\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "figcaption",
            "comment": " Selector for type figcaption\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "figure",
            "comment": " Selector for type figure\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "filter",
            "comment": " filter\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "firstChild",
            "comment": " :first-child\n",
            "type": "String"
          },
          {
            "name": "firstLetter",
            "comment": " ::first-letter\n",
            "type": "String"
          },
          {
            "name": "firstLine",
            "comment": " ::first-line\n",
            "type": "String"
          },
          {
            "name": "firstOfType",
            "comment": " :first-of-type\n",
            "type": "String"
          },
          {
            "name": "fixed",
            "comment": " fixed\n",
            "type": "String"
          },
          {
            "name": "flex",
            "comment": " flex\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "flex'",
            "comment": " flex\n",
            "type": "String"
          },
          {
            "name": "flexBasis",
            "comment": " flex-basis\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "flexDirection",
            "comment": " flex-direction\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "flexEnd",
            "comment": " flex-end\n",
            "type": "String"
          },
          {
            "name": "flexFlow",
            "comment": " flex-flow\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "flexGrow",
            "comment": " flex-grow\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "flexShrink",
            "comment": " flex-shrink\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "flexStart",
            "comment": " flex-start\n",
            "type": "String"
          },
          {
            "name": "flexWrap",
            "comment": " flex-wrap\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "float",
            "comment": " float\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "focus",
            "comment": " :focus\n",
            "type": "String"
          },
          {
            "name": "font",
            "comment": " font\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontFamilies",
            "comment": " font-family as a list of families\n",
            "type": "List String -> Css.Declaration"
          },
          {
            "name": "fontFamily",
            "comment": " font-family\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontSize",
            "comment": " font-size\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontSizeAdjust",
            "comment": " font-size-adjust\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontStretch",
            "comment": " font-stretch\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontStyle",
            "comment": " font-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontVariant",
            "comment": " font-variant\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "fontWeight",
            "comment": " font-weight\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "footer",
            "comment": " Selector for type footer\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "form",
            "comment": " Selector for type form\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "fullscreen",
            "comment": " :fullscreen\n",
            "type": "String"
          },
          {
            "name": "groove",
            "comment": " groove\n",
            "type": "String"
          },
          {
            "name": "h1",
            "comment": " Selector for type h1\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "h2",
            "comment": " Selector for type h2\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "h3",
            "comment": " Selector for type h3\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "h4",
            "comment": " Selector for type h4\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "h5",
            "comment": " Selector for type h5\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "h6",
            "comment": " Selector for type h6\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "hangingPunctuation",
            "comment": " hanging-punctuation\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "header",
            "comment": " Selector for type header\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "height",
            "comment": " height\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "hidden",
            "comment": " hidden\n",
            "type": "String"
          },
          {
            "name": "hover",
            "comment": " :hover\n",
            "type": "String"
          },
          {
            "name": "hr",
            "comment": " Selector for type hr\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "i",
            "comment": " Selector for type i\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "iframe",
            "comment": " Selector for type iframe\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "img",
            "comment": " Selector for type img\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "importUrl",
            "comment": " Render a url to an @import directive.\n",
            "type": "String -> String"
          },
          {
            "name": "indeterminate",
            "comment": " :indeterminate\n",
            "type": "String"
          },
          {
            "name": "inherit",
            "comment": " inherit\n",
            "type": "String"
          },
          {
            "name": "init",
            "comment": " init\n",
            "type": "String"
          },
          {
            "name": "inline",
            "comment": " inline\n",
            "type": "String"
          },
          {
            "name": "inlineBlock",
            "comment": " inline-block\n",
            "type": "String"
          },
          {
            "name": "inlineFlex",
            "comment": " inline-flex\n",
            "type": "String"
          },
          {
            "name": "inlineTable",
            "comment": " inline-table\n",
            "type": "String"
          },
          {
            "name": "input",
            "comment": " Selector for type input\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "ins",
            "comment": " Selector for type ins\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "inset",
            "comment": " inset\n",
            "type": "String"
          },
          {
            "name": "inside",
            "comment": " inside\n",
            "type": "String"
          },
          {
            "name": "invalid",
            "comment": " :invalid\n",
            "type": "String"
          },
          {
            "name": "italic",
            "comment": " italic\n",
            "type": "String"
          },
          {
            "name": "just",
            "comment": " Let's the number pass as it is\n",
            "type": "number -> String"
          },
          {
            "name": "justify",
            "comment": " justify\n",
            "type": "String"
          },
          {
            "name": "justifyContent",
            "comment": " justify-content\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "kbd",
            "comment": " Selector for type kbd\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "keygen",
            "comment": " Selector for type keygen\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "label",
            "comment": " Selector for type label\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "lang",
            "comment": " :lang(\n",
            "type": "String -> String"
          },
          {
            "name": "lastChild",
            "comment": " :last-child\n",
            "type": "String"
          },
          {
            "name": "lastOfType",
            "comment": " :last-of-type\n",
            "type": "String"
          },
          {
            "name": "left",
            "comment": " left\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "left'",
            "comment": " left'\n",
            "type": "String"
          },
          {
            "name": "leftP",
            "comment": " :left\n",
            "type": "String"
          },
          {
            "name": "legend",
            "comment": " Selector for type legend\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "letterSpacing",
            "comment": " letter-spacing\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "li",
            "comment": " Selector for type li\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "lineHeight",
            "comment": " line-height\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "lineThrough",
            "comment": " line-through\n",
            "type": "String"
          },
          {
            "name": "link",
            "comment": " :link\n",
            "type": "String"
          },
          {
            "name": "listItem",
            "comment": " list-item\n",
            "type": "String"
          },
          {
            "name": "listStyle",
            "comment": " list-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "listStyleImage",
            "comment": " list-style-image\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "listStylePosition",
            "comment": " list-style-position\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "listStyleType",
            "comment": " list-style-type\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "lowercase",
            "comment": " lowercase\n",
            "type": "String"
          },
          {
            "name": "main'",
            "comment": " Selector for type main'\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "margin",
            "comment": " margin : takes a list with all the values\n",
            "type": "List String -> Css.Declaration"
          },
          {
            "name": "marginAll",
            "comment": " marginAll : single value margin\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "marginBottom",
            "comment": " margin-bottom\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "marginLeft",
            "comment": " margin-left\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "marginRight",
            "comment": " margin-right\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "marginTop",
            "comment": " margin-top\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "mark",
            "comment": " Selector for type mark\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "math",
            "comment": " Selector for type math\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "matrix",
            "comment": " matrix transform\n",
            "type": "number -> number -> number -> number -> number -> number -> String"
          },
          {
            "name": "maxHeight",
            "comment": " max-height\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "maxWidth",
            "comment": " max-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "menu",
            "comment": " Selector for type menu\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "menuitem",
            "comment": " Selector for type menuitem\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "meter",
            "comment": " Selector for type meter\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "middle",
            "comment": " middle\n",
            "type": "String"
          },
          {
            "name": "minHeight",
            "comment": " min-height\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "minWidth",
            "comment": " min-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "namespace",
            "comment": " Adds a namespace to the selectors of a list of Rules.\n",
            "type": "String -> Css.Namespace a b msg"
          },
          {
            "name": "nav",
            "comment": " Selector for type nav\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "navDown",
            "comment": " nav-down\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "navIndex",
            "comment": " nav-index\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "navLeft",
            "comment": " nav-left\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "navRight",
            "comment": " nav-right\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "navUp",
            "comment": " nav-up\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "noRepeat",
            "comment": " no-repeat\n",
            "type": "String"
          },
          {
            "name": "none",
            "comment": " none\n",
            "type": "String"
          },
          {
            "name": "normal",
            "comment": " normal\n",
            "type": "String"
          },
          {
            "name": "nowrap",
            "comment": " nowrap\n",
            "type": "String"
          },
          {
            "name": "nthChild",
            "comment": " :nth-child(\n",
            "type": "Int -> String"
          },
          {
            "name": "nthLastChild",
            "comment": " :nth-last-child(\n",
            "type": "Int -> String"
          },
          {
            "name": "nthLastOfType",
            "comment": " :nth-last-of-type(\n",
            "type": "String -> String"
          },
          {
            "name": "nthOfType",
            "comment": " :nth-of-type(\n",
            "type": "String -> String"
          },
          {
            "name": "object",
            "comment": " Selector for type object\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "oblique",
            "comment": " oblique\n",
            "type": "String"
          },
          {
            "name": "ol",
            "comment": " Selector for type ol\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "onlyOfType",
            "comment": " :only-of-type\n",
            "type": "String"
          },
          {
            "name": "opacity",
            "comment": " opacity\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "optgroup",
            "comment": " Selector for type optgroup\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "option",
            "comment": " Selector for type option\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "order",
            "comment": " order\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "outline",
            "comment": " outline\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "outlineColor",
            "comment": " outline-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "outlineOffset",
            "comment": " outline-offset\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "outlineStyle",
            "comment": " outline-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "outlineWidth",
            "comment": " outline-width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "output",
            "comment": " Selector for type output\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "outset",
            "comment": " outset\n",
            "type": "String"
          },
          {
            "name": "outside",
            "comment": " outside\n",
            "type": "String"
          },
          {
            "name": "overflow",
            "comment": " overflow\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "overflowX",
            "comment": " overflow-x\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "overflowY",
            "comment": " overflow-y\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "overline",
            "comment": " overline\n",
            "type": "String"
          },
          {
            "name": "p",
            "comment": " Selector for type p\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "padding",
            "comment": " padding : takes a list with all the values\n",
            "type": "List String -> Css.Declaration"
          },
          {
            "name": "paddingAll",
            "comment": " paddingAll : single value padding\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "paddingBottom",
            "comment": " padding-bottom\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "paddingLeft",
            "comment": " padding-left\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "paddingRight",
            "comment": " padding-right\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "paddingTop",
            "comment": " padding-top\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "pageBreakAfter",
            "comment": " page-break-after\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "pageBreakBefore",
            "comment": " page-break-before\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "pageBreakInside",
            "comment": " page-break-inside\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "param",
            "comment": " Selector for type param\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "pc",
            "comment": " pc\n",
            "type": "number -> String"
          },
          {
            "name": "pct",
            "comment": " pct\n",
            "type": "number -> String"
          },
          {
            "name": "perspective",
            "comment": " perspective\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "perspectiveOrigin",
            "comment": " perspective-origin\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "pointer",
            "comment": " pointer\n",
            "type": "String"
          },
          {
            "name": "position",
            "comment": " position\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "pre",
            "comment": " Selector for type pre\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "pre'",
            "comment": " pre\n",
            "type": "String"
          },
          {
            "name": "preLine",
            "comment": " pre-line\n",
            "type": "String"
          },
          {
            "name": "preWrap",
            "comment": " pre-wrap\n",
            "type": "String"
          },
          {
            "name": "prettyPrint",
            "comment": " Renders the list of rules into a pretty string.\n",
            "type": "List String -> List Css.Rule -> String"
          },
          {
            "name": "progress",
            "comment": " Selector for type progress\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "px",
            "comment": " px\n",
            "type": "number -> String"
          },
          {
            "name": "q",
            "comment": " Selector for type q\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "quotes",
            "comment": " quotes\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "rad",
            "comment": " rad\n",
            "type": "number -> String"
          },
          {
            "name": "relative",
            "comment": " relative\n",
            "type": "String"
          },
          {
            "name": "rem",
            "comment": " rem\n",
            "type": "number -> String"
          },
          {
            "name": "render",
            "comment": " Renders the list of rules into a string.\n",
            "type": "List Css.Rule -> String"
          },
          {
            "name": "repeat",
            "comment": " repeat\n",
            "type": "String"
          },
          {
            "name": "repeatX",
            "comment": " repeat-x\n",
            "type": "String"
          },
          {
            "name": "repeatY",
            "comment": " repeat-y\n",
            "type": "String"
          },
          {
            "name": "resize",
            "comment": " resize\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "ridge",
            "comment": " ridge\n",
            "type": "String"
          },
          {
            "name": "right",
            "comment": " right\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "right'",
            "comment": " right'\n",
            "type": "String"
          },
          {
            "name": "rightP",
            "comment": " :right\n",
            "type": "String"
          },
          {
            "name": "root",
            "comment": " :root\n",
            "type": "String"
          },
          {
            "name": "rotate",
            "comment": " rotate transform (in deg)\n",
            "type": "number -> String"
          },
          {
            "name": "row",
            "comment": " row\n",
            "type": "String"
          },
          {
            "name": "rowReverse",
            "comment": " row-reverse\n",
            "type": "String"
          },
          {
            "name": "rp",
            "comment": " Selector for type rp\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "rt",
            "comment": " Selector for type rt\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "rtl",
            "comment": " rtl\n",
            "type": "String"
          },
          {
            "name": "ruby",
            "comment": " Selector for type ruby\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "runIn",
            "comment": " run-in\n",
            "type": "String"
          },
          {
            "name": "s",
            "comment": " Selector for type s\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "samp",
            "comment": " Selector for type samp\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "scale",
            "comment": " scale transform\n",
            "type": "number -> number -> String"
          },
          {
            "name": "scaleX",
            "comment": " scaleX transform\n",
            "type": "number -> String"
          },
          {
            "name": "scaleY",
            "comment": " scaleY transform\n",
            "type": "number -> String"
          },
          {
            "name": "scope",
            "comment": " :scope\n",
            "type": "String"
          },
          {
            "name": "scroll",
            "comment": " scroll\n",
            "type": "String"
          },
          {
            "name": "section",
            "comment": " Selector for type section\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "select",
            "comment": " Selector for type select\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "selection",
            "comment": " ::selection\n",
            "type": "String"
          },
          {
            "name": "sibling",
            "comment": " Sibling combination of selectors\n",
            "type": "List (List Css.Declaration -> Css.Rule) -> List Css.Declaration -> Css.Rule"
          },
          {
            "name": "skew",
            "comment": " skew transform (in deg)\n",
            "type": "number -> number -> String"
          },
          {
            "name": "skewX",
            "comment": " skewX transform (in deg)\n",
            "type": "number -> String"
          },
          {
            "name": "skewY",
            "comment": " skewY transform (in deg)\n",
            "type": "number -> String"
          },
          {
            "name": "small",
            "comment": " Selector for type small\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "smallCaps",
            "comment": " small-caps\n",
            "type": "String"
          },
          {
            "name": "solid",
            "comment": " solid\n",
            "type": "String"
          },
          {
            "name": "source",
            "comment": " Selector for type source\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "spaceAround",
            "comment": " space-around\n",
            "type": "String"
          },
          {
            "name": "spaceBetween",
            "comment": " space-between\n",
            "type": "String"
          },
          {
            "name": "span",
            "comment": " Selector for type span\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "static",
            "comment": " static\n",
            "type": "String"
          },
          {
            "name": "strong",
            "comment": " Selector for type strong\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "styledNode",
            "comment": " A Html div to be used at the top most level in order to render the CSS.\n",
            "type": "List String -> List Css.Rule -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "sub",
            "comment": " Selector for type sub\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "summary",
            "comment": " Selector for type summary\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "sup",
            "comment": " Selector for type sup\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "svg",
            "comment": " Selector for type svg\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "tabSize",
            "comment": " tab-size\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "table",
            "comment": " Selector for type table\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "table'",
            "comment": " table\n",
            "type": "String"
          },
          {
            "name": "tableCaption",
            "comment": " table-caption\n",
            "type": "String"
          },
          {
            "name": "tableCell",
            "comment": " table-cell\n",
            "type": "String"
          },
          {
            "name": "tableColumn",
            "comment": " table-column\n",
            "type": "String"
          },
          {
            "name": "tableColumnGroup",
            "comment": " table-column-group\n",
            "type": "String"
          },
          {
            "name": "tableFooterGroup",
            "comment": " table-footer-group\n",
            "type": "String"
          },
          {
            "name": "tableHeaderGroup",
            "comment": " table-header-group\n",
            "type": "String"
          },
          {
            "name": "tableLayout",
            "comment": " table-layout\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "tableRow",
            "comment": " table-row\n",
            "type": "String"
          },
          {
            "name": "tableRowGroup",
            "comment": " table-row-group\n",
            "type": "String"
          },
          {
            "name": "target",
            "comment": " :target\n",
            "type": "String"
          },
          {
            "name": "tbody",
            "comment": " Selector for type tbody\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "td",
            "comment": " Selector for type td\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "textAlign",
            "comment": " text-align\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textAlignLast",
            "comment": " text-align-last\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textDecoration",
            "comment": " text-decoration\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textDecorationColor",
            "comment": " text-decoration-color\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textDecorationLine",
            "comment": " text-decoration-line\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textDecorationStyle",
            "comment": " text-decoration-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textIndent",
            "comment": " text-indent\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textJustify",
            "comment": " text-justify\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textOverflow",
            "comment": " text-overflow\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textShadow",
            "comment": " text-shadow\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textTransform",
            "comment": " text-transform\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "textarea",
            "comment": " Selector for type textarea\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "tfoot",
            "comment": " Selector for type tfoot\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "th",
            "comment": " Selector for type th\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "thead",
            "comment": " Selector for type thead\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "time",
            "comment": " Selector for type time\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "top",
            "comment": " top\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "tr",
            "comment": " Selector for type tr\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "track",
            "comment": " Selector for type track\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "transform",
            "comment": " transform\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transformOrigin",
            "comment": " transform-origin\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transformStyle",
            "comment": " transform-style\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transition",
            "comment": " transition\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transitionDelay",
            "comment": " transition-delay\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transitionDuration",
            "comment": " transition-duration\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transitionProperty",
            "comment": " transition-property\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "transitionTimingFunction",
            "comment": " transition-timing-function\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "translate",
            "comment": " translate transform\n",
            "type": "String -> String -> String"
          },
          {
            "name": "translateX",
            "comment": " translateY transform\n",
            "type": "String -> String"
          },
          {
            "name": "translateY",
            "comment": " translateY transform\n",
            "type": "String -> String"
          },
          {
            "name": "u",
            "comment": " Selector for type u\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "ul",
            "comment": " Selector for type ul\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "underline",
            "comment": " underline\n",
            "type": "String"
          },
          {
            "name": "unicodeBidi",
            "comment": " unicode-bidi\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "uppercase",
            "comment": " uppercase\n",
            "type": "String"
          },
          {
            "name": "valid",
            "comment": " :valid\n",
            "type": "String"
          },
          {
            "name": "var",
            "comment": " Selector for type var\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "verticalAlign",
            "comment": " vertical-align\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "vh",
            "comment": " vh\n",
            "type": "number -> String"
          },
          {
            "name": "video",
            "comment": " Selector for type video\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "visibility",
            "comment": " visibility\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "visible",
            "comment": " visible\n",
            "type": "String"
          },
          {
            "name": "visited",
            "comment": " :visited\n",
            "type": "String"
          },
          {
            "name": "vw",
            "comment": " vw\n",
            "type": "number -> String"
          },
          {
            "name": "wbr",
            "comment": " Selector for type wbr\n",
            "type": "List Css.Declaration -> Css.Rule"
          },
          {
            "name": "whiteSpace",
            "comment": " white-space\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "width",
            "comment": " width\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "withNamespace",
            "comment": " Adds a namespace to the selectors of a list of Rules.\n",
            "type": "String -> List Css.Rule -> List Css.Rule"
          },
          {
            "name": "wordBreak",
            "comment": " word-break\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "wordSpacing",
            "comment": " word-spacing\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "wordWrap",
            "comment": " word-wrap\n",
            "type": "String -> Css.Declaration"
          },
          {
            "name": "wrap",
            "comment": " wrap\n",
            "type": "String"
          },
          {
            "name": "wrapReverse",
            "comment": " wrap-reverse\n",
            "type": "String"
          },
          {
            "name": "zIndex",
            "comment": " z-index\n",
            "type": "String -> Css.Declaration"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "pdamoc/elm-hashids",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Hashids",
        "comment": " This is an Elm port of the Hashids library by Ivan Akimov.\n   This is *not* a cryptographic hashing algorithm. Hashids is typically\n   used to encode numbers to a format suitable for appearance in places\n   like urls.\n\nSee the official Hashids home page: [http://hashids.org](http://hashids.org)\n\nHashids is a small open-source library that generates short, unique,\nnon-sequential ids from numbers. It converts numbers like 347 into\nstrings like @yr8@, or a list of numbers like [27, 986] into @3kTMd@.\nYou can also decode those ids back. This is useful in bundling several\nparameters into one or simply using them as short UIDs.\n\n# Types\n\n@docs Context\n\n# Context object constructors \n@docs createHashidsContext, hashidsSimple, hashidsMinimum\n\n\n# Encoding and decoding\n@docs encodeHex, decodeHex, encode, encodeList, decode\n\n# Convenience wrappers\n@docs encodeUsingSalt, encodeListUsingSalt, decodeUsingSalt, encodeHexUsingSalt, decodeHexUsingSalt\n\n",
        "aliases": [
          {
            "name": "Context",
            "comment": " A record with various internals required for encoding and decoding.\n",
            "args": [],
            "type": "{ guards : String , seps : String , salt : String , minHashLength : Int , alphabet : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "createHashidsContext",
            "comment": " Create a context object using the given salt, a minimum hash length, and\na custom alphabet. If you only need to supply the salt, or the first two\narguments, use 'hashidsSimple' or 'hashidsMinimum' instead.\n\nChanging the alphabet is useful if you want to make your hashes unique,\ni.e., create hashes different from those generated by other applications\nrelying on the same algorithm.\n",
            "type": "String -> Int -> String -> Hashids.Context"
          },
          {
            "name": "decode",
            "comment": " Decode a hash.\n\n  Example use:\n\n    hash = \n      let \n        context = hashidsSimple \"this is my salt\"\n      in \n        decode context \"rD\"        -- == [5]\n",
            "type": "Hashids.Context -> String -> List Int"
          },
          {
            "name": "decodeHex",
            "comment": " Decode a hash generated with 'encodeHex'.\n\n  Example use: \n\n    decodeHex context \"yzgwD\"\n",
            "type": "Hashids.Context -> String -> String"
          },
          {
            "name": "decodeHexUsingSalt",
            "comment": " Shortcut for 'decodeHex'.\n",
            "type": "String -> String -> String"
          },
          {
            "name": "decodeUsingSalt",
            "comment": " Decode a hash using the provided salt.\n\nThis convenience function creates a context with the default alphabet.\nIf the same context is used repeatedly, use 'decode' with one of the\nconstructors instead.\n",
            "type": "String -> String -> List Int"
          },
          {
            "name": "encode",
            "comment": " Encode a single number.\n\n  Example use:\n\n    hash = \n      let \n        context = hashidsSimple \"this is my salt\"\n      in \n        encode context 5          -- == \"rD\"\n",
            "type": "Hashids.Context -> Int -> String"
          },
          {
            "name": "encodeHex",
            "comment": " Encode a hexadecimal number.\n\n  Example use: \n\n    encodeHex context \"ff83\"\n",
            "type": "Hashids.Context -> String -> String"
          },
          {
            "name": "encodeHexUsingSalt",
            "comment": " Shortcut for 'encodeHex'.\n",
            "type": "String -> String -> String"
          },
          {
            "name": "encodeList",
            "comment": " Encode a list of numbers.\n\n  Example use:\n\n    hash = \n      let \n        context = hashidsSimple \"this is my salt\"\n      in \n        encodeList context [2, 3, 5, 7, 11]          -- == \"EOurh6cbTD\"\n",
            "type": "Hashids.Context -> List Int -> String"
          },
          {
            "name": "encodeListUsingSalt",
            "comment": " Encode a list of numbers using the provided salt.\n\nThis function wrapper creates a context with the default alphabet.\nIf the same context is used repeatedly, use 'encodeList' with one of the\nconstructors instead.\n",
            "type": "String -> List Int -> String"
          },
          {
            "name": "encodeUsingSalt",
            "comment": " Encode a number using the provided salt.\n\nThis convenience function creates a context with the default alphabet.\nIf the same context is used repeatedly, use 'encode' with one of the\nconstructors instead.\n",
            "type": "String -> Int -> String"
          },
          {
            "name": "hashidsMinimum",
            "comment": " Create a context object using the default alphabet and the provided salt.\nThe generated hashes will have a minimum length as specified by the second\nargument.\n",
            "type": "String -> Int -> Hashids.Context"
          },
          {
            "name": "hashidsSimple",
            "comment": " Create a context object using the default alphabet and the provided salt,\nwithout any minimum required length.\n",
            "type": "String -> Hashids.Context"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "pinx/elm-mdl",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Material",
        "comment": "\n\nMaterial Design component library for Elm based on Google's\n[Material Design Lite](https://www.getmdl.io/).\n\nClick \n[here](https://debois.github.io/elm-mdl/)\nfor a live demo. \n\n# Component model \n\nThe component model of the library is simply the Elm Architecture (TEA), i.e.,\neach component has types `Model` and `Msg`, and values `view` and `update`. A\nminimal example using this library as plain TEA can be found\n[here](https://github.com/debois/elm-mdl/blob/master/examples/Component-TEA.elm).\n\nUsing more than a few component in plain TEA is unwieldy because of the large\namount of boilerplate one has to write. This library uses the \n[Parts model](https://github.com/debois/elm-parts) for getting rid of most of\n  that boilerplate. A minimal example using the parts model is\n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\n\nIt is important to note that the parts model lives __within__ TEA; \nit is not an alternative architecture. \n\n# Getting started\n\nThe easiest way to get started is to start with one of the minimal examples above.\nWe recommend going with the one that uses \n[the one that uses](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm)\nthe library's component support rather than working directly in plain Elm.\n\n# Interfacing with CSS\n\nThis library depends on the CSS part of Google's Material Design Lite. Your app\nwill have to load that. See the\n[Scheme](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Scheme)\nmodule for exposing details. (The starting point implementations above\nload CSS automatically.)\n\n# View functions\n\nThe view function of most components has this signature: \n\n    view : (Msg -> m) -> Model -> List (Property m) -> List (Html m) -> Html m\n\nFor technical reasons, rather than using `Html.App.map f (view ...)`, you\nprovide the lifting function `f` directly to the component as the first\nargument. The `Model` argument is standard.  The third argument, `List (Property m)`,\nis a mechanism for you to specify additional classes and CSS for the component, as well\nas messages to send in response to events on the component.  You need this,\ne.g., when you want to specify the width of a button. See the\n[Options](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Options)\nmodule for details. \n\nMaterial Design defines a color palette. The \n[Color](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Color)\nmodule contains exposing various `Property` values and helper functions for working with\nthis color palette.\n\nNB! If you are using the parts model rather than plain TEA, call `render` instead of `view`. \n\n# Parts model\n\nThe present module contains only convenience functions for working with nested \ncomponents in the Elm architecture. A minimal example using this library\nwith component support can be found \n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\nWe encourage you to use the library in this fashion.\n\nHere is how you use component support in general.  First, boilerplate. \n\n 1. Include `Material`:\n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.1.3/material.min.css\" />\n\n 2. Add a model container Material components to your model:\n\n        type alias Model = \n          { ...\n          , mdl : Material.Model    \n          }\n\n        model : Model = \n          { ...\n          , mdl = Material.model\n          }\n\n 3. Add an action for Material components. \n\n        type Msg = \n          ...\n          | Mdl Material.Msg \n\n 4. Handle that message in your update function as follows:\n\n        update message model = \n          case message of \n            ...\n            Mdl message' -> \n              Material.update Mdl message' model\n\nYou now have sufficient boilerplate for using __any__ number of elm-mdl components. \nLet's say you need a textfield for name entry, and you'd like to be notifed\nwhenever the field changes value through your own NameChanged action: \n\n        import Material.Textfield as Textfield\n\n        ...\n\n        type Msg = \n          ...\n          | NameChanged String\n\n        ... \n\n        update action model = \n          case action of \n            ...\n            NameChanged name -> \n              -- Do whatever you need to do. \n\n        ...\n\n        nameInput : Textfield.Instance Material.Model Msg\n        nameInput = \n        \n        view addr model = \n          ...\n          Textfield.instance [0] Mdl model.mdl\n            [ css \"width\" \"16rem\"\n            , Textfield.floatingLabel\n            , Textfield.onInput NameChanged\n            ] \n\nThe win relative to using plain Elm Architecture is that adding a component\nneither requires you to update your model, your Msgs, nor your update function. \n(As in the above example, you will frequently have to update the latter two anyway, \nbut now it's not boilerplate, its \"business logic\".)\n\n\n## Optimising for size\n\nUsing this module will force all elm-mdl components to be built and included in \nyour application. If this is unacceptable, you can custom-build a version of this\nmodule that exposing uses only the components you need. To do so, you need to provide your\nown versions of the type `Model` and the value `model` of the present module. \nUse the corresponding definitions in this module as a starting point \n([source](https://github.com/debois/elm-mdl/blob/master/src/Material.elm)) \nand simply comment out the components you do not need. \n\n@docs Model, model, Msg, update\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model encompassing all Material components. Since some components store\nuser actions in their model (notably Snackbar), the model is generic in the \ntype of such \"observations\". \n",
            "args": [],
            "type": "{ button : Parts.Indexed Material.Button.Model , textfield : Parts.Indexed Material.Textfield.Model , menu : Parts.Indexed Material.Menu.Model , snackbar : Maybe.Maybe (Material.Snackbar.Model Int) , layout : Material.Layout.Model , toggles : Parts.Indexed Material.Toggles.Model }"
          },
          {
            "name": "Msg",
            "comment": " Msg encompassing actions of all Material components. \n",
            "args": [],
            "type": "Parts.Msg Material.Model"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "model",
            "comment": " Initial model.\n",
            "type": "Material.Model"
          },
          {
            "name": "update",
            "comment": " Update function for the above Msg. Provide as the first \nargument a lifting function that embeds the generic MDL action in \nyour own Msg type. \n",
            "type": "(Material.Msg -> obs) -> Material.Msg -> { model | mdl : Material.Model } -> ( { model | mdl : Material.Model }, Platform.Cmd.Cmd obs )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Menu",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#menus-section):\n\n> The Material Design Lite (MDL) menu component is a user interface element\n> that allows users to select one of a number of options. The selection\n> typically results in an action initiation, a setting change, or other\n> observable effect. Menu options are always presented in sets of two or\n> more, and options may be programmatically enabled or disabled as required.\n> The menu appears when the user is asked to choose among a series of\n> options, and is usually dismissed after the choice is made.\n\n> Menus are an established but non-standardized feature in user interfaces,\n> and allow users to make choices that direct the activity, progress, or\n> characteristics of software. Their design and use is an important factor in\n> the overall user experience. See the menu component's Material Design\n> specifications page for details.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/menus.html).\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#/menus)\nfor a live demo.\n\n# Render\n@docs Item, render\n\n# Options\n@docs Property\n\n## Alignment\n@docs bottomLeft, bottomRight, topLeft, topRight\n\n## Appearance\n@docs ripple\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update, view\n\n\n",
        "aliases": [
          {
            "name": "Item",
            "comment": " Item model.\n",
            "args": [
              "m"
            ],
            "type": "{ divider : Bool, enabled : Bool, html : Html.Html m }"
          },
          {
            "name": "Model",
            "comment": " TODO. \n",
            "args": [],
            "type": "{ items : Dict.Dict Int Material.Ripple.Model , animationState : Material.Menu.AnimationState , geometry : Maybe.Maybe Material.Menu.Geometry.Geometry }"
          },
          {
            "name": "Property",
            "comment": "\n  TODO\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property Material.Menu.Config m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component action.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bottomLeft",
            "comment": "\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "bottomRight",
            "comment": "\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "defaultModel",
            "comment": " TODO.\n",
            "type": "Material.Menu.Model"
          },
          {
            "name": "render",
            "comment": " Component render. Below is an example, assuming boilerplate setup as\nindicated in `Material`, and a user message `Select String`.\n\n    item : String -> Html Msg\n    item str = \n      Html.div \n        [ Html.Events.onClick (Select str) ]\n        [ Html.text str ]\n\n    Menu.render Mdl [idx] model.mdl \n      [ Menu.topLeft\n      , Menu.ripple\n      ] \n      [ Menu.Item False True  <| item \"Some item\"\n      , Menu.Item True  True  <| item \"Another item\"\n      , Menu.Item False False <| item \"Disabled item\"\n      , Menu.Item False True  <| item \"Yet another item\"\n      ]\n",
            "type": "(Parts.Msg (Material.Menu.Container c) -> m) -> Parts.Index -> Material.Menu.Container c -> List (Material.Menu.Property m) -> List (Material.Menu.Item m) -> Html.Html m"
          },
          {
            "name": "ripple",
            "comment": "\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "topLeft",
            "comment": "\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "topRight",
            "comment": "\n",
            "type": "Material.Menu.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Menu.Msg -> Material.Menu.Model -> ( Material.Menu.Model, Platform.Cmd.Cmd Material.Menu.Msg )"
          },
          {
            "name": "view",
            "comment": " TODO\n",
            "type": "Material.Menu.Model -> List (Material.Menu.Property Material.Menu.Msg) -> List (Material.Menu.Item Material.Menu.Msg) -> Html.Html Material.Menu.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Layout",
        "comment": " From the\n[Material Design Lite documentation](https://www.getmdl.io/components/index.html#layout-section):\n\n> The Material Design Lite (MDL) layout component is a comprehensive approach to\n> page layout that uses MDL development tenets, allows for efficient use of MDL\n> components, and automatically adapts to different browsers, screen sizes, and\n> devices.\n>\n> Appropriate and accessible layout is a critical feature of all user interfaces,\n> regardless of a site's content or function. Page design and presentation is\n> therefore an important factor in the overall user experience. See the layout\n> component's\n> [Material Design specifications page](https://www.google.com/design/spec/layout/structure.html#structure-system-bars)\n> for details.\n>\n> Use of MDL layout principles simplifies the creation of scalable pages by\n> providing reusable components and encourages consistency across environments by\n> establishing recognizable visual elements, adhering to logical structural\n> grids, and maintaining appropriate spacing across multiple platforms and screen\n> sizes. MDL layout is extremely powerful and dynamic, allowing for great\n> consistency in outward appearance and behavior while maintaining development\n> flexibility and ease of use.\n\n# Subscriptions\n\nThe layout needs to be initialised with and subscribe to changes in viewport\nsizes. Example initialisation of containing app: \n\n    import Material.Layout as Layout\n    import Material\n\n    type Msg = \n      ...\n      | Mdl Material.Msg -- Boilerplate\n\n    ...\n\n    App.program \n      { init = ( model, Layout.sub0 Mdl )\n      , view = view\n      , subscriptions = Layout.subs Mdl\n      , update = update\n      }\n\n\n@docs sub0, subs\n\n# Render\n@docs Contents, render, toggleDrawer\n\n# Options\n@docs Property\n\n## Tabs\n@docs fixedTabs, rippleTabs\n\n## Header\n@docs fixedHeader, fixedDrawer\n@docs waterfall, seamed, scrolling\n@docs transparentHeader\n@docs selectedTab\n\n## Events\n@docs onSelectTab\n\n# Sub-views\n@docs row, spacer, title, navigation, link, onClick, href\n\n# Elm architecture\n@docs view, Msg, Model, defaultModel, update, init, subscriptions\n\n\n",
        "aliases": [
          {
            "name": "Contents",
            "comment": " Content of the layout only (contents of main pane is set elsewhere). Every\npart is optional; if you supply an empty list for either, the sub-component is \nomitted. \n\nThe `header` and `drawer` contains the contents of the header rows and drawer,\nrespectively. Use `row`, `spacer`, `title`, `nav`, and `link`, as well as\nregular Html to construct these. The `tabs` contains\nthe title of each tab.\n",
            "args": [
              "m"
            ],
            "type": "{ header : List (Html.Html m) , drawer : List (Html.Html m) , tabs : ( List (Html.Html m), List (Material.Options.Style m) ) , main : List (Html.Html m) }"
          },
          {
            "name": "Model",
            "comment": " Component mode. \n",
            "args": [],
            "type": "{ ripples : Dict.Dict Int Material.Ripple.Model , isSmallScreen : Bool , isCompact : Bool , isAnimating : Bool , isScrolled : Bool , isDrawerOpen : Bool }"
          },
          {
            "name": "Property",
            "comment": " Layout options. \n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Layout.Config m) m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component messages.\n",
            "args": [],
            "cases": [
              [
                "ToggleDrawer",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultModel",
            "comment": " Default component model. \n",
            "type": "Material.Layout.Model"
          },
          {
            "name": "fixedDrawer",
            "comment": " Drawer is \"fixed\": It is always open on large screens. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "fixedHeader",
            "comment": " Header is \"fixed\": It appears even on small screens. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "fixedTabs",
            "comment": " Tabs are spread out to consume available space and do not scroll horisontally.\n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "href",
            "comment": " href for Links.\n",
            "type": "String -> Material.Layout.LinkProperty m"
          },
          {
            "name": "init",
            "comment": " Layout needs initial viewport size\n",
            "type": "( Material.Layout.Model, Platform.Cmd.Cmd Material.Layout.Msg )"
          },
          {
            "name": "link",
            "comment": " Link.\n",
            "type": "List (Material.Layout.LinkProperty m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "navigation",
            "comment": " Container for links.\n",
            "type": "List (Material.Options.Style m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "onClick",
            "comment": " onClick for Links.\n",
            "type": "m -> Material.Layout.LinkProperty m"
          },
          {
            "name": "onSelectTab",
            "comment": " Receieve notification when tab `k` is selected.\n",
            "type": "(Int -> m) -> Material.Layout.Property m"
          },
          {
            "name": "render",
            "comment": " Component render. Refer to `demo/Demo.elm` on github for an example use. \nExcerpt:\n\n    Layout.render Mdl model.mdl\n      [ Layout.selectedTab model.selectedTab\n      , Layout.onSelectTab SelectTab\n      , Layout.fixedHeader\n      ]\n      { header = myHeader\n      , drawer = myDrawer\n      , tabs = (tabTitles, [])\n      , main = [ MyComponent.view model ]\n      }\n",
            "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> Material.Layout.Container b -> List (Material.Layout.Property c) -> Material.Layout.Contents c -> Html.Html c"
          },
          {
            "name": "rippleTabs",
            "comment": " Make tabs ripple when clicked. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "row",
            "comment": " Header row. \n",
            "type": "List (Material.Layout.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "scrolling",
            "comment": " Header scrolls with contents. \n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "seamed",
            "comment": " Header behaves as \"Seamed\" header: it does not cast shadow, is permanently\naffixed to the top of the screen.\n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "selectedTab",
            "comment": " Set the selected tab. \n",
            "type": "Int -> Material.Layout.Property m"
          },
          {
            "name": "spacer",
            "comment": " Push subsequent elements in header row or drawer column to the right/bottom.\n",
            "type": "Html.Html m"
          },
          {
            "name": "sub0",
            "comment": " Component subscription initialiser. Either this or \n`init` must be connected for the Layout to be responsive under\nviewport size changes. Example use: \n",
            "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> Platform.Cmd.Cmd c"
          },
          {
            "name": "subs",
            "comment": " Component subscriptions (type compatible with render). Either this or \n`subscriptions` must be connected for the Layout to be responsive under\nviewport size changes. \n",
            "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> x -> Platform.Sub.Sub c"
          },
          {
            "name": "subscriptions",
            "comment": " Layout subscribes to changes in viewport size. \n",
            "type": "x -> Platform.Sub.Sub Material.Layout.Msg"
          },
          {
            "name": "title",
            "comment": " Title in header row or drawer.\n",
            "type": "List (Material.Layout.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "toggleDrawer",
            "comment": " Toggle drawer. \n\nThis function is for use with parts typing. For plain TEA, simply issue \nan update for the exposed Msg `ToggleDrawer`. \n",
            "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> c"
          },
          {
            "name": "transparentHeader",
            "comment": " Header is transparent: It draws on top of the layout's background\n",
            "type": "Material.Layout.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Layout.Msg -> Material.Layout.Model -> ( Material.Layout.Model, Platform.Cmd.Cmd Material.Layout.Msg )"
          },
          {
            "name": "view",
            "comment": " Main layout view.\n",
            "type": "(Material.Layout.Msg -> m) -> Material.Layout.Model -> List (Material.Layout.Property m) -> Material.Layout.Contents m -> Html.Html m"
          },
          {
            "name": "waterfall",
            "comment": " Header behaves as \"Waterfall\" header: On scroll, the top (argument `True`) or\nthe bottom (argument `False`) of the header disappears. \n",
            "type": "Bool -> Material.Layout.Property m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Button",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#buttons-section):\n\n> The Material Design Lite (MDL) button component is an enhanced version of the\n> standard HTML `<button>` element. A button consists of text and/or an image that\n> clearly communicates what action will occur when the user clicks or touches it.\n> The MDL button component provides various types of buttons, and allows you to\n> add both display and click effects.\n>\n> Buttons are a ubiquitous feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the button component's Material\n> Design specifications page for details.\n>\n> The available button display types are flat (default), raised, fab, mini-fab,\n> and icon; any of these types may be plain (light gray) or colored, and may be\n> initially or programmatically disabled. The fab, mini-fab, and icon button\n> types typically use a small image as their caption rather than text.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/buttons.html).\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/buttons) \nfor a live demo. \n\n# Render\n@docs render\n\n# Options\n\n@docs Property\n\n## Appearance\n@docs plain, colored, primary, accent\n@docs ripple, disabled\n  \n## Events\n@docs onClick\n\n## Type \nRefer to the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html)\nfor details about what type of buttons are appropriate for which situations.\n@docs flat, raised, fab, minifab, icon\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update, view\n\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " \n",
            "args": [],
            "type": "Material.Ripple.Model"
          },
          {
            "name": "Msg",
            "comment": " Component action.\n",
            "args": [],
            "type": "Material.Ripple.Msg"
          },
          {
            "name": "Property",
            "comment": " Properties for Button options.\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Button.Config m) m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "accent",
            "comment": " Color button with accent color. \n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "colored",
            "comment": " Color button with primary or accent color depending on button type.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "defaultModel",
            "comment": "\n",
            "type": "Material.Button.Model"
          },
          {
            "name": "disabled",
            "comment": " Set button to \"disabled\".\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "fab",
            "comment": " Floating Msg Button. From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons-floating-action-button.html):\n\n> Floating action buttons are used for a promoted action. They are distinguished\n> by a circled icon floating above the UI and have motion behaviors that include\n> morphing, launching, and a transferring anchor point.\n>\n> Floating action buttons come in two sizes:\n>\n>  - Default size: For most use cases\n>  - Mini size: Only used to create visual continuity with other screen elements\n\nThis constructor produces the default size, use `minifab` to get the mini-size.\n\nExample use (colored with a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    fabButton : Html\n    fabButton = fab addr model Colored [Icon.i \"add\"]\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "flat",
            "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-flat-buttons):\n\n> Flat buttons are printed on material. They do not lift, but fill with color on\n> press.\n>\n> Use flat buttons in the following locations:\n>\n>  - On toolbars\n>  - In dialogs, to unify the button action with the dialog content\n>  - Inline, with padding, so the user can easily find them\n\nExample use (uncolored flat button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    flatButton : Html\n    flatButton = Button.flat addr model Button.Plain [text \"Click me!\"]\n\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "icon",
            "comment": " The [Material Design Lite implementation](https://www.getmdl.io/components/index.html#buttons-section)\nalso offers an \"icon button\", which we\nre-implement here. See also\n[Material Design Specification](http://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons).\nExample use (no color, displaying a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    iconButton : Html\n    iconButton = icon addr model Plain [Icon.i \"add\"]\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "minifab",
            "comment": " Mini-sized variant of a Floating Msg Button; refer to `fab`.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "onClick",
            "comment": " Add an `on \"click\"` handler to a button. \n",
            "type": "m -> Material.Button.Property m"
          },
          {
            "name": "plain",
            "comment": " Plain, uncolored button (default). \n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "primary",
            "comment": " Color button with primary color.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "raised",
            "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-raised-buttons):\n\n> Raised buttons add dimension to mostly flat layouts. They emphasize functions\n> on busy or wide spaces.\n>\n> Raised buttons behave like a piece of material resting on another sheet –\n> they lift and fill with color on press.\n\nExample use (colored raised button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    raisedButton : Html\n    raisedButton = Button.raised addr model Button.Colored [text \"Click me!\"]\n\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "render",
            "comment": " Component render.  Below is an example, assuming boilerplate setup as\nindicated in `Material`, and a user message `PollMsg`.\n    Button.render Mdl [0] model.mdl\n      [ Button.raised\n      , Button.ripple\n      , Button.onClick PollMsg\n      ]\n      [ text \"Fetch new\"]\n",
            "type": "(Parts.Msg (Material.Button.Container c) -> m) -> Parts.Index -> Material.Button.Container c -> List (Material.Button.Property m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "ripple",
            "comment": " Set button to ripple when clicked.\n",
            "type": "Material.Button.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Button.Msg -> Material.Button.Model -> ( Material.Button.Model, Platform.Cmd.Cmd Material.Button.Msg )"
          },
          {
            "name": "view",
            "comment": " Component view function.\n",
            "type": "(Material.Button.Msg -> m) -> Material.Button.Model -> List (Material.Button.Property m) -> List (Html.Html m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Scheme",
        "comment": " \nThe elm-mdl library depends on Google's MDL CSS implementation, and your\napplication must load this CSS in order for elm-mdl to function correctly.\nThere are two ways to accomplish this: \n\n1. Load CSS from HTML by adding suitable `<link ...>` directives to the\nHTML-file containing your app, or \n2. Load CSS from Elm (by inserting `style` elements into the DOM).\n\n\n# Load CSS from HTML \n\nTo load CSS manually, add the following to your main html file. \n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.1.3/material.min.css\" />\n\n# Loading CSS from Elm \n\n@docs topWithScheme, top\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "top",
            "comment": " Top-level container with default color scheme. See `topWithScheme` above.\n",
            "type": "Html.Html a -> Html.Html a"
          },
          {
            "name": "topWithScheme",
            "comment": " Top-level container for Material components. This will force loading of\nMaterial Design Lite CSS files by inserting an appropriate `style` element.\n\nSupply primary and accent colors as parameters. Refer to the Material Design\nLite [Custom CSS theme builder](https://www.getmdl.io/customize/index.html)\nto preview combinations.  Please be aware that Grey, Blue Grey, and Brown\ncannot be secondary colors. If you choose them as such anyway, you will get the\ndefault theme.\n\n**NB!** Using this top-level container is not recommended, as most browsers\nwill load CSS requested from `style` elements concurrently with rendering the\ninitial page, which will produce a flicker on page load. The container is\nincluded only to provide an option to get started quickly and for use with\nelm-reactor.\n\nExample use: \n\n  view : Model -> Html Msg\n  view = \n    div \n      []\n      [ Scheme.topWithScheme Color.Teal Color.Red contents\n      , ...\n      ]\n",
            "type": "Material.Color.Hue -> Material.Color.Hue -> Html.Html a -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Snackbar",
        "comment": " From the [Material Design Lite documentation](https://www.getmdl.io/components/index.html#snackbar-section):\n\n> The Material Design Lite (MDL) __snackbar__ component is a container used to\n> notify a user of an operation's status. It displays at the bottom of the\n> screen. A snackbar may contain an action button to execute a command for the\n> user. Msgs should undo the committed action or retry it if it failed for\n> example. Msgs should not be to close the snackbar. By not providing an\n> action, the snackbar becomes a __toast__ component.\n\nRefer to [this site](http://debois.github.io/elm-mdl#/snackbar)\nfor a live demo. \n\n# Generating messages\n@docs Contents, toast, snackbar, add\n\n# Elm Architecture\n\n@docs Model, model\n@docs Msg, update\n@docs view\n\n# Render\nSnackbar does not have a `render` value. It must be used as a regular TEA\ncomponent. \n",
        "aliases": [
          {
            "name": "Contents",
            "comment": " Defines a single snackbar message. Usually, you would use either `toast`\nor `snackbar` to construct `Contents`.\n\n - `message` defines the (text) message displayed\n - `action` defines a label for the action-button in the snackbar. If \n    no action is provided, the snackbar is a message-only toast. \n - `payload` defines the data returned by Snackbar actions for this message. \n   You will usually choose this to be an Msg of yours for later dispatch, \n   e.g., if your snackbar has an \"Undo\" action, you would store the\n   corresponding action as the payload. \n - `timeout` is the amount of time the snackbar should be visible\n - `fade` is the duration of the fading animation of the snackbar. \n\nIf you are satsified with the default timeout and fade, do not construct\nvalues of this type yourself; use `snackbar` and `toast` below instead. \n",
            "args": [
              "a"
            ],
            "type": "{ message : String , action : Maybe.Maybe String , payload : a , timeout : Time.Time , fade : Time.Time }"
          },
          {
            "name": "Model",
            "comment": " Do not construct this yourself; use `model` below.\n",
            "args": [
              "a"
            ],
            "type": "{ queue : List (Material.Snackbar.Contents a) , state : Material.Snackbar.State a , seq : Int }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Elm Architecture Msg type.  \nThe following actions are observable to you: \n- `Begin a`. The snackbar is now displaying the message with payload `a`.\n- `End a`. The snackbar is done displaying the message with payload `a`.\n- `Click a`. The user clicked the action on the message with payload `a`.\nYou can consume these three actions without forwarding them to `Snackbar.update`.\n(You still need to forward other Snackbar actions.)\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Begin",
                [
                  "a"
                ]
              ],
              [
                "End",
                [
                  "a"
                ]
              ],
              [
                "Click",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a message to the snackbar. If another message is currently displayed, \nthe provided message will be queued. You will be able to observe a `Begin` action\n(see `Msg` above) once the action begins displaying.\n\nYou must dispatch the returned effect for the Snackbar to begin displaying your\nmessage.\n",
            "type": "Material.Snackbar.Contents a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Platform.Cmd.Cmd (Material.Snackbar.Msg a) )"
          },
          {
            "name": "model",
            "comment": " Default snackbar model.\n",
            "type": "Material.Snackbar.Model a"
          },
          {
            "name": "snackbar",
            "comment": " Generate snackbar with given payload, message and label. \nTimeout is 2750ms, fade 250ms.\n",
            "type": "a -> String -> String -> Material.Snackbar.Contents a"
          },
          {
            "name": "toast",
            "comment": " Generate toast with given payload and message. Timeout is 2750ms, fade 250ms.\n",
            "type": "a -> String -> Material.Snackbar.Contents a"
          },
          {
            "name": "update",
            "comment": " Elm Architecture update function. \n",
            "type": "Material.Snackbar.Msg a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Platform.Cmd.Cmd (Material.Snackbar.Msg a) )"
          },
          {
            "name": "view",
            "comment": " Elm architecture update function. \n",
            "type": "Material.Snackbar.Model a -> Html.Html (Material.Snackbar.Msg a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Grid",
        "comment": " From the\n[Material Design Lite documentation](http://www.getmdl.io/components/#layout-section/grid):\n\n> The Material Design Lite (MDL) grid component is a simplified method for laying\n> out content for multiple screen sizes. It reduces the usual coding burden\n> required to correctly display blocks of content in a variety of display\n> conditions.\n>\n> The MDL grid is defined and enclosed by a container element. A grid has 12\n> columns in the desktop screen size, 8 in the tablet size, and 4 in the phone\n> size, each size having predefined margins and gutters. Cells are laid out\n> sequentially in a row, in the order they are defined, with some exceptions:\n>\n>   - If a cell doesn't fit in the row in one of the screen sizes, it flows\n>     into the following line.\n>   - If a cell has a specified column size equal to or larger than the number\n>     of columns for the current screen size, it takes up the entirety of its\n>     row.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/grid)\nfor a live demo. \n\nExample use:\n\n    import Material.Grid exposing (grid, cell, size, Device(..))\n\n    top : (Html a)\n    top =\n      grid []\n        [ cell [ size All 4 ]\n            [ h4 [] [text \"Cell 1\"]\n            ]\n        , cell [ offset All 2, size All 4 ]\n            [ h4 [] [text \"Cell 2\"]\n            , p [] [text \"This cell is offset by 2\"]\n            ]\n        , cell [ size All 6 ]\n            [ h4 [] [text \"Cell 3\"]\n            ]\n        , cell [ size Tablet 6, size Desktop 12, size Phone 2 ]\n            [ h4 [] [text \"Cell 4\"]\n            , p [] [text \"Size varies with device\"]\n            ]\n        ]\n\n# Grid container\n@docs grid, noSpacing, maxWidth\n\n# Cells\n\nCells are configured with a `List Style`; this configuration dictates the\nsize, offset, etc. of the cell. \n\n@docs cell, Cell, Device, size, offset, Align, align, hide, order\n",
        "aliases": [],
        "types": [
          {
            "name": "Align",
            "comment": " Alignment of cell contents; use with `align`.\n",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Middle",
                []
              ],
              [
                "Bottom",
                []
              ]
            ]
          },
          {
            "name": "Cell",
            "comment": " Opaque cell type.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Device",
            "comment": " Device specifiers, used with `size` and `offset`. (A `Device` really\nencapsulates a screen size.)\n",
            "args": [],
            "cases": [
              [
                "All",
                []
              ],
              [
                "Desktop",
                []
              ],
              [
                "Tablet",
                []
              ],
              [
                "Phone",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "align",
            "comment": " Specify vertical cell alignment. See `Align`.\n",
            "type": "Material.Grid.Align -> Material.Options.Style a"
          },
          {
            "name": "cell",
            "comment": " Construct a cell for use in the argument list for `grid`. Note that this\nmodule defines exposing various styles to set size, offset, etc. of the cell. \n",
            "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Grid.Cell a"
          },
          {
            "name": "grid",
            "comment": " Construct a grid with options.\n",
            "type": "List (Material.Options.Style a) -> List (Material.Grid.Cell a) -> Html.Html a"
          },
          {
            "name": "hide",
            "comment": " Specify that a cell should be hidden on given `Device`.\n",
            "type": "Material.Grid.Device -> Material.Options.Style a"
          },
          {
            "name": "maxWidth",
            "comment": " Set maximum grid width. If more space is available, the grid stays centered with\npadding on either side. Width must be a valid CSS dimension. \n",
            "type": "String -> Material.Options.Style a"
          },
          {
            "name": "noSpacing",
            "comment": " Set grid to have no spacing between cells. \n",
            "type": "Material.Options.Style a"
          },
          {
            "name": "offset",
            "comment": " Specify cell offset, i.e., empty number of empty cells before the present\none. On devices of type `Device`, leave `Int` columns blank before the present\none begins.\n",
            "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
          },
          {
            "name": "order",
            "comment": " Specify that a cell should re-order itself to position 'Int' on `Device`.\n",
            "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
          },
          {
            "name": "size",
            "comment": " Specify cell size. On devices of type `Device`, the\ncell being specified spans `Int` columns.\n",
            "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Elevation",
        "comment": " From the [Material Design Lite documentation](https://github.com/google/material-design-lite/blob/master/src/shadow/README.md)\n\n> The Material Design Lite (MDL) shadow is not a component in the same sense as\n> an MDL card, menu, or textbox; it is a visual effect that can be assigned to a\n> user interface element. The effect simulates a three-dimensional positioning of\n> the element, as though it is slightly raised above the surface it rests upon —\n> a positive z-axis value, in user interface terms. The shadow starts at the\n> edges of the element and gradually fades outward, providing a realistic 3-D\n> effect.\n> \n> Shadows are a convenient and intuitive means of distinguishing an element from\n> its surroundings. A shadow can draw the user's eye to an object and emphasize\n> the object's importance, uniqueness, or immediacy.\n> \n> Shadows are a well-established feature in user interfaces, and provide users\n> with a visual clue to an object's intended use or value. Their design and use\n> is an important factor in the overall user experience.)\n\nThe [Material Design Specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-elevation-android-)\npre-defines appropriate elevation for most UI elements; you need to manually\nassign shadows only to your own elements. \n\nYou are encouraged to visit the\n[Material Design specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html)\nfor details about appropriate use of shadows. \n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/elevation)\nfor a live demo. \n  \n\n# Elevations\nEach of the values below denote an elevation of a certain heigh, e.g., \n`e4` will cast a shadow indicating an elevation of 4dp. \n@docs e2, e3, e4, e6, e8, e16, e24\n@docs elevations\n\n# Transitions\n@docs transition\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "e16",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e2",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e24",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e3",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e4",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e6",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "e8",
            "comment": "\n",
            "type": "Material.Options.Property a m"
          },
          {
            "name": "elevations",
            "comment": " List of all elevations and their depth in dp. \n",
            "type": "List ( Material.Options.Property a m, Int )"
          },
          {
            "name": "transition",
            "comment": " Add a CSS-transition to changes in elevation. Supply a transition\nduration in milliseconds as argument. \n\nNB! This Property a m is dictated by neither MDL nor the Material Design\nSpecification. \n",
            "type": "Float -> Material.Options.Property a m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Progress",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#loading-section):\n\n> The Material Design Lite (MDL) progress component is a visual indicator of\n> background activity in a web page or application. A progress indicator\n> consists of a (typically) horizontal bar containing some animation that\n> conveys a sense of motion. While some progress devices indicate an\n> approximate or specific percentage of completion, the MDL progress component\n> simply communicates the fact that an activity is ongoing and is not yet\n> complete.\n\n> Progress indicators are an established but non-standardized feature in user\n> interfaces, and provide users with a visual clue to an application's status.\n> Their design and use is therefore an important factor in the overall user\n> experience. See the progress component's Material Design specifications page\n> for details.\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#/loading)\nfor a live demo.\n\n# Render\n@docs indeterminate, progress, buffered\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "buffered",
            "comment": " A buffered progress bar. First argument is completion in percentage, second\nargument indicates buffering in percentage.\n",
            "type": "Float -> Float -> Html.Html m"
          },
          {
            "name": "indeterminate",
            "comment": " An indeterminate progress bar.\n",
            "type": "Html.Html m"
          },
          {
            "name": "progress",
            "comment": " A progress bar. First argument is completion in percentage.\n",
            "type": "Float -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Textfield",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#textfields-section):\n\n> The Material Design Lite (MDL) text field component is an enhanced version of\n> the standard HTML `<input type=\"text\">` and `<input type=\"textarea\">` elements.\n> A text field consists of a horizontal line indicating where keyboard input\n> can occur and, typically, text that clearly communicates the intended\n> contents of the text field. The MDL text field component provides various\n> types of text fields, and allows you to add both display and click effects.\n>\n> Text fields are a common feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the text field component's\n> [Material  Design specifications page](https://www.google.com/design/spec/components/text-fields.html)\n> for details.\n>\n> The enhanced text field component has a more vivid visual look than a standard\n> text field, and may be initially or programmatically disabled. There are three\n> main types of text fields in the text field component, each with its own basic\n> coding requirements. The types are single-line, multi-line, and expandable.\n\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/textfields)\nfor a live demo.\n \nThis implementation provides only single-line and password.\n\n# Component render\n@docs render\n\n# Options\n@docs Property, value\n  \n# Appearance\n@docs label, floatingLabel, error, disabled, rows, cols\n\n# Type \n@docs password, textarea, text', onInput\n\n# Elm Architecture\n@docs Msg, Model, defaultModel, update, view\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model. The textfield is in its error-container if `error` is not `Nothing`.\nThe contents of the field is `value`.\n",
            "args": [],
            "type": "{ isFocused : Bool, value : String }"
          },
          {
            "name": "Property",
            "comment": "\n  TODO\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property (Material.Textfield.Config m) m"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Component actions. `Input` carries the new value of the field.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "cols",
            "comment": "\n  TODO\n",
            "type": "Int -> Material.Textfield.Property m"
          },
          {
            "name": "defaultModel",
            "comment": " Default model. No label, error, or value.\n",
            "type": "Material.Textfield.Model"
          },
          {
            "name": "disabled",
            "comment": " \n  TODO\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "error",
            "comment": "\n  TODO\n",
            "type": "String -> Material.Textfield.Property m"
          },
          {
            "name": "floatingLabel",
            "comment": " \n  TODO\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "label",
            "comment": "\n  TODO\n",
            "type": "String -> Material.Textfield.Property m"
          },
          {
            "name": "onInput",
            "comment": "\n  TODO\n",
            "type": "(String -> m) -> Material.Textfield.Property m"
          },
          {
            "name": "password",
            "comment": " Sets the type of input to 'password'.\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "render",
            "comment": " Component render. Below is an example, assuming boilerplate setup as indicated \n  in `Material`, and a user message `ChangeAgeMsg Int`.\n\n    Textfield.render Mdl [0] model.mdl\n      [ Textfield.label \"Your age?\"\n      , Textfield.floatingLabel\n      , Textfield.value model.age\n      , Textfield.onInput (String.toInt >> ChangeAgeMsg)\n      ]\n",
            "type": "(Parts.Msg (Material.Textfield.Container c) -> m) -> Parts.Index -> Material.Textfield.Container c -> List (Material.Textfield.Property m) -> Html.Html m"
          },
          {
            "name": "rows",
            "comment": "\n  TODO\n",
            "type": "Int -> Material.Textfield.Property m"
          },
          {
            "name": "text'",
            "comment": " Sets the type of input to 'text'. (Name chosen to avoid clashing with Html.text)\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "textarea",
            "comment": " Creates a multiline textarea using 'textarea' element\n",
            "type": "Material.Textfield.Property m"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Textfield.Msg -> Material.Textfield.Model -> Material.Textfield.Model"
          },
          {
            "name": "value",
            "comment": " \n  TODO\n",
            "type": "String -> Material.Textfield.Property m"
          },
          {
            "name": "view",
            "comment": "\n",
            "type": "Material.Textfield.Model -> List (Material.Textfield.Property Material.Textfield.Msg) -> Html.Html Material.Textfield.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Spinner",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#loading-section/spinner):\n\n> The Material Design Lite (MDL) spinner component is an enhanced replacement\n> for the classic \"wait cursor\" (which varies significantly among hardware and\n> software versions) and indicates that there is an ongoing process, the\n> results of which are not yet available. A spinner consists of an open circle\n> that changes colors as it animates in a clockwise direction, and clearly\n> communicates that a process has been started but not completed.\n\n> A spinner performs no action itself, either by its display nor when the user\n> clicks or touches it, and does not indicate a process's specific progress or\n> degree of completion. The MDL spinner component provides various types of\n> spinners, and allows you to add display effects.\n\n> Spinners are a fairly new feature of most user interfaces, and provide users\n> with a consistent visual cue about ongoing activity, regardless of hardware\n> device, operating system, or browser environment. Their design and use is an\n> important factor in the overall user experience.\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#/loading)\nfor a live demo.\n\n@docs spinner, active, singleColor\n@docs Property, Config, defaultConfig\n\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Spinner config\n",
            "args": [],
            "type": "{ active : Bool, singleColor : Bool }"
          },
          {
            "name": "Property",
            "comment": " A spinner's property.\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property Material.Spinner.Config m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "active",
            "comment": " Make a spinner visible\n",
            "type": "Bool -> Material.Spinner.Property m"
          },
          {
            "name": "defaultConfig",
            "comment": " Spinner default config is not `active`, not `singleColor`.\n",
            "type": "Material.Spinner.Config"
          },
          {
            "name": "singleColor",
            "comment": " Make a spinner a single color (the active color) of the stylesheet.\n",
            "type": "Bool -> Material.Spinner.Property m"
          },
          {
            "name": "spinner",
            "comment": " A spinner is a loading indicator that by default changes color and is invisible.\n\n    spinner [ active ] []\n",
            "type": "List (Material.Spinner.Property m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Color",
        "comment": " Material Design color palette.\n\n# Palette\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> The color palette starts with primary colors and fills in the spectrum to\n> create a complete and usable palette for Android, Web, and iOS. Google suggests\n> using the 500 colors as the primary colors in your app and the other colors as\n> accents colors.\n\n@docs Color, white, black, Hue, Shade, color\n\n# Color Schemes\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> [The Material Design] palette comprises primary and accent colors that can be\n> used for illustration or to develop your brand colors. They’ve been designed\n> to work harmoniously with each other.  [...] Apps that don’t have existing\n> color schemes may select colors from the material design color palette. Limit\n> your selection of colors to three hues from the primary palette and one\n> accent color from the secondary palette.\n\nThe Material Design Lite CSS supports this selection; you choose your primary\nand accent colors when loading MDL css; see\n`Material.top`. Many components can be instructed to take on one of the four hues\nmentioned above; below you'll find `Options` for constructing these scheme-dependent\ncolors.\n\n@docs primary, primaryDark, primaryContrast, accent, accentContrast\n\n# Options\n@docs background, text\n\n# Misc\n@docs hues, accentHues, shades, scheme\n",
        "aliases": [],
        "types": [
          {
            "name": "Color",
            "comment": " Type of colors.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Hue",
            "comment": " Color palette.\n",
            "args": [],
            "cases": [
              [
                "Indigo",
                []
              ],
              [
                "Blue",
                []
              ],
              [
                "LightBlue",
                []
              ],
              [
                "Cyan",
                []
              ],
              [
                "Teal",
                []
              ],
              [
                "Green",
                []
              ],
              [
                "LightGreen",
                []
              ],
              [
                "Lime",
                []
              ],
              [
                "Yellow",
                []
              ],
              [
                "Amber",
                []
              ],
              [
                "Orange",
                []
              ],
              [
                "Brown",
                []
              ],
              [
                "BlueGrey",
                []
              ],
              [
                "Grey",
                []
              ],
              [
                "DeepOrange",
                []
              ],
              [
                "Red",
                []
              ],
              [
                "Pink",
                []
              ],
              [
                "Purple",
                []
              ],
              [
                "DeepPurple",
                []
              ]
            ]
          },
          {
            "name": "Shade",
            "comment": "\n",
            "args": [],
            "cases": [
              [
                "S50",
                []
              ],
              [
                "S100",
                []
              ],
              [
                "S200",
                []
              ],
              [
                "S300",
                []
              ],
              [
                "S400",
                []
              ],
              [
                "S500",
                []
              ],
              [
                "S600",
                []
              ],
              [
                "S700",
                []
              ],
              [
                "S800",
                []
              ],
              [
                "S900",
                []
              ],
              [
                "A100",
                []
              ],
              [
                "A200",
                []
              ],
              [
                "A400",
                []
              ],
              [
                "A700",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "accent",
            "comment": " Accent color.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "accentContrast",
            "comment": " Accent color, contrast variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "accentHues",
            "comment": " Primary hues as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Hue"
          },
          {
            "name": "background",
            "comment": " Background color.\n",
            "type": "Material.Color.Color -> Material.Options.Property c m"
          },
          {
            "name": "black",
            "comment": " Black color.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "color",
            "comment": " Construct a specific color given a palette base hue and a shade.\n",
            "type": "Material.Color.Hue -> Material.Color.Shade -> Material.Color.Color"
          },
          {
            "name": "hues",
            "comment": " Hues as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Hue"
          },
          {
            "name": "primary",
            "comment": " Primary color of the theme.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "primaryContrast",
            "comment": " Primary color, contrast variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "primaryDark",
            "comment": " Primary color, dark variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "scheme",
            "comment": " Given primary and accent base colors, compute name of appropriate MDL .css-file.\n(You are not likely to need to call this function.)\n",
            "type": "Material.Color.Hue -> Material.Color.Hue -> String"
          },
          {
            "name": "shades",
            "comment": " Shades as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Shade"
          },
          {
            "name": "text",
            "comment": " Text or foreground color.\n",
            "type": "Material.Color.Color -> Material.Options.Property c m"
          },
          {
            "name": "white",
            "comment": " White color.\n",
            "type": "Material.Color.Color"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Badge",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#badges-section):\n\n> The Material Design Lite (MDL) badge component is an onscreen notification element.\n> A badge consists of a small circle, typically containing a number or other characters,\n> that appears in proximity to another object. A badge can be both a notifier that there\n> are additional items associated with an object and an indicator of how many items there are.\n>\n> You can use a badge to unobtrusively draw the user's attention to items they might not\n> otherwise notice, or to emphasize that items may need their attention. For example:\n>\n> A \"New messages\" notification might be followed by a badge containing the number of unread messages.\n> A \"You have unpurchased items in your shopping cart\" reminder might include a badge\n> showing the number of items in the cart.\n> A \"Join the discussion!\" button might have an accompanying badge indicating the number of\n> users currently participating in the discussion.\n> A badge is almost always positioned near a link so that the user has a convenient way to access \n> the additional information indicated by the badge. However, depending on the intent, the \n> badge itself may or may not be part of the link.\n>\n> Badges are a new feature in user interfaces, and provide users with a visual clue to help them\n> discover additional relevant content. Their design and use is therefore an important\n> factor in the overall user experience.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/badges) \nfor a live demo. \n\n@docs add, noBackground, overlap\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add a badge to the containing element.\n",
            "type": "String -> Material.Options.Property c m"
          },
          {
            "name": "noBackground",
            "comment": " No background for badge.\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "overlap",
            "comment": " Badge overlaps text/contents. \n",
            "type": "Material.Options.Property c m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Icon",
        "comment": " Convenience functions for producing Material Design Icons. Refer to\n[the Material Design Icons page](https://google.github.io/material-design-icons),\nor skip straight to the [Material Icons Library](https://design.google.com/icons/).\n\nThis implementation assumes that you have\n\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\">\n\nor an equivalent means of loading the icons in your HTML header. \n(`Material.top` will do this for you.)\n\n@docs i, view, size18, size24, size36, size48, onClick\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "i",
            "comment": " Render a default-sized icon with no behaviour. The\n`String` argument must be the name of a [Material Icon](https://design.google.com/icons/)\n(replace spaces with underscores).\n\nI.e., to produce a default size (24xp) \"trending flat\" icon:\n\n    import Material.Icon as Icon\n\n    icon : Html m\n    icon = Icon.i \"trending_flat\"\n",
            "type": "String -> Html.Html m"
          },
          {
            "name": "onClick",
            "comment": " Add an `on \"click\"` handler to an Icon. (You may want to use a `Button`\nwith `Button.icon` instead.)\n",
            "type": "m -> Material.Icon.Property m"
          },
          {
            "name": "size18",
            "comment": " Set icon to have size 18px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "size24",
            "comment": " Set icon to have size 24px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "size36",
            "comment": " Set icon to have size 36px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "size48",
            "comment": " Set icon to have size 48px. \n",
            "type": "Material.Icon.Property m"
          },
          {
            "name": "view",
            "comment": " View function for icons. Supply the\n[Material Icons Library](https://design.google.com/icons/) name as\nthe first argument (replace spaces with underscores). Set the size of the\nicon with the `size..` Styles (default is 24px).  Do not use this function to\nproduce clickable icons; use icon buttons in Material.Button.icon for that.\n\n    import Material.Icon as Icon\n\n    icon : Html m\n    icon = Icon.view \"trending_flat\" [Icon.size48] []\n",
            "type": "String -> List (Material.Icon.Property m) -> Html.Html m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Helpers",
        "comment": " Convenience functions. These are mostly trivial functions that are used\ninternally in the library; you might\nfind some of them useful. \n\n# HTML & Events\n@docs filter, blurOn, noAttr\n\n# Cmd\n@docs pure, effect, delay, fx, cssTransitionStep\n\n# Tuples\n@docs map1st, map2nd\n\n# Elm architecture\n@docs Update, Update', lift, lift'\n",
        "aliases": [
          {
            "name": "Update",
            "comment": " Standard EA update function type. \n",
            "args": [
              "model",
              "action"
            ],
            "type": "Material.Helpers.Update' model action action"
          },
          {
            "name": "Update'",
            "comment": " Variant of EA update function type, where effects may be \nlifted to a different type. \n",
            "args": [
              "model",
              "action",
              "action'"
            ],
            "type": "action -> model -> ( model, Platform.Cmd.Cmd action' )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "blurOn",
            "comment": " Attribute which causes element to blur on given event. Example use\n\n    myButton : Html\n    myButton = \n      button \n        [ blurOn \"mouseleave\" ]\n        [ text \"Click me!\" ]\n",
            "type": "String -> Html.Attribute m"
          },
          {
            "name": "cssTransitionStep",
            "comment": " Delay a command sufficiently that you can count on triggering CSS\ntransitions.\n",
            "type": "a -> Platform.Cmd.Cmd a"
          },
          {
            "name": "delay",
            "comment": " Produce a delayed effect. Suppose you want `MyMsg` to happen 200ms after\na button is clicked:\n\n    button \n      [ onClick (delay 0.2 MyMsg) ] \n      [ text \"Click me!\" ]\n",
            "type": "Time.Time -> a -> Platform.Cmd.Cmd a"
          },
          {
            "name": "effect",
            "comment": " Add an effect to a value. Example use (supposing you have an \naction `MyMsg`): \n\n    model |> effect MyMsg\n",
            "type": "Platform.Cmd.Cmd b -> a -> ( a, Platform.Cmd.Cmd b )"
          },
          {
            "name": "filter",
            "comment": " Convert a Html element from taking a list of sub-elements to a list of\n  Maybe Html. This is convenient if you want to include certain sub-elements\n",
            "type": "(a -> List b -> c) -> a -> List (Maybe.Maybe b) -> c"
          },
          {
            "name": "fx",
            "comment": "\n  TODO\n",
            "type": "msg -> Platform.Cmd.Cmd msg"
          },
          {
            "name": "lift",
            "comment": " Convenience function for writing update-function boilerplate. Example use:\n\n  case action of \n    ...\n    ButtonsMsg a -> \n      lift .buttons (\\m x->{m|buttons=x}) ButtonsMsg Demo.Buttons.update a model\n\nThis is equivalent to the more verbose\n\n  case action of \n    ...\n    ButtonsMsg a -> \n      let \n        (buttons', fx) = \n          Demo.Buttons.update a model.buttons\n      in \n        ( { model | buttons = buttons'}\n        , Cmd.map ButtonsMsg fx\n        )\n",
            "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> action) -> Material.Helpers.Update submodel subaction -> subaction -> model -> ( model, Platform.Cmd.Cmd action )"
          },
          {
            "name": "lift'",
            "comment": " Variant of `lift` for effect-free components. \n",
            "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> submodel -> submodel) -> subaction -> model -> ( model, Platform.Cmd.Cmd action )"
          },
          {
            "name": "map1st",
            "comment": " Map the first element of a tuple. \n\n    map1st ((+) 1) (1, \"foo\") == (2, \"foo\")\n",
            "type": "(a -> c) -> ( a, b ) -> ( c, b )"
          },
          {
            "name": "map2nd",
            "comment": " Map the second element of a tuple\n\n    map2nd ((+) 1) (\"bar\", 3) == (\"bar\", 4)\n",
            "type": "(b -> c) -> ( a, b ) -> ( a, c )"
          },
          {
            "name": "noAttr",
            "comment": " Fake attribute with no effect. Useful to conditionally add attributes, e.g.,\n\n    button \n      [ if model.shouldReact then \n          onClick ReactToClick\n        else\n          noAttr\n      ]\n      [ text \"Click me!\" ]\n",
            "type": "Html.Attribute a"
          },
          {
            "name": "pure",
            "comment": " Add the trivial effect to a value. Example use:\n    \n    model |> pure\n",
            "type": "a -> ( a, Platform.Cmd.Cmd b )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Material.Options",
        "comment": " Setting options for Material components. Refer to the `Material` module\nfor intended use. \n\n@docs Property\n\n# Constructors\n@docs cs, css, data, many, nop, when\n\n# Html\n@docs Style, styled, styled', div, span, onHover\n\n# Convenience\n@docs stylesheet\n\n# Internal\nThe following types and values are used internally in the library. \n@docs Summary, apply, collect, set\n\n",
        "aliases": [
          {
            "name": "Property",
            "comment": " Type of elm-mdl properties. (Do not confuse these with Html properties or\n`Html.Attributes.property`.)\nThe type variable `c` identifies the component the property is for. You never have to set it yourself. The type variable `d` by the type of your `Msg`s; you should \nset this yourself. \n",
            "args": [
              "c",
              "m"
            ],
            "type": "Material.Options.Internal.Property c m"
          },
          {
            "name": "Style",
            "comment": " Options for situations where there is no configuration, i.e., \nstyling a `div`.\n",
            "args": [
              "m"
            ],
            "type": "Material.Options.Property () m"
          },
          {
            "name": "Summary",
            "comment": " Contents of a `Property c m`.\n",
            "args": [
              "c",
              "m"
            ],
            "type": "{ classes : List String , css : List ( String, String ) , attrs : List (Html.Attribute m) , config : c }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Apply a `Summary m`, extra properties, and optional attributes \nto a standard Html node. \n",
            "type": "Material.Options.Summary c m -> (List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> List (Maybe.Maybe (Html.Attribute m)) -> a"
          },
          {
            "name": "collect",
            "comment": " Flatten a `Property a` into  a `Summary a`. Operates as `fold`\nover options; first two arguments are folding function and initial value. \n",
            "type": "c -> List (Material.Options.Property c m) -> Material.Options.Summary c m"
          },
          {
            "name": "cs",
            "comment": " Add an HTML class to a component. (Name chosen to avoid clashing with\nHtml.Attributes.class.)\n",
            "type": "String -> Material.Options.Property c m"
          },
          {
            "name": "css",
            "comment": " Add a CSS style to a component. \n",
            "type": "String -> String -> Material.Options.Property c m"
          },
          {
            "name": "data",
            "comment": " HTML data-* attributes. \n",
            "type": "String -> String -> Material.Options.Property c m"
          },
          {
            "name": "div",
            "comment": " Convenience function for the ultra-common case of apply elm-mdl styling to a\n`div` element. Use like this: \n\n    myDiv : Html m\n    myDiv = \n      Options.div\n        [ Color.background Color.primary\n        , Color.text Color.accentContrast\n        ]\n        [ text \"I'm in color!\" ]\n\n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "many",
            "comment": " Multiple options.\n",
            "type": "List (Material.Options.Property c m) -> Material.Options.Property c m"
          },
          {
            "name": "nop",
            "comment": " Do nothing. Convenient when the absence or \npresence of Options depends dynamically on other values, e.g., \n\n    div \n      [ if model.isActive then css \"active\" else nop ]\n      [ ... ]\n",
            "type": "Material.Options.Property c m"
          },
          {
            "name": "onHover",
            "comment": " Option adding an `on \"mouseover\"` event handler to an element. \nApplicable only to `Style m`, not general Properties. \n",
            "type": "m -> Material.Options.Style m"
          },
          {
            "name": "set",
            "comment": " Set a configuration value. \n",
            "type": "(c -> c) -> Material.Options.Property c m"
          },
          {
            "name": "span",
            "comment": " Convenience function for the reasonably common case of setting attributes\nof a span element. See also `div`. \n",
            "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
          },
          {
            "name": "styled",
            "comment": " Apply properties to a standard Html element. \n",
            "type": "(List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> a"
          },
          {
            "name": "styled'",
            "comment": " Apply properties and attributes to a standard Html element.\n",
            "type": "(List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> List (Html.Attribute m) -> a"
          },
          {
            "name": "stylesheet",
            "comment": " Construct an Html element contributing to the global stylesheet.\nThe resulting Html is a `<style>` element.  Remember to insert the resulting Html\nsomewhere. \n",
            "type": "String -> Html.Html m"
          },
          {
            "name": "when",
            "comment": " Conditional option. When the guard evaluates to `true`, the option is\napplied; otherwise it is ignored. Use like this: \n\n    Button.disabled `when` not model.isRunning\n",
            "type": "Material.Options.Property c m -> Bool -> Material.Options.Property c m"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "poying/elm-router",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Router.Parameter",
        "comment": "\n@docs (/:)\n\n@docs int, float, string\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "/:",
            "comment": " ",
            "type": "(Router.Parameter.Parameters -> b -> a) -> Router.Parameter.Decoder b -> Router.Parameter.Decoder a",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "float",
            "comment": " ",
            "type": "String -> Router.Parameter.Parameters -> Float"
          },
          {
            "name": "int",
            "comment": " ",
            "type": "String -> Router.Parameter.Parameters -> Int"
          },
          {
            "name": "string",
            "comment": " ",
            "type": "String -> Router.Parameter.Parameters -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Router",
        "comment": " Elm module for single page app routing\n\n```elm\nmodule Main where\n\n\nimport Result\nimport String\nimport Dict exposing (Dict)\nimport Router exposing ((:~>), (:=>))\nimport Router.Parameter exposing ((/:), int, string)\nimport Graphics.Element exposing (show)\n\n\ntype Page\n  = Home\n  | Article String Int\n  | AdminHome\n  | NotFound\n\n\nmatch =\n  Router.match router NotFound\n\n\nrouter =\n  [ \"/\" :~> always Home\n  , \"/user/:uid/article/:aid\" :~> always Article /: string \"uid\" /: int \"aid\"\n  -- nested router\n  , \"/admin\" :=> adminRouter\n  ]\n\n\nadminRouter =\n  [ \"/\" :~> always AdminHome\n  ]\n\n\nmain =\n  show <|\n    case match \"/user/poying/article/123\" of\n      Home -> \"Home\"\n      AdminHome -> \"AdminHome\"\n      Article uid aid -> \"Article \" ++ uid  ++ \" \" ++ toString aid\n      NotFound -> \"NotFound\"\n```\n\n@docs match\n\n# Types\n@docs Router\n\n# Operators\n@docs (:~>), (:=>)\n",
        "aliases": [
          {
            "name": "Router",
            "comment": " ",
            "args": [
              "a"
            ],
            "type": "List (Router.Route a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ":=>",
            "comment": "\n```elm\n\"/admin\" :=> adminRouter\n```\n",
            "type": "String -> Router.Router a -> Router.Route a",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": ":~>",
            "comment": "\n```elm\n\"/article/:id\" :~> \\params -> Article << String.toInt << (Dict.get \"id\" params)\n```\n",
            "type": "String -> (Router.Parameters -> a) -> Router.Route a",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "match",
            "comment": "\n```elm\ncase match router NotFound \"/article/3\" of\n  Article id -> show id\n  NotFound -> show \"NotFound\"\n```\n",
            "type": "Router.Router a -> a -> String -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "project-fuzzball/node",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Deprecated",
        "comment": " DEPRECATED - This has been replaced by rtfeldman/node-test-runner\n@docs deprecated\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "deprecated",
            "comment": " DEPRECATED - This has been replaced by rtfeldman/node-test-runner\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "project-fuzzball/test",
    "version": "6.0.0",
    "docs": [
      {
        "name": "Expect",
        "comment": " Determining whether tests pass or fail.\n\n## Quick Reference\n\n* [`equal`](#equal) `(arg2 == arg1)`\n* [`notEqual`](#notEqual) `(arg2 /= arg1)`\n* [`lessThan`](#lessThan) `(arg2 < arg1)`\n* [`atMost`](#atMost) `(arg2 <= arg1)`\n* [`greaterThan`](#greaterThan) `(arg2 > arg1)`\n* [`atLeast`](#atLeast) `(arg2 >= arg1)`\n* [`true`](#true) `(arg == True)`\n* [`false`](#false) `(arg == False)`\n\n## Basic Expectations\n\n@docs Expectation, equal, notEqual\n\n## Comparisons\n\n@docs lessThan, atMost, greaterThan, atLeast\n\n## Booleans\n\n@docs true, false\n\n## Customizing\n\n@docs pass, fail, onFail, getFailure\n",
        "aliases": [
          {
            "name": "Expectation",
            "comment": " The result of a single test run: either a [`pass`](#pass) or a\n[`fail`](#fail).\n",
            "args": [],
            "type": "Test.Expectation.Expectation"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "atLeast",
            "comment": " Passes if the second argument is greater than or equal to the first.\n\n    Expect.atLeast -2 (List.length [])\n\n    -- Passes because (0 >= -2) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 >= 3) is False\n    List.length []\n        |> Expect.atLeast 3\n\n    {-\n\n    0\n    ╷\n    │ Expect.atLeast\n    ╵\n    3\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "atMost",
            "comment": " Passes if the second argument is less than or equal to the first.\n\n    Expect.atMost 1 (List.length [])\n\n    -- Passes because (0 <= 1) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 <= -3) is False\n    List.length []\n        |> Expect.atMost -3\n\n    {-\n\n    0\n    ╷\n    │ Expect.atMost\n    ╵\n    -3\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "equal",
            "comment": " Passes if the arguments are equal.\n\n    Expect.equal 0 (List.length [])\n\n    -- Passes because (0 == 0) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because the expected value didn't split the space in \"Betty Botter\"\n    String.split \" \" \"Betty Botter bought some butter\"\n        |> Expect.equal [ \"Betty Botter\", \"bought\", \"some\", \"butter\" ]\n\n    {-\n\n    [ \"Betty\", \"Botter\", \"bought\", \"some\", \"butter\" ]\n    ╷\n    │ Expect.equal\n    ╵\n    [ \"Betty Botter\", \"bought\", \"some\", \"butter\" ]\n\n    -}\n",
            "type": "a -> a -> Expect.Expectation"
          },
          {
            "name": "fail",
            "comment": " Fails with the given message.\n\n    import Json.Decode exposing (decodeString, int)\n    import Test exposing (test)\n    import Expect\n\n\n    test \"Json.Decode.int can decode the number 42.\" <|\n        \\() ->\n            case decodeString int \"42\" of\n                Ok _ ->\n                    Expect.pass\n\n                Err err ->\n                    Expect.fail err\n",
            "type": "String -> Expect.Expectation"
          },
          {
            "name": "false",
            "comment": " Passes if the argument is 'False', and otherwise fails with the given message.\n\n    Expect.false \"Expected the list not to be empty.\" (List.isEmpty [ 42 ])\n\n    -- Passes because (List.isEmpty [ 42 ]) is False\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (List.isEmpty []) is True\n    List.isEmpty []\n        |> Expect.false \"Expected the list not to be empty.\"\n\n    {-\n\n    Expected the list not to be empty.\n\n    -}\n",
            "type": "String -> Bool -> Expect.Expectation"
          },
          {
            "name": "getFailure",
            "comment": " Return `Nothing` if the given [`Expectation`](#Expectation) is a [`pass`](#pass).\n\nIf it is a [`fail`](#fail), return a record containing the failure message,\nalong with the given inputs if it was a fuzz test. (If no inputs were involved,\nthe record's `given` field will be `\"\"`).\n\nFor example, if a fuzz test generates random integers, this might return\n`{ message = \"it was supposed to be positive\", given = \"-1\" }`\n\n    getFailure (Expect.fail \"this failed\")\n    -- Just { message = \"this failed\", given = \"\" }\n\n    getFailure (Expect.pass)\n    -- Nothing\n",
            "type": "Expect.Expectation -> Maybe.Maybe { given : String, message : String }"
          },
          {
            "name": "greaterThan",
            "comment": " Passes if the second argument is greater than the first.\n\n    Expect.greaterThan -2 List.length []\n\n    -- Passes because (0 > -2) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 > 1) is False\n    List.length []\n        |> Expect.greaterThan 1\n\n    {-\n\n    0\n    ╷\n    │ Expect.greaterThan\n    ╵\n    1\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "lessThan",
            "comment": " Passes if the second argument is less than the first.\n\n    Expect.lessThan 1 (List.length [])\n\n    -- Passes because (0 < 1) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because (0 < -1) is False\n    List.length []\n        |> Expect.lessThan -1\n\n\n    {-\n\n    0\n    ╷\n    │ Expect.lessThan\n    ╵\n    -1\n\n    -}\n",
            "type": "comparable -> comparable -> Expect.Expectation"
          },
          {
            "name": "notEqual",
            "comment": " Passes if the arguments are not equal.\n\n    Expect.notEqual 11 (90 + 10)\n\n    -- Passes because (11 /= 100) is True\n\nFailures only show one value, because the reason for the failure was that\nboth arguments were equal.\n\n    -- Fails because (100 /= 100) is False\n    (90 + 10)\n        |> Expect.notEqual 100\n\n    {-\n\n    100\n    ╷\n    │ Expect.notEqual\n    ╵\n    100\n\n    -}\n",
            "type": "a -> a -> Expect.Expectation"
          },
          {
            "name": "onFail",
            "comment": " If the given expectation fails, replace its failure message with a custom one.\n\n    \"something\"\n        |> Expect.equal \"something else\"\n        |> Expect.onFail \"thought those two strings would be the same\"\n",
            "type": "String -> Expect.Expectation -> Expect.Expectation"
          },
          {
            "name": "pass",
            "comment": " Always passes.\n\n    import Json.Decode exposing (decodeString, int)\n    import Test exposing (test)\n    import Expect\n\n\n    test \"Json.Decode.int can decode the number 42.\" <|\n        \\() ->\n            case decodeString int \"42\" of\n                Ok _ ->\n                    Expect.pass\n\n                Err err ->\n                    Expect.fail err\n",
            "type": "Expect.Expectation"
          },
          {
            "name": "true",
            "comment": " Passes if the argument is 'True', and otherwise fails with the given message.\n\n    Expect.true \"Expected the list to be empty.\" (List.isEmpty [])\n\n    -- Passes because (List.isEmpty []) is True\n\nFailures resemble code written in pipeline style, so you can tell\nwhich argument is which:\n\n    -- Fails because List.isEmpty returns False, but we expect True.\n    List.isEmpty [ 42 ]\n        |> Expect.true \"Expected the list to be empty.\"\n\n    {-\n\n    Expected the list to be empty.\n\n    -}\n",
            "type": "String -> Bool -> Expect.Expectation"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "project-fuzzball/test-runner",
    "version": "4.0.0",
    "docs": [
      {
        "name": "Deprecated",
        "comment": " DEPRECATED - This has been replaced by rtfeldman/html-test-runner\n@docs deprecated\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "deprecated",
            "comment": " DEPRECATED - This has been replaced by rtfeldman/html-test-runner\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "prozacchiwawa/effmodel",
    "version": "2.0.0",
    "docs": [
      {
        "name": "EffModel",
        "comment": "\n\nEffModel embodies a single value that carries both the model and accumulated\neffects for a world step in the elm architecture.\n\nThe elm architecture is nice, but a tuple of model and effect is troublesome\nto compose.  Consider the standard update function:\n\nupdate : Action -> Model -> (Model, Cmd Action)\n\nIn order to compose it, you need to destructure the result, use Cmd.batch\non the snd, and map on the first, then combine a new tuple.  EffModel replaces\nthis process and has functions that construct an effmodel either from a model\nor an update result tuple, and that produce an update result tuple from an\nEffModel.\n\nI use it extensively like this:\n\n    import EffModel as EF\n\n    handleUpdateForOneLogicalThing : Action -> EffModel Model Action -> EffModel Model Action\n    handleUpdateForOneLogicalThing action effmodel =\n        case action of\n            Increment -> effmodel |> EF.map (\\m -> { m | count = m.count + 1 })\n            Decrement ->\n                effmodel\n                -- Compose model update and an effect conveniently\n                    |> EF.map (\\m -> { m | count = m.count - 1 })\n                    |> EF.eff (Cmd.task (Task.sleep (5 * Time.second) `Task.andThen` (\\_ -> Task.succeed Increment)))\n            _ -> effmodel -- Note that you can just pass it through easily\n\n    handleUpdateForAnotherLogicalThing : Action -> EffModel Model Action -> EffModel Model Action\n\n    update : Action -> Model -> (Model, Cmd Action)\n    update action model =\n        model\n            |> wrap\n            |> handleUpdateForOneLogicalThing action\n            |> handleUpdateForAnotherLogicalThing action\n            |> unwrap\n\n# Definition\n\n@docs EffModel\n\n# Creation functions\n\n@docs wrap, wrap2\n\n# Termination\n\n@docs unwrap\n\n# Accessor\n\n@docs get\n\n# Operations\n\n@docs map, eff, effMap\n\n",
        "aliases": [
          {
            "name": "EffModel",
            "comment": "\n\nA type representing the combination of a model value and the accumulated\neffects of a chain of composed actions on a model along with emitted\neffects.\n\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ model : model, eff : Platform.Cmd.Cmd action }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "eff",
            "comment": "\n\nAdd an effect to the EffModel's accumulated effects.\n\n",
            "type": "Platform.Cmd.Cmd action -> EffModel.EffModel model action -> EffModel.EffModel model action"
          },
          {
            "name": "effMap",
            "comment": "\n\nApply Cmd.map to the accumulated effects.\n\n",
            "type": "(actionA -> actionB) -> EffModel.EffModel model actionA -> EffModel.EffModel model actionB"
          },
          {
            "name": "get",
            "comment": "\n\nGet the model from an EffModel:\n\n    case action of\n        IncrementAndNotify ->\n            effmodel\n                |> (\\effmodel -> EF.effMessage (Notify (EF.get m).count) effmodel)\n\n",
            "type": "EffModel.EffModel model action -> model"
          },
          {
            "name": "map",
            "comment": "\n\nUpdate the model in the EffModel.\n\n",
            "type": "(modelA -> modelB) -> EffModel.EffModel modelA action -> EffModel.EffModel modelB action"
          },
          {
            "name": "unwrap",
            "comment": "\n\nTerminate a chain of EffModel updates to yield Tuple of model, effects.\n\n",
            "type": "EffModel.EffModel model action -> ( model, Platform.Cmd.Cmd action )"
          },
          {
            "name": "wrap",
            "comment": "\n\nWrap a model to start an EffModel chain.\n\n",
            "type": "model -> EffModel.EffModel model action"
          },
          {
            "name": "wrap2",
            "comment": "\n\nWrap a model and previous effects (such as the result from an update) in an\nEffModel.\n\n",
            "type": "( model, Platform.Cmd.Cmd action ) -> EffModel.EffModel model action"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "pukkamustard/elm-identicon",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Identicon",
        "comment": " Generate an identicon from a string.\n\n# Functions\n@docs identicon\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "identicon",
            "comment": " Generate a identicon from a string\n\n    main =\n      identicon \"200px\" \"Hello identicon!\"\n",
            "type": "String -> String -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "r31gN/elm-dropdown",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Dropdown",
        "comment": " A customizable Dropdown component.\n\nThis Dropdown has a dynamic list of items.\n\nThe Dropdown consists of a div containing a value, a caret and a list of\npossible values.\n\nSee `Examples` folder for further details.\n\n# Definition\n@docs Dropdown, Msg\n\n# Init\n@docs init\n\n# Update\n@docs update\n\n# View\n@docs view, renderDropdownHtml\n\n# API\n@docs getValue\n\n",
        "aliases": [
          {
            "name": "Dropdown",
            "comment": " The Dropdown model. ",
            "args": [],
            "type": "{ value : String , valuesList : List String , placeholder : String , isOpen : Bool }"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Different message types the Dropdown can receive. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "getValue",
            "comment": " Get the model value. ",
            "type": "Dropdown.Dropdown -> String"
          },
          {
            "name": "init",
            "comment": " Initializing the model. ",
            "type": "String -> List String -> String -> Dropdown.Dropdown"
          },
          {
            "name": "renderDropdownHtml",
            "comment": " Dropdown HTML creator method. ",
            "type": "Dropdown.Dropdown -> Html.Html Dropdown.Msg"
          },
          {
            "name": "update",
            "comment": " Elm architecture reducer. ",
            "type": "Dropdown.Msg -> Dropdown.Dropdown -> Dropdown.Dropdown"
          },
          {
            "name": "view",
            "comment": " Dropdown view. ",
            "type": "Dropdown.Dropdown -> Html.Html Dropdown.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "rainteller/elm-capitalize",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Capitalize",
        "comment": " Capitalize your sentences.\n\n# Usage\n@docs toCapital, toCapitalAll\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toCapital",
            "comment": " Capitalize only the first word of a sentence.\n\n    toCapital \"hello world\"  -- \"Hello world\"\n",
            "type": "String -> String"
          },
          {
            "name": "toCapitalAll",
            "comment": " Capitalize each word of a sentence.\n\n    toCapitalAll \"hello world\"  -- \"Hello World\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rgrempel/elm-http-decorators",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Http.Decorators",
        "comment": " This module supplies several functions which you can use to decorate\n`Http.send` in order to create a function with additional behaviour. You can\napply the decorators to individual uses of `Http.send` -- for example:\n\n    addCacheBuster Http.send Http.defaultSettings\n        { verb = \"GET\"\n        , headers = []\n        , url = Http.url \"/api/account\" []\n        , body = Http.empty\n        }\n\nAlternatively, you can compose a decorated function and use it repeatedly, e.g.\n\n    specialSend : Settings -> Request -> Task RawError Response\n    specialSend = addCacheBuster Http.send\n\nThe definition of something like `specialSend` is left for client code, so that\nyou can mix and match whichever decorators you need. You could conceivably also\nwant to partially apply `Http.defaultSettings` (or your own defaultSettings).\nThus, one combination which can be useful is as follows:\n\n    verySpecialSend : Request -> Task Error Response\n    verySpecialSend = interpretStatus << addCacheBuster Http.send Http.defaultSettings\n\nYou could then call `verySpecialSend` like this:\n\n    verySpecialSend\n        { verb = \"GET\"\n        , headers = []\n        , url = Http.url \"/api/account\" []\n        , body = Http.empty\n        }\n\n... and, of course, you could still provide an `andThen`, `map`, `mapError`, `onError` etc.\nto do any further work that might be needed with the `Http.Error` or `Http.Result`.\n\nAlternatively, if the `Settings` need to vary at each call-site, you can do something\nlike this:\n\n    lessSpecialSend : Settings -> Request -> Task Error Response\n    lessSpecialSend settings = interpretStatus << addCacheBuster Http.send settings\n\nNote that some of this is redundant if you are using `Http.fromJson` anyway, since\n`Http.fromJson` already does the equivalent of `promoteError` and `interpretStatus`.\n\n@docs addCacheBuster, promoteError, interpretStatus\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addCacheBuster",
            "comment": " Decorates `Http.send` so that a 'cache busting' parameter will always be\nadded to the URL -- e.g. '?cacheBuster=219384729384', where the number is\nderived from the current time.  The purpose of doing this would be to help\ndefeat any caching that might otherwise take place at some point between the\nclient and server.\n",
            "type": "(Http.Settings -> Http.Request -> Task.Task Http.RawError Http.Response) -> Http.Settings -> Http.Request -> Task.Task Http.RawError Http.Response"
          },
          {
            "name": "interpretStatus",
            "comment": " Decorates the result of `Http.send` so that responses with a status code\nwhich is outside of the 2XX range are processed as `BadResponse` errors (to be\nfurther handled via `Task.onError` or `Task.mapError` etc.), rather than as\nsuccessful responses (to be further handled by `Task.andThen` or `Task.map`\netc.).  This may be useful in cases where you are not using `Http.fromJson` and\nyou do not need to distinguish amongst different types of successful status\ncode.\n\nNote that this automatically also applies `promoteError`, so you do not need to\napply that decorator as well.\n",
            "type": "Task.Task Http.RawError Http.Response -> Task.Task Http.Error Http.Response"
          },
          {
            "name": "promoteError",
            "comment": " Decorates the result of `Http.send` so that the error type is `Http.Error`\nrather than `Http.RawError`. This may be useful in cases where you are not\nusing `Http.fromJson`, and your API prefers to deal with `Http.Error` rather\nthan `Http.RawError`.\n\nPay attention to return types when composing this decorator with other\ndecorators.  For intance, if used in conjunction with `addCacheBuster`, you\nwould need to apply `addCacheBuster` first.  E.g.\n\n    -- Good\n    promoteError << addCacheBuster Http.send Http.defaultSettings\n\n    -- Bad\n    addCacheBuster promoteError << Http.send Http.defaultSettings\n",
            "type": "Task.Task Http.RawError Http.Response -> Task.Task Http.Error Http.Response"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rgrempel/elm-route-url",
    "version": "2.0.1",
    "docs": [
      {
        "name": "RouteHash",
        "comment": " This module implements the old elm-route-hash API as closely as possible,\ngiven the changes required for elm-route-url.\n\nTo transition from elm-route-hash to elm-route-url, you should be able to\nuse your existing `delta2update` and `location2action` functions without\nchanges. The only required changes are in your `Main` module.\n\nEssentially, instead of using the old `start` method and sending the resulting\nsignal to a port, you would now use [`program`](#program) or\n[`programWithFlags`](#programWithFlags), and assign the resulting `Program`\nto your `main` function.\n\nAt your leisure, you should transition to the new `RouteUrl` API, which allows\nyou to use the whole URL (rather than just the hash), since this old API will\nbe removed in a future version of elm-route-url.\n\n# Configuration\n\n@docs Config, ConfigWithFlags, defaultPrefix\n\n# Helpers for `HashUpdate`\n\n@docs HashUpdate, set, replace, apply, map, extract\n\n# Simple Initialization\n\n@docs program, programWithFlags\n\n# Complicated Initialization (usually not needed)\n\n@docs app, appWithFlags\n\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Represents the configuration necessary to use this module.\n\n*  `prefix` is the initial characters that should be stripped from the hash (if\n    present) when reacting to location changes, and added to the hash when\n    generating location changes. Normally, you'll likely want to use\n    [`defaultPrefix`](#defaultPrefix), which is \"#!/\".\n\n*   `delta2update` is a function which takes two arguments and possibly\n    returns a [`HashUpdate`](#HashUpdate). The first argument is the previous\n    model. The second argument is the current model.\n\n    The reason you are provided with both the previous and current models is\n    that sometimes the nature of the location update depends on the difference\n    between the two, not just on the latest model. For instance, if the user is\n    typing in a form, you might want to use [`replace`](#replace) rather than\n    [`set`](#set). Of course, in cases where you only need to consult the\n    current model, you can ignore the first parameter.\n\n    This module will normalize the `List String` in the update in the following\n    way before setting the actual location. It will:\n\n    * uriEncode the strings\n    * join them with \"/\"\n    * add the `prefix` to the beginning\n\n    In a modular application, you may well want to use [`map`](#map) after dispatching\n    to a lower level -- see the example in the [`map` documentation](#map).\n\n    Note that this module will automatically detect cases where you return\n    a [`HashUpdate`](#HashUpdate) which would set the same location that is\n    already set, and do nothing. Thus, you don't need to try to detect that\n    yourself.\n\n    The content of the individual strings is up to you ... essentially it\n    should be something that your `location2action` function can deal with.\n\n*   `location2action` is a function which takes a `List String` and returns\n    a list of actions your app can perform.\n\n    The argument is a normalized version of the hash portion of the location.\n    First, the `prefix` is stripped from the hash, and then the result is\n    converted to a `List String` by using '/' as a delimiter. Then, each\n    `String` value is uriDecoded.\n\n    Essentially, your `location2action` should return actions that are the\n    reverse of what your `delta2update` function produced. That is, the\n    `List String` you get back in `location2action` is the `List String` that\n    your `delta2update` used to create a [`HashUpdate`](#HashUpdate). So,\n    however you encoded your state in `delta2update`, you now need to interpret\n    that in `location2action` in order to return actions which will produce the\n    desired state.\n\n    Note that the list of actions you return will often be a single action. It\n    is a `List action` so that you can return multiple actions, if your app is\n    modular in a way that requires multiple actions to produce the desired\n    state.\n\n*   The remaining functions (`init`, `update`, `subscriptions` and `view`)\n    have the same meaning as they do in\n    [`Html.App.program`](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App#program)\n    ... that is, you should provide what you normally provide to that function.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "{ prefix : String , delta2update : model -> model -> Maybe.Maybe RouteHash.HashUpdate , location2action : List String -> List msg , init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg }"
          },
          {
            "name": "ConfigWithFlags",
            "comment": " Like [`Config`](#Config), but with flags. ",
            "args": [
              "model",
              "msg",
              "flags"
            ],
            "type": "{ prefix : String , delta2update : model -> model -> Maybe.Maybe RouteHash.HashUpdate , location2action : List String -> List msg , init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg }"
          }
        ],
        "types": [
          {
            "name": "HashUpdate",
            "comment": " An opaque type which represents an update to the hash portion of the\nbrowser's location.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "app",
            "comment": " Takes your configuration, and turns it into an `AppWithFlags`.\n\nUsually you won't need this -- you can just use [`program`](#program) to\ngo directly to a `Program` instead.\n",
            "type": "RouteHash.Config model msg -> RouteUrl.AppWithFlags model msg Basics.Never"
          },
          {
            "name": "appWithFlags",
            "comment": " Takes your configuration, and turns into into an `AppWithFlags`.\n\nUsually you won't need this -- you can just use [`programWithFlags`](#programWithFlags) to\ngo directly to a `Program` instead.\n",
            "type": "RouteHash.ConfigWithFlags model msg flags -> RouteUrl.AppWithFlags model msg flags"
          },
          {
            "name": "apply",
            "comment": " Applies the supplied function to the [`HashUpdate`](#HashUpdate). ",
            "type": "(List String -> List String) -> RouteHash.HashUpdate -> RouteHash.HashUpdate"
          },
          {
            "name": "defaultPrefix",
            "comment": " The value that you will most often want to supply as the\n`prefix` in your [`Config`](#Config). It is equal to \"#!/\".\n",
            "type": "String"
          },
          {
            "name": "extract",
            "comment": " Extracts the `List String` from the [`HashUpdate`](#HashUpdate). ",
            "type": "RouteHash.HashUpdate -> List String"
          },
          {
            "name": "map",
            "comment": " Applies the supplied function to the [`HashUpdate`](#HashUpdate).\n\nYou might use this function when dispatching in a modular application.\nFor instance, your [`delta2update`](#Config) function might look something like this:\n\n    delta2update : Model -> Model -> Maybe HashUpdate\n    delta2update old new =\n        case new.virtualPage of\n            PageTag1 ->\n                RouteHash.map ((::) \"page-tag-1\") PageModule1.delta2update old new\n\n            PageTag2 ->\n                RouteHash.map ((::) \"page-tag-2\") PageModule2.delta2update old new\n\nOf course, your model and modules may be set up differently. However you do it,\nthe `map` function allows you to dispatch `delta2update` to a lower-level module,\nand then modify the `Maybe HashUpdate` which it returns.\n",
            "type": "(List String -> List String) -> Maybe.Maybe RouteHash.HashUpdate -> Maybe.Maybe RouteHash.HashUpdate"
          },
          {
            "name": "program",
            "comment": " Takes your configuration, and turns it into a `Program` that can be\nused in your `main` function.\n",
            "type": "RouteHash.Config model msg -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " Takes your configuration, and turns it into a `Program flags` that can be\nused in your `main` function.\n",
            "type": "RouteHash.ConfigWithFlags model msg flags -> Platform.Program flags"
          },
          {
            "name": "replace",
            "comment": " Returns a [`HashUpdate`](#HashUpdate) that will update the browser's\nlocation, replacing the current history entry.\n\nThe `List String` represents the hash portion of the location. Each element of\nthe list will be uriEncoded, and then the list will be joined using slashes\n(\"/\"). Finally, a prefix will be applied (by [default](#defaultPrefix), \"#!/\",\nbut it is configurable).\n",
            "type": "List String -> RouteHash.HashUpdate"
          },
          {
            "name": "set",
            "comment": " Returns a [`HashUpdate`](#HashUpdate) that will update the browser's\nlocation, creating a new history entry.\n\nThe `List String` represents the hash portion of the location. Each element of\nthe list will be uriEncoded, and then the list will be joined using slashes\n(\"/\"). Finally, a prefix will be applied (by [default](#defaultPrefix), \"#!/\",\nbut it is configurable).\n",
            "type": "List String -> RouteHash.HashUpdate"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "RouteUrl.Builder",
        "comment": " This module provides a type which you can use to help construct a\n`UrlChange` or parse a `Location`.\n\nHowever, the `Builder` type is not really the focus of elm-route-url.\n\n* Ultimately, a `UrlChange` just requires a `String` -- you don't need to\n  use this module to construct one.\n\n* You also don't need to use this module to parse a `Location` -- there are a\n  fair number of relevant packages for that, including:\n\n    * [evancz/url-parser](http://package.elm-lang.org/packages/evancz/url-parser/latest)\n    * [Bogdanp/elm-combine](http://package.elm-lang.org/packages/Bogdanp/elm-combine/latest)\n    * [Bogdanp/elm-route](http://package.elm-lang.org/packages/Bogdanp/elm-route/latest)\n    * [etaque/elm-route-parser](http://package.elm-lang.org/packages/etaque/elm-route-parser/latest)\n    * [poyang/elm-router](http://package.elm-lang.org/packages/poying/elm-router/latest)\n    * [sporto/erl](http://package.elm-lang.org/packages/sporto/erl/latest)\n    * [sporto/hop](http://package.elm-lang.org/packages/sporto/hop/latest)\n\nSo, this module is potentially useful, but there are quite a few other\noptions you may wish to investigate.\n\nNote that you should not uri-encode anything provided to this module. That\nwill be done for you.\n\n# Initialization\n\n@docs Builder, builder\n\n# Creating or modifying history entries\n\n@docs entry, newEntry, modifyEntry\n\n# Manipulating the path\n\n@docs path, modifyPath, prependToPath, appendToPath, replacePath\n\n# Manipulating the query\n\n@docs query, modifyQuery, insertQuery, updateQuery, removeQuery, getQuery, replaceQuery\n\n# Manipulating the hash\n\n@docs hash, modifyHash, replaceHash\n\n# Conversion\n\n@docs toUrlChange, toHashChange, fromUrl, fromHash\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Builder",
            "comment": " An opaque type which helps to build up a URL for a `URLChange`,\nor parse a `Location`.\n\nStart with [`builder`](#builder), and then use other functions to make changes.\nOr, if you have a URL, start with [`fromUrl`](#fromUrl) or [`fromHash`](#fromHash).\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "appendToPath",
            "comment": " Add the provided list to the end of the builder's path. ",
            "type": "List String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "builder",
            "comment": " Creates a default `Builder`. Start with this, then use other methods\nto build up the URL.\n\n    url : Builder\n    url =\n        builder\n        |> newEntry\n        |> appendToPath [\"home\"]\n",
            "type": "RouteUrl.Builder.Builder"
          },
          {
            "name": "entry",
            "comment": " Indicates whether the `Builder` will make a new entry in the browser's\nhistory, or merely modify the current entry.\n",
            "type": "RouteUrl.Builder.Builder -> RouteUrl.HistoryEntry"
          },
          {
            "name": "fromHash",
            "comment": " Constructs a `Builder` from the hash portion of a URL.\n\n* Assumes that the hash starts with \"#!/\".\n\n* Assumes that any embedded hash is delimited with a '$' instead of a '#'.\n\n* Assumes that any embedded query parameters being with a '^' instead of\n  a '?'.\n\n",
            "type": "String -> RouteUrl.Builder.Builder"
          },
          {
            "name": "fromUrl",
            "comment": " Constructs a `Builder` from a URL. ",
            "type": "String -> RouteUrl.Builder.Builder"
          },
          {
            "name": "getQuery",
            "comment": " Get the value for a query key. ",
            "type": "String -> RouteUrl.Builder.Builder -> Maybe.Maybe String"
          },
          {
            "name": "hash",
            "comment": " Gets the hash portion of the URL, without the \"#\". ",
            "type": "RouteUrl.Builder.Builder -> String"
          },
          {
            "name": "insertQuery",
            "comment": " Insert a key/value pair into the query. Replaces a key with the same name,\nin case of collision.\n",
            "type": "String -> String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "modifyEntry",
            "comment": " Modify the current entry in the browser's history. ",
            "type": "RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "modifyHash",
            "comment": " Replace the hash with the result of a function applied to the current hash. ",
            "type": "(String -> String) -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "modifyPath",
            "comment": " Replace the path with the result of a function which acts on\nthe current path.\n",
            "type": "(List String -> List String) -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "modifyQuery",
            "comment": " Replace the query with the result of a function that acts on the current query.\n",
            "type": "(Dict.Dict String String -> Dict.Dict String String) -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "newEntry",
            "comment": " Make a new entry in the browser's history. ",
            "type": "RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "path",
            "comment": " The segments of the path. The path is represented by a list of strings.\nUltimately, they will be uri-encoded for you, and joined with a \"/\".\n",
            "type": "RouteUrl.Builder.Builder -> List String"
          },
          {
            "name": "prependToPath",
            "comment": " Add the provided list to the beginning of the builder's path. ",
            "type": "List String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "query",
            "comment": " The query portion of the URL. It is represented by a `Dict` of\nkey/value pairs.\n",
            "type": "RouteUrl.Builder.Builder -> Dict.Dict String String"
          },
          {
            "name": "removeQuery",
            "comment": " Remove a query key. ",
            "type": "String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "replaceHash",
            "comment": " Replace the hash with the provided value. Note that you should not include the \"#\". ",
            "type": "String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "replacePath",
            "comment": " Sets the path to the provided list. ",
            "type": "List String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "replaceQuery",
            "comment": " Replace the whole query with a different dictionary. ",
            "type": "Dict.Dict String String -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          },
          {
            "name": "toHashChange",
            "comment": " Like [`toUrlChange`](#toUrlChange), but puts everything into the hash, prepended by \"#!\".\n\nIf your `Builder` has a hash component, we'll use '$' instead of '#' to\ndelimit the embedded hash. And, we will use '^' instead of '?' to begin\nthe query parameters.\n",
            "type": "RouteUrl.Builder.Builder -> RouteUrl.UrlChange"
          },
          {
            "name": "toUrlChange",
            "comment": " Once you've built up your URL, use this to convert it to a `UrlChange` for use with\n`RouteUrl`.\n",
            "type": "RouteUrl.Builder.Builder -> RouteUrl.UrlChange"
          },
          {
            "name": "updateQuery",
            "comment": " Update a particular query key using the given function. ",
            "type": "String -> (Maybe.Maybe String -> Maybe.Maybe String) -> RouteUrl.Builder.Builder -> RouteUrl.Builder.Builder"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "RouteUrl",
        "comment": " This module provides routing for single-page apps based on changes to the\n the browser's location. The routing happens in both directions\n-- that is, changes to the browser's location are translated to messages\nyour app can respond to, and changes to your app's state are translated to\nchanges in the browser's location. The net effect is to make it possible for\nthe 'back' and 'forward' buttons in the browser to do useful things, and for\nthe state of your app to be partially bookmark-able.\n\nIt is, of course, possible to do something like this using\n[`elm-lang/navigation`](http://package.elm-lang.org/packages/elm-lang/navigation/latest)\nby itself. For a discussion of the\ndifferences between the official module and this one, see the [package documentation]\n(http://package.elm-lang.org/packages/rgrempel/elm-route-url/latest).\n\n# Configuration\n\nYou configure this module by providing the functions set out in [`App`](#App) or\n[`AppWithFlags`](#AppWithFlags), depending on what kind of `init` function you\nwant to use.\n\n@docs App, AppWithFlags\n\n# URL Changes\n\nYou use `UrlChange` and `HistoryEntry` to indicate changes to the URL to be\ndisplayed in the browser's location bar.\n\n@docs UrlChange, HistoryEntry\n\n# Initialization (the simple version)\n\nThe simplest way to use this module is to do something like this:\n\n* Define your [`App`](#App) or [`AppWithFlags`](#AppWithFlags) record.\n\n* Use [`program`](#program) or [`programWithFlags`](#programWithFlags) to\n  create your `main` function, instead of their homonymous equivalents in\n  [`Html.App`](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App).\n\n@docs program, programWithFlags\n\n# More complex initialization (not usually needed)\n\n@docs NavigationApp, navigationApp, navigationAppWithFlags, runNavigationApp\n",
        "aliases": [
          {
            "name": "App",
            "comment": " The configuration required to use this module to create a `Program`.\n\nThe `init`, `update`, `subscriptions` and `view` fields have the same meaning\nas they do in [`Html.App.program`](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App#program)\n-- that is, you should provide what you normally provide to that function.\n\nSo, the \"special\" fields are the `delta2url` function and the\n`location2messages` function.\n\n* `delta2url` will be called when your model changes. The first parameter is\n  the model's previous value, and the second is the model's new value.\n\n  Your function should return a `Just UrlChange` if a new URL should be\n  displayed in the browser's location bar (or `Nothing` if no change to the URL\n  is needed). This library will check the current URL before setting a new one,\n  so you need not worry about setting duplicate URLs -- that will be\n  automatically avoided.\n\n  The reason we provide both the previous and current model for your\n  consideration is that sometimes you may want to do something differently\n  depending on the nature of the change in the model, not just the new value.\n  For instance, it might make the difference between using `NewEntry` or\n  `ModifyEntry` to make the change.\n\n  Note that this function will *not* be called when processing messages\n  returned from your `location2messages` function, since in that case the\n  URL has already been set.\n\n  If you are familiar with elm-route-hash, `delta2url` is analogous to the old\n  `delta2update` function -- just renamed to reflect the fact that you can\n  change the whole URL now, not just the hash.\n\n* `location2messages` will be called when a change in the browser's URL is\n  detected, either because the user followed a link, typed something in the\n  location bar, or used the back or forward buttons.\n\n  Note that this function will *not* be called when your `delta2url` method\n  initiates a `UrlChange` -- since in that case, the relevant change in the\n  model has already occurred.\n\n  Your function should return a list of messages that your `update` function\n  can respond to. Those messages will be fed into your app, to produce the\n  changes to the model that the new URL implies.\n\n  If you are familiar with elm-route-hash, `location2messages` is analogous to\n  the old `location2actions` function -- just renamed to reflected the\n  terminology change from `action` to `msg` in Elm 0.17.\n",
            "args": [
              "model",
              "msg"
            ],
            "type": "{ delta2url : model -> model -> Maybe.Maybe RouteUrl.UrlChange , location2messages : Navigation.Location -> List msg , init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg }"
          },
          {
            "name": "AppWithFlags",
            "comment": " The configuration needed to use this module to make a `Program flags`.\n\nThe `init`, `update`, `subscriptions` and `view` fields have the same meaning\nas they do in\n[`Html.App.programWithFlags`](http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-App#program)\n-- that is, you should provide what you normally provide to that function.\n\nSo, the special functions are `delta2url` and `location2messages`,\nwhich are described above, under [`App`](#App).\n",
            "args": [
              "model",
              "msg",
              "flags"
            ],
            "type": "{ delta2url : model -> model -> Maybe.Maybe RouteUrl.UrlChange , location2messages : Navigation.Location -> List msg , init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg }"
          },
          {
            "name": "NavigationApp",
            "comment": " A type which represents the various inputs to\n[`Navigation.programWithFlags`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#programWithFlags).\n\nYou can produce this via [`navigationAppWithFlags`](#navigationAppWithFlags)\nor [`navigationApp`](#navigationApp). Then, you can supply this to\n[`runNavigationApp`](#runNavigationApp) in order to create a `Program`.\n\nNormally you don't need this -- you can just use [`program`](#program) or\n[`programWithFlags`](#programWithFlags). However, `NavigationApp` could be\nuseful if you want to do any further wrapping of its functions.\n",
            "args": [
              "model",
              "msg",
              "flags"
            ],
            "type": "{ parser : Navigation.Parser Navigation.Location , init : flags -> Navigation.Location -> ( RouteUrl.Model model, Platform.Cmd.Cmd msg ) , update : msg -> RouteUrl.Model model -> ( RouteUrl.Model model, Platform.Cmd.Cmd msg ) , urlUpdate : Navigation.Location -> RouteUrl.Model model -> ( RouteUrl.Model model, Platform.Cmd.Cmd msg ) , view : RouteUrl.Model model -> Html.Html msg , subscriptions : RouteUrl.Model model -> Platform.Sub.Sub msg }"
          },
          {
            "name": "UrlChange",
            "comment": " Indicates a change to be made in the URL, either creating\na new entry in the browser's history (`NewEntry`), or merely replacing the\ncurrent URL (`ModifyEntry`).\n\nThis is ultimately implemented via\n[`Navigation.newUrl`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#newUrl) or\n[`Navigation.modifyUrl`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#modifyUrl).\nThe reason we use this intermediate type is so that we can check whether the\nprovided string already corresponds to the current URL. In that case, we can\navoid creating a spurious duplicate entry in the browser's history.\n\nThe reason we take a `String` (rather than a more structured type) is that\nthere may be several ways you might want to build up the required URL. We\ndon't want to be prescriptive about that. However, the `String` you provide\nmust follow a couple of rules.\n\n* The `String` must already be uri-encoded.\n\n* The `String` must either start with a '/', a `?' or a '#'.\n\n    * If it starts with a '/', it will be interpreted as a full path, including\n      optional query parameters and hash.\n\n    * If it starts with a '?', then we'll assume that you want the current\n      path to stay the same -- only the query parameters and hash will change.\n\n    * If it starts with a '#', then we'll assume that you want the current\n      path and query parameters (if any) to stay the same -- only the\n      hash will change.\n\nSo, what you should *not* provide is the scheme, host, or authentication\nmethod -- that is, no \"http://elm-lang.org\". You should also not use relative\nURLs. (Let me know if you'd like relative URLs -- we might be able to do\nsomething sensible with them, but we don't yet in this version).\n\nOne way to construct a `UrlChange` in a modular way is to use the\n`RouteUrl.Builder` module. However, a variety of approaches are possible.\n",
            "args": [],
            "type": "{ entry : RouteUrl.HistoryEntry, url : String }"
          }
        ],
        "types": [
          {
            "name": "HistoryEntry",
            "comment": " Indicates whether to create a new entry in the browser's history, or merely\nmodify the current entry.\n\nOne could have used a `Bool` for this instead, but I hate remembering what\n`True` actually means.\n",
            "args": [],
            "cases": [
              [
                "NewEntry",
                []
              ],
              [
                "ModifyEntry",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "navigationApp",
            "comment": " Given your configuration, this function does some wrapping and produces\nthe functions which\n[`Navigation.programWithFlags`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#programWithFlags)\nrequires.\n\nNormally, you don't need this -- you can just use [`program`](#program).\n",
            "type": "RouteUrl.App model msg -> RouteUrl.NavigationApp model msg Basics.Never"
          },
          {
            "name": "navigationAppWithFlags",
            "comment": " Given your configuration, this function does some wrapping and produces\nthe functions which\n[`Navigation.programWithFlags`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#programWithFlags)\nrequires.\n\nNormally, you don't need this -- you can just use [`programWithFlags`](#programWithFlags).\n",
            "type": "RouteUrl.AppWithFlags model msg flags -> RouteUrl.NavigationApp model msg flags"
          },
          {
            "name": "program",
            "comment": " Turns your configuration into a `Program` that you can assign to your\n`main` function.\n",
            "type": "RouteUrl.App model msg -> Platform.Program Basics.Never"
          },
          {
            "name": "programWithFlags",
            "comment": " Turns your configuration into a `Program flags` that you can assign to your\n`main` function.\n",
            "type": "RouteUrl.AppWithFlags model msg flags -> Platform.Program flags"
          },
          {
            "name": "runNavigationApp",
            "comment": " Turns the output from [`navigationApp`](#navigationApp)\nor [`navigationAppWithFlags`](#navigationAppWithFlags) into a `Program` that\nyou can assign to your `main` function.\n\nFor convenience, you will usually want to just use [`program`](#program) or\n[`programWithFlags`](#programWithFlags), which go directly from the required\nconfiguration to a `Program`. You would only want `runNavigationApp` for the\nsake of composability -- that is, in case there is something further you want\nto do with the `NavigationApp` structure before turning it into a `Program`.\n",
            "type": "RouteUrl.NavigationApp model msg flags -> Platform.Program flags"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rhofour/elm-pairing-heap",
    "version": "1.0.1",
    "docs": [
      {
        "name": "PairingHeap",
        "comment": " This is a simple pairing heap implementation written in Elm usable as a priority queue. This code is\nbased heavily on the pseudocode available at [the Wikipedia page](https://en.wikipedia.org/wiki/Pairing_heap).\n\n# Type and Constructor\n@docs PairingHeap, empty\n\n# Operations\n@docs insert, merge, findMin, deleteMin\n\n# Convenience functions\n@docs fromList, toSortedList\n",
        "aliases": [],
        "types": [
          {
            "name": "PairingHeap",
            "comment": " A `PairingHeap` has comparable keys and values of an arbitrary type.\n",
            "args": [
              "comparable",
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "deleteMin",
            "comment": " Removes the minimum element from a `PairingHeap` returning a new heap without that element.\nThis will return an empty heap if given an empty heap as input.\n\nComplexity: O(log n)\n",
            "type": "PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "empty",
            "comment": " Create an empty PairingHeap.\n",
            "type": "PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "findMin",
            "comment": " Find the minimum value in a heap returning Nothing if the heap is empty.\n\nComplexity: O(1)\n\n    findMin (fromList [(10, ()), (3, ()), (8, ())]) == Just 3\n",
            "type": "PairingHeap.PairingHeap comparable a -> Maybe.Maybe ( comparable, a )"
          },
          {
            "name": "fromList",
            "comment": " This function turns a list of key-value pairs into a `PairingHeap`.\n\nComplexity: O(n)\n",
            "type": "List ( comparable, a ) -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "insert",
            "comment": " Inserts a new element into a `PairingHeap`.\n\nComplexity: O(1)\n",
            "type": "( comparable, a ) -> PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "merge",
            "comment": " Merges two `PairingHeap`s together into one new heap containing all of the key-value pairs from both inputs.\n\nComplexity: O(1)\n",
            "type": "PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "toSortedList",
            "comment": " This function turns a `PairingHeap` into a sorted list of key-value pairs.\n\nComplexity: O(n log n)\n",
            "type": "PairingHeap.PairingHeap comparable a -> List ( comparable, a )"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "rluiten/elm-date-extra",
    "version": "8.0.0",
    "docs": [
      {
        "name": "Date.Extra.Utils",
        "comment": " Date Utils.\n\n2016/14/23 `fromString` was removed as its extra date validity checking had problems in\nmany timezones so it became the same as `Date.fromString`.\n\n## Date parsing\n**Be careful with unsafeFromString it will Debug.crash() if it cant parse date.**\n@docs unsafeFromString\n\n## Utility\n@docs dayList\n@docs isoWeek\n@docs isoWeekOne\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayList",
            "comment": " Return a list of days dayLength long for successive days\nstarting from startDate.\n",
            "type": "Int -> Date.Date -> List Date.Date"
          },
          {
            "name": "isoWeek",
            "comment": " Return iso week values year, week, isoDayOfWeek.\nInput date is expected to be in local time zone of vm.\n",
            "type": "Date.Date -> ( Int, Int, Int )"
          },
          {
            "name": "isoWeekOne",
            "comment": " Return date of start of ISO week one for given year. ",
            "type": "Int -> Date.Date"
          },
          {
            "name": "unsafeFromString",
            "comment": " Utility for known input string date creation cases.\nChecks for a fail just in case and calls Debug.crash().\n",
            "type": "String -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.TimeUnit",
        "comment": " Reduce or Increase a date to a given start or end of a TimeUnit granularity.\n\nThis allows you to modify a date to reset to minimum or maximum values\nall values below a given TimeUnit granulariy.\n\nThis operates in local time zone so if you are not in UTC time zone\nand you output date in UTC time zone the datefields will not be to the start\nor end of the TimeUnit.\n\nExample `TimeUnit.startOfTime Hour date` will return a modified date with\n* Minutes to 0\n* Seconds to 0\n* Milliseconds to 0\n\nExample `TimeUnit.endOfTime Hour date` will return a modified date with\n* Minutes to 59\n* Seconds to 59\n* Milliseconds to 999\n\n\n@docs startOfTime\n@docs endOfTime\n@docs TimeUnit\n\n**Warning about using endOfTime for date ranges**\n\nIn the past when I have encountered people using a function like endOfTime\n(max date at a given granularity) it was being used in ways that could introduce\nproblems.\n\nHere is why.\n\n* You want to do a date range comparison between the minimum date\n(or current date) and this maximum date. In all the cases I can\nremember they were doing a date range comparison using\nGreater Than Or Equal To minimum date and Less Than or Equal To maximum date.\n * I can't state strongly enough that this is not the way to do date ranges\n it leads to missed matches that fall between the generated maximum date\n and the following date at the same granularity in systems were you are\n working at a granularity larger than the underlying stored granularity.\n Even if you are working at the smallest granularity of the system its a\n not a good way to think about ranges.\n * When comparing date ranges I strongly suggest you always use a\n half closed interval. This means always build date ranges using\n Greater Than or Equal To minimum date and Less Than maximum date.\n (This applies to floating point numbers as well).\n  * Its equivalently safe to go Greater Than minimum and\n  Less Than or Equal to maximum, in my experience business understanding\n  nearly always dictated include minimum excluded maximum.\n * Once you do this there is no possible gap and it becomes easier to think about.\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "TimeUnit",
            "comment": " Date granularity of operations. ",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "endOfTime",
            "comment": " Return a date created by increasing to maximum value all values below\na given TimeUnit granularity.\n\nThis modifies in local time zone values, as the date element parts\nare pulled straight from the local time zone date values.\n",
            "type": "Date.Extra.TimeUnit.TimeUnit -> Date.Date -> Date.Date"
          },
          {
            "name": "startOfTime",
            "comment": " Return a date created by reducing to minimum value all values below\na given TimeUnit granularity.\n\nThis modifies date in local time zone values, as the date element parts\nare pulled straight from the local time zone date values.\n",
            "type": "Date.Extra.TimeUnit.TimeUnit -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Field",
        "comment": " Setting a date field on a date.\n\n@docs fieldToDate\n@docs fieldToDateClamp\n@docs Field\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Field",
            "comment": " Configured Field and Value to set on date.\n\nAll field values are applied Modulus there maximum value.\n\n\n* DayOfWeek\n * The week keeps the same start of week day as passed in and changes day.\n* Month\n * Will not change year only the month of year.\n\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                [
                  "Int"
                ]
              ],
              [
                "Second",
                [
                  "Int"
                ]
              ],
              [
                "Minute",
                [
                  "Int"
                ]
              ],
              [
                "Hour",
                [
                  "Int"
                ]
              ],
              [
                "DayOfWeek",
                [
                  "( Date.Day, Date.Day )"
                ]
              ],
              [
                "DayOfMonth",
                [
                  "Int"
                ]
              ],
              [
                "Month",
                [
                  "Date.Month"
                ]
              ],
              [
                "Year",
                [
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "fieldToDate",
            "comment": " Set a field on a date to a specific value.\n\nIf your value in field is out side of valid range for\nthe date field this function will return Nothing.\n\n* DayOfWeek cannot be invalid input range\n* Month cannot be invalid\n\nValid ranges\n* Millisecond 0 to 999\n* Second 0 to 59\n* Minute 0 to 59\n* Hour 0 to 23\n* DayOfMonth 1 to max day of month for year\n* Year >= 0\n\n",
            "type": "Date.Extra.Field.Field -> Date.Date -> Maybe.Maybe Date.Date"
          },
          {
            "name": "fieldToDateClamp",
            "comment": "  Set a field on a date to a specific value.\n\nThis version clamps any input Field values to valid ranges as\ndescribed in the doc for fieldToDate function.\n",
            "type": "Date.Extra.Field.Field -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Duration",
        "comment": " A Duration is a length of time that may vary with with calendar date\nand time. It can be used to modify a date.\n\nWhen modify dates using Durations (Day | Month | Week | Year) this module\ncompensates for day light saving hour variations to minimise the scenarios\nthat cause the Hour field in the result to be different to the input date.\nIt can't completely avoid the hour changing as some hours are not a real\nworld date and hence will modify the hour more than the Duration modified.\n\nThis behaviour is modelled on momentjs so any observed behaviour that is\nnot the same as momentjs should be raised as in issue.\n\nNote adding or subtracting 24 * Hour units from a date may produce a\ndifferent answer to adding or subtracting a Day if day light saving\ntransitions occur as part of the date change.\n\n**Warning**\n\nBe careful if you add Duration Delta to a Date as Duration contains months\nand Years which are not fixed elapsed times like Period Delta, however if\nyou really need a relative number of months or years then it may meet\nyour needs.\n\n@docs add\n@docs Duration\n@docs DeltaRecord\n@docs zeroDelta\n@docs diff\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "DeltaRecord",
            "comment": " A multi granularity duration delta.\n\nThis does not contain week like Period.DeltaRecord.\nIt does contain month and year.\n",
            "args": [],
            "type": "{ year : Int , month : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int }"
          }
        ],
        "types": [
          {
            "name": "Duration",
            "comment": " A Duration is time period that may vary with with calendar and time.\n\nUsing `Duration` adding 24 hours can produce different result to adding 1 day.\n\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ],
              [
                "Delta",
                [
                  "Date.Extra.Duration.DeltaRecord"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add duration * count to date. ",
            "type": "Date.Extra.Duration.Duration -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "diff",
            "comment": " Return a Period representing date difference. date1 - date2.\n\nIf  you add the result of this function to date2 with addend of 1\nwill return date1.\n\n**Differences to Period.diff**\n\n* Duration DeltaRecord excludes week field\n* Duration DeltaRecord includes month field\n* Duration DeltaRecord includes year field\n* Day is number of days difference between months.\n\nWhen adding a Duration DeltaRecord to a date.\nThe larger granularity fields are added before lower granularity fields\nso Years are added before Months before Days etc.\n\n* Very different behaviour to Period diff\n * If date1 > date2 then all fields in DeltaRecord will be positive or zero.\n * If date1 < date2 then all fields in DeltaRecord will be negative or zero.\n* Because it deals with non fixed length periods of time\n\nExample 1.\n  days in 2016/05 (May) = 31\n  days in 2016/04 (Apr) = 30\n  days in 2016/03 (Mar) = 31\n\n  days in 2015/03 (Mar) = 31\n\n  diff of \"2016/05/15\" \"2015/03/20\"\n  result naive field diff.\n    year 1, month 2, day -5\n\n  days \"2015/03/20\" to \"2015/04/01\" (31 - 20) = 11 days (12). still in march with 11.\n  days \"2015/04/01\" to \"2016/04/15\" (15 - 1) = 14 days\n  months \"2016/04/15\" to \"2016/05/15\" 1 months\n  result field diff\n    year 1, month 1, day 26\n\n  This logic applies all the way down to milliseconds.\n\n\n\n ",
            "type": "Date.Date -> Date.Date -> Date.Extra.Duration.DeltaRecord"
          },
          {
            "name": "zeroDelta",
            "comment": " All zero delta.\nUseful as a starting point if you want to set a few fields only.\n",
            "type": "Date.Extra.Duration.DeltaRecord"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Format",
        "comment": " Date Format, turning dates into strings.\n\nThe format code originally came from and was modified and extended from.\nhttps://github.com/mgold/elm-date-format/blob/1.0.4/src/Date/Format.elm\n\n## Date presentation\n@docs format\n@docs formatUtc\n@docs formatOffset\n\n## Extra presentation convenience\n@docs isoString\n@docs isoStringNoOffset\n@docs utcIsoString\n\n## Low level formats used in specific places in library.\n@docs isoDateString\n@docs utcIsoDateString\n\n## Useful strings for format\n@docs isoFormat\n@docs isoMsecFormat\n@docs isoOffsetFormat\n@docs isoMsecOffsetFormat\n@docs isoDateFormat\n@docs isoTimeFormat\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Use a format string to format a date.\nThis gets time zone offset from provided date.\n",
            "type": "Date.Extra.Config.Config -> String -> Date.Date -> String"
          },
          {
            "name": "formatOffset",
            "comment": " This adjusts date for offset, and renders with the offset ",
            "type": "Date.Extra.Config.Config -> Int -> String -> Date.Date -> String"
          },
          {
            "name": "formatUtc",
            "comment": " Convert date to utc then format it with offset set to 0 if rendered. ",
            "type": "Date.Extra.Config.Config -> String -> Date.Date -> String"
          },
          {
            "name": "isoDateFormat",
            "comment": " ISO Date. ",
            "type": "String"
          },
          {
            "name": "isoDateString",
            "comment": " Return date as string.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoFormat",
            "comment": " ISO date time, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoMsecFormat",
            "comment": " ISO Date time with milliseconds, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoMsecOffsetFormat",
            "comment": " ISO Date time with milliseconds and timezone, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoOffsetFormat",
            "comment": " ISO Date time with timezone, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoString",
            "comment": " Return date and time as string in local zone. ",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoStringNoOffset",
            "comment": " Return date and time as string in local zone, without\na timezone offset as otuput by `Format.isoString`.\nIntroduced to deal with dates assuming local time zone.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoTimeFormat",
            "comment": " ISO Time 24hr. ",
            "type": "String"
          },
          {
            "name": "utcIsoDateString",
            "comment": " Utc variant of isoDateString.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "utcIsoString",
            "comment": " Return date and time as string in ISO form with Z for UTC offset. ",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Create",
        "comment": " Create dates and offsets.\n\n@docs getTimezoneOffset\n@docs dateFromFields\n@docs timeFromFields\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dateFromFields",
            "comment": " Create a date in current time zone from given fields.\nAll field values are clamped to there allowed range values.\nHours are input in 24 hour time range 0 to 23 valid.\nReturns dates in current time zone.\n\nUsing algorithm from http://howardhinnant.github.io/date_algorithms.html\nSpecifically days_from_civil function.\n\nThe two `<*>Compensate` values adjust for the zone offset time\nintroduced by `epochDate` as starting point.\n",
            "type": "Int -> Date.Month -> Int -> Int -> Int -> Int -> Int -> Date.Date"
          },
          {
            "name": "getTimezoneOffset",
            "comment": " Return the time zone offset of current javascript environment underneath\nElm in Minutes. This should produce the same result getTimezoneOffset()\nfor a given date in the same javascript VM.\n\nTime zone offset is always for a given date and time so an input date is required.\n\nGiven that timezones change (though slowly) this is not strictly pure, but\nI suspect it is sufficiently pure to be useful. Is is dependent on the timezone\nmechanics of the javascript VM.\n\n### Example zone stuff.\nFor an offset of -600 minutes, in +10:00 time zone offset.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "timeFromFields",
            "comment": " Create a time in current time zone from given fields, for\nwhen you dont care about the date part but need time part anyway.\n\nAll field values are clamped to there allowed range values.\nThis can only return dates in current time zone.\n\nHours are input in 24 hour time range 0 to 23 valid.\n\nThis defaults to year 1970, month Jan, day of month 1 for date part.\n",
            "type": "Int -> Int -> Int -> Int -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Configs",
        "comment": " Get a Date Extra Config based up on a locale code.\n\n@docs getConfig\n@docs configs\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "configs",
            "comment": " Built in configurations. ",
            "type": "Dict.Dict String Date.Extra.Config.Config"
          },
          {
            "name": "getConfig",
            "comment": " Get a Date Extra Config for a locale id.\n\nLower case matches strings and accepts \"-\" or \"_\" to seperate\nthe characters in code.\n\nReturns \"en_us\" config if it can't find a match in configs.\n",
            "type": "String -> Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Period",
        "comment": " Period is a fixed length of time.\n\nName of type concept copied from NodaTime.\n\nThis module has no concept of Months or Years which have variable lenghts of time.\nFor that see Duration.\n\n@docs add\n@docs diff\n@docs Period\n@docs DeltaRecord\n@docs zeroDelta\n@docs toTicks\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "DeltaRecord",
            "comment": " A multi granularity period delta. ",
            "args": [],
            "type": "{ week : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int }"
          }
        ],
        "types": [
          {
            "name": "Period",
            "comment": " A Period.\n\nWeek is a convenience for users if they want to use it, it does\njust scale Day in functionality so is not strictly required.\n\nDELTARECORD values are multiplied addend on application.\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Delta",
                [
                  "Date.Extra.Period.DeltaRecord"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add Period count to date. ",
            "type": "Date.Extra.Period.Period -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "diff",
            "comment": " Return a Period representing date difference. date1 - date2.\n\nIf  you add the result of this function to date2 with addend of 1\nwill return date1.\n ",
            "type": "Date.Date -> Date.Date -> Date.Extra.Period.DeltaRecord"
          },
          {
            "name": "toTicks",
            "comment": " Return tick counts for periods.\nUseful to get total ticks in a Delta.\n",
            "type": "Date.Extra.Period.Period -> Int"
          },
          {
            "name": "zeroDelta",
            "comment": " All zero delta.\nUseful as a starting point if you want to set a few fields only.\n",
            "type": "Date.Extra.Period.DeltaRecord"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Compare",
        "comment": " Compare dates.\n\n@docs is\n@docs is3\n@docs Compare2\n@docs Compare3\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "Compare2",
            "comment": " Date comparison type for 2 dates.\n\n* After\n * Return True if date1 is after date2.\n* Before\n * Return True if date1 is before date2.\n* Same\n * Return True if date1 is same as date2.\n* SameOrAfter\n * Return True if date1 is same or after date2.\n* SameOrBefore\n * Return True if date1 is same or before date2.\n",
            "args": [],
            "cases": [
              [
                "After",
                []
              ],
              [
                "Before",
                []
              ],
              [
                "Same",
                []
              ],
              [
                "SameOrAfter",
                []
              ],
              [
                "SameOrBefore",
                []
              ]
            ]
          },
          {
            "name": "Compare3",
            "comment": " Date comparison type for 3 dates.\n\nBetween does not care if date2 > date3 or date2 < date3.\n\n* Between\n * Return True if date1 is After date2 and Before date3\n * Return True if date1 is After date3 and Before date2\n* BetweenOpenStart\n * Return True if date1 is SameOrAfter date2 and Before date3\n* BetweenOpenEnd\n * Return True if date1 is After date2 and SameOrBefore date3\n* BetweenOpen\n * Return True if date1 is SameOrAfter date2 and SameOrBefore date3\n",
            "args": [],
            "cases": [
              [
                "Between",
                []
              ],
              [
                "BetweenOpenStart",
                []
              ],
              [
                "BetweenOpenEnd",
                []
              ],
              [
                "BetweenOpen",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "is",
            "comment": " Compare two dates.\n",
            "type": "Date.Extra.Compare.Compare2 -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "is3",
            "comment": " Compare three dates.\n\nThis figures out the low and high bounds from date2\nand date3 using minimum and maximum of them respectively.\n",
            "type": "Date.Extra.Compare.Compare3 -> Date.Date -> Date.Date -> Date.Date -> Bool"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_us",
        "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-us. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_au",
        "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-au. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_gb",
        "comment": " This is the UK english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Bruno Girin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-gb. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Config_pl_pl",
        "comment": " This is the Polish config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Bartosz Sokół\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for pl-pl. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Config_fi_fi",
        "comment": " This is the Finnish config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Ossi Hanhinen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for fi-fi. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config.Config_fr_fr",
        "comment": " This is the French config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Bruno Girin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for fr-fr. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Core",
        "comment": " Date core.\n\n## Info\n@docs monthToInt\n@docs intToMonth\n@docs daysInMonth\n@docs monthList\n@docs daysInNextMonth\n@docs daysInPrevMonth\n@docs daysInMonthDate\n@docs isLeapYear\n@docs isLeapYearDate\n@docs yearToDayLength\n@docs isoDayOfWeek\n\n## Utility\n@docs toFirstOfMonth\n@docs firstOfNextMonthDate\n@docs lastOfMonthDate\n@docs lastOfPrevMonthDate\n@docs daysBackToStartOfWeek\n\n## Conversion\n@docs fromTime\n@docs toTime\n\n## Iteration Utility\n@docs nextDay\n@docs prevDay\n@docs nextMonth\n@docs prevMonth\n\n## Date constants\n@docs epochDateStr\n\n## Date constants\n@docs ticksAMillisecond\n@docs ticksASecond\n@docs ticksAMinute\n@docs ticksAnHour\n@docs ticksADay\n@docs ticksAWeek\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "daysBackToStartOfWeek",
            "comment": " Days back to start of week day. ",
            "type": "Date.Day -> Date.Day -> Int"
          },
          {
            "name": "daysInMonth",
            "comment": " Return days in month for year month. ",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "daysInMonthDate",
            "comment": " Days in month for given date. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "daysInNextMonth",
            "comment": " Return days in next calendar month. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "daysInPrevMonth",
            "comment": " Return days in previous calendar month. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "epochDateStr",
            "comment": " Epoch starting point for tick 0. ",
            "type": "String"
          },
          {
            "name": "firstOfNextMonthDate",
            "comment": " Return first of next month date. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "fromTime",
            "comment": " Convenience fromTime as time ticks are Elm Ints in this library. ",
            "type": "Int -> Date.Date"
          },
          {
            "name": "intToMonth",
            "comment": " Return integer as month. Jan <= 1 Feb == 2 up to Dec > 11. ",
            "type": "Int -> Date.Month"
          },
          {
            "name": "isLeapYear",
            "comment": " Return True if Year is a leap year. ",
            "type": "Int -> Bool"
          },
          {
            "name": "isLeapYearDate",
            "comment": " Return True if Year of Date is a leap year. ",
            "type": "Date.Date -> Bool"
          },
          {
            "name": "isoDayOfWeek",
            "comment": " Return the Iso DayOfWeek Monday 1, to Sunday 7. ",
            "type": "Date.Day -> Int"
          },
          {
            "name": "lastOfMonthDate",
            "comment": " Resturn date of last day of month. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "lastOfPrevMonthDate",
            "comment": " Return last of previous month date. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "monthList",
            "comment": " List of months in order from Jan to Dec. ",
            "type": "List Date.Month"
          },
          {
            "name": "monthToInt",
            "comment": " Return month as integer. Jan = 1 to Dec = 12. ",
            "type": "Date.Month -> Int"
          },
          {
            "name": "nextDay",
            "comment": " Return next day in calendar sequence. ",
            "type": "Date.Day -> Date.Day"
          },
          {
            "name": "nextMonth",
            "comment": " Return next month in calendar sequence. ",
            "type": "Date.Month -> Date.Month"
          },
          {
            "name": "prevDay",
            "comment": " Return previous day in calendar sequence. ",
            "type": "Date.Day -> Date.Day"
          },
          {
            "name": "prevMonth",
            "comment": " Return previous month in calendar sequence. ",
            "type": "Date.Month -> Date.Month"
          },
          {
            "name": "ticksADay",
            "comment": " Ticks in a day. ",
            "type": "Int"
          },
          {
            "name": "ticksAMillisecond",
            "comment": " Ticks in a millisecond. (this is 1 on Win 7 in Chrome) ",
            "type": "Int"
          },
          {
            "name": "ticksAMinute",
            "comment": " Ticks in a minute. ",
            "type": "Int"
          },
          {
            "name": "ticksASecond",
            "comment": " Ticks in a second. ",
            "type": "Int"
          },
          {
            "name": "ticksAWeek",
            "comment": " Ticks in a week. ",
            "type": "Int"
          },
          {
            "name": "ticksAnHour",
            "comment": " Ticks in an hour. ",
            "type": "Int"
          },
          {
            "name": "toFirstOfMonth",
            "comment": " Return date of first of month. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "toTime",
            "comment": " Convenience toTime as time ticks are Elm Ints in this library. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "yearToDayLength",
            "comment": " Return number of days in a year. ",
            "type": "Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.I18n.I_en_us",
        "comment": " English values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " Returns a common english idiom for days of month.\nPad indicates space pad the day of month value so single\ndigit outputs have space padding to make them same\nlength as double digit days of monnth.\n",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.I18n.I_pl_pl",
        "comment": " Polish values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Bartosz Sokół\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " This may not do anything in French ",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.Config",
        "comment": " Date configuration.\n\nFor i18n for day and month names.\nParameter to Format.format* functions.\n\nThere is scope to put in some default format strings here.\n\n@docs Config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Configuration for formatting dates. ",
            "args": [],
            "type": "{ i18n : { dayShort : Date.Day -> String , dayName : Date.Day -> String , monthShort : Date.Month -> String , monthName : Date.Month -> String , dayOfMonthWithSuffix : Bool -> Int -> String } , format : { date : String , longDate : String , time : String , longTime : String , dateTime : String , firstDayOfWeek : Date.Day } }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.I18n.I_fi_fi",
        "comment": " Finnish values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Ossi Hanhinen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " This may not do anything in Finish ",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Date.Extra.I18n.I_fr_fr",
        "comment": " French values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n@docs dayOfMonthWithSuffix\n\nCopyright (c) 2016 Bruno Girin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayOfMonthWithSuffix",
            "comment": " This may not do anything in French ",
            "type": "Bool -> Int -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rluiten/elm-text-search",
    "version": "2.1.2",
    "docs": [
      {
        "name": "ElmTextSearch",
        "comment": " A full text indexer written in Elm language inspired by lunr.js.\n\nA useful article about lunr.js\nhttps://www.new-bamboo.co.uk/blog/2013/02/26/full-text-search-in-your-browser/\n\n## Create Index\n@docs new\n@docs newWith\n\n## Modify Index\n@docs add\n@docs addDocs\n@docs remove\n@docs update\n\n## Query Index\n@docs search\n\n## Types\n@docs Index\n@docs Config\n@docs SimpleConfig\n\n## Save and Load an Index\n\n* You can save an index using [`ElmTextSearch.Json.Encoder.encoder`](ElmTextSearch.Json.Encoder#encoder)\n* You can load a saved index using\n  [`ElmTextSearch.Json.Decoder.decoder`](ElmTextSearch.Json.Decoder#decoder)\n  to produce a [`Index.Model.CodecIndexRecord`](Index.Model#CodecIndexRecord).\n* You can save a [`Index.Model.CodecIndexRecord`](Index.Model#CodecIndexRecord)\n  using [`ElmTextSearch.Json.Encoder.codecIndexRecordEncoder`](ElmTextSearch.Json.Encoder#codecIndexRecordEncoder)\n* ** Modifying an index outside of ElmTextSearch using the Decoder and Encoder directly\nmay cause it to not work correctly loaded into ElmTextSearch. **\n\n@docs storeToValue\n@docs storeToString\n@docs fromString\n@docs fromValue\n@docs fromStringWith\n@docs fromValueWith\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " A Config is required to create an Index. ",
            "args": [
              "doc"
            ],
            "type": "Index.Model.Config doc"
          },
          {
            "name": "Index",
            "comment": " An Index holds the data to be able search for added documents.\n",
            "args": [
              "doc"
            ],
            "type": "Index.Index doc"
          },
          {
            "name": "SimpleConfig",
            "comment": " A SimpleConfig is the least amount of configuration data\nrequired to create an Index.\n",
            "args": [
              "doc"
            ],
            "type": "{ ref : doc -> String, fields : List ( doc -> String, Float ) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add a document to an index.\n\nStarting with the ElmTextSearch.new example above this adds a document.\n```\naddDocToIndexExample =\n    ElmTextSearch.add\n      { cid = \"id1\"\n      , title = \"First Title\"\n      , author = \"Some Author\"\n      , body = \"Words in this example document with explanations.\"\n      }\n      createNewWithIndexExample\n```\n\nConditions that cause a result Err with message.\n* Error document ref is empty.\n* Error after tokenisation there are no terms to index.\n* Error adding document that allready exists.\n",
            "type": "doc -> ElmTextSearch.Index doc -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "addDocs",
            "comment": " Add multiple documents. Tries to add all docs and collects errors..\nIt does not stop adding at first error encountered.\n\nThe result part List (Int, String) is the list of document index\nand the error string message result of adding.\nReturns the index unchanged if all documents error when added.\nReturns the updated index after adding the documents.\n",
            "type": "List doc -> ElmTextSearch.Index doc -> ( ElmTextSearch.Index doc, List ( Int, String ) )"
          },
          {
            "name": "fromString",
            "comment": " Create an Index from a String which has a stored Index in it and the\nsupplied basic configurations.\n\nSee [`ElmTextSearch.fromStringWith`](ElmTextSearch#fromStringWith) for possible Err results.\n",
            "type": "ElmTextSearch.SimpleConfig doc -> String -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "fromStringWith",
            "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of Config match the index\ntype being loaded it will return an Err.\n\nThe list of configurations wil be searched for a matching indexType\nso you should provide configs for all types you may be trying to load.\nNo more than the config that matches is required though.\n\nIf the none of the supplied Config match the loaded Index then it\nwill try if the index being loaded matches the default version if so\nit will still load the index.\n\nThe following Err results may be returned.\n* \"Error cannot load Index. Tried to load index of type \\\"__IndexTest Type -\\\". It is not in supported index configurations.\"\n * It contains the loaded version index type which comes from input.\n* \"Error cannot load Index. Version supported is 1.0.0. Version tried to load is 1.0.1.\"\n * It includes both expected and loaded versions which may vary.\n",
            "type": "List (ElmTextSearch.Config doc) -> String -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "fromValue",
            "comment": " Create an Index from a Value which has a stored Index in it.\n\nSee [`ElmTextSearch.fromStringWith`](ElmTextSearch#fromStringWith) for possible Err results.\n",
            "type": "ElmTextSearch.SimpleConfig doc -> Json.Decode.Value -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "fromValueWith",
            "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of SimpleConfig match the index\nbeing decoded it will return an Err.\n\nSee [`ElmTextSearch.fromStringWith`](ElmTextSearch#fromStringWith) for possible Err results.\n",
            "type": "List (ElmTextSearch.Config doc) -> Json.Decode.Value -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "new",
            "comment": " Create new index.\n\nExample\n```\nimport ElmTextSearch\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateNewIndexExample : ElmTextSearch.Index ExampleDocType\ncreateNewIndexExample =\n  ElmTextSearch.new\n    { ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    }\n```\n\nThe `SimpleConfig` parameter to new is\n* ref\n * The unique document reference will be extracted from each\n   document using `.cid`.\n* fields\n * The following fields will be indexed from each document\n  * `.title`\n  * `.body`\n * When searching the index any word matches found in the\n   `.title` field (boost value 5.0) raise the document match score\n   more than if found in the `.body` field (boost value 1.0).\n  * The document match score determines the order of the list\n    of matching documents returned.\n",
            "type": "ElmTextSearch.SimpleConfig doc -> ElmTextSearch.Index doc"
          },
          {
            "name": "newWith",
            "comment": " Create new index with additional configuration.\n\nExample.\n```\nimport ElmTextSearch\nimport Index.Defaults\nimport StopWordFilter\n\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateMyStopWordFilter =\n    StopWordFilter.createFilterFuncWith\n      [ \"explanations\" ]\n\n\ncreateNewWithIndexExample : ElmTextSearch.Index ExampleDocType\ncreateNewWithIndexExample =\n  ElmTextSearch.newWith\n    { indexType = \"ElmTextSearch - Customized Stop Words v1\"\n    , ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    , transformFactories = Index.Defaults.defaultTransformFactories\n    , filterFactories = [ createMyStopWordFilter ]\n    }\n```\n",
            "type": "ElmTextSearch.Config doc -> ElmTextSearch.Index doc"
          },
          {
            "name": "remove",
            "comment": " Remove a document from an index.\n\nStarting with the ElmTextSearch.new example above this removes a document.\n```\nremoveDocFromIndexExample =\n    ElmTextSearch.remove\n      { cid = \"123\"\n      , title = \"Examples of a Banana\"\n      , author = \"Sally Apples\"\n      , body = \"Sally writes words about a banana.\"\n      }\n      createNewIndexExample\n```\n\nConditions that cause a result Err with message.\n* Error document has an empty unique id (ref).\n* Error document is not in index.\n",
            "type": "doc -> ElmTextSearch.Index doc -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "search",
            "comment": " Search an index with query.\n\nTokens are extracted from the query string and passed through the\nsame processing used when indexing documents.\n\nEach token is expanded, so that the term \"he\" might be expanded to \"hello\"\nand \"help\" if those terms were already included in the document index.\n\nMultiple tokens are allowed and will lead to an AND based query.\n\nThe following example runs a search for documents containing both \"apple\" and \"banana\".\n\n```\nsearchResult =\n    Index.search \"Apple banana\" createNewIndexExample\n```\n\nResults are a list of matching document reference identifiers with\nthere similarity to query score, ordered by score descending, so the\nbest matches are earliest in the list.\n\nAn index is returned from search as well. This is because the data model may\nbe updated to improve performance for later searches.\n\nAdding or removing a new document will cause some of the internal caching\nto be reset.\n\nConditions that cause a result Err with message.\n* Error there are no documents in index to search.\n* Error query is empty.\n* Error after tokenisation there are no terms to search for.\n\n",
            "type": "String -> ElmTextSearch.Index doc -> Result.Result String ( ElmTextSearch.Index doc, List ( String, Float ) )"
          },
          {
            "name": "storeToString",
            "comment": " Store an index to a String.\n\nYou can also use [`ElmTextSearch.Json.Encoder`](ElmTextSearch.Json.Encoder).\n",
            "type": "ElmTextSearch.Index doc -> String"
          },
          {
            "name": "storeToValue",
            "comment": " Store an index to a Value.\n\nYou can also use [`ElmTextSearch.Json.Encoder`](ElmTextSearch.Json.Encoder).\n",
            "type": "ElmTextSearch.Index doc -> Json.Encode.Value"
          },
          {
            "name": "update",
            "comment": " Update a document in an index.\n\nStarting with the ElmTextSearch.new example above this updates a document.\n```\n    updatedIndex =\n      ElmTextSearch.update\n        { cid = \"123\"\n        , title = \"Examples of a Bananas in every day life.\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes more words about a banana.\"\n        }\n        createNewIndexExample\n```\n\nConditions that cause an error result are those for\n[`ElmTextSearch.remove`](ElmTextSearch#remove) and\n[`ElmTextSearch.add`](ElmTextSearch#add).\n",
            "type": "doc -> ElmTextSearch.Index doc -> Result.Result String (ElmTextSearch.Index doc)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "ElmTextSearch.Json.Encoder",
        "comment": " Encoder for Index.\n\n@docs encoder\n@docs codecIndexRecordEncoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "codecIndexRecordEncoder",
            "comment": " Encode CodecIndexRecord. ",
            "type": "Index.Model.CodecIndexRecord -> Json.Encode.Value"
          },
          {
            "name": "encoder",
            "comment": " Encoder for Index a.\n\nOnly encoding fields required to recreate a working index.\n\nThe following fields are not saved as they are restored via\nthe provided Config on fromString.\n* ref\n* fields\n* transformFactories\n* filterFactories\n\nThe following fields are not saved because they are an\nacceleration model, decoder needs to set it on fromString.\n* corpusTokensIndex\n\nThe following fields are not saved because they are caches\nand are cached as operationg requires\n* transforms\n* filters\n* idfCache\n\nDo not need an (a -> Encode.Value) because a is a document\ntype and that is never encoded from an Index.\n",
            "type": "Index.Model.Index doc -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Index.Defaults",
        "comment": " Defaults for indexes and configurations.\n\n## Index Storage Engine Version and Type\n@docs indexVersion\n@docs elmTextSearchIndexType\n\n\n## Built in Transforms and Filters\n@docs defaultTransformFactories\n@docs defaultFilterFactories\n@docs defaultTokenTrimmerFuncCreator\n@docs defaultStemmerFuncCreator\n@docs defaultStopWordFilterFuncCreator\n\n\n## Config type adapters\n@docs getDefaultIndexConfig\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "defaultFilterFactories",
            "comment": " Index default filter factories. ",
            "type": "List (Index.Model.FilterFactory doc)"
          },
          {
            "name": "defaultStemmerFuncCreator",
            "comment": " The default token stemmer transform function creator. ",
            "type": "Index.Model.TransformFactory doc"
          },
          {
            "name": "defaultStopWordFilterFuncCreator",
            "comment": " The default stop word filter function creator. ",
            "type": "Index.Model.FilterFactory doc"
          },
          {
            "name": "defaultTokenTrimmerFuncCreator",
            "comment": " The default token trimmer transform function creator.\nNormally applied first in transform functions.\n",
            "type": "Index.Model.TransformFactory doc"
          },
          {
            "name": "defaultTransformFactories",
            "comment": " Index default transform factories. ",
            "type": "List (Index.Model.TransformFactory doc)"
          },
          {
            "name": "elmTextSearchIndexType",
            "comment": " The type of index defaults to using.\n\nIt defines the default token transforms and filters.\n",
            "type": "String"
          },
          {
            "name": "getDefaultIndexConfig",
            "comment": " Convert Index.Model.SimpleConfig to Index.Model.Config\n\nFilling in default values for fields not in SimpleConfig\n\nThis is the definition of the default index configuration.\n",
            "type": "Index.Model.SimpleConfig doc -> Index.Model.Config doc"
          },
          {
            "name": "indexVersion",
            "comment": " The version of index, for loading a saved index.\n\nThis is not the same as package version.\n\nThis needs to change if the encoded format changes. Be careful of updates to\nTrie package, if Trie encoding format changes this version needs to change as\nwell.\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "ElmTextSearch.Json.Decoder",
        "comment": " Decoder for Index.\n\nIt decodes to a CodecIndexRecord.\n\n@docs decoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " CodecIndexRecord decoder. ",
            "type": "Json.Decode.Decoder Index.Model.CodecIndexRecord"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "StopWordFilter",
        "comment": " StopWordFilter is an English language stop word list filter, any words\ncontained in the list are not stored in the index.\n\nThis is intended to be used in the ElmTextSearch token processing pipeline.\n\n### Things to know about stop word lists.\n* Input tokens to create stop word filters should be full words, if you\ndont know the transform steps for index or if you use the list with different\nsets of transforms.\n* If you know the exact transform process of your Index you can prerun the\ntransform process to generate your word list, which in theory might\nmake it a little more efficient.\n* It is more efficient to merge all your stop words into a single\nstop word filter.\n\n## create default stop word filter func\n@docs createDefaultFilterFunc\n\n## A default stop word english filter list\n@docs stopEnglishWordList\n\n## Create a custom stop word filter list\n@docs createFilterFuncWith\n@docs createFilterFunc\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "createDefaultFilterFunc",
            "comment": " Default english stop word filter suitable for ElmTextSearch.\n",
            "type": "Index.Model.FilterFactory doc"
          },
          {
            "name": "createFilterFunc",
            "comment": " Create stop word filter for provided list of tokens suitable for ElmTextSearch.\n\n** This creates a stop world filter purely from your own word list, understand\nwhat you are doing and consequences if you use this. **\n\nThe FilterFunc created returns True to allow words into index.\nSo words found in the stopWordList return False\n",
            "type": "List String -> Index.Model.FilterFactory doc"
          },
          {
            "name": "createFilterFuncWith",
            "comment": " Create stop word list filter suitable for ElmTextSearch, this versions\nextends the default word list with the extra words provided.\n",
            "type": "List String -> Index.Model.FilterFactory doc"
          },
          {
            "name": "stopEnglishWordList",
            "comment": " Default english stop word list to create filter.\n",
            "type": "List String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rluiten/mailcheck",
    "version": "4.1.2",
    "docs": [
      {
        "name": "Mailcheck",
        "comment": " A library that suggests a correct domain when a user miss spells an email address.\nThis is a port of this javascript library https://github.com/mailcheck/mailcheck\n\n## Basic Usage\n\n```elm\n    Mailcheck.suggest 'test@gnail.com'\n      == Just (\"test\", \"gmail.com\", \"test@gmail.com\")\n```\n\n```elm\n    Mailcheck.suggest 'test@gsnail.com'\n      == Nothing\n```\n\n# Create\n@docs suggest\n@docs suggestWith\n\n# Utility\n@docs encodeEmail\n@docs splitEmail\n@docs mailParts\n@docs MailParts\n@docs findClosestDomain\n\n# Default domain lists used by suggest\n@docs defaultDomains\n@docs defaultTopLevelDomains\n@docs defaultSecondLevelDomains\n\n",
        "aliases": [
          {
            "name": "MailParts",
            "comment": " Record type alias for mailparts. ",
            "args": [],
            "type": "{ topLevelDomain : String , secondLevelDomain : String , domain : String , address : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultDomains",
            "comment": " default list of domains used in suggest ",
            "type": "List String"
          },
          {
            "name": "defaultSecondLevelDomains",
            "comment": " default list of second level domains used in suggest ",
            "type": "List String"
          },
          {
            "name": "defaultTopLevelDomains",
            "comment": " default list of top level domains used in suggest ",
            "type": "List String"
          },
          {
            "name": "encodeEmail",
            "comment": " Encode the email address to prevent XSS but leave in valid\ncharacters, following this official spec:\nhttp://en.wikipedia.org/wiki/Email_address#Syntax\n\nThis is exported to test it.\n\nencodeURI() will not encode: ~!@#$&*()=:/,;?+'\nElm's Http.uriEncode actually calls encodeURIComponent\n\nencodeURIComponent() escapes all characters except the\nfollowing: alphabetic, decimal digits, - _ . ! ~ * ' ( )\n\nExtra rules were added since Elm provides encodeURIComponent() functionality.\n\n```elm\n    (encodeEmail \"<hello>@domain.com\") == \"%3Chello%3E@domain.com\"\n```\n\n",
            "type": "String -> String"
          },
          {
            "name": "findClosestDomain",
            "comment": " Find closest domain in given list of domains and threshold using default distance.\n\n```elm\n    findClosestDomain \"test@gmail.co\" slds tlds\n```\n\nis equivalent to\n\n```elm\n    findClosestDomainWith sift3Distance topLevelThreshold \"test@gmail.co\" slds tlds\n```\n",
            "type": "String -> List String -> Maybe.Maybe String"
          },
          {
            "name": "mailParts",
            "comment": " Split an email address up into components.\n\n```elm\n    (mailParts \"user\") == Nothing\n    (mailParts \"user@\") == Nothing\n    (mailParts \"user@moo.com\") ==\n      Just\n      ( { topLevelDomain = \"user\"\n        , secondLevelDomain = \"moo.com\"\n        , domain = \"moo\"\n        , address = \"com\"\n        }\n      )\n    (mailParts \"user@moo.co.uk\") ==\n      Just\n      ( { topLevelDomain = \"user\"\n        , secondLevelDomain = \"moo.com.uk\"\n        , domain = \"moo\"\n        , address = \"co.uk\"\n        }\n      )\n```\n",
            "type": "String -> Maybe.Maybe Mailcheck.MailParts"
          },
          {
            "name": "splitEmail",
            "comment": " Split an email address up into components.\n\nThis function has been retained to make it a Minor version change not a Major\nand now converts the output of mailparts to this form.\n\n```elm\n    (spitEmail \"user\") == Nothing\n    (mailParts \"user\") == Nothing\n    (spitEmail \"user@\") == Nothing\n    (mailParts \"user@\") == Nothing\n    (spitEmail \"user@moo.com\") == Just(\"user\", \"moo.com\", \"moo\", \"com\")\n    (spitEmail \"user@moo.co.uk\") == Just(\"user\", \"moo.com.uk\", \"moo\", \"co.uk\")\n```\n",
            "type": "String -> Maybe.Maybe ( String, String, String, String )"
          },
          {
            "name": "suggest",
            "comment": " Suggest a domain which may assist a user with a possible error\nin a candidate email address. This version uses the default internal lists\nof domains.\n\n```elm\n    suggest 'test@gmail.co'\n```\n\nis equivalent to\n\n```elm\n    suggestWith defaultDomains defaultSecondLevelDomains defaultTopLevelDomains 'test@gmail.co'\n```\n\nexample\n\n```elm\n    (suggest \"user@gmil.com\")\n      == Just (\"user\", \"gmail.com\", \"user@gmail.com\")\n```\n\nResult is Maybe (address, domain, secondLevelDomain, topLevelDomain)\n\n",
            "type": "String -> Maybe.Maybe ( String, String, String )"
          },
          {
            "name": "suggestWith",
            "comment": " Suggest with passed in domain lists.\n\n* domains is list of known valid domains\n* top level domains is allowed to be empty\n* second level domains is allowed to be empty\n\n",
            "type": "List String -> List String -> List String -> String -> Maybe.Maybe ( String, String, String )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rluiten/sparsevector",
    "version": "1.0.1",
    "docs": [
      {
        "name": "SparseVector",
        "comment": " SparseVector is an n-dimension sparse vector.\n\nVery simple implementation with just the functions I needed at the time for Lunrelm.\n\nModel stored in Dict with index as key.\n\nDimension of vector is not held, so there is no way to check that dot or\ncosineSimilarity are both using the same dimension vector.\n\n@docs SparseVector\n@docs empty\n@docs isEmpty\n@docs insert\n@docs insertList\n\n@docs magnitude\n@docs dot\n@docs cosineSimilarity\n\nCopyright (c) 2016 Robin Luiten\n\n",
        "aliases": [
          {
            "name": "SparseVector",
            "comment": " SparseVector type alias ",
            "args": [],
            "type": "Dict.Dict Int Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "cosineSimilarity",
            "comment": " Calculates the cosine similarity between vectors.\n",
            "type": "SparseVector.SparseVector -> SparseVector.SparseVector -> Float"
          },
          {
            "name": "dot",
            "comment": " Calculates the dot product between vectors.\n",
            "type": "SparseVector.SparseVector -> SparseVector.SparseVector -> Float"
          },
          {
            "name": "empty",
            "comment": " Empty SparseVector ",
            "type": "SparseVector.SparseVector"
          },
          {
            "name": "insert",
            "comment": " Insert value in vector.\n",
            "type": "Int -> Float -> SparseVector.SparseVector -> SparseVector.SparseVector"
          },
          {
            "name": "insertList",
            "comment": " Insert list of values in vector.\n",
            "type": "List ( Int, Float ) -> SparseVector.SparseVector -> SparseVector.SparseVector"
          },
          {
            "name": "isEmpty",
            "comment": " Return true if vector is empty ",
            "type": "SparseVector.SparseVector -> Bool"
          },
          {
            "name": "magnitude",
            "comment": " Calculates magnitude of vector.\n\nSqrt of Sum of Squares of each dimension value.\n",
            "type": "SparseVector.SparseVector -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rluiten/stemmer",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Stemmer",
        "comment": " Stemmer is an english language stemmer, this is an Elm\nimplementation of the PorterStemmer taken from http://tartarus.org/~martin.\n\nCopyright (c) 2016 Robin Luiten\n\nInspired by Erlang implementation on http://tartarus.org/~martin/PorterStemmer/index.html.\n\n## Usage\n@docs stem\n\n## Implementation Details\n\nStep numbers follow general implementation in porter stemmer implementations.\n\nIdentifier names were adopted from elrang implementation.\n\n* **drow** stands for reverse of word\n* **mets** stands for reverse of stem\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "stem",
            "comment": " Get the porter stem of a word.\n\nSome examples and what running them produces\n```\n  Stemmer.stem \"fullness\" -- produces \"full\"\n  Stemmer.stem \"consign\" -- produces \"consign\"\n  Stemmer.stem \"consigned\" -- produces \"consign\"\n  Stemmer.stem \"consigning\" -- produces \"consign\"\n  Stemmer.stem \"consignment\" -- produces \"consign\"\n  Stemmer.stem \"knot\" -- produces \"knot\"\n  Stemmer.stem \"knots\" -- produces \"knot\"\n```\n\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rluiten/stringdistance",
    "version": "1.0.2",
    "docs": [
      {
        "name": "StringDistance",
        "comment": " A library to calculate a metric indicating the string distance between two strings.\n\nThis library was extracted from the Elm implementation of mailcheck http://package.elm-lang.org/packages/rluiten/mailcheck/latest.\n\nThe `lcs` and `lcsLimit` functions are more general and support more than just\nChar as list elements.\n\n\n## Functions\n\n@docs sift3Distance\n@docs lcs\n@docs lcsLimit\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lcs",
            "comment": " Longest Common Subsequence\n\nThis is a simple implementation and would benefit from memoization if\nperformance is a problem. It does not limit look ahead\nwhich can be very costly see lcsLimit for a limited look ahead version.\n\nWarning this gets very slow very quickly with increases in list lengths even\n17 character lists can cause things to bog down.\n\nThis implementation is based on http://rosettacode.org/wiki/Longest_common_subsequence#Haskell\n\n```elm\n    lcs [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n ",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "lcsLimit",
            "comment": " Return function which returns lcs with limited look ahead.\n\nWarning maxLookAhead quickly makes the returned function costly stay\nbelow 8 if you want responsiveness.\n\n```elm\n    lcsLimit 5 [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n",
            "type": "Int -> List a -> List a -> List a"
          },
          {
            "name": "sift3Distance",
            "comment": " Calculate sift3 string distance between candidate strings.\n\n```elm\n    sift3Distance \"\" \"abc\" == 3.0\n    sift3Distance \"ab\" \"\" == 2.0\n    sift3Distance \"abc\" \"abc\" == 0\n    sift3Distance \"abc\" \"ab\"  == 0.5\n```\n\n",
            "type": "String -> String -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rluiten/trie",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Trie.Json.Decoder",
        "comment": " Json Decoder for Trie\n\n@docs decoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " A Trie Decoder ",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (TrieModel.Trie a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Trie",
        "comment": " A Trie data structure.\n\nA trie is an ordered tree data structure that is used to store a dynamic\nset or associative array where the keys are usually strings.\n\nIn this implementation they key is a String.\n\nIn this implementation unique reference stored in the value\ndictionary for a given key is a String.\n\n## Data Model\n@docs Trie\n\n## Create\n@docs empty\n\n## Modify\n@docs add\n@docs remove\n\n## Query\n@docs has\n@docs get\n@docs getNode\n@docs valueCount\n@docs expand\n\n## Get data values from node\n@docs getValues\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Trie",
            "comment": " Trie data model. ",
            "args": [
              "a"
            ],
            "type": "TrieModel.Trie a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add reference and values with key to Trie.\n\n```\nupdatedTrie = Trie.add (\"refid123\", (\"ValueStored\", 42.34)) \"someword\" Trie.empty\n```\n",
            "type": "( String, a ) -> String -> Trie.Trie a -> Trie.Trie a"
          },
          {
            "name": "empty",
            "comment": " An empty Trie ",
            "type": "Trie.Trie a"
          },
          {
            "name": "expand",
            "comment": " Find all the possible suffixes of the passed key using keys\ncurrently in the store.\n\nThis returns a List of all keys from starting key down.\nThe definition of a key that exists is one that has documents defined for it.\n\nGiven this setup\n```\n    trie1 = Trie.add (\"refid121\", 1) \"ab\" Trie.empty\n    trie2 = Trie.add (\"refid122\", 2) \"ac\" trie1\n    trie3 = Trie.add (\"refid123\", 3) \"acd\" trie2\n```\n\nThis\n```\n    Trie.expand \"a\" trie3\n```\nReturns\n```\n[\"ab\",\"acd\",\"ac\"]\n```\n\n\nThis\n```\n    Trie.expand \"ac\" trie3\n```\nReturns\n```\n[\"acd\",\"ac\"]\n```\n\n",
            "type": "String -> Trie.Trie a -> List String"
          },
          {
            "name": "get",
            "comment": " Return values for a key if found.\n",
            "type": "String -> Trie.Trie a -> Maybe.Maybe (Dict.Dict String a)"
          },
          {
            "name": "getNode",
            "comment": " Return Trie node if found.\n\nThis will return Nothing.\n```\nmaybeNode = Trie.getNode \"for\" Trie.empty\n```\n\nThis will the node containing the values for the word \"someword\".\nIt will contains \"refid123\" in the dictionary point at  (\"ValueStored\", 42.34).\n```\ntrie1 = Trie.add (\"refid123\", (\"ValueStored\", 42.34)) \"someword\" Trie.empty\n\nmaybeNode = Trie.getNode \"someword\" trie1\n```\n\n",
            "type": "String -> Trie.Trie a -> Maybe.Maybe (Trie.Trie a)"
          },
          {
            "name": "getValues",
            "comment": " Return the values stored if there are any\n",
            "type": "Trie.Trie a -> Maybe.Maybe (Dict.Dict String a)"
          },
          {
            "name": "has",
            "comment": " Checks whether key is contained within a Trie.\n\nA key must have values for it be considered present in Trie.\n",
            "type": "String -> Trie.Trie a -> Bool"
          },
          {
            "name": "remove",
            "comment": " Remove values for key and reference from Trie.\n\nThis removes the reference from the correct values list.\nIf the key does not exist nothing changes.\nIf the ref is not found in the values for the key nothing changes.\n\nAn example but does not do anything.\n```\nupdatedTrie = Trie.remove \"for\" \"refid125\" Trie.empty\n```\n\n\nAdd something then remove it.\n```\ntrie1 = Trie.add (\"refid123\", (\"ValueStored\", 42.34)) \"someword\" Trie.empty\n\ntrie2 = Trie.remove \"someword\" \"refid123\" Trie.trie1\n```\n\n",
            "type": "String -> String -> Trie.Trie a -> Trie.Trie a"
          },
          {
            "name": "valueCount",
            "comment": " Return number of values stored at Trie location.\n",
            "type": "String -> Trie.Trie a -> Int"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Trie.Json.Encoder",
        "comment": " Json Encoder for Trie\n\n@docs encoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "encoder",
            "comment": " Encoder for Trie. ",
            "type": "(f -> Json.Encode.Value) -> TrieModel.Trie f -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "robertjlooby/elm-generic-dict",
    "version": "1.0.1",
    "docs": [
      {
        "name": "GenericSet",
        "comment": " A set of unique values. The values can be any type. The builder functions\ntake a comparer function that takes two values and returns an Order.\n\nInsert, remove, and query operations all take *O(log n)* time. GenericSet equality with\n`(==)` is unreliable and should not be used.\n\n# Sets\n@docs GenericSet\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "GenericSet",
            "comment": " Represents a set of unique values. So `(GenericSet Int)` is a set of integers and\n`(GenericSet String)` is a set of strings.\n",
            "args": [
              "t"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set. Keeps the comparer from the first set.\n",
            "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "empty",
            "comment": " Create an empty set using the given comparer.\n",
            "type": "(a -> a -> Basics.Order) -> GenericSet.GenericSet a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(a -> Bool) -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest (by the\ncomparer).\n",
            "type": "(a -> b -> b) -> b -> GenericSet.GenericSet a -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest (by the\ncomparer).\n",
            "type": "(a -> b -> b) -> b -> GenericSet.GenericSet a -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates, using the given\ncomparer.\n",
            "type": "(a -> a -> Basics.Order) -> List a -> GenericSet.GenericSet a"
          },
          {
            "name": "insert",
            "comment": " Insert a value into a set.\n",
            "type": "a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\nKeeps the comparer from the first set.\n",
            "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty.\n",
            "type": "GenericSet.GenericSet a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates and a new\ncomparer.\n",
            "type": "(b -> b -> Basics.Order) -> (a -> b) -> GenericSet.GenericSet a -> GenericSet.GenericSet b"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set.\n",
            "type": "a -> GenericSet.GenericSet a -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
            "type": "(a -> Bool) -> GenericSet.GenericSet a -> ( GenericSet.GenericSet a, GenericSet.GenericSet a )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
            "type": "a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value using the given comparer.\n",
            "type": "(a -> a -> Basics.Order) -> a -> GenericSet.GenericSet a"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set.\n",
            "type": "GenericSet.GenericSet a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list, sorted by the comparer.\n",
            "type": "GenericSet.GenericSet a -> List a"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values. Keep the comparer from the\nfirst set.\n",
            "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "GenericDict",
        "comment": " A dictionary mapping unique keys to values. The keys can be any type. The\nbuilder functions take a comparer function that takes two keys and returns an\nOrder.\n\nInsert, remove, and query operations all take *O(log n)* time. Dictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Dictionaries\n@docs GenericDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "GenericDict",
            "comment": " A dictionary of keys and values. So a `(GenericDict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second\ndictionary. Keep the comparer from the first dictionary.\n",
            "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary using the given comparer.\n",
            "type": "(k -> k -> Basics.Order) -> GenericDict.GenericDict k v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate.\n",
            "type": "(k -> v -> Bool) -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key (by the comparer).\n",
            "type": "(k -> v -> b -> b) -> b -> GenericDict.GenericDict k v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key (by the comparer).\n",
            "type": "(k -> v -> b -> b) -> b -> GenericDict.GenericDict k v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary using the given comparer.\n",
            "type": "(k -> k -> Basics.Order) -> List ( k, v ) -> GenericDict.GenericDict k v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList compare [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "k -> GenericDict.GenericDict k v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n",
            "type": "k -> v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. Keep the comparer from\nthe first dictionary.\n",
            "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty (empty compare) == True\n",
            "type": "GenericDict.GenericDict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
            "type": "GenericDict.GenericDict k v -> List k"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(k -> a -> b) -> GenericDict.GenericDict k a -> GenericDict.GenericDict k b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary.\n",
            "type": "k -> GenericDict.GenericDict k v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(k -> v -> Bool) -> GenericDict.GenericDict k v -> ( GenericDict.GenericDict k v, GenericDict.GenericDict k v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n",
            "type": "k -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair, using the given comparer.\n",
            "type": "(k -> k -> Basics.Order) -> k -> v -> GenericDict.GenericDict k v"
          },
          {
            "name": "size",
            "comment": " Determine the number of key-value pairs in the dictionary.\n",
            "type": "GenericDict.GenericDict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys.\n",
            "type": "GenericDict.GenericDict k v -> List ( k, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. Keep the comparer from the first dictionary.\n",
            "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function.\n",
            "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
            "type": "GenericDict.GenericDict k v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "robinpokorny/elm-brainfuck",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Brainfuck",
        "comment": " A brainfuck interpreter in Elm\n@docs run\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "run",
            "comment": " Run Brainfuck source code with specified input.\nReturns an output string.\n\n    -- Double input '1' == 49, 'b' == 98\n    run \",[>++<-]>.\" \"1\" == \"b\"\n\nInput is taken one by one. If end is reached, 0 would be assumed.\n",
            "type": "String -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Brainfuck.Parser",
        "comment": " Converts Brainfuck source code to Elm structures.\n\n# Definition\n@docs Command, Prog\n\n# Use\n@docs parse\n\n",
        "aliases": [
          {
            "name": "Prog",
            "comment": " Parsed Brainfuck program consists of a list of `Command`s to execute\nand a symetric `Dict` of jumps of matching square brackets.\n",
            "args": [],
            "type": "{ commands : List Brainfuck.Parser.Command , loops : Dict.Dict Int Int }"
          }
        ],
        "types": [
          {
            "name": "Command",
            "comment": " Represent one of the eight commands of the language.\n",
            "args": [],
            "cases": [
              [
                "Next",
                []
              ],
              [
                "Prev",
                []
              ],
              [
                "Inc",
                []
              ],
              [
                "Dec",
                []
              ],
              [
                "Read",
                []
              ],
              [
                "Write",
                []
              ],
              [
                "LoopStart",
                []
              ],
              [
                "LoopEnd",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parse",
            "comment": " Parse string to `Prog`.\n\nAll unknown characters are ignored. Parser assumes correct brackets\npairing and will crash otherwise.\n\n    parse \",[>+<-]>.\" ==\n      { commands = [ Read, LoopStart, Next, … ]\n      , loops = Dict.fromList [ ( 1, 6 ), ( 6, 1 ) ]\n      }\n",
            "type": "String -> Brainfuck.Parser.Prog"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Brainfuck.Tape",
        "comment": " Simple unbounded array with a movable data pointer.\nTape is indexed by `Int` and its values are also `Int`\n\n# Tapes\n@docs Tape\n\n# Build\n@docs empty, fromList\n\n# Pointer\n@docs move, next, prev\n\n# Value\n@docs get, set, increment, decrement\n\n",
        "aliases": [
          {
            "name": "Tape",
            "comment": " An unbounded `Int`-indexed tape of numbers from 0 to 255.\n",
            "args": [],
            "type": "( Dict.Dict Int Int, Int )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "decrement",
            "comment": " Decrement value at current position by one. Value is floored at 0.\n\n    get (decrement empty) == 255\n",
            "type": "Brainfuck.Tape.Tape -> Brainfuck.Tape.Tape"
          },
          {
            "name": "empty",
            "comment": " Create an empty tape.\n",
            "type": "Brainfuck.Tape.Tape"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a tape.\n",
            "type": "List Int -> Brainfuck.Tape.Tape"
          },
          {
            "name": "get",
            "comment": " Get the value at the current position. If the key is not found, return\n0.\n",
            "type": "Brainfuck.Tape.Tape -> Int"
          },
          {
            "name": "increment",
            "comment": " Increment value at current position by one. Value is truncated overflow.\n\n    tape = fromList [ 255 ]\n\n    get (increment tape) == 0\n",
            "type": "Brainfuck.Tape.Tape -> Brainfuck.Tape.Tape"
          },
          {
            "name": "move",
            "comment": " Set position.\n",
            "type": "Int -> Brainfuck.Tape.Tape -> Brainfuck.Tape.Tape"
          },
          {
            "name": "next",
            "comment": " Move position right by one.\n",
            "type": "Brainfuck.Tape.Tape -> Brainfuck.Tape.Tape"
          },
          {
            "name": "prev",
            "comment": " Move position left by one.\n",
            "type": "Brainfuck.Tape.Tape -> Brainfuck.Tape.Tape"
          },
          {
            "name": "set",
            "comment": " Set value at current position. Value is clamped within 0 and 255.\n",
            "type": "Int -> Brainfuck.Tape.Tape -> Brainfuck.Tape.Tape"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rogeriochaves/elm-test-bdd-style",
    "version": "4.0.0",
    "docs": [
      {
        "name": "ElmTestBDDStyle",
        "comment": " BDD style functions for ElmTest\n\n# Tests\n@docs Test, Assertion, describe, it\n\n# Matchers\n@docs expect, toBe, notToBe, toBeTruthy\n\n# Property-based testing\n@docs itAlways, expectThat, isTheSameAs, forEvery\n\n",
        "aliases": [
          {
            "name": "Assertion",
            "comment": " Assertion type, use that for building custom matchers\n",
            "args": [],
            "type": "ElmTest.Assertion"
          },
          {
            "name": "Test",
            "comment": " The basic unit of testability.\n",
            "args": [],
            "type": "ElmTest.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "describe",
            "comment": " A group of related behaviours specs\n",
            "type": "String -> List ElmTestBDDStyle.Test -> ElmTestBDDStyle.Test"
          },
          {
            "name": "expect",
            "comment": " Expectation to actually run the test, it receives\ntwo values and try to match then with a matcher\n",
            "type": "a -> (a -> b) -> b"
          },
          {
            "name": "expectThat",
            "comment": " Generates a hundred tests with random input beginning with the initial seed 1\n",
            "type": "(a -> b) -> ElmTestBDDStyle.Conjunction -> (a -> b) -> ElmTestBDDStyle.Conjunction -> Check.Producer.Producer a -> String -> ElmTestBDDStyle.Test"
          },
          {
            "name": "forEvery",
            "comment": " Idiomatic word helper\n",
            "type": "ElmTestBDDStyle.Conjunction"
          },
          {
            "name": "isTheSameAs",
            "comment": " Idiomatic word helper\n",
            "type": "ElmTestBDDStyle.Conjunction"
          },
          {
            "name": "it",
            "comment": " Describes a behaviour you expect from your code\n",
            "type": "String -> ElmTestBDDStyle.Assertion -> ElmTestBDDStyle.Test"
          },
          {
            "name": "itAlways",
            "comment": " Adds a description to the random generated tests\n",
            "type": "String -> (String -> ElmTestBDDStyle.Test) -> ElmTestBDDStyle.Test"
          },
          {
            "name": "notToBe",
            "comment": " Expect something not to be equals something else\n",
            "type": "a -> a -> ElmTestBDDStyle.Assertion"
          },
          {
            "name": "toBe",
            "comment": " Expect something to be equals something else\n",
            "type": "a -> a -> ElmTestBDDStyle.Assertion"
          },
          {
            "name": "toBeTruthy",
            "comment": " Expect something to be true\n",
            "type": "Bool -> ElmTestBDDStyle.Assertion"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css",
    "version": "4.0.2",
    "docs": [
      {
        "name": "Css.File",
        "comment": " Functions for writing CSS files from elm-css.\n\n@docs compile, toFileStructure, CssFileStructure\n",
        "aliases": [
          {
            "name": "CssFileStructure",
            "comment": " A description of CSS files that will be created by elm-css.\n",
            "args": [],
            "type": "List { filename : String, content : String, success : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compile",
            "comment": " Convenience re-export of Css.compile\n",
            "type": "Css.Stylesheet -> { css : String, warnings : List String }"
          },
          {
            "name": "toFileStructure",
            "comment": " Translate a list of filenames and [`prettyPrint`](#prettyPrint) results\nto a list of tuples suitable for being sent to a port in a Stylesheets.elm file.\n",
            "type": "List ( String, { css : String, warnings : List String } ) -> Css.File.CssFileStructure"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Css",
        "comment": " Functions for building stylesheets.\n\n# Misc\n@docs Stylesheet, asPairs, absolute, all, allPetiteCaps, allSmallCaps, withClass, auto, baseline, block, bold, bolder, border, border2, border3, borderBlockEnd, borderBlockEnd2, borderBlockEnd3, borderBlockEndColor, borderBlockEndStyle, borderBlockStart, borderBlockStart2, borderBlockStart3, borderBlockStartColor, borderBlockStartStyle, borderBottom, borderBottom2, borderBottom3, borderBottomColor, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderBottomStyle, borderBottomWidth, borderBox, borderColor, borderColor2, borderColor3, borderColor4, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, borderInlineEnd, borderInlineEnd2, borderInlineEnd3, borderInlineEndColor, borderInlineEndStyle, borderInlineEndWidth, borderInlineStart, borderInlineStart2, borderInlineStart3, borderInlineStartColor, borderInlineStartStyle, borderLeft, borderLeft2, borderLeft3, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderRight, borderRight2, borderRight3, borderRightColor, borderRightStyle, borderRightWidth, borderStyle, borderTop, borderTop2, borderTop3, borderTopColor, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderTopStyle, borderTopWidth, bottom, column, columnReverse, commonLigatures, content, contentBox, contextual, cursive, dashed, diagonalFractions, discretionaryLigatures, dotted, double, fantasy, fillBox, fixed, flat, displayFlex, flexEnd, flexStart, groove, hex, hidden, historicalLigatures, hsl, hsla, important, inherit, initial, inline, inlineBlock, inset, italic, large, larger, lighter, liningNums, matrix, matrix3d, middle, monospace, noCommonLigatures, noContextual, noDiscretionaryLigatures, noHistoricalLigatures, noWrap, none, normal, oblique, oldstyleNums, ordinal, outset, perspective, petiteCaps, position, preserve3d, proportionalNums, relative, rgb, rgba, ridge, rotate, rotate3d, rotateX, rotateY, rotateZ, row, rowReverse, sansSerif, scale, scale2, scale3d, scaleX, scaleY, scroll, serif, skew, skew2, skewX, skewY, slashedZero, small, smallCaps, smaller, solid, stackedFractions, static, sticky, stretch, sub, super, tabularNums, textBottom, textTop, titlingCaps, top, translate, translate2, translate3d, translateX, translateY, translateZ, transparent, unicase, unset, viewBox, visible, wavy, wrap, wrapReverse, xLarge, xSmall, xxLarge, xxSmall\n\n# Style\n@docs Snippet, Mixin, mixin, stylesheet, compile\n\n# Statements\n@docs (#), (.), selector, everything\n\n# Combinators\n@docs children, descendants, adjacentSiblings, generalSiblings\n\n# Media Queries\n@docs screen, tv, projection, print\n\n# Properties\n@docs property, flex, flex2, flex3, medium, alignSelf, alignItems, order, flexDirection, flexFlow1, flexFlow2, flexWrap, flexBasis, flexGrow, flexShrink, transformStyle, transformBox, transform, transforms, currentColor, underline, overline, lineThrough, textDecoration, textDecoration2, textDecoration3, textDecorationLine, textDecorations, textDecorations2, textDecorations3, textDecorationLine, textDecorationLines, textDecorationStyle, capitalize, uppercase, lowercase, fullWidth, hanging, eachLine, textIndent, textIndent2, textIndent3, clip, ellipsis, textOverflow, optimizeSpeed, optimizeLegibility, geometricPrecision, textRendering, textTransform, textAlign, textAlignLast, left, right, center, textJustify, justifyAll, start, end, matchParent, true, verticalAlign, display, opacity, minContent, maxContent, fitContent, fillAvailable, width, minWidth, maxWidth, height, minHeight, maxHeight, padding, padding2, padding3, padding4, paddingTop, paddingBottom, paddingRight, paddingLeft, paddingBlockStart, paddingBlockEnd, paddingInlineStart, paddingInlineEnd, margin, margin2, margin3, margin4, marginTop, marginBottom, marginRight, marginLeft, marginBlockStart, marginBlockEnd, marginInlineStart, marginInlineEnd, boxSizing, overflow, overflowX, overflowY, whiteSpace, backgroundColor, color, withMedia, each, media, mediaQuery, textShadow, textShadow2, textShadow3, textShadow4, lineHeight, letterSpacing, fontFace, fontFamily, fontSize, fontStyle, fontWeight, fontVariant, fontVariant2, fontVariant3, fontVariantLigatures, fontVariantCaps, fontVariantNumeric, fontVariantNumeric2, fontVariantNumeric3, fontFamilies, fontVariantNumerics, fontFeatureSettings, fontFeatureSettingsList, cursor\n\n# Values\n\n## Color values\n@docs Color all, important, custom, solid, transparent, rgb, rgba, hsl, hsla, hex\n\n## Font values\n@docs featureTag, featureTag2, featureOn, featureOff\n\n## Other values\n@docs borderColor, borderColor2, borderColor3, borderColor4, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderBottomWidth, borderInlineEndWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderBlockEndStyle, borderBlockStartStyle, borderInlineEndStyle, borderBottomStyle, borderInlineStartStyle, borderLeftStyle, borderRightStyle, borderTopStyle, borderStyle, borderBlockStartColor, borderBlockEndColor, borderBottomColor, borderInlineStartColor, borderInlineEndColor, borderLeftColor, borderRightColor, borderTopColor, borderBox, contentBox, border, border2, border3, borderTop, borderTop2, borderTop3, borderBottom, borderBottom2, borderBottom3, borderLeft, borderLeft2, borderLeft3, borderRight, borderRight2, borderRight3, borderBlockEnd, borderBlockEnd2, borderBlockEnd3, borderBlockStart, borderBlockStart2, borderBlockStart3, borderInlineEnd, borderInlineEnd2, borderInlineEnd3, borderInlineStart, borderInlineStart2, borderInlineStart3, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, scroll, visible, block, inlineBlock, inline, none, auto, inherit, unset, initial, noWrap, top, static, fixed, sticky, relative, absolute, position, bottom, middle, baseline, sub, super, textTop, textBottom, hidden, wavy, dotted, dashed, solid, double, groove, ridge, inset, outset, matrix, matrix3d, perspective, rotate3d, rotateX, rotateY, rotateZ, scale, scale2, scale3d, scaleX, scaleY, skew, skew2, skewX, skewY, translate, translate2, translate3d, translateX, translateY, translateZ, rotate, fillBox, viewBox, flat, preserve3d, content, wrapReverse, wrap, flexStart, flexEnd, stretch, row, rowReverse, column, columnReverse, serif, sansSerif, monospace, cursive, fantasy, xxSmall, xSmall, small, large, xLarge, xxLarge, smaller, larger, normal, italic, oblique, bold, lighter, bolder, smallCaps, allSmallCaps, petiteCaps, allPetiteCaps, unicase, titlingCaps, commonLigatures, noCommonLigatures, discretionaryLigatures, noDiscretionaryLigatures, historicalLigatures, noHistoricalLigatures, contextual, noContextual, liningNums, oldstyleNums, proportionalNums, tabularNums, diagonalFractions, stackedFractions, ordinal, slashedZero, default, pointer, crosshair, contextMenu, help, progress, wait, cell, text, verticalText, cursorAlias, copy, move, noDrop, notAllowed, eResize, nResize, neResize, nwResize, sResize, seResize, swResize, wResize, ewResize, nsResize, neswResize, nwseResize, colResize, rowResize, allScroll, zoomIn, zoomOut, grab, grabbing\n\n# Length\n@docs Length, pct, px, em, pt, ex, ch, rem, vh, vw, vmin, vmax, mm, cm, inches, pc, int, float, zero, (|+|), (|-|), (|*|), (|/|)\n\n# Angle\n@docs deg, rad, grad, turn\n\n# Pseudo-Classes\n@docs active, any, checked, dir, disabled, empty, enabled, first, firstChild, firstOfType, fullscreen, focus, hover, indeterminate, invalid, lang, lastChild, lastOfType, link, nthChild, nthLastChild, nthLastOfType, nthOfType, onlyChild, onlyOfType, optional, outOfRange, readWrite, required, root, scope, target, valid\n\n# Pseudo-Elements\n@docs after, before, firstLetter, firstLine, selection\n\n# Media Queries\n@docs MediaQuery, screen, print, tv, projection\n\n# Source\n@docs src\n\n# Quoting\n@docs qt\n\n# Types\n\n@docs FontSize, ColorValue\n\n# Intentionally Unsupported\n\nThese are features you might expect to be in elm-css (because they are in the\nCSS specification) but which have been omitted because their use is either\ndeprecated or discouraged.\n\n@docs thin, medium, thick, blink\n",
        "aliases": [
          {
            "name": "Color",
            "comment": " ",
            "args": [],
            "type": "Css.ColorValue { red : Int, green : Int, blue : Int, alpha : Float }"
          },
          {
            "name": "ColorValue",
            "comment": " https://developer.mozilla.org/en-US/docs/Web/CSS/color#Values\n",
            "args": [
              "compatible"
            ],
            "type": "{ compatible | value : String, color : Css.Compatible, warnings : List String }"
          },
          {
            "name": "FontSize",
            "comment": " A font size\n",
            "args": [
              "compatible"
            ],
            "type": "{ compatible | value : String, fontSize : Css.Compatible }"
          },
          {
            "name": "Length",
            "comment": " https://developer.mozilla.org/en-US/docs/Web/CSS/length\n",
            "args": [
              "compatible",
              "units"
            ],
            "type": "{ compatible | value : String, length : Css.Compatible, numericValue : Float, units : units, unitLabel : String }"
          },
          {
            "name": "MediaQuery",
            "comment": " ",
            "args": [],
            "type": "Css.Structure.MediaQuery"
          },
          {
            "name": "Mixin",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Mixin"
          },
          {
            "name": "Snippet",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Snippet"
          },
          {
            "name": "Stylesheet",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Stylesheet"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "#",
            "comment": " An [id selector](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors).\n\n    stylesheet\n        [ (#) NavBar\n            [ width 960 px\n            , backgroundColor (rgb 123 42 208)\n            ]\n        ]\n",
            "type": "id -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": ".",
            "comment": " A [class selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors).\n\n    stylesheet\n        [ (.) LoginFormButton\n            [ fontWeight normal\n            , color (rgb 128 64 32)\n            ]\n        ]\n",
            "type": "class -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "absolute",
            "comment": " An `absolute` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position absolute\n",
            "type": "Css.Position {}"
          },
          {
            "name": "active",
            "comment": " An [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aactive)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "adjacentSiblings",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "after",
            "comment": " An [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aafter)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "alignItems",
            "comment": " Sets [`align-items`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items).\n\n  **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n  use this workaround:\n\n  property \"align-items\" \"auto\"\n\n  If this is annoying, please file an issue, so adding support for \"auto\"\n  can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "alignSelf",
            "comment": " Sets [`align-self`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self).\n\n  **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n  use this workaround:\n\n  property \"align-self\" \"auto\"\n\n  If this is annoying, please file an issue, so adding support for \"auto\"\n  can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "all",
            "comment": " An [`all`](https://developer.mozilla.org/en-US/docs/Web/CSS/all) property.\n",
            "type": "Css.All compatible -> Css.Mixin"
          },
          {
            "name": "allPetiteCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "allScroll",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "allSmallCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "any",
            "comment": " An [`:any`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aany)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "asPairs",
            "comment": " Take a list of mixins and return a list of key-value pairs that\ncan then be passed to a `style` attribute.\n\n    styles = asPairs >> Html.Attributes.style\n\n    button\n      [ styles [ position absolute, left (px 5) ] ]\n      [ text \"Whee!\" ]\n",
            "type": "List Css.Mixin -> List ( String, String )"
          },
          {
            "name": "auto",
            "comment": " ",
            "type": "{ lengthOrAuto : Css.Compatible , overflow : Css.Compatible , textRendering : Css.Compatible , flexBasis : Css.Compatible , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible , alignItemsOrAuto : Css.Compatible , cursor : Css.Compatible , value : String }"
          },
          {
            "name": "backgroundColor",
            "comment": " ",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "baseline",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign baseline\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "before",
            "comment": " A [`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Abefore)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "blink",
            "comment": " [`blink`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\nis ~~totally rad~~ deprecated, and as such has been ~~reluctantly~~ omitted\nfrom elm-css.\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "block",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "bold",
            "comment": " ",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent {}"
          },
          {
            "name": "bolder",
            "comment": " ",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent {}"
          },
          {
            "name": "border",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "border2",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "border3",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd2",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd3",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockEndColor",
            "comment": " Sets [`border-block-end-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color)\n\n    borderBlockEndColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockEndStyle",
            "comment": " Sets [`border-block-end-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style)\n\n    borderBlockEndStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockStart",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBlockStart2",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBlockStart3",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA units -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockStartColor",
            "comment": " Sets [`border-block-start-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color)\n\n    borderBlockStartColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockStartStyle",
            "comment": " Sets [`border-block-start-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style)\n\n    borderBlockStartStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBottom",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottom2",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBottom3",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBottomColor",
            "comment": " Sets [`border-bottom-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color)\n\n    borderBottomColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBottomLeftRadius",
            "comment": " Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n\n    borderBottomLeftRadius  (em 4)\n    borderBottomLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottomLeftRadius2",
            "comment": " Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n\n    borderBottomLeftRadius  (em 4)\n    borderBottomLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderBottomRightRadius",
            "comment": " Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n\n    borderBottomRightRadius  (em 4)\n    borderBottomRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottomRightRadius2",
            "comment": " Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n\n    borderBottomRightRadius  (em 4)\n    borderBottomRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderBottomStyle",
            "comment": " Sets [`border-bottom-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style)\n\n    borderBottomStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBottomWidth",
            "comment": " Sets [`border-bottom-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width)\n\n    borderBottomWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBox",
            "comment": " The `border-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.\n",
            "type": "Css.BoxSizing {}"
          },
          {
            "name": "borderColor",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderColor2",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.Mixin"
          },
          {
            "name": "borderColor3",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderColor4",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.ColorValue compatibleC -> Css.ColorValue compatibleD -> Css.Mixin"
          },
          {
            "name": "borderImageOutset",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "borderImageOutset2",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "borderImageOutset3",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.Mixin"
          },
          {
            "name": "borderImageOutset4",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (int 2)\n    borderImageOutset2 (int 2) (px 15)\n    borderImageOutset3 (int 2) (px 15) (int 1.5)\n    borderImageOutset4 (int 2) (px 15) (int 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.LengthOrNumber compatibleD -> Css.Mixin"
          },
          {
            "name": "borderImageWidth",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "borderImageWidth2",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "borderImageWidth3",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.Mixin"
          },
          {
            "name": "borderImageWidth4",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (int 3)\n    borderImageWidth2 (int 3) (px 15)\n    borderImageWidth3 (int 3) (px 15) auto\n    borderImageWidth4 (int 3) (px 15) auto (int 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.LengthOrNumber compatibleD -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd2",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd3",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderInlineEndColor",
            "comment": " Sets [`border-inline-end-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color)\n\n    borderInlineEndColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineEndStyle",
            "comment": " Sets [`border-inline-end-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style)\n\n    borderInlineEndStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineEndWidth",
            "comment": " Sets [`border-inline-end-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width)\n\n    borderInlineEndWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineStart",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineStart2",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderInlineStart3",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderInlineStartColor",
            "comment": " Sets [`border-inline-start-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color)\n\n    borderInlineStartColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineStartStyle",
            "comment": " Sets [`border-inline-start-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style)\n\n    borderInlineStartStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderLeft",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderLeft2",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderLeft3",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderLeftColor",
            "comment": " Sets [`border-left-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color)\n\n    borderLeftColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderLeftStyle",
            "comment": " Sets [`border-left-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style)\n\n    borderLeftStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderLeftWidth",
            "comment": " Sets [`border-left-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width)\n\n    borderLeftWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRadius",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRadius2",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderRadius3",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Mixin"
          },
          {
            "name": "borderRadius4",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleB unitsB -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatibleD unitsD -> Css.Mixin"
          },
          {
            "name": "borderRight",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRight2",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderRight3",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderRightColor",
            "comment": " Sets [`border-right-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color)\n\n    borderRightColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderRightStyle",
            "comment": " Sets [`border-right-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style)\n\n    borderRightStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderRightWidth",
            "comment": " Sets [`border-right-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width)\n\n    borderRightWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderStyle",
            "comment": " Sets [`border-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)\n\n    borderStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderTop",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTop2",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderTop3",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderTopColor",
            "comment": " Sets [`border-top-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color)\n\n    borderTopColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderTopLeftRadius",
            "comment": " Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n\n    borderTopLeftRadius  (em 4)\n    borderTopLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTopLeftRadius2",
            "comment": " Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n\n    borderTopLeftRadius  (em 4)\n    borderTopLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderTopRightRadius",
            "comment": " Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n\n    borderTopRightRadius  (em 4)\n    borderTopRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTopRightRadius2",
            "comment": " Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n\n    borderTopRightRadius  (em 4)\n    borderTopRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderTopStyle",
            "comment": " Sets [`border-top-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style)\n\n    borderTopStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderTopWidth",
            "comment": " Sets [`border-top-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width)\n\n    borderTopWidth  (em 4)\n    borderTopWidth2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "bottom",
            "comment": " The [`bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/bottom) property.\n\n    position absolute\n    bottom (px 5)\n\nThis can also be used as a `bottom` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:\n\n    verticalAlign bottom\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "boxSizing",
            "comment": " Sets [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)\n\n    boxSizing borderBox\n",
            "type": "Css.BoxSizing compatible -> Css.Mixin"
          },
          {
            "name": "capitalize",
            "comment": " `capitalize` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "cell",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "center",
            "comment": " `center` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\nCan also be used with flex-box's align-items property to apply the value of center\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "ch",
            "comment": " [`ch`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ch) units.\n",
            "type": "Float -> Css.ExplicitLength Css.ChUnits"
          },
          {
            "name": "checked",
            "comment": " A [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Achecked)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "children",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "clip",
            "comment": " `clip` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value\n",
            "type": "Css.TextOverflow {}"
          },
          {
            "name": "cm",
            "comment": " [`cm`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#cm) units.\n",
            "type": "Float -> Css.ExplicitLength Css.CMUnits"
          },
          {
            "name": "colResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "color",
            "comment": " ",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "column",
            "comment": " The[`column`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "columnReverse",
            "comment": " The[`column-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "commonLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "compile",
            "comment": " Compile the given stylesheet to a CSS string, or to an error\nmessage if it could not be compiled.\n",
            "type": "Css.Stylesheet -> { css : String, warnings : List String }"
          },
          {
            "name": "content",
            "comment": " The [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis#Values) value for the\n  flex-basis property.\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent (Css.FlexBasis {})"
          },
          {
            "name": "contentBox",
            "comment": " The `content-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.\n",
            "type": "Css.BoxSizing {}"
          },
          {
            "name": "contextMenu",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "contextual",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "copy",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "crosshair",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "currentColor",
            "comment": " The [`currentColor`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword)\n    value.\n",
            "type": "Css.ColorValue Css.NonMixable"
          },
          {
            "name": "cursive",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "cursor",
            "comment": " A [`cursor`](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values)\nspecifies the mouse cursor displayed when mouse pointer is over an element.\n",
            "type": "Css.Cursor compatible -> Css.Mixin"
          },
          {
            "name": "cursorAlias",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "dashed",
            "comment": " A `dashed` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "default",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "deg",
            "comment": " [`deg`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#deg) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "descendants",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "diagonalFractions",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "dir",
            "comment": " A [`:dir`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adir)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "Css.Directionality -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "disabled",
            "comment": " A [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adisabled)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "discretionaryLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "display",
            "comment": " For `display: flex`, use [`displayFlex`](#displayFlex).\n",
            "type": "Css.Display compatible -> Css.Mixin"
          },
          {
            "name": "displayFlex",
            "comment": " `display: flex`. This works around the fact that\n[`flex` is already taken](#flex).\n",
            "type": "Css.Mixin"
          },
          {
            "name": "dotted",
            "comment": " A `dotted` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "double",
            "comment": " A `double` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "eResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "each",
            "comment": " ",
            "type": "List (List Css.Mixin -> Css.Snippet) -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "eachLine",
            "comment": " `each-line` [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent#Values) value\n",
            "type": "Css.TextIndent {}"
          },
          {
            "name": "ellipsis",
            "comment": " `ellipsis` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value\n",
            "type": "Css.TextOverflow {}"
          },
          {
            "name": "em",
            "comment": " [`em`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#em) units.\n",
            "type": "Float -> Css.ExplicitLength Css.EmUnits"
          },
          {
            "name": "empty",
            "comment": " An [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aempty)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "enabled",
            "comment": " An [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aenabled)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "end",
            "comment": " `end` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "everything",
            "comment": " A [`*` selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors).\n\n    (.) Foo\n      [ children\n          [ everything\n              [ color (rgb 14 15 16)\n              , borderRadius (px 5)\n              ]\n          ]\n      ]\n\n...compiles to:\n\n    .Foo > * {\n      color: rgb(14, 15, 16);\n      border-radius: 5px;\n    }\n\n",
            "type": "List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "ewResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "ex",
            "comment": " [`ex`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ex) units.\n",
            "type": "Float -> Css.ExplicitLength Css.ExUnits"
          },
          {
            "name": "fantasy",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "featureOff",
            "comment": " Alias for `off` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)\n",
            "type": "Int"
          },
          {
            "name": "featureOn",
            "comment": " Alias for `on` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)\n",
            "type": "Int"
          },
          {
            "name": "featureTag",
            "comment": " Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)\nwith the default value of `1`\n\n    fontFeatureSettings (featureTag \"hist\")\n",
            "type": "String -> Css.FeatureTagValue {}"
          },
          {
            "name": "featureTag2",
            "comment": " Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)\nwith a particular integer value\n\n    fontFeatureSettings (featureTag2 \"smcp\" on)\n    fontFeatureSettings (featureTag2 \"swsh\" 2)\n",
            "type": "String -> Int -> Css.FeatureTagValue {}"
          },
          {
            "name": "fillAvailable",
            "comment": " The `fill-available` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "fillBox",
            "comment": " The `fill-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox {}"
          },
          {
            "name": "first",
            "comment": " A [`:first`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstChild",
            "comment": " A [`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstLetter",
            "comment": " A [`::first-letter`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-letter)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstLine",
            "comment": " A [`::first-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-line)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstOfType",
            "comment": " A [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "fitContent",
            "comment": " The `fit-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "fixed",
            "comment": " A `fixed` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position fixed\n",
            "type": "Css.Position {}"
          },
          {
            "name": "flat",
            "comment": " The `flat` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle {}"
          },
          {
            "name": "flex",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent compatible -> Css.Mixin"
          },
          {
            "name": "flex2",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.Number compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "flex3",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.Number compatibleA -> Css.Number compatibleB -> Css.LengthOrNumber compatbileC -> Css.Mixin"
          },
          {
            "name": "flexBasis",
            "comment": " Sets [`flex-basis`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis) property.}\n\nflex (none | content | auto | (int 1) | (px 10))\nflex2 (int 1) ((int 1) | (px 10 ))\nflex3 (int 1) (int 1) ((int 1) | (px 10))\n\n",
            "type": "Css.FlexBasis compatible -> Css.Mixin"
          },
          {
            "name": "flexDirection",
            "comment": " Sets [`flex-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) property.}\n",
            "type": "Css.FlexDirection compatible -> Css.Mixin"
          },
          {
            "name": "flexEnd",
            "comment": " The[`flex-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "flexFlow1",
            "comment": " Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.}\n\nflexFlow1 (wrap | wrapReverse | noWrap)\nflexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)\n\nOr vice versa, order is not important for flex-flow\n",
            "type": "Css.FlexDirectionOrWrap compatible -> Css.Mixin"
          },
          {
            "name": "flexFlow2",
            "comment": " Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.}\n\nflexFlow1 (wrap | wrapReverse | noWrap)\nflexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)\n\nOr vice versa, order is not important for flex-flow\n",
            "type": "Css.FlexDirectionOrWrap compatibleA -> Css.FlexDirectionOrWrap compatibleB -> Css.Mixin"
          },
          {
            "name": "flexGrow",
            "comment": " Sets [`flex-grow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "flexShrink",
            "comment": " Sets [`flex-shrink`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "flexStart",
            "comment": " The[`flex-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "flexWrap",
            "comment": " Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.}\n",
            "type": "Css.FlexWrap compatible -> Css.Mixin"
          },
          {
            "name": "float",
            "comment": " A unitless number. Useful with properties like [`flexGrow`](#flexGrow)\nwhich accept unitless numbers.\n",
            "type": "Float -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.Number { numericValue : Float , unitLabel : String , units : Css.UnitlessFloat }))"
          },
          {
            "name": "focus",
            "comment": " A [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afocus)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "fontFace",
            "comment": " ",
            "type": "String -> String"
          },
          {
            "name": "fontFamilies",
            "comment": " ",
            "type": "List String -> Css.Mixin"
          },
          {
            "name": "fontFamily",
            "comment": " ",
            "type": "Css.FontFamily a -> Css.Mixin"
          },
          {
            "name": "fontFeatureSettings",
            "comment": " Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n    fontFeatureSettings (featureTag \"hist\")\n    fontFeatureSettings (featureTag2 \"smcp\" on)\n    fontFeatureSettings (featureTag2 \"swsh\" 2)\n",
            "type": "Css.FeatureTagValue a -> Css.Mixin"
          },
          {
            "name": "fontFeatureSettingsList",
            "comment": " Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n    fontFeatureSettingsList [featureTag \"c2sc\", featureTag \"smcp\"]\n",
            "type": "List (Css.FeatureTagValue a) -> Css.Mixin"
          },
          {
            "name": "fontSize",
            "comment": " Sets [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)\n\n    fontSize  xxSmall\n    fontSize  (px 12)\n",
            "type": "Css.FontSize a -> Css.Mixin"
          },
          {
            "name": "fontStyle",
            "comment": " Sets [`font-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\n\n    fontStyle  italic\n",
            "type": "Css.FontStyle a -> Css.Mixin"
          },
          {
            "name": "fontVariant",
            "comment": " Sets [`font-variant`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant)\n\n    fontVariant   smallCaps\n    fontVariant2  commonLigatures smallCaps\n    fontVariant3  commonLigatures smallCaps slashedZero\n    fontVariants  [ oldstyleNums tabularNums stackedFractions ordinal slashedZero ]\n",
            "type": "Css.FontVariant a -> Css.Mixin"
          },
          {
            "name": "fontVariant2",
            "comment": " ",
            "type": "Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.Mixin"
          },
          {
            "name": "fontVariant3",
            "comment": " ",
            "type": "Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.FontVariant compatibleC -> Css.Mixin"
          },
          {
            "name": "fontVariantCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps a -> Css.Mixin"
          },
          {
            "name": "fontVariantLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures a -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric",
            "comment": " ",
            "type": "Css.FontVariantNumeric a -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric2",
            "comment": " ",
            "type": "Css.FontVariantNumeric compatibleA -> Css.FontVariantNumeric compatibleB -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric3",
            "comment": " ",
            "type": "Css.FontVariantNumeric compatibleA -> Css.FontVariantNumeric compatibleB -> Css.FontVariantNumeric compatibleC -> Css.Mixin"
          },
          {
            "name": "fontVariantNumerics",
            "comment": " ",
            "type": "List (Css.FontVariantNumeric compatible) -> Css.Mixin"
          },
          {
            "name": "fontWeight",
            "comment": " Sets [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)\n\n    fontWeight  bold\n    fontWeight  (int 300)\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent a -> Css.Mixin"
          },
          {
            "name": "fullWidth",
            "comment": " `full-width` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "fullscreen",
            "comment": " A [`:fullscreen`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afullscreen)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "generalSiblings",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "geometricPrecision",
            "comment": " `geometricPrecision` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "grab",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "grabbing",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "grad",
            "comment": " [`grad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#grad) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "groove",
            "comment": " A `groove` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "hanging",
            "comment": " `hanging` [`hanging`](https://developer.mozilla.org/en-US/docs/Web/CSS/hanging#Values) value\n",
            "type": "Css.TextIndent {}"
          },
          {
            "name": "height",
            "comment": " Sets [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n\n    height (px 800)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "help",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "hex",
            "comment": " [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())\nin hexadecimal notation. You can optionally include `#` as the first character,\nfor benefits like syntax highlighting in editors, ease of copy/pasting from\ntools which express these as e.g. `#abcdef0`, etc.\n",
            "type": "String -> Css.Color"
          },
          {
            "name": "hidden",
            "comment": " `hidden` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.\n\nThis can also represent a `hidden` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.Overflow (Css.BorderStyle {})"
          },
          {
            "name": "historicalLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "hover",
            "comment": " An [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ahover)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "hsl",
            "comment": " [HSL color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl())\n`s` and `l` values are expressed as a number between 0 and 1 and are converted\nto the appropriate percentage at compile-time\n",
            "type": "number -> number -> number -> Css.Color"
          },
          {
            "name": "hsla",
            "comment": " [HSLA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsla())\n`s` and `l` values are expressed as a number between 0 and 1 and are converted\nto the appropriate percentage at compile-time\n",
            "type": "number -> number -> number -> number -> Css.Color"
          },
          {
            "name": "important",
            "comment": " Transforms the given property by adding !important to the end of its\ndeclaration.\n",
            "type": "Css.Mixin -> Css.Mixin"
          },
          {
            "name": "inches",
            "comment": " [`in`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#in) units.\n\n(This is `inches` instead of `in` because `in` is a reserved keyword in Elm.)\n",
            "type": "Float -> Css.ExplicitLength Css.InchUnits"
          },
          {
            "name": "indeterminate",
            "comment": " An [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aindeterminate)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "inherit",
            "comment": " The [`inherit`](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "initial",
            "comment": " The [`initial`](https://developer.mozilla.org/en-US/docs/Web/CSS/initial) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "inline",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inlineBlock",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inset",
            "comment": " An `inset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "int",
            "comment": " A unitless integer. Useful with properties like [`borderImageOutset`](#borderImageOutset)\nwhich accept either length units or unitless numbers for some properties.\n",
            "type": "Int -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.Number { numericValue : Float , unitLabel : String , units : Css.UnitlessInteger }))"
          },
          {
            "name": "invalid",
            "comment": " An [`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ainvalid)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "italic",
            "comment": " ",
            "type": "Css.FontStyle {}"
          },
          {
            "name": "justifyAll",
            "comment": " `justify-all` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "lang",
            "comment": " A [`:lang`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alang)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "large",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "larger",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "lastChild",
            "comment": " A [`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "lastOfType",
            "comment": " A [`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "left",
            "comment": " The [`left`](https://developer.mozilla.org/en-US/docs/Web/CSS/left) property.\n\n    position absolute\n    left (px 5)\n\nThis can also be used as a `left` [text alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:\n\n    textAlign left\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "letterSpacing",
            "comment": " Sets [`letter-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing)\n\n    letterSpacing (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "lighter",
            "comment": " ",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent {}"
          },
          {
            "name": "lineHeight",
            "comment": " Sets [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\n\n    lineHeight (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "lineThrough",
            "comment": " A [`line-through`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "liningNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "link",
            "comment": " A [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alink)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "lowercase",
            "comment": " `lowercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "margin",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "margin2",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.Mixin"
          },
          {
            "name": "margin3",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.LengthOrAuto compatibleC -> Css.Mixin"
          },
          {
            "name": "margin4",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.LengthOrAuto compatibleC -> Css.LengthOrAuto compatibleD -> Css.Mixin"
          },
          {
            "name": "marginBlockEnd",
            "comment": " Sets [`margin-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end)\n\n    marginBlockEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginBlockStart",
            "comment": " Sets [`margin-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start)\n\n    marginBlockStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginBottom",
            "comment": " Sets [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom)\n\n    marginBottom (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginInlineEnd",
            "comment": " Sets [`margin-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end)\n\n    marginInlineEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginInlineStart",
            "comment": " Sets [`margin-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start)\n\n    marginInlineStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginLeft",
            "comment": " Sets [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left)\n\n    marginLeft (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginRight",
            "comment": " Sets [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right)\n\n    marginRight (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginTop",
            "comment": " Sets [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top)\n\n    marginTop (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "matchParent",
            "comment": " `match-parent` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "matrix",
            "comment": " The [`matrix()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix()) transform-function.\n\n    transform (matrix 0.5 1 1.5 2 2.5 3)\n",
            "type": "number -> number -> number -> number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "matrix3d",
            "comment": " The [`matrix3d()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix3d()) transform-function.\n\n    transform (matrix3d 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3)\n",
            "type": "number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "maxContent",
            "comment": " The `max-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "maxHeight",
            "comment": " Sets [`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\n\n    maxHeight (px 1024)\n\n",
            "type": "Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "maxWidth",
            "comment": " Sets [`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\n\n    maxWidth (px 960)\n",
            "type": "Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "media",
            "comment": " ",
            "type": "List Css.Structure.MediaQuery -> List Css.Snippet -> Css.Snippet"
          },
          {
            "name": "mediaQuery",
            "comment": " ",
            "type": "String -> List Css.Snippet -> Css.Snippet"
          },
          {
            "name": "medium",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "middle",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign middle\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "minContent",
            "comment": " The `min-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "minHeight",
            "comment": " Sets [`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)\n\n    minHeight (px 100)\n\n",
            "type": "Css.LengthOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "minWidth",
            "comment": " Sets [`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)\n\n    minWidth (px 100)\n",
            "type": "Css.LengthOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "mixin",
            "comment": " A Mixin allowing you to modularly reuse common styles in other styles.\nThe return value of `mixin` can be used like any other property, since all\nproperties in elm-css are implemented as mixins.\n\n    underlineOnHover =\n        mixin \"underlineOnHover\"\n            [ textDecoration none\n\n            , hover\n                [ textDecoration underline ]\n            ]\n\n    stylesheet\n      [ (.) FancyLink\n          [ color (rgb 128 64 32)\n          , underlineOnHover\n          ]\n      ]\n\n...has the same result as:\n\n    stylesheet\n      [ (.) FancyLink\n          [ color (rgb 128 64 32)\n          , textDecoration none\n          , hover\n            [ textDecoration underline ]\n          ]\n      ]\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "mm",
            "comment": " [``](https://developer.mozilla.org/en-US/docs/Web/CSS/length#mm) units.\n",
            "type": "Float -> Css.ExplicitLength Css.MMUnits"
          },
          {
            "name": "monospace",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "move",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "neResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "neswResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "noCommonLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noContextual",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noDiscretionaryLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noDrop",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "noHistoricalLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noWrap",
            "comment": " ",
            "type": "Css.WhiteSpace (Css.FlexDirectionOrWrap (Css.FlexWrap {}))"
          },
          {
            "name": "none",
            "comment": " ",
            "type": "{ borderStyle : Css.Compatible , cursor : Css.Compatible , display : Css.Compatible , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible , none : Css.Compatible , lengthOrNone : Css.Compatible , lengthOrNoneOrMinMaxDimension : Css.Compatible , textDecorationLine : Css.Compatible , transform : Css.Compatible , value : String }"
          },
          {
            "name": "normal",
            "comment": " ",
            "type": "Css.FontStyleOrFeatureTagValue {}"
          },
          {
            "name": "notAllowed",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nsResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nthChild",
            "comment": " An [`:nth-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthLastChild",
            "comment": " An [`:nth-last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthLastOfType",
            "comment": " An [`:nth-last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthOfType",
            "comment": " An [`:nth`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nwResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "nwseResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "oblique",
            "comment": " ",
            "type": "Css.FontStyle {}"
          },
          {
            "name": "oldstyleNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "onlyChild",
            "comment": " An [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "onlyOfType",
            "comment": " An [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "opacity",
            "comment": " ",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "optimizeLegibility",
            "comment": " `optimizeLegibility` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "optimizeSpeed",
            "comment": " `optimizeSpeed` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "optional",
            "comment": " An [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aoptional)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "order",
            "comment": " Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "ordinal",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "outOfRange",
            "comment": " An [`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aout-of-range)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "outset",
            "comment": " An `outset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "overflow",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overflowX",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overflowY",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overline",
            "comment": " An [`overline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "padding",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "padding2",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "padding3",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Mixin"
          },
          {
            "name": "padding4",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingBlockEnd",
            "comment": " Sets [`padding-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end)\n\n    paddingBlockEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingBlockStart",
            "comment": " Sets [`padding-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start)\n\n    paddingBlockStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingBottom",
            "comment": " Sets [`padding-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom)\n\n    paddingBottom (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingInlineEnd",
            "comment": " Sets [`padding-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end)\n\n    paddingInlineEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingInlineStart",
            "comment": " Sets [`padding-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start)\n\n    paddingInlineStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingLeft",
            "comment": " Sets [`padding-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left)\n\n    paddingLeft (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingRight",
            "comment": " Sets [`padding-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right)\n\n    paddingRight (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingTop",
            "comment": " Sets [`padding-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top)\n\n    paddingTop (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "pc",
            "comment": " [`pc`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pc) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PcUnits"
          },
          {
            "name": "pct",
            "comment": " [`pct`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pct) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PercentageUnits"
          },
          {
            "name": "perspective",
            "comment": " The [`perspective()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#perspective()) transform-function.\n\n     transform (perspective 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "petiteCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "pointer",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "position",
            "comment": " The [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property.\n",
            "type": "Css.Position compatible -> Css.Mixin"
          },
          {
            "name": "preserve3d",
            "comment": " The `preserve-3d` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle {}"
          },
          {
            "name": "print",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "progress",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "projection",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "property",
            "comment": " Define a custom property.\n\n    stylesheet\n      [ body\n          [ property \"-webkit-font-smoothing\" \"none\" ]\n      ]\n\n...outputs\n\n    body {\n        -webkit-font-smoothing: none;\n    }\n",
            "type": "String -> String -> Css.Mixin"
          },
          {
            "name": "proportionalNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "pt",
            "comment": " [`pt`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pt) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PtUnits"
          },
          {
            "name": "px",
            "comment": " [`px`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#px) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PxUnits"
          },
          {
            "name": "qt",
            "comment": " For use with [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)\n\n    fontFamily    serif\n    fontFamilies  [(qt \"Gill Sans Extrabold\"), \"Helvetica\", .value sansSerif]\n",
            "type": "String -> String"
          },
          {
            "name": "rad",
            "comment": " [`rad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#rad) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "readWrite",
            "comment": " A [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aread-write)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "relative",
            "comment": " A `relative` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position relative\n",
            "type": "Css.Position {}"
          },
          {
            "name": "rem",
            "comment": " [`rem`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#rem) units.\n",
            "type": "Float -> Css.ExplicitLength Css.RemUnits"
          },
          {
            "name": "required",
            "comment": " A [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Arequired)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "rgb",
            "comment": " [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())\n    in functional notation.\n",
            "type": "Int -> Int -> Int -> Css.Color"
          },
          {
            "name": "rgba",
            "comment": " [RGBA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgba()).\n",
            "type": "Int -> Int -> Int -> Float -> Css.Color"
          },
          {
            "name": "ridge",
            "comment": " A `ridge` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "right",
            "comment": " Sets [`right`](https://developer.mozilla.org/en-US/docs/Web/CSS/right).\n\n    position absolute\n    right (px 5)\n\nThis can also be used as a `right` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:\n\n    textAlign right\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "root",
            "comment": " A [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aroot)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "rotate",
            "comment": " The [`rotate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()) transform-function.\n\n     transform (rotate (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotate3d",
            "comment": " The [`rotate3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate3d()) transform-function.\n\n     transform (rotate3d 1 1 1 (deg 90))\n",
            "type": "number -> number -> number -> Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateX",
            "comment": " The [`rotateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateX()) transform-function.\n\n     transform (rotateX (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateY",
            "comment": " The [`rotateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateY()) transform-function.\n\n     transform (rotateY (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateZ",
            "comment": " The [`rotateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateZ()) transform-function.\n\n     transform (rotateZ (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "row",
            "comment": " The[`row`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "rowResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "rowReverse",
            "comment": " The[`row-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "sResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "sansSerif",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "scale",
            "comment": " The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.\n\n     transform (scale 0.5)\n     transform (scale2 0.5 0.7)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scale2",
            "comment": " The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.\n\n     transform (scale 0.5)\n     transform (scale2 0.5 0.7)\n",
            "type": "number -> number -> Css.Transform {}"
          },
          {
            "name": "scale3d",
            "comment": " The [`scale3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale3d()) transform-function.\n\n     transform (scale3d 0.5 0.5 1)\n",
            "type": "number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "scaleX",
            "comment": " The [`scaleX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleX()) transform-function.\n\n     transform (scaleX 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scaleY",
            "comment": " The [`scaleY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleY()) transform-function.\n\n     transform (scaleY 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scope",
            "comment": " A [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ascope)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "screen",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "scroll",
            "comment": " The `scroll` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.\n",
            "type": "Css.Overflow {}"
          },
          {
            "name": "seResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "selection",
            "comment": " A [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aselection)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "selector",
            "comment": " A custom selector. Use this for things like\n[attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)\nand [universal selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors).\n\n    stylesheet \"homepage\"\n        [ selector \"* [lang^=en]\"\n            [ textDecoration underline\n            , color (rgb 7 7 7)\n            ]\n        ]\n",
            "type": "String -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "serif",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "skew",
            "comment": " The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.\n\n     transform (skew (deg 90))\n     transform (skew2 (deg 90) (deg 45))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "skew2",
            "comment": " The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.\n\n     transform (skew (deg 90))\n     transform (skew2 (deg 90) (deg 45))\n",
            "type": "Css.Angle compatibleA -> Css.Angle compatibleB -> Css.Transform {}"
          },
          {
            "name": "skewX",
            "comment": " The [`skewX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewX()) transform-function.\n\n     transform (skewX (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "skewY",
            "comment": " The [`skewY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewY()) transform-function.\n\n    transform (skewY (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "slashedZero",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "small",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "smallCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "smaller",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "solid",
            "comment": " A `solid` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "src",
            "comment": " ",
            "type": "Css.ImportType compatible -> String"
          },
          {
            "name": "stackedFractions",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "start",
            "comment": " `start` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "static",
            "comment": " A `static` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position static\n",
            "type": "Css.Position {}"
          },
          {
            "name": "sticky",
            "comment": " A `sticky` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position sticky\n",
            "type": "Css.Position {}"
          },
          {
            "name": "stretch",
            "comment": " The[`stretch`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "stylesheet",
            "comment": " A stylesheet.\n\n    stylesheet\n        [ body\n            [ width (px 960)\n            , color (rgb 7 7 7)\n            ]\n        ]\n",
            "type": "List Css.Snippet -> Css.Stylesheet"
          },
          {
            "name": "sub",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign sub\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "super",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign super\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "swResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "tabularNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "target",
            "comment": " A [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Atarget)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "text",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "textAlign",
            "comment": " Sets [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "textAlignLast",
            "comment": " Sets [`text-align-last`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last).\n    **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n    use this workaround:\n\n    property \"text-align-last\" \"auto\"\n\n    If this is annoying, please file an issue, so adding support for \"auto\"\n    can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "textBottom",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign textBottom\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "textDecoration",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine a -> Css.Mixin"
          },
          {
            "name": "textDecoration2",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine compatibleA -> Css.TextDecorationStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "textDecoration3",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine compatibleA -> Css.TextDecorationStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textDecorationLine",
            "comment": " Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n\n    textDecorationLine underline\n\nYou can specify multiple line decorations with `textDecorationLines`.\n\n    textDecorationLines  [ underline, overline ]\n",
            "type": "Css.TextDecorationLine compatible -> Css.Mixin"
          },
          {
            "name": "textDecorationLines",
            "comment": " Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n\n    textDecorationLines  [ underline, overline ]\n",
            "type": "List (Css.TextDecorationLine compatible) -> Css.Mixin"
          },
          {
            "name": "textDecorationStyle",
            "comment": " Sets [`text-decoration-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n\n    textDecorationStyle dotted\n",
            "type": "Css.TextDecorationStyle compatible -> Css.Mixin"
          },
          {
            "name": "textDecorations",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatible) -> Css.Mixin"
          },
          {
            "name": "textDecorations2",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatibleA) -> Css.TextDecorationStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "textDecorations3",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatibleA) -> Css.TextDecorationStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textIndent",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "textIndent2",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.Mixin"
          },
          {
            "name": "textIndent3",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.TextIndent compatibleC -> Css.Mixin"
          },
          {
            "name": "textJustify",
            "comment": " `text-justify` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "textOverflow",
            "comment": " Sets [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow).\n\n    textOverflow ellipsis\n",
            "type": "Css.TextOverflow compatible -> Css.Mixin"
          },
          {
            "name": "textRendering",
            "comment": " Sets [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering).\n",
            "type": "Css.TextRendering a -> Css.Mixin"
          },
          {
            "name": "textShadow",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.None compatible -> Css.Mixin"
          },
          {
            "name": "textShadow2",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "textShadow3",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textShadow4",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.ColorValue compatibleD -> Css.Mixin"
          },
          {
            "name": "textTop",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign textTop\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "textTransform",
            "comment": " Sets [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform).\n",
            "type": "Css.TextTransform compatible -> Css.Mixin"
          },
          {
            "name": "thick",
            "comment": " The\n[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\nof `thin`, `medium`, and `thick` have unspecified behavior according to the\nCSS specification, and as such are intentionally unsupported.\n\nUsing them is a bad idea, but if the fate of the world depends on it, you can\nfall back on something like this:\n\n    stylesheet\n        [ button\n            [ property \"border-left\" \"thick\" ]\n        ]\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "thin",
            "comment": " The\n[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\nof `thin`, `medium`, and `thick` have unspecified behavior according to the\nCSS specification, and as such are intentionally unsupported.\n\nUsing them is a bad idea, but if the fate of the world depends on it, you can\nfall back on something like this:\n\n    stylesheet\n        [ button\n            [ property \"border-left\" \"thin\" ]\n        ]\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "titlingCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "top",
            "comment": " The [`top`](https://developer.mozilla.org/en-US/docs/Web/CSS/top) property.\n\n    position absolute\n    top (px 5)\n\nThis can also be used as a `top` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:\n\n    verticalAlign top\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "transform",
            "comment": " Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\nwith a single explicit transform value. If you need to set the transform\nproperty to `none`, use the `transforms` function with an empty list. See\n`transforms` for more details.\n\n    transform (scaleX 1.4)\n",
            "type": "Css.Transform compatible -> Css.Mixin"
          },
          {
            "name": "transformBox",
            "comment": " The [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox compatible -> Css.Mixin"
          },
          {
            "name": "transformStyle",
            "comment": " The [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle compatible -> Css.Mixin"
          },
          {
            "name": "transforms",
            "comment": " Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\nwith a series of transform-functions. If an empty list is provided, the CSS\noutput will be `none`, as if to state directly that the set of transforms\napplied to the current selector is empty:\n\n    transforms [] -- transform: none;\n\nIn the case that only one transform is needed, the `transform` function may be\nused instead for convenience. `transform` expects exactly one transform-function\nand cannot be passed `none`:\n\n    transform (matrix 1 2 3 4 5 6) -- transform: matrix(1, 2, 3, 4, 5, 6);\n\nIf a collection of transforms is needed, use the `transforms` function with a\npopulated list:\n\n    transforms [ perspective 1, scale2 1 1.4 ]\n",
            "type": "List (Css.Transform compatible) -> Css.Mixin"
          },
          {
            "name": "translate",
            "comment": " The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.\n\n    transform (translate (px 100))\n    transform (translate2 (px 100) (pct -45))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translate2",
            "comment": " The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.\n\n    transform (translate (px 100))\n    transform (translate2 (px 100) (pct -45))\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Transform {}"
          },
          {
            "name": "translate3d",
            "comment": " The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.\n\n    transform (translate3d (px 100) (px 100) (px 100))\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Transform {}"
          },
          {
            "name": "translateX",
            "comment": " The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.\n\n    transform (translateX (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translateY",
            "comment": " The [`translateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateY()) transform-function.\n\n    transform (translateY (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translateZ",
            "comment": " The [`translateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateZ()) transform-function.\n\n    transform (translateZ (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "transparent",
            "comment": " A [`transparent`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#transparent_keyword) color.\n",
            "type": "Css.ColorValue Css.NonMixable"
          },
          {
            "name": "true",
            "comment": " `true` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "turn",
            "comment": " [`turn`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#tr) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "tv",
            "comment": " ",
            "type": "Css.MediaQuery"
          },
          {
            "name": "underline",
            "comment": " An [`underline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "unicase",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "unset",
            "comment": " The [`unset`](https://developer.mozilla.org/en-US/docs/Web/CSS/unset) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "uppercase",
            "comment": " `uppercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "valid",
            "comment": " A [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avalid)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "verticalAlign",
            "comment": " Sets [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align).\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "verticalText",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "vh",
            "comment": " [`vh`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vh) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VhUnits"
          },
          {
            "name": "viewBox",
            "comment": " The `view-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox {}"
          },
          {
            "name": "visible",
            "comment": " The `visible` value for the [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) property.\n",
            "type": "Css.Overflow {}"
          },
          {
            "name": "vmax",
            "comment": " [`vmax`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmax) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VMaxUnits"
          },
          {
            "name": "vmin",
            "comment": " [`vmin`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmin) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VMinUnits"
          },
          {
            "name": "vw",
            "comment": " [`vw`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vw) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VwUnits"
          },
          {
            "name": "wResize",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "wait",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "wavy",
            "comment": " A `wavy` [text decoration style](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style#Values).\n",
            "type": "Css.TextDecorationStyle {}"
          },
          {
            "name": "whiteSpace",
            "comment": " ",
            "type": "Css.WhiteSpace compatible -> Css.Mixin"
          },
          {
            "name": "width",
            "comment": " Sets [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width)\n\n    width (px 960)\n\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "withClass",
            "comment": " ",
            "type": "class -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "withMedia",
            "comment": " ",
            "type": "List Css.Structure.MediaQuery -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "wrap",
            "comment": " The[`wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the\n  flex-wrap property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexWrap {})"
          },
          {
            "name": "wrapReverse",
            "comment": " The[`wrap-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the\n  flex-wrap property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexWrap {})"
          },
          {
            "name": "xLarge",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xSmall",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xxLarge",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xxSmall",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "zero",
            "comment": " Convenience length value that compiles to 0 with no units.\n\n    stylesheet\n      [ ul\n          [ padding zero ]\n      ]\n\n...compiles to:\n\n    ul {\n        padding: 0;\n    }\n",
            "type": "{ value : String , length : Css.Compatible , lengthOrNumber : Css.Compatible , lengthOrNone : Css.Compatible , lengthOrAuto : Css.Compatible , lengthOrMinMaxDimension : Css.Compatible , lengthOrNoneOrMinMaxDimension : Css.Compatible , number : Css.Compatible , units : Css.UnitlessInteger , unitLabel : String , numericValue : Float }"
          },
          {
            "name": "zoomIn",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "zoomOut",
            "comment": " ",
            "type": "Css.Cursor {}"
          },
          {
            "name": "|*|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|+|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|-|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|/|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Css.Namespace",
        "comment": " Namespacing\n@docs namespace\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "namespace",
            "comment": "\ntakes an identifier, namespaces the list of snippets given with that identifier\n",
            "type": "a -> List Css.Preprocess.Snippet -> List Css.Preprocess.Snippet"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Css.Elements",
        "comment": " Selectors for HTML elements.\n\n# Basic elements\n@docs html, body\n\n# Content sectioning\n@docs article, header, footer, h1, h2, h3, h4, h5, h6, nav, section\n\n# Text content\n@docs div, hr, li, main', ol, p, ul, pre\n\n# Inline text semantics\n@docs a, code, small, span, strong\n\n# Image and multimedia\n@docs img, audio, video, canvas\n\n# Table content\n@docs caption, col, colgroup, table, tbody, td, tfoot, th, thead, tr\n\n# Forms\n@docs button, fieldset, form, input, label, legend, optgroup, option, progress, select\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " Selector for an `<a>` element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "article",
            "comment": " Selector for an article element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "audio",
            "comment": " Selector for an audio element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "body",
            "comment": " Selector for a body element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "button",
            "comment": " Selector for a button element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "canvas",
            "comment": " Selector for a canvas element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "caption",
            "comment": " Selector for a caption element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "code",
            "comment": " Selector for a code element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "col",
            "comment": " Selector for a col element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "colgroup",
            "comment": " Selector for a colgroup element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "div",
            "comment": " Selector for a div element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "fieldset",
            "comment": " Selector for a fieldset element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "footer",
            "comment": " Selector for a footer element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "form",
            "comment": " Selector for a form element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h1",
            "comment": " Selector for an h1 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h2",
            "comment": " Selector for an h2 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h3",
            "comment": " Selector for an h3 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h4",
            "comment": " Selector for an h4 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h5",
            "comment": " Selector for an h5 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h6",
            "comment": " Selector for an h6 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "header",
            "comment": " Selector for a header element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "hr",
            "comment": " Selector for an hr element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "html",
            "comment": " Selector for a html element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "img",
            "comment": " Selector for a img element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "input",
            "comment": " Selector for an input element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "label",
            "comment": " Selector for a label element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "legend",
            "comment": " Selector for a legend element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "li",
            "comment": " Selector for an li element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "main'",
            "comment": " Selector for a main element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "nav",
            "comment": " Selector for a nav element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "ol",
            "comment": " Selector for an ol element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "optgroup",
            "comment": " Selector for an optgroup element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "option",
            "comment": " Selector for an option element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "p",
            "comment": " Selector for a p element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "pre",
            "comment": " Selector for a pre element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "progress",
            "comment": " Selector for a progress element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "section",
            "comment": " Selector for a section element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "select",
            "comment": " Selector for a select element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "small",
            "comment": " Selector for a small element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "span",
            "comment": " Selector for a span element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "strong",
            "comment": " Selector for a strong element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "table",
            "comment": " Selector for a table element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tbody",
            "comment": " Selector for a tbody element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "td",
            "comment": " Selector for a td element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tfoot",
            "comment": " Selector for a tfoot element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "th",
            "comment": " Selector for a th element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "thead",
            "comment": " Selector for a thead element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tr",
            "comment": " Selector for a thead element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "ul",
            "comment": " Selector for a ul element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "video",
            "comment": " Selector for a video element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css-helpers",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Html.CssHelpers",
        "comment": " Helper functions for using elm-css with elm-html.\n\n@docs withNamespace, style, stylesheetLink\n\n@docs Helpers, Namespace\n",
        "aliases": [
          {
            "name": "Helpers",
            "comment": " Helpers for working on a given class/id\n",
            "args": [
              "class",
              "id",
              "msg"
            ],
            "type": "{ class : List class -> Html.Attribute msg , classList : List ( class, Bool ) -> Html.Attribute msg , id : id -> Html.Attribute msg }"
          },
          {
            "name": "Namespace",
            "comment": " namespaced helpers for working on a given class/id\n",
            "args": [
              "name",
              "class",
              "id",
              "msg"
            ],
            "type": "{ class : List class -> Html.Attribute msg , classList : List ( class, Bool ) -> Html.Attribute msg , id : id -> Html.Attribute msg , name : name }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "style",
            "comment": " Create an inline style from CSS\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "stylesheetLink",
            "comment": " Link in a stylesheet from a url\n",
            "type": "String -> Html.Html msg"
          },
          {
            "name": "withNamespace",
            "comment": " Takes a namespace and returns helper functions for `id`, `class`, and\n`classList` which work just like their equivalents in `elm-html` except that\nthey accept union types and automatically incorporate the given namespace. Also\nnote that `class` accepts a `List` instead of a single element; this is so you\ncan specify multiple classes without having to call `classList` passing tuples\nthat all end in `True`.\n\n    -- Put this before your view code to specify a namespace.\n    { id, class, classList } = withNamespace \"homepage\"\n\n    view =\n        h1 [ id Hero, class [ Fancy ] ] [ text \"Hello, World!\" ]\n\n    type HomepageIds = Hero | SomethingElse | AnotherId\n    type HomepageClasses = Fancy | AnotherClass | SomeOtherClass\n\nThe above would generate this DOM element:\n\n    <h1 id=\"Hero\" class=\"homepage_Fancy\">Hello, World!</h1>\n",
            "type": "name -> Html.CssHelpers.Namespace name class id msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css-util",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Css.Helpers",
        "comment": " Utility functions for elm-css.\n\n@docs toCssIdentifier, identifierToString\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "identifierToString",
            "comment": " Converts an arbitrary identifier to a valid CSS identifier, then prepends\nthe given namespace.\n",
            "type": "a -> b -> String"
          },
          {
            "name": "toCssIdentifier",
            "comment": " Converts an arbitrary value to a valid CSS identifier by calling\n`toString` on it, trimming it, replacing chunks of whitespace with `-`,\nand stripping out invalid characters.\n",
            "type": "a -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-validate",
    "version": "1.1.2",
    "docs": [
      {
        "name": "Validate",
        "comment": " Convenience functions for validating data.\n\n# Validating a subject\n@docs Validator, ifBlank, ifNotInt, ifEmptyDict, ifEmptySet, ifInvalid, ifNothing, ifInvalidEmail\n\n\n# Combining validators\n@docs all, any, eager\n",
        "aliases": [
          {
            "name": "Validator",
            "comment": " A `Validator` is a function which takes a subject and returns a list of errors\ndescribing anything invalid about that subject.\n\nAn empty error list means the subject was valid.\n",
            "args": [
              "error",
              "subject"
            ],
            "type": "subject -> List error"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Run each of the given validators, in order, and return their concatenated\nerror lists.\n",
            "type": "List (Validate.Validator error subject) -> Validate.Validator error subject"
          },
          {
            "name": "any",
            "comment": " Return `True` if none of the given validators returns any errors for the given\nsubject, and `False` if any validator returns one or more errors.\n",
            "type": "List (Validate.Validator error subject) -> subject -> Bool"
          },
          {
            "name": "eager",
            "comment": " Run each of the given validators, in order, stopping after the first error\nand returning it. If no errors are encountered, return `Nothing`.\n",
            "type": "List (Validate.Validator error subject) -> subject -> Maybe.Maybe error"
          },
          {
            "name": "ifBlank",
            "comment": " Return an error if the given `String` is empty, or if it contains only\nwhitespace characters.\n",
            "type": "error -> Validate.Validator error String"
          },
          {
            "name": "ifEmptyDict",
            "comment": " Return an error if the given `Dict` is empty.\n",
            "type": "error -> Validate.Validator error (Dict.Dict comparable v)"
          },
          {
            "name": "ifEmptySet",
            "comment": " Return an error if the given `Set` is empty.\n",
            "type": "error -> Validate.Validator error (Set.Set comparable)"
          },
          {
            "name": "ifInvalid",
            "comment": " Return an error if the given predicate returns `True` for the given\nsubject.\n",
            "type": "(subject -> Bool) -> error -> Validate.Validator error subject"
          },
          {
            "name": "ifInvalidEmail",
            "comment": " Return an error if the given email string is malformed.\n",
            "type": "error -> Validate.Validator error String"
          },
          {
            "name": "ifNotInt",
            "comment": " Return an error if the given `String` cannot be parsed as an `Int`.\n",
            "type": "error -> Validate.Validator error String"
          },
          {
            "name": "ifNothing",
            "comment": " Return an error if given a `Maybe` that is `Nothing`.\n",
            "type": "error -> Validate.Validator error (Maybe.Maybe a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "rtfeldman/html-test-runner",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Test.Runner.Html",
        "comment": " HTML Runner\n\nRuns tests in a browser and reports the results in the DOM. You can bring up\none of these tests in elm-reactor to have it run and show outputs.\n\n@docs run, runWithOptions\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "run",
            "comment": " Run the test and report the results.\n\nFuzz tests use a default run count of 100, and an initial seed based on the\nsystem time when the test runs begin.\n",
            "type": "Test.Test -> Platform.Program Basics.Never"
          },
          {
            "name": "runWithOptions",
            "comment": " Run the test using the provided options. If `Nothing` is provided for either\n`runs` or `seed`, it will fall back on the options used in [`run`](#run).\n",
            "type": "Maybe.Maybe Int -> Maybe.Maybe Random.Pcg.Seed -> Test.Test -> Platform.Program Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Test.Runner.Html.App",
        "comment": " Test runner for a Html.App\n\n@docs run\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "run",
            "comment": " Run the tests and render the results as a Web page.\n",
            "type": "Test.Runner.Html.App.RunnerOptions -> Test.Runner.Html.App.AppOptions msg model -> Test.Test -> Platform.Program Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "rtfeldman/legacy-elm-test",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Legacy.Check.Test",
        "comment": " An implementation of the legacy `Check.Test` module for backwards compatibility.\n\nIf you are currently using `Check.Test` and want to upgrade your version of\n`elm-test` to access the improved test runners, but still want your existing\ncode to compile, just replace your current `import Check.Test` with this:\n\n    import Legacy.Check.Test as CheckTest\n\nThat's it! (Well, you may also need to find/replace `Check.Test` with `CheckTest`.)\n\nThis module provides integration with\n[`elm-test`](http://package.elm-lang.org/packages/elm-community/elm-test/latest/).\n\n# Convert to Tests\n@docs evidenceToTest\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "evidenceToTest",
            "comment": " Convert elm-check's Evidence into an elm-test Test. You can use elm-test's\nrunners to view the results of your property-based tests, alongside the results\nof unit tests.\n",
            "type": "Check.Evidence -> Legacy.ElmTest.Test"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Legacy.ElmTest",
        "comment": " An implementation of the legacy `ElmTest` module for backwards compatibility.\n\nIf you are currently using `ElmTest` and want to upgrade your version of\n`elm-test` to access the improved test runners, but still want your existing\ncode to compile, just replace your current `import ElmTest` with this:\n\n    import Legacy.ElmTest as ElmTest\n\nThat's it!\n\nThis implementation of the old `ElmTest` API has been done entirely\nin terms of the new API. All of the logic should work the same way, although\nfailure reports will be formatted differently. They are most different for\n`stringRunner` and `defaultTest`, so take a look at the docs for those to see\nwhat's changed.\n\nNote that unlike `elm-test`, this API is synchronous, meaning tests cannot be\nrun in parallel. (That was a big part of the motivation for changing the API!)\nUnfortunately, there is no workaround for this. Upgrading is the only way.\n\n# Tests\n@docs Test, test, defaultTest, equals, suite\n\n# Assertions\n@docs Assertion, assert, assertEqual, assertNotEqual, lazyAssert, assertionList, pass, fail\n\n# Run tests in-program\n@docs stringRunner\n\n# Run tests as an app\n@docs runSuite, runSuiteHtml\n",
        "aliases": [
          {
            "name": "Assertion",
            "comment": " The basic unit of testability.\n",
            "args": [],
            "type": "Expect.Expectation"
          },
          {
            "name": "Test",
            "comment": " The core unit representing a runnable test, or a group of tests called a\nsuite.\n",
            "args": [],
            "type": "Test.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "assert",
            "comment": " Basic function to assert that some expression is True\n",
            "type": "Bool -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "assertEqual",
            "comment": " Basic function to assert that two expressions are equal in value.\n",
            "type": "a -> a -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "assertNotEqual",
            "comment": " Basic function to assert that two expressions are not equal.\n",
            "type": "a -> a -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "assertionList",
            "comment": " Given a list of values and another list of expected values, generates a\nlist of assertions that these values are equal.\n",
            "type": "List a -> List a -> List Legacy.ElmTest.Assertion"
          },
          {
            "name": "defaultTest",
            "comment": " In the original elm-test API, this would create a `Test` with a default name automatically chosen based on the inputs.\nFor example, `defaultTest (assertEqual 5 5)` would have be named \"5 == 5\".\n\nIn this version, it creates a `Test` with no name instead.\n",
            "type": "Legacy.ElmTest.Assertion -> Legacy.ElmTest.Test"
          },
          {
            "name": "equals",
            "comment": " Create a `Test` which asserts equality between two expressions.\nFor example, `(7 + 10) `equals` (1 + 16)` will create a `Test` which tests for\nequality between the statements `(7 + 10)` and `(1 + 16)`.\n",
            "type": "a -> a -> Legacy.ElmTest.Test"
          },
          {
            "name": "fail",
            "comment": " Create an assertion that always fails, for reasons described by the given\nstring.\n",
            "type": "String -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "lazyAssert",
            "comment": " A lazy version of `assert`. Delays execution of the expression until tests\nare run.\n",
            "type": "(() -> Bool) -> Legacy.ElmTest.Assertion"
          },
          {
            "name": "pass",
            "comment": " An assertion that always passes. This is useful when you have test results\nfrom another library but want to use ElmTest runners.\n",
            "type": "Legacy.ElmTest.Assertion"
          },
          {
            "name": "runSuite",
            "comment": " Run a suite as a program. Useful for tests run from the command line:\n    module Tests exposing (..)\n    import ElmTest exposing (..)\n\n    tests : Test\n    tests =\n        suite \"A Test Suite\"\n            [ test \"Addition\" (assertEqual (3 + 7) 10)\n            , test \"Subtraction\" (assertEqual (7 - 3) 4)\n            , test \"This test should fail\" (assert False)\n            ]\n\n    main : Program Never\n    main =\n        runSuite tests\nAnd then:\n    $ elm-make Tests.elm --output tests.js\n    $ node tests.js\n",
            "type": "Legacy.ElmTest.Test -> Platform.Program Basics.Never"
          },
          {
            "name": "runSuiteHtml",
            "comment": " Run a suite as program with Html output.\n",
            "type": "Legacy.ElmTest.Test -> Platform.Program Basics.Never"
          },
          {
            "name": "stringRunner",
            "comment": " Run a test or a test suite and return the results as a `String`. Mostly\nuseful if you want to implement a different type of output for your test\nresults. If you aren't sure whether or not to use this function, you should\nprobably use `elementRunner`.\n",
            "type": "Legacy.ElmTest.Test -> String"
          },
          {
            "name": "suite",
            "comment": " Convert a list of `Test`s to a test suite. Test suites are used to group\ntests into logical units, simplifying the management and running of many tests.\nTakes a name and a list of `Test`s. Since suites are also of type `Test`, they\ncan contain other suites, allowing for a more complex tree structure.\n",
            "type": "String -> List Legacy.ElmTest.Test -> Legacy.ElmTest.Test"
          },
          {
            "name": "test",
            "comment": " A basic function to create a `Test`. Takes a name and an `Assertion`.\n",
            "type": "String -> Legacy.ElmTest.Assertion -> Legacy.ElmTest.Test"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "rtfeldman/node-test-runner",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Test.Runner.Node",
        "comment": " # Node Runner\n\nRuns a test and outputs its results to the console. Exit code is 0 if tests\npassed and 1 if any failed.\n\n@docs run, runWithOptions\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "run",
            "comment": " Run the test and report the results.\n\nFuzz tests use a default run count of 100, and an initial seed based on the\nsystem time when the test runs begin.\n",
            "type": "Test.Runner.Node.Emitter Test.Runner.Node.Msg -> Test.Test -> Platform.Program Json.Encode.Value"
          },
          {
            "name": "runWithOptions",
            "comment": " Run the test using the provided options. If `Nothing` is provided for either\n`runs` or `seed`, it will fall back on the options used in [`run`](#run).\n",
            "type": "Test.Runner.Node.Options -> Test.Runner.Node.Emitter Test.Runner.Node.Msg -> Test.Test -> Platform.Program Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "seanhess/elm-style",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Style",
        "comment": " Functions to combine and compose for reusable inline styles\n\n# Style\n@docs Style\n\n# Background\n@docs background, backgroundColor, backgroundImage, backgroundPosition, backgroundSize, backgroundRepeat, backgroundAttachment, linearGradient, radialGradient, noRepeat, repeat, repeatX, repeatY\n\n# Values\n@docs px, pc, em, color', deg, rad, url\n\n# Border\n@docs border, borderColor, borderBottomColor, borderLeftColor, borderRightColor, borderTopColor, borderStyle, borderBottomStyle, borderLeftStyle, borderRightStyle, borderTopStyle, borderWidth, borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderRadius, borderBottomRadius, borderLeftRadius, borderRightRadius, borderTopRadius, dashed, dotted, double, groove, ridge, solid\n\n# Outline\n@docs outline, outlineColor, outlineStyle, outlineWidth\n\n# Cursor\n@docs cursor\n\n# Dimensions\n@docs height, width, maxHeight, maxWidth, minHeight, minWidth, dimensions\n\n# Display\n@docs display, block, inlineBlock, table, tableCell, fixed, flex', inlineTable, runIn, hidden, visible, inlineFlex, listItem, tableCaption, tableColumn, tableColumnGroup, tableFooterGroup, tableHeaderGroup, tableRow, tableRowGroup\n\n# Positioning\n@docs position, bottom, left, right, top, clip, overflow, zIndex, absolute, relative, static, inline, block, scroll\n\n# Align\n@docs verticalAlign, baseline, center, textAlign, left', right'\n\n# Flex\n@docs flex, flexDirection, flexWrap, flexFlow, justifyContent, alignItems, alignContent, order, flexGrow, flexShrink, flexBasis, alignSelf, column, columnReverse, flexEnd, flexStart, justify, row, rowReverse, spaceAround, spaceBetween, wrap, wrapReverse\n\n# Float\n@docs float, clear, both, left', right'\n\n# Margin\n@docs margin, marginBottom, marginTop, marginLeft, marginRight\n\n# Padding\n@docs padding, paddingBottom, paddingTop, paddingLeft, paddingRight\n\n# Font\n@docs fontFamily, fontSize, fontStyle, fontVariant, fontWeight, italic, smallCaps\n\n# Text\n@docs color, direction, letterSpacing, lineHeight, textAlign, textDecoration, textIndent, unicodeBidi, whiteSpace, wordSpacing, bidiOverride, embed, justify, direction, rtl, ltr, nowrap, oblique, pre, preLine, preWrap, overline, underline, lineThrough\n\n# List Style\n@docs listStyleImage, listStylePosition, listStyleType, inside, outside, lineThrough\n\n# Shadow\n@docs boxShadow, textShadow, inset, outset\n\n# Transform\n@docs transform, translate, translate3d, perspective, rotate, rotate3d, scale, scale3d, skew, matrix\n\n# Generic\n@docs auto, none, normal\n\n# Prefixing\n@docs PrefixSet, prefixSet, prefixName, prefixValue\n\n",
        "aliases": [
          {
            "name": "PrefixSet",
            "comment": " Prefixes for the various browsers. This is handled by the property functions for you ",
            "args": [],
            "type": "{ ms : String , moz : String , o : String , webkit : String , default : String }"
          },
          {
            "name": "Style",
            "comment": " Alias for inline styles\n\n    myContainer : List Style\n    myContainer =\n      [ width (pc 100)\n      , height (pc 100)\n      , fontFamily \"sans-serif\"\n      ]\n",
            "args": [],
            "type": "( String, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "absolute",
            "comment": " absolute ",
            "type": "String"
          },
          {
            "name": "alignContent",
            "comment": " align-content ",
            "type": "String -> Style.Style"
          },
          {
            "name": "alignItems",
            "comment": " align-items ",
            "type": "String -> Style.Style"
          },
          {
            "name": "alignSelf",
            "comment": " align-self ",
            "type": "String -> Style.Style"
          },
          {
            "name": "auto",
            "comment": " auto ",
            "type": "String"
          },
          {
            "name": "background",
            "comment": " background ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundAttachment",
            "comment": " background-attachment ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundColor",
            "comment": " background-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundImage",
            "comment": " background-image ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundPosition",
            "comment": " background-position ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundRepeat",
            "comment": " background-repeat ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundSize",
            "comment": " background-size ",
            "type": "String -> Style.Style"
          },
          {
            "name": "baseline",
            "comment": " baseline ",
            "type": "String"
          },
          {
            "name": "bidiOverride",
            "comment": " bidi-override ",
            "type": "String"
          },
          {
            "name": "block",
            "comment": " block ",
            "type": "String"
          },
          {
            "name": "border",
            "comment": " border ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomColor",
            "comment": " border-bottom-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomRadius",
            "comment": " border-bottom-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomStyle",
            "comment": " border-bottom-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomWidth",
            "comment": " border-bottom-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderColor",
            "comment": " border-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftColor",
            "comment": " border-left-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftRadius",
            "comment": " border-left-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftStyle",
            "comment": " border-left-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftWidth",
            "comment": " border-left-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRadius",
            "comment": " border-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightColor",
            "comment": " border-right-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightRadius",
            "comment": " border-right-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightStyle",
            "comment": " border-right-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightWidth",
            "comment": " border-right-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderStyle",
            "comment": " border-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopColor",
            "comment": " border-top-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopRadius",
            "comment": " border-top-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopStyle",
            "comment": " border-top-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopWidth",
            "comment": " border-top-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderWidth",
            "comment": " border-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "both",
            "comment": " both ",
            "type": "String"
          },
          {
            "name": "bottom",
            "comment": " bottom ",
            "type": "String -> Style.Style"
          },
          {
            "name": "boxShadow",
            "comment": " box-shadow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "center",
            "comment": " center ",
            "type": "String"
          },
          {
            "name": "clear",
            "comment": " clear ",
            "type": "String -> Style.Style"
          },
          {
            "name": "clip",
            "comment": " clip ",
            "type": "String -> Style.Style"
          },
          {
            "name": "color",
            "comment": " color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "color'",
            "comment": " color' ",
            "type": "Color.Color -> String"
          },
          {
            "name": "column",
            "comment": " column ",
            "type": "String"
          },
          {
            "name": "columnReverse",
            "comment": " column-reverse ",
            "type": "String"
          },
          {
            "name": "cursor",
            "comment": " cursor ",
            "type": "String -> Style.Style"
          },
          {
            "name": "dashed",
            "comment": " dashed ",
            "type": "String"
          },
          {
            "name": "deg",
            "comment": " deg ",
            "type": "number -> String"
          },
          {
            "name": "dimensions",
            "comment": " deminsions ",
            "type": "(number -> String) -> List number -> String"
          },
          {
            "name": "direction",
            "comment": " direction ",
            "type": "String -> Style.Style"
          },
          {
            "name": "display",
            "comment": " display ",
            "type": "String -> Style.Style"
          },
          {
            "name": "dotted",
            "comment": " dotted ",
            "type": "String"
          },
          {
            "name": "double",
            "comment": " double ",
            "type": "String"
          },
          {
            "name": "em",
            "comment": " em ",
            "type": "number -> String"
          },
          {
            "name": "embed",
            "comment": " embed ",
            "type": "String"
          },
          {
            "name": "fixed",
            "comment": " fixed ",
            "type": "String"
          },
          {
            "name": "flex",
            "comment": " flex ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flex'",
            "comment": " flex ",
            "type": "String"
          },
          {
            "name": "flexBasis",
            "comment": " flex-basis ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexDirection",
            "comment": " flex-direction ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexEnd",
            "comment": " flex-end ",
            "type": "String"
          },
          {
            "name": "flexFlow",
            "comment": " flex-flow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexGrow",
            "comment": " flex-grow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexShrink",
            "comment": " flex-shrink ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexStart",
            "comment": " flex-start ",
            "type": "String"
          },
          {
            "name": "flexWrap",
            "comment": " flex-wrap ",
            "type": "String -> Style.Style"
          },
          {
            "name": "float",
            "comment": " float ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontFamily",
            "comment": " font-family ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontSize",
            "comment": " font-size ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontStyle",
            "comment": " font-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontVariant",
            "comment": " font-variant ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontWeight",
            "comment": " font-weight ",
            "type": "String -> Style.Style"
          },
          {
            "name": "groove",
            "comment": " groove ",
            "type": "String"
          },
          {
            "name": "height",
            "comment": " height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "hidden",
            "comment": " hidden ",
            "type": "String"
          },
          {
            "name": "inline",
            "comment": " inline ",
            "type": "String"
          },
          {
            "name": "inlineBlock",
            "comment": " inline-block ",
            "type": "String"
          },
          {
            "name": "inlineFlex",
            "comment": " inline-flex ",
            "type": "String"
          },
          {
            "name": "inlineTable",
            "comment": " inline-table ",
            "type": "String"
          },
          {
            "name": "inset",
            "comment": " inset ",
            "type": "String"
          },
          {
            "name": "inside",
            "comment": " inside ",
            "type": "String"
          },
          {
            "name": "italic",
            "comment": " italic ",
            "type": "String"
          },
          {
            "name": "justify",
            "comment": " justify ",
            "type": "String"
          },
          {
            "name": "justifyContent",
            "comment": " justify-content ",
            "type": "String -> Style.Style"
          },
          {
            "name": "left",
            "comment": " left ",
            "type": "String -> Style.Style"
          },
          {
            "name": "left'",
            "comment": " left' ",
            "type": "String"
          },
          {
            "name": "letterSpacing",
            "comment": " letter-spacing ",
            "type": "String -> Style.Style"
          },
          {
            "name": "lineHeight",
            "comment": " line-height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "lineThrough",
            "comment": " line-through ",
            "type": "String"
          },
          {
            "name": "linearGradient",
            "comment": " linear-gradient(45deg, #FFF, #000) ",
            "type": "number -> List Color.Color -> String"
          },
          {
            "name": "listItem",
            "comment": " list-item ",
            "type": "String"
          },
          {
            "name": "listStyleImage",
            "comment": " list-style-image ",
            "type": "String -> Style.Style"
          },
          {
            "name": "listStylePosition",
            "comment": " list-style-position ",
            "type": "String -> Style.Style"
          },
          {
            "name": "listStyleType",
            "comment": " list-style-type ",
            "type": "String -> Style.Style"
          },
          {
            "name": "ltr",
            "comment": " ltr ",
            "type": "String"
          },
          {
            "name": "margin",
            "comment": " margin ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginBottom",
            "comment": " margin-bottom ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginLeft",
            "comment": " margin-left ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginRight",
            "comment": " margin-right ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginTop",
            "comment": " margin-top ",
            "type": "String -> Style.Style"
          },
          {
            "name": "matrix",
            "comment": " matrix ",
            "type": "String -> Style.Style"
          },
          {
            "name": "maxHeight",
            "comment": " max-height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "maxWidth",
            "comment": " max-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "minHeight",
            "comment": " min-height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "minWidth",
            "comment": " min-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "noRepeat",
            "comment": " no-repeat ",
            "type": "String"
          },
          {
            "name": "none",
            "comment": " none ",
            "type": "String"
          },
          {
            "name": "normal",
            "comment": " normal ",
            "type": "String"
          },
          {
            "name": "nowrap",
            "comment": " nowrap ",
            "type": "String"
          },
          {
            "name": "oblique",
            "comment": " oblique ",
            "type": "String"
          },
          {
            "name": "order",
            "comment": " order ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outline",
            "comment": " outline ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outlineColor",
            "comment": " outline-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outlineStyle",
            "comment": " outline-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outlineWidth",
            "comment": " outline-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outset",
            "comment": " outset ",
            "type": "String"
          },
          {
            "name": "outside",
            "comment": " outside ",
            "type": "String"
          },
          {
            "name": "overflow",
            "comment": " overflow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "overline",
            "comment": " overline ",
            "type": "String"
          },
          {
            "name": "padding",
            "comment": " padding ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingBottom",
            "comment": " padding-bottom ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingLeft",
            "comment": " padding-left ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingRight",
            "comment": " padding-right ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingTop",
            "comment": " padding-top ",
            "type": "String -> Style.Style"
          },
          {
            "name": "pc",
            "comment": " pc ",
            "type": "number -> String"
          },
          {
            "name": "perspective",
            "comment": " perspective ",
            "type": "String -> Style.Style"
          },
          {
            "name": "position",
            "comment": " position ",
            "type": "String -> Style.Style"
          },
          {
            "name": "pre",
            "comment": " pre ",
            "type": "String"
          },
          {
            "name": "preLine",
            "comment": " pre-line ",
            "type": "String"
          },
          {
            "name": "preWrap",
            "comment": " pre-wrap ",
            "type": "String"
          },
          {
            "name": "prefixName",
            "comment": " generate the correct style with prefix ",
            "type": "Style.PrefixSet -> String -> Style.Style"
          },
          {
            "name": "prefixSet",
            "comment": " construct a prefix set for the given browser ",
            "type": "String -> Style.PrefixSet"
          },
          {
            "name": "prefixValue",
            "comment": " get the prefix for the browser  ",
            "type": "Style.PrefixSet -> String"
          },
          {
            "name": "px",
            "comment": " px ",
            "type": "number -> String"
          },
          {
            "name": "rad",
            "comment": " rad ",
            "type": "number -> String"
          },
          {
            "name": "radialGradient",
            "comment": " radial-gradient(#FFF, #000) ",
            "type": "List Color.Color -> String"
          },
          {
            "name": "relative",
            "comment": " relative ",
            "type": "String"
          },
          {
            "name": "repeat",
            "comment": " repeat ",
            "type": "String"
          },
          {
            "name": "repeatX",
            "comment": " repeat-x ",
            "type": "String"
          },
          {
            "name": "repeatY",
            "comment": " repeat-y ",
            "type": "String"
          },
          {
            "name": "ridge",
            "comment": " ridge ",
            "type": "String"
          },
          {
            "name": "right",
            "comment": " right ",
            "type": "String -> Style.Style"
          },
          {
            "name": "right'",
            "comment": " right' ",
            "type": "String"
          },
          {
            "name": "rotate",
            "comment": " rotate ",
            "type": "String -> Style.Style"
          },
          {
            "name": "rotate3d",
            "comment": " rotate3d ",
            "type": "String -> Style.Style"
          },
          {
            "name": "row",
            "comment": " row ",
            "type": "String"
          },
          {
            "name": "rowReverse",
            "comment": " row-reverse ",
            "type": "String"
          },
          {
            "name": "rtl",
            "comment": " rtl ",
            "type": "String"
          },
          {
            "name": "runIn",
            "comment": " run-in ",
            "type": "String"
          },
          {
            "name": "scale",
            "comment": " scale ",
            "type": "String -> Style.Style"
          },
          {
            "name": "scale3d",
            "comment": " scale3d ",
            "type": "String -> Style.Style"
          },
          {
            "name": "scroll",
            "comment": " scroll ",
            "type": "String"
          },
          {
            "name": "skew",
            "comment": " skew ",
            "type": "String -> Style.Style"
          },
          {
            "name": "smallCaps",
            "comment": " small-caps ",
            "type": "String"
          },
          {
            "name": "solid",
            "comment": " solid ",
            "type": "String"
          },
          {
            "name": "spaceAround",
            "comment": " space-around ",
            "type": "String"
          },
          {
            "name": "spaceBetween",
            "comment": " space-between ",
            "type": "String"
          },
          {
            "name": "static",
            "comment": " static ",
            "type": "String"
          },
          {
            "name": "table",
            "comment": " table ",
            "type": "String"
          },
          {
            "name": "tableCaption",
            "comment": " table-caption ",
            "type": "String"
          },
          {
            "name": "tableCell",
            "comment": " table-cell ",
            "type": "String"
          },
          {
            "name": "tableColumn",
            "comment": " table-column ",
            "type": "String"
          },
          {
            "name": "tableColumnGroup",
            "comment": " table-column-group ",
            "type": "String"
          },
          {
            "name": "tableFooterGroup",
            "comment": " table-footer-group ",
            "type": "String"
          },
          {
            "name": "tableHeaderGroup",
            "comment": " table-header-group ",
            "type": "String"
          },
          {
            "name": "tableRow",
            "comment": " table-row ",
            "type": "String"
          },
          {
            "name": "tableRowGroup",
            "comment": " table-row-group ",
            "type": "String"
          },
          {
            "name": "textAlign",
            "comment": " text-align ",
            "type": "String -> Style.Style"
          },
          {
            "name": "textDecoration",
            "comment": " text-decoration ",
            "type": "String -> Style.Style"
          },
          {
            "name": "textIndent",
            "comment": " text-indent ",
            "type": "String -> Style.Style"
          },
          {
            "name": "textShadow",
            "comment": " text-shadow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "top",
            "comment": " top ",
            "type": "String -> Style.Style"
          },
          {
            "name": "transform",
            "comment": " transform ",
            "type": "String -> Style.Style"
          },
          {
            "name": "translate",
            "comment": " translate ",
            "type": "String -> Style.Style"
          },
          {
            "name": "translate3d",
            "comment": " translate3d ",
            "type": "String -> Style.Style"
          },
          {
            "name": "underline",
            "comment": " underline ",
            "type": "String"
          },
          {
            "name": "unicodeBidi",
            "comment": " unicode-bidi ",
            "type": "String -> Style.Style"
          },
          {
            "name": "url",
            "comment": " url(path) ",
            "type": "String -> String"
          },
          {
            "name": "verticalAlign",
            "comment": " vertical-align ",
            "type": "String -> Style.Style"
          },
          {
            "name": "visible",
            "comment": " visible ",
            "type": "String"
          },
          {
            "name": "whiteSpace",
            "comment": " white-space ",
            "type": "String -> Style.Style"
          },
          {
            "name": "width",
            "comment": " width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "wordSpacing",
            "comment": " word-spacing ",
            "type": "String -> Style.Style"
          },
          {
            "name": "wrap",
            "comment": " wrap ",
            "type": "String"
          },
          {
            "name": "wrapReverse",
            "comment": " wrap-reverse ",
            "type": "String"
          },
          {
            "name": "zIndex",
            "comment": " z-index ",
            "type": "String -> Style.Style"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "sgraf812/elm-graph",
    "version": "1.1.2",
    "docs": [
      {
        "name": "Graph",
        "comment": " This module contains the primitives to build, update and traverse graphs.\nIf you find that this module is hard to use or the documentation\nis insufficient, consider opening an issue for that (and possibly even a\npull request :)).\n\nInternally, we use the `elm-intdict` package for efficient dynamic graph\nrepresentation.\n\n# Data\n@docs NodeId, Node, Edge, Adjacency, NodeContext, Graph\n\n# Building\n@docs empty, update, insert, remove, inducedSubgraph\n\n# Query\n@docs isEmpty, size, member, get, nodeIdRange\n\n# List representations\n@docs nodeIds, nodes, edges, fromNodesAndEdges, fromNodeLabelsAndEdgePairs\n\n# Foci\n@docs id, label, from, to, node, incoming, outgoing, nodeById, anyNode\n\n# Transforms\n@docs fold, mapContexts, mapNodes, mapEdges, reverseEdges, symmetricClosure\n\n# Characterization\n\n# Traversals\n## Neighbor selectors and node visitors\n@docs NeighborSelector, alongOutgoingEdges, alongIncomingEdges, SimpleNodeVisitor\n## Depth-first\n@docs DfsNodeVisitor, onDiscovery, onFinish, dfs, dfsTree, dfsForest, guidedDfs\n## Breadth-first\n@docs BfsNodeVisitor, ignorePath, bfs, guidedBfs\n\n# Topological Sort\n@docs topologicalSort, heightLevels\n\n# Strongly Connected Components\n@docs stronglyConnectedComponents\n\n# String representation\n@docs toString'\n\n",
        "aliases": [
          {
            "name": "Adjacency",
            "comment": " Adjacency is represented as an ordered dictionary\nrather than as an ordered list. This enables more dynamic\ngraphs with efficient edge removal and insertion on the run.\n",
            "args": [
              "e"
            ],
            "type": "IntDict.IntDict e"
          },
          {
            "name": "BfsNodeVisitor",
            "comment": " A specialized node visitor for breadth-first traversal. Compared to a\n`SimpleNodeVisitor`, the path of contexts from the root to the current\nnode is passed instead of just the current node's context. Additionally, the\ndistance from the root is passed as an `Int` (the root has distance 0 and it\nholds always that `length path == distance - 1`).\n\nIf you don't need the additional information, you can turn a `SimpleNodeVisitor`\ninto a `BfsNodeVisitor` by calling `ignorePath`.\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "List (Graph.NodeContext n e) -> Int -> acc -> acc"
          },
          {
            "name": "DfsNodeVisitor",
            "comment": " A node visitor specialized for depth-first traversal. Along with the node\ncontext of the currently visited node, the current accumulated value is passed.\nThe visitor then has the chance to both modify the value at discovery of the\nnode through the first return value and also provide a finishing\ntransformation which is called with the value after all children were processed\nand the node is about to be finished.\n\nIn the cases where you don't need access to the value both at dicovery and at\nfinish, look into `onDiscovery` and `onFinish`.\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "Graph.NodeContext n e -> acc -> ( acc, acc -> acc )"
          },
          {
            "name": "Edge",
            "comment": " Represents a directd edge in the graph. In addition\nto start and end node identifiers, a label value can\nbe attached to an edge.\n",
            "args": [
              "e"
            ],
            "type": "{ from : Graph.NodeId, to : Graph.NodeId, label : e }"
          },
          {
            "name": "NeighborSelector",
            "comment": " Selects the next neighbors for the currently visited node in the traversal.\n",
            "args": [
              "n",
              "e"
            ],
            "type": "Graph.NodeContext n e -> List Graph.NodeId"
          },
          {
            "name": "Node",
            "comment": " The type representing a node: An identifier with\na label.\n",
            "args": [
              "n"
            ],
            "type": "{ id : Graph.NodeId, label : n }"
          },
          {
            "name": "NodeContext",
            "comment": " Represents a node with its incoming and outgoing edges\n(predecessors and successors).\n",
            "args": [
              "n",
              "e"
            ],
            "type": "{ node : Graph.Node n , incoming : Graph.Adjacency e , outgoing : Graph.Adjacency e }"
          },
          {
            "name": "NodeId",
            "comment": " The type used for identifying nodes, an integer.\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "SimpleNodeVisitor",
            "comment": " A generic node visitor just like that in the ordinary `fold` function.\nThere are combinators that make these usable for both depth-first traversal\n(`onDiscovery`, `onFinish`) and breadth-first traversal (`ignorePath`).\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "Graph.NodeContext n e -> acc -> acc"
          }
        ],
        "types": [
          {
            "name": "Graph",
            "comment": " The central graph type. It is parameterized both over the node label type `n`\nand the edge label type `e`.\n\nOne can build such a graph with the primitives under *Build*. Most of the time\n`fromNodesAndEdges` works fairly well.\n\nFor simplicity, this library just uses a patricia trie based graph representation, which means\nit is just an efficient version of `Dict NodeId (NodeContext n e)`. This allows efficient insertion and\nremoval of nodes of the graph after building.\n",
            "args": [
              "n",
              "e"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "alongIncomingEdges",
            "comment": " A less common way for selecting neighbors is to follow incoming edges:\n\n    alongIncomingEdges ctx =\n      IntDict.keys (ctx.incoming)\n",
            "type": "Graph.NeighborSelector n e"
          },
          {
            "name": "alongOutgoingEdges",
            "comment": " A good default for selecting neighbors is to just go along outgoing edges:\n\n    alongOutgoingEdges ctx =\n      IntDict.keys (ctx.outgoing)\n\n`dfs`/`bfs` use this as their selecting strategy.\n",
            "type": "Graph.NeighborSelector n e"
          },
          {
            "name": "anyNode",
            "comment": " Focuses on an arbitrary `NodeContext` of a `Graph`.\nThis exists for the same purposes as `nodeById`, but this focuses on an\narbitrary node rather than on a node with a specific id.\n",
            "type": "Focus.Focus (Graph.Graph n e) (Maybe.Maybe (Graph.NodeContext n e))"
          },
          {
            "name": "bfs",
            "comment": " An off-the-shelf breadth-first traversal. It will visit all components of the\ngraph in no guaranteed order, discovering nodes `alongOutgoingEdges`.\nSee the docs of `BfsNodeVisitor` on how to supply such a beast. There are also\nexamples on how to use `bfs`.\n",
            "type": "Graph.BfsNodeVisitor n e acc -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "dfs",
            "comment": " An off-the-shelf depth-first traversal. It will visit all components of the\ngraph in no guaranteed order, discovering nodes `alongOutgoingEdges`.\nSee the docs of `DfsNodeVisitor` on how to supply such a beast. There are also\nexamples on how to use `dfs`.\n",
            "type": "Graph.DfsNodeVisitor n e acc -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "dfsForest",
            "comment": " `dfsForest seeds graph` computes a depth-first spanning `Forest` of the\ncomponents in `graph` spanned by `seeds` `alongOutgoingEdges`.\n\nA traversal over this forest would be equivalent to a depth-first traversal\nover the original graph.\n",
            "type": "List Graph.NodeId -> Graph.Graph n e -> Graph.Tree.Forest (Graph.NodeContext n e)"
          },
          {
            "name": "dfsTree",
            "comment": " `dfsTree seed graph` computes a depth-first [spanning tree](https://en.wikipedia.org/wiki/Spanning_tree) of the component\nin `graph` starting from `seed` `alongOutgoingEdges`. This function is exemplary for needing to\nutilize the whole power of `DfsNodeVisitor`.\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Graph.Tree.Tree (Graph.NodeContext n e)"
          },
          {
            "name": "edges",
            "comment": " `edges graph` returns a list of all `Edge`s (e.g. a record of `from` and `to` ids\nand a `label`) in `graph`.\n\n    edges empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    edges graph == [Edge 1 2 \"->\"]\n",
            "type": "Graph.Graph n e -> List (Graph.Edge e)"
          },
          {
            "name": "empty",
            "comment": " An empty graph.\n\n    size empty == 0\n",
            "type": "Graph.Graph n e"
          },
          {
            "name": "fold",
            "comment": " A fold over all node contexts. The accumulated value is computed lazily,\nso that the fold can exit early when the suspended accumulator is not forced.\n\n    hasLoop ctx = IntDict.member ctx.node.id ctx.incoming\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    -- The graph should not have any loop.\n    fold (\\ctx acc -> acc || hasLoop ctx) False graph == False\n",
            "type": "(Graph.NodeContext n e -> acc -> acc) -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "from",
            "comment": " Focus for the `from` field of `Edge`.\n",
            "type": "Focus.Focus { record | from : field } field"
          },
          {
            "name": "fromNodeLabelsAndEdgePairs",
            "comment": " A more convenient version of `fromNodesAndEdges`, when edges are unlabeled\nand there are no special requirements on node ids.\n\n`fromNodeLabelsAndEdgePairs labels edges` implicitly assigns node ids according\nto the label's index in `labels` and the list of edge pairs is converted to\nunlabeled `Edge`s.\n\n    graph = fromNodeLabelsAndEdgePairs ['a', 'b'] [(0, 1)]\n",
            "type": "List n -> List ( Graph.NodeId, Graph.NodeId ) -> Graph.Graph n ()"
          },
          {
            "name": "fromNodesAndEdges",
            "comment": " `fromNodesAndEdges nodes edges` constructs a graph from the supplied `nodes`\nand `edges`. This is the most comfortable way to construct a graph as a whole.\nOftentimes it is even more convenient to use `fromNodeLabelsAndEdgePairs` when\nedges are unlabeled anyway and auto incremented node ids are OK.\n\nThe following constructs a graph with 2 nodes with a string label, connected\nby an edge labeled \"->\".\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n",
            "type": "List (Graph.Node n) -> List (Graph.Edge e) -> Graph.Graph n e"
          },
          {
            "name": "get",
            "comment": " Analogous to `Dict.get`, `get nodeId graph` returns the `Just` the node\ncontext with id `nodeId` in `graph` if there is one and `Nothing` otherwise.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    get 42 graph == Nothing\n    get 1 graph == Just <node context of node 1>\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Maybe.Maybe (Graph.NodeContext n e)"
          },
          {
            "name": "guidedBfs",
            "comment": " The `bfs` function is not powerful enough? Go for this beast.\n\n`guidedBfs selectNeighbors visitNode seeds acc graph` will perform a breadth-first\ntraversal on `graph` starting with a queue of `seeds`. The children of each node\nwill be selected with `selectNeighbors` (see `NeighborSelector`), the visiting\nof nodes is handled by `visitNode` (c.f. `BfsNodeVisitor`), folding `acc` over\nthe graph.\n\nWhen there are not any more nodes to be visited, the function will return the\naccumulated value together with the unvisited rest of `graph`.\n\n    bfsLevelOrder graph =\n      -- NodeId 1 is just a wild guess here\n      guidedBfs alongOutgoingEdges (ignorePath (::)) [1] [] graph\n",
            "type": "Graph.NeighborSelector n e -> Graph.BfsNodeVisitor n e acc -> List Graph.NodeId -> acc -> Graph.Graph n e -> ( acc, Graph.Graph n e )"
          },
          {
            "name": "guidedDfs",
            "comment": " The `dfs*` functions are not powerful enough? Go for this beast.\n\n`guidedDfs selectNeighbors visitNode seeds acc graph` will perform a depth-first\ntraversal on `graph` starting with a stack of `seeds`. The children of each node\nwill be selected with `selectNeighbors` (see `NeighborSelector`), the visiting\nof nodes is handled by `visitNode` (c.f. `DfsNodeVisitor`), folding `acc` over\nthe graph.\n\nWhen there are not any more nodes to be visited, the function will return the\naccumulated value together with the unvisited rest of `graph`.\n\n    dfsPreOrder graph =\n      -- NodeId 1 is just a wild guess here\n      guidedDfs alongOutgoingEdges (onDiscovery (::)) [1] [] graph\n",
            "type": "Graph.NeighborSelector n e -> Graph.DfsNodeVisitor n e acc -> List Graph.NodeId -> acc -> Graph.Graph n e -> ( acc, Graph.Graph n e )"
          },
          {
            "name": "heightLevels",
            "comment": " Computes the height function of a given graph. This is a more general\n[topological sort](https://en.wikipedia.org/wiki/Topological_sorting),\nwhere independent nodes are in the same height level (e.g. the same list\nindex). A valid topological sort is trivially obtained by flattening the\nresult of this function.\n\nThe height function is useful for solving the maximal clique problem for\ncertain [perfect graphs](https://en.wikipedia.org/wiki/Perfect_graph)\n([comparability graphs](https://en.wikipedia.org/wiki/Comparability_graph)).\nThere is the excellent reference\n[Algorithmic Graph Theory and Perfect Graphs](http://dl.acm.org/citation.cfm?id=984029).\n",
            "type": "Graph.Graph n e -> List (List (Graph.NodeContext n e))"
          },
          {
            "name": "id",
            "comment": " Focus for the `id` field of `Node`.\n",
            "type": "Focus.Focus { record | id : field } field"
          },
          {
            "name": "ignorePath",
            "comment": " Turns a `SimpleNodeVisitor` into a `BfsNodeVisitor` by ignoring the path\nand distance parameters.\nThis is useful for when the visitor should be agnostic of the\ntraversal (breadth-first or depth-first or even just `fold`).\n\n    bfsLevelOrder : List (NodeContext n e)\n    bfsLevelOrder graph =\n      graph\n        |> bfs (ignorePath (::)) []\n        |> List.reverse\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.BfsNodeVisitor n e acc"
          },
          {
            "name": "incoming",
            "comment": " Focus for the `incoming` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | incoming : field } field"
          },
          {
            "name": "inducedSubgraph",
            "comment": " The [induced subgraph](http://mathworld.wolfram.com/Edge-InducedSubgraph.html)\nof a number of node ids.\n",
            "type": "List Graph.NodeId -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "insert",
            "comment": " Analogous to `Dict.insert`, `insert nodeContext graph` inserts a fresh node\nwith its context (label, id and edges) into `graph`. If there was already a node\nwith the same id, it will be replaced by the new node context.\n\n    graph1 = fromNodesAndEdges [Node 1 \"1\"] []\n    newNode =\n      { node = Node 2 \"2\"\n      , incoming = IntDict.singleton 1 () -- so there will be an edge from 1 to 2\n      , outgoing = IntDict.empty\n      }\n    graph2 = insert newNode graph1\n    size graph2 == 2\n\nIt's possible to build up whole graphs this way, but a lot less tedious way would\nbe simply to use `fromNodesAndEdges`.\n",
            "type": "Graph.NodeContext n e -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "isEmpty",
            "comment": " `isEmpty graph` is true if and only if there are no nodes in the graph.\nSome properties to reason about in code, which hold for any `graph`:\n\n    isEmpty graph =\n      graph == empty\n    isEmpty graph =\n      size graph == 0\n",
            "type": "Graph.Graph n e -> Bool"
          },
          {
            "name": "label",
            "comment": " Focus for the `label` field of `Node` and `Edge`.\n",
            "type": "Focus.Focus { record | label : field } field"
          },
          {
            "name": "mapContexts",
            "comment": " Maps each node context to another one. This may change edge and node labels\n(including their types), possibly the node ids and also add or remove edges\nentirely through modifying the adjacency lists.\n\nThe following is a specification for reverseEdges:\n\n    flipEdges ctx = { ctx | incoming = ctx.outgoing, outgoing = ctx.incoming }\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    reverseEdges graph == mapContexts flipEdges graph\n",
            "type": "(Graph.NodeContext n1 e1 -> Graph.NodeContext n2 e2) -> Graph.Graph n1 e1 -> Graph.Graph n2 e2"
          },
          {
            "name": "mapEdges",
            "comment": " Maps over edge labels, possibly chaing their types. Leaves the graph\ntopology intact.\n",
            "type": "(e1 -> e2) -> Graph.Graph n e1 -> Graph.Graph n e2"
          },
          {
            "name": "mapNodes",
            "comment": " Maps over node labels, possibly changing their types. Leaves the graph\ntopology intact.\n",
            "type": "(n1 -> n2) -> Graph.Graph n1 e -> Graph.Graph n2 e"
          },
          {
            "name": "member",
            "comment": " Analogous to `Dict.member`, `member nodeId graph` is true, if and only if\nthere is a node with id `nodeId` in `graph`.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    member 42 graph == False\n    member 1 graph == True\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Bool"
          },
          {
            "name": "node",
            "comment": " Focus for the `node` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | node : field } field"
          },
          {
            "name": "nodeById",
            "comment": "  `nodeById nodeId` focuses on the node with id `nodeId` with a `Graph`.\nSince the node might or might not exist, the small part on which we focus wraps\nthe `NodeContext` in a `Maybe`.\n\nThis is a combination of the `get` and `update` functions which is handy for\ncomposition of foci deep into a graph. Unfortunately, we need a combinator which\nwould get rid of the `Maybe` wrapping (that would be the task of a prism I think),\nbut suppose we have something like `Focus.withDefault : a -> Focus (Maybe a) a`,\nthen we could define\n\n    ctx = NodeContext (Node 2 \"2\") IntDict.empty IntDict.empty\n    focus = nodeById 2 => Focus.withDefault ctx => node => label\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    graph1 = Focus.set focus graph \"=\"\n    Focus.get focus graph1 == \"=\"\n\nWell, I hope I could bring over the point.\n",
            "type": "Graph.NodeId -> Focus.Focus (Graph.Graph n e) (Maybe.Maybe (Graph.NodeContext n e))"
          },
          {
            "name": "nodeIdRange",
            "comment": " `nodeIdRange graph` returns `Just (minNodeId, maxNodeId)` if `graph` is not empty and `Nothing`\notherwise.\n\nThis is useful for finding unoccupied node ids without trial and error.\n\n    nodeIdRange empty == Nothing\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodeIdRange graph == Just (1, 2)\n",
            "type": "Graph.Graph n e -> Maybe.Maybe ( Graph.NodeId, Graph.NodeId )"
          },
          {
            "name": "nodeIds",
            "comment": " `nodeIds graph` returns a list of all nodes' ids in `graph`.\n\n    nodeIds empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodeIds graph == [1, 2]\n",
            "type": "Graph.Graph n e -> List Graph.NodeId"
          },
          {
            "name": "nodes",
            "comment": " `nodes graph` returns a list of all `Node`s (e.g. `id` and `label`) in\n`graph`.\n\n    nodes empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodes graph == [Node 1 \"1\", Node 2 \"2\"]\n",
            "type": "Graph.Graph n e -> List (Graph.Node n)"
          },
          {
            "name": "onDiscovery",
            "comment": " Transform a `SimpleNodeVisitor` into an equivalent `DfsNodeVisitor`, which\nwill be called upon node discovery. This eases providing `DfsNodeVisitor`s in\nthe default case:\n\n    dfsPostOrder : Graph n e  -> List (NodeContext n e)\n    dfsPostOrder graph =\n      dfs (onDiscovery (::)) [] graph\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.DfsNodeVisitor n e acc"
          },
          {
            "name": "onFinish",
            "comment": " Transform a `SimpleNodeVisitor` into an equivalent `DfsNodeVisitor`, which\nwill be called upon node finish. This eases providing `DfsNodeVisitor`s in\nthe default case:\n\n    dfsPreOrder : Graph n e  -> List (NodeContext n e)\n    dfsPreOrder graph =\n      dfs (onFinish (::)) [] graph\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.DfsNodeVisitor n e acc"
          },
          {
            "name": "outgoing",
            "comment": " Focus for the `outgoing` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | outgoing : field } field"
          },
          {
            "name": "remove",
            "comment": " Analogous to `Dict.remove`, `remove nodeId graph` returns a version of `graph`\nwithout a node with id `nodeId`. If there was no node with that id, then remove\nis a no-op:\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 ()]\n    graph == remove 42 graph\n    graph |> remove 2 |> size == 1\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "reverseEdges",
            "comment": " Reverses the direction of every edge in the graph.\n",
            "type": "Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "size",
            "comment": " `size graph` returns the number of nodes in `graph`.\n\n    size empty == 0\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    size graph == 2\n",
            "type": "Graph.Graph n e -> Int"
          },
          {
            "name": "stronglyConnectedComponents",
            "comment": " Decomposes a graph into its strongly connected components. The resulting\nlist is a topological ordering of the component graph.\n",
            "type": "Graph.Graph n e -> List (Graph.Graph n e)"
          },
          {
            "name": "symmetricClosure",
            "comment": " `symmetricClosure edgeMerger graph` is the\n[symmetric closure](https://en.wikipedia.org/wiki/Symmetric_closure) of `graph`,\ne.g. the undirected equivalent, where for every edge in `graph` there is also\na corresponding reverse edge. This implies that `ctx.incoming` == `ctx.outgoing`\nfor each node context `ctx`.\n\n`edgeMerger` resolves conflicts for when there are already edges in both\ndirections, e.g. the graph isn't truly directed. It is guaranteed that\n`edgeMerger` will only be called with the smaller node id passed in first\nto enforce consitency of merging decisions.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    onlyUndirectedEdges ctx =\n      ctx.incoming == ctx.outgoing\n    merger from to outgoingLabel incomingLabel =\n      outgoingLabel -- quite arbitrary, will not be called for the above graph\n    fold\n      (\\ctx acc -> acc && onlyUndirectedEdges ctx)\n      True\n      (symmetricClosure merger graph)\n      == True\n",
            "type": "(Graph.NodeId -> Graph.NodeId -> e -> e -> e) -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "to",
            "comment": " Focus for the `to` field of `Edge`.\n",
            "type": "Focus.Focus { record | to : field } field"
          },
          {
            "name": "toString'",
            "comment": " Returns a string representation of the graph in the format of\n`Graph.fromNodesAndEdges [<nodes>] [<edges>]`.\n",
            "type": "Graph.Graph n e -> String"
          },
          {
            "name": "topologicalSort",
            "comment": " Computes a\n[topological ordering](https://en.wikipedia.org/wiki/Topological_sorting) of the\ngiven graph.\n",
            "type": "Graph.Graph n e -> List (Graph.NodeContext n e)"
          },
          {
            "name": "update",
            "comment": " Analogous to `Dict.update`, `update nodeId updater graph` will find\nthe node context of the node with id `nodeId` in `graph`. It will then call `updater`\nwith `Just` that node context if that node was found and `Nothing`\notherwise. `updater` can then return `Just` an updated node context\n(modifying edges is also permitted!) or delete the node by returning\n`Nothing`. The updated `graph` is returned.\n\nThis is the most powerful building function since all possible per-node\noperations are possible (node removal, insertion and updating of context\nproperties).\n\nThe other operations can be implemented in terms of `update` like this:\n\n    remove nodeId graph =\n      update nodeId (always Nothing) graph\n    insert nodeContext graph =\n      update nodeContext.node.id (always (Just nodeContext)) graph\n",
            "type": "Graph.NodeId -> (Maybe.Maybe (Graph.NodeContext n e) -> Maybe.Maybe (Graph.NodeContext n e)) -> Graph.Graph n e -> Graph.Graph n e"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Graph.Tree",
        "comment": " This module provides a simple tree data type of arbitrary arity (a rose tree).\nThere are primitives for building and traversing such a tree.\n\n# Data\n@docs Tree, Forest\n\n# Building\n@docs empty, leaf, inner, unfoldTree, unfoldForest\n\n# Query\n@docs isEmpty, root, size, height\n\n# Traversal\n\nIt is instructory to read the article on [tree traversals on Wikipedia](https://en.wikipedia.org/wiki/Tree_traversal) first if you are not familiar with the concept.\n\n@docs levelOrder, levelOrderList, preOrder, preOrderList, postOrder, postOrderList\n\n",
        "aliases": [
          {
            "name": "Forest",
            "comment": " This is just an alias for a list of trees, called a forest in the\nliterature.\n",
            "args": [
              "label"
            ],
            "type": "List (Graph.Tree.Tree label)"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " Data type representing an n-ary tree with node labels of type `a`\nBuilding such a tree is done with the `empty`, `leaf` and `inner` smart\nconstructors. An example for a tree with three leafs and a root node:\n\n    tree = inner 1 [leaf 2, leaf 3, leaf 4]\n",
            "args": [
              "label"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Construct an empty tree with no nodes. ",
            "type": "Graph.Tree.Tree label"
          },
          {
            "name": "height",
            "comment": " Computes the height of the tree in O(n) time.\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    height tree == 3\n",
            "type": "Graph.Tree.Tree label -> Int"
          },
          {
            "name": "inner",
            "comment": " Construct a new tree by `inner label children`, combining a number of\nsubtrees `children` with a `label` for the new inner node which will be\nthe root of the tree. Empty subtrees are filtered out. An example:\n\n    tree1 = inner 1 [leaf 2, leaf 3, leaf 4]\n    tree2 = inner 1 [leaf 2, leaf 3, leaf 4, empty]\n    tree1 == tree2\n",
            "type": "label -> List (Graph.Tree.Tree label) -> Graph.Tree.Tree label"
          },
          {
            "name": "isEmpty",
            "comment": " `isEmpty tree` returns true if and only if `tree` is `empty`.\n\n    isEmpty empty == True\n    isEmpty (leaf 42) == False\n",
            "type": "Graph.Tree.Tree label -> Bool"
          },
          {
            "name": "leaf",
            "comment": " Construct a tree with a single node from a value for the node's label.\n\n    tree : Tree Int\n    tree = leaf 42\n ",
            "type": "label -> Graph.Tree.Tree label"
          },
          {
            "name": "levelOrder",
            "comment": " `levelOrder visit acc tree` is a breadth-first fold over `tree`,\nvisiting each node and accumulating results with `visit`. Nodes are visited\nin level-order, e.g. for a tree like\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n\nnodes would be visited in order `[0, 1, 4, 2, 3, 5, 6]`. This is in fact the\nlist produced by `levelOrderList`, but through `levelOrder` you also get access\nto the children of the current node via the second parameter of visit.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "levelOrderList",
            "comment": " See the documentation on `levelOrder`. `levelOrderList tree` produces\na list of the nodes of the tree visited in level-order, e.g. breadth-first.\nSo:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    levelOrderList tree == [0, 1, 4, 2, 3, 5, 6]\n\nIf you also need information on child trees instead of just the node labels,\nuse `levelOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "postOrder",
            "comment": " `postOrder visit acc tree` is a (depth-first) post-order traversal (fold)\nover `tree` where `visit` is called with the label and the child sub-forest of\nthe current node in addition to a supplied accumulator value.\n\nWhen `visit` is called for some node, `acc` already contains the value of all\nsub-trees, so post-order traversal is a kind of bottom-up traversal, where\nall children are visited prior to their parent.\nSee `postOrderList` for an example on the order in which nodes are visited.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "postOrderList",
            "comment": " See `postOrder` for an explanation of how post-order traversals work.\nHere is an example on visit order:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    postOrderList tree == [2, 3, 1, 5, 6, 4, 0]\n\nIf you also need information on child trees instead of just the node labels,\nuse `postOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "preOrder",
            "comment": " `preOrder visit acc tree` is a (depth-first) pre-order traversal (fold)\nover `tree` where `visit` is called with the label and the child sub-forest of\nthe current node in addition to a supplied accumulator value.\n\nPost-order traversals work top-down: When `visit` is called for some node,\n`acc` already contains the value of all ancestral nodes.\nSee `preOrderList` for an example on the order in which nodes are visited.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "preOrderList",
            "comment": " See `preOrder` for an explanation of how post-order traversals work.\nHere is an example on visit order:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    preOrderList tree == [0, 1, 2, 3, 4, 5, 6]\n\nIf you also need information on child trees instead of just the node labels,\nuse `preOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "root",
            "comment": " `root tree` returns `Nothing` if `tree` is `empty`, otherwise\nit returns `Just (label, childForest)` of the root node.\n\n    tree = inner 1 [leaf 2, leaf 3, leaf 4]\n    root tree == Just (1, [leaf 2, leaf 3, leaf 4])\n    root empty == Nothing\n",
            "type": "Graph.Tree.Tree label -> Maybe.Maybe ( label, Graph.Tree.Forest label )"
          },
          {
            "name": "size",
            "comment": " The size of the tree, e.g. the number of nodes.\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    size tree == 7\n",
            "type": "Graph.Tree.Tree label -> Int"
          },
          {
            "name": "unfoldForest",
            "comment": " Construct a new forest with `unfoldForest next seeds` by `unfoldTree next seed`\nfor each `seed` in `seeds`. A simple specification would be\n\n    unfoldForest next seeds = List.map (unfoldTree next) seeds\n",
            "type": "(seed -> ( label, List seed )) -> List seed -> Graph.Tree.Forest label"
          },
          {
            "name": "unfoldTree",
            "comment": " Construct a new tree with `unfoldTree next seed`, top to bottom. `next` will be\ncalled repeatedly with seeds, from which it should construct a label for\nthe current tree node but also a list of seeds from which to unfold\nchild nodes. This sort of works top to bottom compared to creating a\ntree bottom up by using the other primitives.\n\n    tree1 = inner 1 [leaf 2, leaf 3, leaf 4]\n    next seed = (seed, if seed == 1 then [2, 3, 4] else [])\n    tree2 = unfoldTree next 1\n    tree1 == tree2\n",
            "type": "(seed -> ( label, List seed )) -> seed -> Graph.Tree.Tree label"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "sgraf812/elm-intdict",
    "version": "1.4.3",
    "docs": [
      {
        "name": "IntDict.Safe",
        "comment": " Safe API wrappers for `IntDict`s build and query operators \nto prevent integer overflows with JavaScripts number type.\n\nPrior to delegating to their 'unsafe' equivalent, these functions verify\nthe validity of the key via `IntDict.isValidKey`.\n\n# Return type\n@docs InvalidKey, SafeKeyResult\n# Build\n@docs safeInsert, safeUpdate, safeRemove\n# Query\n@docs safeMember, safeGet\n\n",
        "aliases": [
          {
            "name": "SafeKeyResult",
            "comment": " A value of this type is returned by all functions in this module. \nSee the core libraries' `Result` documentation for how to cope with it. ",
            "args": [
              "a"
            ],
            "type": "Result.Result IntDict.Safe.InvalidKey a"
          }
        ],
        "types": [
          {
            "name": "InvalidKey",
            "comment": " An error type signaling an invalid key. ",
            "args": [],
            "cases": [
              [
                "InvalidKey",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "safeGet",
            "comment": " Version of `IntDict.get` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (Maybe.Maybe v)"
          },
          {
            "name": "safeInsert",
            "comment": " Version of `IntDict.insert` that validates the key. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeMember",
            "comment": " Version of `IntDict.member` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult Bool"
          },
          {
            "name": "safeRemove",
            "comment": " Version of `IntDict.remove` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeUpdate",
            "comment": " Version of `IntDict.update` that validates the key. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "IntDict",
        "comment": " # IntDict\n\nThis module exposes the same API as `Dict`.\n\n# Technicalities\n\nSince JavaScript's number type is kind of messed up, Elm's `Int` is not particularly\nwell-behaved wrt. bitwise operations. Currently, JS supports 32 bit integers, so there is\nprobably enough room for key picks. **However, when sanitizing user input, it is mandatory\nthat a prior `isValidKey` or one of the safe versions in `IntDict.Safe` is used!** This is\nto prevent the overflow behavior.\n\nThis library is inspired by Haskells [IntMap](http://hackage.haskell.org/package/containers-0.2.0.1/docs/Data-IntMap.html),\nwhich in turn implements Okasaki and Gill's [Fast mergable integer maps](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf).\n\nAs noted in the [references](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf), here are some runtimes:\n\n*O(min(n, W))*: `insert`, `update`, `remove`, `get`, `member`\n\n*O(n + m)*: `uniteWith`, `union`, `intersection`, `diff`\n\nwhere *n* and *m* are the sizes of the first and second dictionary respectively and *W*\nis the number of bits in `Int` (so a constant with current value 32).\n\n# Data\n@docs IntDict, isValidKey\n# Build\n@docs empty, singleton, insert, update, remove\n# Query\n@docs isEmpty, size, member, get, findMin, findMax\n# Combine\n@docs uniteWith, union, intersect, diff\n# Lists\n@docs keys, values, toList, fromList\n# Transform\n@docs map, foldl, foldr, filter, partition\n# String representation\n@docs toString'\n\n",
        "aliases": [],
        "types": [
          {
            "name": "IntDict",
            "comment": " A dictionary mapping `Int`s to values of a type `v`. Analogous to\n`Dict Int v`.\n",
            "args": [
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\nPreference is given to the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "IntDict.IntDict v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "findMax",
            "comment": " Find the maximum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "findMin",
            "comment": " Find the minimum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( Int, v ) -> IntDict.IntDict v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary. ",
            "type": "Int -> IntDict.IntDict v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "isEmpty",
            "comment": " Check if the dictionary contains no items. ",
            "type": "IntDict.IntDict v -> Bool"
          },
          {
            "name": "isValidKey",
            "comment": " Validates that a given integer is usable as a key.\nThis is necessary due to JavaScript's weird number type.\nBasically this assures that we can use the functions\nfrom `Bitwise` without risking integer overflow.\n\n**This function is a necessity for sanitizing user input!** Alternatively,\nuse the safe functions from `IntDict.Safe` which perform the check for you.\n\nAs with the current version of JavaScript (2015), only 32 bit signed integers are supported.\nIf this ever changes, contact me! Certain parts of the implementation depend on this! ",
            "type": "Int -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "IntDict.IntDict v -> List Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary. ",
            "type": "(Int -> a -> b) -> IntDict.IntDict a -> IntDict.IntDict b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "Int -> IntDict.IntDict v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> ( IntDict.IntDict v, IntDict.IntDict v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "Int -> v -> IntDict.IntDict v"
          },
          {
            "name": "size",
            "comment": " The number of items in the dictionary. `O(1)`.",
            "type": "IntDict.IntDict v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "IntDict.IntDict v -> List ( Int, v )"
          },
          {
            "name": "toString'",
            "comment": " Generates a string representation similar to what `toString`\ngenerates for `Dict`. ",
            "type": "IntDict.IntDict v -> String"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "uniteWith",
            "comment": " `uniteWith merger d1 d2` combines two dictionaries. If there is a collision, `merger`\nis called with the conflicting key, the value from `d1` and that from `d2`. ",
            "type": "(Int -> v -> v -> v) -> IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "IntDict.IntDict v -> List v"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "sh4r3m4n/elm-piano",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Piano",
        "comment": " A customizable piano component\n\n# Model\n@docs Model\n@docs initialModel\n@docs Note\n\n# Messages and updates\n@docs update\n@docs Msg\n\n# Keyboard size helpers\n@docs keyboard12Keys\n@docs keyboard25Keys\n@docs keyboard49Keys\n@docs keyboard61Keys\n@docs keyboard76Keys\n@docs keyboard88Keys\n\n# HTML rendering\n@docs view\n\n# Note helpers\n@docs noteName\n@docs isNatural\n@docs octave\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The model of the component.\n\nnotes is the set of currently pressed notes.\n\nnoteRange determines the first and last notes of the keyboard.\n\nIf interactive is True, the component will generate KeyUp and KeyDown messages\nwhen the user clicks on a note. (Now this mode is experimental and has some\nUI issues).\n\nIf showSizeSelector is True a button group will be shown to select the keyboard\nsize.\n\nIf debugNotes is True a text will appear, showin the note names of each\ncurrently pressed note.\n",
            "args": [],
            "type": "{ notes : Set.Set Piano.Note , noteRange : ( Piano.Note, Piano.Note ) , interactive : Bool , showSizeSelector : Bool , debugNotes : Bool }"
          },
          {
            "name": "Note",
            "comment": " Represents a note giving its MIDI Note Number\n\nSee http://www.electronics.dit.ie/staff/tscarff/Music_technology/midi/midi_note_numbers_for_octaves.htm for more information\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [
          {
            "name": "Msg",
            "comment": " Messages received when clicking a key or\nchanging the keyboard's size\n",
            "args": [],
            "cases": [
              [
                "KeyUp",
                [
                  "Piano.Note"
                ]
              ],
              [
                "KeyDown",
                [
                  "Piano.Note"
                ]
              ],
              [
                "ChangeNoteRange",
                [
                  "( Int, Int )"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "initialModel",
            "comment": " Common initial configuration for the component\n\nNow it starts with no keys being pressed in a 25-key keyboard, in interactive\nmode and with the size selector and the note debugger.\n",
            "type": "Piano.Model"
          },
          {
            "name": "isNatural",
            "comment": " Return False is note is a flat or sharp, True otherwise\n",
            "type": "Piano.Note -> Bool"
          },
          {
            "name": "keyboard12Keys",
            "comment": " Note range of a 12-key keyboard\n",
            "type": "( Int, Int )"
          },
          {
            "name": "keyboard25Keys",
            "comment": " Note range of a 25-key keyboard\n",
            "type": "( Int, Int )"
          },
          {
            "name": "keyboard49Keys",
            "comment": " Note range of a 49-key keyboard\n",
            "type": "( Int, Int )"
          },
          {
            "name": "keyboard61Keys",
            "comment": " Note range of a 61-key keyboard\n",
            "type": "( Int, Int )"
          },
          {
            "name": "keyboard76Keys",
            "comment": " Note range of a 76-key keyboard\n",
            "type": "( Int, Int )"
          },
          {
            "name": "keyboard88Keys",
            "comment": " Note range of a 88-key keyboard\n",
            "type": "( Int, Int )"
          },
          {
            "name": "noteName",
            "comment": " Represent a note number as a string\n",
            "type": "Piano.Note -> String"
          },
          {
            "name": "octave",
            "comment": " Octave number of a note\n",
            "type": "Piano.Note -> Int"
          },
          {
            "name": "update",
            "comment": " Handle the messages by updating model.notes or model.noteRange\n",
            "type": "Piano.Msg -> Piano.Model -> Piano.Model"
          },
          {
            "name": "view",
            "comment": " Show the Piano component and, if set in the model, the debug text and the\nkeyboard size changer.\n",
            "type": "Piano.Model -> Html.Html Piano.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "Piano.PianoStyle",
        "comment": "\nExposes a single string with the correct CSS styles for the component.\n\nThis was made an extra module to avoid long CSS styles in the main script.\n\n@docs css\n\nBased on javascript-piano by michaelemp\nhttps://github.com/michaelmp/js-piano\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "css",
            "comment": " CSS style\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "shelakel/elm-validate",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Validate",
        "comment": " Validation library for elm supporting sync and async validation with state.\n# Validation state\n@docs State\n# Validation functions\n@docs isNotEmpty, isStringLengthBetween, isValidEmail\n# Validators\n@docs notEmpty, stringLengthBetween, email, basic, SyncValidator, AsyncValidator\n# Validation\n@docs combine, validator, Validator\n# Validation helpers\n@docs isValid, isInvalid, isValidModel, isInvalidModel, listModelErrors, toCmd\n",
        "aliases": [
          {
            "name": "AsyncValidator",
            "comment": " AsyncValidator does asynchronous validation.\n",
            "args": [
              "state",
              "value"
            ],
            "type": "Validate.State state -> value -> Task.Task Basics.Never (Validate.State state)"
          },
          {
            "name": "State",
            "comment": " State holds validation state.\n",
            "args": [
              "state"
            ],
            "type": "{ state | error : Maybe.Maybe String }"
          },
          {
            "name": "SyncValidator",
            "comment": " SyncValidator does synchronous validation.\n",
            "args": [
              "state",
              "value"
            ],
            "type": "Validate.State state -> value -> Validate.State state"
          },
          {
            "name": "Validator",
            "comment": " Validator takes a model, performs synchronous and asynchronous validation\nand procudes a model with updated validation state and possibly a deffered model transform\nto update asynchronous validation state.\n",
            "args": [
              "model"
            ],
            "type": "model -> ( model, Maybe.Maybe (Task.Task Basics.Never (model -> model)) )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "basic",
            "comment": " basic does value based, synchronous validation. \\\n",
            "type": "(value -> Bool) -> String -> Validate.SyncValidator state value"
          },
          {
            "name": "combine",
            "comment": " combine combines one or more validation functions and runs\nasync validations in sequence.\n",
            "type": "List (Validate.Validator model) -> Validate.Validator model"
          },
          {
            "name": "email",
            "comment": " email validates that the given String value is a valid email address.\n",
            "type": "String -> Validate.State state -> String -> Validate.State state"
          },
          {
            "name": "isInvalid",
            "comment": " isInvalid tests if the validation state has an error.\n",
            "type": "Validate.State state -> Bool"
          },
          {
            "name": "isInvalidModel",
            "comment": " isInvalidModel, given a model, tests if any validation states are invalid.\n",
            "type": "List (model -> Validate.State state) -> model -> Bool"
          },
          {
            "name": "isNotEmpty",
            "comment": " isNotEmpty returns True when the given String value is not empty.\n",
            "type": "String -> Bool"
          },
          {
            "name": "isStringLengthBetween",
            "comment": " isStringLengthBetween returns True when the length of the String value\nis between minLength and maxLength inclusive.\n",
            "type": "Int -> Int -> String -> Bool"
          },
          {
            "name": "isValid",
            "comment": " isValid tests if the validation state has no error.\n",
            "type": "Validate.State state -> Bool"
          },
          {
            "name": "isValidEmail",
            "comment": " isValidEmail returns True when the given String value is a valid email address.\n",
            "type": "String -> Bool"
          },
          {
            "name": "isValidModel",
            "comment": " isValidModel, given a model, tests if all the validation states are valid.\n",
            "type": "List (model -> Validate.State state) -> model -> Bool"
          },
          {
            "name": "listModelErrors",
            "comment": " listModelErrors, given a model, extracts a list of errors for invalid validation states.\n",
            "type": "List (model -> Validate.State state) -> model -> Maybe.Maybe (List String)"
          },
          {
            "name": "notEmpty",
            "comment": " notEmpty validates that the given String value is not empty.\n",
            "type": "String -> Validate.State state -> String -> Validate.State state"
          },
          {
            "name": "stringLengthBetween",
            "comment": " stringLengthBetween validates that the given String value length is between\nminlength and maxLength inclusive.\n",
            "type": "Int -> Int -> String -> Validate.State state -> String -> Validate.State state"
          },
          {
            "name": "toCmd",
            "comment": " toCmd maps the validation result model and effects transforms to a (model, Cmd msg),\nusing a tagger that turns the model transform into a msg.\n",
            "type": "((model -> model) -> msg) -> ( model, Maybe.Maybe (Task.Task Basics.Never (model -> model)) ) -> ( model, Platform.Cmd.Cmd msg )"
          },
          {
            "name": "validator",
            "comment": " validator creates a validator to validate a model using synchronous and asynchronous validation functions.\n\nOrder of validation:\n  1. Synchronous validation is done in sequence and returns on the first error encountered.\n  2. If synchronous validation deemed the value invalid, then the new validation state is returned and no asynchronous validation is done.\n  3. Otherwise, asynchronous validation is done in sequence on the value at the point of validation, starting with the new validation state, and returns on the first error encountered.\n  - When asynchronous validation needs to be done, the previous error will be kept to avoid flashing of valid status when used with debouncing. E.g. checking if a username is available\n",
            "type": "(model -> value) -> (model -> Validate.State state) -> (Validate.State state -> model -> model) -> List (Validate.SyncValidator state value) -> List (Validate.AsyncValidator state value) -> Validate.Validator model"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "shmookey/cmd-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Cmd.Extra",
        "comment": " Convenience functions for working with Cmd\n\n# Basics\n@docs message\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "message",
            "comment": " A command to generate a message without performing any action.\n\nThis is useful for implementing components that generate events in the manner\nof HTML elements, but where the event fires from within Elm code, rather than\nby an external trigger.\n",
            "type": "msg -> Platform.Cmd.Cmd msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "simonh1000/elm-charts",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Chart",
        "comment": " This module comprises tools to create and modify a model of the data, labels and styling, and then the function `toHtml` renders the model using one of the provided views.\n\n# Chart constructors\n@docs hBar, vBar, pie, lChart\n\n# Customisers\n@docs title, colours, colors, addValueToLabel, updateStyles\n\n# Rendering\n@docs toHtml\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addValueToLabel",
            "comment": " addValueToLabel adds the data value of each item to the data label. This is applied by default in hBar.\n\n    vBar vs ls \"Title\"\n        |> addValueToLabel\n        |> toHtml\n",
            "type": "ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "colors",
            "comment": " colors supports alternative spelling of colours\n",
            "type": "List String -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "colours",
            "comment": " colours replaces the default colours. Bar charts use just one colour, which will be the head of the list provided.\n\n    vChart vs ls\n        |> colours [\"steelblue\"]\n        |> toHtml\n\n    pie vs ls\n        |> colours [\"steelblue\", \"#96A65B\", \"#D9A679\", \"#593F27\", \"#A63D33\"]\n        |> toHtml\n",
            "type": "List String -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "hBar",
            "comment": " The horizontal bar chart results in a set of bars, one above the other, of lengths in proportion to the value. A label with the data value is printed in each bar.\n\n    hBar vals labels\n        |> title \"My Chart\"\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          },
          {
            "name": "lChart",
            "comment": " The line chart is useful for time series, or other data where the values relate to each other in some way.\n\n    lChart vals labels\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          },
          {
            "name": "pie",
            "comment": " The pie chart results in a circle cut into coloured segments of size proportional to the data value.\n\n    pie vals labels\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          },
          {
            "name": "title",
            "comment": " title adds a title to the model.\n\n    -- e.g. build a chart from scratch\n    chartInit vs ls BarHorizontal\n        |> title \"This will be the title\"\n        |> toHtml\n",
            "type": "String -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "toHtml",
            "comment": " toHtml is called last, and causes the chart data to be rendered to html.\n\n    hBar vs ls\n        |> toHtml\n",
            "type": "ChartModel.Model -> Html.Html a"
          },
          {
            "name": "updateStyles",
            "comment": " updateStyles replaces styles for a specified part of the chart. Charts have the following div structure\n\n    .container\n        .title\n        .chart-container\n            .chart      (container for the bars or pie segments)\n                .chart-elements\n            .legend     (also for the label container in a vertical bar chart)\n                .legend-labels\n\n    vChart vs ls\n        |> updateStyles \"chart\" [ ( \"color\", \"black\" ) ]\n        |> toHtml\n",
            "type": "String -> List ChartModel.Style -> ChartModel.Model -> ChartModel.Model"
          },
          {
            "name": "vBar",
            "comment": " The vertical bar chart results in a set of bars of lengths in proportion to the value. A label is printed below each bar.\n\n    vBar vals labels\n        |> title \"My Chart\"\n        |> toHtml\n",
            "type": "List Float -> List String -> ChartModel.Model"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "simonh1000/elm-jwt",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Jwt",
        "comment": " Helper functions for Jwt token authentication.\n\nA Jwt Token comprises 3 elements: a header and footer and the content. This package\nincludes a function to send an authentication request, a function to read the content of a token;\nand a function to send GET requests with the token attached.\n\n# API functions\n@docs authenticate, decodeToken, send, get, post, getWithJwt, isExpired, promote401\n\n# Errors\n@docs JwtError\n",
        "aliases": [],
        "types": [
          {
            "name": "JwtError",
            "comment": " The three errors that can emerge are:\n - network errors (except a 401),\n - a 401 error, which we check is because of token expiry\n - issues with processing (e.g. base 64 decoding) the token, and\n - problems decoding the json data within the content of the token\n\n",
            "args": [],
            "cases": [
              [
                "HttpError",
                [
                  "Http.Error"
                ]
              ],
              [
                "TokenExpired",
                []
              ],
              [
                "TokenProcessingError",
                [
                  "String"
                ]
              ],
              [
                "TokenDecodeError",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "authenticate",
            "comment": " `authenticate` is a custom Http POST method that sends a stringified\nJson object containing the login credentials. It then extracts the token from the\njson response from the server and returns it.\n\n    let credentials =\n        E.object\n            [ (\"username\", E.string model.uname)\n            , (\"password\", E.string model.pword)\n            ]\n        |> E.encode 0\n    in\n    ( model\n    , Task.perform\n        LoginFail LoginSuccess\n        (authenticate tokenStringDecoder \"/sessions\" credentials)\n    )\n",
            "type": "Json.Decode.Decoder String -> String -> String -> Task.Task Jwt.JwtError String"
          },
          {
            "name": "decodeToken",
            "comment": " decodeToken converts the token content to an Elm record structure.\n\n    decoderToken dec token\n\nIn the event of success, `decodeToken` returns an Elm record structure using the JSON Decoder.\n\n",
            "type": "Json.Decode.Decoder a -> String -> Result.Result Jwt.JwtError a"
          },
          {
            "name": "get",
            "comment": " get is a replacement for `Http.get` that attaches a provided Jwt token\nto the headers of the GET request.\n\n    Task.perform\n        PostFail PostSucess\n        (get token dataDecoder \"/api/data\")\n",
            "type": "Jwt.Token -> Json.Decode.Decoder a -> String -> Task.Task Http.Error a"
          },
          {
            "name": "getWithJwt",
            "comment": " getWithJwt is an alias for get, provided for backwards compatibility.\n",
            "type": "Jwt.Token -> Json.Decode.Decoder a -> String -> Task.Task Http.Error a"
          },
          {
            "name": "isExpired",
            "comment": " isExpired checks whether a token remains valid, i.e. it has not expired.\n\nNote: This function assumes that the expiry was set in seconds and thus\nmultiplies by 100 to compare with javascript time (in milliseconds).\nYou may need to write a custom version if your Jwt provide works differently.\n",
            "type": "Time.Time -> Jwt.Token -> Bool"
          },
          {
            "name": "post",
            "comment": " post is a replacement for `Http.post` that attaches a provided Jwt token\nto the headers, and sets the Content-type to 'application/json'.\n",
            "type": "Jwt.Token -> Json.Decode.Decoder a -> String -> Http.Body -> Task.Task Http.Error a"
          },
          {
            "name": "promote401",
            "comment": " promote401 promotes a 401 Unauthorized Http reponse to the JwtError TokenExpired.\n\n    Jwt.get token dataDecoder \"/api/data\"\n    `Task.onError` (promote401 token)\n    |> Task.perform PostFail PostSucess\n",
            "type": "Jwt.Token -> Http.Error -> Task.Task Jwt.JwtError a"
          },
          {
            "name": "send",
            "comment": " send is a replacement for Http.send that includes a Jwt token\n",
            "type": "String -> Jwt.Token -> Json.Decode.Decoder a -> String -> Http.Body -> Task.Task Http.Error a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "sporto/erl",
    "version": "10.0.1",
    "docs": [
      {
        "name": "Erl",
        "comment": " Library for parsing and constructing URLs\n\n# Types\n@docs Url, Query\n\n# Parse\n@docs parse\n\n# Parse helpers\n@docs extractHash, extractHost, extractPath, extractProtocol, extractPort, extractQuery\n\n# Construct\n@docs new\n\n# Mutation helpers\n@docs addQuery, setQuery, removeQuery, clearQuery, appendPathSegments\n\n# Serialize\n@docs toString\n\n# Serialization helpers\n@docs queryToString\n\n",
        "aliases": [
          {
            "name": "Query",
            "comment": " A Dict that holds keys and values for the query string\n",
            "args": [],
            "type": "Dict.Dict String String"
          },
          {
            "name": "Url",
            "comment": " Record that holds url attributes\n",
            "args": [],
            "type": "{ protocol : String , username : String , password : String , host : List String , port' : Int , path : List String , hasLeadingSlash : Bool , hasTrailingSlash : Bool , hash : String , query : Erl.Query }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addQuery",
            "comment": " Set key/value in query string\n\n    Erl.addQuery key value url\n",
            "type": "String -> String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "appendPathSegments",
            "comment": " Append some path segments to a url\n\n    Erl.appendPathSegments [\"hello\", \"world\"] url\n",
            "type": "List String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "clearQuery",
            "comment": " Clears the current query string\n\n    Erl.clearQuery url\n",
            "type": "Erl.Url -> Erl.Url"
          },
          {
            "name": "extractHash",
            "comment": " Extract the hash (hash) from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractHost",
            "comment": " Extract the host from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractPath",
            "comment": " Extract the path from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractPort",
            "comment": " Extract the port from the url\n\nIf no port is included in the url then Erl will attempt to add a default port:\n\nHttp -> 80\nHttps -> 443\nFTP -> 21\nSFTP -> 22\n\n",
            "type": "String -> Int"
          },
          {
            "name": "extractProtocol",
            "comment": " Extract the protocol from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractQuery",
            "comment": " Extract the query string from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "new",
            "comment": " Generate an empty Erl.Url record\n\n    Erl.new ==\n\n    { protocol = \"\"\n    , username = \"\"\n    , password = \"\"\n    , host = []\n    , path = []\n    , hasLeadingSlash = False\n    , hasTrailingSlash = False\n    , port' = 0\n    , hash = \"\"\n    , query = Dict.empty\n    }\n\n",
            "type": "Erl.Url"
          },
          {
            "name": "parse",
            "comment": " Parse a url string, returns an Erl.Url record\n\n    Erl.parse \"http://api.example.com/users/1#x/1?a=1\" == Erl.Url{...}\n",
            "type": "String -> Erl.Url"
          },
          {
            "name": "queryToString",
            "comment": " Convert to a string only the query component of an url, this includes '?'\n\n    Erl.queryToString url == \"?a=1&b=2\"\n",
            "type": "Erl.Url -> String"
          },
          {
            "name": "removeQuery",
            "comment": " Removes key from query string\n\n    Erl.removeQuery key url\n",
            "type": "String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "setQuery",
            "comment": " Set key/value in query string, removes any existing ones\n\n    Erl.setQuery key value url\n",
            "type": "String -> String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "toString",
            "comment": " Generate url string from an Erl.Url record\n\n    url = { protocol = \"http\",\n          , username = \"\",\n          , password = \"\",\n          , host = [\"www\", \"foo\", \"com\"],\n          , path = [\"users\", \"1\"],\n          , hasLeadingSlash = False\n          , hasTrailingSlash = False\n          , port' = 2000,\n          , hash = \"a/b\",\n          , query = Dict.empty |> Dict.insert \"q\" \"1\" |> Dict.insert \"k\" \"2\"\n          }\n\n    Erl.toString url == \"http://www.foo.com:2000/users/1?k=2&q=1#a/b\"\n\n",
            "type": "Erl.Url -> String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "sporto/hop",
    "version": "5.1.0",
    "docs": [
      {
        "name": "Hop",
        "comment": " Navigation and routing utilities for single page applications. See [readme](https://github.com/sporto/hop) for usage.\n\n# Create URLs\n@docs makeUrl, makeUrlFromLocation\n\n# Match current URL\n@docs matchUrl\n\n# Reverse Routing\n@docs matcherToPath\n\n# Change query string\n@docs addQuery, setQuery, removeQuery, clearQuery\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addQuery",
            "comment": "\nAdd query string values (patches any existing values) to a location record.\n\n    addQuery query location\n\n    addQuery (Dict.Singleton \"b\" \"2\") { path = [], query = Dict.fromList [(\"a\", \"1\")] }\n\n    ==\n\n    { path = [], query = Dict.fromList [(\"a\", \"1\"), (\"b\", \"2\")] }\n\n- query is a dictionary with keys to add\n- location is a record representing the current location\n\nTo remove a value set the value to \"\"\n",
            "type": "Hop.Types.Query -> Hop.Types.Location -> Hop.Types.Location"
          },
          {
            "name": "clearQuery",
            "comment": " Clear all query string values\n\n    clearQuery location\n",
            "type": "Hop.Types.Location -> Hop.Types.Location"
          },
          {
            "name": "makeUrl",
            "comment": "\nMake a URL from a string, this will add # or the base path as necessary.\n\n    makeUrl config \"/users\"\n\n    ==\n\n    \"#/users\"\n",
            "type": "Hop.Types.Config route -> String -> String"
          },
          {
            "name": "makeUrlFromLocation",
            "comment": "\nMake a URL from a location record.\n\n    makeUrlFromLocation config { path = [\"users\", \"1\"], query = Dict.empty }\n\n    ==\n\n    \"#/users/1\"\n\n",
            "type": "Hop.Types.Config route -> Hop.Types.Location -> String"
          },
          {
            "name": "matchUrl",
            "comment": "\nMatch a URL.\nThis function returns a tuple with the first element being the matched route and the second a location record.\nConfig is the router Config record.\n\n    matchUrl config \"/users/1\"\n\n    ==\n\n    (User 1, { path = [\"users\", \"1\"], query = Dict.fromList [] })\n\n",
            "type": "Hop.Types.Config route -> String -> ( route, Hop.Types.Location )"
          },
          {
            "name": "matcherToPath",
            "comment": "\nGenerates a path from a matcher. Use this for reverse routing.\n\nThe last parameters is a list of strings. You need to pass one string for each dynamic parameter that this route takes.\n\n    matcherToPath bookReviewMatcher [\"1\", \"2\"]\n\n    ==\n\n    \"/books/1/reviews/2\"\n",
            "type": "Hop.Types.PathMatcher a -> List String -> String"
          },
          {
            "name": "removeQuery",
            "comment": "\nRemove one key from the query string\n\n    removeQuery key location\n",
            "type": "String -> Hop.Types.Location -> Hop.Types.Location"
          },
          {
            "name": "setQuery",
            "comment": "\nSet query string values (removes existing values).\n\n    setQuery query location\n",
            "type": "Hop.Types.Query -> Hop.Types.Location -> Hop.Types.Location"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Hop.Matchers",
        "comment": "\nFunctions for building matchers\n\n# Building matchers\n@docs match1, match2, match3, match4, nested1, nested2, int, str, regex\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "int",
            "comment": " Parameter matcher that matches an integer\n\n    match2 User \"/users/\" int\n",
            "type": "Combine.Parser Int"
          },
          {
            "name": "match1",
            "comment": "\nCreate a matcher with one static segment.\n\n    type Route = Books\n\n    match1 Books \"/books\"\n\nThis will match exactly\n\n    \"/books\"\n",
            "type": "route -> String -> Hop.Types.PathMatcher route"
          },
          {
            "name": "match2",
            "comment": "\nCreate a matcher with one static segment and one dynamic parameter.\n\n    type Route = Book Str\n\n    match2 Book \"/books/\" str\n\nThis will match a path like\n\n    \"/books/abc\"\n",
            "type": "(param1 -> route) -> String -> Combine.Parser param1 -> Hop.Types.PathMatcher route"
          },
          {
            "name": "match3",
            "comment": " Create a matcher with three segments.\n\n    type Route = BookReviews Int\n\n    match3 BookReviews \"/books/\" int \"/reviews\"\n\nThis will match a path like\n\n    \"/books/1/reviews\"\n",
            "type": "(param1 -> route) -> String -> Combine.Parser param1 -> String -> Hop.Types.PathMatcher route"
          },
          {
            "name": "match4",
            "comment": " Create a matcher with four segments.\n\n    type Route = BookChapter Int String\n\n    match4 BookChapter \"/books/\" int \"/chapters/\" str\n\nThis will match a path like\n\n    \"/books/1/chapters/abc\"\n\n",
            "type": "(param1 -> param2 -> route) -> String -> Combine.Parser param1 -> String -> Combine.Parser param2 -> Hop.Types.PathMatcher route"
          },
          {
            "name": "nested1",
            "comment": " Create a matcher with two segments and nested routes\n\n    type CategoriesRoute = Games | Business | Product Int\n    type Route = ShopCategories CategoriesRoute\n\n    nested1 ShopCategories \"/shop\" categoriesRoutes\n\nThis could match paths like (depending on the nested routes)\n\n    \"/shop/games\"\n    \"/shop/business\"\n    \"/shop/product/1\"\n\n",
            "type": "(subRoute -> route) -> String -> List (Hop.Types.PathMatcher subRoute) -> Hop.Types.PathMatcher route"
          },
          {
            "name": "nested2",
            "comment": " Create a matcher with two segments and nested routes\n\n    type ReviewsRoutes = Reviews | Review Int\n    type Route = BookReviews ReviewsRoutes\n\n    nested2 BookReviews \"/books/\" int reviewsRoutes\n\nThis could match paths like (depending on the nested routes)\n\n    \"/books/1/reviews\"\n    \"/books/1/reviews/3\"\n\n",
            "type": "(param1 -> subRoute -> route) -> String -> Combine.Parser param1 -> List (Hop.Types.PathMatcher subRoute) -> Hop.Types.PathMatcher route"
          },
          {
            "name": "regex",
            "comment": " Build your own string matcher using a regex\n\n    match2 CatchAllRoute \"/\" (regex \".+\")\n",
            "type": "String -> Combine.Parser String"
          },
          {
            "name": "str",
            "comment": " Parameter matcher that matches a string, except /\n\n    match2 Token \"/token/\" str\n",
            "type": "Combine.Parser String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Hop.Types",
        "comment": "\n\n# Types\n@docs Config, Router, PathMatcher, Query, Location\n\n# Create\n@docs newLocation, newQuery\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Configuration input for Hop.new\n\n- basePath: Only for pushState routing (not hash). e.g. \"/app\". All routing and matching is done after this basepath.\n- hash: True for hash routing, False for pushState routing.\n- matchers: A List of route matchers.\n- notFound: Route that will match when a location is not found.\n\n",
            "args": [
              "route"
            ],
            "type": "{ basePath : String , hash : Bool , matchers : List (Hop.Types.PathMatcher route) , notFound : route }"
          },
          {
            "name": "Location",
            "comment": " A Record that represents the current location\nIncludes a `path` and a `query`\n\n    {\n      path: String,\n      query: Query\n    }\n",
            "args": [],
            "type": "{ path : List String, query : Hop.Types.Query }"
          },
          {
            "name": "PathMatcher",
            "comment": " A path matcher\n",
            "args": [
              "action"
            ],
            "type": "{ parser : Combine.Parser action, segments : List String }"
          },
          {
            "name": "Query",
            "comment": " A Dict that holds query parameters\n\n    Dict.Dict String String\n",
            "args": [],
            "type": "Dict.Dict String String"
          },
          {
            "name": "Router",
            "comment": " Router record created by Hop.new\n",
            "args": [],
            "type": "{ run : Task.Task () () }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "newLocation",
            "comment": "\nCreate a empty Location record\n",
            "type": "Hop.Types.Location"
          },
          {
            "name": "newQuery",
            "comment": "\nCreate an empty Query record\n",
            "type": "Hop.Types.Query"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "stasdavydov/elm-cart",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Cart",
        "comment": " A tiny library for shopping carts. It supports any Product types to add into a cart.\nThe ```price``` function is required for cart and item subtotal calculation.\n\n# Types\n@docs Item, Cart\n\n# Modifying Cart contents\n@docs add, inc, dec, remove, changeQty\n\n# Cart operations\n@docs cart, subtotal, qty\n\n# Cart Item operations\n@docs itemSubtotal\n\n",
        "aliases": [
          {
            "name": "Cart",
            "comment": " Cart is a list of Items.\n",
            "args": [
              "a"
            ],
            "type": "List (Cart.Item a)"
          },
          {
            "name": "Item",
            "comment": " Item record is a counter of added products into the cart.\n\n    type alias Product = { id : Int, price : Float }\n    item = { product = { id = 1, price = 10.0 }, qty = 1 }\n",
            "args": [
              "a"
            ],
            "type": "{ product : a, qty : Int, date_added : Date.Date }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add the product to the cart. Time of adding is specified as a parameter.\n\n    type alias Product = { id : Int, price : Float }\n\n    add (Product 1 10.0) cart 12345 ==\n      [{ product = { id = 1, price = 10.0 }, qty = 1, date_added = 12345 }]\n",
            "type": "a -> Cart.Cart a -> Time.Time -> Cart.Cart a"
          },
          {
            "name": "cart",
            "comment": " Return an empty cart.\n\n    cart == []\n",
            "type": "List (Cart.Item a)"
          },
          {
            "name": "changeQty",
            "comment": " Change the product quantity in the cart. Returns new Cart Ok result or Err.\n\n    type alias Product = { id : Int, price : Float }\n    p = Product 1 10.0\n    c = inc p (add p cart 12345)\n\n    changeQty p 10 cart == Ok [{ product = { id = 1, price = 10.0 }, qty = 10, date_added = 12345 }]\n    changeQty p 0 cart == Ok []\n    changeQty p -1 cart == Error \"Wrong negative quantuty used\"\n",
            "type": "a -> Int -> Cart.Cart a -> Result.Result String (Cart.Cart a)"
          },
          {
            "name": "dec",
            "comment": " Decrease quantity of the product in the cart.\n\n    type alias Product = { id : Int, price : Float }\n    p = Product 1 10.0\n    c = inc p (add p cart 12345)\n\n    c == [{ product = { id = 1, price = 10.0 }, qty = 2, date_added = 12345 }]\n\n    dec p c == [{ product = { id = 1, price = 10.0 }, qty = 1 }]\n    dec p (dec p c) == []\n",
            "type": "a -> Cart.Cart a -> Cart.Cart a"
          },
          {
            "name": "inc",
            "comment": " Increase quantity of the product in the cart.\n\n    type alias Product = { id : Int, price : Float }\n    p = Product 1 10.0\n\n    c = add p cart 12345\n    c == [{ product = { id = 1, price = 10.0 }, qty = 1, date_added = 12345 }]\n\n    inc p c == [{ product = { id = 1, price = 10.0 }, qty = 2, date_added = 12345 }]\n",
            "type": "a -> Cart.Cart a -> Cart.Cart a"
          },
          {
            "name": "itemSubtotal",
            "comment": " Get the item subtotal with the given price function required for getting price of the product.\n\n    type alias Product = { id : Int, price : Float }\n\n    itemSubtotal .price (item <| Product 1 10.0) == 10.0\n",
            "type": "(a -> Float) -> Cart.Item a -> Float"
          },
          {
            "name": "qty",
            "comment": " Get a quantity of all products in the cart.\n\n    type alias Product = { id : Int, price : Float }\n\n    qty (cart add <| Product 1 10.0 ) == 1\n",
            "type": "Cart.Cart a -> Int"
          },
          {
            "name": "remove",
            "comment": " Remove the product from the cart.\n\n    type alias Product = { id : Int, price : Float }\n    p = Product 1 10.0\n    c = add p cart 12345\n    c == [{ product = { id = 1, price = 10.0 }, qty = 1, date_added = 12345 }]\n    remove p c == []\n",
            "type": "a -> Cart.Cart a -> Cart.Cart a"
          },
          {
            "name": "subtotal",
            "comment": " Get subtotal of the cart with the given price function for getting price of stored products in the cart.\n\n    type alias Product = { id : Int, price : Float }\n    p = Product 1 10.0\n    subtotal .price (inc p (add p cart 12345)) == 20.0\n\n",
            "type": "(a -> Float) -> Cart.Cart a -> Float"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "stil4m/elm-aui-css",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Aui.Dropdown",
        "comment": " Functions to present AUI buttons and groups.\n\n\n# Alignment\n\n@docs Alignment, leftAlignment, rightAlignment\n\n# Types\n\n@docs Config\n\n# Model\n\n@docs Model, Msg, initialModel, open, close\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs dropdown, dropdownSection\n\n# Utility\n\n@docs baseConfig, withAlignment, withStyle\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the dropdown component.\n",
            "args": [],
            "type": "{ open : Bool }"
          }
        ],
        "types": [
          {
            "name": "Alignment",
            "comment": " Alignment relative to the button for the dropdown container.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Config",
            "comment": " Configuration type to show a dropdown component.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the dropdown component\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Create a base configuration with a Msg mapping function.\n\n    type Msg = DropdownMsg Aui.Dropdown.Msg\n\n    dropdown (baseConfig DropdownMsg) ...\n",
            "type": "(Aui.Dropdown.Msg -> a) -> Aui.Dropdown.Config a"
          },
          {
            "name": "close",
            "comment": " Change a dropdown to a closed state. Convenient when you handle an action from an item in the dropdown in your own update function.\n",
            "type": "Aui.Dropdown.Model -> Aui.Dropdown.Model"
          },
          {
            "name": "dropdown",
            "comment": " Present a dropdown given a configuration, button content, dropdown content and a model.\n\n    dropdown (baseConfig DropdownMsg |> withStyle Primary |> withAlignment Right)\n        [ text \"Open me\"]\n        [ dropdownSection (Just \"Section Title\")\n            [ ul []\n                [ li [] a [] [text \"Item 1\"]\n                , li [] a [] [text \"Item 2\"]\n                ]\n            ]\n        ]\n        dropdownModel\n",
            "type": "Aui.Dropdown.Config a -> List (Html.Html Aui.Dropdown.Msg) -> List (Html.Html a) -> Aui.Dropdown.Model -> Html.Html a"
          },
          {
            "name": "dropdownSection",
            "comment": " Creates a section for within a dropdown container.\n",
            "type": "Maybe.Maybe String -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "initialModel",
            "comment": " Default model for a dropdown component\n",
            "type": "Aui.Dropdown.Model"
          },
          {
            "name": "leftAlignment",
            "comment": " Left alignment of the dropdown respectively to the button\n",
            "type": "Aui.Dropdown.Alignment"
          },
          {
            "name": "open",
            "comment": " Change a dropdown to an opened state.\n",
            "type": "Aui.Dropdown.Model -> Aui.Dropdown.Model"
          },
          {
            "name": "rightAlignment",
            "comment": " Right alignment of the dropdown respectively to the button\n",
            "type": "Aui.Dropdown.Alignment"
          },
          {
            "name": "update",
            "comment": " Update function for the dropdown component. This should be called from within your update function when handling `Msg`\n",
            "type": "Aui.Dropdown.Msg -> Aui.Dropdown.Model -> Aui.Dropdown.Model"
          },
          {
            "name": "withAlignment",
            "comment": " Align the container for the dropdown to the side of the dropdown button.\n",
            "type": "Aui.Dropdown.Alignment -> Aui.Dropdown.Config a -> Aui.Dropdown.Config a"
          },
          {
            "name": "withStyle",
            "comment": " Set the style of the dropdown button.\n",
            "type": "Aui.Buttons.Style -> Aui.Dropdown.Config a -> Aui.Dropdown.Config a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Select",
        "comment": " Functions to present AUI select.\n\n# Type\n\n@docs Msg, Config, Ports\n\n# Model\n\n@docs Model, initialModel\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs singleSelect\n\n# Config\n\n@docs Config, baseConfig, withPlaceholder, withZIndex\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the select component.\n",
            "args": [],
            "type": "{ ports : Aui.Select.Ports , open : Bool , query : Maybe.Maybe String , items : List String , value : Maybe.Maybe String , identifier : String , highlighted : Maybe.Maybe String }"
          },
          {
            "name": "Ports",
            "comment": " Required ports for this module. These should be injected in the module because ports cannot be published in a package. :/\n",
            "args": [],
            "type": "{ blur : String -> Platform.Cmd.Cmd Aui.Select.Msg , focus : String -> Platform.Cmd.Cmd Aui.Select.Msg }"
          }
        ],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration record to show a dropdown component.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the select component\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Create a base configuration for presenting a select.\n",
            "type": "Aui.Select.Config"
          },
          {
            "name": "initialModel",
            "comment": " Initial model for a select.\n",
            "type": "Aui.Select.Ports -> String -> List String -> ( Aui.Select.Model, Platform.Cmd.Cmd Aui.Select.Msg )"
          },
          {
            "name": "singleSelect",
            "comment": " Create a single select with a configuration and a model.\n",
            "type": "Aui.Select.Config -> Aui.Select.Model -> Html.Html Aui.Select.Msg"
          },
          {
            "name": "update",
            "comment": " Update function for the select component. This should be called from within your update function when handling `Msg`\n",
            "type": "Aui.Select.Msg -> Aui.Select.Model -> ( Aui.Select.Model, Platform.Cmd.Cmd Aui.Select.Msg )"
          },
          {
            "name": "withPlaceholder",
            "comment": " Change placeholder of select\n",
            "type": "String -> Aui.Select.Config -> Aui.Select.Config"
          },
          {
            "name": "withZIndex",
            "comment": " Change backdrop z index of select\n",
            "type": "Int -> Aui.Select.Config -> Aui.Select.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Tabs",
        "comment": " Functions to present AUI tabs.\n\n# Types\n\n@docs Msg, Config\n\n# Model\n\n@docs Model, modelWithActive\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs tabs\n\n# ITems\n\n@docs Item, item\n\n\n# Config\n\n@docs Config, baseConfig, horizontal, vertical, withItems\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the tabs component.\n",
            "args": [
              "itemId"
            ],
            "type": "Maybe.Maybe itemId"
          }
        ],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration record to show a tabs component.\n",
            "args": [
              "a",
              "itemId"
            ],
            "cases": []
          },
          {
            "name": "Item",
            "comment": " Representation of a single tab.\n",
            "args": [
              "itemId"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the tabs component\n",
            "args": [
              "itemId"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Basic configuration for the tabs\n",
            "type": "(Aui.Tabs.Msg itemId -> a) -> Aui.Tabs.Config a itemId"
          },
          {
            "name": "horizontal",
            "comment": " Make configuration have horizontal tabs\n",
            "type": "Aui.Tabs.Config a itemId -> Aui.Tabs.Config a itemId"
          },
          {
            "name": "item",
            "comment": " Creates an item\n",
            "type": "itemId -> String -> Aui.Tabs.Item itemId"
          },
          {
            "name": "modelWithActive",
            "comment": " Create a model with a active item\n",
            "type": "itemId -> Aui.Tabs.Model itemId"
          },
          {
            "name": "tabs",
            "comment": " Create a tabs component with a given configuration, a mapper from itemId to tab content and a model\n",
            "type": "Aui.Tabs.Config a itemId -> (itemId -> Html.Html a) -> Aui.Tabs.Model itemId -> Html.Html a"
          },
          {
            "name": "update",
            "comment": " Update function for the tabs component. This should be called from within your update function when handling `Msg`.\n",
            "type": "Aui.Tabs.Msg itemId -> Aui.Tabs.Model itemId -> Aui.Tabs.Model itemId"
          },
          {
            "name": "vertical",
            "comment": " Make configuration have vertical tabs\n",
            "type": "Aui.Tabs.Config a itemId -> Aui.Tabs.Config a itemId"
          },
          {
            "name": "withItems",
            "comment": " Set items for tab\n",
            "type": "List (Aui.Tabs.Item itemId) -> Aui.Tabs.Config a itemId -> Aui.Tabs.Config a itemId"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Toolbar",
        "comment": " Functions to present AUI toolbars.\n\n# Presentation\n\n@docs toolbar, toolbarPrimary, toolbarSecondary, toolbarGroup\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toolbar",
            "comment": " Create a toolbar:\n\n    toolbar\n        [ toolbarPrimary\n            [ buttonGroup [ button baseConfig Edit [ text \"Edit\" ] ]\n            , buttonGroup\n                [ button baseConfig Assign [ text \"Assign\" ]\n                , button baseConfig AssignMe [ text \"Assign to me\" ]\n                ]\n            ]\n        , toolbarSecondary [ button baseConfig Configure [ icon Small Configure ] ]\n        ]\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "toolbarGroup",
            "comment": " Create toolbar button group\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "toolbarPrimary",
            "comment": " Create primary part of toolbar.\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "toolbarSecondary",
            "comment": " Create secondary part of toolbar.\n",
            "type": "List (Html.Html a) -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.ProgressTracker",
        "comment": " Functions to present AUI progress tracker.\n\n\n# Presentation\n\n@docs progressTracker, invertedProgressTracker\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "invertedProgressTracker",
            "comment": " Create an inverted progress tracker with items and a given active index.\n",
            "type": "List String -> Int -> Html.Html a"
          },
          {
            "name": "progressTracker",
            "comment": " Create a progress tracker with items and a given active index (zero based).\n\n    progressTracker [\"Step 1\", \"Step 2\", \"Step 3\"] 1\n",
            "type": "List String -> Int -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Messages",
        "comment": " Functions to present AUI messages.\n\n\n# Presentation\n\n@docs message, closableMessage\n\n# Types\n\n@docs Type, generic, error, warning, success, info, hint\n\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Type",
            "comment": " Different message types\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "closableMessage",
            "comment": " Create a message dialog that has a close button and triggers a message.\n\n    closableMessage Warning\n        Closed\n        [ text \"Title\" ]\n        [ text \"There is a warning\" ]\n",
            "type": "Aui.Messages.Type -> a -> List (Html.Html a) -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "error",
            "comment": " Error type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "generic",
            "comment": " Generic type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "hint",
            "comment": " Hint type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "info",
            "comment": " Info type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "message",
            "comment": " Create a message.\n\n    message Warning\n        [ text \"Title\" ]\n        [ text \"There is a warning\" ]\n",
            "type": "Aui.Messages.Type -> List (Html.Html a) -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "success",
            "comment": " Success type for message\n",
            "type": "Aui.Messages.Type"
          },
          {
            "name": "warning",
            "comment": " Warning type for message\n",
            "type": "Aui.Messages.Type"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Toggle",
        "comment": " Functions to present AUI toggle.\n\n# Presentation\n\n@docs toggle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toggle",
            "comment": " Create a toggle with if it is enabled, a message and its state.\n\n    toggle isEnabled\n        ToggleClicked\n        isOn\n",
            "type": "Bool -> (Bool -> a) -> Bool -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.ProgressIndicator",
        "comment": " Functions to present AUI progress indicator.\n\n\n# Presentation\n\n@docs progressIndicator, activeProgressIndicator\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "activeProgressIndicator",
            "comment": " Create a progress indicator that represents an active loading state.\n",
            "type": "Html.Html a"
          },
          {
            "name": "progressIndicator",
            "comment": " Create a progress indicator with a value between 0.0 and 1.0.\n",
            "type": "Float -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Lozenge",
        "comment": " Functions to present AUI lozenges.\n\n# Presentation\n\n@docs lozenge\n\n# Types\n\n@docs Type, generic, success, error, current, complete, moved\n\n# Presense\n\n@docs Presense, normal,subtle\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Presense",
            "comment": " Presense style for a lozenge\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Type",
            "comment": " Types for a lozenge\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "complete",
            "comment": " Comlete type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "current",
            "comment": " Current type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "error",
            "comment": " Error type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "generic",
            "comment": " Generic type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "lozenge",
            "comment": " Create a lozenge with presense and type\n",
            "type": "Aui.Lozenge.Presense -> Aui.Lozenge.Type -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "moved",
            "comment": " Moved type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          },
          {
            "name": "normal",
            "comment": " Normal presence\n",
            "type": "Aui.Lozenge.Presense"
          },
          {
            "name": "subtle",
            "comment": " Subtle presence\n",
            "type": "Aui.Lozenge.Presense"
          },
          {
            "name": "success",
            "comment": " Success type for lozenge\n",
            "type": "Aui.Lozenge.Type"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Labels",
        "comment": " Functions to present AUI labels.\n\n\n# Presentation\n\n@docs label\n\n# Actions\n\n@docs Action, navigate, trigger\n# Types\n\n@docs Config\n\n# Utility\n\n@docs baseConfig, onClick, onRemove\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " Actions that can be bound to a label\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Config",
            "comment": " Configuration to present a label.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Base configuration to show a label. No actions are bound by default.\n",
            "type": "Aui.Labels.Config a"
          },
          {
            "name": "label",
            "comment": " Show a label with a given configuration and content .\n\n    label (baseConfig\n            |> withNavigate \"http://elm-lang.org/\"\n            |> withRemove RemovedLabel)\n        [ text \"Please remove or click me!\" ]\n",
            "type": "Aui.Labels.Config a -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "navigate",
            "comment": " Action to navigate to an url\n",
            "type": "String -> Aui.Labels.Action a"
          },
          {
            "name": "onClick",
            "comment": " Bind action to click on label\n",
            "type": "Aui.Labels.Action a -> Aui.Labels.Config a -> Aui.Labels.Config a"
          },
          {
            "name": "onRemove",
            "comment": " Allow the label to be removed triggering the given message.\n",
            "type": "a -> Aui.Labels.Config a -> Aui.Labels.Config a"
          },
          {
            "name": "trigger",
            "comment": " Action to trigger an action on click\n",
            "type": "a -> Aui.Labels.Action a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Icons",
        "comment": " Functions to present AUI icons.\n\n\n# Size\n\n@docs Size, large, small\n\n# Presentation\n\n@docs icon, iconSmall, iconLarge, rawIcon\n\n# Icon\n\n@docs Icon\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Icon",
            "comment": " Available icon types. See official configuration for icon names. For all icon names the following convention is applied: from `add-comment` to `AddComment`\n",
            "args": [],
            "cases": [
              [
                "Add",
                []
              ],
              [
                "AddComment",
                []
              ],
              [
                "AddSmall",
                []
              ],
              [
                "Approve",
                []
              ],
              [
                "Appswitcher",
                []
              ],
              [
                "ArrowsDown",
                []
              ],
              [
                "ArrowsLeft",
                []
              ],
              [
                "ArrowsRight",
                []
              ],
              [
                "ArrowsUp",
                []
              ],
              [
                "Attachment",
                []
              ],
              [
                "AttachmentSmall",
                []
              ],
              [
                "AutocompleteDate",
                []
              ],
              [
                "BackPage",
                []
              ],
              [
                "Blogroll",
                []
              ],
              [
                "BpDecisions",
                []
              ],
              [
                "BpDefault",
                []
              ],
              [
                "BpFiles",
                []
              ],
              [
                "BpRequirements",
                []
              ],
              [
                "BpHowto",
                []
              ],
              [
                "BpJira",
                []
              ],
              [
                "BpMeeting",
                []
              ],
              [
                "BpRetrospective",
                []
              ],
              [
                "BpSharedlinks",
                []
              ],
              [
                "BpTroubleshooting",
                []
              ],
              [
                "Build",
                []
              ],
              [
                "Calendar",
                []
              ],
              [
                "CloseDialog",
                []
              ],
              [
                "Collapsed",
                []
              ],
              [
                "Comment",
                []
              ],
              [
                "Configure",
                []
              ],
              [
                "Confluence",
                []
              ],
              [
                "CopyClipboard",
                []
              ],
              [
                "CustomBullet",
                []
              ],
              [
                "Delete",
                []
              ],
              [
                "Deploy",
                []
              ],
              [
                "Details",
                []
              ],
              [
                "Doc",
                []
              ],
              [
                "Down",
                []
              ],
              [
                "DragVertical",
                []
              ],
              [
                "Edit",
                []
              ],
              [
                "EditSmall",
                []
              ],
              [
                "Email",
                []
              ],
              [
                "Error",
                []
              ],
              [
                "Expanded",
                []
              ],
              [
                "FileCode",
                []
              ],
              [
                "FileDoc",
                []
              ],
              [
                "FileJava",
                []
              ],
              [
                "FilePdf",
                []
              ],
              [
                "FilePpt",
                []
              ],
              [
                "FileTxt",
                []
              ],
              [
                "FileWav",
                []
              ],
              [
                "FileXls",
                []
              ],
              [
                "FileZip",
                []
              ],
              [
                "Flag",
                []
              ],
              [
                "Focus",
                []
              ],
              [
                "Group",
                []
              ],
              [
                "HandleHorizontal",
                []
              ],
              [
                "Help",
                []
              ],
              [
                "Hipchat",
                []
              ],
              [
                "Homepage",
                []
              ],
              [
                "Image",
                []
              ],
              [
                "ImageExtrasmall",
                []
              ],
              [
                "ImageSmall",
                []
              ],
              [
                "Info",
                []
              ],
              [
                "Like",
                []
              ],
              [
                "LikeSmall",
                []
              ],
              [
                "Weblink",
                []
              ],
              [
                "Link",
                []
              ],
              [
                "ListAdd",
                []
              ],
              [
                "ListRemove",
                []
              ],
              [
                "Locked",
                []
              ],
              [
                "LockedSmall",
                []
              ],
              [
                "MacroCode",
                []
              ],
              [
                "MacroDefault",
                []
              ],
              [
                "MacroGallery",
                []
              ],
              [
                "MacroStatus",
                []
              ],
              [
                "More",
                []
              ],
              [
                "NavChildren",
                []
              ],
              [
                "PageBlank",
                []
              ],
              [
                "PageBlogpost",
                []
              ],
              [
                "PageDefault",
                []
              ],
              [
                "PageTemplate",
                []
              ],
              [
                "Pages",
                []
              ],
              [
                "Quote",
                []
              ],
              [
                "Redo",
                []
              ],
              [
                "Remove",
                []
              ],
              [
                "RemoveLabel",
                []
              ],
              [
                "Review",
                []
              ],
              [
                "Rss",
                []
              ],
              [
                "Search",
                []
              ],
              [
                "SearchSmall",
                []
              ],
              [
                "Share",
                []
              ],
              [
                "SidebarLink",
                []
              ],
              [
                "Sourcetree",
                []
              ],
              [
                "SpaceDefault",
                []
              ],
              [
                "SpacePersonal",
                []
              ],
              [
                "Star",
                []
              ],
              [
                "Success",
                []
              ],
              [
                "TableBg",
                []
              ],
              [
                "TableColLeft",
                []
              ],
              [
                "TableColRemove",
                []
              ],
              [
                "TableColRight",
                []
              ],
              [
                "TableCopyRow",
                []
              ],
              [
                "TableCutRow",
                []
              ],
              [
                "TableHeaderColumn",
                []
              ],
              [
                "TableHeaderRow",
                []
              ],
              [
                "TableMerge",
                []
              ],
              [
                "TableNoBg",
                []
              ],
              [
                "TablePasteRow",
                []
              ],
              [
                "TableRemove",
                []
              ],
              [
                "TableRowDown",
                []
              ],
              [
                "TableRowRemove",
                []
              ],
              [
                "TableRowUp",
                []
              ],
              [
                "TableSplit",
                []
              ],
              [
                "Teamcals",
                []
              ],
              [
                "Time",
                []
              ],
              [
                "Undo",
                []
              ],
              [
                "Unfocus",
                []
              ],
              [
                "Unlocked",
                []
              ],
              [
                "Unstar",
                []
              ],
              [
                "Unwatch",
                []
              ],
              [
                "Up",
                []
              ],
              [
                "User",
                []
              ],
              [
                "UserStatus",
                []
              ],
              [
                "View",
                []
              ],
              [
                "ViewCard",
                []
              ],
              [
                "ViewList",
                []
              ],
              [
                "ViewTable",
                []
              ],
              [
                "Warning",
                []
              ],
              [
                "Watch",
                []
              ],
              [
                "Workbox",
                []
              ],
              [
                "WorkboxEmpty",
                []
              ],
              [
                "ConfigureColumns",
                []
              ],
              [
                "Export",
                []
              ],
              [
                "ExportList",
                []
              ],
              [
                "FileImage",
                []
              ],
              [
                "AdminFusion",
                []
              ],
              [
                "AdminJiraFields",
                []
              ],
              [
                "AdminIssue",
                []
              ],
              [
                "AdminNotifications",
                []
              ],
              [
                "AdminRoles",
                []
              ],
              [
                "AdminJiraScreens",
                []
              ],
              [
                "Pause",
                []
              ],
              [
                "PriorityHighest",
                []
              ],
              [
                "PriorityHigh",
                []
              ],
              [
                "PriorityMedium",
                []
              ],
              [
                "PriorityLow",
                []
              ],
              [
                "PriorityLowest",
                []
              ],
              [
                "RefreshSmall",
                []
              ],
              [
                "ShareList",
                []
              ],
              [
                "SwitchSmall",
                []
              ],
              [
                "Version",
                []
              ],
              [
                "Workflow",
                []
              ],
              [
                "AdminJiraSettings",
                []
              ],
              [
                "Component",
                []
              ],
              [
                "Reopen",
                []
              ],
              [
                "Roadmap",
                []
              ],
              [
                "DeploySuccess",
                []
              ],
              [
                "DeployFail",
                []
              ],
              [
                "FileGeneric",
                []
              ],
              [
                "ArrowDown",
                []
              ],
              [
                "ArrowUp",
                []
              ],
              [
                "FileVideo",
                []
              ],
              [
                "BlogrollLarge",
                []
              ],
              [
                "EmailLarge",
                []
              ],
              [
                "Layout1colLarge",
                []
              ],
              [
                "Layout2colLarge",
                []
              ],
              [
                "Layout2colLeftLarge",
                []
              ],
              [
                "Layout2colRightLarge",
                []
              ],
              [
                "Layout3colCenterLarge",
                []
              ],
              [
                "Layout3colLarge",
                []
              ],
              [
                "NavChildrenLarge",
                []
              ],
              [
                "PagesLarge",
                []
              ],
              [
                "SidebarLinkLarge",
                []
              ],
              [
                "TeamcalsLarge",
                []
              ],
              [
                "UserLarge",
                []
              ],
              [
                "JiraIssues",
                []
              ],
              [
                "DevtoolsArrowLeft",
                []
              ],
              [
                "DevtoolsArrowRight",
                []
              ],
              [
                "DevtoolsBranch",
                []
              ],
              [
                "DevtoolsBranchSmall",
                []
              ],
              [
                "DevtoolsBrowseUp",
                []
              ],
              [
                "DevtoolsCheckout",
                []
              ],
              [
                "DevtoolsClone",
                []
              ],
              [
                "DevtoolsCommit",
                []
              ],
              [
                "DevtoolsCompare",
                []
              ],
              [
                "DevtoolsFile",
                []
              ],
              [
                "DevtoolsFileBinary",
                []
              ],
              [
                "DevtoolsFileCommented",
                []
              ],
              [
                "DevtoolsFolderClosed",
                []
              ],
              [
                "DevtoolsFolderOpen",
                []
              ],
              [
                "DevtoolsFork",
                []
              ],
              [
                "DevtoolsPullRequest",
                []
              ],
              [
                "DevtoolsRepository",
                []
              ],
              [
                "DevtoolsRepositoryForked",
                []
              ],
              [
                "DevtoolsRepositoryLocked",
                []
              ],
              [
                "DevtoolsSideDiff",
                []
              ],
              [
                "DevtoolsSubmodule",
                []
              ],
              [
                "DevtoolsTag",
                []
              ],
              [
                "DevtoolsTagSmall",
                []
              ],
              [
                "DevtoolsTaskCancelled",
                []
              ],
              [
                "DevtoolsTaskDisabled",
                []
              ],
              [
                "DevtoolsTaskInProgress",
                []
              ],
              [
                "Bitbucket",
                []
              ],
              [
                "EditorAlignCenter",
                []
              ],
              [
                "EditorAlignLeft",
                []
              ],
              [
                "EditorAlignRight",
                []
              ],
              [
                "EditorBold",
                []
              ],
              [
                "EditorColor",
                []
              ],
              [
                "EditorEmoticon",
                []
              ],
              [
                "EditorHelp",
                []
              ],
              [
                "EditorHr",
                []
              ],
              [
                "EditorIndent",
                []
              ],
              [
                "EditorItalic",
                []
              ],
              [
                "EditorLayout",
                []
              ],
              [
                "EditorListBullet",
                []
              ],
              [
                "EditorListNumber",
                []
              ],
              [
                "EditorMacroToc",
                []
              ],
              [
                "EditorMention",
                []
              ],
              [
                "EditorOutdent",
                []
              ],
              [
                "EditorStyles",
                []
              ],
              [
                "EditorSymbol",
                []
              ],
              [
                "EditorTable",
                []
              ],
              [
                "EditorTask",
                []
              ],
              [
                "EditorUnderline",
                []
              ],
              [
                "Jira",
                []
              ],
              [
                "JiraCompletedTask",
                []
              ],
              [
                "JiraTestSession",
                []
              ]
            ]
          },
          {
            "name": "Size",
            "comment": " Sizes for icon\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "icon",
            "comment": " Create an icon with a given size and type.\n\n    icon Small Configure\n",
            "type": "Aui.Icons.Size -> Aui.Icons.Icon -> Html.Html a"
          },
          {
            "name": "iconLarge",
            "comment": " Shortcut for `icon Large`\n",
            "type": "Aui.Icons.Icon -> Html.Html a"
          },
          {
            "name": "iconSmall",
            "comment": " Shortcut for `icon Small`\n",
            "type": "Aui.Icons.Icon -> Html.Html a"
          },
          {
            "name": "large",
            "comment": " Large sized icon\n",
            "type": "Aui.Icons.Size"
          },
          {
            "name": "rawIcon",
            "comment": " Create an icon with an icon class that is not included in the api\n\n    rawIcon small \"aui-iconfont-add\"\n",
            "type": "Aui.Icons.Size -> String -> Html.Html a"
          },
          {
            "name": "small",
            "comment": " Small sized icon\n",
            "type": "Aui.Icons.Size"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Expander",
        "comment": " Functions to present AUI expander.\n\n\n# Config\n\n@docs Config, withMinHeight, withMoreText, withLessText`\n\n# Model\n\n@docs Model, Msg, initialModel\n\n# Update\n\n@docs update\n\n# Presentation\n\n@docs expander\n\n# Utility\n\n@docs baseConfig\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Model for the expander comonent.\n",
            "args": [],
            "type": "Bool"
          }
        ],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration record for presenting an expander.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Msg",
            "comment": " Messages being sent by the expander component.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " Create a default configuration with sane defaults to present an expander.\n",
            "type": "(Aui.Expander.Msg -> a) -> Aui.Expander.Config a"
          },
          {
            "name": "expander",
            "comment": " Present a expander given a configuration, content and model.\n\n    view model =\n        expander (baseConfig ExpanderMsg)\n            \"Lorem ipsum...\"\n            model.expander\n",
            "type": "Aui.Expander.Config a -> String -> Aui.Expander.Model -> Html.Html a"
          },
          {
            "name": "initialModel",
            "comment": " Default model for a expander component\n",
            "type": "Aui.Expander.Model"
          },
          {
            "name": "update",
            "comment": " Update function for the expander component. This should be called from within your update function when handling `Msg`\n",
            "type": "Aui.Expander.Msg -> Aui.Expander.Model -> Aui.Expander.Model"
          },
          {
            "name": "withLessText",
            "comment": " Set less text for configuration\n",
            "type": "String -> Aui.Expander.Config a -> Aui.Expander.Config a"
          },
          {
            "name": "withMinHeight",
            "comment": " Set less text for configuration\n",
            "type": "String -> Aui.Expander.Config a -> Aui.Expander.Config a"
          },
          {
            "name": "withMoreText",
            "comment": " Set more text for configuration\n",
            "type": "String -> Aui.Expander.Config a -> Aui.Expander.Config a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Avatars",
        "comment": " Functions to present AUI avatars.\n\n\n# Types\n\n@docs Config\n\n# Presentation\n\n@docs avatar\n\n# Utiltity\n\n@docs config, xsmall, small, medium, large, xlarge, xxlarge, xxxlarge, project\n",
        "aliases": [],
        "types": [
          {
            "name": "Config",
            "comment": " A type for rendering an avatar\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "avatar",
            "comment": " Function to convert a configuration record and an source url to an HTML element\n\n    avatar {size = Large, project = False}\n        \"http://myimage.net\"\n",
            "type": "Aui.Avatars.Config -> String -> Html.Html msg"
          },
          {
            "name": "config",
            "comment": " Default configuration for an avatar\n",
            "type": "Aui.Avatars.Config"
          },
          {
            "name": "large",
            "comment": " Set the configuration to render a large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "medium",
            "comment": " Set the configuration to render a medium avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "project",
            "comment": " Set the configuration to render as a project avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "small",
            "comment": " Set the configuration to render a small avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xlarge",
            "comment": " Set the configuration to render a extra large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xsmall",
            "comment": " Set the configuration to render an extra small avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xxlarge",
            "comment": " Set the configuration to render a extra-extra large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          },
          {
            "name": "xxxlarge",
            "comment": " Set the configuration to render a extra-extra-extra large avatar\n",
            "type": "Aui.Avatars.Config -> Aui.Avatars.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Badges",
        "comment": " Functions to present AUI badges.\n\n\n# Presentation\n\n@docs badge\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "badge",
            "comment": " Present a badge with a given content\n\n    badge \"Hello world!\"\n",
            "type": "String -> Html.Html msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Buttons",
        "comment": " Functions to present AUI buttons and groups.\n\n\n# Style\n\n@docs Style, primaryStyle, normalStyle, subtleStyle, lightStyle, linkStyle\n\n# Config\n\n@docs Config, baseConfig, disable, withStyle, withHref, withAction, withActive, withAdditionalClass, forceAnchor\n\n# Config\n\n# Presentation\n\n@docs button, buttonGroup\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Config",
            "comment": " Configuration type for presenting a button.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Style",
            "comment": " Different styles available for a button.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "baseConfig",
            "comment": " A configuration with sane defaults (no style, no anchor, enable, ect.).\n",
            "type": "Aui.Buttons.Config a"
          },
          {
            "name": "button",
            "comment": " Render an AUI button.\n\n    button (baseConfig |> withStyle Primary |> withHref \"http://elm-lang.org/\")\n        ButtonClicked\n        [ text \"Click me!\"]\n",
            "type": "Aui.Buttons.Config a -> List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "buttonGroup",
            "comment": " Button container that will add the correct classes to make a button group.\n\n    buttonGroup\n        [ button config Clicked1 [text \"First\"]\n        , button config Clicked2 [text \"Second\"]\n        , button config Clicked3 [text \"Third\"]\n        ]\n",
            "type": "List (Html.Html a) -> Html.Html a"
          },
          {
            "name": "disable",
            "comment": " Add the disabled state to a button.\n\n    baseConfig |> disable\n",
            "type": "Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "forceAnchor",
            "comment": " Forces the anchor tag to be used instead of the default button tag (only if no href is specified).\n\n    baseConfig |> forceAnchor\n",
            "type": "Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "lightStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "linkStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "normalStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "primaryStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "subtleStyle",
            "comment": " ",
            "type": "Aui.Buttons.Style"
          },
          {
            "name": "withAction",
            "comment": " Add an action to the buttons configuration.\n\n    baseConfig |> withAction MyAction\n",
            "type": "a -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withActive",
            "comment": " Make a button active or not active.\n\n    baseConfig |> withActive True\n",
            "type": "Bool -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withAdditionalClass",
            "comment": " Add additional classes to the button\n\n    baseConfig |> additionalClass \"my-button\"\n",
            "type": "String -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withHref",
            "comment": " Add a href to the buttons configuration.\n\n    baseConfig |> withHref \"http://elm-lang.org/\"\n",
            "type": "String -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          },
          {
            "name": "withStyle",
            "comment": " Add a button style to the configuration.\n\n    baseConfig |> withStyle Subtle\n",
            "type": "Aui.Buttons.Style -> Aui.Buttons.Config a -> Aui.Buttons.Config a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Aui.Backdrop",
        "comment": " Functions to create a backdrop that is needed for several AUI Components.\n\n# Presentation\n\n@docs backdrop\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "backdrop",
            "comment": " Present a backdrop with a click handler.\n\n    backdrop 1000 ClickedBackdrop True\n",
            "type": "Int -> a -> Bool -> Html.Html a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "szabba/elm-animations",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Animation",
        "comment": "\n\n@docs Animation, run, animate\n\n# Building\n@docs immediately, interval, time\n\n# Queries\n@docs sample, timeLeft, isDone\n\n# Transforms\n@docs reverse, reset\n\n# Combining\n@docs append, continue, map, andMap\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Animation",
            "comment": " An animation describes how a value changes over a finite period of time.\n\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Applies functions produced by one animation to values produced by another\none. In tandem with [`map`](#map), this allows you to combine several animations\nusing a multiple-parameter function.\n\n    type alias Position =\n        { x : Float, y : Float }\n\n    position : Animation Position\n    position =\n        Position `Animation.map` x `Animation.andMap` y\n\n    y : Animation Float\n    y =\n        Animation.interval pi\n        |> Animation.map cos\n\n    x : Animation Float\n    x = Animation.interval pi\n\n\n",
            "type": "Animation.Animation (a -> b) -> Animation.Animation a -> Animation.Animation b"
          },
          {
            "name": "animate",
            "comment": " Like [`run`](#run), but it also includes the amount of time *not* used up by\nthe animation.\n\n",
            "type": "Time.Time -> Animation.Animation a -> ( Animation.Animation a, Time.Time )"
          },
          {
            "name": "append",
            "comment": " Glues two animations together.\n\n",
            "type": "Animation.Animation a -> Animation.Animation a -> Animation.Animation a"
          },
          {
            "name": "continue",
            "comment": " Glues on a new period of time to an animation.\n\n    2\n        |> Animation.immediately\n        |> Animation.continue (2 * Time.second) (\\x t -> x + 2 * t)\n\n",
            "type": "Time.Time -> (a -> Float -> a) -> Animation.Animation a -> Animation.Animation a"
          },
          {
            "name": "immediately",
            "comment": " Creates an animation that takes no time and assumes the specified value.\n\n",
            "type": "a -> Animation.Animation a"
          },
          {
            "name": "interval",
            "comment": " Runs linearily from 0 to 1 over the time specified.\n\nFor negative values you'll get the zero interval.\n\n",
            "type": "Time.Time -> Animation.Animation Float"
          },
          {
            "name": "isDone",
            "comment": " True when the animation is over.\n\n",
            "type": "Animation.Animation a -> Bool"
          },
          {
            "name": "map",
            "comment": " Builds an animation with the values transformed by a function. If you want\nto use a function with multiple arguments, you're looking for\n[`andMap`](#andMap)\n\n",
            "type": "(a -> b) -> Animation.Animation a -> Animation.Animation b"
          },
          {
            "name": "reset",
            "comment": " Moves the animation back to it's starting point - it's state before it\nconsumed any time.\n\n",
            "type": "Animation.Animation a -> Animation.Animation a"
          },
          {
            "name": "reverse",
            "comment": " Reverses the arrow of time in the animation.\n\n",
            "type": "Animation.Animation a -> Animation.Animation a"
          },
          {
            "name": "run",
            "comment": " Runs an animation for some time. If you need to know when the animation\n\"ends early\", leaving time to spare, consider using [`animate`](#animate)\ninstead.\n\n",
            "type": "Time.Time -> Animation.Animation a -> Animation.Animation a"
          },
          {
            "name": "sample",
            "comment": " Gets the current value of the animation.\n\n",
            "type": "Animation.Animation a -> a"
          },
          {
            "name": "time",
            "comment": " Runs linearily from 0 to the time specified over the time specified.\n\nFor negative values you'll get the zero interval.\n\n",
            "type": "Time.Time -> Animation.Animation Time.Time"
          },
          {
            "name": "timeLeft",
            "comment": " The time left until the animation ends.\n\n",
            "type": "Animation.Animation a -> Time.Time"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "szabba/elm-laws",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Laws",
        "comment": " An aletrnative to the claim DSL from Elm Check. See the README for more\ndetails.\n\n@docs claim, suite\n\n# Helpers\n@docs equivalent, true, false, equal\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "claim",
            "comment": " Creates a claim given a string describing it, a pair of functions and a\nproducer of values. The two functions are applied to values obtained from the\nproducer.\n\n    import Laws exposing (claim)\n    import Check.Producer exposing (list int)\n\n    notAppliedTwiceReturnsArgument =\n        claim \"not, applied twice, returns it's initial argument\"\n            (not << not, identity)\n            (list int)\n\nThere are helpers around for creating these kinds of function pairs.\n\n",
            "type": "String -> ( a -> b, a -> b ) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "equal",
            "comment": " Helps test value equality.\n\n    import Laws exposing (claim, equal)\n    import Check.Producer exposing (unit)\n\n    oneMinusOneIsZero =\n        claim \"1 - 1 = 0\"\n            (1 - 1 `equal` 0)\n            unit\n\n",
            "type": "a -> a -> ( b -> a, b -> a )"
          },
          {
            "name": "equivalent",
            "comment": " Helps test that the result of two functions is the same.\n\n    import Laws exposing (claim, equivalent)\n    import Check.Producer exposing (int)\n\n    oneIsIdentityOfMultiplication =\n        claim \"1 is the identity of multiplication\"\n            ((*) 1 `equivalent` identity)\n            int\n\n",
            "type": "(a -> b) -> (a -> b) -> ( a -> b, a -> b )"
          },
          {
            "name": "false",
            "comment": " Helps test that a property is false.\n\n    import Laws exposing (claim, true)\n    import Check.Producer exposing (list, unit)\n\n    empthyIsEmpty\n        claim \"half a list is longer than i's thole\"\n            (true <| \\l -> List.length l < List.length // 2)\n            (list unit)\n\n",
            "type": "(a -> Bool) -> ( a -> Bool, a -> Bool )"
          },
          {
            "name": "suite",
            "comment": " Creates a claim that groups other claims.\n\n    import Laws exposing (suite, true, false)\n    import Check.Producer exposing (unit)\n\n    contradictory =\n        suite \"the world is full of contradictions\"\n            [ claim \"of course\"\n                (true <| always True)\n                unit\n            , claim \"of course NOT\"\n                (false <| always True)\n                unit\n            ]\n\n",
            "type": "String -> List Check.Claim -> Check.Claim"
          },
          {
            "name": "true",
            "comment": " Helps test that a property is true.\n\n    import Laws exposing (claim, true)\n    import Check.Producer exposing (list, unit)\n\n    halfAListIsNoMoreThanTheWhole =\n        claim \"half of a list is no longer than the entire list\"\n            (true <| \\l -> List.length l >= List.length // 2)\n            (list unit)\n\n",
            "type": "(a -> Bool) -> ( a -> Bool, a -> Bool )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "szabba/elm-timestamp",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Time.Timestamp",
        "comment": " This module lets you wrap your component such, that incoming messages will\nbe transparently decorated with timestamps.\n\n@docs Model, Message, update, subscriptions, view\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Wraps the essential parts of another component.\n\n",
            "args": [
              "msg",
              "model"
            ],
            "type": "{ model : model , update : ( msg, Time.Time ) -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg }"
          }
        ],
        "types": [
          {
            "name": "Message",
            "comment": " A wrapper for messages that might carry a timestamp. If it doesn't a command\nis issued to get one that does and carries the same inner message.\n\n",
            "args": [
              "msg"
            ],
            "cases": [
              [
                "Timed",
                [
                  "Time.Time",
                  "msg"
                ]
              ],
              [
                "Untimed",
                [
                  "msg"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "subscriptions",
            "comment": " The subscription for the wrapped component.\n\n",
            "type": "Time.Timestamp.Model msg model -> Platform.Sub.Sub (Time.Timestamp.Message msg)"
          },
          {
            "name": "update",
            "comment": " Updates the inner model given a wrapped message.\n\n",
            "type": "Time.Timestamp.Message msg -> Time.Timestamp.Model msg model -> ( Time.Timestamp.Model msg model , Platform.Cmd.Cmd (Time.Timestamp.Message msg) )"
          },
          {
            "name": "view",
            "comment": " Render the component.\n\n",
            "type": "Time.Timestamp.Model msg model -> Html.Html (Time.Timestamp.Message msg)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "thaterikperson/elm-blackjack",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Blackjack",
        "comment": " This library provides a few utility functions\nfor a Blackjack application. It can compare hands\nand calculate the best score for a given set of cards.\n\n# Types\n@docs Hand, Card, CardType, CardSuit\n\n# Construction\n@docs newHand, newCard, addCardToHand, suitOfCard, typeOfCard\n\n# Utility Functions\n@docs isSplittable, isBust, hasAce, isBlackjack, isTwentyOne, isHandBetterThan, isHandTiedWith, bestScore\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Card",
            "comment": " Represents a standard playing card.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "CardSuit",
            "comment": "",
            "args": [],
            "cases": [
              [
                "Clubs",
                []
              ],
              [
                "Diamonds",
                []
              ],
              [
                "Hearts",
                []
              ],
              [
                "Spades",
                []
              ]
            ]
          },
          {
            "name": "CardType",
            "comment": "",
            "args": [],
            "cases": [
              [
                "Ace",
                []
              ],
              [
                "King",
                []
              ],
              [
                "Queen",
                []
              ],
              [
                "Jack",
                []
              ],
              [
                "Ten",
                []
              ],
              [
                "Nine",
                []
              ],
              [
                "Eight",
                []
              ],
              [
                "Seven",
                []
              ],
              [
                "Six",
                []
              ],
              [
                "Five",
                []
              ],
              [
                "Four",
                []
              ],
              [
                "Three",
                []
              ],
              [
                "Two",
                []
              ]
            ]
          },
          {
            "name": "Hand",
            "comment": " Represents a hand in Blackjack. Can be\nan arbitrary number of cards.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "addCardToHand",
            "comment": " Add a card to an existing hand. Order of\ncards is irrelavent.\n",
            "type": "Blackjack.Card -> Blackjack.Hand -> Blackjack.Hand"
          },
          {
            "name": "bestScore",
            "comment": " Returns the highest score a hand can have.\nIf all possible scores are greater than 21, 0\nis returned.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Seven Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Five Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n      |> addCardToHand (newCard Nine Hearts)\n\n    bestScore hand1 == 18\n    bestScore hand2 == 0\n",
            "type": "Blackjack.Hand -> Int"
          },
          {
            "name": "hasAce",
            "comment": " Test if one of the cards in the hand\nis an Ace. Useful if you want to prompt\nthe user to double-down.\n\n    hand = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n\n    hasAce hand == True\n",
            "type": "Blackjack.Hand -> Bool"
          },
          {
            "name": "isBlackjack",
            "comment": " Test if a hand is a Blackjack.\nA hand is Blackjack if it is composed of\none Ace and one face card or 10.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n\n    isBlackjack hand1 == True\n    isBlackjack hand2 == False\n",
            "type": "Blackjack.Hand -> Bool"
          },
          {
            "name": "isBust",
            "comment": " Test if a hand is busted. A hand\nis busted if all possible values are\ngreater than 21.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Ten Diamonds)\n      |> addCardToHand (newCard Queen Clubs)\n      |> addCardToHand (newCard Two Clubs)\n\n    isBust hand1 == False\n    isBust hand2 == True\n",
            "type": "Blackjack.Hand -> Bool"
          },
          {
            "name": "isHandBetterThan",
            "comment": " Test if one hand has a better score than\nanother hand. Useful to compare a player's\nhand against a dealer's. The hand with the\nhighest score while less than or equal to 21\nis the best hand.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Seven Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Five Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n\n    isHandBetterThan hand1 hand2 == True\n",
            "type": "Blackjack.Hand -> Blackjack.Hand -> Bool"
          },
          {
            "name": "isHandTiedWith",
            "comment": " Test if one hand has the same score as\nanother hand. Useful to compare a player's\nhand against a dealer's.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Seven Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Five Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n      |> addCardToHand (newCard Two Hearts)\n\n    isHandTiedWith hand1 hand2 == True\n",
            "type": "Blackjack.Hand -> Blackjack.Hand -> Bool"
          },
          {
            "name": "isSplittable",
            "comment": " Test if a hand is splittable. A hand\nis only splittable if it has two cards,\nboth of the same value.\n\n    hand = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n\n    isSplittable hand == True\n",
            "type": "Blackjack.Hand -> Bool"
          },
          {
            "name": "isTwentyOne",
            "comment": " Test if a hand's value is 21. This\nwill return True for Blackjack hands as\nwell as non-Blackjack hands.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n    hand3 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n      |> addCardToHand (newCard Nine Clubs)\n\n    isTwentyOne hand1 == True\n    isTwentyOne hand2 == False\n    isTwentyOne hand3 == True\n",
            "type": "Blackjack.Hand -> Bool"
          },
          {
            "name": "newCard",
            "comment": " Construct a card given the type and suit.\n",
            "type": "Blackjack.CardType -> Blackjack.CardSuit -> Blackjack.Card"
          },
          {
            "name": "newHand",
            "comment": " Construct an empty hand. Can be\neither a player's or dealer's hand.\n",
            "type": "Blackjack.Hand"
          },
          {
            "name": "suitOfCard",
            "comment": " Returns the suit of a given card.\n",
            "type": "Blackjack.Card -> Blackjack.CardSuit"
          },
          {
            "name": "typeOfCard",
            "comment": " Returns the type of a given card.\n",
            "type": "Blackjack.Card -> Blackjack.CardType"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "thebritican/elm-autocomplete",
    "version": "3.3.0",
    "docs": [
      {
        "name": "Autocomplete",
        "comment": " A customizable Autocomplete component.\n\nThe Autocomplete consists of a menu, a list, the list's many items, and an input.\nAll of these views are styleable via css classes.\nSee the Styling module.\n\nThe currently selected item is preserved and styled with the aforementioned module.\n\nThis selection is modified by keyboard arrow input, mouse clicks, and API consumer defined keyCodes.\n\nCheck out how easy it is to plug into a simple program:\n```\nmain =\n  let\n    updateAutocomplete msg autocomplete =\n      let\n        ( updatedAutocomplete, status ) = Autocomplete.update msg autocomplete\n        -- status communicates extra information the parent on every update\n        -- e.g. when the selection changes, the value changes, or the user has triggered a completion\n      in\n        updatedAutocomplete\n  in\n    Html.beginnerProgram\n      { model = Autocomplete.init [ \"elm\", \"makes\", \"coding\", \"life\", \"easy\" ]\n      , update = updateAutocomplete\n      , view = Autocomplete.view\n      }\n```\n\n# Definition\n@docs Autocomplete, Status\n\n# Initialize\n@docs init, initWithConfig\n\n# Update\n@docs Msg, update\n\n# Views\n@docs view\n\n# Helpers\n@docs getSelectedItem, getCurrentValue\n\n# Controlling Behavior\n\nIf you want the autocomplete to be completely controlled, with no `input` field, use the Config\nmodule's `isValueControlled` function to designate that the API consumer will control the autocomplete.\nThis is useful for mentions and other autocomplete examples inside textareas, contenteditable, etc.\n\nDefined below are functions to control:\n  the autocomplete's menu navigation, set its value, items, and whether its menu should be shown.\n\n@docs showMenu, setValue, setItems, setLoading, MenuNavigation, navigateMenu\n\n# Defaults\n@docs defaultStatus\n\n",
        "aliases": [
          {
            "name": "Status",
            "comment": " Information for parent components about the update of the Autocomplete ",
            "args": [],
            "type": "{ completed : Autocomplete.Config.Completed , valueChanged : Autocomplete.Config.ValueChanged , selectionChanged : Autocomplete.Config.SelectionChanged }"
          }
        ],
        "types": [
          {
            "name": "Autocomplete",
            "comment": " The Autocomplete model.\n    It assumes filtering is based upon strings.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "MenuNavigation",
            "comment": " The possible actions to navigate the autocomplete menu\n",
            "args": [],
            "cases": [
              [
                "Previous",
                []
              ],
              [
                "Next",
                []
              ],
              [
                "Select",
                []
              ]
            ]
          },
          {
            "name": "Msg",
            "comment": " A description of a state change\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultStatus",
            "comment": " A status record where everything is False\n",
            "type": "Autocomplete.Status"
          },
          {
            "name": "getCurrentValue",
            "comment": " Get the string currently entered by the user in the Autocomplete\n",
            "type": "Autocomplete.Autocomplete -> String"
          },
          {
            "name": "getSelectedItem",
            "comment": " Get the text of the currently selected item\n",
            "type": "Autocomplete.Autocomplete -> Autocomplete.Config.Text"
          },
          {
            "name": "init",
            "comment": " Creates an Autocomplete from a list of items with a default `String.startsWith` filter\n",
            "type": "List String -> Autocomplete.Autocomplete"
          },
          {
            "name": "initWithConfig",
            "comment": " Creates an Autocomplete with a custom configuration\n",
            "type": "List String -> Autocomplete.Config.Config Autocomplete.Msg -> Autocomplete.Autocomplete"
          },
          {
            "name": "navigateMenu",
            "comment": " When controlling the Autocomplete value, use this function\n    to provide a message for updating the menu selection.\n",
            "type": "Autocomplete.MenuNavigation -> Autocomplete.Autocomplete -> Autocomplete.Msg"
          },
          {
            "name": "setItems",
            "comment": " Sets the Autocomplete's list of items ",
            "type": "List String -> Autocomplete.Autocomplete -> Autocomplete.Autocomplete"
          },
          {
            "name": "setLoading",
            "comment": " Sets whether the Autocomplete shows its loading display or not. Useful for remote updates. ",
            "type": "Bool -> Autocomplete.Autocomplete -> Autocomplete.Autocomplete"
          },
          {
            "name": "setValue",
            "comment": " Set current autocomplete value\n",
            "type": "String -> Autocomplete.Autocomplete -> Autocomplete.Autocomplete"
          },
          {
            "name": "showMenu",
            "comment": " Set whether the menu should be shown\n",
            "type": "Bool -> Autocomplete.Autocomplete -> Autocomplete.Autocomplete"
          },
          {
            "name": "update",
            "comment": " The quintessential Elm Architecture reducer.\n",
            "type": "Autocomplete.Msg -> Autocomplete.Autocomplete -> ( Autocomplete.Autocomplete, Autocomplete.Status )"
          },
          {
            "name": "view",
            "comment": " The full Autocomplete view, with menu and input.\n",
            "type": "Autocomplete.Autocomplete -> Html.Html Autocomplete.Msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Autocomplete.Config",
        "comment": " Configuration module for the Autocomplete component.\n\n# Definition\n@docs Config, ItemHtmlFn, Text, InputValue, Index, Completed, ValueChanged, SelectionChanged, Accessibility\n\n# Defaults\n@docs defaultConfig\n\n# Modifiers\n@docs hideMenuIfEmpty, isValueControlled, setClassesFn, setCompletionKeyCodes, setItemHtml, setMaxListSize, setFilterFn, setCompareFn, setNoMatchesDisplay, setLoadingDisplay, setAccessibilityProperties\n\n\n",
        "aliases": [
          {
            "name": "Accessibility",
            "comment": " Information needed for better screen reader accessibility.\n    `owneeID` will differentiate multiple instances of the autocomplete.\n",
            "args": [],
            "type": "{ owneeID : String }"
          },
          {
            "name": "Completed",
            "comment": " True if an update completed the autocomplete\n",
            "args": [],
            "type": "Bool"
          },
          {
            "name": "Config",
            "comment": " The configuration record for an Autocomplete component.\n",
            "args": [
              "msg"
            ],
            "type": "Autocomplete.Config.Model msg"
          },
          {
            "name": "Index",
            "comment": " Positive integer index of selected item in list\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "InputValue",
            "comment": " The value of the input\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "ItemHtmlFn",
            "comment": " Given the text of an item, produce some HTML\n",
            "args": [
              "msg"
            ],
            "type": "Autocomplete.Config.Text -> Html.Html msg"
          },
          {
            "name": "SelectionChanged",
            "comment": " True if an update changed the autocomplete's selection\n",
            "args": [],
            "type": "Bool"
          },
          {
            "name": "Text",
            "comment": " The text of an item\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "ValueChanged",
            "comment": " True if an update changed the autocomplete's value\n",
            "args": [],
            "type": "Bool"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultConfig",
            "comment": " A simple Autocomplete configuration\n",
            "type": "Autocomplete.Config.Config msg"
          },
          {
            "name": "hideMenuIfEmpty",
            "comment": " Provide True to hide the autocomplete menu if the input field is empty.\n    False to show the autocomplete menu whenever the input field has focus.\n    The default config provides False.\n",
            "type": "Bool -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "isValueControlled",
            "comment": " Provide True to control the autocomplete value,\n    False to let the component control the value via a stylable `input` field.\n    The default config provides False.\n",
            "type": "Bool -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setAccessibilityProperties",
            "comment": " Provide accessibility properties. Namely an owneeID for ariaOwneeID and to compute ariaActiveDescendantID\n",
            "type": "Autocomplete.Config.Accessibility -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setClassesFn",
            "comment": " Provide a function that produces an list of classes to style a particular View\n",
            "type": "(Autocomplete.Styling.View -> Autocomplete.Styling.Classes) -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setCompareFn",
            "comment": " Provide a custom comparison function to order the Autocomplete matches.\n",
            "type": "(Autocomplete.Config.Text -> Autocomplete.Config.Text -> Basics.Order) -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setCompletionKeyCodes",
            "comment": " Provide keycodes for autocompletion. By default, completion happens on tab press.\n",
            "type": "List Char.KeyCode -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setFilterFn",
            "comment": " Provide a custom filter function used to filter Autocomplete items.\n",
            "type": "(Autocomplete.Config.Text -> Autocomplete.Config.InputValue -> Bool) -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setItemHtml",
            "comment": " Provide a custom HTML view for an Autocomplete item's text\n",
            "type": "Autocomplete.Config.ItemHtmlFn msg -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setLoadingDisplay",
            "comment": " Provide a custom loading display for the case when more items are being fetched\n",
            "type": "Html.Html msg -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setMaxListSize",
            "comment": " Provide a maximum list size for the Autocomplete menu\n",
            "type": "Int -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          },
          {
            "name": "setNoMatchesDisplay",
            "comment": " Provide a custom HTML display for the case that nothing matches.\n",
            "type": "Html.Html msg -> Autocomplete.Config.Config msg -> Autocomplete.Config.Config msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Autocomplete.Styling",
        "comment": " Styling module for the Autocomplete component.\n\nThe autocomplete consists of a menu, a list, list items, and an input.\nThis module includes functions to provide css class names for styling those\nchild views.\n\nStyling is easy as:\n```\ntestData : List String\ntestData =\n  [ \"elm\"\n  , \"makes\"\n  , \"coding\"\n  , \"life\"\n  , \"easy\"\n  ]\n\ngetClasses : Styling.View -> Styling.Classes\ngetClasses view =\n  case view of\n    Styling.Menu ->\n      [ ( \"autocomplete-menu\", True ) ]\n\n    Styling.List ->\n      [ ( \"autocomplete-list\", True ) ]\n\n    Styling.Item ->\n      [ ( \"autocomplete-item\", True ) ]\n\n    Styling.SelectedItem ->\n      [ ( \"autocomplete-selected-item\", True ) ]\n\n    Styling.Input ->\n      [ ( \"autocomplete-input\", True ) ]\n\n\nmain : Program Never\nmain =\n  let\n    config =\n      Autocomplete.Config.defaultConfig\n        |> Autocomplete.Config.setClassesFn getClasses\n  in\n    Html.beginnerProgram\n      { model = initWithConfig testData config\n      , update = (\\act model -> fst (update act model))\n      , view = view\n      }\n```\n\n# Child Views\n@docs View\n\n# Definition\n@docs Classes\n\n",
        "aliases": [
          {
            "name": "Classes",
            "comment": " A list of class names and their associated status (added/removed) as a boolean value.\n",
            "args": [],
            "type": "List ( String, Bool )"
          }
        ],
        "types": [
          {
            "name": "View",
            "comment": " The stylable views of the Autocomplete component.\n",
            "args": [],
            "cases": [
              [
                "Menu",
                []
              ],
              [
                "List",
                []
              ],
              [
                "Item",
                []
              ],
              [
                "SelectedItem",
                []
              ],
              [
                "Input",
                []
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "tiziano88/elm-oauth",
    "version": "1.2.1",
    "docs": [
      {
        "name": "OAuth.Config",
        "comment": " This library contains several ready-made server configs for various OAuth 2.0 providers\n\n@docs google, facebook, digitalOcean, gitHub, stackExchange\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "digitalOcean",
            "comment": " Base configuration for DigitalOcean endpoints.\n\nBased on https://developers.digitalocean.com/documentation/oauth/#client-application-flow\n\nNote: Verification does not seem to be provided by this endpoint.\n",
            "type": "OAuth.ServerConfig"
          },
          {
            "name": "facebook",
            "comment": " Base configuration for Facebook endpoints.\n\nBased on https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow .\n",
            "type": "OAuth.ServerConfig"
          },
          {
            "name": "gitHub",
            "comment": " Base configuration for GitHub endpoints.\n\nBased on https://developer.github.com/v3/oauth/ .\n\nNote: Does not currently work. It seems that GitHub does not currently support web-only flow.\n",
            "type": "OAuth.ServerConfig"
          },
          {
            "name": "google",
            "comment": " Base configuration for Google endpoints.\n\nBased on https://developers.google.com/identity/protocols/OAuth2UserAgent .\n",
            "type": "OAuth.ServerConfig"
          },
          {
            "name": "stackExchange",
            "comment": " Base configuration for StackExchange endpoints.\n\nBased on https://api.stackexchange.com/docs/authentication .\n\nNote: Verification does not seem to be provided by this endpoint.\n",
            "type": "OAuth.ServerConfig"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "OAuth",
        "comment": " This library allows handling OAuth 2.0 authentication.\n\n# Client\n\n@docs Client, newClient\n\n# Configuration\n\n@docs ServerConfig, ClientConfig\n\n# Token\n\n@docs Token\n\n# App\n\n@docs buildAuthUrl, urlParser\n\n",
        "aliases": [
          {
            "name": "Client",
            "comment": " An OAuth client.\n",
            "args": [],
            "type": "{ serverConfig : OAuth.ServerConfig , clientConfig : OAuth.ClientConfig }"
          },
          {
            "name": "ClientConfig",
            "comment": " Client-side configuration for a single OAuth client.\nIt includes the endpoints used to obtain and verify tokens, and also client-specific settings.\n",
            "args": [],
            "type": "{ clientId : String, scopes : List String, redirectUrl : String }"
          },
          {
            "name": "ServerConfig",
            "comment": " Server-side configuration for a single OAuth client.\nIt includes the endpoints used to obtain and verify tokens, and also client-specific settings.\n",
            "args": [],
            "type": "{ endpointUrl : String, validateUrl : String }"
          }
        ],
        "types": [
          {
            "name": "Token",
            "comment": " Represents a validated OAuth token.\n",
            "args": [],
            "cases": [
              [
                "Validated",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "buildAuthUrl",
            "comment": " Builds an URL that when followed allows the user to authenticate with the specified provider.\n",
            "type": "OAuth.Client -> String"
          },
          {
            "name": "newClient",
            "comment": " Creates a new OAuth client based on a server configuration and a client configuration.\nNormally defined at top-level in the application.\n\n    authClient : OAuth.Client\n    authClient = OAuth.newClient serverConfig clientConfig\n\n",
            "type": "OAuth.ServerConfig -> OAuth.ClientConfig -> OAuth.Client"
          },
          {
            "name": "urlParser",
            "comment": " A function to create a URL parser to be used with a `Navigation.program`.\n\n    main =\n      Navigation.program (OAuth.urlParser authClient)\n        { init = ...\n        , view = ...\n        , update = ...\n        , urlUpdate = ...\n        , subscriptions = ...\n        }\n\n",
            "type": "OAuth.Client -> Navigation.Parser (Task.Task String OAuth.Token)"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "tiziano88/elm-tfl",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Tfl",
        "comment": " This is a wrapper for the TfL (Transport for London) public API.\n\nThe API is described at https://api.tfl.gov.uk and https://api-portal.tfl.gov.uk/docs.\n\n# Predictions\n\n@docs Prediction, getPredictions\n\n# StopPoint\n\n@docs StopPoint, getStopPoint\n\n",
        "aliases": [
          {
            "name": "Prediction",
            "comment": " A Prediction for a single line and platform.\n",
            "args": [],
            "type": "{ destinationName : String , expectedArrival : Time.Time , lineName : String , platformName : String , stationName : String , towards : String , modeName : String , timestamp : Time.Time }"
          },
          {
            "name": "StopPoint",
            "comment": " A stop point.\n",
            "args": [],
            "type": "{ commonName : String , latitude : Float , longitude : Float , modes : List String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "getPredictions",
            "comment": " Get the list of arrival predictions for given line id.\n\nSee:\n\n- https://api.tfl.gov.uk/#StopPoint\n- https://api.tfl.gov.uk/#/StopPoint/{id}/Arrivals .\n",
            "type": "String -> Task.Task Http.Error (List Tfl.Prediction)"
          },
          {
            "name": "getStopPoint",
            "comment": " Get the StopPoint corresponding to the given stop id.\n\nSee:\n\n- https://api.tfl.gov.uk/#StopPoint\n- https://api.tfl.gov.uk/#/StopPoint/{id} .\n",
            "type": "String -> Task.Task Http.Error Tfl.StopPoint"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "tomjkidd/elm-multiway-tree-zipper",
    "version": "1.9.0",
    "docs": [
      {
        "name": "MultiwayTreeZipper",
        "comment": " A library for navigating and updating immutable trees. The elements in\nthe tree must have the same type. The trees are implemented in a Huet\nZipper fashion.\n\n# Types\n@docs Context, Breadcrumbs, Zipper\n\n# Navigation API\n@docs goToChild, goUp, goToRoot, goLeft, goRight, goToNext, goToPrevious, goToRightMostChild, goTo\n\n# Update API\n@docs updateDatum, replaceDatum, insertChild, appendChild\n\n# Access API\n@docs datum, maybeDatum\n\n\n# References\n[The Zipper, Gerard Huet](https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf)\n[Learn You A Haskell, Zippers, Miran Lipovaca](http://learnyouahaskell.com/zippers)\n\n# Future work\nMight be able to integrate existing [Rose Tree](http://package.elm-lang.org/packages/TheSeamau5/elm-rosetree) to work with the Zipper.\nWanted the first version to be self contained.\n\n",
        "aliases": [
          {
            "name": "Breadcrumbs",
            "comment": " A list of Contexts that is contructed as a MultiwayTree is navigated.\nBreadcrumbs are used to retain information about parts of the tree that move out\nof focus. As the tree is navigated, the needed Context is pushed onto the list\nBreadcrumbs, and they are maintained in the reverse order in which they are\nvisited\n",
            "args": [
              "a"
            ],
            "type": "List (MultiwayTreeZipper.Context a)"
          },
          {
            "name": "Zipper",
            "comment": " A structure to keep track of the current Tree, as well as the Breadcrumbs to\nallow us to continue navigation through the rest of the tree.\n",
            "args": [
              "a"
            ],
            "type": "( MultiwayTree.Tree a, MultiwayTreeZipper.Breadcrumbs a )"
          }
        ],
        "types": [
          {
            "name": "Context",
            "comment": " The necessary information needed to reconstruct a MultiwayTree as it is\nnavigated with a Zipper. This context includes the datum that was at the\nprevious node, a list of children that came before the node, and a list of\nchildren that came after the node.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Context",
                [
                  "a",
                  "List (MultiwayTree.Tree a)",
                  "List (MultiwayTree.Tree a)"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "appendChild",
            "comment": " Inserts a Tree as the last child of the Tree at the current focus. Does not move the focus.\n",
            "type": "MultiwayTree.Tree a -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "datum",
            "comment": " Access the datum at the current Zipper focus.\n",
            "type": "MultiwayTreeZipper.Zipper a -> a"
          },
          {
            "name": "goLeft",
            "comment": " Move left relative to the current Zipper focus. This allows navigation from\na child to it's previous sibling.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 1\n        &> goLeft\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goRight",
            "comment": " Move right relative to the current Zipper focus. This allows navigation from\na child to it's next sibling.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 1\n        &> goRight\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goTo",
            "comment": " Move the focus to the first element for which the predicate is True. If no\nsuch element exists returns Nothing. Starts searching at the root of the tree.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goTo (\\elem -> elem == \"e\")\n",
            "type": "(a -> Bool) -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goToChild",
            "comment": " Move down relative to the current Zipper focus. This allows navigation from\na parent to it's children.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 1\n",
            "type": "Int -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goToNext",
            "comment": " Moves to the next node in the hierarchy, depth-first. If already\n  at the end, stays there.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToNext\n        &> goToNext\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goToPrevious",
            "comment": " Moves to the previous node in the hierarchy, depth-first.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 2\n        &> goToPrevious\n        &> goToPrevious\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goToRightMostChild",
            "comment": " Move down and as far right as possible relative to the current Zipper focus.\nThis allows navigation from a parent to it's last child.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToRightMostChild\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goToRoot",
            "comment": " Move to the root of the current Zipper focus. This allows navigation from\nany part of the tree back to the root.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> goToChild 1\n        &> goToRoot\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goUp",
            "comment": " Move up relative to the current Zipper focus. This allows navigation from a\nchild to it's parent.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> goUp\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "insertChild",
            "comment": " Inserts a Tree as the first child of the Tree at the current focus. Does not move the focus.\n",
            "type": "MultiwayTree.Tree a -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "maybeDatum",
            "comment": " Access the datum at the current Zipper focus as a Maybe.\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe a"
          },
          {
            "name": "replaceDatum",
            "comment": " Replace the datum at the current Zipper focus. This allows complete\nreplacement of a node's datum information, ignoring the previous state of the\nnode.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> replaceDatum \"X\" -- Replaces \"b\" with \"X\"\n        &> goToRoot\n",
            "type": "a -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "updateDatum",
            "comment": " Update the datum at the current Zipper focus. This allows changes to be made\nto a part of a node's datum information, given the previous state of the node.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> updateDatum (\\old -> old ++ \"X\") -- Appends an X to \"b\"\n        &> goToRoot\n",
            "type": "(a -> a) -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "MultiwayTree",
        "comment": " A library for constructing multi-way trees. Each Tree carries two pieces of\ninformation, it's datum and children.\n\n\n# Types\n@docs Tree, Forest\n\n# Operations\n@docs datum, children, foldl, foldr, flatten, tuplesOfDatumAndFlatChildren, filter, filterWithChildPrecedence, length, insertChild, appendChild\n\n# Mapping\n@docs map, mapListOverTree, indexedMap\n\n# Sorting\n@docs sortBy, sortWith\n",
        "aliases": [
          {
            "name": "Forest",
            "comment": " A list of Trees. Convenient for describing children.\n",
            "args": [
              "a"
            ],
            "type": "List (MultiwayTree.Tree a)"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " A type to keep track of datum and children.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Tree",
                [
                  "a",
                  "MultiwayTree.Forest a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "appendChild",
            "comment": " Inserts a Tree as the last child of a Tree\n",
            "type": "MultiwayTree.Tree a -> MultiwayTree.Tree a -> MultiwayTree.Tree a"
          },
          {
            "name": "children",
            "comment": " Access the children of the current tree\n",
            "type": "MultiwayTree.Tree a -> MultiwayTree.Forest a"
          },
          {
            "name": "datum",
            "comment": " Access the datum of the current tree\n",
            "type": "MultiwayTree.Tree a -> a"
          },
          {
            "name": "filter",
            "comment": " Filter the MultiwayTree. Keep only elements whose datum satisfy the predicate.\n",
            "type": "(a -> Bool) -> MultiwayTree.Tree a -> Maybe.Maybe (MultiwayTree.Tree a)"
          },
          {
            "name": "filterWithChildPrecedence",
            "comment": " Filter the MultiwayTree. If the predicate is True for a Child the entire path to the root will be part of the result Tree.\n",
            "type": "(a -> Bool) -> MultiwayTree.Tree a -> Maybe.Maybe (MultiwayTree.Tree a)"
          },
          {
            "name": "flatten",
            "comment": " Flattens a Tree into a List where the root is the first element of that list.\n",
            "type": "MultiwayTree.Tree a -> List a"
          },
          {
            "name": "foldl",
            "comment": " Reduce a Tree from the left.\n",
            "type": "(a -> b -> b) -> b -> MultiwayTree.Tree a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a Tree from the right.\n",
            "type": "(a -> b -> b) -> b -> MultiwayTree.Tree a -> b"
          },
          {
            "name": "indexedMap",
            "comment": " Same as map but the function is also applied to the index of each element (starting at zero).\n",
            "type": "(Int -> a -> b) -> MultiwayTree.Tree a -> Maybe.Maybe (MultiwayTree.Tree b)"
          },
          {
            "name": "insertChild",
            "comment": " Inserts a Tree as the first child of a Tree\n",
            "type": "MultiwayTree.Tree a -> MultiwayTree.Tree a -> MultiwayTree.Tree a"
          },
          {
            "name": "length",
            "comment": " Return the length of the Tree. Calculated recusively as datum (1) + length of children (n)\n    Since a MultiwayTree is never empty this function will never return Int < 1.\n",
            "type": "MultiwayTree.Tree a -> Int"
          },
          {
            "name": "map",
            "comment": " Map over the MultiwayTree\n",
            "type": "(a -> b) -> MultiwayTree.Tree a -> MultiwayTree.Tree b"
          },
          {
            "name": "mapListOverTree",
            "comment": " Map a Function over a List and a MultiwayTree.\n",
            "type": "(a -> b -> result) -> List a -> MultiwayTree.Tree b -> Maybe.Maybe (MultiwayTree.Tree result)"
          },
          {
            "name": "sortBy",
            "comment": " Sort values by a derived property. Does not alter the nesting structure of\n    the Tree, that is it does not move Nodes up or down levels.\n\n    (sortBy identity\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"d\" []\n            , Tree \"c\" []\n            ])\n    == (Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ])\n",
            "type": "(a -> comparable) -> MultiwayTree.Tree a -> MultiwayTree.Tree a"
          },
          {
            "name": "sortWith",
            "comment": " Sort values with a custom comparison function like:\n\n    flippedComparison a b =\n        case compare a b of\n          LT -> GT\n          EQ -> EQ\n          GT -> LT\n\n    This is also the most general sort function, allowing you\n    to define any other.\n",
            "type": "(a -> a -> Basics.Order) -> MultiwayTree.Tree a -> MultiwayTree.Tree a"
          },
          {
            "name": "tuplesOfDatumAndFlatChildren",
            "comment": " A special version of flatten which flattens a Tree into a List of Tuples like (element, [all elements in subtree])\n\n    (Tree.tuplesOfDatumAndFlatChildren\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ])\n    == [ ( \"a\", [ \"b\", \"c\", \"d\" ] ), ( \"b\", [] ), ( \"c\", [] ), ( \"d\", [] ) ]\n",
            "type": "MultiwayTree.Tree a -> List ( a, List a )"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "tripokey/elm-fuzzy",
    "version": "5.0.1",
    "docs": [
      {
        "name": "Fuzzy",
        "comment": " This is library for performing fuzzy string matching.\n\n#Customization\n@docs addPenalty, removePenalty, movePenalty\n\n# Matching\n@docs match, Result, Match, Key\n\n",
        "aliases": [
          {
            "name": "Key",
            "comment": " Represents a matching character in a Match.\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "Match",
            "comment": " Represents a matching word in hay.\nscore is the score that this Match contributes to the total score in a Result.\noffset is the index where this match starts in the hay.\nlength is the length of the match.\nkeys is a list of matching indexes within the word. The keys are relative to the offset.\n",
            "args": [],
            "type": "{ score : Int, offset : Int, length : Int, keys : List Fuzzy.Key }"
          },
          {
            "name": "Result",
            "comment": " Represents the result of a match.\nscore is the total score of the result.\nmatches is a list of matching words within the hay.\n",
            "args": [],
            "type": "{ score : Int, matches : List Fuzzy.Match }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addPenalty",
            "comment": " Create a penalty configuration that is applied to each additional character in hay.\n",
            "type": "Int -> Fuzzy.Config"
          },
          {
            "name": "match",
            "comment": " Perform fuzzy matching between a query String (needle) and a target String (hay).\nThe order of the arguments are significant. Lower score is better. Specifying some\nseparators will allow for partial matching within a sentence. The default configuration is\nmovePenalty = 100, addPenalty = 1, removePenalty = 1000.\n\n    let\n        simpleMatch config separators needle hay =\n          match config separators needle hay |> .score\n    in\n        simpleMatch [] [] \"test\" \"test\" == 0\n        simpleMatch [] [] \"tst\" \"test\" == 1\n        simpleMatch [addPenalty 10000] [] \"tst\" \"test\" == 10000\n        simpleMatch [] [] \"test\" \"tste\" == 100\n        simpleMatch [] [] \"test\" \"tst\" == 1000\n        simpleMatch [] [\"/\"] \"/u/b/s\" \"/usr/local/bin/sh\" == 5\n        simpleMatch [] [] \"/u/b/s\" \"/usr/local/bin/sh\" == 211\n        List.sortBy (simpleMatch [] [] \"hrdevi\") [\"screen\", \"disk\", \"harddrive\", \"keyboard\", \"mouse\", \"computer\"] == [\"harddrive\",\"keyboard\",\"disk\",\"screen\",\"computer\",\"mouse\"]\n",
            "type": "List Fuzzy.Config -> List String -> String -> String -> Fuzzy.Result"
          },
          {
            "name": "movePenalty",
            "comment": " Create a penalty configuration that is applied to each out of order character in hay.\n",
            "type": "Int -> Fuzzy.Config"
          },
          {
            "name": "removePenalty",
            "comment": " Create a penalty configuration that is applied to each additional character in needle.\n",
            "type": "Int -> Fuzzy.Config"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "truqu/elm-base64",
    "version": "1.0.4",
    "docs": [
      {
        "name": "Base64",
        "comment": " Library for base64 encoding and decoding of Ascii strings.\nFor the moment only works with the characters :\n\n\" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"\n\n# Method\n@docs encode, decode\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decode",
            "comment": " base64 decodes an ascii string. If the input is not a valid base64 string returns a Result.Err,\notherwise a Result.Ok String\n    decode(\"RWxtIGlzIENvb2w=\") == Result.Ok \"Elm is Cool\"\n",
            "type": "String -> Result.Result String String"
          },
          {
            "name": "encode",
            "comment": " base64 encodes an ascii string. If the input is not valid returns a Result.Err,\notherwise a Result.Ok String\n    encode(\"Elm is Cool\") == Result.Ok \"RWxtIGlzIENvb2w=\"\n",
            "type": "String -> Result.Result String String"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "truqu/elm-dictset",
    "version": "1.0.4",
    "docs": [
      {
        "name": "DictSet",
        "comment": " A set of unique values. The values can be any type, and the comparison is\ndone using a function `compare : value -> comparable`.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Sets\n@docs DictSet\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [
          {
            "name": "DictSet",
            "comment": " Represents a set of unique values together with the compare function\n",
            "args": [
              "comparable",
              "a"
            ],
            "type": "DictSet.Internal.DictSet comparable a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values that do not appear in the second set.\n",
            "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "empty",
            "comment": " Create an empty set\n",
            "type": "(a -> comparable) -> DictSet.DictSet comparable a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(a -> Bool) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest.\n",
            "type": "(a -> b -> b) -> b -> DictSet.DictSet comparable a -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest.\n",
            "type": "(a -> b -> b) -> b -> DictSet.DictSet comparable a -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates.\n",
            "type": "(a -> comparable) -> List a -> DictSet.DictSet comparable a"
          },
          {
            "name": "insert",
            "comment": " Insert a new value into a set\n",
            "type": "a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
            "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty\n",
            "type": "DictSet.DictSet comparable a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
            "type": "(b -> comparable) -> (a -> b) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set\n",
            "type": "a -> DictSet.DictSet comparable a -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\n",
            "type": "(a -> Bool) -> DictSet.DictSet comparable a -> ( DictSet.DictSet comparable a, DictSet.DictSet comparable a )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set\n",
            "type": "a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value\n",
            "type": "(a -> comparable) -> a -> DictSet.DictSet comparable a"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set\n",
            "type": "DictSet.DictSet comparable a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list.\n",
            "type": "DictSet.DictSet comparable a -> List a"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values.\n",
            "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "vito/elm-ansi",
    "version": "8.0.1",
    "docs": [
      {
        "name": "Ansi.Log",
        "comment": " Log interprets a stream of text and ANSI escape codes.\n\n@docs init, update, view\n\n@docs Model, LineDiscipline, Line, Chunk, CursorPosition, Style\n",
        "aliases": [
          {
            "name": "Chunk",
            "comment": " A blob of text paired with the style that was configured at the time.\n",
            "args": [],
            "type": "{ text : String, style : Ansi.Log.Style }"
          },
          {
            "name": "CursorPosition",
            "comment": " The coordinate in the window where text will be printed.\n",
            "args": [],
            "type": "{ row : Int, column : Int }"
          },
          {
            "name": "Line",
            "comment": " A list of arbitrarily-sized chunks of output.\n",
            "args": [],
            "type": "( List Ansi.Log.Chunk, Int )"
          },
          {
            "name": "Model",
            "comment": " Model is populated by parsing ANSI character sequences and escape codes\nvia `update`.\n\n* `lines` contains all of the output that's been parsed\n* `position` is the current position of the cursor\n* `style` is the style to be applied to any text that's printed\n* `remainder` is a partial ANSI escape sequence left around from an incomplete\n  segment from the stream\n",
            "args": [],
            "type": "{ lineDiscipline : Ansi.Log.LineDiscipline , lines : Array.Array Ansi.Log.Line , position : Ansi.Log.CursorPosition , savedPosition : Maybe.Maybe Ansi.Log.CursorPosition , style : Ansi.Log.Style , remainder : String }"
          },
          {
            "name": "Style",
            "comment": " The current presentation state for any text that's printed.\n",
            "args": [],
            "type": "{ foreground : Maybe.Maybe Ansi.Color , background : Maybe.Maybe Ansi.Color , bold : Bool , faint : Bool , italic : Bool , underline : Bool , blink : Bool , inverted : Bool }"
          }
        ],
        "types": [
          {
            "name": "LineDiscipline",
            "comment": " How to interpret linebreaks.\n\n* `Raw`: interpret `\\n` as just `\\n`, i.e. move down a line, retaining the\n  cursor column\n* `Cooked`: interpret `\\n` as `\\r\\n`, i.e. move down a line and go to the first\n  column\n",
            "args": [],
            "cases": [
              [
                "Raw",
                []
              ],
              [
                "Cooked",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Construct an empty model.\n",
            "type": "Ansi.Log.LineDiscipline -> Ansi.Log.Model"
          },
          {
            "name": "update",
            "comment": " Parse and interpret a chunk of ANSI output.\n\nTrailing partial ANSI escape codes will be prepended to the chunk in the next\ncall to `update`.\n",
            "type": "String -> Ansi.Log.Model -> Ansi.Log.Model"
          },
          {
            "name": "view",
            "comment": " Render the model's logs as HTML.\n\nWraps everything in <pre>, with a <div> for each Line, and <span> with styling\nand classes for each Chunk.\n\nThe `span` elements will have the following attributes:\n\n* `style=\"font-weight: bold|normal\"`\n* `class=\"ansi-COLOR-fg ansi-COLOR-bg ansi-bold\"`\n\n...where each class is optional, and `COLOR` is one of:\n\n* `black`\n* `red`\n* `green`\n* `yellow`\n* `blue`\n* `magenta`\n* `cyan`\n* `white`\n* `bright-black`\n* `bright-red`\n* `bright-green`\n* `bright-yellow`\n* `bright-blue`\n* `bright-magenta`\n* `bright-cyan`\n* `bright-white`\n\nIf the chunk is inverted, the `-fg` and `-bg` classes will have their colors\nswapped. If the chunk is bold, the `ansi-bold` class will be present.\n",
            "type": "Ansi.Log.Model -> Html.Html x"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Ansi",
        "comment": " This library primarily exposes the `parse` function and the types that it\nwill yield.\n\n@docs parse, parseInto\n\n@docs Action, Color, EraseMode\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " The events relevant to interpreting the stream.\n\n* `Print` is a chunk of text which should be interpreted with the style implied\n  by the preceding actions (i.e. `[SetBold True, Print \"foo\"]`) should yield a\n  bold `foo`\n* `Remainder` is a partial ANSI escape sequence, returned at the end of the\n  actions if it was cut off. The next string passed to `parse` should have this\n  prepended to it.\n* The rest are derived from their respective ANSI escape sequences.\n",
            "args": [],
            "cases": [
              [
                "Print",
                [
                  "String"
                ]
              ],
              [
                "Remainder",
                [
                  "String"
                ]
              ],
              [
                "SetForeground",
                [
                  "Maybe.Maybe Ansi.Color"
                ]
              ],
              [
                "SetBackground",
                [
                  "Maybe.Maybe Ansi.Color"
                ]
              ],
              [
                "SetBold",
                [
                  "Bool"
                ]
              ],
              [
                "SetFaint",
                [
                  "Bool"
                ]
              ],
              [
                "SetItalic",
                [
                  "Bool"
                ]
              ],
              [
                "SetUnderline",
                [
                  "Bool"
                ]
              ],
              [
                "SetBlink",
                [
                  "Bool"
                ]
              ],
              [
                "SetInverted",
                [
                  "Bool"
                ]
              ],
              [
                "Linebreak",
                []
              ],
              [
                "CarriageReturn",
                []
              ],
              [
                "CursorUp",
                [
                  "Int"
                ]
              ],
              [
                "CursorDown",
                [
                  "Int"
                ]
              ],
              [
                "CursorForward",
                [
                  "Int"
                ]
              ],
              [
                "CursorBack",
                [
                  "Int"
                ]
              ],
              [
                "CursorPosition",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "CursorColumn",
                [
                  "Int"
                ]
              ],
              [
                "EraseDisplay",
                [
                  "Ansi.EraseMode"
                ]
              ],
              [
                "EraseLine",
                [
                  "Ansi.EraseMode"
                ]
              ],
              [
                "SaveCursorPosition",
                []
              ],
              [
                "RestoreCursorPosition",
                []
              ]
            ]
          },
          {
            "name": "Color",
            "comment": " The colors applied to the foreground/background.\n",
            "args": [],
            "cases": [
              [
                "Black",
                []
              ],
              [
                "Red",
                []
              ],
              [
                "Green",
                []
              ],
              [
                "Yellow",
                []
              ],
              [
                "Blue",
                []
              ],
              [
                "Magenta",
                []
              ],
              [
                "Cyan",
                []
              ],
              [
                "White",
                []
              ],
              [
                "BrightBlack",
                []
              ],
              [
                "BrightRed",
                []
              ],
              [
                "BrightGreen",
                []
              ],
              [
                "BrightYellow",
                []
              ],
              [
                "BrightBlue",
                []
              ],
              [
                "BrightMagenta",
                []
              ],
              [
                "BrightCyan",
                []
              ],
              [
                "BrightWhite",
                []
              ]
            ]
          },
          {
            "name": "EraseMode",
            "comment": " Method to erase the display or line.\n",
            "args": [],
            "cases": [
              [
                "EraseToBeginning",
                []
              ],
              [
                "EraseToEnd",
                []
              ],
              [
                "EraseAll",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parse",
            "comment": " Convert an arbitrary String of text into a sequence of actions.\n\nIf the input string ends with a partial ANSI escape sequence, it will be\nyielded as a `Remainder` action, which should then be prepended to the next\ncall to `parse`.\n",
            "type": "String -> List Ansi.Action"
          },
          {
            "name": "parseInto",
            "comment": " Update a structure with actions parsed out of the given string.\n",
            "type": "a -> (Ansi.Action -> a -> a) -> String -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "w0rm/elm-slice-show",
    "version": "3.0.4",
    "docs": [
      {
        "name": "SliceShow",
        "comment": " This module helps you start your SliceShow application.\n# Start your Application\n@docs Config, init, show, setView, setUpdate, setSubscriptions\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Slideshow Config type ",
            "args": [
              "a",
              "b"
            ],
            "type": "SliceShow.Protected.Protected (SliceShow.PrivateConfig a b)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "init",
            "comment": " Init Model from the list of slides ",
            "type": "List (SliceShow.Slide.Slide a b) -> SliceShow.Config a b"
          },
          {
            "name": "setSubscriptions",
            "comment": " Set inputs for the custom content ",
            "type": "(a -> Platform.Sub.Sub b) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "setUpdate",
            "comment": " Set update for the custom content ",
            "type": "(b -> a -> ( a, Platform.Cmd.Cmd b )) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "setView",
            "comment": " Set view for the custom content ",
            "type": "(a -> Html.Html b) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "show",
            "comment": " Start the SliceShow with your `slides`:\n    app = show (init slides)\n    main = app.html\n    port tasks : Signal (Task.Task Never ())\n    port tasks = app.tasks\n",
            "type": "SliceShow.Config a b -> Platform.Program Basics.Never"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "SliceShow.Slide",
        "comment": " This module helps you define a slide\n@docs Slide, slide\n",
        "aliases": [
          {
            "name": "Slide",
            "comment": " Slide type ",
            "args": [
              "a",
              "b"
            ],
            "type": "SliceShow.Protected.Protected (SliceShow.SlideData.SlideData a b)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "slide",
            "comment": " Create new slide from a list of content items ",
            "type": "List (SliceShow.Content.Content a b) -> SliceShow.Slide.Slide a b"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      },
      {
        "name": "SliceShow.Content",
        "comment": " This module helps you define Slide content\n@docs Content, item, container, custom, hide\n",
        "aliases": [
          {
            "name": "Content",
            "comment": " Content type ",
            "args": [
              "a",
              "b"
            ],
            "type": "SliceShow.ContentData.ContentData a b"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "container",
            "comment": " A group of content items ",
            "type": "(List (Html.Html b) -> Html.Html b) -> List (SliceShow.Content.Content a b) -> SliceShow.Content.Content a b"
          },
          {
            "name": "custom",
            "comment": " Custom content item ",
            "type": "a -> SliceShow.Content.Content a b"
          },
          {
            "name": "hide",
            "comment": " Hide content ",
            "type": "SliceShow.Content.Content a b -> SliceShow.Content.Content a b"
          },
          {
            "name": "item",
            "comment": " Single content item ",
            "type": "Html.Html b -> SliceShow.Content.Content a b"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "willnwhite/bigratio",
    "version": "1.1.0",
    "docs": [
      {
        "name": "BigRatio",
        "comment": " A module providing a ratio type for big rational numbers. Forked from Izzy Meckler's [Ratio](https://github.com/imeckler/ratio) and dependent on Javier Casas' [elm-integer](https://github.com/javcasas/elm-integer). will@willwhite.website\n\n# Types\n@docs BigRational\n\n# Introduction\n@docs over\n\n# From/To\n@docs fromInt, fromString, toFloat, toDecimal\n\n# Operations\n@docs add, multiply, divide, negate\n\n# Elimination\n@docs numerator, denominator, split\n\n# Util\n@docs gcd\n\n# Value\n@docs isNegative\n\n# Common numbers\n@docs zero\n\n",
        "aliases": [],
        "types": [
          {
            "name": "BigRational",
            "comment": " Arbitrary (infinite digits) precision fractional numbers. Think of\n    it as the length of a rigid bar that you've constructed from a bunch of\n    initial bars of the same fixed length\n    by the operations of gluing bars together and shrinking a\n    given bar so that an integer number of copies of it glues together to\n    make another given bar.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Addition. It's like gluing together two bars of the given lengths.\n",
            "type": "BigRatio.BigRational -> BigRatio.BigRational -> BigRatio.BigRational"
          },
          {
            "name": "denominator",
            "comment": " ",
            "type": "BigRatio.BigRational -> Data.Integer.Integer"
          },
          {
            "name": "divide",
            "comment": " Division. It's sort of like multiplication!\n",
            "type": "BigRatio.BigRational -> BigRatio.BigRational -> BigRatio.BigRational"
          },
          {
            "name": "fromInt",
            "comment": " `fromInt x = over x 1`\n",
            "type": "Int -> BigRatio.BigRational"
          },
          {
            "name": "fromString",
            "comment": "\n",
            "type": "String -> BigRatio.BigRational"
          },
          {
            "name": "gcd",
            "comment": " The biggest number that divides both arguments (the greatest common divisor).\n",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "isNegative",
            "comment": " ",
            "type": "BigRatio.BigRational -> Bool"
          },
          {
            "name": "multiply",
            "comment": " Multiplication. `multiply x (c / d)` is the length of the bar that you'd get\n   if you glued `c` copies of a bar of length `x` end-to-end and then shrunk it\n   down enough so that `d` copies of the shrunken bar would fit in the big\n   glued bar.\n",
            "type": "BigRatio.BigRational -> BigRatio.BigRational -> BigRatio.BigRational"
          },
          {
            "name": "negate",
            "comment": " This doesn't really fit with the bar metaphor but this is multiplication by `-1`.\n",
            "type": "BigRatio.BigRational -> BigRatio.BigRational"
          },
          {
            "name": "numerator",
            "comment": " ",
            "type": "BigRatio.BigRational -> Data.Integer.Integer"
          },
          {
            "name": "over",
            "comment": " `over x y` is like `x / y`.\n",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> BigRatio.BigRational"
          },
          {
            "name": "split",
            "comment": " `split x = (numerator x, denominator x)`\n",
            "type": "BigRatio.BigRational -> ( Data.Integer.Integer, Data.Integer.Integer )"
          },
          {
            "name": "toDecimal",
            "comment": " 1 -> (BigRatio 1 4) -> \"0.2\"\n    100 -> (BigRatio 1 4) -> \"0.25\"\n",
            "type": "Int -> BigRatio.BigRational -> String"
          },
          {
            "name": "toFloat",
            "comment": " ",
            "type": "BigRatio.BigRational -> Float"
          },
          {
            "name": "zero",
            "comment": " ",
            "type": "BigRatio.BigRational"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "wuct/elm-charts",
    "version": "1.0.1",
    "docs": [
      {
        "name": "LineChart",
        "comment": "\n\n# Line Chart\n@docs lineChart\n\n# Attributes\n@docs width, color\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set line color.\n",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "lineChart",
            "comment": " Create a line chart.\n\n    import Svg exposing (svg)\n    import Svg.Attributes exposing (width, height)\n    import Chart exposing (Scale, Data)\n    import LineChart exposing (lineChart, color, width)\n\n\n    data : Data msg\n    data =\n      [\n        (1, 22.2, []),\n        (2, 34, []),\n        (3, 56, []),\n        (4, 62, []),\n        (5, 77, [])\n      ]\n\n\n    xScale : Scale\n    xScale x =\n      20 + x * 20\n\n\n    yScale : Scale\n    yScale y =\n      400 - y * 3\n\n\n    main =\n      svg\n        [\n          Svg.Attributes.width \"600\",\n          Svg.Attributes.height \"400\"\n        ]\n        [\n          lineChart\n            [\n              LineChart.color \"#9F7088\",\n              LineChart.width \"10\"\n            ]\n            { data = data\n            , xScale = xScale\n            , yScale = yScale\n            }\n        ]\n\n",
            "type": "List (Svg.Attribute msg) -> Chart.ChartProps msg -> Svg.Svg msg"
          },
          {
            "name": "width",
            "comment": " Set line width.\n",
            "type": "String -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "BarChart",
        "comment": "\n\n# Bar Chart\n@docs barChart\n\n# Attributes\n@docs width, color\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "barChart",
            "comment": " Create a bar chart.\n\n    import Svg exposing (svg)\n    import Svg.Attributes exposing (width, height)\n    import Chart exposing (Scale, Data)\n    import BarChart exposing (barChart, color, width)\n\n\n    data : Data msg\n    data =\n      [\n        (1, 22.2, []),\n        (2, 34, []),\n        (3, 56, []),\n        (4, 62, []),\n        (5, 77, [])\n      ]\n\n\n    xScale : Scale\n    xScale x =\n      20 + x * 20\n\n\n    yScale : Scale\n    yScale y =\n      400 - y * 3\n\n\n    main =\n      svg\n        [\n          Svg.Attributes.width \"600\",\n          Svg.Attributes.height \"400\"\n        ]\n        [\n          barChart\n            [\n              BarChart.color \"#9F7088\",\n              BarChart.width \"10\"\n            ]\n            { data = data\n            , xScale = xScale\n            , yScale = yScale\n            }\n        ]\n\n",
            "type": "List (Svg.Attribute msg) -> Chart.ChartProps msg -> Svg.Svg msg"
          },
          {
            "name": "color",
            "comment": " Set bar color.\n",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "width",
            "comment": " Set bar width.\n",
            "type": "String -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "ScatterPlot",
        "comment": "\n\n# Scatter Plot\n@docs scatterPlot\n\n# Attributes\n@docs size, color\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set dot color.\n",
            "type": "String -> Svg.Attribute msg"
          },
          {
            "name": "scatterPlot",
            "comment": " Create a scatter plot.\n\n    import Svg exposing (svg)\n    import Svg.Attributes exposing (width, height)\n    import Chart exposing (Scale, Data)\n    import ScatterPlot exposing (scatterPlot, color, size)\n\n\n    data : Data msg\n    data =\n      [\n        (1, 22.2, []),\n        (2, 34, []),\n        (3, 56, []),\n        (4, 62, []),\n        (5, 77, [])\n      ]\n\n\n    xScale : Scale\n    xScale x =\n      20 + x * 20\n\n\n    yScale : Scale\n    yScale y =\n      400 - y * 3\n\n\n    main =\n      svg\n        [\n          Svg.Attributes.width \"600\",\n          Svg.Attributes.height \"400\"\n        ]\n        [\n          scatterPlot\n            [\n              ScatterPlot.color \"#9F7088\",\n              ScatterPlot.size \"4\"\n            ]\n            { data = data\n            , xScale = xScale\n            , yScale = yScale\n            }\n        ]\n\n",
            "type": "List (Svg.Attribute msg) -> Chart.ChartProps msg -> Svg.Svg msg"
          },
          {
            "name": "size",
            "comment": " Set dot size.\n",
            "type": "String -> Svg.Attribute msg"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      },
      {
        "name": "Chart",
        "comment": "\n\n# Type\n@docs Datum, Data, Scale, ChartProps\n\n",
        "aliases": [
          {
            "name": "ChartProps",
            "comment": " Props of charts.\n",
            "args": [
              "msg"
            ],
            "type": "{ data : Chart.Data msg, xScale : Chart.Scale, yScale : Chart.Scale }"
          },
          {
            "name": "Data",
            "comment": " List of Datum.\n\n    import Svg.Attributes exposing (opacity)\n    import Chart exposing (Data)\n    import BarChart exposing (color)\n\n\n    data : Data msg\n    data =\n      [\n        (1, 22.2, []),\n        (2, 34, []),\n        (3, 56, [opacity \"0.3\"]),\n        (4, 62, [color \"#7F91B8\"]),\n        (5, 77, [])\n      ]\n\n",
            "args": [
              "msg"
            ],
            "type": "List (Chart.Datum msg)"
          },
          {
            "name": "Datum",
            "comment": " The first value is x-coordinate and the second value is y-coordinate.\nThe third value is a list of customized svg attributes.\n",
            "args": [
              "msg"
            ],
            "type": "( Float, Float, List (Svg.Attribute msg) )"
          },
          {
            "name": "Scale",
            "comment": " A function which maps a coordinate to a actual position in `<svg />`.\n",
            "args": [],
            "type": "Float -> Float"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "xarvh/elm-slides",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Slides",
        "comment": "\n# Main API\n@docs app, html, htmlFragments, md, mdFragments\n\n# Options\n@docs Options, slidesDefaultOptions, SlideAttributes, FragmentAttributes, SlideAnimation, SlideMotionDirection, SlideRelativeOrder\n\n# Elm Architecture\n@docs Message, Model, program\n",
        "aliases": [
          {
            "name": "FragmentAttributes",
            "comment": " Shorthand for the function type used to customise fragment animation.\n```\nfragmentAttributesOpacity : FragmentAttributes\nfragmentAttributesOpacity completion =\n    [ style\n        [ (\"opacity\", toString completion) ]\n    ]\n```\n",
            "args": [],
            "type": "Float -> List (Html.Attribute Slides.Message)"
          },
          {
            "name": "Model",
            "comment": "\nThe Slides model.\nContains all the state of the app, including the slides list itself, the current configuration options\nand all the information needed for the slides and fragments animations.\n",
            "args": [],
            "type": "{ slides : Array.Array Slides.Slide , options : Slides.Options , windowSize : Window.Size , isPaused : Bool , slideAnimation : SmoothAnimator.Model , fragmentAnimation : SmoothAnimator.Model }"
          },
          {
            "name": "Options",
            "comment": "\nConfiguration options:\n\n* `slidePixelSize` &mdash; `width` and `height` geometry of the slide area, in pixel.\n   While the slide will be scaled to the window size, the internal coordinates of the slide will refer to these values.\n\n* `easingFunction` &mdash; Any f : [0, 1] -> [0, 1]\n  The standard ones are available in Elm's [easing-functions](http://package.elm-lang.org/packages/elm-community/easing-functions/1.0.1/).\n\n* `slideAttributes` &mdash; The function used to customize the slide animation.\n  It takes the slide state and motion as argument, and produces a list of DOM attributes (usually just the `style`\n  attribute, but you can add `class` or anything else you need) that can be used to animate the slides.\n\n* `fragmentAttributes` &mdash; the function used to animate a fragment within a slide.\n  It takes the fragment completion from 0 to 1 (0 being invisible and 1 being fully visible) and produces a list of Dom attributes\n  (as above, usually just the `style` attribute will suffice).\n\n* `animationDuration` &mdash; the `Time` duration of a slide or fragment animation.\n\n* `keyCodesToMessage` &mdash; a map of all Messages and the key codes that can trigger them.\n",
            "args": [],
            "type": "{ slidePixelSize : { height : Int, width : Int } , easingFunction : Float -> Float , slideAttributes : Slides.SlideAttributes , fragmentAttributes : Slides.FragmentAttributes , animationDuration : Time.Time , keyCodesToMessage : List { message : Slides.Message, keyCodes : List Int } }"
          },
          {
            "name": "SlideAttributes",
            "comment": " Shorthand for the function type used to animate the slides.\nThe first argument describes the slide state: whether it is still or moving, and if the latter\nin which direction and how much movement.\n\n```\nslideAttributesOpacity : SlideAttributes\nslideAttributesOpacity slideAnimation =\n    let\n        opacity =\n            case slideAnimation of\n                Still -> 1\n                Moving direction order completion ->\n                    case direction of\n                        Incoming -> completion\n                        Outgoing -> 1 - completion\n    in\n        [ style\n            [ (\"opacity\", toString opacity) ]\n        ]\n```\n",
            "args": [],
            "type": "Slides.SlideAnimation -> List (Html.Attribute Slides.Message)"
          }
        ],
        "types": [
          {
            "name": "Message",
            "comment": " The Elm-architecture Msgs.\n",
            "args": [],
            "cases": [
              [
                "Noop",
                []
              ],
              [
                "First",
                []
              ],
              [
                "Last",
                []
              ],
              [
                "Next",
                []
              ],
              [
                "Prev",
                []
              ],
              [
                "AnimationTick",
                [
                  "Time.Time"
                ]
              ],
              [
                "PauseAnimation",
                []
              ],
              [
                "WindowResizes",
                [
                  "Window.Size"
                ]
              ]
            ]
          },
          {
            "name": "SlideAnimation",
            "comment": " Tells you what a visible slide is doing.\n    The `Float` used by the `Moving` constructor is for the animation completion that runs between 0 and 1,\n    0 when the animation hasn't yet started and 1 when it is completed.\n",
            "args": [],
            "cases": [
              [
                "Still",
                []
              ],
              [
                "Moving",
                [
                  "Slides.SlideMotionDirection",
                  "Slides.SlideRelativeOrder",
                  "Float"
                ]
              ]
            ]
          },
          {
            "name": "SlideMotionDirection",
            "comment": " This is used to tell the slideAttributes function whether it is running on\n    the slide that's coming into view or the one that's going away.\n",
            "args": [],
            "cases": [
              [
                "Incoming",
                []
              ],
              [
                "Outgoing",
                []
              ]
            ]
          },
          {
            "name": "SlideRelativeOrder",
            "comment": "\n Usually during an animation there will be two visible slides:\n this tells you the relative position of the two slides within the normal\n slide sequence.\n\n If you navigate from one slide to the next, the Outgoing slide will be\n the slide with the SmallerIndex, and the Incoming slide will be the slide\n with the LargerIndex.\n\n If instead you navigate backwards, from one slide to the previous, it\n will be the opposite.\n",
            "args": [],
            "cases": [
              [
                "SmallerIndex",
                []
              ],
              [
                "LargerIndex",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "app",
            "comment": "\nDoes all the wiring for you, returning a `Program` ready to run.\n```\nmain = app\n    slidesDefaultOptions\n    [ slide1\n    , slide2\n    , ...\n    ]\n```\n",
            "type": "Slides.Options -> List Slides.Slide -> Platform.Program Basics.Never"
          },
          {
            "name": "html",
            "comment": "\nCreates a single slide from a DOM node.\n\nCan be used to create custom slides constructors (yes, it is used internally by `md` and `mdMarkdown`).\n```\nimport Html exposing (..)\n\nslide1 = html <|\n     div\n        []\n        [ h1 [] [ text \"Hello, I am the slide header\" ]\n        , div [] [ text \"and I am some content\" ]\n        ]\n```\n",
            "type": "Html.Html Slides.Message -> Slides.Slide"
          },
          {
            "name": "htmlFragments",
            "comment": "\nCreates a single slide made by several fragments, which are displayed in sequence, one after the other.\n```\nslide2 = htmlFragments\n    [ div [] [ text \"I am always visible when the slide is visible\" ]\n    , div [] [ text \"Then I appear\"\n    , div [] [ text \"and then I appear!\"\n    ]\n```\n",
            "type": "List (Html.Html Slides.Message) -> Slides.Slide"
          },
          {
            "name": "md",
            "comment": "\nCreates a slide from a Markdown string.\n\nIt uses [elm-markdown](http://package.elm-lang.org/packages/evancz/elm-markdown/3.0.0/)\nso you can enable syntax highlightning by including [highlight.js](https://highlightjs.org/).\n\nIt automatically removes indentation from multi-line strings.\n\n```\nslide3 = md\n    \"\"\"\n    # Hello! I am a header\n    *and I am emph!*\n    \"\"\"\n```\n",
            "type": "String -> Slides.Slide"
          },
          {
            "name": "mdFragments",
            "comment": "\nTurns several Markdown strings into a single slide made by several fragments,\nwhich will appear one after another:\n```\nslide4 = mdFragments\n    [ \"I am always visible\"\n    , \"Then I appear\"\n    , \"and Then I\"\n    ]\n```\n",
            "type": "List String -> Slides.Slide"
          },
          {
            "name": "program",
            "comment": "\nThis provides you with all the standard functions used in the Elm architecture (`init`, `update`, `view`, `subscriptions`)\nplus the one used for URL navigation (`urlUpdate`).\n\nThis allows you to embed a Slides app inside another Elm app or, more importantly, to have full control of how the app behaves.\n",
            "type": "Slides.Options -> List Slides.Slide -> { init : Navigation.Location -> ( Slides.Model, Platform.Cmd.Cmd Slides.Message ) , update : Slides.Message -> Slides.Model -> ( Slides.Model, Platform.Cmd.Cmd Slides.Message ) , urlUpdate : Navigation.Location -> Slides.Model -> ( Slides.Model, Platform.Cmd.Cmd Slides.Message ) , view : Slides.Model -> Html.Html Slides.Message , subscriptions : Slides.Model -> Platform.Sub.Sub Slides.Message }"
          },
          {
            "name": "slidesDefaultOptions",
            "comment": " Default configuration options.\n    It is named `slidesDefaultOptions` instead than just `defaultOptions` because you can't use `{ Slides.defaultOptions | whatever... }`\n    so at least it is possible to `import Slides exposing (slidesDefaultOptions)` that does not pollute the scope.\n\n    ```\n    { slidePixelSize =\n        { height = 700\n        , width = 960\n        }\n\n    , easingFunction =\n        Ease.inOutCubic\n\n    , animationDuration =\n        500 * Time.millisecond\n\n    , slideAttributes =\n        slideAttributesScroll\n\n    , fragmentAttributes =\n        fragmentAttributesOpacity\n\n    , keyCodesToMessage =\n        [   { message = First\n            , keyCodes = [36] -- Home\n            }\n        ,   { message = Last\n            , keyCodes = [35] -- End\n            }\n        ,   { message = Next\n            , keyCodes = [13, 32, 39, 76, 68] -- Enter, Spacebar, Arrow Right, l, d\n            }\n        ,   { message = Prev\n            , keyCodes = [37, 72, 65] -- Arrow Left, h, a\n            }\n        ,   { message = PauseAnimation\n            , keyCodes = [80]\n            }\n        ]\n    }\n    ```\n",
            "type": "Slides.Options"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  },
  {
    "name": "yotamDvir/elm-pivot",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Pivot",
        "comment": " A pivot is a list upgraded with a center and sides. However, a pivot\ncan never be empty, so it is better to think of it an upgraded cons list.\n\nIn this library, we suffix functions with letters to denote their context,\nas follows.\n\n* The __C__enter\n* Both __S__ides\n* The __L__eft side\n* The __R__ight side\n* __A__ll the members\n\nThis way you can guess a function's name easily.\nSee the different `map*` functions.\n\nFor example, `getL` gets the left side of a pivot.\n\n# Type\n@docs Pivot\n\n# To & Fro\nSo you want to use a pivot? Better know how to create one, and get stuff back!\n\n## Create\n@docs fromList, fromCons, pure\n\n## Get\n@docs getC, getL, getR, getA, hasL, hasR\n\n# Movement\nHandle the position of the center.\nThese functions do not mutate the underlying list.\nThat is, if you apply functions fromList here and then apply `getA`,\nyou'd get the same thing you would by applying `getA` beforehand.\n\n## Position\n@docs lengthL, lengthR, lengthA\n\n## Momentum\n@docs goR, goL, goBy, goTo, goToStart, goToEnd\n\n## Find\n@docs firstWith, lastWith, findR, findL, findCR, findCL\n\n# Modify\nNow we start seeing functions that can actually change the underlying list.\n\n## Set\n@docs setC, setL, setR\n\n## Add\n@docs addL, addR, addGoL, addGoR\n\n## Remove\nRemoving is not guaranteed to work,\nfor the simple reason that a pivot cannot be empty.\n@docs removeGoL, removeGoR\n\n## Switch\nSwitch places with other members.\n@docs switchL, switchR\n\n## Sort\n@docs sort, sortWith\n\n# Maps\nLists can be mapped over, and so can pivots.\nHowever, since a pivot is made up of three distinct objects at any time,\nit makes sense that you may want to apply different transformations to\nthe different objects.\n\n## Maps\n@docs mapCLR, mapCRL, mapCS, mapA\n\n## Constraint Maps\nIf you want to map only over some of the pivot,\nthen you must retain the type.\n@docs mapC, mapS, mapL, mapR\n\n## As a whole\nSome `List a -> List a` functions cannot be made from `a -> a` functions.\nThis is why these maps may be of importance.\nJust add `'` to a `map*` function to use functions on lists instead of values.\n@docs mapCLR', mapCRL', mapCS', mapS', mapL', mapR'\n\n## Special\n@docs apply\n\n# Utilities\n@docs reverse, mirror, mirrorM, assert, withRollback\n",
        "aliases": [
          {
            "name": "Pivot",
            "comment": " Pivot is an opaque data type.\n",
            "args": [
              "a"
            ],
            "type": "Pivot.Types.Pivot a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addGoL",
            "comment": " Add a member to the left of the center and immediately move left.\nWe know that `addL >> goL` cannot really fail, but it still results in a\n`Maybe` type. This avoids this issue.\n\n    addGoL >> Just == addL >> goL\n",
            "type": "a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "addGoR",
            "comment": " Add a member to the right of the center and immediately move right.\n",
            "type": "a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "addL",
            "comment": " Add a member to the left of the center\n",
            "type": "a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "addR",
            "comment": " Add a member to the right of the center\n",
            "type": "a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "apply",
            "comment": " Apply functions in a pivot on values in another Pivot.\nThe center gets applied to the center,\nand each side gets applied to each side.\nBut how does a list of functions get applied on a list of values?\nWell, each function maps over the complete list of values,\nand then all the lists created from these applications are concatinated.\n\n    mapCLR onC onL onR == (pure onC |> setL [onL] |> setR [onR] |> apply)\n",
            "type": "Pivot.Pivot (a -> b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "assert",
            "comment": " Takes a pivot full of possible values, and realizes it only if all\nthe values are real. That is, if all the values are `Just a`, then we get\n`Just (Pivot a)`. Otherwise, we get `Nothing`.\nThis is great for composing with the different map functions.\nFor example, you could define\n\n    mapAM : (a -> Maybe b) -> Pivot a -> Maybe (Pivot b)\n    mapAM f = mapA f >> assert\n",
            "type": "Pivot.Pivot (Maybe.Maybe a) -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "findCL",
            "comment": " Like `findL`, but checks the center first as well.\n\n_Fails if and only if there are no such members._\n",
            "type": "(a -> Bool) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "findCR",
            "comment": " Like `findR`, but checks the center first as well.\n\n_Fails if and only if there are no such members._\n\n    firstWith == \\pred -> goToStart >> findCR pred\n",
            "type": "(a -> Bool) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "findL",
            "comment": " Find the first member to the center's left satisfying some predicate.\n\n_Fails if and only if there are no such members._\n",
            "type": "(a -> Bool) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "findR",
            "comment": " Find the first member to the center's right satisfying some predicate.\n\n_Fails if and only if there are no such members._\n\n    findR ((==) 3) (fromCons 1 [2..4]) == (pure 3 |> setL [1, 2] |> setR [4])\n",
            "type": "(a -> Bool) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "firstWith",
            "comment": " Find the first member of a pivot satisfying some predicate.\n\n_Fails if and only if there are no such members._\n",
            "type": "(a -> Bool) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "fromCons",
            "comment": " Like `fromList`, but by specifying the center explicitly, it cannot fail.\n\n    getC (fromCons \"well\" [\"hello\", \"world\"]) == \"well\"\n    getL (fromCons \"well\" [\"hello\", \"world\"]) == []\n    getR (fromCons \"well\" [\"hello\", \"world\"]) == [\"hello\", \"world\"]\n    Just (fromCons 1 [2..4]) == fromList [1..4]\n",
            "type": "a -> List a -> Pivot.Pivot a"
          },
          {
            "name": "fromList",
            "comment": " Make a pivot fromList a list with empty left side.\n\n_Fails if and only if the list given is empty._\n\n    fromList [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "getA",
            "comment": " Make the pivot into a list.\n",
            "type": "Pivot.Pivot a -> List a"
          },
          {
            "name": "getC",
            "comment": " Get the center member.\n\n    pure >> getC == identity\n",
            "type": "Pivot.Pivot a -> a"
          },
          {
            "name": "getL",
            "comment": " Get the left side list.\n",
            "type": "Pivot.Pivot a -> List a"
          },
          {
            "name": "getR",
            "comment": " Get the right side list.\n",
            "type": "Pivot.Pivot a -> List a"
          },
          {
            "name": "goBy",
            "comment": " Move right by some number of steps. Negative number moves left instead.\n\n_Fails if and only if the movement goes out of bounds._\n",
            "type": "Int -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "goL",
            "comment": " Move one step left.\n\n_Fails if and only if the left side is empty._\n\n    goL (fromCons 1 [2..4]) == Nothing\n    withRollback goL (fromCons 1 [2..4]) == fromCons 1 [2..4]\n",
            "type": "Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "goR",
            "comment": " Move one step right.\n\n_Fails if and only if the right side is empty._\n\nTip: You can avoid the failure using `withRollback`,\nand instead have a possible no-op. See __Utilities__.\n\n    fromCons 1 [2..4] |> goR /= Nothing\n",
            "type": "Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "goTo",
            "comment": " Go to a specific position fromList the left. Starts with 0.\n\n_Fails if and only if the position given doesn't exist._\n",
            "type": "Int -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "goToEnd",
            "comment": " Go to starting position.\n\n    goToEnd >> lengthR == 0\n",
            "type": "Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "goToStart",
            "comment": " Go to starting position.\n\n    goToStart >> lengthL == 0\n",
            "type": "Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "hasL",
            "comment": " Check if the left side is not empty.\n",
            "type": "Pivot.Pivot a -> Bool"
          },
          {
            "name": "hasR",
            "comment": " Check if the right side is not empty.\n",
            "type": "Pivot.Pivot a -> Bool"
          },
          {
            "name": "lastWith",
            "comment": " Find the last member of a pivot satisfying some predicate.\n\n_Fails if and only if there are no such members._\n",
            "type": "(a -> Bool) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "lengthA",
            "comment": " Length of the pivot.\n\n    lengthA == \\p -> lengthL p + 1 + lengthR p\n",
            "type": "Pivot.Pivot a -> Int"
          },
          {
            "name": "lengthL",
            "comment": " Position fromList the left side. Starts with 0.\n",
            "type": "Pivot.Pivot a -> Int"
          },
          {
            "name": "lengthR",
            "comment": " Position fromList the right side. Starts with 0.\n",
            "type": "Pivot.Pivot a -> Int"
          },
          {
            "name": "mapA",
            "comment": " Like `mapCS`, but you provide one function for all members.\nThis is exactly like `List.map` for the underlying list.\n\n    mapA ((==) 3) (fromCons 1 [2..4]) == fromCons False [False, True, False]\n",
            "type": "(a -> b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapC",
            "comment": " Like `mapA`, but only the center is affected.\n",
            "type": "(a -> a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mapCLR",
            "comment": " Provide functions that control what happens to the center,\nthe left members and the right member separately,\nand get a function that acts on pivots.\n",
            "type": "(a -> b) -> (a -> b) -> (a -> b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapCLR'",
            "comment": " Like `mapCLR`, but the functions for the left and right act on the\nlists as a whole, and not on each member separately.\n",
            "type": "(a -> b) -> (List a -> List b) -> (List a -> List b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapCRL",
            "comment": " Like `mapCLR`, but provide the function for the right before the left.\n",
            "type": "(a -> b) -> (a -> b) -> (a -> b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapCRL'",
            "comment": " See `mapCLR'`.\n",
            "type": "(a -> b) -> (List a -> List b) -> (List a -> List b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapCS",
            "comment": " Like `mapCLR`, but you provide one function for both sides.\n",
            "type": "(a -> b) -> (a -> b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapCS'",
            "comment": " See `mapCLR'`.\n",
            "type": "(a -> b) -> (List a -> List b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mapL",
            "comment": " Like `mapA`, but only the left is affected.\n",
            "type": "(a -> a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mapL'",
            "comment": " See `mapCLR'`.\n",
            "type": "(List a -> List a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mapR",
            "comment": " Like `mapA`, but only the right is affected.\n",
            "type": "(a -> a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mapR'",
            "comment": " See `mapCLR'`.\n",
            "type": "(List a -> List a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mapS",
            "comment": " Like `mapA`, but the center is __not__ affected.\n",
            "type": "(a -> a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mapS'",
            "comment": " See `mapCLR'`.\n",
            "type": "(List a -> List a) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "mirror",
            "comment": " Reverse a function's notion of left and right.\nUsed in many of this library's functions under the hood\n",
            "type": "(Pivot.Pivot a -> Pivot.Pivot b) -> Pivot.Pivot a -> Pivot.Pivot b"
          },
          {
            "name": "mirrorM",
            "comment": " Reverse a possibly-failing-function's notion of left and right.\nUsed in many of this library's functions under the hood\n",
            "type": "(Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot b)) -> Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot b)"
          },
          {
            "name": "pure",
            "comment": " Like `fromCons`, but without the list. That is, we specify only the center.\n\n    pure == flip fromCons []\n",
            "type": "a -> Pivot.Pivot a"
          },
          {
            "name": "removeGoL",
            "comment": " Replace center with member nearest to the left.\n\n_Fails if and only if left side is empty._\n",
            "type": "Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "removeGoR",
            "comment": " Replace center with member nearest to the right.\n\n_Fails if and only if right side is empty._\n",
            "type": "Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "reverse",
            "comment": " Reverse a pivot, like a list. You could also think of it as mirroring\nleft and right.\n",
            "type": "Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "setC",
            "comment": " Replace the center.\n",
            "type": "a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "setL",
            "comment": " Replace the left.\n",
            "type": "List a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "setR",
            "comment": " Replace the right.\n",
            "type": "List a -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "sort",
            "comment": " Sort a pivot while keeping the center as center.\n\nIt does not simply sort each side separately!\n\n    sort >> getA == getA >> List.sort\n    getC == sort >> getC\n",
            "type": "Pivot.Pivot comparable -> Pivot.Pivot comparable"
          },
          {
            "name": "sortWith",
            "comment": " Like `sort`, but with a costum comparator.\n\n    sort == sortWith compare\n",
            "type": "(a -> a -> Basics.Order) -> Pivot.Pivot a -> Pivot.Pivot a"
          },
          {
            "name": "switchL",
            "comment": " Switch places with member nearest to the left\n\n_Fails if and only if left side is empty_\n",
            "type": "Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "switchR",
            "comment": " Switch places with member nearest to the right\n\n_Fails if and only if right side is empty_\n",
            "type": "Pivot.Pivot a -> Maybe.Maybe (Pivot.Pivot a)"
          },
          {
            "name": "withRollback",
            "comment": " Replace a possibly-failing-function with a possibly-does-nothing-function.\nFor example, if you try to `goR` a pivot,\nyou may fail since there is nothing to the right.\nBut if you `withRollback goR` a pivot,\nthe worst that could happen is that nothing happens.\n\nUse it, don't abuse it. That is, only use it when it makes sense to ignore\na failure, or when you are __certain__ a possibly-failing-function cannot\nreally fail. For example,\n\n    addGoR == addR >> withRollback goR\n\nIt might be useful to define infix operators as such.\n\n    (!>) = flip withRollback\n    infixl 0 !>\n\n    (<!) = withRollback\n    infixr 0 <!\n\n    goR <! pvt == withRollback goR pvt\n",
            "type": "(a -> Maybe.Maybe a) -> a -> a"
          }
        ],
        "generated-with-elm-version": "0.17.0"
      }
    ]
  },
  {
    "name": "zaidan/elm-collision",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Collision",
        "comment": " this module provides an implementation of the\nGilbert-Johnson-Keerthi (GJK) collision detection algorith for\nconvex objects in 2D. To deal with concave objects, simply\nbreak your larger object into smaller convex shapes.\n\nIt is very efficient, usually converging in one or two iterations.\n\n# Definitions\n@docs Pt, Mink\n\n\n# API\n@docs collision\n\n",
        "aliases": [
          {
            "name": "Mink",
            "comment": " Simple alias for boundary objects bundled with a support function\n",
            "args": [
              "a"
            ],
            "type": "( a, a -> Collision.Pt -> Maybe.Maybe Collision.Pt )"
          },
          {
            "name": "Pt",
            "comment": " Simple alias for a two dimentional point\n",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "collision",
            "comment": " Determine if there is a collision between two objects.\nObject information is given as a pair of: a boundary representation\nof type a, and a support function for that representaion f : a -> Pt -> Pt\nwhich takes the boundary representation and a direction vector, and\nreturns the point of the boundary furthest along the direction.\nPt here is used as an alias for (Float, Float). The first argument\nto collision is max recursion depth, which might come in handy in\nthe case where you are writing your own support functions.\n\n    poly1 = [(-15,-10),(0,15),(12,-5)] \n    poly2 = [(-9,13),(6,13),(-2,22)] \n\n    collision 10 (poly1, polySupport) (poly2, polySupport) == Just True\n",
            "type": "Int -> Collision.Mink a -> Collision.Mink b -> Maybe.Maybe Bool"
          }
        ],
        "generated-with-elm-version": "0.17.1"
      }
    ]
  }
]
