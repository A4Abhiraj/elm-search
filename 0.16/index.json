[
  {
    "name": "Apanatshka/elm-signal-extra",
    "version": "5.7.0",
    "docs": [
      {
        "name": "Signal.Stream",
        "comment": " Uninitialised signals, that only give updates and don't have the concept of\na current value. Like `Signal.Event.EventStream` (also in this package), only with values. \n\n@docs Stream\n\nThis library provides the basic building blocks for routing these streams of\nevents to your application logic.\n\n# Mapping\n@docs map\n\n# Merging\n@docs merge, fairMerge, mergeMany\n\n# Folding\n@docs fold\n\n# Filtering\n@docs filter, filterMap, keepIf, sample\n\n# Primitive Streams\n@docs never, timestamp\n\n# Conversions\n@docs toSignal, fromSignal\n",
        "aliases": [
          {
            "name": "Stream",
            "comment": " Streams of events. Many interactions with the world can be formulated as\na stream of discrete events: mouse clicks, responses from servers, key presses,\netc.\n",
            "args": [
              "a"
            ],
            "type": "Signal.Signal (Maybe.Maybe a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "fairMerge",
            "comment": " Like `merge`, but you get to decide which event wins when they come in at the same time.\n",
            "type": "(a -> a -> a) -> Signal.Stream.Stream a -> Signal.Stream.Stream a -> Signal.Stream.Stream a"
          },
          {
            "name": "filter",
            "comment": " Filter out and unwrap the `Just`s in the stream.\n",
            "type": "Signal.Stream.Stream (Maybe.Maybe a) -> Signal.Stream.Stream a"
          },
          {
            "name": "filterMap",
            "comment": " Filter out some events. If the incoming event is mapped to a `Nothing` it\nis dropped. If it is mapped to `Just` a value, we keep the value.\n\n    numbers : Stream Int\n    numbers =\n        filterMap (\\raw -> Result.toMaybe (String.toInt raw)) userInput\n\n    userInput : Stream String\n",
            "type": "(a -> Maybe.Maybe b) -> Signal.Stream.Stream a -> Signal.Stream.Stream b"
          },
          {
            "name": "fold",
            "comment": " Create a past-dependent value. Each update from the incoming stream will\nbe used to step the state forward. The outgoing signal represents the current\nstate.\n\n    clickCount : Signal Int\n    clickCount =\n        fold (\\click total -> total + 1) 0 Mouse.clicks\n\n    timeSoFar : Stream Time\n    timeSoFar =\n        fold (+) 0 (fps 40)\n\nSo `clickCount` updates on each mouse click, incrementing by one. `timeSoFar`\nis the time the program has been running, updated 40 times a second.\n",
            "type": "(a -> b -> b) -> b -> Signal.Stream.Stream a -> Signal.Signal b"
          },
          {
            "name": "fromSignal",
            "comment": " Get a stream that triggers whenever the signal is *updated*. Note\nthat an update may result in the same value as before, so the resulting\n`Stream` can have the same value twice in a row.\n\n    moves : Stream (Int,Int)\n    moves =\n      fromSignal Mouse.position\n",
            "type": "Signal.Signal a -> Signal.Stream.Stream a"
          },
          {
            "name": "keepIf",
            "comment": " Filter out some events. The given function decides whether we should\nkeep an update. The following example only keeps even numbers.\n\n    numbers : Stream Int\n\n    isEven : Int -> Bool\n\n    evens : Stream Int\n    evens =\n        keepIf isEven numbers\n",
            "type": "(a -> Bool) -> Signal.Stream.Stream a -> Signal.Stream.Stream a"
          },
          {
            "name": "map",
            "comment": " Apply a function to events as they come in. This lets you transform\nstreams.\n\n    type Action = MouseClick | TimeDelta Float\n\n    actions : Stream Action\n    actions =\n        map (always MouseClick) Mouse.clicks\n",
            "type": "(a -> b) -> Signal.Stream.Stream a -> Signal.Stream.Stream b"
          },
          {
            "name": "merge",
            "comment": " Merge two streams into one. This function is extremely useful for bringing\ntogether lots of different streams to feed into a `fold`.\n\n    type Action = MouseClick | TimeDelta Float\n\n    actions : Stream Action\n    actions =\n        merge\n            (map (always MouseClick) Mouse.clicks)\n            (map TimeDelta (fps 40))\n\nIf an event comes from either of the incoming streams, it flows out the\noutgoing stream. If an event comes on both streams at the same time, the left\nevent wins (i.e., the right event is discarded).\n",
            "type": "Signal.Stream.Stream a -> Signal.Stream.Stream a -> Signal.Stream.Stream a"
          },
          {
            "name": "mergeMany",
            "comment": " Merge many streams into one. This is useful when you are merging more than\ntwo streams. When multiple events come in at the same time, the left-most\nevent wins, just like with `merge`.\n\n    type Action = MouseMove (Int,Int) | TimeDelta Float | Click\n\n    actions : Stream Action\n    actions =\n        mergeMany\n            [ map MouseMove Mouse.position\n            , map TimeDelta (fps 40)\n            , map (always Click) Mouse.clicks\n            ]\n",
            "type": "List (Signal.Stream.Stream a) -> Signal.Stream.Stream a"
          },
          {
            "name": "never",
            "comment": " A stream that never gets an update. This is useful when defining functions\nlike `mergeMany` which needs to be defined even when no streams are given.\n\n    mergeMany : List (Stream a) -> Stream a\n    mergeMany streams =\n        List.foldr merge never streams\n",
            "type": "Signal.Stream.Stream a"
          },
          {
            "name": "sample",
            "comment": " Useful for augmenting a stream with information from a signal.\nFor example, if you are operating on a time delta but want to take the current\nkeyboard state into account.\n\n    inputs : Stream ({ x:Int, y:Int }, Time)\n    inputs =\n        sample (,) Keyboard.arrows (fps 60)\n\nNow we get events exactly with the `(fps 60)` stream, but they are augmented\nwith which arrows are pressed at the moment.\n",
            "type": "(a -> b -> c) -> Signal.Signal a -> Signal.Stream.Stream b -> Signal.Stream.Stream c"
          },
          {
            "name": "timestamp",
            "comment": " Add a timestamp to any stream. Timestamps increase monotonically. When you\ncreate `(timestamp Mouse.x)`, an initial timestamp is produced. The timestamp\nupdates whenever `Mouse.x` updates.\n\nTimestamp updates are tied to individual events, so\n`(timestamp Mouse.x)` and `(timestamp Mouse.y)` will always have the same\ntimestamp because they rely on the same underlying event (`Mouse.position`).\n",
            "type": "Signal.Stream.Stream a -> Signal.Stream.Stream ( Signal.Time.Time, a )"
          },
          {
            "name": "toSignal",
            "comment": " Convert a stream of values into a signal that updates whenever an event\ncomes in on the stream.\n\n    url : Signal String\n\n    url =\n        toSignal \"waiting.gif\" imageStream\n\n    constant : a -> Signal a\n\n    constant value =\n        toSignal value Stream.never\n",
            "type": "a -> Signal.Stream.Stream a -> Signal.Signal a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Signal.Time",
        "comment": " Time related functions for `Signal`s.\n\n# Easy does it\nControlling too frequently changing signals. \n@docs limitRate, dropWithin, settledAfter\n\n# Relative time\n@docs startTime, relativeTime\n\n# Re-exports\nSome functions from the `Time` module that fit in. \n@docs Time, since, delay, timestamp\n",
        "aliases": [
          {
            "name": "Time",
            "comment": " Just re-exporting the `Time` type from the `Time` module\n",
            "args": [],
            "type": "Time.Time"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "delay",
            "comment": " A re-export of [Time.delay](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time#delay). \n\nDelay a signal by a certain amount of time. So `(delay second\nMouse.clicks)` will update one second later than any mouse click.\n",
            "type": "Signal.Time.Time -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "dropWithin",
            "comment": " Drops all but the first update of a flurry of updates (a stutter).\nThe stutter is defined as updates that happen with max. the given time\nin between. \n\nThe first update of the given signal is sent through. Then the given\ndelay is waited. If no other updates arrive during that time, then next\nupdate will be sent through. Any update that arrives within the given\ntime of the last update is dropped. \n\n    noDoubleClicks = dropWithin (300 * milliseconds) Mouse.clicks\n\nAlso known to some areas as an \"immediate\" `debounce` function. \n",
            "type": "Signal.Time.Time -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "limitRate",
            "comment": " Limits the given signal to output a maximum of one message within\nthe given time period.\n\nAfter an update of the given signal, for the given period subsequent\nupdates are dropped. The original update that started this dropping is\nkept. \n\n    throttledMouseClicks = limitRate 60 Mouse.clicks\n\nAlso known in some areas as a `throttle` function. \n",
            "type": "Signal.Time.Time -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "relativeTime",
            "comment": " Turns absolute time signal to time relative to the start of the\nprogram. \n\n    let tick = Time.every Time.second\n    in  Signal.foldp ((+) 1) 0 tick == \n          relativeTime tick ~> Time.inSeconds >> round\n",
            "type": "Signal.Signal Signal.Time.Time -> Signal.Signal Signal.Time.Time"
          },
          {
            "name": "settledAfter",
            "comment": " Gives the last update of a flurry of updates (a stutter) after has\nsettled* for the given time. The stutter is defined as updates that\nhappen within the given time. * Where settled the signal gets no further\nupdates for some time, it's **not** relating to the value changes of the\nsignal. \n\nAfter every update of the given signal, the given delay is waited. If no\nother updates arrived during that time, the update is sent through. If a\nnew update arrives within the given time, the previous update is dropped\nand the waiting is restarted. So `debounce`-ing a signal that keeps up\nthe flurry of updates all the time results in a signal that never\nupdates. \n\n    tooltip : Signal Bool\n    tooltip = \n      merge (always False <~ Mouse.position) \n            (always True <~ (Mouse.position\n                            |> settledAfter (500 * Time.millisecond)))\n\nAlso known in some areas as a `debounce` function. \n",
            "type": "Signal.Time.Time -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "since",
            "comment": " A re-export of [Time.since](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time#since). \n\nTakes a time `t` and any signal. The resulting boolean signal is true\nfor time `t` after every event on the input signal. So ``(second `since`\nMouse.clicks)`` would result in a signal that is true for one second\nafter each mouse click and false otherwise.\n",
            "type": "Signal.Time.Time -> Signal.Signal a -> Signal.Signal Bool"
          },
          {
            "name": "startTime",
            "comment": " The timestamp of the start of the program.\n",
            "type": "Signal.Signal Signal.Time.Time"
          },
          {
            "name": "timestamp",
            "comment": " A re-export of [Time.timestamp](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Time#timestamp). \n\nAdd a timestamp to any signal. Timestamps increase monotonically. When\nyou create `(timestamp Mouse.x)`, an initial timestamp is produced. The\ntimestamp updates whenever `Mouse.x` updates.\n\nTimestamp updates are tied to individual events, so `(timestamp\nMouse.x)` and `(timestamp Mouse.y)` will always have the same timestamp\nbecause they rely on the same underlying event (`Mouse.position`).\n",
            "type": "Signal.Signal a -> Signal.Signal ( Signal.Time.Time, a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Signal.Fun",
        "comment": " Some utility functions for signals of functions. The question is:\nWhy are you dealing with signals of functions? Are you sure you want\nthis? It can be used to harm testability and separation of concerns,\nwhich are endangered species and it's illegal to harm them! So please be\ncareful.\n\n@docs scan, premap, postmap, bimap\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bimap",
            "comment": " Compose the given functions before and after every function that\ncomes through the signal respectively.\n",
            "type": "(a -> b) -> (c -> d) -> Signal.Fun.SF b c -> Signal.Fun.SF a d"
          },
          {
            "name": "postmap",
            "comment": " Compose the given function after every function that comes through\nthe signal.\n",
            "type": "(c -> d) -> Signal.Fun.SF b c -> Signal.Fun.SF b d"
          },
          {
            "name": "premap",
            "comment": " Compose the given function before every function that comes through\nthe signal.\n",
            "type": "(a -> b) -> Signal.Fun.SF b c -> Signal.Fun.SF a c"
          },
          {
            "name": "scan",
            "comment": " Takes a starting value for a state; applies each new function coming\nin to calculate the new state. \n",
            "type": "a -> Signal.Fun.SF a a -> Signal.Signal a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Signal.Extra",
        "comment": " Utility functions that aren't in the `Signal` module from\n`elm-lang/core`.\n\n# Mapping\n@docs (<~), (~), (~>), andMap\n\n# Zipping and unzipping\nFor those too lazy to write a record or union type.\n@docs zip, zip3, zip4, unzip, unzip3, unzip4\n\n# Stateful\n@docs foldp', foldps, foldps', runBuffer, runBuffer', deltas, delayRound\n\n# Switching\n@docs switchWhen,switchSample\n\n# Filters\n@docs keepIf,keepWhen,sampleWhen,keepThen,keepWhenI,filter,filterFold\n\n# Combining\n@docs fairMerge, mergeMany, combine, mapMany, applyMany, passiveMap2, withPassive\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "<~",
            "comment": " An alias for `Signal.map`. A prettier way to apply a function to the current value\nof a signal.\n\n    main : Signal Html\n    main =\n      view <~ model\n\n    model : Signal Model\n\n    view : Model -> Html\n",
            "type": "(a -> b) -> Signal.Signal a -> Signal.Signal b",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "andMap",
            "comment": " Apply a signal of functions to another signal. Like `Task.andMap`, this\nprovides a way to combine several signals together into a data type that's\neasier to extend than `map2`, `map3`, etc.\n\n    type alias User =\n        { name : String\n        , age : Int\n        , numberOfPosts : Int\n        }\n\n    userSignal : Signal User\n    userSignal = User\n        `Signal.map` nameSignal\n        `andMap` ageSignal\n        `andMap` numberOfPostsSignal\n",
            "type": "Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b"
          },
          {
            "name": "applyMany",
            "comment": " Apply functions in a signal to the current value of many signals.\nThe result is reevaluated whenever any signal changes. \n",
            "type": "Signal.Signal (List a -> b) -> List (Signal.Signal a) -> Signal.Signal b"
          },
          {
            "name": "combine",
            "comment": " Combine a list of signals into a signal of lists. We have\n\n      combine = mapMany identity\n\nAlso, whenever you are in a situation where you write something like\n\n      Signal.map f (combine signals)\n\nyou are better off directly using `mapMany f signals`. ",
            "type": "List (Signal.Signal a) -> Signal.Signal (List a)"
          },
          {
            "name": "delayRound",
            "comment": " Instead of delaying for some amount of time, delay for one round,\nwhere a round is initiated by outside event to the Elm program.  \nThis may not be be very useful yet. Let the package author know if you\nfind a good use!  \nAlso known to `delay` in E-FRP. \n",
            "type": "b -> Signal.Signal b -> Signal.Signal b"
          },
          {
            "name": "deltas",
            "comment": " A signal of each change to the provided signal, as a tuple of old\nand new values.\n\nThe initial value of the tuple is the initial value of the provided signal,\nduplicated. Thereafter, the first part of the tuple is the old value of the\nprovided signal, and the second part is the new value.\n",
            "type": "Signal.Signal a -> Signal.Signal ( a, a )"
          },
          {
            "name": "fairMerge",
            "comment": " A function that merges the events of two signals without bias\n(unlike `Signal.merge`). It takes a resolution function for the\n(usually rare) case that the signals update in the same \"round\".\n\n    fairMerge (\\l r -> l) == merge\n",
            "type": "(a -> a -> a) -> Signal.Signal a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "filter",
            "comment": " Filter a signal of optional values, discarding `Nothing`s.\n",
            "type": "a -> Signal.Signal (Maybe.Maybe a) -> Signal.Signal a"
          },
          {
            "name": "filterFold",
            "comment": " Apply a fold that may fail, ignore any non-changes. \n",
            "type": "(a -> b -> Maybe.Maybe b) -> b -> Signal.Signal a -> Signal.Signal b"
          },
          {
            "name": "foldp'",
            "comment": " `foldp'` is slighty more general than `foldp` in that you can base\nthe initial value of the state on the initial value of the input value. \n\n    foldp f b s == foldp' f (always b) s\n",
            "type": "(a -> b -> b) -> (a -> b) -> Signal.Signal a -> Signal.Signal b"
          },
          {
            "name": "foldps",
            "comment": " Like `foldp`, but with a hidden state\n\n    foldp f b i ==\n      let d a = (a,a) -- doubling function\n      in foldps (\\a b -> f a b |> d) (d b) i\n",
            "type": "(a -> s -> ( b, s )) -> ( b, s ) -> Signal.Signal a -> Signal.Signal b"
          },
          {
            "name": "foldps'",
            "comment": " Like `foldp'`, but with a hidden state\n",
            "type": "(a -> s -> ( b, s )) -> (a -> ( b, s )) -> Signal.Signal a -> Signal.Signal b"
          },
          {
            "name": "keepIf",
            "comment": " The old name for `Signal.filter`, which doesn't confuse you with what the `Bool` value means. \n",
            "type": "(a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "keepThen",
            "comment": " Like `keepWhen`, but when the filter signal turn `False`, the output\nchanges back to the base value. \n",
            "type": "Signal.Signal Bool -> a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "keepWhen",
            "comment": " The good old `keepWhen` filter that keeps events from the `Signal a` as long as the\n`Signal Bool` is true. \n",
            "type": "Signal.Signal Bool -> a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "keepWhenI",
            "comment": " `keepWhen` but always keeps the initial value rather than trying to\nfilter it. \n",
            "type": "Signal.Signal Bool -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "mapMany",
            "comment": " Apply a function to the current value of many signals. The\nfunction is reevaluated whenever any signal changes. A typical use case:\n\n      mapMany (flow down) [sig_elem1, sig_elem2, sig_elem3]\n\nNote how this is nicer (and more extendable) than the equivalent:\n\n      Signal.map3 (\\e1 e2 e3 -> flow down [e1, e2, e3]) sig_elem1 sig_elem2 sig_elem3\n\nAlso, `mapMany List.maximum : List (Signal comparable) -> Signal (Maybe comparable)`\ngives a signal that always carries `Just` the maximum value from all its\ninput signals, unless the input signal list is empty, in which case the returned\nsignal is equivalent to `constant Nothing`.\n",
            "type": "(List a -> b) -> List (Signal.Signal a) -> Signal.Signal b"
          },
          {
            "name": "mergeMany",
            "comment": " Merge each Signal in the given list into a given original Signal. This works\nlike Signal.mergeMany, except that it does not crash when given an empty list.\n\n    type Update =\n        MouseMove (Int,Int) | TimeDelta Float | Click\n\n\n    updates : Signal Update\n    updates =\n        mergeMany\n            (MouseMove Mouse.position)\n            [ map TimeDelta (fps 40)\n            , map (always Click) Mouse.clicks\n            ]\n",
            "type": "Signal.Signal a -> List (Signal.Signal a) -> Signal.Signal a"
          },
          {
            "name": "passiveMap2",
            "comment": " Apply a function to the current value of two signals. The second signal is\nmapped passively -- that is, changes to the second signal do not force the\nfunction to re-evaluate. However, when the first signal changes, the function\nis re-evaluated with the current value of both signals.\n\nThis is equivalent to Signal.map2, except that Signal.map2 re-evaluates the\nfunction when either Signal changes.\n",
            "type": "(a -> b -> result) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result"
          },
          {
            "name": "runBuffer",
            "comment": " A running buffer of the given size (`n`) of the given signal. \nThe list of at most `n` of the last values on the input signal. Starts\nwith an empty list. Adds new values to the *end* of the list! So you get\na list with time going from left to right. \n\n    ((==) [1,2,3,4,5]) <~ runBuffer 5 (count (Time.every second))\n",
            "type": "Int -> Signal.Signal a -> Signal.Signal (List a)"
          },
          {
            "name": "runBuffer'",
            "comment": " Same as `runBuffer` but with an initial buffer. \n",
            "type": "List a -> Int -> Signal.Signal a -> Signal.Signal (List a)"
          },
          {
            "name": "sampleWhen",
            "comment": " A combination of `Signal.sampleOn` and `keepWhen`. When the\nfirst signal becomes `True`, the most recent value of the second signal\nwill be propagated.  \n[Before Elm 0.12](\nhttps://github.com/elm-lang/elm-compiler/blob/master/changelog.md#012)\n this was the standard behaviour of `keepWhen`.\n",
            "type": "Signal.Signal Bool -> a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "switchSample",
            "comment": " Same as the previous, but samples the signal it switches to. ",
            "type": "Signal.Signal Bool -> Signal.Signal a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "switchWhen",
            "comment": " Switch between two signals. When the first signal is `True`, use the\n second signal, otherwise use the third. \n",
            "type": "Signal.Signal Bool -> Signal.Signal a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "unzip",
            "comment": " Unzip a signal of pairs to a pair of signals. \n\n    unzip Mouse.position == (Mouse.x, Mouse.y)\n",
            "type": "Signal.Signal ( a, b ) -> ( Signal.Signal a, Signal.Signal b )"
          },
          {
            "name": "unzip3",
            "comment": " ",
            "type": "Signal.Signal ( a, b, c ) -> ( Signal.Signal a, Signal.Signal b, Signal.Signal c )"
          },
          {
            "name": "unzip4",
            "comment": " ",
            "type": "Signal.Signal ( a, b, c, d ) -> ( Signal.Signal a , Signal.Signal b , Signal.Signal c , Signal.Signal d )"
          },
          {
            "name": "withPassive",
            "comment": " Intended to be paired with Signal's `(<~)` operator, `withPassive` makes it\npossible for many signals to be passively mapped. For example, the\nfollowing two declarations are equivalent:\n\n    main : Signal Element\n    main =\n      scene <~ Mouse.position `withPassive` Window.dimensions\n\n    main : Signal Element\n    main =\n      passiveMap2 scene Mouse.position Window.dimensions\n\nYou can use this pattern to passively map as many signals as you want, by using\n`withPassive` many times.\n\nThe function will only be re-evaluated when the signal mapped with `(<~)`\nchanges. This is unlike the (otherwise equivalent) Signal `(~)` operator, since\nthat operator re-evaluates the function whenever any of the input signals change.\n\nIf you want the function to be re-evaluated when some signals change but not\nothers, then you can combine the Signal `(~)` operator and `withPassive`, putting\n`(~)` first. For instance:\n\n    main : Signal Element\n    main =\n        scene <~ Mouse.position ~ Window.dimensions `withPassive` anotherSignal\n\nIn this example, the `scene` function will take three parameters, and will be called\nwhenever either of the first two parameters changes. The third parameter will\nbe the value of `anotherSignal`, but changes to `anotherSignal` will not cause\nthe function to be re-evaluated.\n",
            "type": "Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "zip",
            "comment": " Zip two signals into a signal of pairs.\n\n    zip Mouse.x Mouse.y == Mouse.position\n",
            "type": "Signal.Signal a -> Signal.Signal b -> Signal.Signal ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " ",
            "type": "Signal.Signal a -> Signal.Signal b -> Signal.Signal c -> Signal.Signal ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " ",
            "type": "Signal.Signal a -> Signal.Signal b -> Signal.Signal c -> Signal.Signal d -> Signal.Signal ( a, b, c, d )"
          },
          {
            "name": "~",
            "comment": " An alias for `andMap`. Intended to be paired with the `(<~)` operator, this\nmakes it possible for many signals to flow into a function. Think of it as a\nfancy alias for `mapN`.  For example, the following declarations are equivalent:\n\n    main : Signal Element\n    main =\n      scene <~ Window.dimensions ~ Mouse.position\n\n    main : Signal Element\n    main =\n      map2 scene Window.dimensions Mouse.position\n\nYou can use this pattern for as many signals as you want by using `(~)` a bunch\nof times, so you can go higher than `map5` if you need to.\n",
            "type": "Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "~>",
            "comment": " The `(<~)` operator, but flipped. Doesn't play well with the other\ntwo!\n\n    Mouse.x ~> toFloat >> sqrt >> round\n            >> isEven >> not\n            >> asText\n",
            "type": "Signal.Signal a -> (a -> b) -> Signal.Signal b",
            "associativity": "left",
            "precedence": 4
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Signal.Discrete",
        "comment": " Helper functions for recognising events. Mostly useful in\ncombination with `Signal.sampleOn`, although there are uses. \n\n# EventSource\nAn `EventSource` is really just a `Signal` where we don't care about its\nvalue, but only when it updates. A prime example is `Mouse.clicks`. \n@docs EventSource, es\n\n# Basics\n@docs whenEqual, whenChange, whenChangeTo\n\n# `foldp` variations\n@docs folde\n",
        "aliases": [
          {
            "name": "EventSource",
            "comment": " At some point in the future Elm will probably support something like\nthis:\n\n    type alias EventSource = Signal _\n\nThat is, `EventSource` will become an alias for any `Signal a` where we\nhide the `a` part.  \nUntil then, there is the `es` function to create an EventSource\n",
            "args": [],
            "type": "Signal.Signal ()"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "es",
            "comment": " Simple way to make an event signal from any signal\n",
            "type": "Signal.Signal a -> Signal.Discrete.EventSource"
          },
          {
            "name": "folde",
            "comment": " `foldp` on an `EventSource`.\n\n    toggleOnEnter = folde not False <| whenChangeTo True Keyboard.enter\n",
            "type": "(b -> b) -> b -> Signal.Discrete.EventSource -> Signal.Signal b"
          },
          {
            "name": "whenChange",
            "comment": " Fires when the value of the input signal changes. \n",
            "type": "Signal.Signal a -> Signal.Discrete.EventSource"
          },
          {
            "name": "whenChangeTo",
            "comment": " Fires when the value of the input signal changes to the given value.\n\n    spacebarPress = whenChangeTo True Keyboard.spacebar\n",
            "type": "a -> Signal.Signal a -> Signal.Discrete.EventSource"
          },
          {
            "name": "whenEqual",
            "comment": " Fires when the value of the input signal is equal to the given\nvalue.\n\n**NB:** Repeated updates to the same value will make the `EventSource`\nfire repeatedly.  \nSee also: [`whenChangeTo`](#whenChangeTo). \n\n    Mouse.clicks == whenEqual True Mouse.isDown\n",
            "type": "a -> Signal.Signal a -> Signal.Discrete.EventSource"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-combine",
    "version": "2.2.0",
    "docs": [
      {
        "name": "Combine.Num",
        "comment": " This module contains Parsers specific to parsing numbers.\n\n# Parsers\n@docs sign, digit, int, float\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "digit",
            "comment": " Parse a digit. ",
            "type": "Combine.Parser Int"
          },
          {
            "name": "float",
            "comment": " Parse a float. ",
            "type": "Combine.Parser Float"
          },
          {
            "name": "int",
            "comment": " Parse an integer. ",
            "type": "Combine.Parser Int"
          },
          {
            "name": "sign",
            "comment": " Parse a numeric sign, returning `1` for positive numbers and `-1`\nfor negative numbers. ",
            "type": "Combine.Parser Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Combine.Char",
        "comment": " This module contains `Char`-specific Parsers.\n\n# Parsers\n@docs satisfy, char, anyChar, oneOf, noneOf, space, tab, newline, crlf, eol, lower, upper, digit, octDigit, hexDigit\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyChar",
            "comment": " Parse any character.\n\n    parse anyChar \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse anyChar \"\" ==\n      (Err [\"expected any character\"], { input = \"\", position = 0 })\n",
            "type": "Combine.Parser Char"
          },
          {
            "name": "char",
            "comment": " Parse an exact character match.\n\n    parse (char 'a') \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse (char 'a') \"b\" ==\n      (Err [\"expected 'a'\"], { input = \"b\", position = 0 })\n",
            "type": "Char -> Combine.Parser Char"
          },
          {
            "name": "crlf",
            "comment": " Parse a `\\r\\n` sequence, returning a `\\n` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "digit",
            "comment": " Parse any base 10 digit. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "eol",
            "comment": " Parse an end of line character or sequence, returning a `\\n` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "hexDigit",
            "comment": " Parse any base 16 digit. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "lower",
            "comment": " Parse any lowercase character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "newline",
            "comment": " Parse a `\\n` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "noneOf",
            "comment": " Parse a character that is not in the given list.\n\n    parse (noneOf ['a', 'b']) \"c\" ==\n      (Ok 'c', { input = \"\", position = 1 })\n\n    parse (noneOf ['a', 'b']) \"a\" ==\n      (Err [\"expected none of ['a','b']\"], { input = \"a\", position = 0 })\n",
            "type": "List Char -> Combine.Parser Char"
          },
          {
            "name": "octDigit",
            "comment": " Parse any base 8 digit. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "oneOf",
            "comment": " Parse a character from the given list.\n\n    parse (oneOf ['a', 'b']) \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse (oneOf ['a', 'b']) \"c\" ==\n      (Err [\"expected one of ['a','b']\"], { input = \"c\", position = 0 })\n",
            "type": "List Char -> Combine.Parser Char"
          },
          {
            "name": "satisfy",
            "comment": " Parse a character matching the predicate.\n\n    parse (satisfy ((==) 'a')) \"a\" ==\n      (Ok 'a', { input = \"\", position = 1 })\n\n    parse (satisfy ((==) 'a')) \"b\" ==\n      (Err [\"could not satisfy predicate\"], { input = \"b\", position = 0 })\n",
            "type": "(Char -> Bool) -> Combine.Parser Char"
          },
          {
            "name": "space",
            "comment": " Parse a space character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "tab",
            "comment": " Parse a `\\t` character. ",
            "type": "Combine.Parser Char"
          },
          {
            "name": "upper",
            "comment": " Parse any uppercase character. ",
            "type": "Combine.Parser Char"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Combine.Infix",
        "comment": " This module provides infix versions of various functions from the\n`Combine` module.\n\n# Transforming Parsers\n@docs (<$>), (<$), (<?>)\n\n# Chaining Parsers\n@docs (<*>), (*>), (<*)\n\n# Parsers\n@docs (<|>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "*>",
            "comment": " Join two parsers, ignoring the result of the one on the left.\n\n    unprefix : Parser String\n    unprefix = string \">\" *> while ((==) ' ') *> while ((/=) ' ')\n\n    parse unprefix \"> a\" == (Ok \"a\", { input = \"\", position = 3 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "<$",
            "comment": " Variant of `Combine.map` that ignores the Parser's result. ",
            "type": "res -> Combine.Parser x -> Combine.Parser res"
          },
          {
            "name": "<$>",
            "comment": " Synonym for `Combine.map`. ",
            "type": "(res -> res') -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "<*",
            "comment": " Join two parsers, ignoring the result of the one on the right.\n\n    unsuffix : Parser String\n    unsuffix = regex \"[a-z]\" <* regex \"[!?]\"\n\n    parse unsuffix \"a!\" == (Ok \"a\", { input = \"\", position = 2 })\n",
            "type": "Combine.Parser res -> Combine.Parser x -> Combine.Parser res"
          },
          {
            "name": "<*>",
            "comment": " Synonym for `Combine.andMap`. ",
            "type": "Combine.Parser (res -> res') -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "<?>",
            "comment": " Variant of `Combine.mapError` that replaces the Parser's error\nwith a List of a single string.\n\n    parse (string \"a\" <?> \"gimme an 'a'\") \"b\" ==\n      (Err [\"gimme an 'a'\"], { input = \"b\", position = 0 })\n",
            "type": "Combine.Parser res -> String -> Combine.Parser res"
          },
          {
            "name": "<|>",
            "comment": " Synonym for `or`. ",
            "type": "Combine.Parser res -> Combine.Parser res -> Combine.Parser res"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Combine",
        "comment": " This library provides reasonably fast parser combinators.\n\n@docs Parser, Context\n\n# Constructing Parsers\n@docs primitive\n\n# Running a Parser\n@docs parse, app, rec\n\n# Transforming Parsers\n@docs bimap, map, mapError\n\n# Chaining Parsers\n@docs andThen, andMap, sequence\n\n# Parsers\n@docs fail, succeed, string, regex, while, end, or, choice, optional, maybe, many, many1, manyTill, sepBy, sepBy1, sepEndBy, sepEndBy1, skip, skipMany, skipMany1, chainl, chainr, count, between, parens, braces, brackets\n",
        "aliases": [
          {
            "name": "Context",
            "comment": " The contex over which `Parser`s operate. ",
            "args": [],
            "type": "{ input : String, position : Int }"
          }
        ],
        "types": [
          {
            "name": "Parser",
            "comment": " The Parser type.\n\nAt their core, `Parser`s simply wrap functions from a `Context` to a\ntuple of a `Result res` and a new `Context`. ",
            "args": [
              "res"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Sequence two parsers.\n\n    import Maybe\n    import Result\n    import String\n\n    num : Parser Int\n    num = (Maybe.withDefault 0 << Result.toMaybe << String.toInt) `map` regex \"[0-9]+\"\n\n    sum : Parser Int\n    sum = (+) `map` (num <* string \"+\") `andMap` num\n\n    parse sum \"1+2\" ==\n      (Ok 3, { input = \"\", position = 3 })\n",
            "type": "Combine.Parser (a -> res) -> Combine.Parser a -> Combine.Parser res"
          },
          {
            "name": "andThen",
            "comment": " Sequence two parsers, passing the result of the first parser to a\nfunction that returns the second parser. The value of the second\nparser is returned on success.\n\n    import Combine.Num exposing (int)\n\n    choosy : Parser String\n    choosy =\n      int\n        `andThen` \\x -> if x % 2 == 0\n                        then string \" is even\"\n                        else string \" is odd\"\n\n    parse choosy \"1 is odd\" ==\n      (Ok \" is odd\", { input = \"\", position = 8 })\n\n    parse choosy \"1 is even\" ==\n      (Err [\"expected \\\" is odd\\\"\"], { input = \" is even\", position = 1 })\n",
            "type": "Combine.Parser res -> (res -> Combine.Parser res') -> Combine.Parser res'"
          },
          {
            "name": "app",
            "comment": " Unwrap a parser so it can be applied to a context. ",
            "type": "Combine.Parser res -> Combine.Context -> ( Combine.Result res, Combine.Context )"
          },
          {
            "name": "between",
            "comment": " Parse something between two other parsers.\n\nThe parser\n\n    between (string \"(\") (string \")\") (string \"a\")\n\nis equivalent to the parser\n\n    string \"(\" *> string \"a\" <* string \")\"\n",
            "type": "Combine.Parser left -> Combine.Parser right -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "bimap",
            "comment": " Transform both the result and error message of a parser. ",
            "type": "(res -> res') -> (List String -> List String) -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "braces",
            "comment": " Parse something between braces `{}`. ",
            "type": "Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "brackets",
            "comment": " Parse something between square brackets `[]`. ",
            "type": "Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "chainl",
            "comment": " Parse one or more occurences of `p` separated by `op`, recursively\napply all functions returned by `op` to the values returned by `p`. See\nthe `examples/Calc.elm` file for an example.\n",
            "type": "Combine.Parser res -> Combine.Parser (res -> res -> res) -> Combine.Parser res"
          },
          {
            "name": "chainr",
            "comment": " Similar to `chainl` but functions of `op` are applied in\nright-associative order to the values of `p`. ",
            "type": "Combine.Parser res -> Combine.Parser (res -> res -> res) -> Combine.Parser res"
          },
          {
            "name": "choice",
            "comment": " Choose between a list of parsers.\n\n    parse (choice [string \"a\", string \"b\"]) \"a\" ==\n      (Ok \"a\", { input = \"\", position = 1 })\n\n    parse (choice [string \"a\", string \"b\"]) \"b\" ==\n      (Ok \"b\", { input = \"\", position = 1 })\n",
            "type": "List (Combine.Parser res) -> Combine.Parser res"
          },
          {
            "name": "count",
            "comment": " Parse `n` occurences of `p`. ",
            "type": "Int -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "end",
            "comment": " Fail when the input is not empty.\n\n    parse end \"\" == (Ok (), { input = \"\", position = 0 })\n    parse end \"a\" == (Err [\"expected end of input\"], { input = \"a\", position = 0 })\n",
            "type": "Combine.Parser ()"
          },
          {
            "name": "fail",
            "comment": " Fail without consuming any input. ",
            "type": "List String -> Combine.Parser res"
          },
          {
            "name": "many",
            "comment": " Apply a parser until it fails and return a list of the results.\n\n    parse (many (string \"a\")) \"aaab\" ==\n      (Ok [\"a\", \"a\", \"a\"], { input = \"b\", position = 3 })\n\n    parse (many (string \"a\")) \"\" ==\n      (Ok [], { input = \"\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "many1",
            "comment": " Parse at least one result.\n\n    parse (many1 (string \"a\")) \"a\" ==\n      (Ok [\"a\"], { input = \"\", position = 1 })\n\n    parse (many1 (string \"a\")) \"\" ==\n      (Err [\"expected \\\"a\\\"\"], { input = \"\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "manyTill",
            "comment": " Apply parser `p` zero or more times until parser `end`\nsucceeds. On success, the list of `p`'s results is returned.\n\n    string \"<!--\" *> manyTill anyChar (string \"-->\")\n",
            "type": "Combine.Parser res -> Combine.Parser end -> Combine.Parser (List res)"
          },
          {
            "name": "map",
            "comment": " Transform the result of a parser.\n\n    parse (map String.toUpper (string \"a\")) \"a\" ==\n      (Ok \"A\", { input = \"\", position = 1 })\n",
            "type": "(res -> res') -> Combine.Parser res -> Combine.Parser res'"
          },
          {
            "name": "mapError",
            "comment": " Transform the error of a parser.\n\n    parse (mapError (\\_ -> [\"bad input\"]) (string \"a\")) \"b\" ==\n      (Err [\"bad input\"], { input = \"b\", position = 0 })\n",
            "type": "(List String -> List String) -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "maybe",
            "comment": " Wrap the return value into a `Maybe`. Returns `Nothing` on failure.\n\n    parse (maybe (string \"a\")) \"a\" ==\n      (Ok (Just \"a\"), { input = \"\", position = 1 })\n\n    parse (maybe (string \"a\")) \"b\" ==\n      (Ok Nothing, { input = \"b\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser (Maybe.Maybe res)"
          },
          {
            "name": "optional",
            "comment": " Return a default value when the given parser fails.\n\n    letterA : Parser String\n    letterA = optional \"a\" (string \"a\")\n\n    parse letterA \"a\" == (Ok \"a\", { input = \"\", position = 1 })\n    parse letterA \"b\" == (Ok \"a\", { input = \"b\", position = 0 })\n",
            "type": "res -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "or",
            "comment": " Choose between two parsers.\n\n    parse (string \"a\" `or` string \"b\") \"a\" ==\n      (Ok \"a\", { input = \"\", position = 1 })\n\n    parse (string \"a\" `or` string \"b\") \"b\" ==\n      (Ok \"b\", { input = \"\", position = 1 })\n\n    parse (string \"a\" `or` string \"b\") \"c\" ==\n      (Err [\"expected \\\"a\\\"\", \"expected \\\"b\\\"\"], { input = \"c\", position = 0 })\n",
            "type": "Combine.Parser res -> Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "parens",
            "comment": " Parse something between parentheses. ",
            "type": "Combine.Parser res -> Combine.Parser res"
          },
          {
            "name": "parse",
            "comment": " Parse a string.\n\n    import Combine.Num exposing (int)\n\n    parse int \"123\" ==\n      (Ok 123, { input = \"\", position = 3 })\n\n    parse int \"abc\" ==\n      (Err [\"expected an integer\"], { input = \"abc\", position = 0 })\n ",
            "type": "Combine.Parser res -> String -> ( Combine.Result res, Combine.Context )"
          },
          {
            "name": "primitive",
            "comment": " Construct a new primitive Parser.\n\nIf you find yourself reaching for this function often consider opening\na [Github issue](https://github.com/Bogdanp/elm-combine/issues) with\nthe library to have your custom Parsers included in the standard\ndistribution. ",
            "type": "(Combine.Context -> ( Combine.Result res, Combine.Context )) -> Combine.Parser res"
          },
          {
            "name": "rec",
            "comment": " Defer a parser's evaluation.\n\n    type E = ETerm String | EList (List E)\n\n    whitespace : Parser String\n    whitespace = regex \"[ \\t\\r\\n]*\"\n\n    term : Parser E\n    term = ETerm `map` (whitespace *> regex \"[a-zA-Z]+\" <* whitespace)\n\n    list : Parser E\n    list = rec (\\() -> EList `map` (string \"(\" *> many (term `or` list) <* string \")\"))\n\n    parse list \"\" ==\n      (Err [\"expected \\\"(\\\"\"], { input = \"\", position = 0 })\n\n    parse list \"()\" ==\n      (Ok (EList []), { input = \"\", position = 2 })\n\n    parse list \"(a (b c))\" ==\n      (Ok (EList [ETerm \"a\", EList [ETerm \"b\", ETerm \"c\"]]), { input = \"\", position = 9 })\n",
            "type": "(() -> Combine.Parser res) -> Combine.Parser res"
          },
          {
            "name": "regex",
            "comment": " Parse a Regex match.\n\nRegular expressions must match from the beginning of the input and their\nsubgroups are ignored. A `^` is added implicitly to the beginning of\nevery pattern unless one already exists.\n\n    parse (regex \"a+\") \"aaaaab\" ==\n      (Ok \"aaaaa\", { input = \"b\", position = 5 })\n",
            "type": "String -> Combine.Parser String"
          },
          {
            "name": "sepBy",
            "comment": " Parser zero or more occurences of one parser separated by another.\n\n    parse (sepBy (string \",\") (string \"a\")) \"b\" ==\n      (Ok [], { input = \"b\", position = 0 })\n\n    parse (sepBy (string \",\") (string \"a\")) \"a,a,a\" ==\n      (Ok [\"a\", \"a\", \"a\"], { input = \"\", position = 5 })\n\n    parse (sepBy (string \",\") (string \"a\")) \"a,a,b\" ==\n      (Ok [\"a\", \"a\"], { input = \",b\", position = 3 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sepBy1",
            "comment": " Parse one or more occurences of one parser separated by another. ",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sepEndBy",
            "comment": " Parse zero or more occurences of one parser separated and\noptionally ended by another.\n\n    parse (sepEndBy (string \",\") (string \"a\")) \"a,a,a,\" ==\n      (Ok [\"a\", \"a\", \"a\"], { input = \"\", position = 6 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sepEndBy1",
            "comment": " Parse one or more occurences of one parser separated and\noptionally ended by another.\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"\" ==\n      (Err [\"expected \\\"a\\\"\"], { input = \"\", position = 0 })\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"a\" ==\n      (Ok [\"a\"], { input = \"\", position = 1 })\n\n    parse (sepEndBy1 (string \",\") (string \"a\")) \"a,\" ==\n      (Ok [\"a\"], { input = \"\", position = 2 })\n",
            "type": "Combine.Parser x -> Combine.Parser res -> Combine.Parser (List res)"
          },
          {
            "name": "sequence",
            "comment": " Run a list of parsers in sequence, accumulating the results.\n\n    parse (sequence [string \"a\", string \"b\"]) \"ab\" ==\n      (Ok [\"a\", \"b\"], { input = \"\", position = 2 })\n\n    parse (sequence [string \"a\", string \"b\"]) \"ac\" ==\n      (Err [\"expected \\\"b\\\"\", { input = \"c\", position = 1 })\n\n ",
            "type": "List (Combine.Parser res) -> Combine.Parser (List res)"
          },
          {
            "name": "skip",
            "comment": " Apply a parser and skip its result. ",
            "type": "Combine.Parser x -> Combine.Parser ()"
          },
          {
            "name": "skipMany",
            "comment": " Apply a parser and skip its result many times. ",
            "type": "Combine.Parser x -> Combine.Parser ()"
          },
          {
            "name": "skipMany1",
            "comment": " Apply a parser and skip its result at least once. ",
            "type": "Combine.Parser x -> Combine.Parser ()"
          },
          {
            "name": "string",
            "comment": " Parse an exact string match.\n\n    parse (string \"hello\") \"hello world\" ==\n      (Ok \"hello\", { input = \" world\", position = 5 })\n\n    parse (string \"hello\") \"goodbye\" ==\n      (Err [\"expected \\\"hello\\\"\"], { input = \"goodbye\", position = 0 })\n",
            "type": "String -> Combine.Parser String"
          },
          {
            "name": "succeed",
            "comment": " Return a value without consuming any input.\n\n    parse (succeed 1) \"a\" ==\n      (Ok 1, { input = \"a\", position = 0 })\n",
            "type": "res -> Combine.Parser res"
          },
          {
            "name": "while",
            "comment": " Consume input while the predicate matches.\n\n    parse (while ((/=) ' ')) \"test 123\" ==\n      (Ok \"test\", { input = \" 123\", position = 4 })\n",
            "type": "(Char -> Bool) -> Combine.Parser String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-generate",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Generate",
        "comment": " Generate is a library for lazy list manipulation.\n\n# Types\n@docs Generator\n\n## Converting to and from Generators\n@docs singleton, fromList, toList\n\n## Extracting values\n@docs next\n\n## Transforming Generators\n@docs map, filter, remove, reverse, take, drop\n\n## Producing values\n@docs foldl, foldr, any, all, sum, product, length\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " Generators are lists whose transformations are applied lazily as\nitems are requested.  This makes is so that expressions like:\n\n    import Generate as G\n\n    G.fromList [1, 2, 3]\n      |> G.map ((+) 1)\n      |> G.filter (\\x -> x % 2 == 0)\n      |> G.map toString\n      |> G.toList\n\nOnly end up iterating through the list once while still providing the\nsame results as their List module counterparts.\n\n",
            "args": [
              "a",
              "b"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " Determine if all of the Generator's elements match the predicate.\n\n    > fromList [2, 4, 6] |> all (\\x -> x % 2 == 0)\n    True : Bool\n\n    > fromList [1, 2, 3] |> all (\\x -> x % 2 == 0)\n    False : Bool\n\n",
            "type": "(a -> Bool) -> Generate.Generator x a -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine if any of the Generator's elements match the predicate.\n\n    > fromList [1, 2, 3] |> any (\\x -> x % 2 == 0)\n    True : Bool\n\n    > fromList [1, 3, 5] |> any (\\x -> x % 2 == 0)\n    False : Bool\n\n",
            "type": "(a -> Bool) -> Generate.Generator x a -> Bool"
          },
          {
            "name": "drop",
            "comment": " Drop the first `n` elements from a Generator.\n\n    > fromList [1, 2, 3] |> drop 1 |> toList\n    [2, 3] : List number\n\n*Note*: This function is applied to the *original* list:\n\n    > fromList [1, 2, 3] |> filter ((/=) 1) |> drop 1 |> toList\n    [2, 3] : List number\n\n",
            "type": "Int -> Generate.Generator a b -> Generate.Generator a b"
          },
          {
            "name": "filter",
            "comment": " Filter the elements of a Generator.\n\n    > fromList [1, 2, 3] |> filter (flip (>) 1) |> toList\n    [2, 3] : List number\n\n",
            "type": "(b -> Bool) -> Generate.Generator a b -> Generate.Generator a b"
          },
          {
            "name": "foldl",
            "comment": " Fold a Generator from the left.\n\n    > fromList [1, 2, 3] |> foldl (::) []\n    [3, 2, 1] : List number\n\n",
            "type": "(b -> c -> c) -> c -> Generate.Generator a b -> c"
          },
          {
            "name": "foldr",
            "comment": " Fold a Generator from the right.\n\n    > fromList [1, 2, 3] |> foldr (::) []\n    [1, 2, 3] : List number\n\n",
            "type": "(b -> c -> c) -> c -> Generate.Generator a b -> c"
          },
          {
            "name": "fromList",
            "comment": " Construct a Generator from a List.\n\n    > fromList [1, 2, 3]\n    Generator { items = [1,2,3], transform = <function> }\n      : Generate.Generator number number\n\n",
            "type": "List a -> Generate.Generator a a"
          },
          {
            "name": "length",
            "comment": " Compute the length of a Generator.\n\n    > fromList [1, 2, 3] |> length\n    3 : Int\n\n",
            "type": "Generate.Generator a b -> Int"
          },
          {
            "name": "map",
            "comment": " Transform the elements of a Generator.\n\n\n    > fromList [1, 2, 3] |> map ((+) 1) |> toList\n    [2, 3, 4] : List number\n\n",
            "type": "(b -> c) -> Generate.Generator a b -> Generate.Generator a c"
          },
          {
            "name": "next",
            "comment": " Get the next element in the generator after transforming it.\n\n    > fromList [1, 2, 3] |> filter ((/=) 1) |> next\n    (Just 2, Generator { items = [3], transform = <function> })\n      : ( Maybe.Maybe number, Generate.Generator number number )\n\n    > fromList [1, 2, 3] |> filter ((==) 5) |> next\n    (Nothing, Generator { items = [], transform = <function> })\n      : ( Maybe.Maybe number, Generate.Generator number number )\n\n",
            "type": "Generate.Generator a b -> ( Maybe.Maybe b, Generate.Generator a b )"
          },
          {
            "name": "product",
            "comment": " Compute the product of the Generator's elements.\n\n    > fromList [1, 2, 3] |> product\n    6 : number\n\n",
            "type": "Generate.Generator a number -> number"
          },
          {
            "name": "remove",
            "comment": " Remove elements that match the given predicate from the Generator.\n\n    > fromList [1, 2, 3] |> remove (\\x -> x % 2 == 0) |> toList\n    [1, 3] : List number\n\n",
            "type": "(b -> Bool) -> Generate.Generator a b -> Generate.Generator a b"
          },
          {
            "name": "reverse",
            "comment": " Reverse a Generator's elements. ",
            "type": "Generate.Generator a b -> Generate.Generator a b"
          },
          {
            "name": "singleton",
            "comment": " Construct a Generator from a single value.\n\n    > singleton 1\n    Generator { items = [1], transform = <function> }\n      : Generate.Generator number number\n",
            "type": "a -> Generate.Generator a a"
          },
          {
            "name": "sum",
            "comment": " Compute the product of the Generator's elements.\n\n    > fromList [1, 2, 3] |> sum\n    6 : number\n\n",
            "type": "Generate.Generator a number -> number"
          },
          {
            "name": "take",
            "comment": " Take the first `n` elements from a Generator.\n\n    > fromList [1, 2, 3] |> take 1 |> toList\n    [1] : List number\n\n*Note*: This function is applied to the *original* list:\n\n    > fromList [1, 2, 3] |> filter ((/=) 1) |> take 1 |> toList\n    [] : List number\n\n",
            "type": "Int -> Generate.Generator a b -> Generate.Generator a b"
          },
          {
            "name": "toList",
            "comment": " Construct a List from a Generator.\n\n    > fromList [1, 2, 3] |> toList\n    [1, 2, 3] : List number\n\n",
            "type": "Generate.Generator a b -> List b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Bogdanp/elm-route",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Route.QueryString",
        "comment": " This module exposes functions for working with query strings.\n\nYou can manipulate query strings:\n\n    empty\n      |> add \"a\" \"hello\"\n      |> add \"a\" \"goodbye\"\n      |> add \"b\" \"1\"\n      |> render\n\nAnd you can parse and extract their parameters:\n\n    let\n      qs = parse \"?a=1&a=2&a=test&b=hello\"\n      a = many int qs\n      b = one string qs |> Maybe.withDefault \"goodbye\"\n    in\n      (a, b)\n\n## Types\n@docs QueryString\n\n## Constructing QueryStrings\n@docs parse, empty\n\n## Manipulating parameters\n@docs render, add, remove, filter\n\n## Extracting parameters\n@docs all, one, many\n\n### Parsers\n@docs string, int\n",
        "aliases": [],
        "types": [
          {
            "name": "QueryString",
            "comment": " Represents a parsed query string. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a value to a key.\n\n    > parse \"?a=1&b=a&a=c\" |> add \"a\" \"2\" |> render\n    \"?a=2&a=1&a=c&b=a\" : String\n\n    > parse \"?a=1&b=a&a=c\" |> add \"d\" \"hello\" |> render\n    \"?a=1&a=c&b=a&d=hello\" : String\n\n ",
            "type": "String -> String -> Route.QueryString.QueryString -> Route.QueryString.QueryString"
          },
          {
            "name": "all",
            "comment": " Retrieve all of the values for a given key.\n\n    > parse \"?a=1&a=2\" |> all \"a\"\n    [\"1\",\"2\"] : List String\n\n    > parse \"?a=1&a=2\" |> all \"b\"\n    [] : List String\n\n ",
            "type": "String -> Route.QueryString.QueryString -> List String"
          },
          {
            "name": "empty",
            "comment": " Construct an empty QueryString. ",
            "type": "Route.QueryString.QueryString"
          },
          {
            "name": "filter",
            "comment": " Filter a key's values.\n\n    > parse \"?a=1&b=a&a=c\" |> filter \"a\" ((==) \"1\") |> render\n    \"?a=1&b=a\" : String\n\n ",
            "type": "String -> (String -> Bool) -> Route.QueryString.QueryString -> Route.QueryString.QueryString"
          },
          {
            "name": "int",
            "comment": " A Parser that accepts any integer. ",
            "type": "Combine.Parser Int"
          },
          {
            "name": "many",
            "comment": " Retrieve zero or more values for some key. Values are funneled\nthrough the given parser before being returned.\n\n    > parse \"?a=1&a=c&a=2\" |> many int \"a\"\n    [1,2] : List Int\n\n ",
            "type": "Combine.Parser a -> String -> Route.QueryString.QueryString -> List a"
          },
          {
            "name": "one",
            "comment": " Retrieve a single value for a given key. Values are funneled through\nthe given parser before being returned.\n\n    > parse \"?a=1&a=2\" |> one string \"a\"\n    Just \"2\" : Maybe.Maybe String\n\n    > parse \"?a=1&a=2\" |> one int \"a\"\n    Just 2 : Maybe.Maybe Int\n\n    > parse \"?a=1&a=c\" |> one int \"a\"\n    Just 1 : Maybe.Maybe Int\n\n ",
            "type": "Combine.Parser a -> String -> Route.QueryString.QueryString -> Maybe.Maybe a"
          },
          {
            "name": "parse",
            "comment": " Turn a String into a QueryString. The initial `?` is optional.\n\n    > parse \"\"\n    QueryString (Dict.fromList []) : Route.QueryString.QueryString\n\n    > parse \"?a=1&b=c&a=2\"\n    QueryString (Dict.fromList [(\"a\",[\"1\",\"2\"]),(\"b\",[\"c\"])])\n        : Route.QueryString.QueryString\n\n    > parse \"a=1&b=c&a=2\"\n    QueryString (Dict.fromList [(\"a\",[\"1\",\"2\"]),(\"b\",[\"c\"])])\n        : Route.QueryString.QueryString\n\n ",
            "type": "String -> Route.QueryString.QueryString"
          },
          {
            "name": "remove",
            "comment": " Remove a key.\n\n    > parse \"?a=1&b=a&a=c\" |> remove \"a\" |> render\n    \"?b=a\" : String\n\n    > parse \"?a=1&b=a&a=c\" |> remove \"c\" |> render\n    \"?a=1&a=c&b=a\" : String\n\n ",
            "type": "String -> Route.QueryString.QueryString -> Route.QueryString.QueryString"
          },
          {
            "name": "render",
            "comment": " Render a QueryString to a String.\n\n    > parse \"?a=1&b=a&a=c\" |> render\n    \"?a=1&a=c&b=a\" : String\n\n ",
            "type": "Route.QueryString.QueryString -> String"
          },
          {
            "name": "string",
            "comment": " A Parser that accepts any string. ",
            "type": "Combine.Parser String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Route",
        "comment": " This module exposes combinators for creating route parsers.\n\n@docs Route, Router\n\n## Routing\n@docs route, (:=), router, child, match, reverse\n\n## Route combinators\n@docs prefix, (<//>), and, (</>), suffix, (<>), static, custom, string, int\n",
        "aliases": [],
        "types": [
          {
            "name": "Route",
            "comment": " Routes represent concrete parsers for paths. Routes can be combined\nand they keep track of their path components in order to provide\nautomatic reverse routing.\n ",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Router",
            "comment": " A Router is, at its core, a List of Routes.\n\n    sitemap = router [routeA, routeB]\n\n ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": ":=",
            "comment": " A synonym for `route`.\n\n    type Sitemap\n      = HomeR ()\n\n    homeR : Route Sitemap\n    homeR = HomeR := static \"\"\n\n ",
            "type": "(a -> res) -> Route.Route a -> Route.Route res",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "<//>",
            "comment": " A synonym for `prefix`.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := \"users\" <//> int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route res -> Route.Route res",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "</>",
            "comment": " A synonym for `and`.\n\n    type Sitemap\n      = AddR (Int, Int)\n\n    addR = AddR := int </> int\n    sitemap = router [addR]\n\n    > match sitemap \"/1/2\"\n    Just (AddR (1,2)) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route a -> Route.Route b -> Route.Route ( a, b )",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "<>",
            "comment": " A synonym for `suffix`.\n\n    type Sitemap\n      = UserEmailsR Int\n      = UserEmailsR' (Int, ())\n\n    userEmailsR = UserEmailsR := \"users\" <//> int <> \"emails\"\n    userEmailsR' = UserEmailsR' := \"users\" <//> int </> static \"emails\"\n    sitemap = router [userEmailsR, userEmailsR']\n\n    > match sitemap \"/users/1/emails\"\n    Just (UserEmailsR 1) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1/emails-static\"\n    Just (UserEmailsR' (1,())) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route res -> String -> Route.Route res",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "and",
            "comment": " Compose two Routes.\n\n    type Sitemap\n      = AddR (Int, Int)\n\n    addR = AddR := int `and` int\n    sitemap = router [addR]\n\n    > match sitemap \"/1/2\"\n    Just (AddR (1,2)) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route a -> Route.Route b -> Route.Route ( a, b )"
          },
          {
            "name": "child",
            "comment": " Routers may be nested. This function is useful in situations\nwhere you want to split your routes into multiple types while still\nmaintaining a single top-level \"site map\".\n\n    type AdminSitemap\n      = AdminHomeR ()\n      | AdminUsersR ()\n\n    adminHomeR = AdminHomeR := static \"admin\"\n    adminUsersR = AdminHomeR := \"admin\" <//> static \"users\"\n    adminSitemap = router [adminHomeR, adminUsersR]\n\n    type Sitemap\n      = HomeR ()\n      | BlogR ()\n      | AdminR AdminSitemap\n\n    homeR = HomeR := static \"\"\n    blogR = BlogR := static \"blog\"\n    sitemap = router [homeR, blogR, child AdminR adminSitemap]\n\nSee `examples/Reuse.elm` for a more advanced use case of this.\n\n ",
            "type": "(a -> b) -> Route.Router a -> Route.Route b"
          },
          {
            "name": "custom",
            "comment": " Create a Route with a custom Parser.\n\n    import Combine exposing (..)\n    import Combine.Infix exposing (..)\n\n    type Category\n      = Snippet\n      | Post\n\n    type Sitemap\n      = CategoryR Category\n\n    categoryR = CategoryR := \"categories\" <//> custom categoryParser\n    sitemap = router [categoryR]\n\n    > match sitemap \"/categories/a\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/categories/Post\"\n    Just (CategoryR Post) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/categories/Snippet\"\n    Just (CategoryR Snippet) : Maybe.Maybe Sitemap\n\nSee `examples/Custom.elm` for a complete example.\n\n ",
            "type": "Combine.Parser a -> Route.Route a"
          },
          {
            "name": "int",
            "comment": " A Route that matches any integer.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := \"users\" <//> int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/a\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/-1\"\n    Just (UserR -1) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route Int"
          },
          {
            "name": "match",
            "comment": " Given a Router and an arbitrary String representing a path, this\nfunction will return the first Route that matches that path.\n\n    type Sitemap\n      = HomeR ()\n      | UsersR ()\n      | UserR Int\n\n    homeR = HomeR := static \"\"\n    usersR = UsersR := static \"users\"\n    usersR = UserR := \"users\" <//> int\n    sitemap = router [homeR, userR, usersR]\n\n    > match siteMap \"/a\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match siteMap \"/\"\n    Just (HomeR ()) : Maybe.Maybe Sitemap\n\n    > match siteMap \"/users\"\n    Just (UsersR ()) : Maybe.Maybe Sitemap\n\n    > match siteMap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n    > match siteMap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Router a -> String -> Maybe.Maybe a"
          },
          {
            "name": "prefix",
            "comment": " Prefix a `Route` with a string.\n\n    type Sitemap\n      = UserR Int\n\n    userR = UserR := prefix \"users\" int\n    sitemap = router [userR]\n\n    > match sitemap \"/users/\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1\"\n    Just (UserR 1) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route res -> Route.Route res"
          },
          {
            "name": "reverse",
            "comment": " Render a path given a route and a list of route components.\n\n    type Sitemap\n      = HomeR ()\n      | UsersR ()\n      | UserR Int\n\n    homeR = HomeR := static \"\"\n    usersR = UsersR := static \"users\"\n    usersR = UserR := \"users\" <//> int\n    sitemap = router [homeR, userR, usersR]\n\n    > reverse homeR []\n    \"/\"\n\n    > reverse usersR []\n    \"/users\"\n\n    > reverse userR [\"1\"]\n    \"/users/1\"\n\nIf you are willing to write some boilerplate, this function can be used\nto construct a reasonably-safe reverse routing function specific to your\napplication:\n\n    render : Sitemap -> String\n    render r =\n      case r of\n        HomeR () -> reverse homeR []\n        UsersR () -> reverse usersR []\n        UserR uid -> reverse userR [toString uid]\n\n    > render (HomeR ())\n    \"/\"\n\n    > render (UsersR ())\n    \"/users\"\n\n    > render (UserR 1)\n    \"/users/1\"\n\nThis function will crash at runtime if there is a mismatch between the\nroute and the list of arguments that is passed in. For example:\n\n    > reverse deepR []\n    Error: Ran into a `Debug.crash` in module `Route`\n\n    This was caused by the `case` expression between lines 145 and 175.\n    One of the branches ended with a crash and the following value got through:\n\n        ([],[CInt,CInt,CInt])\n\n    The message provided by the code author is:\n\n        'reverse' called with an unexpected number of arguments\n\n    > reverse deepR [\"a\"]\n    Error: Ran into a `Debug.crash` in module `Route`\n\n    This was caused by the `case` expression between lines 171 and 176.\n    One of the branches ended with a crash and the following value got through:\n\n        Err (\"could not convert string 'a' to an Int\")\n\n    The message provided by the code author is:\n\n        could not convert string 'a' to an Int in a call to 'reverse'\n\n ",
            "type": "Route.Route a -> List String -> String"
          },
          {
            "name": "route",
            "comment": " Declare a Route.\n\n    type Sitemap\n      = HomeR ()\n\n    homeR : Route Sitemap\n    homeR = route HomeR (static \"\")\n\n ",
            "type": "(a -> res) -> Route.Route a -> Route.Route res"
          },
          {
            "name": "router",
            "comment": " Construct a Router from a list of Routes.\n\n    type Sitemap\n      = HomeR ()\n      | BlogR ()\n\n    homeR = HomeR := static \"\"\n    blogR = BlogR := static \"blog\"\n    sitemap = router [homeR, blogR]\n\n ",
            "type": "List (Route.Route a) -> Route.Router a"
          },
          {
            "name": "static",
            "comment": " Create a Route that matches a static String.\n\n    type Sitemap\n      = BlogR ()\n\n    blogR = BlogR := static \"blog\"\n    sitemap = router [blogR]\n\n    > match sitemap \"/blog\"\n    Just (BlogR ()) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route ()"
          },
          {
            "name": "string",
            "comment": " A Route that matches any string.\n\n    type Sitemap\n      = PostR String\n\n    postR = PostR := \"posts\" <//> string\n    sitemap = router [postR]\n\n    > match sitemap \"/posts/\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/posts/hello-world/test\"\n    Nothing : Maybe.Maybe Sitemap\n\n    > match sitemap \"/posts/hello-world\"\n    Just (PostR \"hello-world\") : Maybe.Maybe Sitemap\n\n ",
            "type": "Route.Route String"
          },
          {
            "name": "suffix",
            "comment": " Suffix a `Route` with a string. This can be used in place\nof `static` when there are static path components at the end of a\npath.\n\n    type Sitemap\n      = UserEmailsR Int\n      = UserEmailsR' (Int, ())\n\n    userEmailsR = UserEmailsR := suffix \"emails\" (prefix \"users\" int)\n    userEmailsR' = UserEmailsR' := prefix \"users\" int `and` static \"emails-static\"\n    sitemap = router [userEmailsR, userEmailsR']\n\n    > match sitemap \"/users/1/emails\"\n    Just (UserEmailsR 1) : Maybe.Maybe Sitemap\n\n    > match sitemap \"/users/1/emails-static\"\n    Just (UserEmailsR' (1,())) : Maybe.Maybe Sitemap\n\n ",
            "type": "String -> Route.Route res -> Route.Route res"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-cardinal",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Cardinal",
        "comment": "\nCardinal Numbers\n(maybe this is the wrong name)\nA number that can either be finite or infinite\n\n@docs Cardinal, toCardinal, withDefault, withDefaults, map\n",
        "aliases": [],
        "types": [
          {
            "name": "Cardinal",
            "comment": " Cardinal number can be Positive or Negative Infinity\n",
            "args": [
              "number"
            ],
            "cases": [
              [
                "Finite",
                [
                  "number"
                ]
              ],
              [
                "PosInfinity",
                []
              ],
              [
                "NegInfinity",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "map",
            "comment": "\nNot a Functor, but still mappable\n",
            "type": "(number -> number) -> Cardinal.Cardinal number -> Cardinal.Cardinal number"
          },
          {
            "name": "toCardinal",
            "comment": " ",
            "type": "number -> Cardinal.Cardinal number"
          },
          {
            "name": "withDefault",
            "comment": "\nGet the value out of `Cardinal` providing a default for the infinite case\n",
            "type": "a -> (number -> a) -> Cardinal.Cardinal number -> a"
          },
          {
            "name": "withDefaults",
            "comment": "\nGet the value out of `Cardinal` providing a default for the infinite cases.\nFirst argument is the default for the `PosInfinity` case, the second is for `NegInfinity`\n",
            "type": "a -> a -> (number -> a) -> Cardinal.Cardinal number -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-nearly-eq",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Nearly",
        "comment": "\n\n@docs nearly, (~=)\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "nearly",
            "comment": "\nNearly is used to curry an epsillon into a fuzzy equality.\nFor example:\n\n```\nTrue == let toThreePlaces = nearly 0.0001\n        in 0.1234588 `toThreePlaces` 0.1234565\n```\n",
            "type": "Float -> Float -> Float -> Bool"
          },
          {
            "name": "~=",
            "comment": "\nPre-baked fuzzy equality, with `1.0e-5` as epsillon.\n```\n(~=) = nearly 1.0e-5\n```\n",
            "type": "Float -> Float -> Bool",
            "associativity": "right",
            "precedence": 6
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-restrict-number",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Odd",
        "comment": "\nBecause the constructor for `Odd` is not exported, you can be\nconfident that if you are using a `Odd`, then its `Odd`.\n\n@docs Odd, fromInt, toInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Odd",
            "comment": " ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromInt",
            "comment": " ",
            "type": "Int -> Maybe.Maybe Odd.Odd"
          },
          {
            "name": "toInt",
            "comment": " ",
            "type": "Odd.Odd -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Even",
        "comment": "\nBecause the constructor for `Even` is not exported, you can be\nconfident that if you are using a `Even`, then its `Even`.\n\n@docs Even, fromInt, toInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Even",
            "comment": " ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromInt",
            "comment": " ",
            "type": "Int -> Maybe.Maybe Even.Even"
          },
          {
            "name": "toInt",
            "comment": " ",
            "type": "Even.Even -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Negative",
        "comment": "\nNegative numbers exclude zero.\nBecause the constructor for `Negative` is not exported, you can be\nconfident that if you are using a `Negative`, then its `Negative`.\n\n@docs Negative, fromNum, toNum\n",
        "aliases": [],
        "types": [
          {
            "name": "Negative",
            "comment": " ",
            "args": [
              "number"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromNum",
            "comment": " ",
            "type": "number -> Maybe.Maybe (Negative.Negative number)"
          },
          {
            "name": "toNum",
            "comment": " ",
            "type": "Negative.Negative number -> number"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Natural",
        "comment": "\nNatural numbers are positive whole numbers excluding zero.\nBecause the constructor for `Natural` is not exported, you can be\nconfident that if you are using a `Natural`, then its `Natural`.\n\n@docs Natural, fromInt, toInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Natural",
            "comment": " ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromInt",
            "comment": " ",
            "type": "Int -> Maybe.Maybe Natural.Natural"
          },
          {
            "name": "toInt",
            "comment": " ",
            "type": "Natural.Natural -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "NonZero",
        "comment": "\nNonZero numbers are numbers excluding zero.\nBecause the constructor for `NonZero` is not exported, you can be\nconfident that if you are using a `NonZero`, then its `NonZero`.\n\n@docs NonZero, fromNum, toNum\n",
        "aliases": [],
        "types": [
          {
            "name": "NonZero",
            "comment": " ",
            "args": [
              "number"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromNum",
            "comment": " ",
            "type": "number -> Maybe.Maybe (NonZero.NonZero number)"
          },
          {
            "name": "toNum",
            "comment": " ",
            "type": "NonZero.NonZero number -> number"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Positive",
        "comment": "\nPositive numbers exclude zero.\nBecause the constructor for `Positive` is not exported, you can be\nconfident that if you are using a `Positive`, then its `Positive`.\n\n@docs Positive, fromNum, toNum\n",
        "aliases": [],
        "types": [
          {
            "name": "Positive",
            "comment": " ",
            "args": [
              "number"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromNum",
            "comment": " ",
            "type": "number -> Maybe.Maybe (Positive.Positive number)"
          },
          {
            "name": "toNum",
            "comment": " ",
            "type": "Positive.Positive number -> number"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-sprite",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Sprite",
        "comment": "\nA few simple things for Sprite rendering with elm-html.\n\nUsage is intended to be via the `sprite` function generating\nstyles for `Html.Attributes.style`. For example\n\n```\nnode\n    \"sprite\"\n    [ style (sprite s) ]\n    []\n```\n\n@docs Sprite, Dope, sprite, advance, advanceClamp\n\n",
        "aliases": [
          {
            "name": "Dope",
            "comment": "\nThe ordered frame cordinates representing an animation\n",
            "args": [],
            "type": "Array.Array ( Int, Int )"
          },
          {
            "name": "Sprite",
            "comment": "\nA sprite sheet\n",
            "args": [
              "a"
            ],
            "type": "{ a | sheet : String, rows : Int, columns : Int, size : ( Int, Int ), frame : Int, dope : Sprite.Dope }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "advance",
            "comment": "\nMove the sprite forward one frame, such that it will loop when it reaches the end\n",
            "type": "Sprite.Sprite a -> Sprite.Sprite a"
          },
          {
            "name": "advanceClamp",
            "comment": "\nMove the sprite forward one frame, such that it will stop when it reaches the end\n",
            "type": "Sprite.Sprite a -> Sprite.Sprite a"
          },
          {
            "name": "sprite",
            "comment": "\nProcess a sprite into styles for application with\n`elm-html`. Styles place the sprite sheet as a `background-image`\nand animate by altering the `background-position`. `height`, `width`\nare used for sizing, along with `display:block` for custom nodes.\n",
            "type": "Sprite.Sprite a -> List ( String, String )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-tuple-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Tuple3",
        "comment": "\n# Getters\n@docs fst, snd, trd, tail, init\n\n# Maps\n@docs map, mapFst, mapSnd, mapTrd, mapEach, mapAll\n\n# Swap\n@docs swirlr, swirll\n\n# Transform\n@docs toList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fst",
            "comment": " ",
            "type": "( a, b, c ) -> a"
          },
          {
            "name": "init",
            "comment": " ",
            "type": "( a, b, c ) -> ( a, b )"
          },
          {
            "name": "map",
            "comment": " ",
            "type": "(c -> x) -> ( a, b, c ) -> ( a, b, x )"
          },
          {
            "name": "mapAll",
            "comment": " ",
            "type": "(a -> b) -> ( a, a, a ) -> ( b, b, b )"
          },
          {
            "name": "mapEach",
            "comment": " ",
            "type": "(a -> x) -> (b -> x') -> (c -> x'') -> ( a, b, c ) -> ( x, x', x'' )"
          },
          {
            "name": "mapFst",
            "comment": " ",
            "type": "(a -> x) -> ( a, b, c ) -> ( x, b, c )"
          },
          {
            "name": "mapSnd",
            "comment": " ",
            "type": "(b -> x) -> ( a, b, c ) -> ( a, x, c )"
          },
          {
            "name": "mapTrd",
            "comment": " ",
            "type": "(c -> x) -> ( a, b, c ) -> ( a, b, x )"
          },
          {
            "name": "snd",
            "comment": " ",
            "type": "( a, b, c ) -> b"
          },
          {
            "name": "swirll",
            "comment": " ",
            "type": "( a, b, c ) -> ( c, a, b )"
          },
          {
            "name": "swirlr",
            "comment": " ",
            "type": "( a, b, c ) -> ( b, c, a )"
          },
          {
            "name": "tail",
            "comment": " ",
            "type": "( a, b, c ) -> ( b, c )"
          },
          {
            "name": "toList",
            "comment": " ",
            "type": "( a, a, a ) -> List a"
          },
          {
            "name": "trd",
            "comment": " ",
            "type": "( a, b, c ) -> c"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Tuple",
        "comment": "\n# Map\n@docs map, mapFst, mapSnd, mapEach, mapBoth\n\n# Swap\n@docs swap\n\n# Transform\n@docs toList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "map",
            "comment": " ",
            "type": "(b -> x) -> ( a, b ) -> ( a, x )"
          },
          {
            "name": "mapBoth",
            "comment": " ",
            "type": "(a -> b) -> ( a, a ) -> ( b, b )"
          },
          {
            "name": "mapEach",
            "comment": " ",
            "type": "(a -> x) -> (b -> x') -> ( a, b ) -> ( x, x' )"
          },
          {
            "name": "mapFst",
            "comment": " ",
            "type": "(a -> x) -> ( a, b ) -> ( x, b )"
          },
          {
            "name": "mapSnd",
            "comment": " ",
            "type": "(b -> x) -> ( a, b ) -> ( a, x )"
          },
          {
            "name": "swap",
            "comment": " ",
            "type": "( a, b ) -> ( b, a )"
          },
          {
            "name": "toList",
            "comment": " ",
            "type": "( a, a ) -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Fresheyeball/elm-yala",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Math.Vec2",
        "comment": "\n\n# Vec2 type\n@docs Vec2, x, y, zero\n\n# Operations\n@docs bimap, mapBoth, add, sub, mul, div, neg, scale\n\n# Measure\n@docs distance, dot, magnitude, direction, angle, lerp\n\n# Misc\n@docs fromTuple, normalize\n",
        "aliases": [
          {
            "name": "Vec2",
            "comment": " a 2d Vector ",
            "args": [],
            "type": "{ x : Float, y : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": "\nVector addition\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "angle",
            "comment": "",
            "type": "Math.Vec2.Vec2 -> Float"
          },
          {
            "name": "bimap",
            "comment": "\nApply a function accross `x`'s and `y`'s\n",
            "type": "(Float -> Float -> Float) -> Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "direction",
            "comment": "\nThe normalized direction from b to a: (a - b) / |a - b|\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "distance",
            "comment": "\nGet the distance between two Vectors\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Float"
          },
          {
            "name": "div",
            "comment": "\nVector division\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "dot",
            "comment": "\nDot Product\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Float"
          },
          {
            "name": "fromTuple",
            "comment": " Convert (x,y) tuple into a Vec2 ",
            "type": "( Float, Float ) -> Math.Vec2.Vec2"
          },
          {
            "name": "lerp",
            "comment": "\nFind the Vec between 2 Vecs at a given position\nfor example:\n```\nx(0,2)\n    z(1,3.5)\n          y(2,5)\n\nz = lerp 0.5 x y\n```\nwhere 0.5 is the placement of z between x and y\n ",
            "type": "Float -> Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "magnitude",
            "comment": "\nGet magnitude of a Vector (length of the Vector)\n",
            "type": "Math.Vec2.Vec2 -> Float"
          },
          {
            "name": "mapBoth",
            "comment": "\nTransform both x and y with the same function\n",
            "type": "(Float -> Float) -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "mul",
            "comment": "\nVector multiplication\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "neg",
            "comment": "\nNegate a Vector (flip x and y to negative)\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "normalize",
            "comment": "\nA unit vector with the same direction as the given vector: a / |a|\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "scale",
            "comment": "\nScalar Vector multiplication\n",
            "type": "Float -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "sub",
            "comment": "\nVector subtraction\n",
            "type": "Math.Vec2.Vec2 -> Math.Vec2.Vec2 -> Math.Vec2.Vec2"
          },
          {
            "name": "x",
            "comment": "",
            "type": "Focus.Focus { b | x : a } a"
          },
          {
            "name": "y",
            "comment": "",
            "type": "Focus.Focus { b | y : a } a"
          },
          {
            "name": "zero",
            "comment": " An empty Vector ",
            "type": "Math.Vec2.Vec2"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Math.Interpolate",
        "comment": "\n@docs lerp\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lerp",
            "comment": "\nInterpolate the space between 2 values. For example consider\nthe int range from 10 to 20. A `lerp 0.5 10 20  == 15` as `15` is half way (`0.5`) between `10` and `20`\n\n\n",
            "type": "Float -> Float -> Float -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "JOEANDAVERDE/flex-html",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Flex",
        "comment": " Companion library to elm-html. Helps with flexbox layout\n\n# Flex Types\n@docs Direction, Alignment, WrapValue\n\n# Flex Mixins\nMixins can be used alone or as a combinator to specify flex-related styles.\n@docs display, flow, direction, wrap, alignItems, justifyContent, grow, shrink, basis, flex, order, alignSelf\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Alignment",
            "comment": " The `Alignment` type specifies all the values possible for the `alignItems`\nand `justifyConteent` mixins.\n\n  - Start: Content is left-aligned.\n  - Center: Content is center-aligned.\n  - End: Content is right-aligned.\n  - Stretch: Content-width is stretched to fill up the space.\n  - Surround: Extra space is devided into equal spaces around the content.\n",
            "args": [],
            "cases": [
              [
                "Start",
                []
              ],
              [
                "Center",
                []
              ],
              [
                "End",
                []
              ],
              [
                "Stretch",
                []
              ],
              [
                "Surround",
                []
              ]
            ]
          },
          {
            "name": "Direction",
            "comment": " The `Direction` type specifies all the direction values possible for the\n`flexDirection` mixin.\n\n  - Horizontal: Default value. The flexible items are displayed horizontally, as a row.\n  - Vertical: The flexible items are displayed vertically, as a column.\n  - HorizontalReverse: Same as `Horizontal`, but in reverse order.\n  - verticalReverse: Same as `Vertical`, but in reverse order.\n",
            "args": [],
            "cases": [
              [
                "Horizontal",
                []
              ],
              [
                "Vertical",
                []
              ],
              [
                "HorizontalReverse",
                []
              ],
              [
                "VerticalReverse",
                []
              ]
            ]
          },
          {
            "name": "WrapValue",
            "comment": " The `WrapValue` type specifies all the wrapping values possible for the\n`wrap` mixin.\n\n  - Wrap: Specifies that the flexible items will wrap if necessary.\n  - NoWrap: Default value. Specifies that the flexible items will not wrap.\n  - WrapReverse: Specifies that the flexible items will wrap, if necessary, in reverse order.\n",
            "args": [],
            "cases": [
              [
                "Wrap",
                []
              ],
              [
                "NoWrap",
                []
              ],
              [
                "WrapReverse",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "alignItems",
            "comment": " The `alignItems` mixin specifies the default alignment for items inside\nthe flexible container.\n",
            "type": "Flex.Alignment -> List ( String, String )"
          },
          {
            "name": "alignSelf",
            "comment": " The `alignSelf` mixin specifies the alignment for the selected item inside\nthe flexible container.\n",
            "type": "Flex.Alignment -> List ( String, String )"
          },
          {
            "name": "basis",
            "comment": " The `basis` mixin specifies the initial length of a flexible item.\n",
            "type": "String -> List ( String, String )"
          },
          {
            "name": "direction",
            "comment": " The `direction` mixin specifies the direction of the flexible items.\n",
            "type": "Flex.Direction -> List ( String, String )"
          },
          {
            "name": "display",
            "comment": " Displays an element as an block-level flex container. ",
            "type": "List ( String, String )"
          },
          {
            "name": "flex",
            "comment": " The `flex` mixin specifies the length of the item, relative to the rest of\nthe flexible items inside the same container.\n\nIt's a style shorthand for flexGrow, flexShrink and flexBasis\n",
            "type": "Float -> Float -> String -> List ( String, String )"
          },
          {
            "name": "flow",
            "comment": " The `flow` mixin specifies how much the item will grow relative to the rest\nof the flexible items inside the same container.\n",
            "type": "Flex.Direction -> Flex.WrapValue -> List ( String, String )"
          },
          {
            "name": "grow",
            "comment": " The `grow` mixin specifies how much the item will grow relative to the rest\nof the flexible items inside the same container.\n",
            "type": "Float -> List ( String, String )"
          },
          {
            "name": "justifyContent",
            "comment": " The `justifyContent` mixin aligns the flexible container's items when the\nitems do not use all available space on the main-axis.\n",
            "type": "Flex.Alignment -> List ( String, String )"
          },
          {
            "name": "order",
            "comment": " The `order` mixin specifies the order of a flexible item relative to the\nrest of the flexible items inside the same container.\n",
            "type": "Int -> List ( String, String )"
          },
          {
            "name": "shrink",
            "comment": " The `shrink` mixin specifies how the item will shrink relative to the rest\nof the flexible items inside the same container.\n",
            "type": "Float -> List ( String, String )"
          },
          {
            "name": "wrap",
            "comment": " The `wrap` mixin specifies whether the flexible items should wrap or not.\n",
            "type": "Flex.WrapValue -> List ( String, String )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "JoeyEremondi/elm-MultiDimArray",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Array.MultiDim",
        "comment": "\n\nA class for multi-dimensional arrays, which stores the number of coordinates\nat type-level.\n\nInternally, the array is represented as a 1D array, so lookups\nshould be quite fast. However, we provide a safe, clean\ninterface for multi-dimensional lookups and updates.\n\nTo create an array, use a safe-list with the array dimensions:\n\n    import List.SafeList exposing (cons, null)\n    --Creates a 4x6x2 array of zeroes\n    myArray =\n      repeat (4 `cons` 6 `cons` 2 `cons` null ) 0\n\nAccesses and updates use SafeList as well:\n\n    import List.SafeList exposing (cons, null)\n    updatedArray =\n      case get (3 `cons` 1 `cons` 1 `cons` null ) myArray of\n        Nothing -> myArray\n        Just x ->\n          set (3 `cons` 1 `cons` 1 `cons` null ) (2*x) myArray\n\nIf you ever give the wrong number of coordinates, you get a type error:\n\n    --Won't compile\n    updatedArray =\n      case get (3 `cons` 1 `cons` 1 `cons` null ) myArray of\n        Nothing -> myArray\n        Just x ->\n          set (3 `cons` 1 `cons` 1 `cons` null ) (2*x) myArray\n\nWe don't yet support any operations which change the size of the array,\nsuch as push or append. For operations like `foldl` and `foldr`,\nuse the `toFlatArray` function, then the corresponding functions\non Array.Array.\n\n#The Array type and creation functions\n@docs MultiDim, repeat, initialize\n\n#Get array info\n@docs inBounds, dims\n\n#Access and update\n@docs get, set\n\n#Convting to flat List or Array\n@docs toIndexedList, toFlatArray\n\n#Mapping functions\n@docs map, indexedMap\n",
        "aliases": [],
        "types": [
          {
            "name": "MultiDim",
            "comment": " Opaque type for `n`-dimensional arrays containing type `a` ",
            "args": [
              "a",
              "n"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "dims",
            "comment": " Get the dimensions of an array ",
            "type": "Array.MultiDim.MultiDim a n -> List.SafeList.SafeList Int n"
          },
          {
            "name": "get",
            "comment": " Return Just the element if all given coordinates\nare within the array's bounds. Otherwise, return nothing. ",
            "type": "List.SafeList.SafeList Int n -> Array.MultiDim.MultiDim a n -> Maybe.Maybe a"
          },
          {
            "name": "inBounds",
            "comment": " Given array dimensions, and coordinates,\ndetermine if the coordinates are in bounds for the dimensions. ",
            "type": "List.SafeList.SafeList Int n -> List.SafeList.SafeList Int n -> Bool"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element in an array,\nwith access to the coordinates of each element. ",
            "type": "(List.SafeList.SafeList Int n -> a -> b) -> Array.MultiDim.MultiDim a n -> Array.MultiDim.MultiDim b n"
          },
          {
            "name": "initialize",
            "comment": " Given a SafeList of array dimensions,\nand a function to generate an element for each coordinate,\ncreate a new array with the given elements ",
            "type": "List.SafeList.SafeList Int n -> (List.SafeList.SafeList Int n -> a) -> Array.MultiDim.MultiDim a n"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array ",
            "type": "(a -> b) -> Array.MultiDim.MultiDim a n -> Array.MultiDim.MultiDim b n"
          },
          {
            "name": "repeat",
            "comment": " Given a SafeList [n1, n2, ...] of array dimensions,\ncreate an n1 x n2 x ... multi-dimensional array ",
            "type": "List.SafeList.SafeList Int n -> a -> Array.MultiDim.MultiDim a n"
          },
          {
            "name": "set",
            "comment": " Set the element at the given coordinates, if they all\nare within the array's bounds. Otherwise, return the original array. ",
            "type": "List.SafeList.SafeList Int n -> a -> Array.MultiDim.MultiDim a n -> Array.MultiDim.MultiDim a n"
          },
          {
            "name": "toFlatArray",
            "comment": " Convert this array to a 1-dimensional array\nwith elements in lexigraphical order ",
            "type": "Array.MultiDim.MultiDim a n -> Array.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Generate a list of the array's elements,\npaired with their coordinates.\n ",
            "type": "Array.MultiDim.MultiDim a n -> List ( List.SafeList.SafeList Int n, a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "JoeyEremondi/elm-SafeLists",
    "version": "2.0.0",
    "docs": [
      {
        "name": "List.SafeList",
        "comment": "\nThis module provides a form of list which encode their length\nin their type, using the TypeNats library. For example:\n\n    someLength3 : List.SafeList Int (OnePlus (OnePlus (OnePlus (Zero))) )\n    someLength3 = 2 `cons` 3 `cons` 4 `cons` null\n\nList whose length doesn't match their type are forbidden.\nFor example:\n\n    --Gives type mismatch\n    badLength3 : SafeList Int (OnePlus (OnePlus  (Zero)) )\n    badLength3 = 2 `cons` 3 `cons` 4 `cons` null\n\nBecause Elm doesn't have GADTs or DataKinds, it's impossible\nto pattern match on SafeLists. Instead, we provide an \"uncons\"\nfunction, which splits a list which we know to be non-empty\ninto its head and tail.\n\nFor example:\n\n    sumFirstLast =\n      let\n        (h1, t1) = uncons someLength3\n        (_, t2) = uncons t1\n        (h3, t3) = uncons t2\n        tailCheck : SafeList Int Zero\n        tailCheck = t3\n      in\n        h1 + h3\n\nThis notation is awkward, so it's assumed this library\nwill be used on small lists only.\n\n\nAs well, many functions on List.List have been ported over,\nthough filter, foldl and foldr are notably absent, as they\ndo not preserve the length of the list.\n\nBecause Elm is not a higher-kinded language, it is not generally\npossible to use this library when you don't know your list size in advance,\nunless only generic functions like `map` are used.\n\n# Our main type and pseudo-constructors\n@docs SafeList, null, cons\n\n# In lieu of pattern matching:\n@docs uncons, toList, fromList\n\n# The usual map functions\n@docs map, map2, map3, map4, map5, unzip\n\n# Length-preserving fold-like functions\n@docs mapl, mapr, reverseMapr, scanl\n\n# Functions for non-empty lists\n@docs maximum, minimum, head, tail, last\n\n# Utility functions\n@docs  member, reverse, all, any\n\n#Length-preserving sorting functions\n@docs sort, sortBy, sortWith\n",
        "aliases": [],
        "types": [
          {
            "name": "SafeList",
            "comment": " A list with length encoded in its type,\nsupporting a restricted set of operations. ",
            "args": [
              "a",
              "n"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": "",
            "type": "(a -> Bool) -> List.SafeList.SafeList a n -> Bool"
          },
          {
            "name": "any",
            "comment": "",
            "type": "(a -> Bool) -> List.SafeList.SafeList a n -> Bool"
          },
          {
            "name": "cons",
            "comment": " Given a new element and a list of length n, make a list of length n+1.\nHas the same infix precedence as (::) ",
            "type": "a -> List.SafeList.SafeList a n -> List.SafeList.SafeList a (TypeNat.OnePlus n)",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "fromList",
            "comment": " Given a some SafeList, try to convert\na normal list into a SafeList of the same length ",
            "type": "List.SafeList.SafeList a n -> List b -> Maybe.Maybe (List.SafeList.SafeList b n)"
          },
          {
            "name": "head",
            "comment": " SafeList way to get the first element of a list ",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> a"
          },
          {
            "name": "last",
            "comment": " SafeList way to get the last element of a list ",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> a"
          },
          {
            "name": "map",
            "comment": " Works as List.map ",
            "type": "(a -> b) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "map2",
            "comment": "",
            "type": "(a -> b -> c) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n -> List.SafeList.SafeList d n"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n -> List.SafeList.SafeList d n -> List.SafeList.SafeList e n"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f) -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n -> List.SafeList.SafeList c n -> List.SafeList.SafeList d n -> List.SafeList.SafeList e n -> List.SafeList.SafeList f n"
          },
          {
            "name": "mapl",
            "comment": "\nGiven a mapping function and an initial context value,\ntraverse the list left to right, applying our map function with the previously\ncomputed context as argument.\nGeneral folds don't preserve the length of a list, so we use\nthis restricted form of a fold.\n",
            "type": "(( a, c ) -> ( b, c )) -> c -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "mapr",
            "comment": "\nGiven a mapping function and an initial context value,\ntraverse the list right to left, applying our map function with the previously\ncomputed context as argument.\nGeneral folds don't preserve the length of a list, so we use\nthis restricted form of a fold.\n",
            "type": "(( a, c ) -> ( b, c )) -> c -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "maximum",
            "comment": " Given a list of comparable containing at least one element,\n  return its largest element ",
            "type": "List.SafeList.SafeList comparable (TypeNat.OnePlus n) -> comparable"
          },
          {
            "name": "member",
            "comment": "\nLength-preserving list functions, identical to operations on List.List\n",
            "type": "a -> List.SafeList.SafeList a n -> Bool"
          },
          {
            "name": "minimum",
            "comment": " Given a list of comparable containing at least one element,\nreturn its smallest element ",
            "type": "List.SafeList.SafeList comparable (TypeNat.OnePlus n) -> comparable"
          },
          {
            "name": "null",
            "comment": " A list of length 0 ",
            "type": "List.SafeList.SafeList a TypeNat.Zero"
          },
          {
            "name": "reverse",
            "comment": "",
            "type": "List.SafeList.SafeList a n -> List.SafeList.SafeList a n"
          },
          {
            "name": "reverseMapr",
            "comment": "\nLike mapr, but the resulting elements are in reverse order.\nGenerally faster than mapr, use this when order doesn't matter.\n",
            "type": "(( a, c ) -> ( b, c )) -> c -> List.SafeList.SafeList a n -> List.SafeList.SafeList b n"
          },
          {
            "name": "scanl",
            "comment": "\nJust like List.scanl, except we now have a guarantee that we increase the list lenght\nby exactly one, since we always put our initial value in the list.\n",
            "type": "(a -> b -> b) -> b -> List.SafeList.SafeList a n -> List.SafeList.SafeList b (TypeNat.OnePlus n)"
          },
          {
            "name": "sort",
            "comment": " Just like List.sort, but with a guarantee that length is preserved ",
            "type": "List.SafeList.SafeList comparable n -> List.SafeList.SafeList comparable n"
          },
          {
            "name": "sortBy",
            "comment": " Sort based on comparable representatives ",
            "type": "(a -> comparable) -> List.SafeList.SafeList a n -> List.SafeList.SafeList a n"
          },
          {
            "name": "sortWith",
            "comment": " Sort based on an arbitrary comparison of elements ",
            "type": "(a -> a -> Basics.Order) -> List.SafeList.SafeList a n -> List.SafeList.SafeList a n"
          },
          {
            "name": "tail",
            "comment": " SafeList way to remove the first element of a list ",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> List.SafeList.SafeList a n"
          },
          {
            "name": "toList",
            "comment": " Drop type-level information about this list ",
            "type": "List.SafeList.SafeList a n -> List a"
          },
          {
            "name": "uncons",
            "comment": " Split a non-empty list into a head and a tail ",
            "type": "List.SafeList.SafeList a (TypeNat.OnePlus n) -> ( a, List.SafeList.SafeList a n )"
          },
          {
            "name": "unzip",
            "comment": "",
            "type": "List.SafeList.SafeList ( a, b ) n -> ( List.SafeList.SafeList a n, List.SafeList.SafeList b n )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "JoeyEremondi/elm-typenats",
    "version": "1.0.2",
    "docs": [
      {
        "name": "TypeNat",
        "comment": "\nEasy to remember names for type-level natural numbers.\nThese are intended only to be used as \"phantom types:\"\nthat is, there are no values of type `Zero` or `OnePlus a`.\nInstead, they should be arguments to other type constructors.\n\nUse this to represent natural numbers at the type level.\nFor example:\n\n    OnePlus (OnePlus (OnePlus Zero)) -- 3\n\nElm doesn't have DataKinds, so please don't do anything silly like\n`OnePlus (OnePlus (OnePlus (List (Int, Int))))`\ni.e. please only give another TypeNat as the argument to\nOnePlus.\n\n@docs Zero, OnePlus\n\n",
        "aliases": [],
        "types": [
          {
            "name": "OnePlus",
            "comment": "A phantom type constructor to increment a TypeNat,\ncreating a larger TypeNat. ",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Zero",
            "comment": " A phantom type for 0, our base TypeNat. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "JulianKniephoff/elm-time-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Time.Extra",
        "comment": " Utility functions that aren't in the `Time` module\nfrom  `elm-lang/core`.\n\n# Conversions\n@docs fromFps, toFps\n\n# Signals\n@docs timestamps, everyWhen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "everyWhen",
            "comment": " Same as the `Time.every` function,\nbut you can turn it on and off.\n",
            "type": "Time.Time -> Signal.Signal Bool -> Signal.Signal Time.Time"
          },
          {
            "name": "fromFps",
            "comment": " Converts a number of ticks per second\ninto the corresponding interval between to ticks.\n",
            "type": "Float -> Time.Time"
          },
          {
            "name": "timestamps",
            "comment": " Extract the timestamps of the updates of the given signal.\n",
            "type": "Signal.Signal a -> Signal.Signal Time.Time"
          },
          {
            "name": "toFps",
            "comment": " Get the FPS corresponding to a given time between to frames.\n",
            "type": "Time.Time -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "JustusAdam/elm-path",
    "version": "1.3.0",
    "docs": [
      {
        "name": "Path.Url",
        "comment": "\nSpecialized path manipulation functions for working with filepaths as found on the web. For documentation on the API refer to 'Path.Generic'.\n\nReexports all functions from the 'Path.Generic' module, specialized to web related paths.\n\nSince operator reexport does not seem to work, <.> and -<.> have to be imported from the Generic module directly.\n\n# Separator predicates\n@docs pathSeparator, pathSeparators, isPathSeparator, extSeparator, isExtSeparator\n\n# Extension functions\n@docs splitExtension, takeExtension, replaceExtension, dropExtension, addExtension, hasExtension, splitExtensions, dropExtensions, takeExtensions\n\n# Filename/directory functions\n@docs splitFileName, takeFileName, replaceFileName, dropFileName, takeBaseName, replaceBaseName, takeDirectory, replaceDirectory, combine, splitPath, joinPath\n\n# Trailing slash functions\n@docs hasTrailingPathSeparator, addTrailingPathSeparator, dropTrailingPathSeparator\n\n# Specialized operators\n@docs (</>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "</>",
            "comment": "\n  Operator Version of 'combine'\n",
            "type": "String -> String -> String",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "addExtension",
            "comment": "\nAdd an extension, even if there is already one there, equivalent to `<.>`.\n\n    addExtension \"/directory/path\" \"ext\" == \"/directory/path.ext\"\n    addExtension \"file.txt\" \"bib\" == \"file.txt.bib\"\n    addExtension \"file.\" \".bib\" == \"file..bib\"\n    addExtension \"file\" \".bib\" == \"file.bib\"\n    addExtension \"/\" \"x\" == \"/.x\"\n    Valid x => takeFileName (addExtension (addTrailingPathSeparator x) \"ext\") == \".ext\"\n    Windows: addExtension \"\\\\\\\\share\" \".txt\" == \"\\\\\\\\share\\\\.txt\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "addTrailingPathSeparator",
            "comment": "\nAdd a trailing file path separator if one is not already present.\n\n    hasTrailingPathSeparator (addTrailingPathSeparator x)\n    hasTrailingPathSeparator x ==> addTrailingPathSeparator x == x\n    Posix:    addTrailingPathSeparator \"test/rest\" == \"test/rest/\"\n",
            "type": "String -> String"
          },
          {
            "name": "combine",
            "comment": "\nCombine two paths, if the second path starts with a path separator then it returns the second.\n\n    Valid x => combine (takeDirectory x) (takeFileName x) `equalFilePath` x\n\nCombined:\n\n    Posix:   combine \"/\" \"test\" == \"/test\"\n    Posix:   combine \"home\" \"bob\" == \"home/bob\"\n    Posix:   combine \"x:\" \"foo\" == \"x:/foo\"\n    Windows: combine \"C:\\\\foo\" \"bar\" == \"C:\\\\foo\\\\bar\"\n    Windows: combine \"home\" \"bob\" == \"home\\\\bob\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "dropExtension",
            "comment": "\nRemove last extension, and the \".\" preceding it.\n\n    dropExtension \"/directory/path.ext\" == \"/directory/path\"\n    dropExtension x == fst (splitExtension x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropExtensions",
            "comment": "\nDrop all extensions.\n\n    dropExtensions \"/directory/path.ext\" == \"/directory/path\"\n    dropExtensions \"file.tar.gz\" == \"file\"\n    not <| hasExtension <| dropExtensions x\n    not <| any isExtSeparator <| takeFileName <| dropExtensions x\n",
            "type": "String -> String"
          },
          {
            "name": "dropFileName",
            "comment": "\nDrop the filename. Unlike `takeDirectory`, this function will leave\na trailing path separator on the directory.\n\n    dropFileName \"/directory/file.ext\" == \"/directory/\"\n    dropFileName x == fst (splitFileName x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropTrailingPathSeparator",
            "comment": "\nRemove any trailing path separators\n\n    dropTrailingPathSeparator \"file/test/\" == \"file/test\"\n              dropTrailingPathSeparator \"/\" == \"/\"\n    Windows:  dropTrailingPathSeparator \"\\\\\" == \"\\\\\"\n",
            "type": "String -> String"
          },
          {
            "name": "extSeparator",
            "comment": "\nFile extension character\n\n    extSeparator == '.'\n",
            "type": "String"
          },
          {
            "name": "hasExtension",
            "comment": "\nDoes the given filename have an extension?\n\n    hasExtension \"/directory/path.ext\" == True\n    hasExtension \"/directory/path\" == False\n    ull (takeExtension x) == not (hasExtension x)\n",
            "type": "String -> Bool"
          },
          {
            "name": "hasTrailingPathSeparator",
            "comment": "\nIs an item either a directory or the last character a path separator?\n\n    hasTrailingPathSeparator \"test\" == False\n    hasTrailingPathSeparator \"test/\" == True\n",
            "type": "String -> Bool"
          },
          {
            "name": "isExtSeparator",
            "comment": "\nIs the character an extension character?\n\n    isExtSeparator a == (a == extSeparator)\n",
            "type": "String -> Bool"
          },
          {
            "name": "isPathSeparator",
            "comment": "\nRather than using `== pathSeparator`, use this. Test if somethin is a path separator.\n\n    isPathSeparator a == (a `elem` pathSeparators)\n",
            "type": "String -> Bool"
          },
          {
            "name": "joinPath",
            "comment": "\nJoin path elements back together.\n\n    joinPath [\"/\",\"directory/\",\"file.ext\"] == \"/directory/file.ext\"\n    Valid x => joinPath (splitPath x) == x\n    joinPath [] == \"\"\n    Posix: joinPath [\"test\",\"file\",\"path\"] == \"test/file/path\"\n",
            "type": "List String -> String"
          },
          {
            "name": "pathSeparator",
            "comment": "\nThe character that separates directories. In the case where more than\none character is possible, `pathSeparator` is the 'ideal' one.\n\n    Windows: pathSeparator == '\\\\'\n    Posix:   pathSeparator ==  '/'\n    isPathSeparator pathSeparator\n",
            "type": "String"
          },
          {
            "name": "pathSeparators",
            "comment": "\nThe list of all possible separators.\n\n    Windows: pathSeparators == ['\\\\', '/']\n    Posix:   pathSeparators == ['/']\n    pathSeparator `elem` pathSeparators\n",
            "type": "List String"
          },
          {
            "name": "replaceBaseName",
            "comment": "\nSet the base name.\n\n    replaceBaseName \"/directory/other.ext\" \"file\" == \"/directory/file.ext\"\n    replaceBaseName \"file/test.txt\" \"bob\" == \"file/bob.txt\"\n    replaceBaseName \"fred\" \"bill\" == \"bill\"\n    replaceBaseName \"/dave/fred/bob.gz.tar\" \"new\" == \"/dave/fred/new.tar\"\n    Valid x => replaceBaseName x (takeBaseName x) == x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceDirectory",
            "comment": "\nSet the directory, keeping the filename the same.\n\n    replaceDirectory \"root/file.ext\" \"/directory/\" == \"/directory/file.ext\"\n    Valid x => replaceDirectory x (takeDirectory x) `equalFilePath` x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceExtension",
            "comment": "\nSet the extension of a file, overwriting one if already present, equivalent to `-<.>`.\n\n    replaceExtension \"/directory/path.txt\" \"ext\" == \"/directory/path.ext\"\n    replaceExtension \"/directory/path.txt\" \".ext\" == \"/directory/path.ext\"\n    replaceExtension \"file.txt\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"bob\" == \"file.bob\"\n    replaceExtension \"file\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"\" == \"file\"\n    replaceExtension \"file.fred.bob\" \"txt\" == \"file.fred.txt\"\n    replaceExtension x y == addExtension (dropExtension x) y\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceFileName",
            "comment": "\nSet the filename.\n\n    replaceFileName \"/directory/other.txt\" \"file.ext\" == \"/directory/file.ext\"\n    Valid x => replaceFileName x (takeFileName x) == x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "splitExtension",
            "comment": "\nSplit on the extension. `addExtension` is the inverse.\n\n    splitExtension \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    uncurry (++) (splitExtension x) == x\n    Valid x => uncurry addExtension (splitExtension x) == x\n    splitExtension \"file.txt\" == (\"file\",\".txt\")\n    splitExtension \"file\" == (\"file\",\"\")\n    splitExtension \"file/file.txt\" == (\"file/file\",\".txt\")\n    splitExtension \"file.txt/boris\" == (\"file.txt/boris\",\"\")\n    splitExtension \"file.txt/boris.ext\" == (\"file.txt/boris\",\".ext\")\n    splitExtension \"file/path.txt.bob.fred\" == (\"file/path.txt.bob\",\".fred\")\n    splitExtension \"file/path.txt/\" == (\"file/path.txt/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitExtensions",
            "comment": "\nSplit on all extensions.\n\n    splitExtensions \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n    uncurry (++) (splitExtensions x) == x\n    Valid x => uncurry addExtension (splitExtensions x) == x\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitFileName",
            "comment": "\nOperations on a filepath, as a list of directories\n\nSplit a filename into directory and file. `combine` is the inverse.\nThe first component will often end with a trailing slash.\n\n    splitFileName \"/directory/file.ext\" == (\"/directory/\",\"file.ext\")\n    Valid x => isValid (fst (splitFileName x))\n    splitFileName \"file/bob.txt\" == (\"file/\", \"bob.txt\")\n    splitFileName \"file/\" == (\"file/\", \"\")\n    splitFileName \"bob\" == (\"\", \"bob\")\n    Posix:   splitFileName \"/\" == (\"/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitPath",
            "comment": "\nSplit a path by the directory separator.\n\n    splitPath \"/directory/file.ext\" == [\"/\",\"directory/\",\"file.ext\"]\n    concat (splitPath x) == x\n    splitPath \"test//item/\" == [\"test//\",\"item/\"]\n    splitPath \"test/item/file\" == [\"test/\",\"item/\",\"file\"]\n    splitPath \"\" == []\n    Windows: splitPath \"c:\\\\test\\\\path\" == [\"c:\\\\\",\"test\\\\\",\"path\"]\n    Posix:   splitPath \"/file/test\" == [\"/\",\"file/\",\"test\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "takeBaseName",
            "comment": "\nGet the base name, without an extension or path.\n\n    takeBaseName \"/directory/file.ext\" == \"file\"\n    takeBaseName \"file/test.txt\" == \"test\"\n    takeBaseName \"dave.ext\" == \"dave\"\n    takeBaseName \"\" == \"\"\n    takeBaseName \"test\" == \"test\"\n    takeBaseName (addTrailingPathSeparator x) == \"\"\n    takeBaseName \"file/file.tar.gz\" == \"file.tar\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeDirectory",
            "comment": "\nGet the directory name, move up one level.\n\n              takeDirectory \"/directory/other.ext\" == \"/directory\"\n              takeDirectory x `isPrefixOf` x || takeDirectory x == \".\"\n              takeDirectory \"foo\" == \".\"\n              takeDirectory \"/\" == \"/\"\n              takeDirectory \"/foo\" == \"/\"\n              takeDirectory \"/foo/bar/baz\" == \"/foo/bar\"\n              takeDirectory \"/foo/bar/baz/\" == \"/foo/bar/baz\"\n              takeDirectory \"foo/bar/baz\" == \"foo/bar\"\n    Windows:  takeDirectory \"foo\\\\bar\" == \"foo\"\n    Windows:  takeDirectory \"foo\\\\bar\\\\\\\\\" == \"foo\\\\bar\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtension",
            "comment": "\nGet the extension of a file, returns \"\" for no extension, .ext otherwise.\n\n    takeExtension \"/directory/path.ext\" == \".ext\"\n    takeExtension x == snd (splitExtension x)\n    Valid x => takeExtension (addExtension x \"ext\") == \".ext\"\n    Valid x => takeExtension (replaceExtension x \"ext\") == \".ext\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtensions",
            "comment": "\nGet all extensions.\n\n    takeExtensions \"/directory/path.ext\" == \".ext\"\n    takeExtensions \"file.tar.gz\" == \".tar.gz\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeFileName",
            "comment": "\nGet the file name.\n\n    takeFileName \"/directory/file.ext\" == \"file.ext\"\n    takeFileName \"test/\" == \"\"\n    takeFileName x `isSuffixOf` x\n    takeFileName x == snd (splitFileName x)\n    Valid x => takeFileName (replaceFileName x \"fred\") == \"fred\"\n    Valid x => takeFileName (x </> \"fred\") == \"fred\"\n    Valid x => isRelative (takeFileName x)\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Path.Windows",
        "comment": "\nSpecialized path manipulation functions for working with Windows paths. For documentation on the API refer to 'Path.Generic'.\n\nThis module is not very well tested. PLease make sure the functions you use work as expected.\n\nReexports all functions from the 'Path.Generic' module, specialized to Windows paths.\n\nSince operator reexport does not seem to work, <.> and -<.> have to be imported from the Generic module directly.\n\n# Separator predicates\n@docs pathSeparator, pathSeparators, isPathSeparator, extSeparator, isExtSeparator\n\n# Extension functions\n@docs splitExtension, takeExtension, replaceExtension, dropExtension, addExtension, hasExtension, splitExtensions, dropExtensions, takeExtensions\n\n# Filename/directory functions\n@docs splitFileName, takeFileName, replaceFileName, dropFileName, takeBaseName, replaceBaseName, takeDirectory, replaceDirectory, combine, splitPath, joinPath\n\n# Trailing slash functions\n@docs hasTrailingPathSeparator, addTrailingPathSeparator, dropTrailingPathSeparator\n\n# Specialized operators\n@docs (</>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "</>",
            "comment": "\n  Operator Version of 'combine'\n",
            "type": "String -> String -> String",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "addExtension",
            "comment": "\nAdd an extension, even if there is already one there, equivalent to `<.>`.\n\n    addExtension \"/directory/path\" \"ext\" == \"/directory/path.ext\"\n    addExtension \"file.txt\" \"bib\" == \"file.txt.bib\"\n    addExtension \"file.\" \".bib\" == \"file..bib\"\n    addExtension \"file\" \".bib\" == \"file.bib\"\n    addExtension \"/\" \"x\" == \"/.x\"\n    Valid x => takeFileName (addExtension (addTrailingPathSeparator x) \"ext\") == \".ext\"\n    Windows: addExtension \"\\\\\\\\share\" \".txt\" == \"\\\\\\\\share\\\\.txt\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "addTrailingPathSeparator",
            "comment": "\nAdd a trailing file path separator if one is not already present.\n\n    hasTrailingPathSeparator (addTrailingPathSeparator x)\n    hasTrailingPathSeparator x ==> addTrailingPathSeparator x == x\n    Posix:    addTrailingPathSeparator \"test/rest\" == \"test/rest/\"\n",
            "type": "String -> String"
          },
          {
            "name": "combine",
            "comment": "\nCombine two paths, if the second path starts with a path separator then it returns the second.\n\n    Valid x => combine (takeDirectory x) (takeFileName x) `equalFilePath` x\n\nCombined:\n\n    Posix:   combine \"/\" \"test\" == \"/test\"\n    Posix:   combine \"home\" \"bob\" == \"home/bob\"\n    Posix:   combine \"x:\" \"foo\" == \"x:/foo\"\n    Windows: combine \"C:\\\\foo\" \"bar\" == \"C:\\\\foo\\\\bar\"\n    Windows: combine \"home\" \"bob\" == \"home\\\\bob\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "dropExtension",
            "comment": "\nRemove last extension, and the \".\" preceding it.\n\n    dropExtension \"/directory/path.ext\" == \"/directory/path\"\n    dropExtension x == fst (splitExtension x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropExtensions",
            "comment": "\nDrop all extensions.\n\n    dropExtensions \"/directory/path.ext\" == \"/directory/path\"\n    dropExtensions \"file.tar.gz\" == \"file\"\n    not <| hasExtension <| dropExtensions x\n    not <| any isExtSeparator <| takeFileName <| dropExtensions x\n",
            "type": "String -> String"
          },
          {
            "name": "dropFileName",
            "comment": "\nDrop the filename. Unlike `takeDirectory`, this function will leave\na trailing path separator on the directory.\n\n    dropFileName \"/directory/file.ext\" == \"/directory/\"\n    dropFileName x == fst (splitFileName x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropTrailingPathSeparator",
            "comment": "\nRemove any trailing path separators\n\n    dropTrailingPathSeparator \"file/test/\" == \"file/test\"\n              dropTrailingPathSeparator \"/\" == \"/\"\n    Windows:  dropTrailingPathSeparator \"\\\\\" == \"\\\\\"\n",
            "type": "String -> String"
          },
          {
            "name": "extSeparator",
            "comment": "\nFile extension character\n\n    extSeparator == '.'\n",
            "type": "String"
          },
          {
            "name": "hasExtension",
            "comment": "\nDoes the given filename have an extension?\n\n    hasExtension \"/directory/path.ext\" == True\n    hasExtension \"/directory/path\" == False\n    ull (takeExtension x) == not (hasExtension x)\n",
            "type": "String -> Bool"
          },
          {
            "name": "hasTrailingPathSeparator",
            "comment": "\nIs an item either a directory or the last character a path separator?\n\n    hasTrailingPathSeparator \"test\" == False\n    hasTrailingPathSeparator \"test/\" == True\n",
            "type": "String -> Bool"
          },
          {
            "name": "isExtSeparator",
            "comment": "\nIs the character an extension character?\n\n    isExtSeparator a == (a == extSeparator)\n",
            "type": "String -> Bool"
          },
          {
            "name": "isPathSeparator",
            "comment": "\nRather than using `== pathSeparator`, use this. Test if somethin is a path separator.\n\n    isPathSeparator a == (a `elem` pathSeparators)\n",
            "type": "String -> Bool"
          },
          {
            "name": "joinPath",
            "comment": "\nJoin path elements back together.\n\n    joinPath [\"/\",\"directory/\",\"file.ext\"] == \"/directory/file.ext\"\n    Valid x => joinPath (splitPath x) == x\n    joinPath [] == \"\"\n    Posix: joinPath [\"test\",\"file\",\"path\"] == \"test/file/path\"\n",
            "type": "List String -> String"
          },
          {
            "name": "pathSeparator",
            "comment": "\nThe character that separates directories. In the case where more than\none character is possible, `pathSeparator` is the 'ideal' one.\n\n    Windows: pathSeparator == '\\\\'\n    Posix:   pathSeparator ==  '/'\n    isPathSeparator pathSeparator\n",
            "type": "String"
          },
          {
            "name": "pathSeparators",
            "comment": "\nThe list of all possible separators.\n\n    Windows: pathSeparators == ['\\\\', '/']\n    Posix:   pathSeparators == ['/']\n    pathSeparator `elem` pathSeparators\n",
            "type": "List String"
          },
          {
            "name": "replaceBaseName",
            "comment": "\nSet the base name.\n\n    replaceBaseName \"/directory/other.ext\" \"file\" == \"/directory/file.ext\"\n    replaceBaseName \"file/test.txt\" \"bob\" == \"file/bob.txt\"\n    replaceBaseName \"fred\" \"bill\" == \"bill\"\n    replaceBaseName \"/dave/fred/bob.gz.tar\" \"new\" == \"/dave/fred/new.tar\"\n    Valid x => replaceBaseName x (takeBaseName x) == x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceDirectory",
            "comment": "\nSet the directory, keeping the filename the same.\n\n    replaceDirectory \"root/file.ext\" \"/directory/\" == \"/directory/file.ext\"\n    Valid x => replaceDirectory x (takeDirectory x) `equalFilePath` x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceExtension",
            "comment": "\nSet the extension of a file, overwriting one if already present, equivalent to `-<.>`.\n\n    replaceExtension \"/directory/path.txt\" \"ext\" == \"/directory/path.ext\"\n    replaceExtension \"/directory/path.txt\" \".ext\" == \"/directory/path.ext\"\n    replaceExtension \"file.txt\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"bob\" == \"file.bob\"\n    replaceExtension \"file\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"\" == \"file\"\n    replaceExtension \"file.fred.bob\" \"txt\" == \"file.fred.txt\"\n    replaceExtension x y == addExtension (dropExtension x) y\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceFileName",
            "comment": "\nSet the filename.\n\n    replaceFileName \"/directory/other.txt\" \"file.ext\" == \"/directory/file.ext\"\n    Valid x => replaceFileName x (takeFileName x) == x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "splitExtension",
            "comment": "\nSplit on the extension. `addExtension` is the inverse.\n\n    splitExtension \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    uncurry (++) (splitExtension x) == x\n    Valid x => uncurry addExtension (splitExtension x) == x\n    splitExtension \"file.txt\" == (\"file\",\".txt\")\n    splitExtension \"file\" == (\"file\",\"\")\n    splitExtension \"file/file.txt\" == (\"file/file\",\".txt\")\n    splitExtension \"file.txt/boris\" == (\"file.txt/boris\",\"\")\n    splitExtension \"file.txt/boris.ext\" == (\"file.txt/boris\",\".ext\")\n    splitExtension \"file/path.txt.bob.fred\" == (\"file/path.txt.bob\",\".fred\")\n    splitExtension \"file/path.txt/\" == (\"file/path.txt/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitExtensions",
            "comment": "\nSplit on all extensions.\n\n    splitExtensions \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n    uncurry (++) (splitExtensions x) == x\n    Valid x => uncurry addExtension (splitExtensions x) == x\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitFileName",
            "comment": "\nOperations on a filepath, as a list of directories\n\nSplit a filename into directory and file. `combine` is the inverse.\nThe first component will often end with a trailing slash.\n\n    splitFileName \"/directory/file.ext\" == (\"/directory/\",\"file.ext\")\n    Valid x => isValid (fst (splitFileName x))\n    splitFileName \"file/bob.txt\" == (\"file/\", \"bob.txt\")\n    splitFileName \"file/\" == (\"file/\", \"\")\n    splitFileName \"bob\" == (\"\", \"bob\")\n    Posix:   splitFileName \"/\" == (\"/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitPath",
            "comment": "\nSplit a path by the directory separator.\n\n    splitPath \"/directory/file.ext\" == [\"/\",\"directory/\",\"file.ext\"]\n    concat (splitPath x) == x\n    splitPath \"test//item/\" == [\"test//\",\"item/\"]\n    splitPath \"test/item/file\" == [\"test/\",\"item/\",\"file\"]\n    splitPath \"\" == []\n    Windows: splitPath \"c:\\\\test\\\\path\" == [\"c:\\\\\",\"test\\\\\",\"path\"]\n    Posix:   splitPath \"/file/test\" == [\"/\",\"file/\",\"test\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "takeBaseName",
            "comment": "\nGet the base name, without an extension or path.\n\n    takeBaseName \"/directory/file.ext\" == \"file\"\n    takeBaseName \"file/test.txt\" == \"test\"\n    takeBaseName \"dave.ext\" == \"dave\"\n    takeBaseName \"\" == \"\"\n    takeBaseName \"test\" == \"test\"\n    takeBaseName (addTrailingPathSeparator x) == \"\"\n    takeBaseName \"file/file.tar.gz\" == \"file.tar\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeDirectory",
            "comment": "\nGet the directory name, move up one level.\n\n              takeDirectory \"/directory/other.ext\" == \"/directory\"\n              takeDirectory x `isPrefixOf` x || takeDirectory x == \".\"\n              takeDirectory \"foo\" == \".\"\n              takeDirectory \"/\" == \"/\"\n              takeDirectory \"/foo\" == \"/\"\n              takeDirectory \"/foo/bar/baz\" == \"/foo/bar\"\n              takeDirectory \"/foo/bar/baz/\" == \"/foo/bar/baz\"\n              takeDirectory \"foo/bar/baz\" == \"foo/bar\"\n    Windows:  takeDirectory \"foo\\\\bar\" == \"foo\"\n    Windows:  takeDirectory \"foo\\\\bar\\\\\\\\\" == \"foo\\\\bar\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtension",
            "comment": "\nGet the extension of a file, returns \"\" for no extension, .ext otherwise.\n\n    takeExtension \"/directory/path.ext\" == \".ext\"\n    takeExtension x == snd (splitExtension x)\n    Valid x => takeExtension (addExtension x \"ext\") == \".ext\"\n    Valid x => takeExtension (replaceExtension x \"ext\") == \".ext\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtensions",
            "comment": "\nGet all extensions.\n\n    takeExtensions \"/directory/path.ext\" == \".ext\"\n    takeExtensions \"file.tar.gz\" == \".tar.gz\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeFileName",
            "comment": "\nGet the file name.\n\n    takeFileName \"/directory/file.ext\" == \"file.ext\"\n    takeFileName \"test/\" == \"\"\n    takeFileName x `isSuffixOf` x\n    takeFileName x == snd (splitFileName x)\n    Valid x => takeFileName (replaceFileName x \"fred\") == \"fred\"\n    Valid x => takeFileName (x </> \"fred\") == \"fred\"\n    Valid x => isRelative (takeFileName x)\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Path.Posix",
        "comment": "\nSpecialized path manipulation functions for working with Posix paths. For documentation on the API refer to 'Path.Generic'.\n\nReexports all functions from the 'Path.Generic' module, specialized to Posix paths.\n\nSince operator reexport does not seem to work, <.> and -<.> have to be imported from the Generic module directly.\n\n# Separator predicates\n@docs pathSeparator, pathSeparators, isPathSeparator, extSeparator, isExtSeparator\n\n# Extension functions\n@docs splitExtension, takeExtension, replaceExtension, dropExtension, addExtension, hasExtension, splitExtensions, dropExtensions, takeExtensions\n\n# Filename/directory functions\n@docs splitFileName, takeFileName, replaceFileName, dropFileName, takeBaseName, replaceBaseName, takeDirectory, replaceDirectory, combine, splitPath, joinPath\n\n# Trailing slash functions\n@docs hasTrailingPathSeparator, addTrailingPathSeparator, dropTrailingPathSeparator\n\n# Specialized operators\n@docs (</>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "</>",
            "comment": "\n  Operator Version of 'combine'\n",
            "type": "String -> String -> String",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "addExtension",
            "comment": "\nAdd an extension, even if there is already one there, equivalent to `<.>`.\n\n    addExtension \"/directory/path\" \"ext\" == \"/directory/path.ext\"\n    addExtension \"file.txt\" \"bib\" == \"file.txt.bib\"\n    addExtension \"file.\" \".bib\" == \"file..bib\"\n    addExtension \"file\" \".bib\" == \"file.bib\"\n    addExtension \"/\" \"x\" == \"/.x\"\n    Valid x => takeFileName (addExtension (addTrailingPathSeparator x) \"ext\") == \".ext\"\n    Windows: addExtension \"\\\\\\\\share\" \".txt\" == \"\\\\\\\\share\\\\.txt\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "addTrailingPathSeparator",
            "comment": "\nAdd a trailing file path separator if one is not already present.\n\n    hasTrailingPathSeparator (addTrailingPathSeparator x)\n    hasTrailingPathSeparator x ==> addTrailingPathSeparator x == x\n    Posix:    addTrailingPathSeparator \"test/rest\" == \"test/rest/\"\n",
            "type": "String -> String"
          },
          {
            "name": "combine",
            "comment": "\nCombine two paths, if the second path starts with a path separator then it returns the second.\n\n    Valid x => combine (takeDirectory x) (takeFileName x) `equalFilePath` x\n\nCombined:\n\n    Posix:   combine \"/\" \"test\" == \"/test\"\n    Posix:   combine \"home\" \"bob\" == \"home/bob\"\n    Posix:   combine \"x:\" \"foo\" == \"x:/foo\"\n    Windows: combine \"C:\\\\foo\" \"bar\" == \"C:\\\\foo\\\\bar\"\n    Windows: combine \"home\" \"bob\" == \"home\\\\bob\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "dropExtension",
            "comment": "\nRemove last extension, and the \".\" preceding it.\n\n    dropExtension \"/directory/path.ext\" == \"/directory/path\"\n    dropExtension x == fst (splitExtension x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropExtensions",
            "comment": "\nDrop all extensions.\n\n    dropExtensions \"/directory/path.ext\" == \"/directory/path\"\n    dropExtensions \"file.tar.gz\" == \"file\"\n    not <| hasExtension <| dropExtensions x\n    not <| any isExtSeparator <| takeFileName <| dropExtensions x\n",
            "type": "String -> String"
          },
          {
            "name": "dropFileName",
            "comment": "\nDrop the filename. Unlike `takeDirectory`, this function will leave\na trailing path separator on the directory.\n\n    dropFileName \"/directory/file.ext\" == \"/directory/\"\n    dropFileName x == fst (splitFileName x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropTrailingPathSeparator",
            "comment": "\nRemove any trailing path separators\n\n    dropTrailingPathSeparator \"file/test/\" == \"file/test\"\n              dropTrailingPathSeparator \"/\" == \"/\"\n    Windows:  dropTrailingPathSeparator \"\\\\\" == \"\\\\\"\n",
            "type": "String -> String"
          },
          {
            "name": "extSeparator",
            "comment": "\nFile extension character\n\n    extSeparator == '.'\n",
            "type": "String"
          },
          {
            "name": "hasExtension",
            "comment": "\nDoes the given filename have an extension?\n\n    hasExtension \"/directory/path.ext\" == True\n    hasExtension \"/directory/path\" == False\n    ull (takeExtension x) == not (hasExtension x)\n",
            "type": "String -> Bool"
          },
          {
            "name": "hasTrailingPathSeparator",
            "comment": "\nIs an item either a directory or the last character a path separator?\n\n    hasTrailingPathSeparator \"test\" == False\n    hasTrailingPathSeparator \"test/\" == True\n",
            "type": "String -> Bool"
          },
          {
            "name": "isExtSeparator",
            "comment": "\nIs the character an extension character?\n\n    isExtSeparator a == (a == extSeparator)\n",
            "type": "String -> Bool"
          },
          {
            "name": "isPathSeparator",
            "comment": "\nRather than using `== pathSeparator`, use this. Test if somethin is a path separator.\n\n    isPathSeparator a == (a `elem` pathSeparators)\n",
            "type": "String -> Bool"
          },
          {
            "name": "joinPath",
            "comment": "\nJoin path elements back together.\n\n    joinPath [\"/\",\"directory/\",\"file.ext\"] == \"/directory/file.ext\"\n    Valid x => joinPath (splitPath x) == x\n    joinPath [] == \"\"\n    Posix: joinPath [\"test\",\"file\",\"path\"] == \"test/file/path\"\n",
            "type": "List String -> String"
          },
          {
            "name": "pathSeparator",
            "comment": "\nThe character that separates directories. In the case where more than\none character is possible, `pathSeparator` is the 'ideal' one.\n\n    Windows: pathSeparator == '\\\\'\n    Posix:   pathSeparator ==  '/'\n    isPathSeparator pathSeparator\n",
            "type": "String"
          },
          {
            "name": "pathSeparators",
            "comment": "\nThe list of all possible separators.\n\n    Windows: pathSeparators == ['\\\\', '/']\n    Posix:   pathSeparators == ['/']\n    pathSeparator `elem` pathSeparators\n",
            "type": "List String"
          },
          {
            "name": "replaceBaseName",
            "comment": "\nSet the base name.\n\n    replaceBaseName \"/directory/other.ext\" \"file\" == \"/directory/file.ext\"\n    replaceBaseName \"file/test.txt\" \"bob\" == \"file/bob.txt\"\n    replaceBaseName \"fred\" \"bill\" == \"bill\"\n    replaceBaseName \"/dave/fred/bob.gz.tar\" \"new\" == \"/dave/fred/new.tar\"\n    Valid x => replaceBaseName x (takeBaseName x) == x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceDirectory",
            "comment": "\nSet the directory, keeping the filename the same.\n\n    replaceDirectory \"root/file.ext\" \"/directory/\" == \"/directory/file.ext\"\n    Valid x => replaceDirectory x (takeDirectory x) `equalFilePath` x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceExtension",
            "comment": "\nSet the extension of a file, overwriting one if already present, equivalent to `-<.>`.\n\n    replaceExtension \"/directory/path.txt\" \"ext\" == \"/directory/path.ext\"\n    replaceExtension \"/directory/path.txt\" \".ext\" == \"/directory/path.ext\"\n    replaceExtension \"file.txt\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"bob\" == \"file.bob\"\n    replaceExtension \"file\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"\" == \"file\"\n    replaceExtension \"file.fred.bob\" \"txt\" == \"file.fred.txt\"\n    replaceExtension x y == addExtension (dropExtension x) y\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceFileName",
            "comment": "\nSet the filename.\n\n    replaceFileName \"/directory/other.txt\" \"file.ext\" == \"/directory/file.ext\"\n    Valid x => replaceFileName x (takeFileName x) == x\n",
            "type": "String -> String -> String"
          },
          {
            "name": "splitExtension",
            "comment": "\nSplit on the extension. `addExtension` is the inverse.\n\n    splitExtension \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    uncurry (++) (splitExtension x) == x\n    Valid x => uncurry addExtension (splitExtension x) == x\n    splitExtension \"file.txt\" == (\"file\",\".txt\")\n    splitExtension \"file\" == (\"file\",\"\")\n    splitExtension \"file/file.txt\" == (\"file/file\",\".txt\")\n    splitExtension \"file.txt/boris\" == (\"file.txt/boris\",\"\")\n    splitExtension \"file.txt/boris.ext\" == (\"file.txt/boris\",\".ext\")\n    splitExtension \"file/path.txt.bob.fred\" == (\"file/path.txt.bob\",\".fred\")\n    splitExtension \"file/path.txt/\" == (\"file/path.txt/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitExtensions",
            "comment": "\nSplit on all extensions.\n\n    splitExtensions \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n    uncurry (++) (splitExtensions x) == x\n    Valid x => uncurry addExtension (splitExtensions x) == x\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitFileName",
            "comment": "\nOperations on a filepath, as a list of directories\n\nSplit a filename into directory and file. `combine` is the inverse.\nThe first component will often end with a trailing slash.\n\n    splitFileName \"/directory/file.ext\" == (\"/directory/\",\"file.ext\")\n    Valid x => isValid (fst (splitFileName x))\n    splitFileName \"file/bob.txt\" == (\"file/\", \"bob.txt\")\n    splitFileName \"file/\" == (\"file/\", \"\")\n    splitFileName \"bob\" == (\"\", \"bob\")\n    Posix:   splitFileName \"/\" == (\"/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitPath",
            "comment": "\nSplit a path by the directory separator.\n\n    splitPath \"/directory/file.ext\" == [\"/\",\"directory/\",\"file.ext\"]\n    concat (splitPath x) == x\n    splitPath \"test//item/\" == [\"test//\",\"item/\"]\n    splitPath \"test/item/file\" == [\"test/\",\"item/\",\"file\"]\n    splitPath \"\" == []\n    Windows: splitPath \"c:\\\\test\\\\path\" == [\"c:\\\\\",\"test\\\\\",\"path\"]\n    Posix:   splitPath \"/file/test\" == [\"/\",\"file/\",\"test\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "takeBaseName",
            "comment": "\nGet the base name, without an extension or path.\n\n    takeBaseName \"/directory/file.ext\" == \"file\"\n    takeBaseName \"file/test.txt\" == \"test\"\n    takeBaseName \"dave.ext\" == \"dave\"\n    takeBaseName \"\" == \"\"\n    takeBaseName \"test\" == \"test\"\n    takeBaseName (addTrailingPathSeparator x) == \"\"\n    takeBaseName \"file/file.tar.gz\" == \"file.tar\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeDirectory",
            "comment": "\nGet the directory name, move up one level.\n\n              takeDirectory \"/directory/other.ext\" == \"/directory\"\n              takeDirectory x `isPrefixOf` x || takeDirectory x == \".\"\n              takeDirectory \"foo\" == \".\"\n              takeDirectory \"/\" == \"/\"\n              takeDirectory \"/foo\" == \"/\"\n              takeDirectory \"/foo/bar/baz\" == \"/foo/bar\"\n              takeDirectory \"/foo/bar/baz/\" == \"/foo/bar/baz\"\n              takeDirectory \"foo/bar/baz\" == \"foo/bar\"\n    Windows:  takeDirectory \"foo\\\\bar\" == \"foo\"\n    Windows:  takeDirectory \"foo\\\\bar\\\\\\\\\" == \"foo\\\\bar\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtension",
            "comment": "\nGet the extension of a file, returns \"\" for no extension, .ext otherwise.\n\n    takeExtension \"/directory/path.ext\" == \".ext\"\n    takeExtension x == snd (splitExtension x)\n    Valid x => takeExtension (addExtension x \"ext\") == \".ext\"\n    Valid x => takeExtension (replaceExtension x \"ext\") == \".ext\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtensions",
            "comment": "\nGet all extensions.\n\n    takeExtensions \"/directory/path.ext\" == \".ext\"\n    takeExtensions \"file.tar.gz\" == \".tar.gz\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeFileName",
            "comment": "\nGet the file name.\n\n    takeFileName \"/directory/file.ext\" == \"file.ext\"\n    takeFileName \"test/\" == \"\"\n    takeFileName x `isSuffixOf` x\n    takeFileName x == snd (splitFileName x)\n    Valid x => takeFileName (replaceFileName x \"fred\") == \"fred\"\n    Valid x => takeFileName (x </> \"fred\") == \"fred\"\n    Valid x => isRelative (takeFileName x)\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Path.Generic",
        "comment": "\nFunctions for working with paths, parameterized over the platform.\n\nIf you use the specialized versions from 'Path.Windows', 'Path.Posix' or 'Path.Url' the 'Platform' parameter is to be omitted.\n\n# Platforms\n@docs Platform\n\n# Separator predicates\n@docs pathSeparator, pathSeparators, isPathSeparator, extSeparator, isExtSeparator\n\n# Extension functions\n@docs splitExtension, takeExtension, replaceExtension, (-<.>), dropExtension, addExtension, hasExtension, (<.>), splitExtensions, dropExtensions, takeExtensions\n\n# Filename/directory functions\n@docs splitFileName, takeFileName, replaceFileName, dropFileName, takeBaseName, replaceBaseName, takeDirectory, replaceDirectory, combine, splitPath, joinPath\n\n# Trailing slash functions\n@docs hasTrailingPathSeparator, addTrailingPathSeparator, dropTrailingPathSeparator\n",
        "aliases": [],
        "types": [
          {
            "name": "Platform",
            "comment": "\nAvailable platforms for path manipulations.\n\n'Windows', 'Posix' are relatively self explanatory\n\n'Url' is specialized to filepaths as used on the web\n",
            "args": [],
            "cases": [
              [
                "Posix",
                []
              ],
              [
                "Windows",
                []
              ],
              [
                "Url",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "-<.>",
            "comment": "\nOperator version of `replaceExtension`\n",
            "type": "String -> String -> String",
            "associativity": "right",
            "precedence": 7
          },
          {
            "name": "<.>",
            "comment": "\nOperator version of `addExtension`\n",
            "type": "String -> String -> String",
            "associativity": "right",
            "precedence": 7
          },
          {
            "name": "addExtension",
            "comment": "\nAdd an extension, even if there is already one there, equivalent to `<.>`.\n\n    addExtension \"/directory/path\" \"ext\" == \"/directory/path.ext\"\n    addExtension \"file.txt\" \"bib\" == \"file.txt.bib\"\n    addExtension \"file.\" \".bib\" == \"file..bib\"\n    addExtension \"file\" \".bib\" == \"file.bib\"\n    addExtension \"/\" \"x\" == \"/.x\"\n    Valid x => takeFileName (addExtension (addTrailingPathSeparator x) \"ext\") == \".ext\"\n    Windows: addExtension \"\\\\\\\\share\" \".txt\" == \"\\\\\\\\share\\\\.txt\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "addTrailingPathSeparator",
            "comment": "\nAdd a trailing file path separator if one is not already present.\n\n    hasTrailingPathSeparator (addTrailingPathSeparator x)\n    hasTrailingPathSeparator x ==> addTrailingPathSeparator x == x\n    Posix:    addTrailingPathSeparator \"test/rest\" == \"test/rest/\"\n",
            "type": "Path.Generic.Platform -> String -> String"
          },
          {
            "name": "combine",
            "comment": "\nCombine two paths, if the second path starts with a path separator then it returns the second.\n\n    Valid x => combine (takeDirectory x) (takeFileName x) `equalFilePath` x\n\nCombined:\n\n    Posix:   combine \"/\" \"test\" == \"/test\"\n    Posix:   combine \"home\" \"bob\" == \"home/bob\"\n    Posix:   combine \"x:\" \"foo\" == \"x:/foo\"\n    Windows: combine \"C:\\\\foo\" \"bar\" == \"C:\\\\foo\\\\bar\"\n    Windows: combine \"home\" \"bob\" == \"home\\\\bob\"\n",
            "type": "Path.Generic.Platform -> String -> String -> String"
          },
          {
            "name": "dropExtension",
            "comment": "\nRemove last extension, and the \".\" preceding it.\n\n    dropExtension \"/directory/path.ext\" == \"/directory/path\"\n    dropExtension x == fst (splitExtension x)\n",
            "type": "String -> String"
          },
          {
            "name": "dropExtensions",
            "comment": "\nDrop all extensions.\n\n    dropExtensions \"/directory/path.ext\" == \"/directory/path\"\n    dropExtensions \"file.tar.gz\" == \"file\"\n    not <| hasExtension <| dropExtensions x\n    not <| any isExtSeparator <| takeFileName <| dropExtensions x\n",
            "type": "String -> String"
          },
          {
            "name": "dropFileName",
            "comment": "\nDrop the filename. Unlike `takeDirectory`, this function will leave\na trailing path separator on the directory.\n\n    dropFileName \"/directory/file.ext\" == \"/directory/\"\n    dropFileName x == fst (splitFileName x)\n",
            "type": "Path.Generic.Platform -> String -> String"
          },
          {
            "name": "dropTrailingPathSeparator",
            "comment": "\nRemove any trailing path separators\n\n    dropTrailingPathSeparator \"file/test/\" == \"file/test\"\n              dropTrailingPathSeparator \"/\" == \"/\"\n    Windows:  dropTrailingPathSeparator \"\\\\\" == \"\\\\\"\n",
            "type": "Path.Generic.Platform -> String -> String"
          },
          {
            "name": "extSeparator",
            "comment": "\nFile extension character\n\n    extSeparator == '.'\n",
            "type": "String"
          },
          {
            "name": "hasExtension",
            "comment": "\nDoes the given filename have an extension?\n\n    hasExtension \"/directory/path.ext\" == True\n    hasExtension \"/directory/path\" == False\n    ull (takeExtension x) == not (hasExtension x)\n",
            "type": "String -> Bool"
          },
          {
            "name": "hasTrailingPathSeparator",
            "comment": "\nIs an item either a directory or the last character a path separator?\n\n    hasTrailingPathSeparator \"test\" == False\n    hasTrailingPathSeparator \"test/\" == True\n",
            "type": "Path.Generic.Platform -> String -> Bool"
          },
          {
            "name": "isExtSeparator",
            "comment": "\nIs the character an extension character?\n\n    isExtSeparator a == (a == extSeparator)\n",
            "type": "String -> Bool"
          },
          {
            "name": "isPathSeparator",
            "comment": "\nRather than using `== pathSeparator`, use this. Test if somethin is a path separator.\n\n    isPathSeparator a == (a `elem` pathSeparators)\n",
            "type": "Path.Generic.Platform -> String -> Bool"
          },
          {
            "name": "joinPath",
            "comment": "\nJoin path elements back together.\n\n    joinPath [\"/\",\"directory/\",\"file.ext\"] == \"/directory/file.ext\"\n    Valid x => joinPath (splitPath x) == x\n    joinPath [] == \"\"\n    Posix: joinPath [\"test\",\"file\",\"path\"] == \"test/file/path\"\n",
            "type": "Path.Generic.Platform -> List String -> String"
          },
          {
            "name": "pathSeparator",
            "comment": "\nThe character that separates directories. In the case where more than\none character is possible, `pathSeparator` is the 'ideal' one.\n\n    Windows: pathSeparator == '\\\\'\n    Posix:   pathSeparator ==  '/'\n    isPathSeparator pathSeparator\n",
            "type": "Path.Generic.Platform -> String"
          },
          {
            "name": "pathSeparators",
            "comment": "\nThe list of all possible separators.\n\n    Windows: pathSeparators == ['\\\\', '/']\n    Posix:   pathSeparators == ['/']\n    pathSeparator `elem` pathSeparators\n",
            "type": "Path.Generic.Platform -> List String"
          },
          {
            "name": "replaceBaseName",
            "comment": "\nSet the base name.\n\n    replaceBaseName \"/directory/other.ext\" \"file\" == \"/directory/file.ext\"\n    replaceBaseName \"file/test.txt\" \"bob\" == \"file/bob.txt\"\n    replaceBaseName \"fred\" \"bill\" == \"bill\"\n    replaceBaseName \"/dave/fred/bob.gz.tar\" \"new\" == \"/dave/fred/new.tar\"\n    Valid x => replaceBaseName x (takeBaseName x) == x\n",
            "type": "Path.Generic.Platform -> String -> String -> String"
          },
          {
            "name": "replaceDirectory",
            "comment": "\nSet the directory, keeping the filename the same.\n\n    replaceDirectory \"root/file.ext\" \"/directory/\" == \"/directory/file.ext\"\n    Valid x => replaceDirectory x (takeDirectory x) `equalFilePath` x\n",
            "type": "Path.Generic.Platform -> String -> String -> String"
          },
          {
            "name": "replaceExtension",
            "comment": "\nSet the extension of a file, overwriting one if already present, equivalent to `-<.>`.\n\n    replaceExtension \"/directory/path.txt\" \"ext\" == \"/directory/path.ext\"\n    replaceExtension \"/directory/path.txt\" \".ext\" == \"/directory/path.ext\"\n    replaceExtension \"file.txt\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"bob\" == \"file.bob\"\n    replaceExtension \"file\" \".bob\" == \"file.bob\"\n    replaceExtension \"file.txt\" \"\" == \"file\"\n    replaceExtension \"file.fred.bob\" \"txt\" == \"file.fred.txt\"\n    replaceExtension x y == addExtension (dropExtension x) y\n",
            "type": "String -> String -> String"
          },
          {
            "name": "replaceFileName",
            "comment": "\nSet the filename.\n\n    replaceFileName \"/directory/other.txt\" \"file.ext\" == \"/directory/file.ext\"\n    Valid x => replaceFileName x (takeFileName x) == x\n",
            "type": "Path.Generic.Platform -> String -> String -> String"
          },
          {
            "name": "splitExtension",
            "comment": "\nSplit on the extension. `addExtension` is the inverse.\n\n    splitExtension \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    uncurry (++) (splitExtension x) == x\n    Valid x => uncurry addExtension (splitExtension x) == x\n    splitExtension \"file.txt\" == (\"file\",\".txt\")\n    splitExtension \"file\" == (\"file\",\"\")\n    splitExtension \"file/file.txt\" == (\"file/file\",\".txt\")\n    splitExtension \"file.txt/boris\" == (\"file.txt/boris\",\"\")\n    splitExtension \"file.txt/boris.ext\" == (\"file.txt/boris\",\".ext\")\n    splitExtension \"file/path.txt.bob.fred\" == (\"file/path.txt.bob\",\".fred\")\n    splitExtension \"file/path.txt/\" == (\"file/path.txt/\",\"\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitExtensions",
            "comment": "\nSplit on all extensions.\n\n    splitExtensions \"/directory/path.ext\" == (\"/directory/path\",\".ext\")\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n    uncurry (++) (splitExtensions x) == x\n    Valid x => uncurry addExtension (splitExtensions x) == x\n    splitExtensions \"file.tar.gz\" == (\"file\",\".tar.gz\")\n",
            "type": "String -> ( String, String )"
          },
          {
            "name": "splitFileName",
            "comment": "\nOperations on a filepath, as a list of directories\n\nSplit a filename into directory and file. `combine` is the inverse.\nThe first component will often end with a trailing slash.\n\n    splitFileName \"/directory/file.ext\" == (\"/directory/\",\"file.ext\")\n    Valid x => isValid (fst (splitFileName x))\n    splitFileName \"file/bob.txt\" == (\"file/\", \"bob.txt\")\n    splitFileName \"file/\" == (\"file/\", \"\")\n    splitFileName \"bob\" == (\"\", \"bob\")\n    Posix:   splitFileName \"/\" == (\"/\",\"\")\n",
            "type": "Path.Generic.Platform -> String -> ( String, String )"
          },
          {
            "name": "splitPath",
            "comment": "\nSplit a path by the directory separator.\n\n    splitPath \"/directory/file.ext\" == [\"/\",\"directory/\",\"file.ext\"]\n    concat (splitPath x) == x\n    splitPath \"test//item/\" == [\"test//\",\"item/\"]\n    splitPath \"test/item/file\" == [\"test/\",\"item/\",\"file\"]\n    splitPath \"\" == []\n    Windows: splitPath \"c:\\\\test\\\\path\" == [\"c:\\\\\",\"test\\\\\",\"path\"]\n    Posix:   splitPath \"/file/test\" == [\"/\",\"file/\",\"test\"]\n",
            "type": "Path.Generic.Platform -> String -> List String"
          },
          {
            "name": "takeBaseName",
            "comment": "\nGet the base name, without an extension or path.\n\n    takeBaseName \"/directory/file.ext\" == \"file\"\n    takeBaseName \"file/test.txt\" == \"test\"\n    takeBaseName \"dave.ext\" == \"dave\"\n    takeBaseName \"\" == \"\"\n    takeBaseName \"test\" == \"test\"\n    takeBaseName (addTrailingPathSeparator x) == \"\"\n    takeBaseName \"file/file.tar.gz\" == \"file.tar\"\n",
            "type": "Path.Generic.Platform -> String -> String"
          },
          {
            "name": "takeDirectory",
            "comment": "\nGet the directory name, move up one level.\n\n              takeDirectory \"/directory/other.ext\" == \"/directory\"\n              takeDirectory x `isPrefixOf` x || takeDirectory x == \".\"\n              takeDirectory \"foo\" == \".\"\n              takeDirectory \"/\" == \"/\"\n              takeDirectory \"/foo\" == \"/\"\n              takeDirectory \"/foo/bar/baz\" == \"/foo/bar\"\n              takeDirectory \"/foo/bar/baz/\" == \"/foo/bar/baz\"\n              takeDirectory \"foo/bar/baz\" == \"foo/bar\"\n    Windows:  takeDirectory \"foo\\\\bar\" == \"foo\"\n    Windows:  takeDirectory \"foo\\\\bar\\\\\\\\\" == \"foo\\\\bar\"\n",
            "type": "Path.Generic.Platform -> String -> String"
          },
          {
            "name": "takeExtension",
            "comment": "\nGet the extension of a file, returns \"\" for no extension, .ext otherwise.\n\n    takeExtension \"/directory/path.ext\" == \".ext\"\n    takeExtension x == snd (splitExtension x)\n    Valid x => takeExtension (addExtension x \"ext\") == \".ext\"\n    Valid x => takeExtension (replaceExtension x \"ext\") == \".ext\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeExtensions",
            "comment": "\nGet all extensions.\n\n    takeExtensions \"/directory/path.ext\" == \".ext\"\n    takeExtensions \"file.tar.gz\" == \".tar.gz\"\n",
            "type": "String -> String"
          },
          {
            "name": "takeFileName",
            "comment": "\nGet the file name.\n\n    takeFileName \"/directory/file.ext\" == \"file.ext\"\n    takeFileName \"test/\" == \"\"\n    takeFileName x `isSuffixOf` x\n    takeFileName x == snd (splitFileName x)\n    Valid x => takeFileName (replaceFileName x \"fred\") == \"fred\"\n    Valid x => takeFileName (x </> \"fred\") == \"fred\"\n    Valid x => isRelative (takeFileName x)\n",
            "type": "Path.Generic.Platform -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "KtorZ/elm-notification",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Notification",
        "comment": "\nEasily display toast notifications to users. The module defines four common alert levels (success,\ninfo, warning and error) and takes care of managing toast lifecycles.\n\nSee the [demo](https://ktorz.github.io/elm-notification) to get a nice overview of the capability.\n\n# Create a notification\n\nTo create a notification, just send a `Notification` to the provided signal address. This can be\ndone either by directly calling `Signal.send` or, by using events subscriber from the `Html.Events`\nmodule.\n\n@docs Notification, success, info, warning, error, address\n\n# Display and run effects\n\nTo be able to run and to actually work, notifications need to be added to your view. A `Signal Html`\nis available for that purpose as well as a `Signal (Task Effects.Never ())` ready to be plugged in a\nport, or merged with on of your application effects signal.\n\n@docs view, task\n",
        "aliases": [
          {
            "name": "Notification",
            "comment": " Representation of a notification ",
            "args": [],
            "type": "{ content : String, level : Notification.Level }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "address",
            "comment": " Communication address to require a notification on the screen ",
            "type": "Signal.Address Notification.Notification"
          },
          {
            "name": "error",
            "comment": " Create an `error` notification ",
            "type": "String -> Notification.Notification"
          },
          {
            "name": "info",
            "comment": " Create an `info` notification ",
            "type": "String -> Notification.Notification"
          },
          {
            "name": "success",
            "comment": " Create a `success` notification ",
            "type": "String -> Notification.Notification"
          },
          {
            "name": "task",
            "comment": " Effects runner ",
            "type": "Signal.Signal (Task.Task Effects.Never ())"
          },
          {
            "name": "view",
            "comment": " Notification view updated for each user interaction ",
            "type": "Signal.Signal Html.Html"
          },
          {
            "name": "warning",
            "comment": " Create a `warning` notification ",
            "type": "String -> Notification.Notification"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-api-components",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Component.Filter.View",
        "comment": " A view display for a filter\n@docs view, viewFilterCheckbox\n\n## Css stuff\n@docs CssClasses, filterNamespace\n",
        "aliases": [],
        "types": [
          {
            "name": "CssClasses",
            "comment": " The CSS classes used in this view\n",
            "args": [],
            "cases": [
              [
                "FilterGroup",
                []
              ],
              [
                "FilterEntry",
                []
              ],
              [
                "Checkbox",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "filterNamespace",
            "comment": " Our namespace for these filters\n",
            "type": "Html.CssHelpers.Namespace String a b"
          },
          {
            "name": "view",
            "comment": " Displays all filters in the model side-by-side\n",
            "type": "Component.Filter.Update.Addresses a -> Signal.Address Component.Filter.Update.Action -> Component.Filter.Model.Model b c -> Html.Html"
          },
          {
            "name": "viewFilterCheckbox",
            "comment": " Displays a single filter field\n",
            "type": "Signal.Address Component.Filter.Update.Action -> Component.Filter.Model.FilterField a -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Component.Filter.Update",
        "comment": " Our API for a filtering component\n@docs Action, Addresses, update\n",
        "aliases": [
          {
            "name": "Addresses",
            "comment": " we demand that we get an addresses record with an entry for our filter called \"filter\"\nthis allows us to compose other addresses together and yet only have a single\natom at the top level\n",
            "args": [
              "a"
            ],
            "type": "{ a | filter : Signal.Address Component.Filter.Update.Action }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " The actions defined here can be considered our external API\nThe top level component will be able to trigger these actions,\nas well as the local component\n",
            "args": [],
            "cases": [
              [
                "NoOp",
                []
              ],
              [
                "SetFilterDisabled",
                [
                  "String",
                  "Bool"
                ]
              ],
              [
                "SetFilterChecked",
                [
                  "String",
                  "Bool"
                ]
              ],
              [
                "SetFilterVisible",
                [
                  "String",
                  "Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "update",
            "comment": " Takes the addresses record, the action, and the model\nRuns the defined action on the model\n",
            "type": "Component.Filter.Update.Addresses a -> Component.Filter.Update.Action -> Component.Filter.Model.Model b c -> ( Component.Filter.Model.Model b c , Effects.Effects Component.Filter.Update.Action )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Component.Filter.Model",
        "comment": " Our filter API\n\n@docs Model, FilterField\n\n",
        "aliases": [
          {
            "name": "FilterField",
            "comment": "\nEach filter field has a bunch of properties useful for displaying data\n",
            "args": [
              "a"
            ],
            "type": "{ name : String , isDisabled : Bool , isChecked : Bool , isVisible : Bool , value : String , text : String , type' : a }"
          },
          {
            "name": "Model",
            "comment": " Demand that the model has a filter property. This means you can either use\na top level model like\n```\ntype alias Model = { filters : [] }\n```\nor\n```\ntype alias Model = { filterA : { filters [] } }\n```\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ a | filters : List (Component.Filter.Model.FilterField b) }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-check",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Check.Test",
        "comment": " This module provides integration with\n[`elm-test`](http://package.elm-lang.org/packages/deadfoxygrandpa/elm-test/latest/).\n\n# Convert to Tests\n@docs evidenceToTest\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "evidenceToTest",
            "comment": " Convert elm-check's Evidence into an elm-test Test. You can use elm-test's\nrunners to view the results of your property-based tests, alongside the results\nof unit tests.\n",
            "type": "Check.Evidence -> ElmTest.Test"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Check",
        "comment": "\n\nA toolkit for writing property-based tests, which take the form of `Claim`s. A\n`Claim` is made using the provided domain-specific language (DSL). A single\n`Claim` can be written in one of these ways:\n\n1. claim - (string) - that - (actual) - is - (expected) - for - (producer)\n2. claim - (string) - true - (predicate) - for - (producer)\n3. claim - (string) - false - (predicate) - for - (producer)\n\n\nFor example,\n\n    claim_multiplication_identity =\n      claim\n        \"Multiplying by one does not change a number\"\n      `that`\n        (\\n -> n * 1)\n      `is`\n        identity\n      `for`\n        int\n\nSee the README for more information.\n\n*Warning: The DSL follows a very strict format. Deviating from this format will\nyield potentially unintelligible type errors. The following functions have\nhorrendous type signatures and you are better off ignoring them.*\n\n@docs claim, that, is, for, true, false\n\n# Group Claims\n@docs suite\n\n# Check a Claim\n@docs quickCheck, check\n\n# Types\n@docs Claim\n\n## Evidence\nThe results of checking a claim are given back in the types defined here. You\ncan examine them yourself, or see `Check.Test` to convert them into tests to use\nwith `elm-check`'s runners.\n@docs Evidence, UnitEvidence, SuccessOptions, FailureOptions\n",
        "aliases": [
          {
            "name": "FailureOptions",
            "comment": " FailureOptions is the concrete type returned in case evidence was found\ndisproving a Claim.\n\nFailureOptions contains:\n1. the `name` of the claim\n2. the minimal `counterExample` which serves as evidence that the claim is false\n3. the value `expected` to be returned by the claim\n4. the `actual` value returned by the claim\n5. the `seed` used in order to reproduce the results\n6. the number of checks performed\n7. the number of shrinking operations performed\n8. the original `counterExample`, `actual`, and `expected` values found prior\nto performing the shrinking operations.\n",
            "args": [],
            "type": "{ name : String , counterExample : String , actual : String , expected : String , original : { counterExample : String , actual : String , expected : String } , seed : Random.Seed , numberOfChecks : Int , numberOfShrinks : Int }"
          },
          {
            "name": "SuccessOptions",
            "comment": " SuccessOptions is the concrete type returned in case there is no evidence\nfound disproving a Claim.\n\nSuccessOptions contains:\n1. the `name` of the claim\n2. the number of checks performed\n3. the `seed` used in order to reproduce the check.\n",
            "args": [],
            "type": "{ name : String, seed : Random.Seed, numberOfChecks : Int }"
          },
          {
            "name": "UnitEvidence",
            "comment": " UnitEvidence is the concrete type returned by checking a single claim.\nA UnitEvidence can easily be converted to an assertion or can be considered\nas the result of an assertion.\n",
            "args": [],
            "type": "Result.Result Check.FailureOptions Check.SuccessOptions"
          }
        ],
        "types": [
          {
            "name": "Claim",
            "comment": " A Claim is an object that makes a claim of truth about a system.\nA claim is either a function which yields evidence regarding the claim\nor a list of such claims.\n",
            "args": [],
            "cases": [
              [
                "Claim",
                [
                  "String",
                  "Int -> Random.Seed -> Check.Evidence"
                ]
              ],
              [
                "Suite",
                [
                  "String",
                  "List Check.Claim"
                ]
              ]
            ]
          },
          {
            "name": "Evidence",
            "comment": " Evidence is the output from checking a claim or multiple claims.\n",
            "args": [],
            "cases": [
              [
                "Unit",
                [
                  "Check.UnitEvidence"
                ]
              ],
              [
                "Multiple",
                [
                  "String",
                  "List Check.Evidence"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "check",
            "comment": " Check a claim and produce evidence.\n\nTo check a claim, you need to provide the number of checks to perform, and a\nrandom seed. You can set up a CI server to run through a large number of checks\nwith a randomized seed.\n\n    aggressiveCheck : Claim -> Evidence\n    aggressiveCheck =\n      check 2000 (Random.initialSeed 0xFFFF)\n",
            "type": "Int -> Random.Seed -> Check.Claim -> Check.Evidence"
          },
          {
            "name": "claim",
            "comment": "\n",
            "type": "String -> (a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "false",
            "comment": " ",
            "type": "((a -> Bool) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "for",
            "comment": " ",
            "type": "(Check.Producer.Producer a -> Check.Claim) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "is",
            "comment": " ",
            "type": "((a -> b) -> Check.Producer.Producer a -> Check.Claim) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "quickCheck",
            "comment": " Quickly check a claim.\n\nThis function is very useful when checking claims in local development.\n`quickCheck` will perform 100 checks and use `Random.initialSeed 1` as the\nrandom seed.\n",
            "type": "Check.Claim -> Check.Evidence"
          },
          {
            "name": "suite",
            "comment": " Group a list of claims into a suite. This is very useful in order to\ngroup similar claims together.\n\n    suite nameOfSuite listOfClaims\n",
            "type": "String -> List Check.Claim -> Check.Claim"
          },
          {
            "name": "that",
            "comment": " ",
            "type": "((a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim) -> (a -> b) -> (a -> b) -> Check.Producer.Producer a -> Check.Claim"
          },
          {
            "name": "true",
            "comment": " ",
            "type": "((a -> Bool) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim) -> (a -> Bool) -> Check.Producer.Producer a -> Check.Claim"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Check.Producer",
        "comment": " This is a library of `Producer`s you can use to supply values to your tests.\nYou can typically pick out which ones you need according to their types.\n\nA `Producer a` knows how to create values of type `a`. It can create them\nrandomly, and it can shrink them to more minimal values. Producers can be\nfiltered and mapped over.\n\n# Common Producers\n@docs bool, int, rangeInt, float, rangeFloat, percentage, string, maybe, result, list, array\n\n## Tuple Producers\nIf your expected and actual functions need more than one input, pass them in as a tuple.\n@docs tuple, tuple3, tuple4, tuple5\n\n# Working with Producers\n@docs Producer, filter, convert, map\n\n# Uncommon Producers\n@docs unit, order\n\n## Character Producers\n@docs char, upperCaseChar, lowerCaseChar, ascii, unicode\n\n## Function Producers\n@docs func, func2, func3, func4, func5\n\n",
        "aliases": [
          {
            "name": "Producer",
            "comment": " An Producer type is a\n[Random](http://package.elm-lang.org/packages/elm-lang/core/latest/Random)\n`Generator` paired with a shrinking strategy, or Shrinker. Shrinkers are defined\nin\n[`elm-shrink`](http://package.elm-lang.org/packages/NoRedInk/elm-shrink/latest/).\n",
            "args": [
              "a"
            ],
            "type": "{ generator : Random.Generator a, shrinker : Shrink.Shrinker a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Given a producer of a type, create a producer of an array of that type.\nGenerates random arrays of values of length between 0 and 10.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (Array.Array a)"
          },
          {
            "name": "ascii",
            "comment": " A producer for ASCII char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "bool",
            "comment": " A producer for bool values.\n",
            "type": "Check.Producer.Producer Bool"
          },
          {
            "name": "char",
            "comment": " A producer for char values. Generates random ascii chars disregarding the control\ncharacters.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "convert",
            "comment": " Convert the output of one producer to another type. This is useful if\nyou're testing a function that expects a large model record, but you only need\nto randomize a few fields. You might do this several different ways for a single\nmodel, so you generate and shrink only the fields relevant to each test.\n\n    type alias Person =\n      { first : String, last : String, age : String }\n\n    spy : Producer Person\n    spy = map (\\age -> Person \"James\" \"Bond\" age) .age (rangeInt 0 120)\n\nIn order for shrinking to work, you need to pass an inverse function of the\nfunction being mapped.\n",
            "type": "(a -> b) -> (b -> a) -> Check.Producer.Producer a -> Check.Producer.Producer b"
          },
          {
            "name": "filter",
            "comment": " Filter the values from a Producer. The resulting Producer will only generate\nrandom test values or shrunken values that satisfy the predicate. The predicate\nmust be satisfiable.\n",
            "type": "(a -> Bool) -> Check.Producer.Producer a -> Check.Producer.Producer a"
          },
          {
            "name": "float",
            "comment": " A producer for float values. NaN and ±Infinity will not be produced.\n",
            "type": "Check.Producer.Producer Float"
          },
          {
            "name": "func",
            "comment": " Given a producer of a return type, create a producer of functions that\nreturn that type. Does not perform any shrinking.\n",
            "type": "Check.Producer.Producer b -> Check.Producer.Producer (a -> b)"
          },
          {
            "name": "func2",
            "comment": " ",
            "type": "Check.Producer.Producer c -> Check.Producer.Producer (a -> b -> c)"
          },
          {
            "name": "func3",
            "comment": " ",
            "type": "Check.Producer.Producer d -> Check.Producer.Producer (a -> b -> c -> d)"
          },
          {
            "name": "func4",
            "comment": " ",
            "type": "Check.Producer.Producer e -> Check.Producer.Producer (a -> b -> c -> d -> e)"
          },
          {
            "name": "func5",
            "comment": " ",
            "type": "Check.Producer.Producer f -> Check.Producer.Producer (a -> b -> c -> d -> e -> f)"
          },
          {
            "name": "int",
            "comment": " A producer for int values.\n",
            "type": "Check.Producer.Producer Int"
          },
          {
            "name": "list",
            "comment": " Given a producer of a type, create a producer of a list of that type.\nGenerates random lists of values of length between 0 and 10.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (List a)"
          },
          {
            "name": "lowerCaseChar",
            "comment": " A producer for lowercase char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "map",
            "comment": " Map a function over an producer. This works exactly like `convert`,\nexcept it does not require an invderse function, and consequently does no\nshrinking.\n",
            "type": "(a -> b) -> Check.Producer.Producer a -> Check.Producer.Producer b"
          },
          {
            "name": "maybe",
            "comment": " Given a producer of a type, create a producer of a maybe for that type.\n",
            "type": "Check.Producer.Producer a -> Check.Producer.Producer (Maybe.Maybe a)"
          },
          {
            "name": "order",
            "comment": " A producer for order values.\n",
            "type": "Check.Producer.Producer Basics.Order"
          },
          {
            "name": "percentage",
            "comment": " A producer for percentage values. Generates random floats between `0.0` and\n`1.0`.\n",
            "type": "Check.Producer.Producer Float"
          },
          {
            "name": "rangeFloat",
            "comment": " A producer for float values within between a given minimum and maximum\nvalue, inclusive. Shrunken values will also be within the range.\n",
            "type": "Float -> Float -> Check.Producer.Producer Float"
          },
          {
            "name": "rangeInt",
            "comment": " A producer for int values within between a given minimum and maximum value,\ninclusive. Shrunken values will also be within the range.\n",
            "type": "Int -> Int -> Check.Producer.Producer Int"
          },
          {
            "name": "result",
            "comment": " Given producers for an error type and a success type, createa a producer for\na result.\n",
            "type": "Check.Producer.Producer error -> Check.Producer.Producer value -> Check.Producer.Producer (Result.Result error value)"
          },
          {
            "name": "string",
            "comment": " A producer for string values. Generates random printable ascii strings whose\nlength is between 0 and 10.\n",
            "type": "Check.Producer.Producer String"
          },
          {
            "name": "tuple",
            "comment": " Turn a tuple of producers into a producer of tuples.\n",
            "type": "( Check.Producer.Producer a, Check.Producer.Producer b ) -> Check.Producer.Producer ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " Turn a 3-tuple of producers into a producer of 3-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c ) -> Check.Producer.Producer ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " Turn a 4-tuple of producers into a producer of 4-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c , Check.Producer.Producer d ) -> Check.Producer.Producer ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " Turn a 5-tuple of producers into a producer of 5-tuples.\n",
            "type": "( Check.Producer.Producer a , Check.Producer.Producer b , Check.Producer.Producer c , Check.Producer.Producer d , Check.Producer.Producer e ) -> Check.Producer.Producer ( a, b, c, d, e )"
          },
          {
            "name": "unicode",
            "comment": " A producer for unicode char values.\n",
            "type": "Check.Producer.Producer Char"
          },
          {
            "name": "unit",
            "comment": " A producer for the unit value. Unit is a type with only one value, commonly\nused as a placeholder.\n",
            "type": "Check.Producer.Producer ()"
          },
          {
            "name": "upperCaseChar",
            "comment": " A producer for uppercase char values.\n",
            "type": "Check.Producer.Producer Char"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-decode-pipeline",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Json.Decode.Pipeline",
        "comment": " ## Design Principles\n\n* Introduce functions that work well with the [`(|>)`](http://package.elm-lang.org/packages/elm-lang/core/3.0.0/Basics#|>) operator\n* Don't introduce any custom infix operators\n* Don't introduce any functions that are intended to be called using backticks\n\n@docs required, requiredAt, optional, optionalAt, hardcoded, custom, resolveResult, decode\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "custom",
            "comment": " Run the given decoder and feed its result into the pipeline at this point.\n\nConsider this example.\n\n    import Json.Decode exposing (int, string, at, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, custom)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> custom (at [ \"profile\", \"name\" ])\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\n            \"id\": 123,\n            \"email\": \"sam@example.com\",\n            \"profile\": {\"name\": \"Sam\"}\n          }\n        \"\"\"\n    -- Ok { id = 123, name = \"Sam\", email = \"sam@example.com\" }\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "decode",
            "comment": " Begin a decoding pipeline. This is a synonym for [Json.Decode.succeed](http://package.elm-lang.org/packages/elm-lang/core/3.0.0/Json-Decode#succeed),\nintended to make things read more clearly.\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , name : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> optional \"name\" string \"\"\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "hardcoded",
            "comment": " Rather than decoding anything, use a fixed value for the next step in the\npipeline. `harcoded` does not look at the JSON at all.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      , followers : Int\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"email\" string\n        |> hardcoded 0\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\"}\n        \"\"\"\n    -- Ok { id = 123, email = \"sam@example.com\", followers = 0 }\n",
            "type": "a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "optional",
            "comment": " Decode a field that may or may not be present. If the field is present,\nuse the specified decoder on it. If the field is not present, successfully\ndecode to the given fallback value.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required, optional)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> optional \"name\" string \"blah\"\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\" }\n        \"\"\"\n    -- Ok { id = 123, name = \"blah\", email = \"sam@example.com\" }\n\n",
            "type": "String -> Json.Decode.Decoder a -> a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "optionalAt",
            "comment": " Decode an optional nested field.\n",
            "type": "List String -> Json.Decode.Decoder a -> a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "required",
            "comment": " Decode a required field.\n\n    import Json.Decode exposing (int, string, Decoder)\n    import Json.Decode.Pipeline exposing (decode, required)\n\n\n    type alias User =\n      { id : Int\n      , name : String\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      decode User\n        |> required \"id\" int\n        |> required \"name\" string\n        |> required \"email\" string\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\", \"name\": \"Sam\"}\n        \"\"\"\n    -- Ok { id = 123, name = \"Sam\", email = \"sam@example.com\" }\n",
            "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "requiredAt",
            "comment": " Decode a required nested field.\n",
            "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b"
          },
          {
            "name": "resolveResult",
            "comment": " Convert a `Decoder (Result x a)` into a `Decoder a`. Useful when you want\nto perform some custom processing just before completing the decoding operation.\n\n    import Json.Decode exposing (int, string, float, Decoder)\n    import Json.Decode.Pipeline exposing\n      (decode, required, resolveResult)\n\n\n    type alias User =\n      { id : Int\n      , email : String\n      }\n\n\n    userDecoder : Decoder User\n    userDecoder =\n      let\n        -- asResult gets run *after* all the\n        -- (|> required ...) steps are done.\n        asResult Int -> String -> Int -> Result String User\n        asResult id email version =\n          if version > 2 then\n            Ok (User id email)\n          else\n            Err \"This JSON is from a deprecated source. Please upgrade!\"\n      in\n        decode asResult\n          |> required \"id\" int\n          |> required \"email\" string\n          |> required \"version\" int -- version is part of asResult,\n          |> resolveResult          -- but it is not a part of User\n\n\n    result : Result String User\n    result =\n      Json.Decode.decodeString\n        userDecoder\n        \"\"\"\n          {\"id\": 123, \"email\": \"sam@example.com\", \"version\": 1}\n        \"\"\"\n    -- Err \"This JSON is from a deprecated source. Please upgrade!\"\n",
            "type": "Json.Decode.Decoder (Result.Result String a) -> Json.Decode.Decoder a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-lazy-list",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Lazy.List",
        "comment": " Lazy list implementation in Elm.\n\n# Types\n@docs LazyList, LazyListView\n\n# Constructors\n@docs cons, empty, singleton\n\n# Query operations\n@docs isEmpty, head, tail, member, length\n\n# Conversions\n@docs toList, fromList, toArray, fromArray\n\n# Map-reduce et al.\n@docs map, zip, reduce, flatten, flatMap, append, foldl, foldr\n\n# Common operations\n@docs intersperse, interleave, reverse, cycle, iterate, repeat, take, takeWhile, drop, dropWhile\n\n# Filtering operations\n@docs keepIf, dropIf, unique\n\n# Chaining operations\n@docs andMap, andThen\n\n# Useful stuff\n@docs numbers, sum, product\n\n# All the maps!\n@docs map2, map3, map4, map5\n\n# All the zips!\n@docs zip3, zip4, zip5\n\n# Infix Operators\n@docs (:::), (+++)\n\n",
        "aliases": [
          {
            "name": "LazyList",
            "comment": " Lazy List type.\n",
            "args": [
              "a"
            ],
            "type": "Lazy.Lazy (Lazy.List.LazyListView a)"
          }
        ],
        "types": [
          {
            "name": "LazyListView",
            "comment": " Analogous to `List` type. This is the actual implementation type for the\n`LazyList` type. This type is exposed to the user if the user so wishes to\ndo pattern matching or understand how the list type works. It is not\nrecommended to work with this type directly. Try working solely with the\nprovided functions in the package.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Nil",
                []
              ],
              [
                "Cons",
                [
                  "a",
                  "Lazy.List.LazyList a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "+++",
            "comment": " Alias for `append`. Analogous to `++` for lists.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": ":::",
            "comment": " Alias for `cons`. Analogous to `::` for lists.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "andMap",
            "comment": " Known as `mapN` in some circles. Allows you to apply `map` in cases\nwhere then number of arguments are greater than 5.\n",
            "type": "Lazy.List.LazyList (a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "andThen",
            "comment": " Chain list producing operations.\n",
            "type": "Lazy.List.LazyList a -> (a -> Lazy.List.LazyList b) -> Lazy.List.LazyList b"
          },
          {
            "name": "append",
            "comment": " Append a list to another list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "cons",
            "comment": " Add a value to the front of a list.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "cycle",
            "comment": " Take a list and repeat it ad infinitum. This cycles a finite list\nby putting the front after the end of the list. This results in a no-op in\nthe case of an infinite list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "drop",
            "comment": " Drop at most `n` many values from a list.\n",
            "type": "Int -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "dropIf",
            "comment": " Drop all elements in a list that satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements from a list as long as the predicate is satisfied.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "empty",
            "comment": " Create an empty list.\n",
            "type": "Lazy.List.LazyList a"
          },
          {
            "name": "flatMap",
            "comment": " Map then flatten.\n",
            "type": "(a -> Lazy.List.LazyList b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "flatten",
            "comment": " Flatten a list of lists into a single list by appending all the inner\nlists into one big list.\n",
            "type": "Lazy.List.LazyList (Lazy.List.LazyList a) -> Lazy.List.LazyList a"
          },
          {
            "name": "foldl",
            "comment": " Analogous to `List.foldl`. Is an alias for `reduce`.\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "foldr",
            "comment": " Analogous to `List.foldr`.\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "fromArray",
            "comment": " Convert an array to a lazy list.\n",
            "type": "Array.Array a -> Lazy.List.LazyList a"
          },
          {
            "name": "fromList",
            "comment": " Convert a normal list to a lazy list.\n",
            "type": "List a -> Lazy.List.LazyList a"
          },
          {
            "name": "head",
            "comment": " Get the head of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe a"
          },
          {
            "name": "interleave",
            "comment": " Interleave the elements of a list in another list. The two lists get\ninterleaved at the end.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "intersperse",
            "comment": " Places the given value between all members of the given list.\n",
            "type": "a -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "isEmpty",
            "comment": " Detect if a list is empty or not.\n",
            "type": "Lazy.List.LazyList a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Create an infinite list of applications of a function on some value.\n\nEquivalent to:\n\n    x ::: f x ::: f (f x) ::: f (f (f x)) ::: ... -- etc...\n",
            "type": "(a -> a) -> a -> Lazy.List.LazyList a"
          },
          {
            "name": "keepIf",
            "comment": " Keep all elements in a list that satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "length",
            "comment": " Get the length of a lazy list.\n\nWarning: This will not terminate if the list is infinite.\n",
            "type": "Lazy.List.LazyList a -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function to a list.\n",
            "type": "(a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "map2",
            "comment": "",
            "type": "(a -> b -> c) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f) -> Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList f"
          },
          {
            "name": "member",
            "comment": " Test if a value is a member of a list.\n",
            "type": "a -> Lazy.List.LazyList a -> Bool"
          },
          {
            "name": "numbers",
            "comment": " The list of counting numbers.\n\ni.e.:\n\n    1 ::: 2 ::: 3 ::: 4 ::: 5 ::: ... -- etc...\n",
            "type": "Lazy.List.LazyList number"
          },
          {
            "name": "product",
            "comment": " Get the product of a list of numbers.\n",
            "type": "Lazy.List.LazyList number -> number"
          },
          {
            "name": "reduce",
            "comment": " Reduce a list with a given reducer and an initial value.\n\nExample :\n    reduce (+) 0 (1 ::: 2 ::: 3 ::: 4 ::: empty) == 10\n",
            "type": "(a -> b -> b) -> b -> Lazy.List.LazyList a -> b"
          },
          {
            "name": "repeat",
            "comment": " Repeat a value ad infinitum.\nBe careful when you use this. The result of this is a truly infinite list.\nDo not try calling `reduce` or `toList` on an infinite list as it'll never\nfinish computing. Make sure you then filter it down to a finite list with `head`\nor `take` or something.\n",
            "type": "a -> Lazy.List.LazyList a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a list.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "singleton",
            "comment": " Create a singleton list.\n",
            "type": "a -> Lazy.List.LazyList a"
          },
          {
            "name": "sum",
            "comment": " Get the sum of a list of numbers.\n",
            "type": "Lazy.List.LazyList number -> number"
          },
          {
            "name": "tail",
            "comment": " Get the tail of a list.\n",
            "type": "Lazy.List.LazyList a -> Maybe.Maybe (Lazy.List.LazyList a)"
          },
          {
            "name": "take",
            "comment": " Take at most `n` many values from a list.\n",
            "type": "Int -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements from a list as long as the predicate is satisfied.\n",
            "type": "(a -> Bool) -> Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "toArray",
            "comment": " Convert a lazy list to an array.\n",
            "type": "Lazy.List.LazyList a -> Array.Array a"
          },
          {
            "name": "toList",
            "comment": " Convert a lazy list to a normal list.\n",
            "type": "Lazy.List.LazyList a -> List a"
          },
          {
            "name": "unique",
            "comment": " Remove all duplicates from a list and return a list of distinct elements.\n",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList a"
          },
          {
            "name": "zip",
            "comment": "",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList ( a, b )"
          },
          {
            "name": "zip3",
            "comment": "",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": "",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": "",
            "type": "Lazy.List.LazyList a -> Lazy.List.LazyList b -> Lazy.List.LazyList c -> Lazy.List.LazyList d -> Lazy.List.LazyList e -> Lazy.List.LazyList ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-rails",
    "version": "4.0.1",
    "docs": [
      {
        "name": "Rails",
        "comment": "\n\n# Http\n@docs Error, get, post, send, fromJson, always, decoder\n\n# Tokens\n@docs csrfToken\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " The kinds of errors a Rails server may return.\n",
            "args": [
              "error"
            ],
            "cases": [
              [
                "HttpError",
                [
                  "Http.Error"
                ]
              ],
              [
                "RailsError",
                [
                  "error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "always",
            "comment": " Returns a decoder suitable for passing to `fromJson`, which uses the same decoder for both success and failure responses.\n",
            "type": "Json.Decode.Decoder value -> Rails.ResponseDecoder value value"
          },
          {
            "name": "csrfToken",
            "comment": " If there was a `<meta name=\"csrf-token\">` tag in the page's `<head>` when\n    elm-rails loaded, returns the value its `content` attribute had at that time.\n\n    Rails expects this value in the `X-CSRF-Token` header for non-`GET` requests as\n    a [CSRF countermeasure](http://guides.rubyonrails.org/security.html#csrf-countermeasures).\n",
            "type": "Maybe.Maybe String"
          },
          {
            "name": "decoder",
            "comment": " Returns a decoder suitable for passing to `fromJson`.\n",
            "type": "Json.Decode.Decoder value -> Json.Decode.Decoder error -> Rails.ResponseDecoder error value"
          },
          {
            "name": "fromJson",
            "comment": " Think `Http.fromJson`, but with additional effort to parse a non-20x response as JSON.\n\n  * If the status code is in the 200 range, try to parse with the given `decoder.success`.\n    * If parsing fails, return an `Http.UnexpectedPayload` wrapped in `HttpError`\n  * If the status code is outside the 200 range, try to parse with the given `decoder.success`.\n    * If parsing fails, return an `Http.BadResponse` wrapped in `HttpError`\n",
            "type": "Rails.ResponseDecoder error value -> Task.Task Http.RawError Http.Response -> Task.Task (Rails.Error error) value"
          },
          {
            "name": "get",
            "comment": " Send a GET request to the given URL. You also specify how to decode the response.\n\n    import Json.Decode (list, string)\n\n    hats : Task (Error (List String)) (List String)\n    hats =\n      get (decoder (list string) (succeed ())) \"http://example.com/hat-categories.json\"\n\n",
            "type": "Rails.ResponseDecoder error value -> String -> Task.Task (Rails.Error error) value"
          },
          {
            "name": "post",
            "comment": " Send a POST request to the given URL. You also specify how to decode the response.\n\n  import Json.Decode (list, string)\n  import Http\n\n  hats : Task (Error (List String)) (List String)\n  hats =\n    post (decoder (list string) (succeed ())) \"http://example.com/hat-categories.json\" Http.empty\n\n",
            "type": "Rails.ResponseDecoder error value -> String -> Http.Body -> Task.Task (Rails.Error error) value"
          },
          {
            "name": "send",
            "comment": " Utility for working with Rails. Wraps Http.send, passing an Authenticity Token along with the type of request. Suitable for use with `fromJson`:\n\n    import Dict\n    import Json.Decode (list, string)\n    import Json.Encode as Encode\n    import Http\n\n    hats : HatStyle -> Task (Error (List String)) (List String)\n    hats style =\n\n      let\n        payload =\n          Encode.object\n            [ ( \"style\", encodeHatStyle style ) ]\n\n        body =\n          Http.string (Encode.encode 0 payload)\n\n        success =\n          list string\n\n        failure =\n          Dict.fromList [ (\"style\", HatStyle) ]\n            |> Rails.Decode.errors\n      in\n        send \"POST\" url body\n          |> fromJson (decoder success failure)\n",
            "type": "String -> String -> Http.Body -> Task.Task Http.RawError Http.Response"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Rails.Decode",
        "comment": "\n\nTypes\n@docs ErrorList\n\n# Decoding\n@docs errors\n\n",
        "aliases": [
          {
            "name": "ErrorList",
            "comment": " ErrorList is a type alias for\na list of fields to String, where `field` is expected to be a type for matching\nerrors to\n```\n\ntype Field = Name | Password\n\ndecode : ErrorList Field\n\n```\n",
            "args": [
              "field"
            ],
            "type": "List ( field, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "errors",
            "comment": " Decodes errors passed from rails formatted as\n\n`{ errors: {errorName: [\"Error String\"] } }`.\n\nThis function takes a Dict that is a map of all the fields you need decoded. It should be formatted\nnest\n\nDict.fromList\n    [ ( \"school\", School )\n    , ( \"school.name\", SchoolName )\n    , ( \"school.address\", SchoolAddress )\n    , ( \"school.city\", City )\n    , ( \"school.state\", State )\n    , ( \"school.zip\", Zip )\n    , ( \"school.country\", Country )\n    ]\n\n",
            "type": "Dict.Dict String field -> Json.Decode.Decoder (Rails.Decode.ErrorList field)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-random-extra",
    "version": "2.1.1",
    "docs": [
      {
        "name": "Random.Mouse",
        "comment": " List of Mouse Generators\n\n# Generators\n@docs mousePosition, mouseX, mouseY, leftMouseDown\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "leftMouseDown",
            "comment": " Generate a random instance of left mouse down (alias for `bool`)\n",
            "type": "Random.Generator Bool"
          },
          {
            "name": "mousePosition",
            "comment": " Generate a random mouse position given a screen width and a screen height\n",
            "type": "Int -> Int -> Random.Generator ( Int, Int )"
          },
          {
            "name": "mouseX",
            "comment": " Generate a random mouseX value given a screen width\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "mouseY",
            "comment": " Generate a random mouseY value given a screen height\n",
            "type": "Int -> Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.String",
        "comment": " List of String Generators\n\n# Simple Generators\n@docs string, word, englishWord, capitalizedEnglishWord\n\n# Random Length String Generators\n@docs rangeLengthString, rangeLengthWord, rangeLengthEnglishWord, anyEnglishWord, anyCapitalizedEnglishWord, rangeLengthCapitalizedEnglishWord\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyCapitalizedEnglishWord",
            "comment": " Generate a random capitalized word with english characters of random length\nbetween 1 34.\nAside: 34 was picked as a maximum as \"supercalifragilisticexpialidocious\"\nis considered the longest commonly used word and is 34 character long.\nLonger words do occur, especially in scientific contexts. In which case, consider\nusing `rangeLengthEnglishWord` for more granular control.\n",
            "type": "Random.Generator String"
          },
          {
            "name": "anyEnglishWord",
            "comment": " Generate a random lowercase word with english characters of random length\nbetween 1 34.\nAside: 34 was picked as a maximum as \"supercalifragilisticexpialidocious\"\nis considered the longest commonly used word and is 34 character long.\nLonger words do occur, especially in scientific contexts. In which case, consider\nusing `rangeLengthEnglishWord` for more granular control.\n",
            "type": "Random.Generator String"
          },
          {
            "name": "capitalizedEnglishWord",
            "comment": " Generate a random capitalized word with english characters of a given length.\nNote: This just generates a random string using the letters in english, so there\nare no guarantees that the result be an actual english word.\n",
            "type": "Int -> Random.Generator String"
          },
          {
            "name": "englishWord",
            "comment": " Generate a random lowercase word with english characters of a given length.\nNote: This just generates a random string using the letters in english, so there\nare no guarantees that the result be an actual english word.\n",
            "type": "Int -> Random.Generator String"
          },
          {
            "name": "rangeLengthCapitalizedEnglishWord",
            "comment": " Generate a random capitalized word with english characters of random length\ngiven a minimum length and a maximum length.\n",
            "type": "Int -> Int -> Random.Generator String"
          },
          {
            "name": "rangeLengthEnglishWord",
            "comment": " Generate a random lowercase word with english characters of random length\ngiven a minimum length and maximum length.\n",
            "type": "Int -> Int -> Random.Generator String"
          },
          {
            "name": "rangeLengthString",
            "comment": " Generates a random string of random length given the minimum length\nand maximum length and a given character generator.\n",
            "type": "Int -> Int -> Random.Generator Char -> Random.Generator String"
          },
          {
            "name": "rangeLengthWord",
            "comment": " Alias for `rangeLengthString`\n",
            "type": "Int -> Int -> Random.Generator Char -> Random.Generator String"
          },
          {
            "name": "string",
            "comment": " Generate a random string of a given length with a given character generator\n\n    fiveLetterEnglishWord = string 5 english\n",
            "type": "Int -> Random.Generator Char -> Random.Generator String"
          },
          {
            "name": "word",
            "comment": " Generate a random word of a given length with a given character generator\n(alias for `string`)\n",
            "type": "Int -> Random.Generator Char -> Random.Generator String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Touch",
        "comment": " List of Touch Generators\n\n# Generators\n@docs tap, touch\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "tap",
            "comment": " Generate a random tap given a screen width and screen height\n",
            "type": "Int -> Int -> Random.Generator { x : Int, y : Int }"
          },
          {
            "name": "touch",
            "comment": " Generate a random touch given a screen width and screen height\n",
            "type": "Int -> Int -> Random.Generator Touch.Touch"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Array",
        "comment": " List of Array Generators\n\n# Generate an Array\n@docs array, emptyArray, rangeLengthArray\n\n# Random Operations on an Array\n@docs sample, choose, shuffle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "array",
            "comment": " Generate a random array of given size given a random generator\n\n    randomLength5IntArray = array 5 (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "choose",
            "comment": " Sample without replacement: produce a randomly selected element of the\narray, and the array with that element omitted (shifting all later elements\ndown). ",
            "type": "Array.Array a -> Random.Generator ( Maybe.Maybe a, Array.Array a )"
          },
          {
            "name": "emptyArray",
            "comment": " Generator that always generates the empty array\n",
            "type": "Random.Generator (Array.Array a)"
          },
          {
            "name": "rangeLengthArray",
            "comment": " Generate a random array of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (Array.Array a)"
          },
          {
            "name": "sample",
            "comment": " Sample with replacement: produce a randomly selected element of the\narray, or `Nothing` for an empty array. Takes O(1) time. ",
            "type": "Array.Array a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "shuffle",
            "comment": " Shuffle the array using the Fisher-Yates algorithm. Takes O(_n_ log _n_)\ntime and O(_n_) additional space. ",
            "type": "Array.Array a -> Random.Generator (Array.Array a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Bool",
        "comment": " List of Bool Generators\n\n# Generators\n@docs bool\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bool",
            "comment": " Random Bool generator\n",
            "type": "Random.Generator Bool"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Char",
        "comment": " List of Char Generators\n\n# Basic Generators\n@docs char, lowerCaseLatin, upperCaseLatin, latin, english, ascii, unicode\n\n# Unicode Generators (UTF-8)\n@docs basicLatin, latin1Supplement, latinExtendedA, latinExtendedB, ipaExtensions, spacingModifier, combiningDiacriticalMarks, greekAndCoptic, cyrillic, cyrillicSupplement, armenian, hebrew, arabic, syriac, arabicSupplement, thaana, nko, samaritan, mandaic, arabicExtendedA, devanagari, bengali, gurmukhi, gujarati, oriya, tamil, telugu, kannada, malayalam, sinhala, thai, lao, tibetan, myanmar, georgian, hangulJamo, ethiopic, ethiopicSupplement, cherokee, unifiedCanadianAboriginalSyllabic, ogham, runic, tagalog, hanunoo, buhid, tagbanwa, khmer, mongolian, unifiedCanadianAboriginalSyllabicExtended, limbu, taiLe, newTaiLue, khmerSymbol, buginese, taiTham, balinese, sundanese, batak, lepcha, olChiki, sundaneseSupplement, vedicExtensions, phoneticExtensions, phoneticExtensionsSupplement, combiningDiacriticalMarksSupplement, latinExtendedAdditional, greekExtended, generalPunctuation, superscriptOrSubscript, currencySymbol, combiningDiacriticalMarksForSymbols, letterlikeSymbol, numberForm, arrow, mathematicalOperator, miscellaneousTechnical, controlPicture, opticalCharacterRecognition, enclosedAlphanumeric, boxDrawing, blockElement, geometricShape, miscellaneousSymbol, dingbat, miscellaneousMathematicalSymbolA, supplementalArrowA, braillePattern, supplementalArrowB, miscellaneousMathematicalSymbolB, supplementalMathematicalOperator, miscellaneousSymbolOrArrow, glagolitic, latinExtendedC, coptic, georgianSupplement, tifinagh, ethiopicExtended, cyrillicExtendedA, supplementalPunctuation, cjkRadicalSupplement, kangxiRadical, ideographicDescription, cjkSymbolOrPunctuation, hiragana, katakana, bopomofo, hangulCompatibilityJamo, kanbun, bopomofoExtended, cjkStroke, katakanaPhoneticExtension, enclosedCJKLetterOrMonth, cjkCompatibility, cjkUnifiedIdeographExtensionA, yijingHexagramSymbol, cjkUnifiedIdeograph, yiSyllable, yiRadical, lisu, vai, cyrillicExtendedB, bamum, modifierToneLetter, latinExtendedD, sylotiNagri, commonIndicNumberForm, phagsPa, saurashtra, devanagariExtended, kayahLi, rejang, hangulJamoExtendedA, javanese, cham, myanmarExtendedA, taiViet, meeteiMayekExtension, ethiopicExtendedA, meeteiMayek, hangulSyllable, hangulJamoExtendedB, highSurrogate, highPrivateUseSurrogate, lowSurrogate, privateUseArea, cjkCompatibilityIdeograph, alphabeticPresentationForm, arabicPresentationFormA, variationSelector, verticalForm, combiningHalfMark, cjkCompatibilityForm, smallFormVariant, arabicPresentationFormB, halfwidthOrFullwidthForm, special, linearBSyllable, linearBIdeogram, aegeanNumber, ancientGreekNumber, ancientSymbol, phaistosDisc, lycian, carian, oldItalic, gothic, ugaritic, oldPersian, deseret, shavian, osmanya, cypriotSyllable, imperialAramaic, phoenician, lydian, meroiticHieroglyph, meroiticCursive, kharoshthi, oldSouthArabian, avestan, inscriptionalParthian, inscriptionalPahlavi, oldTurkic, rumiNumericalSymbol, brahmi, kaithi, soraSompeng, chakma, sharada, takri, cuneiform, cuneiformNumberOrPunctuation, egyptianHieroglyph, bamumSupplement, miao, kanaSupplement, byzantineMusicalSymbol, musicalSymbol, ancientGreekMusicalNotationSymbol, taiXuanJingSymbol, countingRodNumeral, mathematicalAlphanumericSymbol, arabicMathematicalAlphabeticSymbol, mahjongTile, dominoTile, playingCard, enclosedAlphanumericSupplement, enclosedIdeographicSupplement, miscellaneousSymbolOrPictograph, emoticon, transportOrMapSymbol, alchemicalSymbol, cjkUnifiedIdeographExtensionB, cjkUnifiedIdeographExtensionC, cjkUnifiedIdeographExtensionD, cjkCompatibilityIdeographSupplement, tag, variationSelectorSupplement, supplementaryPrivateUseAreaA, supplementaryPrivateUseAreaB\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "aegeanNumber",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "alchemicalSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "alphabeticPresentationForm",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekMusicalNotationSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientGreekNumber",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ancientSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicExtendedA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicMathematicalAlphabeticSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicPresentationFormB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arabicSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "armenian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "arrow",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ascii",
            "comment": " Generate a random ASCII Character\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "avestan",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "balinese",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamum",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "bamumSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "basicLatin",
            "comment": " UTF-8 ",
            "type": "Random.Generator Char"
          },
          {
            "name": "batak",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "bengali",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "blockElement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofo",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "bopomofoExtended",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "boxDrawing",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "brahmi",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "braillePattern",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "buginese",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "buhid",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "byzantineMusicalSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "carian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "chakma",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cham",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "char",
            "comment": " Generate a random character within a certain keyCode range\n\n    lowerCaseLetter = char 65 90\n",
            "type": "Int -> Int -> Random.Generator Char"
          },
          {
            "name": "cherokee",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibility",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityForm",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeograph",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkCompatibilityIdeographSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkRadicalSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkStroke",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkSymbolOrPunctuation",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeograph",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionC",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cjkUnifiedIdeographExtensionD",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarks",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksForSymbols",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningDiacriticalMarksSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "combiningHalfMark",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "commonIndicNumberForm",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "controlPicture",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "coptic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "countingRodNumeral",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiform",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cuneiformNumberOrPunctuation",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "currencySymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cypriotSyllable",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicExtendedB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "cyrillicSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "deseret",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagari",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "devanagariExtended",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "dingbat",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "dominoTile",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "egyptianHieroglyph",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "emoticon",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumeric",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedAlphanumericSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedCJKLetterOrMonth",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "enclosedIdeographicSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "english",
            "comment": " Generate a random English Letter (alias for `latin`)\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtended",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicExtendedA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ethiopicSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "generalPunctuation",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "geometricShape",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "georgianSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "glagolitic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "gothic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekAndCoptic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "greekExtended",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "gujarati",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "gurmukhi",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "halfwidthOrFullwidthForm",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulCompatibilityJamo",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamo",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulJamoExtendedB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hangulSyllable",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hanunoo",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hebrew",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "highPrivateUseSurrogate",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "highSurrogate",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "hiragana",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ideographicDescription",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "imperialAramaic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalPahlavi",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "inscriptionalParthian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ipaExtensions",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "javanese",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kaithi",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanaSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kanbun",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kangxiRadical",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kannada",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakana",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "katakanaPhoneticExtension",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kayahLi",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "kharoshthi",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmer",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "khmerSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "lao",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin",
            "comment": " Generate a random Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "latin1Supplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedAdditional",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedC",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "latinExtendedD",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "lepcha",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "letterlikeSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "limbu",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBIdeogram",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "linearBSyllable",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "lisu",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowSurrogate",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "lowerCaseLatin",
            "comment": " Generate a random lower-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "lycian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "lydian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "mahjongTile",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "malayalam",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "mandaic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalAlphanumericSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "mathematicalOperator",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayek",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "meeteiMayekExtension",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticCursive",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "meroiticHieroglyph",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miao",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousMathematicalSymbolB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrArrow",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousSymbolOrPictograph",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "miscellaneousTechnical",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "modifierToneLetter",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "mongolian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "musicalSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmar",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "myanmarExtendedA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "newTaiLue",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "nko",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "numberForm",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ogham",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "olChiki",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldItalic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldPersian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldSouthArabian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "oldTurkic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "opticalCharacterRecognition",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "oriya",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "osmanya",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "phagsPa",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "phaistosDisc",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoenician",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensions",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "phoneticExtensionsSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "playingCard",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "privateUseArea",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "rejang",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "rumiNumericalSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "runic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "samaritan",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "saurashtra",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "sharada",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "shavian",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "sinhala",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "smallFormVariant",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "soraSompeng",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "spacingModifier",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "special",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundanese",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "sundaneseSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "superscriptOrSubscript",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalArrowB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalMathematicalOperator",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementalPunctuation",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaA",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "supplementaryPrivateUseAreaB",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "sylotiNagri",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "syriac",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "tag",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagalog",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "tagbanwa",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiLe",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiTham",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiViet",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "taiXuanJingSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "takri",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "tamil",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "telugu",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "thaana",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "thai",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "tibetan",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "tifinagh",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "transportOrMapSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "ugaritic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "unicode",
            "comment": " Generate a random Character in the valid unicode range.\nNote: This can produce garbage values as unicode doesn't use all valid values.\nTo test for specific languages and character sets, use the appropriate one\nfrom the list.\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabic",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "unifiedCanadianAboriginalSyllabicExtended",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "upperCaseLatin",
            "comment": " Generate a random upper-case Latin Letter\n",
            "type": "Random.Generator Char"
          },
          {
            "name": "vai",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelector",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "variationSelectorSupplement",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "vedicExtensions",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "verticalForm",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiRadical",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "yiSyllable",
            "comment": "",
            "type": "Random.Generator Char"
          },
          {
            "name": "yijingHexagramSymbol",
            "comment": "",
            "type": "Random.Generator Char"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Color",
        "comment": " List of Color Generators\n\n# Generators\n@docs color, rgb, rgba, hsl, hsla, greyscale, grayscale, red, green, blue\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "blue",
            "comment": " Generate a random shade of blue\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "color",
            "comment": " Generate a random color\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Alias for greyscale\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "green",
            "comment": " Generate a random shade of green\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Generate a random shade of grey\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Generate a random color which randomizes hsl values\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Generate a random color which randomizes hsla values\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "red",
            "comment": " Generate a random shade of red\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Generate a random color which randomizes rgb values\n",
            "type": "Random.Generator Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Generate a random color which randomizes rgba values\n",
            "type": "Random.Generator Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Date",
        "comment": " List of date Generators\n\n# Generators\n@docs date, day, month, year, hour, hour24, hour12, minute, second\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "date",
            "comment": " Generate a random date given a start date and an end date.\n",
            "type": "Date.Date -> Date.Date -> Random.Generator Date.Date"
          },
          {
            "name": "day",
            "comment": " Generate a random day of the week.\n",
            "type": "Random.Generator Date.Day"
          },
          {
            "name": "hour",
            "comment": " Generate a random hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour12",
            "comment": " Generate a random 12-hour day hour (random int between 0 and 11 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "hour24",
            "comment": " Generate a random 24-hour day hour (random int between 0 and 23 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "minute",
            "comment": " Generate a random minute (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "month",
            "comment": " Generate a random month of the year.\n",
            "type": "Random.Generator Date.Month"
          },
          {
            "name": "second",
            "comment": " Generate a random second (random int between 0 and 59 inclusive)\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "year",
            "comment": " Generate a random year given a start year and end year (alias for `int`)\n",
            "type": "Int -> Int -> Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Dict",
        "comment": " List of Dict Generators\n\n# Generators\n@docs dict, emptyDict, rangeLengthDict\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Generate a random dict with given length, key generator, and value generator\n\n    randomLength10StringIntDict = dict 10 (englishWord 10) (int 0 100)\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          },
          {
            "name": "emptyDict",
            "comment": " Generator that always generates the empty dict\n",
            "type": "Random.Generator (Dict.Dict comparable value)"
          },
          {
            "name": "rangeLengthDict",
            "comment": " Generate a random dict of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator comparable -> Random.Generator value -> Random.Generator (Dict.Dict comparable value)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Float",
        "comment": " List of Float Generators\n\n# Generators\n@docs anyFloat, positiveFloat, negativeFloat, floatGreaterThan, floatLessThan, probability, negativeProbability, unitRange\n\n# Gaussian Generators\n@docs normal, standardNormal, gaussian\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyFloat",
            "comment": " Generator that generates any float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "floatGreaterThan",
            "comment": " Generator that generates a float greater than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "floatLessThan",
            "comment": " Generator that generates a float less than a given float\n",
            "type": "Float -> Random.Generator Float"
          },
          {
            "name": "gaussian",
            "comment": " Alias for `normal`.\n",
            "type": "Float -> Float -> Float -> Random.Generator Float"
          },
          {
            "name": "negativeFloat",
            "comment": " Generator that generates any negative float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "negativeProbability",
            "comment": " Generator that generates a float between -1 and 0\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "normal",
            "comment": " Create a generator of floats that is normally distributed with\ngiven minimum, maximum, and standard deviation.\n",
            "type": "Float -> Float -> Float -> Random.Generator Float"
          },
          {
            "name": "positiveFloat",
            "comment": " Generator that generates any positive float\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "probability",
            "comment": " Generator that generates a float between 0 and 1\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "standardNormal",
            "comment": " Generator that follows a standard normal distribution (as opposed to\na uniform distribution)\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "unitRange",
            "comment": " Generator that generates a float between - 1 and 1\n",
            "type": "Random.Generator Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Function",
        "comment": " List of Function Generators\n\n# Generators\n@docs func, func2, func3, func4, func5, func6\n\n# Infix operators\n@docs (<<<), (>>>)\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "<<<",
            "comment": " Compose two function generators. Analogous to `<<`\n",
            "type": "Random.Generator (b -> c) -> Random.Generator (a -> b) -> Random.Generator (a -> c)",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": ">>>",
            "comment": " Compose two function generators. Analogous to `>>`\n",
            "type": "Random.Generator (a -> b) -> Random.Generator (b -> c) -> Random.Generator (a -> c)",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "func",
            "comment": " Generates a random function of one argument given a generator for the output.\n",
            "type": "Random.Generator b -> Random.Generator (a -> b)"
          },
          {
            "name": "func2",
            "comment": " Generates a random function of two arguments given a generator for the output.\n",
            "type": "Random.Generator c -> Random.Generator (a -> b -> c)"
          },
          {
            "name": "func3",
            "comment": " Generates a random function of three arguments given a generator for the output.\n",
            "type": "Random.Generator d -> Random.Generator (a -> b -> c -> d)"
          },
          {
            "name": "func4",
            "comment": " Generates a random function of four arguments given a generator for the output.\n",
            "type": "Random.Generator e -> Random.Generator (a -> b -> c -> d -> e)"
          },
          {
            "name": "func5",
            "comment": " Generates a random function of five arguments given a generator for the output.\n",
            "type": "Random.Generator f -> Random.Generator (a -> b -> c -> d -> e -> f)"
          },
          {
            "name": "func6",
            "comment": " Generates a random function of six arguments given a generator for the output.\n",
            "type": "Random.Generator g -> Random.Generator (a -> b -> c -> d -> e -> f -> g)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Keyboard",
        "comment": " List of Keyboard Generators\n\n# Generators\n@docs arrows, keyCode, numberKey, letterKey, arrowKey, numpadKey, fKey\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "arrowKey",
            "comment": " Generate a random arrow key input\n",
            "type": "Random.Generator Char.KeyCode"
          },
          {
            "name": "arrows",
            "comment": " Generate random Keyboard arrows input\n",
            "type": "Random.Generator { x : Int, y : Int }"
          },
          {
            "name": "fKey",
            "comment": " Generate a random fKey input\n",
            "type": "Random.Generator Char.KeyCode"
          },
          {
            "name": "keyCode",
            "comment": " Generate a random Keyboard input.\n",
            "type": "Random.Generator Char.KeyCode"
          },
          {
            "name": "letterKey",
            "comment": " Generate a random letter key input\n",
            "type": "Random.Generator Char.KeyCode"
          },
          {
            "name": "numberKey",
            "comment": " Generate a random number key input\n",
            "type": "Random.Generator Char.KeyCode"
          },
          {
            "name": "numpadKey",
            "comment": " Generate a random numpadKey input\n",
            "type": "Random.Generator Char.KeyCode"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.List",
        "comment": " List of List Generators\n\n# Generators\n@docs emptyList, rangeLengthList\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "emptyList",
            "comment": " Generator that always returns the empty list.\n",
            "type": "Random.Generator (List a)"
          },
          {
            "name": "rangeLengthList",
            "comment": " Generate a random list of random length given a minimum length and\na maximum length.\n",
            "type": "Int -> Int -> Random.Generator a -> Random.Generator (List a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Mailbox",
        "comment": " List of Mailbox Generators\n\n# Generators\n@docs mailbox, address\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "address",
            "comment": " Generates a random mailbox address\n",
            "type": "Random.Generator a -> Random.Generator (Signal.Address a)"
          },
          {
            "name": "mailbox",
            "comment": " Generates a random mailbox\n",
            "type": "Random.Generator a -> Random.Generator (Signal.Mailbox a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Maybe",
        "comment": " List of Maybe Generators\n\n# Generators\n@docs maybe, withDefault, withDefaultGenerator\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "maybe",
            "comment": " Generate a Maybe from a generator. Will generate Nothings 50% of the time.\n",
            "type": "Random.Generator a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "withDefault",
            "comment": " Generate values from a maybe generator or a default value.\n",
            "type": "a -> Random.Generator (Maybe.Maybe a) -> Random.Generator a"
          },
          {
            "name": "withDefaultGenerator",
            "comment": " Generate values from a maybe generator or a default generator.\n",
            "type": "Random.Generator a -> Random.Generator (Maybe.Maybe a) -> Random.Generator a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Order",
        "comment": " List of Order Generators\n\n# Generators\n@docs order\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "order",
            "comment": " Generate a random order with equal probability.\n",
            "type": "Random.Generator Basics.Order"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Result",
        "comment": " List of Result Generators\n\n# Generators\n@docs ok, error, result\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "error",
            "comment": " Generate an error result from a random generator of errors\n",
            "type": "Random.Generator error -> Random.Generator (Result.Result error value)"
          },
          {
            "name": "ok",
            "comment": " Generate an ok result from a random generator of values\n",
            "type": "Random.Generator value -> Random.Generator (Result.Result error value)"
          },
          {
            "name": "result",
            "comment": " Generate an ok result or an error result with 50-50 chance\n\nThis is simply implemented as follows:\n\n    result errorGenerator okGenerator =\n      frequency\n        [ (1, error errorGenerator)\n        , (1, ok okGenerator)\n        ] (ok okGenerator)\n\nIf you want to generate results with a different frequency, tweak those\nnumbers to your bidding in your own custom generators.\n",
            "type": "Random.Generator error -> Random.Generator value -> Random.Generator (Result.Result error value)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Window",
        "comment": " List of window Generators\n\n# Generators\n@docs windowDimensions, windowWidth, windowHeight\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "windowDimensions",
            "comment": " Generate a random tuple of window dimensions given a minimum screen width, a maximum screen width, a minimum screen height, a maximum screen height\n",
            "type": "Int -> Int -> Int -> Int -> Random.Generator ( Int, Int )"
          },
          {
            "name": "windowHeight",
            "comment": " Generate a random width height value given a minimum screen height and a maximum screen height\n",
            "type": "Int -> Int -> Random.Generator Int"
          },
          {
            "name": "windowWidth",
            "comment": " Generate a random window width value given a minimum screen width and a maximum screen width\n",
            "type": "Int -> Int -> Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Signal",
        "comment": " List of Signal Generators\n\n# Generators\n@docs constant\n\n# Random Seeds\n@docs randomSeed, randomSeedEvery\n\n# Generate Signals\n@docs generate, generateEvery\n\n# Generate a run of an application\n@docs application, run\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "application",
            "comment": " Generate a random run of an application that follows the Elm Architecture.\nHere, the Elm Architecture is interpreted as follows:\n\n    initialModel : model\n    actions : Signal action\n    update : action -> model -> model\n    view : model -> view -- where view is usually Element or Html\n\n    main =\n      Signal.map view\n        (Signal.foldp update initialModel actions)\n\n\nHow to use:\n\n    applicationGenerator =\n      application initialModel actionGenerator update view\n\n    main =\n      generate applicationGenerator\n\n",
            "type": "model -> Random.Generator action -> (action -> model -> model) -> (model -> view) -> Random.Generator view"
          },
          {
            "name": "constant",
            "comment": " Generates constant signals.\n",
            "type": "Random.Generator a -> Random.Generator (Signal.Signal a)"
          },
          {
            "name": "generate",
            "comment": " Generate a signal from a random generator that updates 60 times per second.\n",
            "type": "Random.Generator a -> Signal.Signal a"
          },
          {
            "name": "generateEvery",
            "comment": " Generate a signal from a random generator that updates every\ngiven number of milliseconds.\n",
            "type": "Time.Time -> Random.Generator a -> Signal.Signal a"
          },
          {
            "name": "randomSeed",
            "comment": " Generate a random seed that updates 60 times per second.\nNote: The seed uses the current Unix time.\n",
            "type": "Signal.Signal Random.Seed"
          },
          {
            "name": "randomSeedEvery",
            "comment": " Generate a random seed that updates every given timestep.\n",
            "type": "Time.Time -> Signal.Signal Random.Seed"
          },
          {
            "name": "run",
            "comment": " Create a running signal from an application that follows the Elm Architecture.\nThis is analogous to `application` and works better as it avoids issues with\n`Random.Extra.reduce`.\n\nHow to use:\n\n    main =\n      run initialModel actionGenerator update view\n",
            "type": "model -> Random.Generator action -> (action -> model -> model) -> (model -> view) -> Signal.Signal view"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Task",
        "comment": " List of Task Generators\n\n# Generators\n@docs task, error, spawn\n\n# Timeout Generators\n@docs timeout, rangeLengthTimeout\n\n# Chaining Task Generators\n@docs sequence, parallel, optional\n\n# Generators that communicate with mailboxes\n@docs send, broadcast\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "broadcast",
            "comment": " Generate a task that broadcasts randomly generated values to a given address\nusing a given random generator\n",
            "type": "List (Signal.Address a) -> Random.Generator a -> Random.Generator (Task.Task error ())"
          },
          {
            "name": "error",
            "comment": " Generate a failed task from a generator of error values\n",
            "type": "Random.Generator error -> Random.Generator (Task.Task error value)"
          },
          {
            "name": "optional",
            "comment": " Generate a sequence of optional tasks that are run in sequence from a list\nof tasks\n",
            "type": "Random.Generator (List (Task.Task x value)) -> Random.Generator (Task.Task y (List value))"
          },
          {
            "name": "parallel",
            "comment": " Generate a sequence of tasks that are run in parallel from a list of tasks\n",
            "type": "Random.Generator (List (Task.Task error value)) -> Random.Generator (Task.Task error (List Task.ThreadID))"
          },
          {
            "name": "rangeLengthTimeout",
            "comment": " Generate a timeout which times out at some point between a given minimum\nand maximum time\n",
            "type": "Time.Time -> Time.Time -> Random.Generator (Task.Task error ())"
          },
          {
            "name": "send",
            "comment": " Generate a task that sends randomly generated values to a given address\nusing a given random generator\n",
            "type": "Signal.Address a -> Random.Generator a -> Random.Generator (Task.Task error ())"
          },
          {
            "name": "sequence",
            "comment": " Generate a sequence of tasks that are run in series from a list of tasks\n",
            "type": "Random.Generator (List (Task.Task error value)) -> Random.Generator (Task.Task error (List value))"
          },
          {
            "name": "spawn",
            "comment": " Generate a task that is spawned in some independent thread given a\ntask generator\n",
            "type": "Random.Generator (Task.Task x value) -> Random.Generator (Task.Task y Task.ThreadID)"
          },
          {
            "name": "task",
            "comment": " Generate a successful task from a generator of successful values\n",
            "type": "Random.Generator value -> Random.Generator (Task.Task error value)"
          },
          {
            "name": "timeout",
            "comment": " Generate a timeout of given time\n",
            "type": "Time.Time -> Random.Generator (Task.Task error ())"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Set",
        "comment": " List of Random Set Generators\n\n# Generators\n@docs empty, singleton, set, notInSet\n\n# Combinators\n@docs select, selectWithDefault\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " Generator that always returns the empty set\n",
            "type": "Random.Generator (Set.Set comparable)"
          },
          {
            "name": "notInSet",
            "comment": " A generator that creates values not present in a given set.\n",
            "type": "Set.Set comparable -> Random.Generator comparable -> Random.Generator comparable"
          },
          {
            "name": "select",
            "comment": " Generate values from a set.\nAnalogous to `Random.Extra.select` but with sets\n",
            "type": "Set.Set comparable -> Random.Generator (Maybe.Maybe comparable)"
          },
          {
            "name": "selectWithDefault",
            "comment": " Generate values from a set or a default value.\nAnalogous to `Random.Extra.selectWithDefault` but with sets\n",
            "type": "comparable -> Set.Set comparable -> Random.Generator comparable"
          },
          {
            "name": "set",
            "comment": " Generate a set of at most the given size from a generator.\n\nThe size of a generated set is limited both by the integer provided and the\nnumber of unique values the generator can generate. It is very likely, but not\nguaranteed, that generated sets will be as big as the smaller of the two limits.\n",
            "type": "Int -> Random.Generator comparable -> Random.Generator (Set.Set comparable)"
          },
          {
            "name": "singleton",
            "comment": " Generator that creates a singleton set from a generator\n",
            "type": "Random.Generator comparable -> Random.Generator (Set.Set comparable)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Extra",
        "comment": " Module providing extra functionality to the core Random module.\n\n# Constant Generators\n@docs constant\n\n# Generator Transformers\n@docs flattenList\n\n# Select\n@docs select, selectWithDefault, frequency, merge\n\n# Maps\nBecause `map` and `mapN` up through N=5 were added to the core Random\nlibrary in Elm 0.16, the versions below are aliases and are kept only\nfor compatibility with prior versions of this library.\n@docs map, map2, map3, map4, map5, map6, mapConstraint\n\n# Flat Maps\n@docs flatMap, flatMap2, flatMap3, flatMap4, flatMap5, flatMap6\n\n# Zips\n@docs zip, zip3, zip4, zip5, zip6\n\n# Reducers\n@docs reduce, fold\n\n# Chaining Generators\n@docs andMap, andThen\n\n# Filtering Generators\n@docs keepIf, dropIf\n\n# Functions that generate random values from Generators\n@docs generateN, quickGenerate, cappedGenerateUntil, generateIterativelyUntil, generateIterativelySuchThat, generateUntil, generateSuchThat\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Apply a generator of functions to a generator of values.\nUseful for chaining generators.\n",
            "type": "Random.Generator (a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "andThen",
            "comment": " An alias for `Random.andThen` in the standard library. This\nversion is kept for compatibility.\n",
            "type": "Random.Generator a -> (a -> Random.Generator b) -> Random.Generator b"
          },
          {
            "name": "cappedGenerateUntil",
            "comment": " Generate iteratively a list of values from a generator until either\nthe given maxlength is reached or the predicate is satisfied.\n\n    cappedGenerateUntil maxLength predicate generator seed\n",
            "type": "Int -> (a -> Bool) -> Random.Generator a -> Random.Seed -> List a"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always returns the same value.\n",
            "type": "a -> Random.Generator a"
          },
          {
            "name": "dropIf",
            "comment": " Convert a generator into a generator that only generates values\nthat do not satisfy a given predicate.\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "flatMap",
            "comment": "",
            "type": "(a -> Random.Generator b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "flatMap2",
            "comment": "",
            "type": "(a -> b -> Random.Generator c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "flatMap3",
            "comment": "",
            "type": "(a -> b -> c -> Random.Generator d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "flatMap4",
            "comment": "",
            "type": "(a -> b -> c -> d -> Random.Generator e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "flatMap5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> Random.Generator f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "flatMap6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> Random.Generator g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "flattenList",
            "comment": " Turn a list of generators into a generator of lists.\n",
            "type": "List (Random.Generator a) -> Random.Generator (List a)"
          },
          {
            "name": "fold",
            "comment": " Alias for reduce.\n",
            "type": "(a -> b -> b) -> b -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "frequency",
            "comment": " Create a generator that chooses a generator from a tuple of generators\nbased on the provided likelihood. The likelihood of a given generator being\nchosen is its likelihood divided by the sum of all likelihood. A default\ngenerator must be provided in the case that the list is empty or that the\nsum of the likelihoods is 0. Note that the absolute values of the likelihoods\nis always taken.\n",
            "type": "List ( Float, Random.Generator a ) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "generateIterativelySuchThat",
            "comment": " Generate iteratively a list of values from a generator parametrized by\nthe value of the iterator until either the given maxlength is reached or\nthe predicate ceases to be satisfied.\n\n    generateIterativelySuchThat maxLength predicate constructor seed\n",
            "type": "Int -> (a -> Bool) -> (Int -> Random.Generator a) -> Random.Seed -> List a"
          },
          {
            "name": "generateIterativelyUntil",
            "comment": " Generate iteratively a list of values from a generator parametrized by\nthe value of the iterator until either the given maxlength is reached or\nthe predicate is satisfied.\n\n    generateIterativelyUntil maxLength predicate constructor seed\n",
            "type": "Int -> (a -> Bool) -> (Int -> Random.Generator a) -> Random.Seed -> List a"
          },
          {
            "name": "generateN",
            "comment": " Generate n values from a generator.\n",
            "type": "Int -> Random.Generator a -> Random.Seed -> List a"
          },
          {
            "name": "generateSuchThat",
            "comment": " Generate a value from a generator that satisfies a given predicate\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Seed -> ( a, Random.Seed )"
          },
          {
            "name": "generateUntil",
            "comment": " Generate a list of values from a generator until the given predicate\nis satisfied\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Seed -> List a"
          },
          {
            "name": "keepIf",
            "comment": " Convert a generator into a generator that only generates values\nthat satisfy a given predicate.\nNote that if the predicate is unsatisfiable, the generator will not terminate.\n",
            "type": "(a -> Bool) -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "map",
            "comment": "",
            "type": "(a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "map2",
            "comment": "",
            "type": "(a -> b -> c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "map6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator g"
          },
          {
            "name": "mapConstraint",
            "comment": " Apply a constraint onto a generator and returns both the input to\nthe constraint and the result of applying the constaint.\n",
            "type": "(a -> b) -> Random.Generator a -> Random.Generator ( a, b )"
          },
          {
            "name": "merge",
            "comment": " Choose between two generators with a 50-50 chance.\nUseful for merging two generators that cover different areas of the same type.\n",
            "type": "Random.Generator a -> Random.Generator a -> Random.Generator a"
          },
          {
            "name": "quickGenerate",
            "comment": " Quickly generate a value from a generator disregarding seeds.\n",
            "type": "Random.Generator a -> a"
          },
          {
            "name": "reduce",
            "comment": " Reduce a generator using a reducer and an initial value.\nNote that the initial value is always passed to the function;\nnot the previously generator value.\n",
            "type": "(a -> b -> b) -> b -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "select",
            "comment": " Generator that randomly selects an element from a list.\n",
            "type": "List a -> Random.Generator (Maybe.Maybe a)"
          },
          {
            "name": "selectWithDefault",
            "comment": " Generator that randomly selects an element from a list with a default value\n(in case you pass in an empty list).\n",
            "type": "a -> List a -> Random.Generator a"
          },
          {
            "name": "zip",
            "comment": "",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator ( a, b )"
          },
          {
            "name": "zip3",
            "comment": "",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": "",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": "",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator ( a, b, c, d, e )"
          },
          {
            "name": "zip6",
            "comment": "",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f -> Random.Generator ( a, b, c, d, e, f )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.Int",
        "comment": " List of Int Generators\n\n# Generators\n@docs anyInt, positiveInt, negativeInt, intGreaterThan, intLessThan\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "anyInt",
            "comment": " Generator that generates any int that can be generate by the\nrandom generator algorithm.\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "intGreaterThan",
            "comment": " Generator that generates an int greater than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "intLessThan",
            "comment": " Generator that generates an int less than a given int\n",
            "type": "Int -> Random.Generator Int"
          },
          {
            "name": "negativeInt",
            "comment": " Generator that generates a negative int\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "positiveInt",
            "comment": " Generator that generates a positive int\n",
            "type": "Random.Generator Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-shrink",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Shrink",
        "comment": " Library containing a collection of basic shrinking strategies and\nhelper functions to help you construct shrinking strategies.\n\n# Shinker\n@docs Shrinker\n\n# Shrinkers\n@docs noShrink, void, bool, order, int, atLeastInt, float, atLeastFloat, char, atLeastChar, character, string, maybe, result, lazylist, list, array, tuple, tuple3, tuple4, tuple5\n\n# Useful functions\n@docs convert, keepIf, dropIf, merge, map, andMap\n\n",
        "aliases": [
          {
            "name": "Shrinker",
            "comment": " Shrinker type.\nA shrinker is a function that takes a value and returns a list of values that\nare in some sense \"smaller\" than the given value. If there are no such values\nconceptually, then the shrinker should just return the empty list.\n",
            "args": [
              "a"
            ],
            "type": "a -> Lazy.List.LazyList a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andMap",
            "comment": " Apply a lazy list of functions on a lazy list of values.\n    andMap = Lazy.List.map2 (<|)\nThis is useful in order to compose shrinkers, especially when used in\nconjunction with `andMap`.\n",
            "type": "Lazy.List.LazyList (a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "array",
            "comment": " Array shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Arrays.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Array.Array a)"
          },
          {
            "name": "atLeastChar",
            "comment": " Construct a shrinker of chars which considers the given char to\nbe most minimal.\n",
            "type": "Char -> Shrink.Shrinker Char"
          },
          {
            "name": "atLeastFloat",
            "comment": " Construct a shrinker of floats which considers the given float to\nbe most minimal.\n",
            "type": "Float -> Shrink.Shrinker Float"
          },
          {
            "name": "atLeastInt",
            "comment": " Construct a shrinker of ints which considers the given int to\nbe most minimal.\n",
            "type": "Int -> Shrink.Shrinker Int"
          },
          {
            "name": "bool",
            "comment": " Shrinker of bools.\n",
            "type": "Shrink.Shrinker Bool"
          },
          {
            "name": "char",
            "comment": " Shrinker of chars.\n",
            "type": "Shrink.Shrinker Char"
          },
          {
            "name": "character",
            "comment": " Shrinker of chars which considers the empty space as the most\nminimal char and omits the control key codes.\n\nEquivalent to:\n\n    atLeastChar (Char.fromCode 32)\n",
            "type": "Shrink.Shrinker Char"
          },
          {
            "name": "convert",
            "comment": " Convert a Shrinker of a's into a Shrinker of b's using two inverse functions.\n\nIf you use this function as follows:\n\n    shrinkerB = f g shrinkerA\n\nMake sure that\n\n    `f(g(x)) == x` for all x\n\nOr else this process will generate garbage.\n",
            "type": "(a -> b) -> (b -> a) -> Shrink.Shrinker a -> Shrink.Shrinker b"
          },
          {
            "name": "dropIf",
            "comment": " Filter out the results of a shrinker. The resulting shrinker\nwill only throw away shrinks which satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "float",
            "comment": " Shrinker of floats.\n",
            "type": "Shrink.Shrinker Float"
          },
          {
            "name": "int",
            "comment": " Shrinker of integers.\n",
            "type": "Shrink.Shrinker Int"
          },
          {
            "name": "keepIf",
            "comment": " Filter out the results of a shrinker. The resulting shrinker\nwill only produce shrinks which satisfy the given predicate.\n",
            "type": "(a -> Bool) -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "lazylist",
            "comment": " Lazy List shrinker constructor. (must be finite)\nTakes a shrinker of values and returns a shrinker of Lazy Lists.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Lazy.List.LazyList a)"
          },
          {
            "name": "list",
            "comment": " List shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Lists.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (List a)"
          },
          {
            "name": "map",
            "comment": " Re-export of `Lazy.List.map`\nThis is useful in order to compose shrinkers, especially when used in\nconjunction with `andMap`.\nExample:\n    type alias Vector =\n      { x : Float\n      , y : Float\n      , z : Float\n      }\n    vector : Shrinker Float\n    vector {x,y,z} =\n      Vector\n        `map`    float x\n        `andMap` float y\n        `andMap` float z\n",
            "type": "(a -> b) -> Lazy.List.LazyList a -> Lazy.List.LazyList b"
          },
          {
            "name": "maybe",
            "comment": " Maybe shrinker constructor.\nTakes a shrinker of values and returns a shrinker of Maybes.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker (Maybe.Maybe a)"
          },
          {
            "name": "merge",
            "comment": " Merge two shrinkers.\n",
            "type": "Shrink.Shrinker a -> Shrink.Shrinker a -> Shrink.Shrinker a"
          },
          {
            "name": "noShrink",
            "comment": " Empty shrinker. Always returns the empty list.\n",
            "type": "Shrink.Shrinker a"
          },
          {
            "name": "order",
            "comment": " Shrinker of Order.\n",
            "type": "Shrink.Shrinker Basics.Order"
          },
          {
            "name": "result",
            "comment": " Result shrinker constructor.\nTakes a shrinker of errors and a shrinker of values and returns a shrinker\nof Results.\n",
            "type": "Shrink.Shrinker error -> Shrink.Shrinker value -> Shrink.Shrinker (Result.Result error value)"
          },
          {
            "name": "string",
            "comment": " Shrinker of strings. Considers the empty string to be the most\nminimal string and the space to be the most minimal char.\n\nEquivalent to:\n\n    convert String.fromList String.toList (list character)\n",
            "type": "Shrink.Shrinker String"
          },
          {
            "name": "tuple",
            "comment": " 2-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a, Shrink.Shrinker b ) -> Shrink.Shrinker ( a, b )"
          },
          {
            "name": "tuple3",
            "comment": " 3-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a, Shrink.Shrinker b, Shrink.Shrinker c ) -> Shrink.Shrinker ( a, b, c )"
          },
          {
            "name": "tuple4",
            "comment": " 4-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a , Shrink.Shrinker b , Shrink.Shrinker c , Shrink.Shrinker d ) -> Shrink.Shrinker ( a, b, c, d )"
          },
          {
            "name": "tuple5",
            "comment": " 5-Tuple shrinker constructor.\nTakes a tuple of shrinkers and returns a shrinker of tuples.\n",
            "type": "( Shrink.Shrinker a , Shrink.Shrinker b , Shrink.Shrinker c , Shrink.Shrinker d , Shrink.Shrinker e ) -> Shrink.Shrinker ( a, b, c, d, e )"
          },
          {
            "name": "void",
            "comment": " Shrink the empty tuple. Equivalent to `noShrink`.\n",
            "type": "Shrink.Shrinker ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-string-extra",
    "version": "1.2.0",
    "docs": [
      {
        "name": "String.Extra",
        "comment": " Convenience functions for working with Strings\n\n# Formatting\n@docs capitalize, pluralize\n\n# Whitespace\n@docs isWhitespace\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "capitalize",
            "comment": " Capitalize or uncapitalize the given string.\n\n    capitalize True \"foo\"\n    -- \"Foo\"\n\n    capitalize False \"BAR\"\n    -- \"bAR\"\n",
            "type": "Bool -> String -> String"
          },
          {
            "name": "isWhitespace",
            "comment": " Returns True iff the given String is 1 or more whitespace characters,\nand nothing else.\n\n(Whitespace is defined as the regular expression `\\s` matcher.)\n\n    isWhitespace \"\"   == False\n    isWhitespace \" \"  == True\n    isWhitespace \"  \" == True\n    isWhitespace \" x\" == False\n    isWhitespace \"x \" == False\n",
            "type": "String -> Bool"
          },
          {
            "name": "pluralize",
            "comment": " Given a number, a singular string, and a plural string, returns the number\nfollowed by a space, followed by either the singular string if the number was 1,\nor the plural string otherwise.\n\n    pluralize \"elf\" \"elves\" 2 == \"2 elves\"\n    pluralize \"elf\" \"elves\" 1 == \"1 elf\"\n    pluralize \"elf\" \"elves\" 0 == \"0 elves\"\n\n",
            "type": "String -> String -> number -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-sweet-poll",
    "version": "1.1.0",
    "docs": [
      {
        "name": "SweetPoll",
        "comment": "\n\n# Configuration\n@docs Config, defaultConfig\n\n# Elm Artchitecture\n@docs Model, Action, init, update\n\n# Record Extension Component\n@docs ComponentModel, componentUpdate\n",
        "aliases": [
          {
            "name": "ComponentModel",
            "comment": " Model type for using the NoRedInk/elm-api-components pattern\n",
            "args": [
              "base",
              "data"
            ],
            "type": "{ base | sweetPoll : SweetPoll.Model data }"
          },
          {
            "name": "Config",
            "comment": " ",
            "args": [
              "data"
            ],
            "type": "{ url : String , decoder : Json.Decode.Decoder data , delay : Time.Time , samesBeforeDelay : Int , delayMultiplier : Float , maxDelay : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " ",
            "args": [
              "data"
            ],
            "cases": [
              [
                "PollSuccess",
                [
                  "data"
                ]
              ],
              [
                "PollFailure",
                [
                  "Testable.Http.Error"
                ]
              ]
            ]
          },
          {
            "name": "Model",
            "comment": " Private state of the SweetPoll component\n",
            "args": [
              "data"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "componentUpdate",
            "comment": " Update function for using the NoRedInk/elm-api-components pattern\n",
            "type": "SweetPoll.Action data -> SweetPoll.ComponentModel base data -> ( SweetPoll.ComponentModel base data , Testable.Effects.Effects (SweetPoll.Action data) )"
          },
          {
            "name": "defaultConfig",
            "comment": " Default configuration for SweetPoll\n",
            "type": "Json.Decode.Decoder data -> String -> SweetPoll.Config data"
          },
          {
            "name": "init",
            "comment": " ",
            "type": "SweetPoll.Config data -> ( SweetPoll.Model data , Testable.Effects.Effects (SweetPoll.Action data) )"
          },
          {
            "name": "update",
            "comment": " The SweetPoll StartApp-style update function\n",
            "type": "SweetPoll.Action data -> SweetPoll.Model data -> ( SweetPoll.Model data , Testable.Effects.Effects (SweetPoll.Action data) )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/elm-task-extra",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Task.Extra",
        "comment": " Contains a list of convenient functions that cover common use cases\nfor tasks.\n\n# Chaining Tasks\n@docs optional, parallel\n\n# Communicating with Mailboxes\n@docs broadcast, intercept, interceptSuccess, interceptError\n\n# Make operations async\n@docs computeLazyAsync\n\n# Delay a task\n@docs delay\n\n# Looping forever\n@docs loop\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "broadcast",
            "comment": " Sends a value to a list of addresses at once.\n",
            "type": "List (Signal.Address a) -> a -> Task.Task error ()"
          },
          {
            "name": "computeLazyAsync",
            "comment": " Compute a lazy value asynchronously and send the result to an address.\n",
            "type": "Signal.Address value -> (() -> value) -> Task.Task error ()"
          },
          {
            "name": "delay",
            "comment": " Delay a task by a given amount of time in milliseconds.\n",
            "type": "Time.Time -> Task.Task error value -> Task.Task error value"
          },
          {
            "name": "intercept",
            "comment": " Intercept the values computed by a task by sending them to appropriate\nan address. The address accepts a Result such as to capture both successful\nvalues and error values. The intercepted task will simply `succeed` on success\nwith the successful value and `fail` on failure with the error thus making\nthe interception process feel as though the task is unaffected.\n",
            "type": "Signal.Address (Result.Result error value) -> Task.Task error value -> Task.Task error value"
          },
          {
            "name": "interceptError",
            "comment": " Intercept the error value computed by a task by sending it to the given address.\nThe result task will just `fail` after being sent to the address thus making\nthe interception process feel as though the task is unaffected.\n",
            "type": "Signal.Address error -> Task.Task error value -> Task.Task error value"
          },
          {
            "name": "interceptSuccess",
            "comment": " Intercept the successful value computed by a task by sending it to the given address.\nThe result task will just `succeed` after being sent to the address thus making\nthe interception process feel as though the task is unaffected.\n",
            "type": "Signal.Address value -> Task.Task error value -> Task.Task error value"
          },
          {
            "name": "loop",
            "comment": " Runs a task repeatedly every given milliseconds.\n\n    loop 1000 myTask -- Runs `myTask` every second\n",
            "type": "Time.Time -> Task.Task error value -> Task.Task error ()"
          },
          {
            "name": "optional",
            "comment": " Similar to `Task.sequence`.\nThe difference with `Task.sequence` is that it doesn't return an `error` if\nany individual task fails. If an error is encountered, then this function will\nmarch on and perform the next task ignoring the error.\n",
            "type": "List (Task.Task x value) -> Task.Task y (List value)"
          },
          {
            "name": "parallel",
            "comment": " Analogous to `Task.sequence`.\nSchedule a list of tasks to be performed in parallel as opposed to in series\nas is the case with `Task.sequence`.\n\n*Note that there is no guarantee that the tasks will be performed or complete\nin the order you have stated. This is why you may use the returned `ThreadID`\nfor re-ordering or consider integrating a sorting mechanism within your program.*\n",
            "type": "List (Task.Task error value) -> Task.Task error (List Task.ThreadID)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/nri-elm-css",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Nri",
        "comment": " A collection of helpers for working with NoRedInk projects\n@docs name\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "name",
            "comment": " NoRedInk's name!\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Nri.Colors",
        "comment": " Helper module for working with colors\n@docs grayDarker\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "grayDarker",
            "comment": " Darkest gray\n",
            "type": "Css.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Nri.Stylers",
        "comment": " Helper module for working with fonts\n\n@docs makeFont\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "makeFont",
            "comment": "\ntakes a size and a color and creates a font\n",
            "type": "Css.FontSize a -> Css.ColorValue b -> Css.Mixin"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "NoRedInk/start-app",
    "version": "2.0.0",
    "docs": [
      {
        "name": "StartApp",
        "comment": " This module helps you start your application in a typical Elm workflow.\nIt assumes you are following [the Elm Architecture][arch] and using\n[elm-effects][]. From there it will wire everything up for you!\n\n**Be sure to [read the Elm Architecture tutorial][arch] to learn how this all\nworks!**\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial\n[elm-effects]: http://package.elm-lang.org/packages/evancz/elm-effects/latest\n\n# Start your Application\n@docs start, Config, App\n\n",
        "aliases": [
          {
            "name": "App",
            "comment": " An `App` is made up of a couple signals:\n\n  * `model` &mdash; a signal representing the current model. Generally you\n    will not need this one, but it is there just in case. You will know if you\n    need this.\n\n  * `tasks` &mdash; a signal of tasks that need to get run. Your app is going\n    to be producing tasks in response to all sorts of events, so this needs to\n    be hooked up to a `port` to ensure they get run.\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ model : Signal.Signal model , tasks : Signal.Signal (Task.Task Effects.Never ()) , address : Signal.Address action }"
          },
          {
            "name": "Config",
            "comment": " The configuration of an app follows the basic model / update / view pattern\nthat you see in every Elm program.\n\nThe `init` transaction will give you an initial model and create any tasks that\nare needed on start up.\n\nThe `update` describe how to step over the model based on requests coming in\n\nThe `inputs` field is for any external signals you might need. If you need to\nget values from JavaScript, they will come in through a port as a signal which\nyou can pipe into your app as one of the `inputs`.\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ init : ( model, Effects.Effects action ) , update : action -> model -> ( model, Effects.Effects action ) , inputs : List (Signal.Signal action) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " Start an application. It requires a bit of wiring once you have created an\n`App`. It should pretty much always look like this:\n\n    app =\n        start { init = init, update = update, inputs = [] }\n\n    port tasks : Signal (Task.Task Never ())\n    port tasks =\n        app.tasks\n\nSo once we start the `App` we feed the resulting\ntasks into a `port` that will run them all.\n",
            "type": "StartApp.Config model action -> StartApp.App model action"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "SelectricSimian/elm-constructive",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Constructive.Combinators",
        "comment": " \n# Composing Viewers\n\n@docs viewFocus, viewList, viewMaybe, viewArray\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "viewArray",
            "comment": " Transform a viewer for a `model` into a viewer for an `Array` of `model`s,\nwith updates to individual array items automatically reflected in the entire\narray.\n\nBecause it produces an `Array view`, it often makes sense to transform the\nresult of this function into a list, and use it as the body of a `div` or `span`\nwhen `view` is `Html`.\n\n    viewCounterArray : Viewer Html Never (Array Int)\n    viewCounterArray address counters =\n        div [] (Array.toList (viewArray viewCounter address counters))\n",
            "type": "Constructive.Action.Viewer view other model -> Constructive.Action.Viewer (Array.Array view) other (Array.Array model)"
          },
          {
            "name": "viewFocus",
            "comment": " Transform a viewer for a child into a viewer for a parent, given a\n[`Focus`](http://package.elm-lang.org/packages/evancz/focus/latest/) from the\nparent to the child.  Replacements of the child model are automatically\nreflected as replacements of the parent model:\n\n    type CounterPair = CounterPair Int Int\n\n    viewCounterPair : Viewer Html Never CounterPair\n    viewCounterPair address pair =\n      div []\n        [ focusView left viewCounter address pair\n        , focusView right viewCounter address pair\n        ]\n\n    -- Focus boilerplate\n\n    left : Focus CounterPair Int\n    left = Focus.create\n        (\\CounterPair l _ -> l)\n        (\\f (CounterPair l r) -> (f l, r))\n\n    right : Focus CounterPair Int\n    right = Focus.create\n        (\\CounterPair _ r -> r)\n        (\\f (CounterPair l r) -> (l, f r))\n",
            "type": "Focus.Focus big small -> Constructive.Action.Viewer view other small -> Constructive.Action.Viewer view other big"
          },
          {
            "name": "viewList",
            "comment": " Transform a viewer for a `model` into a viewer for `List` of `model`s,\nwith updates to invidual list items automatically reflected in the entire list.\n\nBecause it produces a `List view`, it often makes sense to use the result of\nthis function as the body of a `div` or `span` when `view` is `Html`.\n\n    viewCounters : Viewer Html Never (List Int)\n    viewCounters address counters =\n        div [] (viewList viewCounter address counters)\n",
            "type": "Constructive.Action.Viewer view other model -> Constructive.Action.Viewer (List view) other (List model)"
          },
          {
            "name": "viewMaybe",
            "comment": " Transform a viewer for a `model` into a viewer for a `Maybe model`,\nautomatically wrapping replacement values in `Just`\n\nBecause it produces a `Maybe view`, this function should generally be used\nin conjunction with `Maybe.withDefault`:\n\n    viewMaybe viewStreetMap address currentLocation\n      |> Maybe.withDefault (text \"Location data not available\")\n",
            "type": "Constructive.Action.Viewer view other model -> Constructive.Action.Viewer (Maybe.Maybe view) other (Maybe.Maybe model)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Constructive.Action",
        "comment": " A standard interface for representing and working with actions in\nelm-constructive.  The basic idea is that an elm-constructive action is\ngenerally just a simple wrapper around a complete replacement model, rather than\ninstructions for how to modify the model.\n\nActions represented in this way can take full advantage of elm-constructive's\nview composition combinators.  Non-replacement actions can be represented within\nthis framework as well, but they will simply be \"along for the ride,\" and will\nnot benefit from any combinators or composition features.\n\n# Types and definitions\n\n@docs Action, Viewer, Never\n\n# Transforming actions\n\n@docs interceptOthers, interceptReplacements, mapReplacements\n\n# Working with `Never`\n\n@docs extractReplacementModel\n",
        "aliases": [
          {
            "name": "Viewer",
            "comment": " The basic unit of view logic in elm-constructive.  A view function takes a\n`model`, produces a `view` for that model (usually `Html`), and wires up that\n`view` to send `Actions` to a particular `Address`.\n\n    viewCounter : Viewer Html Never Int\n\n    viewSharableCounter : Viewer Html Share Int\n    \n    viewToggleButton : Viewer Html Never Bool\n",
            "args": [
              "view",
              "other",
              "model"
            ],
            "type": "Signal.Address (Constructive.Action.Action other model) -> model -> view"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Action types which may consist of a new replacement `model`, or some\n`other` action.\n\nUse `Replace` actions to represent direct modification to the model:\n\n    -- A simple counter\n    viewCounter address count =\n      div []\n        [ button [ onClick address (Replace (count + 1)) ] [ text \"+\" ]\n        , button [ onClick address (Replace (count - 1)) ] [ text \"-\" ]\n        , text (toString count)\n        ]\n\nSometimes, one needs to send an action which cannot be represented as a\nreplacement model.  You can represent these with the `Other` tag:\n\n    -- A counter whose value can be shared on social media\n\n    type Share = ShareOnFacebook Int | ShareOnTwitter Int\n\n    viewShareableCounter : Signal.Address (Action Share Int) -> Int -> Html\n    viewShareableCounter address count =\n      div []\n        [ button [ onClick address (Replace (count + 1)) ] [ text \"+\" ]\n        , button [ onClick address (Replace (count - 1)) ] [ text \"-\" ]\n        , text (toString count)\n        , button\n          [ onClick address (Other (ShareOnFacebook count)) ]\n          [ text \"Share your counter on facebook!\" ]\n        , button\n          [ onClick address (Other (ShareOnTwitter count)) ]\n          [ text \"Share your counter on twitter!\" ]\n        ]\n\nAction types which only make use of `Replace` should use `Never` as their\n`other` type:\n\n    viewToggleButton : Signal.Address (Action Never Bool) -> Bool -> Html\n    viewToggleButton address flag =\n      if flag\n        then button [ onClick address (Replace False) ] [ text \"ON\" ]\n        else button [ onClick address (Replace True) ] [ text \"OFF\" ]\n",
            "args": [
              "other",
              "model"
            ],
            "cases": [
              [
                "Replace",
                [
                  "model"
                ]
              ],
              [
                "Other",
                [
                  "other"
                ]
              ]
            ]
          },
          {
            "name": "Never",
            "comment": " An \"uninhabited\" type with no values.  This is useful for representing that\nan `Action` type consists only of `Replace` actions, and has no `Other` actions.\n\n    viewToggleButton : Viewer Html Never Bool\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "extractReplacementModel",
            "comment": " Extract the replacement model from an `Action` which is guaranteed to be a\n`Replace` action (i.e., from an `Action` where `other` is `Never`).\n\n    extractReplcementModel (Replace \"foo\") == \"foo\"\n",
            "type": "Constructive.Action.Action Constructive.Action.Never model -> model"
          },
          {
            "name": "interceptOthers",
            "comment": " Flatmap a function over actions with the `Other` tag, leaving `Replace`\nactions unchanged.\n\n    interceptOthers (\\ClearList -> Replace []) (Other ClearList) == Replace []\n\n    interceptOthers (\\ClearList -> Replace []) (Replace [1,2,3]) == Replace [1,2,3]\n\nThis is useful for having a child view produce an `Other` action which is then\ntransformed by the parent view into a `Replace` action for the parent model.\n\nPartial applications of `interceptOthers` are designed to work well with\n`Signal.forwardTo`\n",
            "type": "(other1 -> Constructive.Action.Action other2 model) -> Constructive.Action.Action other1 model -> Constructive.Action.Action other2 model"
          },
          {
            "name": "interceptReplacements",
            "comment": " Flatmap a function over actions with the `Replace` tag, leaving `Other`\nactions unchanged.\n\n    interceptReplacements (\\newModel -> Replace (Just newModel)) (Replace \"foo\") == Replace (Just \"foo\")\n\n    interceptReplacements (\\newModel -> Replace (Just newModel)) (Other ClearAll) == Other ClearAll\n\nPartial applications of `interceptReplacements` are designed to work well with\n`Signal.forwardTo`\n\nAlthough the transformation function can technically produce either an `Other`\naction or a `Replace` action, in practice one usually wants it to return a\n`Replace` action.  For most purposes, you should therefore use `mapReplacements`\ninstead, which is like `interceptReplacements`, except that it always transforms\n`Replace` actions into `Replace` actions.\n",
            "type": "(model1 -> Constructive.Action.Action other model2) -> Constructive.Action.Action other model1 -> Constructive.Action.Action other model2"
          },
          {
            "name": "mapReplacements",
            "comment": " Map a function over the new models of `Replace` actions, leaving `Other`\nactions unchanged.\n\n    mapReplacements Just (Replace \"foo\") == Replace (Just \"foo\")\n\n    mapReplacements Just (Other ClearAll) == Other ClearAll\n\nPartial applications of `mapReplacements` are designed to work well with\n`Signal.forwardTo`\n",
            "type": "(model1 -> model2) -> Constructive.Action.Action other model1 -> Constructive.Action.Action other model2"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Skinney/elm-dict-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Dict.Extra",
        "comment": " Convenience functions for working with Dict\n\n# List operations\n@docs groupBy\n\n# Manipulation\n@docs removeWhen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "groupBy",
            "comment": " Takes a key-fn and a list, creates a Dict which maps the key returned from key-fn, to a list of matching elements.\n\n    mary = {groupId: 1, name: \"Mary\"}\n    jack = {groupId: 2, name: \"Jack\"}\n    jill = {groupId: 1, name: \"Jill\"}\n    groupBy .groupId [mary, jack, jill] == Dict.fromList [(2, [jack]), (1, [mary, jill])]\n",
            "type": "(a -> comparable) -> List a -> Dict.Dict comparable (List a)"
          },
          {
            "name": "removeWhen",
            "comment": " Keep elements which fails to satisfy the predicate.\n    This is functionaly equivalent to `Dict.filter (not << predicate) dict`.\n\n    removeWhen (\\c v -> v == 1) Dict.fromList [(\"Mary\", 1), (\"Jack\", 2), (\"Jill\", 1)] == Dict.fromList [(\"Jack\", 2)]\n",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ThomasWeiser/elmfire",
    "version": "1.0.7",
    "docs": [
      {
        "name": "ElmFire.Auth",
        "comment": " Elm bindings to Firebase Authentication.\n\nNote that all tasks in this module refer to a entire Firebase, not a specific path within a Firebase.\nTherefore, only the root of the `Location` parameter is relevant.\n\n# Getting Authentication Status\n@docs Authentication, getAuth, subscribeAuth, unsubscribeAuth\n\n# Perform Authentication\n@docs Identification, authenticate, unauthenticate,\n  asAnonymous, withPassword, withOAuthPopup, withOAuthRedirect,\n  withOAuthAccessToken, withOAuthCredentials, withCustomToken\n\n# Options\n@docs Options, rememberDefault, rememberSessionOnly, rememberNone\n\n# User Management\n@docs UserOperation, userOperation,\n  createUser, removeUser, changeEmail, changePassword, resetPassword\n",
        "aliases": [
          {
            "name": "Authentication",
            "comment": " Authentication data. See Firebase doc for details. ",
            "args": [],
            "type": "{ uid : String , provider : String , token : String , expires : Date.Date , auth : Json.Encode.Value , specifics : Json.Encode.Value }"
          },
          {
            "name": "Options",
            "comment": " Optional authentication parameters\n\nAll providers allow option `remember` to specify the presistency of authentication.\n\nSpecific provider may accept additional options. See Firebase docs.\n",
            "args": [],
            "type": "List ( String, String )"
          }
        ],
        "types": [
          {
            "name": "Identification",
            "comment": " Identification options to authenticate at a Firebase ",
            "args": [],
            "cases": []
          },
          {
            "name": "UserOperation",
            "comment": " Specification of a user management operation ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "asAnonymous",
            "comment": " Identify as a anonymous, temporary guest ",
            "type": "ElmFire.Auth.Identification"
          },
          {
            "name": "authenticate",
            "comment": " Authenticate client at a Firebase ",
            "type": "ElmFire.Location -> ElmFire.Auth.Options -> ElmFire.Auth.Identification -> Task.Task ElmFire.Error ElmFire.Auth.Authentication"
          },
          {
            "name": "changeEmail",
            "comment": " UserOperation: Change the email address of a user identity.\nParameter: oldEmail password newEmail ",
            "type": "String -> String -> String -> ElmFire.Auth.UserOperation"
          },
          {
            "name": "changePassword",
            "comment": " UserOperation: Change the password of a user identity.\nParameter: email oldPassword newPassword ",
            "type": "String -> String -> String -> ElmFire.Auth.UserOperation"
          },
          {
            "name": "createUser",
            "comment": " UserOperation: Create a user identity.\nParameter: email password ",
            "type": "String -> String -> ElmFire.Auth.UserOperation"
          },
          {
            "name": "getAuth",
            "comment": " Retrieve the current authentication state of the client ",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error (Maybe.Maybe ElmFire.Auth.Authentication)"
          },
          {
            "name": "rememberDefault",
            "comment": " Option for default persistence:\nSessions are persisted for as long as it is configured in the Firebase's dashboard.\n",
            "type": "( String, String )"
          },
          {
            "name": "rememberNone",
            "comment": " Option for no persistence:\nNo persistent authentication data is used. End authentication as soon as the page is closed.\n",
            "type": "( String, String )"
          },
          {
            "name": "rememberSessionOnly",
            "comment": " Option for session only persistence:\nPersistence is limited to the lifetime of the current window.\n",
            "type": "( String, String )"
          },
          {
            "name": "removeUser",
            "comment": " UserOperation: Remove a user identity.\nParameter: email password ",
            "type": "String -> String -> ElmFire.Auth.UserOperation"
          },
          {
            "name": "resetPassword",
            "comment": " UserOperation: Initiate a password reset. Firebase will send an appropriate email to the account owner.\nParameter: email ",
            "type": "String -> ElmFire.Auth.UserOperation"
          },
          {
            "name": "subscribeAuth",
            "comment": " Subscribe to changes to the client's authentication state ",
            "type": "(Maybe.Maybe ElmFire.Auth.Authentication -> Task.Task x a) -> ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "unauthenticate",
            "comment": " Unauthenticate client at a Firebase ",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "unsubscribeAuth",
            "comment": " Quit subscription to authentication state ",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "userOperation",
            "comment": " Perform a user management operation at a Firebase\n\nOperation `createUser` returns a `Just uid` on success,\nall other operations return `Nothing` on success.\n",
            "type": "ElmFire.Location -> ElmFire.Auth.UserOperation -> Task.Task ElmFire.Error (Maybe.Maybe String)"
          },
          {
            "name": "withCustomToken",
            "comment": " Identify using an authentication token or Firebase secret ",
            "type": "String -> ElmFire.Auth.Identification"
          },
          {
            "name": "withOAuthAccessToken",
            "comment": " Identify using OAuth access token ",
            "type": "String -> String -> ElmFire.Auth.Identification"
          },
          {
            "name": "withOAuthCredentials",
            "comment": " Identify using OAuth credentials ",
            "type": "String -> List ( String, String ) -> ElmFire.Auth.Identification"
          },
          {
            "name": "withOAuthPopup",
            "comment": " Identify using a popup-based OAuth flow ",
            "type": "String -> ElmFire.Auth.Identification"
          },
          {
            "name": "withOAuthRedirect",
            "comment": " Identify using a redirect-based OAuth flow ",
            "type": "String -> ElmFire.Auth.Identification"
          },
          {
            "name": "withPassword",
            "comment": " Identify with email and password ",
            "type": "String -> String -> ElmFire.Auth.Identification"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "ElmFire",
        "comment": " Elm Bindings to Firebase.\n\nElmFire maps the Firebase JavaScript API to Elm functions and tasks.\n\n# Firebase Locations\n@docs Location, fromUrl, sub, parent, root, push\n\n# Firebase References\n@docs Reference, open, key, toUrl, location\n\n# Priorities\n@docs Priority\n\n# Writing\n@docs set, setWithPriority, setPriority,  update, remove\n\n# Snapshots\n@docs Snapshot\n\n# Transactions\n@docs Action, transaction\n\n# Querying\n@docs Query, OrderOptions, RangeOptions, LimitOptions, Subscription, Cancellation,\n  subscribe, unsubscribe, once,\n  valueChanged, childAdded, childChanged, childRemoved, childMoved\n\n# Ordering\n@docs noOrder, orderByChild, orderByValue, orderByKey, orderByPriority\n\n# Filtering\n@docs noRange, startAt, endAt, range, equalTo\n\n# Limiting\n@docs noLimit, limitToFirst, limitToLast\n\n# Snapshot Processing\n@docs toSnapshotList, toValueList, toKeyList, toPairList, exportValue\n\n# Connection State and Offline Capabilities\n@docs goOffline, goOnline, subscribeConnected,\n  onDisconnectSet, onDisconnectSetWithPriority,\n  onDisconnectUpdate, onDisconnectRemove, onDisconnectCancel\n\n# Server Time\n@docs serverTimeStamp, subscribeServerTimeOffset\n\n# Error Reporting\n@docs Error, ErrorType, AuthErrorType\n",
        "aliases": [
          {
            "name": "Error",
            "comment": " Errors reported from Firebase or ElmFire ",
            "args": [],
            "type": "{ tag : ElmFire.ErrorType, description : String }"
          },
          {
            "name": "Snapshot",
            "comment": " Message about a received value.\n\n- `subscription` can be used to correlate the response to the corresponding query.\n- `value` is a Json value (and `null` when the queried location doesn't exist).\n- `existing` is `False` iff there is no value at the location, which can only occur in `valueChanged`-queries\n- `reference` points to the queried location\n- `key` is relevant particular for child queries and specifies the key of the data.\n- `prevKey` specifies the key of previous child (or Nothing for the first child), revealing the ordering. It's always Nothing for valueChanged queries.\n- `priority` returns the given priority of the data.\n",
            "args": [],
            "type": "{ subscription : ElmFire.Subscription , key : String , reference : ElmFire.Reference , existing : Bool , value : Json.Encode.Value , prevKey : Maybe.Maybe String , priority : ElmFire.Priority , intern_ : ElmFire.SnapshotFB }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Possible return values for update functions of a transaction ",
            "args": [],
            "cases": [
              [
                "Abort",
                []
              ],
              [
                "Remove",
                []
              ],
              [
                "Set",
                [
                  "Json.Encode.Value"
                ]
              ]
            ]
          },
          {
            "name": "AuthErrorType",
            "comment": " Errors reported from Authentication Module ",
            "args": [],
            "cases": [
              [
                "AuthenticationDisabled",
                []
              ],
              [
                "EmailTaken",
                []
              ],
              [
                "InvalidArguments",
                []
              ],
              [
                "InvalidConfiguration",
                []
              ],
              [
                "InvalidCredentials",
                []
              ],
              [
                "InvalidEmail",
                []
              ],
              [
                "InvalidOrigin",
                []
              ],
              [
                "InvalidPassword",
                []
              ],
              [
                "InvalidProvider",
                []
              ],
              [
                "InvalidToken",
                []
              ],
              [
                "InvalidUser",
                []
              ],
              [
                "NetworkError",
                []
              ],
              [
                "ProviderError",
                []
              ],
              [
                "TransportUnavailable",
                []
              ],
              [
                "UnknownError",
                []
              ],
              [
                "UserCancelled",
                []
              ],
              [
                "UserDenied",
                []
              ],
              [
                "OtherAuthenticationError",
                []
              ]
            ]
          },
          {
            "name": "Cancellation",
            "comment": " Message about cancelled query ",
            "args": [],
            "cases": [
              [
                "Unsubscribed",
                [
                  "ElmFire.Subscription"
                ]
              ],
              [
                "QueryError",
                [
                  "ElmFire.Subscription",
                  "ElmFire.Error"
                ]
              ]
            ]
          },
          {
            "name": "ErrorType",
            "comment": " Type of errors reported from Firebase or ElmFire ",
            "args": [],
            "cases": [
              [
                "LocationError",
                []
              ],
              [
                "PermissionError",
                []
              ],
              [
                "UnavailableError",
                []
              ],
              [
                "TooBigError",
                []
              ],
              [
                "OtherFirebaseError",
                []
              ],
              [
                "AuthError",
                [
                  "ElmFire.AuthErrorType"
                ]
              ],
              [
                "UnknownSubscription",
                []
              ]
            ]
          },
          {
            "name": "LimitOptions",
            "comment": " Type to specify limiting the size of the query result set. Used within an ordered query ",
            "args": [],
            "cases": []
          },
          {
            "name": "Location",
            "comment": " A Firebase location, which is an opaque type\nthat represents a literal path into a firebase.\n\nA location can be constructed or obtained from\n- an absolute path by `fromUrl`\n- relative to another location by `sub`, `parent`, `root`, `push`\n- a reference by `location`\n\nLocations are generally unvalidated until their use in a task.\nThe constructor functions are pure.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "OrderOptions",
            "comment": " Type to specify ordering, filtering and limiting of queries ",
            "args": [],
            "cases": []
          },
          {
            "name": "Priority",
            "comment": " Each existing location in a Firebase may be attributed with a priority,\nwhich can be a number or a string.\n\nPriorities can be used for filtering and sorting entries in a query.\n",
            "args": [],
            "cases": [
              [
                "NoPriority",
                []
              ],
              [
                "NumberPriority",
                [
                  "Float"
                ]
              ],
              [
                "StringPriority",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Query",
            "comment": " A query specification: event type, possibly ordering with filtering and limiting ",
            "args": [],
            "cases": []
          },
          {
            "name": "RangeOptions",
            "comment": " Type to specify filtering options for the use within an ordered query ",
            "args": [
              "t"
            ],
            "cases": []
          },
          {
            "name": "Reference",
            "comment": " A Firebase reference, which is an opaque type that represents an opened path.\n\nReferences are returned from many Firebase tasks as well as in query results.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Subscription",
            "comment": " Unique opaque identifier for running subscriptions ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "childAdded",
            "comment": " Build a query with event type \"child added\" ",
            "type": "ElmFire.OrderOptions -> ElmFire.Query"
          },
          {
            "name": "childChanged",
            "comment": " Build a query with event type \"child changed\" ",
            "type": "ElmFire.OrderOptions -> ElmFire.Query"
          },
          {
            "name": "childMoved",
            "comment": " Build a query with event type \"child moved\" ",
            "type": "ElmFire.OrderOptions -> ElmFire.Query"
          },
          {
            "name": "childRemoved",
            "comment": " Build a query with event type \"child removed\" ",
            "type": "ElmFire.OrderOptions -> ElmFire.Query"
          },
          {
            "name": "endAt",
            "comment": " Filter the ordered results to end at a given value.\n\nThe type of the value depends on the order criterium ",
            "type": "t -> ElmFire.RangeOptions t"
          },
          {
            "name": "equalTo",
            "comment": " Filter the ordered results to equal a given value.\n\nThe type of the value depends on the order criterium ",
            "type": "t -> ElmFire.RangeOptions t"
          },
          {
            "name": "exportValue",
            "comment": " Exports the entire contents of a Snapshot as a JavaScript object.\n\nThis is similar to .value except priority information is included (if available),\nmaking it suitable for backing up your data.\n",
            "type": "ElmFire.Snapshot -> Json.Encode.Value"
          },
          {
            "name": "fromUrl",
            "comment": " Construct a new location from a full Firebase URL.\n\n    loc = fromUrl \"https://elmfire.firebaseio-demo.com/foo/bar\"\n",
            "type": "String -> ElmFire.Location"
          },
          {
            "name": "goOffline",
            "comment": " Manually disconnect the client from the server\nand disables automatic reconnection. ",
            "type": "Task.Task x ()"
          },
          {
            "name": "goOnline",
            "comment": " Manually reestablish a connection to the server\nand enables automatic reconnection. ",
            "type": "Task.Task x ()"
          },
          {
            "name": "key",
            "comment": " Get the key of a reference.\n\nThe last token in a Firebase location is considered its key.\nIt's the empty string for the root.\n",
            "type": "ElmFire.Reference -> String"
          },
          {
            "name": "limitToFirst",
            "comment": " Limit the result set of an ordered query to the first certain number of children. ",
            "type": "Int -> ElmFire.LimitOptions"
          },
          {
            "name": "limitToLast",
            "comment": " Limit the result set of an ordered query to the last certain number of children. ",
            "type": "Int -> ElmFire.LimitOptions"
          },
          {
            "name": "location",
            "comment": " Obtain a location from a reference.\n\n    reference = location loc\n",
            "type": "ElmFire.Reference -> ElmFire.Location"
          },
          {
            "name": "noLimit",
            "comment": " Don't limit the number of children in the result set of an ordered query ",
            "type": "ElmFire.LimitOptions"
          },
          {
            "name": "noOrder",
            "comment": " Don't order results ",
            "type": "ElmFire.OrderOptions"
          },
          {
            "name": "noRange",
            "comment": " Don't filter the ordered results ",
            "type": "ElmFire.RangeOptions t"
          },
          {
            "name": "onDisconnectCancel",
            "comment": " Cancels all previously queued operations for this location and all children.\n",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "onDisconnectRemove",
            "comment": " Queue a `remove` operation on the server that get executed as soon as the client disconnects.\n",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "onDisconnectSet",
            "comment": " Queue a `set` operation on the server that get executed as soon as the client disconnects.\n",
            "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "onDisconnectSetWithPriority",
            "comment": " Queue a `setWithPriority` operation on the server that get executed as soon as the client disconnects.\n",
            "type": "Json.Encode.Value -> ElmFire.Priority -> ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "onDisconnectUpdate",
            "comment": " Queue a `update` operation on the server that get executed as soon as the client disconnects.\n",
            "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "once",
            "comment": " Query a Firebase location for exactly one event of the specified type\n\nOn success the tasks results in the desired Snapshot.\nIt results in an error if either the location is invalid\nor you have no permission to read this data.\n\nThe third parameter specifies the event to listen to:\n`valueChanged`, `childAdded`, `childChanged`, `childRemoved` or `childMoved`.\nAdditionally, this parameter can also specify ordering, filtering and limiting of the query (see below).\n\nThe first parameter specifies the event to listen to:\n`valueChanged`, `childAdded`, `childChanged`, `childRemoved` or `childMoved`.\nAdditionally, this parameter may also specify ordering, filtering and limiting of the query (see below).\n\nThe second parameter specifies the location to be queried.\n",
            "type": "ElmFire.Query -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Snapshot"
          },
          {
            "name": "open",
            "comment": " Actually open a location, which results in a reference\n(if the location is valid).\n\nIt's generally not necessary to explicitly open a constructed location.\nIt can be used to check the location and to cache Firebase references.\n\nThe task fails if the location construct is invalid.\n\n    openTask =\n      (open <| sub user <| fromUrl \"https://elmfire.firebaseio-demo.com/users\")\n      `andThen` (\\ref -> Signal.send userRefCache.address (user, ref))\n",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "orderByChild",
            "comment": " Order results by the value of a given child\n(or deep child, as documented [here](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html))\n",
            "type": "String -> ElmFire.RangeOptions Json.Encode.Value -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
          },
          {
            "name": "orderByKey",
            "comment": " Order results by key ",
            "type": "ElmFire.RangeOptions String -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
          },
          {
            "name": "orderByPriority",
            "comment": " Order results by priority (and maybe secondary by key) ",
            "type": "ElmFire.RangeOptions ( ElmFire.Priority, Maybe.Maybe String ) -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
          },
          {
            "name": "orderByValue",
            "comment": " Order results by value ",
            "type": "ElmFire.RangeOptions Json.Encode.Value -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
          },
          {
            "name": "parent",
            "comment": " Construct the parent location from a child location.\n\n    loc2 = parent loc1\n",
            "type": "ElmFire.Location -> ElmFire.Location"
          },
          {
            "name": "push",
            "comment": " Construct a new child location using a to-be-generated key.\n\nA unique key is generated whenever the location is used in one of the tasks,\nnotably `open` or `set`.\nKeys are prefixed with a client-generated timestamp so that a resulting list\nwill be chronologically-sorted.\n\nYou may `open` the location or use `set` to actually generate the key\nand get its name.\n\n    set val (push loc) `andThen` (\\ref -> ... key ref ...)\n",
            "type": "ElmFire.Location -> ElmFire.Location"
          },
          {
            "name": "range",
            "comment": " Filter the ordered results to start at a given value and to end at another value.\n\nThe type of the value depends on the order criterium ",
            "type": "t -> t -> ElmFire.RangeOptions t"
          },
          {
            "name": "remove",
            "comment": " Delete a Firebase location.\n\nThe task completes with a reference to the deleted location when\nsynchronization to the Firebase servers has completed.\nThe task may result in an error if the location is invalid\nor you have no permission to remove this data.\n",
            "type": "ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "root",
            "comment": " Construct the root location from descendant location\n\n    loc2 = root loc1\n",
            "type": "ElmFire.Location -> ElmFire.Location"
          },
          {
            "name": "serverTimeStamp",
            "comment": " A placeholder value for auto-populating the current timestamp\n(time since the Unix epoch, in milliseconds) by the Firebase servers ",
            "type": "Json.Encode.Value"
          },
          {
            "name": "set",
            "comment": " Write a Json value to a Firebase location.\n\nThe task completes with a reference to the changed location when\nsynchronization to the Firebase servers has completed.\nThe task may result in an error if the location is invalid\nor you have no permission to write this data.\n",
            "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "setPriority",
            "comment": " Set a priority for the data at a Firebase location.\n",
            "type": "ElmFire.Priority -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "setWithPriority",
            "comment": " Write a Json value to a Firebase location and specify a priority for that data.\n",
            "type": "Json.Encode.Value -> ElmFire.Priority -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "startAt",
            "comment": " Filter the ordered results to start at a given value.\n\nThe type of the value depends on the order criterium ",
            "type": "t -> ElmFire.RangeOptions t"
          },
          {
            "name": "sub",
            "comment": " Construct a location for the descendant at the specified relative path.\n\n    locUsers = sub \"users\" loc\n",
            "type": "String -> ElmFire.Location -> ElmFire.Location"
          },
          {
            "name": "subscribe",
            "comment": " Query a Firebase location by subscription\n\nOn success the task returns a Subscription,\nwhich can be used to match the corresponding responses\nand to unsubscribe the query.\n\nThe query results are reported via running a supplied task.\n\nThe first parameter is a function used to construct that task from a response.\n\nThe second parameter is a function used to construct a task that is run\nwhen the query gets canceled.\n\nThe third parameter specifies the event to listen to:\n`valueChanged`, `childAdded`, `childChanged`, `childRemoved` or `childMoved`.\nAdditionally, this parameter may also specify ordering, filtering and limiting of the query (see below).\n\nThe fourth parameter specifies the location to be queried.\n",
            "type": "(ElmFire.Snapshot -> Task.Task x a) -> (ElmFire.Cancellation -> Task.Task y b) -> ElmFire.Query -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Subscription"
          },
          {
            "name": "subscribeConnected",
            "comment": " Subscribe to connection state changes ",
            "type": "(Bool -> Task.Task x a) -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Subscription"
          },
          {
            "name": "subscribeServerTimeOffset",
            "comment": " Subscribe to server time offset ",
            "type": "(Time.Time -> Task.Task x a) -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Subscription"
          },
          {
            "name": "toKeyList",
            "comment": " Convert a snapshot's children into a list of its keys ",
            "type": "ElmFire.Snapshot -> List String"
          },
          {
            "name": "toPairList",
            "comment": " Convert a snapshot's children into a list of key-value-pairs ",
            "type": "ElmFire.Snapshot -> List ( String, Json.Encode.Value )"
          },
          {
            "name": "toSnapshotList",
            "comment": " Convert a snapshot's children into a list of snapshots\n\nOrdering of the children is presevered.\nSo, if the snapshot results from a ordered valueChanged-query\nthen toSnapshotList allows for conserving this ordering as a list.\n",
            "type": "ElmFire.Snapshot -> List ElmFire.Snapshot"
          },
          {
            "name": "toUrl",
            "comment": " Get the url of a reference. ",
            "type": "ElmFire.Reference -> String"
          },
          {
            "name": "toValueList",
            "comment": " Convert a snapshot's children into a list of its values ",
            "type": "ElmFire.Snapshot -> List Json.Encode.Value"
          },
          {
            "name": "transaction",
            "comment": " Transaction: Atomically modify the data at a location\n\nFirst parameter is a function which will be passed the current data stored at this location (or Nothing if the location contains no data).\nThe function returns an Action, which is either Set Value, or Abort, or Remove.\nThe second parameter specifies the location at which the transaction should be performed.\nThe third parameter denotes whether intermediate states are reported to local query subscriptions (True) or suppressed (False).\n\nOn success the task returns a tuple:\nIts first element indicates whether the transaction was commited (True) or aborted (False).\nRegardless, the second element is a Snapshot containing the resulting data at that location.\n",
            "type": "(Maybe.Maybe Json.Encode.Value -> ElmFire.Action) -> ElmFire.Location -> Bool -> Task.Task ElmFire.Error ( Bool, ElmFire.Snapshot )"
          },
          {
            "name": "unsubscribe",
            "comment": " Cancel a query subscription ",
            "type": "ElmFire.Subscription -> Task.Task ElmFire.Error ()"
          },
          {
            "name": "update",
            "comment": " Write the children in a Json value to a Firebase location.\n\nThis will overwrite only children present in the first parameter\nand will leave others untouched.\n\nIt is also possible to do atomic multi-location updates as documented [here](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html).\n",
            "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "valueChanged",
            "comment": " Build a query with event type \"value changed\" ",
            "type": "ElmFire.OrderOptions -> ElmFire.Query"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ThomasWeiser/elmfire-extra",
    "version": "1.0.4",
    "docs": [
      {
        "name": "ElmFire.Op",
        "comment": " High-level interface for operations on a Firebase collection.\n\nThe Firebase collection at a given location is treated like a key-value store.\n\nKeys are of type String. The value type is a configurable type `v`.\nA mapping between Elm values and the Firebase's JSON values has to be provided.\n\nThis module is accompanied by `ElmFire.Dict` for querying and mirroring the key-value store.\n\n# Configuration\n@docs Config\n\n# Performing operations\n@docs Operation, operate, forwardOperation\n\n# Initializing the key-value store\n@docs empty, fromDict, fromList\n\n# Modifying single values\n@docs insert, push, update, remove\n\n# Dispatch modes\nOperations that touch the whole collection can be executed in different dispatch modes.\n@docs Dispatch, atomic, sequential, parallel\n\n# Inserting and deleting lists of key-value pairs\n@docs insertList, removeList\n\n# Updating the whole collection with higher-order functions\n@docs map, filter, filterMap\n\n# Miscellaneous operations\n@docs none\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The target of all operations is described in a configuration record:\n\n- `location`: Pointer to the Firebase path (e.g. `ElmFire.fromUrl \"https://.../...\"`).\n- `orderOptions`: Filter and limit elements according to a given order. Use `ElmFire.noOrder` if not needed.\n- `encoder`: Function to convert Elm values into JSON values according to the Firebase's schema.\n- `decoder`: A Json.Decoder used to convert a JSON value from the Firebase into the corresponding Elm value.\n\nDecoding errors are silently ignored in all operations (if they need the decoder at all).\n",
            "args": [
              "v"
            ],
            "type": "{ location : ElmFire.Location , orderOptions : ElmFire.OrderOptions , encoder : v -> Json.Decode.Value , decoder : Json.Decode.Decoder v }"
          }
        ],
        "types": [
          {
            "name": "Dispatch",
            "comment": " Opaque type representing a dispatch mode ",
            "args": [],
            "cases": []
          },
          {
            "name": "Operation",
            "comment": " Opaque type representing an operation ",
            "args": [
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "atomic",
            "comment": " Perform the whole operation as a single transaction. ",
            "type": "ElmFire.Op.Dispatch"
          },
          {
            "name": "empty",
            "comment": " Dlete the whole collection. ",
            "type": "ElmFire.Op.Operation v"
          },
          {
            "name": "filter",
            "comment": " Remove those elements that don't satisfy a predicate. ",
            "type": "ElmFire.Op.Dispatch -> (String -> v -> Bool) -> ElmFire.Op.Operation v"
          },
          {
            "name": "filterMap",
            "comment": " Apply a function to modify or remove values. ",
            "type": "ElmFire.Op.Dispatch -> (String -> v -> Maybe.Maybe v) -> ElmFire.Op.Operation v"
          },
          {
            "name": "forwardOperation",
            "comment": " Creates a new address for receiving operations with a fixed configuration. ",
            "type": "Signal.Address (Task.Task ElmFire.Error ElmFire.Reference) -> ElmFire.Op.Config v -> Signal.Address (ElmFire.Op.Operation v)"
          },
          {
            "name": "fromDict",
            "comment": " Initialize the collection from a dictionary. ",
            "type": "ElmFire.Op.Dispatch -> Dict.Dict String v -> ElmFire.Op.Operation v"
          },
          {
            "name": "fromList",
            "comment": " Initialize the collection from a list of key-value pairs. ",
            "type": "ElmFire.Op.Dispatch -> List ( String, v ) -> ElmFire.Op.Operation v"
          },
          {
            "name": "insert",
            "comment": " Insert a single key-value pair, possible overwriting the previous value. ",
            "type": "String -> v -> ElmFire.Op.Operation v"
          },
          {
            "name": "insertList",
            "comment": " Insert a list of key-value pairs. ",
            "type": "ElmFire.Op.Dispatch -> List ( String, v ) -> ElmFire.Op.Operation v"
          },
          {
            "name": "map",
            "comment": " Apply a function to modify all values. ",
            "type": "ElmFire.Op.Dispatch -> (String -> v -> v) -> ElmFire.Op.Operation v"
          },
          {
            "name": "none",
            "comment": " Do nothing. ",
            "type": "ElmFire.Op.Operation v"
          },
          {
            "name": "operate",
            "comment": " Task to perform an operation with a given configuration. ",
            "type": "ElmFire.Op.Config v -> ElmFire.Op.Operation v -> Task.Task ElmFire.Error ElmFire.Reference"
          },
          {
            "name": "parallel",
            "comment": " Perform the operation for each affected element in parallel.\nWill be executed asynchronously (due to a Task module restriction).\n",
            "type": "ElmFire.Op.Dispatch"
          },
          {
            "name": "push",
            "comment": " Insert a single key-value pair. This generates a new child location using a unique key. ",
            "type": "v -> ElmFire.Op.Operation v"
          },
          {
            "name": "remove",
            "comment": " Remove the element with the given key. ",
            "type": "String -> ElmFire.Op.Operation v"
          },
          {
            "name": "removeList",
            "comment": " Remove selected elements by a list of keys. ",
            "type": "ElmFire.Op.Dispatch -> List String -> ElmFire.Op.Operation v"
          },
          {
            "name": "sequential",
            "comment": " Perform the operation step-by-step for each affected element in a sequential manner. ",
            "type": "ElmFire.Op.Dispatch"
          },
          {
            "name": "update",
            "comment": " Update a single value for a specific key with a given function. ",
            "type": "String -> (Maybe.Maybe v -> Maybe.Maybe v) -> ElmFire.Op.Operation v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "ElmFire.Dict",
        "comment": " Tasks to mirror a Firebase location in an Elm dictionary, either one-time or continuously.\n\nThe Firebase collection at a given location is treated like a key-value store, which is mapped into a `Dict String v`.\n\nKeys are of type String. Values get converted from JSON to a user-defined type `v`.\n\nThis module is accompanied by `ElmFire.Op` for modifying the key-value store.\n\n# Configuration\n@docs Config\n\n# One-time queries\n@docs getDict\n\nThe lists returned by the following query tasks are ordered in respect to the configured `orderOptions`.\n\n@docs getList, getKeys, getValues\n\n# Subscribing to continuous mirroring\n@docs Delta, subscribeDelta, update, integrate, mirror\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Each query target is described by a configuration:\n\n- `location`: Pointer to the Firebase path, e.g. `ElmFire.fromUrl \"https://.../...\"`.\n- `orderOptions`: Filter and limit elements according to a given order. Use `ElmFire.noOrder` if not needed.\n- `encoder`: Function to convert Elm values into JSON values according to the Firebase's schema.\n  `encoder` is used only in module `ElmFire.Op`, but is present here because the type `Config` is shared between these two modules.\n- `decoder`: A Json.Decoder used to convert a JSON value from the Firebase into the corresponding Elm value.\n\nDecoding errors are reported as the special `Delta` value `Undecodable String String`.\nThey are silently ignored in all other functions of this module.\n",
            "args": [
              "v"
            ],
            "type": "{ location : ElmFire.Location , orderOptions : ElmFire.OrderOptions , encoder : v -> Json.Decode.Value , decoder : Json.Decode.Decoder v }"
          }
        ],
        "types": [
          {
            "name": "Delta",
            "comment": " Represents a single update reported from the Firebase. ",
            "args": [
              "v"
            ],
            "cases": [
              [
                "Idem",
                []
              ],
              [
                "Added",
                [
                  "String",
                  "v"
                ]
              ],
              [
                "Changed",
                [
                  "String",
                  "v"
                ]
              ],
              [
                "Removed",
                [
                  "String",
                  "v"
                ]
              ],
              [
                "Undecodable",
                [
                  "String",
                  "String"
                ]
              ],
              [
                "Unsubscribed",
                []
              ],
              [
                "QueryError",
                [
                  "ElmFire.Error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "getDict",
            "comment": " One-time query, mapping the Firebase store to a dictionary ",
            "type": "ElmFire.Dict.Config v -> Task.Task ElmFire.Error (Dict.Dict String v)"
          },
          {
            "name": "getKeys",
            "comment": " One-time query, resulting in a list of keys (without values) ",
            "type": "ElmFire.Dict.Config v -> Task.Task ElmFire.Error (List String)"
          },
          {
            "name": "getList",
            "comment": " One-time query, mapping the Firebase store to a list of key-value pairs ",
            "type": "ElmFire.Dict.Config v -> Task.Task ElmFire.Error (List ( String, v ))"
          },
          {
            "name": "getValues",
            "comment": " One-time query, resulting in a list of values (without keys) ",
            "type": "ElmFire.Dict.Config v -> Task.Task ElmFire.Error (List v)"
          },
          {
            "name": "integrate",
            "comment": " Integrate a signal of deltas, returning a signal of dictionaries. ",
            "type": "Signal.Signal (ElmFire.Dict.Delta v) -> Signal.Signal (Dict.Dict String v)"
          },
          {
            "name": "mirror",
            "comment": " Convenience function that combines subscribing to and integrating of deltas.\nIt returns a 2-tuple:\n\n- First element is a task to subscribe to the Firebase updates. It needs to be executed to initiate\n  the subscritpion. The task's result is another task that can be uses for unsubscribing.\n- Second element is a signal of the dictionary that consecutively mirrors the Firebase collection.\n",
            "type": "ElmFire.Dict.Config v -> ( Task.Task ElmFire.Error (Task.Task ElmFire.Error ()) , Signal.Signal (Dict.Dict String v) )"
          },
          {
            "name": "subscribeDelta",
            "comment": " Get the initial state from the Firebase and subscribe to subsequent updates.\nThe resulting deltas are sent to a given mailbox.\n\nThe resulting task needs to be executed in order to initiate the subscription.\n\nIts success-result is a task that may be executed later to unsubscribe again.\n",
            "type": "Signal.Address (ElmFire.Dict.Delta v) -> ElmFire.Dict.Config v -> Task.Task ElmFire.Error (Task.Task ElmFire.Error ())"
          },
          {
            "name": "update",
            "comment": " Update a dictionary by applying a single given delta. ",
            "type": "ElmFire.Dict.Delta v -> Dict.Dict String v -> Dict.Dict String v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "VerbalExpressions/elm-verbal-expressions",
    "version": "1.2.0",
    "docs": [
      {
        "name": "VerbalExpressions",
        "comment": " Elm port of [VerbalExpressions](https://github.com/VerbalExpressions)\n@docs verex, startOfLine, endOfLine, followedBy, find, possibly, anything, anythingBut, something, somethingBut, lineBreak, tab, word, anyOf, range, withAnyCase, repeatPrevious, repeatPrevious2, multiple, multiple2, orElse, beginCapture, endCapture, toRegex, toString, replace, VerbalExpression\n",
        "aliases": [
          {
            "name": "VerbalExpression",
            "comment": " The main type used for constructing verbal expressions ",
            "args": [],
            "type": "{ prefixes : String , source : String , suffixes : String , modifiers : { insensitive : Bool, multiline : Bool } }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "anyOf",
            "comment": " Match a character class\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "anything",
            "comment": " Match any set of characters or not\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "anythingBut",
            "comment": " Match any set of characters except a particular String\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "beginCapture",
            "comment": " Start capturing a group\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "endCapture",
            "comment": " Finish capturing a group\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "endOfLine",
            "comment": " Restrict matches to end of line\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "find",
            "comment": " Start the expression with a matching group\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "followedBy",
            "comment": " Include a matching group in the expression\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "lineBreak",
            "comment": " Match a new line\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "multiple",
            "comment": " Match a group any number of times\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "multiple2",
            "comment": " Match a group a particular number of times\n",
            "type": "String -> Int -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "orElse",
            "comment": " Add an alternative expression\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "possibly",
            "comment": " Include an optional matching group\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "range",
            "comment": " Match a character class with ranges\n",
            "type": "List ( String, String ) -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "repeatPrevious",
            "comment": " Repeat the prior case a number of times\n",
            "type": "Int -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "repeatPrevious2",
            "comment": " Repeat the prior case within some range of times\n",
            "type": "Int -> Int -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "replace",
            "comment": " Chainable function for replacing a string with another string using a Regex\ncreated using VerbalExpressions\n",
            "type": "Regex.HowMany -> String -> String -> Regex.Regex -> String"
          },
          {
            "name": "something",
            "comment": " Match on one or more characters\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "somethingBut",
            "comment": " Match on one or more characters, with the execption of some String\n",
            "type": "String -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "startOfLine",
            "comment": " Restrict matches to start of line\n",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "tab",
            "comment": " Match a tab ",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "toRegex",
            "comment": " Compile result down to a Regex.regex\n",
            "type": "VerbalExpressions.VerbalExpression -> Regex.Regex"
          },
          {
            "name": "toString",
            "comment": " Compile result down to a String\nNote, this is just a string of the expression. Modifier flags are discarded.\n",
            "type": "VerbalExpressions.VerbalExpression -> String"
          },
          {
            "name": "verex",
            "comment": " An initial, empty verex to start from and pipe through functions\n",
            "type": "VerbalExpressions.VerbalExpression"
          },
          {
            "name": "withAnyCase",
            "comment": " Let the expression be case insensitive\n",
            "type": "Bool -> VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          },
          {
            "name": "word",
            "comment": " Match an alphanumeric word ",
            "type": "VerbalExpressions.VerbalExpression -> VerbalExpressions.VerbalExpression"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "Voronchuk/hexagons",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Hexagons.Layout",
        "comment": " The next major piece of functionality we need is a way to convert between hex coordinates and screen coordinates. There’s a pointy top layout and a flat top hex layout. The conversion uses a matrix as well as the inverse of the matrix, so we need a way to store those. Also, for drawing the corners, pointy top starts at 30° and flat top starts at 0°, so we need a place to store that too.\n\nSee http://www.redblobgames.com/grids/hexagons/implementation.html for reference.\n\n# Types\n@docs Point, Orientation, Layout\n\n# Contants\n@docs orientationLayoutPointy\n\n# Hex to point and point to hex conversions\n@docs hexToPoint, pointToHex\n\n# Hex corner coordinates\n@docs polygonCorners\n\n# Drawing\n@docs drawLine\n",
        "aliases": [
          {
            "name": "Layout",
            "comment": " Composite layout definition ",
            "args": [],
            "type": "{ orientation : Hexagons.Layout.Orientation , size : Hexagons.Layout.Point , origin : Hexagons.Layout.Point }"
          },
          {
            "name": "Orientation",
            "comment": " Orientation helper type to store these: the 2×2 forward matrix, the 2×2 inverse matrix, and the starting angle ",
            "args": [],
            "type": "{ forward_matrix : ( Float, Float, Float, Float ) , inverse_matrix : ( Float, Float, Float, Float ) , start_angle : Float }"
          },
          {
            "name": "Point",
            "comment": " Point on screen (pixel) ",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "drawLine",
            "comment": " Drawing the line between hexes using the linear interpolation ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> List Hexagons.Hex.Hex"
          },
          {
            "name": "hexToPoint",
            "comment": " Turn Hex coordinates into a Point location on a Layout ",
            "type": "Hexagons.Layout.Layout -> Hexagons.Hex.Hex -> Hexagons.Layout.Point"
          },
          {
            "name": "orientationLayoutPointy",
            "comment": " Contant definition of pointy hexagon orientation ",
            "type": "Hexagons.Layout.Orientation"
          },
          {
            "name": "pointToHex",
            "comment": " Turn Point coordinates on a Layout into a Hex coordinates ",
            "type": "Hexagons.Layout.Layout -> Hexagons.Layout.Point -> Hexagons.Hex.Hex"
          },
          {
            "name": "polygonCorners",
            "comment": " Once we know where the corners are relative to the center, we can calculate the corners in screen locations by adding the center to each corner, and putting the coordinates into a list. ",
            "type": "Hexagons.Layout.Layout -> Hexagons.Hex.Hex -> List Hexagons.Layout.Point"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Hexagons.Map",
        "comment": " This module solves the problem of generating and storing the Map data. We are using Elm dictionary as the Map storage engine with Hex coordinate tuple as the key.\n\nSee http://www.redblobgames.com/grids/hexagons/implementation.html for reference.\n\n# Types\n@docs Map\n\n# Map generators\n@docs rectangularPointyTopMap\n\n",
        "aliases": [
          {
            "name": "Map",
            "comment": " Dictionary storage to keep map of hexes ",
            "args": [],
            "type": "Dict.Dict ( Int, Int, Int ) Hexagons.Hex.Hex"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "rectangularPointyTopMap",
            "comment": " Generate Map of rectangular shape given its height and width ",
            "type": "Int -> Int -> Hexagons.Map.Map"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Hexagons.Hex",
        "comment": " We treat Cube and Axial systems separately. Cube coordinates are a plane in x,y,z space, where x+y+z = 0. Axial coordinates have two axes q,r that are 60° or 120° apart. \n\nSee http://www.redblobgames.com/grids/hexagons/implementation.html\n\n# Types\n@docs Hex, Direction\n\n# Helpers\n@docs q, intQ, r, intR, s, intS, intFactory, floatFactory, toIntHex, toFloatHex\n\n# Equality\n@docs eq, (===), noteq, (!==)\n\n# Coordinate arithmetic\n@docs add, (+++), sub, (=--), mul, (***)\n\n# Distance\n@docs length, distance\n\n# Neighbors\n@docs direction, neighbor\n",
        "aliases": [],
        "types": [
          {
            "name": "Direction",
            "comment": " Direction ranges from 0 to 5 by sides of the hexagon, we use North, South, West, East definitions for simplicity ",
            "args": [],
            "cases": [
              [
                "NE",
                []
              ],
              [
                "E",
                []
              ],
              [
                "SE",
                []
              ],
              [
                "SW",
                []
              ],
              [
                "W",
                []
              ],
              [
                "NW",
                []
              ]
            ]
          },
          {
            "name": "Hex",
            "comment": " Generic hex field definition ",
            "args": [],
            "cases": [
              [
                "FloatCubeHex",
                [
                  "Hexagons.Hex.FloatCubeCoords"
                ]
              ],
              [
                "IntCubeHex",
                [
                  "Hexagons.Hex.IntCubeCoords"
                ]
              ],
              [
                "AxialHex",
                [
                  "Hexagons.Hex.AxialCoords"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "!==",
            "comment": " Infixr operator for `noteq` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool",
            "associativity": "right",
            "precedence": 1
          },
          {
            "name": "***",
            "comment": " Infixr operator for `mul` ",
            "type": "Int -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "+++",
            "comment": " Infixr operator for `sum` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex",
            "associativity": "right",
            "precedence": 4
          },
          {
            "name": "=--",
            "comment": " Infixr operator for `sub` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex",
            "associativity": "right",
            "precedence": 4
          },
          {
            "name": "===",
            "comment": " Infixr operator for `eq` ",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool",
            "associativity": "right",
            "precedence": 1
          },
          {
            "name": "add",
            "comment": " Since cube coordinates come from 3d cartesian coordinates, I automatically get things like addition, subtraction, multiplication, and division. For example, you can have Hex(2, 0, -2) that represents two steps northeast, and add that to location Hex(3, -5, 2) the obvious way: Hex(2 + 3, 0 + -5, -2 + -2). With other coordinate systems like offset coordinates, you can’t do that and get what you want. These operations are just what you’d implement with 3d cartesian vectors, but I am using q, r, s names in this class instead of x, y, z\n\n    IntCubeHex (2, 3, -5) +++ IntCubeHex (1, 2, -3) === IntCubeHex (3, 5, -8)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "direction",
            "comment": " Direction relative to Hex polygon lines, we used shortcuts for the mix of North, East, South, West directions ",
            "type": "Hexagons.Hex.Direction -> Hexagons.Hex.Hex"
          },
          {
            "name": "distance",
            "comment": " The distance between two hexes is the length of the line between them. \n\n    distance (IntCubeHex (2, 3, -5)) (FloatCubeHex (3.2, 4.3, -7.5)) == 2\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "eq",
            "comment": " Compare two Hex definitions, support both axial and cubic coordinates.\n\nNot a strict comparation, FloatCubeHex is converted to IntCubeHex.\n\n    IntCubeHex (2, 3, -5) === IntCubeHex (2, 3, -5)\n    AxialHex (2, 3) === AxialHex (2, 3)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool"
          },
          {
            "name": "floatFactory",
            "comment": " Build Hex object from Float coordinates\n\n    floatFactory (2.5, 3.5) === FloatCubeHex (2.5, 3.5, -6.0)\n",
            "type": "( Float, Float ) -> Hexagons.Hex.Hex"
          },
          {
            "name": "intFactory",
            "comment": " Build Hex object from Int coordinates\n\n    intFactory (2, 3) === IntCubeHex (2, 3, -5)\n",
            "type": "( Int, Int ) -> Hexagons.Hex.Hex"
          },
          {
            "name": "intQ",
            "comment": " Get q coordinate for Hex as Int value, its generally not recommended to use on FloatCubeHex\n\n    intQ IntCubeHex (2, 3, -5) == 2\n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "intR",
            "comment": " Get r coordinate for Hex as Int value, its generally not recommended to use on FloatCubeHex\n\n    intR IntCubeHex (2, 3, -5) == 3\n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "intS",
            "comment": " Get s coordinate for Hex as Int value, its generally not recommended to use on FloatCubeHex\n\n    intS IntCubeHex (2, 3, -5) == 3\n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "length",
            "comment": " Length of Hex.\n\n    length (IntCubeHex (2, 3, -5)) == 5\n    length (FloatCubeHex (2.2, 3.3, -5.5)) == 5\n    \n",
            "type": "Hexagons.Hex.Hex -> Int"
          },
          {
            "name": "mul",
            "comment": " Multiplication of Hexes, more info in `sum` description\n\n    5 *** (IntCubeHex (2, 3, -5) === IntCubeHex (10, 15, -25))\n",
            "type": "Int -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "neighbor",
            "comment": " With distance, we defined two functions: length works on one argument and distance works with two. The same is true with neighbors. The direction function is with one argument and the neighbor function is with two.\n\n    neighbor (IntCubeHex (2, 3, -5)) NW === IntCubeHex (2, 4, -6)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Direction -> Hexagons.Hex.Hex"
          },
          {
            "name": "noteq",
            "comment": " Compare two Hex definitions, if they are not equal, inversion of `eq` \n\n    IntCubeHex (2, 3, -5) !== IntCubeHex (1, 1, -2)\n    AxialHex (2, 3) !== AxialHex (2, 1)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Bool"
          },
          {
            "name": "q",
            "comment": " Get q coordinate for Hex as Float value \n\n    q IntCubeHex (2, 3, -5) == 2.0\n",
            "type": "Hexagons.Hex.Hex -> Float"
          },
          {
            "name": "r",
            "comment": " Get r coordinate for Hex as Float value \n\n    r IntCubeHex (2, 3, -5) == 3.0\n",
            "type": "Hexagons.Hex.Hex -> Float"
          },
          {
            "name": "s",
            "comment": " Get s coordinate for Hex as Float value \n\n    s IntCubeHex (2, 3, -5) == -5.0\n",
            "type": "Hexagons.Hex.Hex -> Float"
          },
          {
            "name": "sub",
            "comment": " Subtraction of Hexes, more info in `sum` description\n\n    (IntCubeHex (2, 3, -5) =-- IntCubeHex (1, 2, -3)) === IntCubeHex (1, 1, -2)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "toFloatHex",
            "comment": " Convert Hex to FloatCubeHex coordinate systems \n\n    toFloatHex (IntCubeHex (2, 3, -5)) === FloatCubeHex (2.0, 3.0, -5.0)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          },
          {
            "name": "toIntHex",
            "comment": " Convert Hex to IntCubeHex coordinate systems \n\n    toIntHex (FloatCubeHex (2.5, 3.5, -6.0)) === IntCubeHex (2, 4, -6)\n",
            "type": "Hexagons.Hex.Hex -> Hexagons.Hex.Hex"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "abrykajlo/elm-scroll",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Scroll",
        "comment": " This Library provides helper functions for handling events on scrolling.\n\n# Types\n@docs Update, Move, Direction\n\n# Creating Scroll Handler\n@docs handle\n\n# On Event Handlers\nMeant to be used with `Scroll.handle` to build up a list of possible events\nfor an application. All of the function signatures end in\n`Move -> Maybe (Update m a)` so they can be partially applied and used with\n`Scroll.handle`.\n\n## Basic\n@docs onUp, onDown\n\n## Complex\n@docs onCrossUp, onCrossDown, onCrossOver, onInRange, onOverlap\n\n# Helpers for Creating On Event Handlers\nYou can create your own as well which can be used with handle as long\nthey end in `Move -> Maybe (Update m a)`. These are some functions that\ncan aid in the creation of them.\n\n@docs direction, crossing\n",
        "aliases": [
          {
            "name": "Move",
            "comment": " Alias of (Float, Float) represents a move from a scroll position\nto another scroll position \n\n    Move == (from, to)\n",
            "args": [],
            "type": "( Float, Float )"
          },
          {
            "name": "Update",
            "comment": " \n    Update m a == m -> (m, Effects a)\n",
            "args": [
              "m",
              "a"
            ],
            "type": "m -> ( m, Effects.Effects a )"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " Helps building your own triggers if direction is important.\n\n    upAfterDown : Direction -> Event m a -> Move ->  Maybe (Event m a)\n    upAfterDown lastDirection event move =\n        if direction move != Up then\n            Nothing \n        else if lastDirection == Scroll.Down  then\n            Just event\n        else\n            Nothing \n",
            "args": [],
            "cases": [
              [
                "Up",
                []
              ],
              [
                "Down",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "crossing",
            "comment": " Notifies if a `Move` crosses a line. Nothing on no \ncrossing and the direction on a crossing",
            "type": "Float -> Scroll.Move -> Maybe.Maybe Scroll.Direction"
          },
          {
            "name": "direction",
            "comment": " A simple helper that returns the direction Up or Down of a Move",
            "type": "Scroll.Move -> Scroll.Direction"
          },
          {
            "name": "handle",
            "comment": " Used in generating a function to trigger all possible events for a single\nmove. It returns in the standard pattern of `(Model, Effects Action)` the \nupdates stack as well, so if many events trigger they update the model in order\nthey are in the list and the effects get thrown into `Effects.batch`.\n\n    handleEvents : Move -> Model -> (Model, Effects a)\n    handleEvents =\n        Scroll.handle\n            [ update TopBarDrop\n              |> Scroll.onUp\n            , update ToggleFixBar\n              |> Scroll.onCrossOver 400\n            ]\n\n    update action model =\n        case action of\n            Transition move ->\n                handleEvents move model\n            TopBarDrop clockTime ->\n                ...\n            ToggleFixBar ->\n                ...\n",
            "type": "List (Scroll.Move -> Maybe.Maybe (Scroll.Update m a)) -> Scroll.Move -> m -> ( m, Effects.Effects a )"
          },
          {
            "name": "onCrossDown",
            "comment": " Triggers an update if move crosses the line downwards.\n\n    update Action\n    |> onCrossDown line\n",
            "type": "Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onCrossOver",
            "comment": " Triggers an update if move crosses the line in either direction.\n\n    update Action\n    |> onCrossOver line\n",
            "type": "Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onCrossUp",
            "comment": " Triggers Update if move crosses the line upwards.\n\n    update Action\n    |> onCrossUp line\n",
            "type": "Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onDown",
            "comment": " Triggers an update on scrolling downwards\n\n    update Action\n    |> onDown\n",
            "type": "Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onInRange",
            "comment": " Triggers an update if the new scroll position is in\nthe min max range\n\n    update Action\n    |> onInRange min max\n",
            "type": "Float -> Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onOverlap",
            "comment": " Triggers an update if the range of `Move == (from,to)` \noverlaps with the range min max\n\n    update Action\n    |> onOverlap min max\n",
            "type": "Float -> Float -> Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          },
          {
            "name": "onUp",
            "comment": " Triggers an update on scrolling upwards \n\n    update Action\n    |> onUp\n",
            "type": "Scroll.Update m a -> Scroll.Move -> Maybe.Maybe (Scroll.Update m a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "adam-r-kowalski/Elm-Css",
    "version": "2.1.3",
    "docs": [
      {
        "name": "Css.Border",
        "comment": " Sets the border properties for all four sides at the same time.\nYou can set the color, style, width, and border radius\n\n#Functions\n@docs color, style, width, radius\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Sets the color of all four borders\n\n    -- Sets all border colors to red\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-left-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-right-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-top-color\", \"rgba(255, 0, 0, 1)\")\n       ]\n    -}\n    Border.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "radius",
            "comment": " Sets the radius of the\ntop left, top right, bottom right, and bottom left.\n\n    -- Sets the radius of all four sides to 25 pixels\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-left-radius\", \"25px\")\n       , (\"border-bottom-right-radius\", \"25px\")\n       , (\"border-top-left-radius\", \"25px\")\n       , (\"border-top-right-radius\", \"25px\")\n       ]\n    -}\n    Border.radius 25 25 25 25 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Sets the style of all four borders\n\n    -- Sets the border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-style\", \"dashed\")\n       , (\"border-left-style\", \"dashed\")\n       , (\"border-right-style\", \"dashed\")\n       , (\"border-top-style\", \"dashed\")\n       ]\n    -}\n    Border.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Sets the width of all four borders\n\n    -- Sets the border width to 5 pixels\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-width\", \"5px\")\n       , (\"border-left-width\", \"5px\")\n       , (\"border-right-width\", \"5px\")\n       , (\"border-top-width\", \"5px\")\n       ]\n    -}\n    Border.width 5 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Util",
        "comment": " Utility functions provided to make viewing the css generated by\nyour functions possible. I am still not quite sure just how useful this is,\nbut it is quite interesting to see.\n\n#Functions\n@docs toCss\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toCss",
            "comment": " This function takes a class name and a list of styles.\nIt will then generate a block of code that shows how the equivalent styles\nwould look in css.\n\nThis is really useful if you start to have really complex styles, which no\nlonger resemble the base abstractions that were made, yet you still want to\nsee how they transform to css.\n",
            "type": "String -> Css.Styles -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Bottom",
        "comment": " This library allows you to set the bottom border of any html element.\nYou can set the color, style, width, and radius of the bottom border.\n\n# Functions\n@docs color, style, width, rightRadius, leftRadius\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Sets the color of the bottom border\n\n    -- Sets the bottom border color to red\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderBottom.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "leftRadius",
            "comment": " Set the bottom left border radius\n    -- Set the bottom left border radius to 25 pixels\n    import Css.Border.Bottom as BorderBottom\n\n    -- [ (\"border-bottom-left-radius, \"25px\") ]\n    BorderBottom.leftRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "rightRadius",
            "comment": " Set the bottom right border radius\n\n    -- Set the bottom right border radius to 25 pixels\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-right-radius, \"25px\") ]\n    BorderBottom.rightRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Sets the style of the bottom border\n\n    -- Sets the bottom border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-style, \"dashed\") ]\n    BorderBottom.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Sets the width of the bottom border\n\n    -- Sets the bottom border width to 5 pixels\n    import Css.Border.Bottom as BorderBottom\n\n    -- [ (\"border-bottom-width, \"5px\") ]\n    BorderBottom.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Left",
        "comment": " This library allows you to set the left border of any html element.\nYou can set the color, style, and width.\n\n# Functions\n@docs color, style, width\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set the color of the left border\n\n    -- Set the left border color to red\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderLeft.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the left border\n\n    -- Set the left border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-style, \"dashed\") ]\n    BorderLeft.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of the left border\n\n    -- Set the left border width to 5 pixels\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-width, \"5px\") ]\n    BorderLeft.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Right",
        "comment": " This library allows you to set the right border of any html element.\nYou can set the color, style, and width.\n\n# Functions\n@docs color, style, width\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set the color of the right border\n\n    -- Set the right border color to red\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderRight.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the right border\n\n    -- Set the right border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-style, \"dashed\") ]\n    BorderRight.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of the right border\n\n    -- Set the right border width to 5 pixels\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-width, \"5px\") ]\n    BorderRight.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Top",
        "comment": " This library allows you to set the top border of any html element.\nYou can set the color, style, width, and radius of the top border.\n\n# Functions\n@docs color, style, width, rightRadius, leftRadius\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set the color of the top border\n\n    -- Set the top border color to red\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderTop.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "leftRadius",
            "comment": " Set the top left border radius\n    -- Set the top left border radius to 25 pixels\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-left-radius, \"25px\") ]\n    BorderTop.leftRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "rightRadius",
            "comment": " Set the top right border radius\n\n    -- Set the top right border radius to 25 pixels\n    import Css.Border.Top as BorderTop\n\n\n    -- [ (\"border-top-right-radius, \"25px\") ]\n    BorderTop.rightRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the top border\n\n    -- Set the top border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-style, \"dashed\") ]\n    BorderTop.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of the top border\n\n    -- Set the top border width to 5 pixels\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-width, \"5px\") ]\n    BorderTop.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Background",
        "comment": " Sets the background properties for the element.\nYou can set the color, image, position, size, repeat, and attachment.\n\n#Definitions\n@docs Repeat, Attachment\n\n#Strings\n@docs repeatString, attachmentString, pointString\n\n#Functions\n@docs color, image, position, size, repeat, attachment\n",
        "aliases": [],
        "types": [
          {
            "name": "Attachment",
            "comment": " Represent whether the background image is fixed or scrolls\nwith the rest of the page.\n\nScroll -\n  The background scrolls along with the element.\n\nFixed -\n  The background is fixed with regard to the viewport.\n\nLocal -\n  The background scrolls along with the element's contents\n",
            "args": [],
            "cases": [
              [
                "Scroll",
                []
              ],
              [
                "Fixed",
                []
              ],
              [
                "Local",
                []
              ]
            ]
          },
          {
            "name": "Repeat",
            "comment": " Represent how to repeat the background image\n\nRepeat -\n  The background image will be repeated both vertically and horizontally.\n\nRepeatX -\n  The background image will be repeated only horizontally.\n  This is really useful to repeat a gradient or some other thin\n  background to save on storage space, and decrease loading time.\n\nRepeatY -\n  The background image will be repeated only vertically.\n\nNoRepeat -\n  The background image will not be repeated.\n",
            "args": [],
            "cases": [
              [
                "Repeat",
                []
              ],
              [
                "RepeatX",
                []
              ],
              [
                "RepeatY",
                []
              ],
              [
                "NoRepeat",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "attachment",
            "comment": " Set whether a background image is fixed\nor scrolls with the rest of the page.\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"w3css.gif\\\")\")\n       , (\"background-repeat\", \"no-repeat\")\n       , (\"background-attachment\", \"fixed\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.repeat Background.NoRepeat\n    <| Background.attachment Background.Fixed []\n",
            "type": "Css.Background.Attachment -> Css.Styles -> Css.Styles"
          },
          {
            "name": "attachmentString",
            "comment": " Convert the attachment type to the string form so it works with css.\n\n    import Css.Background as Background\n\n    Background.attachmentString Background.Scroll -- \"scroll\"\n",
            "type": "Css.Background.Attachment -> String"
          },
          {
            "name": "color",
            "comment": " Set the background color.\n\n    import Css.Background as Background\n\n    -- [ (\"background-color\", \"rgba(255, 0, 0, 1)\") ]\n    Background.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "image",
            "comment": " Set the background image.\n\n    import Css.Background as Background\n\n    -- [ (\"background-image\", \"url(\\\"paper.gif\\\")\") ]\n    Background.image \"paper.gif\" []\n",
            "type": "String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "pointString",
            "comment": " Take two integers and append \"px\" so it works with css.\n\n    import Css.Background as Background\n\n    Background.pointString 5 10 -- \"5px 10px\"\n",
            "type": "number -> number -> String"
          },
          {
            "name": "position",
            "comment": " Set the starting position of the background image.\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"smiley.gif\\\")\")\n       , (\"background-position\", \"50px 100px\")\n       ] --}\n    Background.image \"smiley.gif\"\n    <| Background.position 50 100 []\n",
            "type": "number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "repeat",
            "comment": " Set how the background repeats\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"img_flwr.gif\\\")\")\n       , (\"background-size\", \"80px 60px\")\n       , (\"background-repeat\", \"no-repeat\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.size 80 60\n    <| Background.repeat Background.NoRepeat []\n",
            "type": "Css.Background.Repeat -> Css.Styles -> Css.Styles"
          },
          {
            "name": "repeatString",
            "comment": " Convert a repeat type to the string form so it works with css.\n\n    import Css.Background as Background\n\n    Background.repeatString Background.Repeat -- \"repeat\"\n",
            "type": "Css.Background.Repeat -> String"
          },
          {
            "name": "size",
            "comment": " Set the size of the background image\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"img_flwr.gif\\\")\")\n       , (\"background-size\", \"80px 60px\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.size 80 60 []\n",
            "type": "number -> number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Cursor",
        "comment": " Change the cursor to be displayed when pointing on an element.\n\n#Definition\n@docs Cursor\n\n#String\n@docs string\n\n#Function\n@docs cursor\n",
        "aliases": [],
        "types": [
          {
            "name": "Cursor",
            "comment": " Represent the type of cursor to be displayed when pointing on an element.\n\nAlias -\n  The cursor indicates an alias of something is to be created.\n\nAllScroll -\n  The cursor indicates that something can be scrolled in any direction.\n\nAuto -\n  The browser sets a cursor.\n\nCell -\n  The cursor indicates that a cell (or set of cells) may be selected.\n\nContextMenu -\n  The cursor indicates that a context-menu is available.\n\nColResize -\n  The cursor indicates that the column can be resized horizontally.\n\nCopy -\n  The cursor indicates something is to be copied.\n\nCrosshair -\n  The cursor render as a crosshair.\n\nDefault -\n  The default cursor.\n\nEResize -\n  The cursor indicates that an edge of a box is to be moved right (east).\n\nEwResize -\n  Indicates a bidirectional resize cursor.\n\nGrab -\n  The cursor indicates that something can be grabbed.\n\nGrabbing -\n  The cursor indicates that something can be grabbed.\n\nHelp -\n  The cursor indicates that help is available.\n\nMove -\n  The cursor indicates something is to be moved.\n\nNResize -\n  The cursor indicates that an edge of a box is to be moved up (north).\n\nNeResize -\n  The cursor indicates that an edge of a box is to be moved up\n  and right (north/east).\n\nNeswResize -\n  Indicates a bidirectional resize cursor.\n\nNsResize -\n  Indicates a bidirectional resize cursor.\n\nNwResize -\n  The cursor indicates that an edge of a box is to be moved up\n  and left (north/west).\n\nNwseResize -\n  Indicates a bidirectional resize cursor.\n\nNoDrop -\n  The cursor indicates that the dragged item cannot be dropped here.\n\nNone -\n  No cursor is rendered for the element.\n\nNotAllowed -\n  The cursor indicates that the requested action will not be executed.\n\nPointer -\n  The cursor is a pointer and indicates a link.\n\nProgress -\n  The cursor indicates that the program is busy (in progress).\n\nRowResize -\n  The cursor indicates that the row can be resized vertically.\n\nSResize -\n  The cursor indicates that an edge of a box is to be moved down (south).\n\nSeResize -\n  The cursor indicates that an edge of a box is to be moved down\n  and right (south/east).\n\nSwResize -\n  The cursor indicates that an edge of a box is to be moved down\n  and left (south/west).\n\nText -\n  The cursor indicates text that may be selected.\n\nUrl String -\n  A comma separated list of URLs to custom cursors.\n  Note: Always specify a generic cursor at the end of the list,\n  in case none of the URL-defined cursors can be used.\n\nVerticalText -\n  The cursor indicates vertical-text that may be selected.\n\nWResize -\n  The cursor indicates that an edge of a box is to be moved left (west).\n\nWait -\n  The cursor indicates that the program is busy.\n\nZoomIn -\n  The cursor indicates that something can be zoomed in.\n\nZoomOut -\n  The cursor indicates that something can be zoomed out.\n",
            "args": [],
            "cases": [
              [
                "Alias",
                []
              ],
              [
                "AllScroll",
                []
              ],
              [
                "Auto",
                []
              ],
              [
                "Cell",
                []
              ],
              [
                "ContextMenu",
                []
              ],
              [
                "ColResize",
                []
              ],
              [
                "Copy",
                []
              ],
              [
                "Crosshair",
                []
              ],
              [
                "Default",
                []
              ],
              [
                "EResize",
                []
              ],
              [
                "EwResize",
                []
              ],
              [
                "Grab",
                []
              ],
              [
                "Grabbing",
                []
              ],
              [
                "Help",
                []
              ],
              [
                "Move",
                []
              ],
              [
                "NResize",
                []
              ],
              [
                "NeResize",
                []
              ],
              [
                "NeswResize",
                []
              ],
              [
                "NsResize",
                []
              ],
              [
                "NwResize",
                []
              ],
              [
                "NwseResize",
                []
              ],
              [
                "NoDrop",
                []
              ],
              [
                "None",
                []
              ],
              [
                "NotAllowed",
                []
              ],
              [
                "Pointer",
                []
              ],
              [
                "Progress",
                []
              ],
              [
                "RowResize",
                []
              ],
              [
                "SResize",
                []
              ],
              [
                "SeResize",
                []
              ],
              [
                "SwResize",
                []
              ],
              [
                "Text",
                []
              ],
              [
                "Url",
                [
                  "String"
                ]
              ],
              [
                "VerticalText",
                []
              ],
              [
                "WResize",
                []
              ],
              [
                "Wait",
                []
              ],
              [
                "ZoomIn",
                []
              ],
              [
                "ZoomOut",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "cursor",
            "comment": " Set the type of cursor to be displayed.\n\n    import Css.Cursor as Cursor exposing (cursor)\n\n    -- [ (\"cursor\", \"crosshair\") ]\n    cursor Cursor.CrossHair []\n",
            "type": "Css.Cursor.Cursor -> Css.Styles -> Css.Styles"
          },
          {
            "name": "string",
            "comment": " Convert a cursor type to string form so it works with css.\n\n    import Css.Cursor as Cursor\n\n    Cursor.string Cursor.Cell -- \"cell\"\n",
            "type": "Css.Cursor.Cursor -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Dimension",
        "comment": " Set the different dimensions an element can have.\nYou can set the height, maxHeight, maxWidth, minHeight, minWidth, and width.\n\n#Height\n@docs height, maxHeight, minHeight\n\n#Width\n@docs width, maxWidth, minWidth\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "height",
            "comment": " Set the height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"height\", \"100px\") ]\n    Dimension.height 100 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "maxHeight",
            "comment": " Set the max height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"max-height\", \"50px\") ]\n    Dimension.maxHeight 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "maxWidth",
            "comment": " Set the max width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"max-width\", \"50px\") ]\n    Dimension.maxWidth 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "minHeight",
            "comment": " Set the min height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"min-height\", \"50px\") ]\n    Dimension.minHeight 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "minWidth",
            "comment": " Set the min width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"min-width\", \"50px\") ]\n    Dimension.minWidth 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"width\", \"50px\") ]\n    Dimension.width 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Display",
        "comment": " Set how an element is displayed, and whether it is hidden or visible.\n\n#Definition\n@docs Display\n\n#String\n@docs string\n\n#Function\n@docs display\n",
        "aliases": [],
        "types": [
          {
            "name": "Display",
            "comment": " Represent the display types an element can have.\n\nInline -\n  Displays an element as an inline element (like <span>).\n\nBlock -\n  Displays an element as a block element (like <p>).\n\nFlex -\n  Displays an element as an block-level flex container.\n\nInlineBlock -\n  Displays an element as an inline-level block container.\n  The inside of this block is formatted as block-level box,\n  and the element itself is formatted as an inline-level box\n\nInlineFlex -\n  Displays an element as an inline-level flex container.\n\nInlineTable -\n  The element is displayed as an inline-level table.\n\nListItem -\n  Let the element behave like a <li> element.\n\nRunIn -\n  Displays an element as either block or inline, depending on context.\n\nTable -\n  Let the element behave like a <table> element.\n\nTableCaption -\n  Let the element behave like a <caption> element.\n\nTableColumnGroup -\n  Let the element behave like a <colgroup> element.\n\nTableHeaderGroup -\n  Let the element behave like a <thead> element.\n\nTableFooterGroup -\n  Let the element behave like a <tfoot> element.\n\nTableRowGroup -\n  Let the element behave like a <tbody> element.\n\nTableCell -\n  Let the element behave like a <td> element.\n\nTableColumn -\n  Let the element behave like a <col> element.\n\nTableRow -\n  Let the element behave like a <tr> element.\n\nNone -\n  The element will not be displayed at all (has no effect on layout).\n",
            "args": [],
            "cases": [
              [
                "Inline",
                []
              ],
              [
                "Block",
                []
              ],
              [
                "Flex",
                []
              ],
              [
                "InlineBlock",
                []
              ],
              [
                "InlineFlex",
                []
              ],
              [
                "InlineTable",
                []
              ],
              [
                "ListItem",
                []
              ],
              [
                "RunIn",
                []
              ],
              [
                "Table",
                []
              ],
              [
                "TableCaption",
                []
              ],
              [
                "TableColumnGroup",
                []
              ],
              [
                "TableHeaderGroup",
                []
              ],
              [
                "TableFooterGroup",
                []
              ],
              [
                "TableRowGroup",
                []
              ],
              [
                "TableCell",
                []
              ],
              [
                "TableColumn",
                []
              ],
              [
                "TableRow",
                []
              ],
              [
                "None",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "display",
            "comment": " Sets the display type of an element\n\n    import Css.Display as Display exposing (display)\n\n    -- [ (\"display\", \"flex\") ]\n    display Display.Flex []\n",
            "type": "Css.Display.Display -> Css.Styles -> Css.Styles"
          },
          {
            "name": "string",
            "comment": " Convert a display type to string form so it works with css.\n\n    import Css.Display as Display\n\n    Display.string Display.Inline -- \"inline\"\n",
            "type": "Css.Display.Display -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Flex",
        "comment": " Set the layout of your elements using the flex layout system.\n\n#Definitions\n@docs Direction, Wrap, JustifyContent, AlignItem, AlignContent\n\n#Strings\n@docs directionString, wrapString, justifyContentString, alignItemString, alignContentString\n\n#Direction and Wrap\n@docs direction, wrap, flow\n\n#Alignment\n@docs justifyContent, alignItems, alignContent\n\n#Child Properties\n@docs order, grow, shrink, basis, alignSelf\n",
        "aliases": [],
        "types": [
          {
            "name": "AlignContent",
            "comment": " Represent how to align the flex container's lines within when\nthere is extra space in the cross axis.\n\nACStart -\n  Lines packed to the start of the container.\n\nACEnd -\n  Lines packed to the end of the container.\n\nACCenter -\n  Lines packed to the center of the container.\n\nACStretch -\n  Lines stretch to take up the remaining space.\n\nACBetween -\n  Lines evenly distributed; the first line is at the start of the\n  container while the last one is at the end.\n\nACAround -\n  Lines evenly distributed with equal space around each line.\n",
            "args": [],
            "cases": [
              [
                "ACStart",
                []
              ],
              [
                "ACEnd",
                []
              ],
              [
                "ACCenter",
                []
              ],
              [
                "ACStretch",
                []
              ],
              [
                "ACBetween",
                []
              ],
              [
                "ACAround",
                []
              ]
            ]
          },
          {
            "name": "AlignItem",
            "comment": " Represent how the flex item is laid out along the\ncross axis on the current line.\n\nAIStart -\n  Cross start margin edge of the items is placed on the cross start line.\n\nAIEnd -\n  Cross end margin edge of the items is placed on the cross end line.\n\nAICenter -\n  Items are centered in the cross axis.\n\nAIStretch -\n  Stretch to fill the container (still respect min and max width).\n\nAIBaseline -\n  Items are aligned such as their baselines align.\n",
            "args": [],
            "cases": [
              [
                "AIStart",
                []
              ],
              [
                "AIEnd",
                []
              ],
              [
                "AICenter",
                []
              ],
              [
                "AIStretch",
                []
              ],
              [
                "AIBaseline",
                []
              ]
            ]
          },
          {
            "name": "Direction",
            "comment": " Represent the main-axis, thus defining the direction\nflex items are placed in the flex container.\n\nRow -\n  Left to right in ltr; right to left in rtl.\n\nRowReverse -\n  Right to left in ltr; left to right in rtl.\n\nColumn -\n  Same as row but top to bottom.\n\nColumnReverse -\n  Same as row-reverse but bottom to top.\n",
            "args": [],
            "cases": [
              [
                "Row",
                []
              ],
              [
                "RowReverse",
                []
              ],
              [
                "Column",
                []
              ],
              [
                "ColumnReverse",
                []
              ]
            ]
          },
          {
            "name": "JustifyContent",
            "comment": " Represent the alignment along the main axis.\n\nJCStart -\n  Items are packed toward the start line.\n\nJCEnd -\n  Items are packed toward the end line.\n\nJCCenter -\n  Items are centered along the line.\n\nJCBetween -\n  Items are evenly distributed in the line;\n  first item is on the start line, last item on the end line.\n\nJCAround -\n  Items are evenly distributed in the line with\n  equal space around them.\n",
            "args": [],
            "cases": [
              [
                "JCStart",
                []
              ],
              [
                "JCEnd",
                []
              ],
              [
                "JCCenter",
                []
              ],
              [
                "JCBetween",
                []
              ],
              [
                "JCAround",
                []
              ]
            ]
          },
          {
            "name": "Wrap",
            "comment": " Represent the wrap behavior of flex items.\n\nNoWrap -\n  Single line / left to right in ltr; right to left in rtl.\n\nWrap -\n  Multi-line / left to right in ltr; right to left in rtl.\n\nWrapReverse -\n  Multi-line / right to left in ltr; left to right in rtl.\n",
            "args": [],
            "cases": [
              [
                "NoWrap",
                []
              ],
              [
                "Wrap",
                []
              ],
              [
                "WrapReverse",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "alignContent",
            "comment": " else if Set how to align the flex container's lines within when\nthere is extra space in the cross axis.\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-content\", \"flex-start\") ]\n    Flex.alignContent Flex.ACStart []\n",
            "type": "Css.Flex.AlignContent -> Css.Styles -> Css.Styles"
          },
          {
            "name": "alignContentString",
            "comment": " Convert a align content type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.alignContentString Flex.ACStart -- \"flex-start\"\n",
            "type": "Css.Flex.AlignContent -> String"
          },
          {
            "name": "alignItemString",
            "comment": " Convert a align item type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.alignItemString Flex.AIStart -- \"flex-start\"\n",
            "type": "Css.Flex.AlignItem -> String"
          },
          {
            "name": "alignItems",
            "comment": " else if Set how the flex items are laid out along the\ncross axis on the current line. Think of it as the justifyContent version\nfor the cross axis (perpendicular to the main axis).\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-items\", \"flex-start\") ]\n    Flex.alignItems Flex.AIStart []\n",
            "type": "Css.Flex.AlignItem -> Css.Styles -> Css.Styles"
          },
          {
            "name": "alignSelf",
            "comment": " else if Set the default alignment (or the one specified by align-items)\nto be overridden for individual flex items.\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-self\", \"flex-start\") ]\n    Flex.alignSelf Flex.AIStart []\n",
            "type": "Css.Flex.AlignItem -> Css.Styles -> Css.Styles"
          },
          {
            "name": "basis",
            "comment": " else if Set the default size of an element before the remaining space is distributed.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-basis\", \"1\") ]\n    Flex.basis 1 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "direction",
            "comment": " Set the main-axis, thus defining the direction flex items\nare placed in the flex container.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-direction\", \"row\") ]\n    Flex.direction Flex.Row []\n",
            "type": "Css.Flex.Direction -> Css.Styles -> Css.Styles"
          },
          {
            "name": "directionString",
            "comment": " Convert a direction type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.directionString Flex.Row -- \"row\"\n",
            "type": "Css.Flex.Direction -> String"
          },
          {
            "name": "flow",
            "comment": " Set the direction and the wrap together.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-direction\", \"row\")\n       , (\"flex-wrap\", \"nowrap\")\n       ]\n    Flex.flow Flex.Row Flex.NoWrap []\n",
            "type": "Css.Flex.Direction -> Css.Flex.Wrap -> Css.Styles -> Css.Styles"
          },
          {
            "name": "grow",
            "comment": " else if Set the ability for a flex item to grow if necessary.\nIt accepts a unitless value that serves as a proportion.\nIt dictates what amount of the available space inside the\nflex container the item should take up. Negative numbers\nare invalid.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-grow\", \"1\") ]\n    Flex.grow 1 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "justifyContent",
            "comment": " Set the alignment along the main axis.\n\n    import Css.Flex as Flex\n\n    -- [ (\"justify-content\", \"flex-start\") ]\n    Flex.justifyContent Flex.JCStart []\n",
            "type": "Css.Flex.JustifyContent -> Css.Styles -> Css.Styles"
          },
          {
            "name": "justifyContentString",
            "comment": " Convert a justify content type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.justifyContentString Flex.JCStart -- \"flex-start\"\n",
            "type": "Css.Flex.JustifyContent -> String"
          },
          {
            "name": "order",
            "comment": " else if Set the order in which items appear in the flex container.\n\n    import Css.Flex as Flex\n\n    -- [ (\"order\", \"1\") ]\n    Flex.order 1 []\n",
            "type": "Int -> Css.Styles -> Css.Styles"
          },
          {
            "name": "shrink",
            "comment": " else if Set the ability for a flex item to shrink if necessary.\nNegative numbers are invalid.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-shrink\", \"1\") ]\n    Flex.shrink 1 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "wrap",
            "comment": " Set the wrap behavior of flex items.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-wrap\", \"nowrap\") ]\n    Flex.wrap Flex.NoWrap []\n",
            "type": "Css.Flex.Wrap -> Css.Styles -> Css.Styles"
          },
          {
            "name": "wrapString",
            "comment": " Convert a wrap type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.wrapString Flex.NoWrap -- \"nowrap\"\n",
            "type": "Css.Flex.Wrap -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Float",
        "comment": " Float can be used to push elements left or right,\nallowing other elements to wrap around it.\n\n#Definitions\n@docs Clear, FloatType\n\n#Strings\n@docs clearString, floatString\n\n#Functions\n@docs clear, float\n",
        "aliases": [],
        "types": [
          {
            "name": "Clear",
            "comment": " Represent the sides of an element where\nfloating elements are not allowed to float.\n\nClearLeft -\n  No floating elements allowed on the left side.\n\nClearRight -\n  No floating elements allowed on the right side.\n\nClearBoth -\n  No floating elements allowed on either the left or right side.\n\nClearNone -\n  Allows floating elements on both sides.\n",
            "args": [],
            "cases": [
              [
                "ClearLeft",
                []
              ],
              [
                "ClearRight",
                []
              ],
              [
                "ClearBoth",
                []
              ],
              [
                "ClearNone",
                []
              ]
            ]
          },
          {
            "name": "FloatType",
            "comment": " Represent whether or not an element should float.\n\nLeft -\n  The element floats to the left.\n\nRight -\n  The element floats to the right.\n\nNone -\n  The element is not floated, and will be displayed\n  just where it occurs in the text.\n",
            "args": [],
            "cases": [
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "None",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "clear",
            "comment": " Set the sides of an element where\nfloating elements are not allowed to float.\n\n    import Css.Float as CssFloat\n\n    -- [ (\"clear\", \"left\") ]\n    CssFloat.clear CssFloat.ClearLeft []\n",
            "type": "Css.Float.Clear -> Css.Styles -> Css.Styles"
          },
          {
            "name": "clearString",
            "comment": " Convert a clear type to string form so it works in css.\n\n    import Css.Float as CssFloat\n\n    CssFloat.clearString CssFloat.ClearBoth -- \"both\"\n",
            "type": "Css.Float.Clear -> String"
          },
          {
            "name": "float",
            "comment": " Set whether or not an element should float.\n\n    import Css.Float as CssFloat exposing (float)\n\n    -- [ (\"float\", \"left\") ]\n    float CssFloat.Left []\n",
            "type": "Css.Float.FloatType -> Css.Styles -> Css.Styles"
          },
          {
            "name": "floatString",
            "comment": " Convert a float type to string form so it works in css.\n\n    import Css.Float as CssFloat\n\n    CssFloat.floatString CssFloat.Left -- \"left\"\n",
            "type": "Css.Float.FloatType -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Font",
        "comment": " Font properties define the font family, boldness, size,\nand the style of a text.\n\nSerif -\n  Serif fonts have small lines at the ends on some characters.\n\nSans-Serif -\n  \"Sans\" means without - these fonts do not have the lines at\n  the ends of characters.\n\nMonospace -\n  All monospace characters have the same width.\n\n#Definition\n@docs Style, Variant\n\n#Strings\n@docs styleString, variantString\n\n#Functions\n@docs family, size, style, variant, weight\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Represent the style of the font.\n\nNormalStyle -\n  The text is shown normally.\n\nItalic -\n  The text is shown in italics.\n\nOblique -\n  The text is \"leaning\" (oblique is very similar to\n  italic, but less supported).\n",
            "args": [],
            "cases": [
              [
                "NormalStyle",
                []
              ],
              [
                "Italic",
                []
              ],
              [
                "Oblique",
                []
              ]
            ]
          },
          {
            "name": "Variant",
            "comment": " Represent whether the font is small caps or normal.\n\nNormal -\n  The browser displays a normal font.\n\nSmallCaps -\n  The browser displays a small-caps font.\n",
            "args": [],
            "cases": [
              [
                "NormalVariant",
                []
              ],
              [
                "SmallCaps",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "family",
            "comment": " Set the font family for text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-family\", \"\\\"Times New Roman\\\", Georgia, Serif\") ]\n    Font.family \"\\\"Times New Roman\\\", Georgia, Serif\" []\n",
            "type": "String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "size",
            "comment": " Set the font size of text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-size\", \"24px\") ]\n    Font.size 24 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the font style for text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-style\", \"italic\") ]\n    Font.style Font.Italic []\n",
            "type": "Css.Font.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "styleString",
            "comment": " Convert a style type to string form so it works in css.\n\n    import Css.Font as Font\n\n    Font.styleString Font.Italic -- \"italic\"\n",
            "type": "Css.Font.Style -> String"
          },
          {
            "name": "variant",
            "comment": " Set whether or not a text should be displayed in a small-caps font.\n\n    import Css.Font as Font\n\n    -- [ (\"font-variant\", \"small-caps\") ]\n    Font.variant Font.SmallCaps []\n",
            "type": "Css.Font.Variant -> Css.Styles -> Css.Styles"
          },
          {
            "name": "variantString",
            "comment": " Convert a variant type to string form so it works in css.\n\n    import Css.Font as Font\n\n    Font.variantString Font.SmallCaps -- \"small-caps\"\n",
            "type": "Css.Font.Variant -> String"
          },
          {
            "name": "weight",
            "comment": " Set the weight of the font. (Only values 1-9 have any significance)\n\n    import Css.Font as Font\n\n    -- [ (\"font-weight\", \"900\") ]\n    Font.weight 9 []\n",
            "type": "Int -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Gradient",
        "comment": " Gradients let you display smooth transitions between\ntwo or more specified colors.\n\n#Definitions\n@docs linear, radial\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "linear",
            "comment": " To create a linear gradient you must define at least two color stops.\nColor stops are the colors you want to render smooth transitions among.\nYou must also set the angle along with the gradient effect.\n\n    import Css.Gradient as Gradient\n\n    -- [ (\"background\", \"linear-gradient(90deg, rgba(255, 0, 0, 1), rgba(0, 255, 0, 1))\") ]\n    Gradient.linear 90 [ rgba 255 0 0 1, rgba 0 255 0 1 ] []\n",
            "type": "number -> List Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "radial",
            "comment": " A radial gradient is defined by its center. To create a radial gradient\nyou must also define at least two color stops.\n\n    import Css.Gradient as Gradient\n\n    -- [ (\"background\", \"radial-gradient(rgba(255, 0, 0, 1), rgba(0, 255, 0, 1))\") ]\n    Gradient.radial [ rgba 255 0 0 1, rgba 0 255 0 1 ] []\n",
            "type": "List Color.Color -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.ListStyle",
        "comment": " ListStyle allows you to set different list item markers including images.\n\n#Definitions\n@docs Position, BulletType\n\n#String\n@docs positionString, bulletTypeString\n\n#Functions\n@docs image, position, bulletType\n",
        "aliases": [],
        "types": [
          {
            "name": "BulletType",
            "comment": " Represent the bullet type of list item marker in a list.\n\nDisc -\n  The marker is a filled circle.\n\nArmenian -\n  The marker is traditional Armenian numbering.\n\nCircle -\n  The marker is a circle.\n\nCjkIdeographic -\n  The marker is plain ideographic numbers.\n\nDecimal -\n  The marker is a number.\n\nDecimalLeadingZero -\n  The marker is a number with leading zeros\n  (01, 02, 03, etc.)\n\nGeorgian -\n  The marker is traditional Georgian numbering.\n\nHebrew -\n  The marker is traditional Hebrew numbering.\n\nHiragana -\n  The marker is traditional Hiragana numbering.\n\nHiraganaIroha -\n  The marker is traditional Hiragana iroha numbering.\n\nKatakana -\n  The marker is traditional Katakana numbering.\n\nKatakanaIroha -\n  The marker is traditional Katakana iroha numbering.\n\nLowerAlpha -\n  The marker is lower-alpha (a, b, c, d, e, etc.)\n\nLowerGreek -\n  The marker is lower-greek.\n\nLowerLatin -\n  The marker is lower-latin (a, b, c, d, e, etc.)\n\nLowerRoman -\n  The marker is lower-roman (i, ii, iii, iv, v, etc.)\n\nNone -\n  No marker is shown.\n\nSquare -\n  The marker is a square.\n\nUpperAlpha -\n  The marker is upper-alpha (A, B, C, D, E, etc.)\n\nUpperLatin -\n  The marker is upper-latin (A, B, C, D, E, etc.)\n\nUpperRoman -\n  The marker is upper-roman (I, II, III, IV, V, etc.)\n",
            "args": [],
            "cases": [
              [
                "Disc",
                []
              ],
              [
                "Armenian",
                []
              ],
              [
                "Circle",
                []
              ],
              [
                "CjkIdeographic",
                []
              ],
              [
                "Decimal",
                []
              ],
              [
                "DecimalLeadingZero",
                []
              ],
              [
                "Georgian",
                []
              ],
              [
                "Hebrew",
                []
              ],
              [
                "Hiragana",
                []
              ],
              [
                "HiraganaIroha",
                []
              ],
              [
                "Katakana",
                []
              ],
              [
                "KatakanaIroha",
                []
              ],
              [
                "LowerAlpha",
                []
              ],
              [
                "LowerGreek",
                []
              ],
              [
                "LowerLatin",
                []
              ],
              [
                "LowerRoman",
                []
              ],
              [
                "None",
                []
              ],
              [
                "Square",
                []
              ],
              [
                "UpperAlpha",
                []
              ],
              [
                "UpperLatin",
                []
              ],
              [
                "UpperRoman",
                []
              ]
            ]
          },
          {
            "name": "Position",
            "comment": " Represent if the list item markers should appear inside\nor outside the content flow.\n\nInside -\n  Indents the marker and the text.  The bullets appear inside the content flow.\n\nOutside -\n  Keeps the marker to the left of the text.  The bullets appear outside\n  the content flow.\n",
            "args": [],
            "cases": [
              [
                "Inside",
                []
              ],
              [
                "Outside",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "bulletType",
            "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-type\", \"katakana\") ]\n    ListStyle.bulletType ListStyle.Katakana []\n",
            "type": "Css.ListStyle.BulletType -> Css.Styles -> Css.Styles"
          },
          {
            "name": "bulletTypeString",
            "comment": " Convert a bullet type to string form so it works in css.\n\n    import Css.ListStyle as ListStyle\n\n    ListStyle.typeString ListStyle.Disc -- \"disc\"\n",
            "type": "Css.ListStyle.BulletType -> String"
          },
          {
            "name": "image",
            "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-image\", \"url(\\\"smiley.gif\\\")\") ]\n    ListStyle.image \"smiley.gif\" []\n",
            "type": "String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "position",
            "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-position\", \"inside\") ]\n    ListStyle.position ListStyle.Inside []\n",
            "type": "Css.ListStyle.Position -> Css.Styles -> Css.Styles"
          },
          {
            "name": "positionString",
            "comment": " Convert a position type to string form so it works in css.\n\n    import Css.ListStyle as ListStyle\n\n    ListStye.positionString ListStyle.Inside -- \"inside\"\n",
            "type": "Css.ListStyle.Position -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Margin",
        "comment": " Margins define the space around elements.\n\n#Functions\n@docs bottom, left, right, top, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Set all the margins of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin\", \"10px 10px 5px 8px\")]\n    Margin.top 10 10 5 8 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "bottom",
            "comment": " Set the bottom margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-bottom\", \"10px\")]\n    Margin.bottom 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "left",
            "comment": " Set the left margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-left\", \"10px\")]\n    Margin.left 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "right",
            "comment": " Set the right margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-right\", \"10px\")]\n    Margin.right 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "top",
            "comment": " Set the top margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-top\", \"10px\")]\n    Margin.top 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Outline",
        "comment": " An outline is a line that is drawn around elements (outside the borders)\nto make the element \"stand out\".\n\n#Definition\n@docs Style\n\n#String\n@docs styleString\n\n#Funcitons\n@docs color, style, width, all\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Represent the style of the outline\n\nNone -\n  Specifies no outline.\n\nHidden -\n  Specifies a hidden outline.\n\nDotted -\n  Specifies a dotted outline.\n\nDashed -\n  Specifies a dashed outline.\n\nSolid -\n  Specifies a solid outline.\n\nDouble -\n  Specifies a double outliner.\n\nGroove -\n  Specifies a 3D grooved outline.\n  The effect depends on the outline-color value.\n\nRidge -\n  Specifies a 3D ridged outline.\n  The effect depends on the outline-color value.\n\nInset -\n  Specifies a 3D inset outline.\n  The effect depends on the outline-color value.\n\nOutset -\n  Specifies a 3D outset outline.\n  The effect depends on the outline-color value.\n",
            "args": [],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Hidden",
                []
              ],
              [
                "Dotted",
                []
              ],
              [
                "Dashed",
                []
              ],
              [
                "Solid",
                []
              ],
              [
                "Double",
                []
              ],
              [
                "Groove",
                []
              ],
              [
                "Ridge",
                []
              ],
              [
                "Inset",
                []
              ],
              [
                "Outset",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " Set all of the outline properties in one function\n\n    import Css.Outline as Outline\n\n    {--\n      [ (\"outline-color\", \"rgba(255, 0, 0, 1)\")\n      , (\"outline-style\", \"dashed\")\n      , (\"outline-width\", \"2px\")\n      ]\n    --}\n    Outline.all (rgba 255 0 0 1) Outline.Dashed 2 []\n",
            "type": "Color.Color -> Css.Outline.Style -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "color",
            "comment": " Set the color of the outline.\n\n    import Color exposing (rgba)\n    import Css.Outline as Outline\n\n    -- [ (\"outline-color\", \"rgba(255, 0, 0, 1)\") ]\n    Outline.color (rgba 255 0 0 1) []\n\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the outline.\n\n    import Css.Outline as Outline\n\n    -- [ (\"outline-style\", \"dashed\") ]\n    Outline.style Outline.Dashed []\n",
            "type": "Css.Outline.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "styleString",
            "comment": " Convert a style type to string form so it works in css.\n\n    import Css.Outline as Outline\n\n    Outline.styleString Outline.Groove -- \"groove\"\n",
            "type": "Css.Outline.Style -> String"
          },
          {
            "name": "width",
            "comment": " Set the width of the outline.\n\n    import Css.Outline as Outline\n\n    -- [ (\"outline-width\", \"2px\") ]\n    Outline.width 2 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Text",
        "comment": " Change the way that text is displayed on the screen.\n\n#Definitions\n@docs Direction, Align, Decoration, UnicodeBidi, WhiteSpace\n\n#Strings\n@docs directionString, alignString, decorationString, unicodeBidiString, whiteSpaceString\n\n#Functions\n@docs color, direction, letterSpacing, lineHeight, align, decoration, indent, unicodeBidi, whiteSpace, wordSpacing\n",
        "aliases": [],
        "types": [
          {
            "name": "Align",
            "comment": " Specifies the horizontal alignment of text.\n\nLeft -\n  Aligns the text to the left.\n\nRight -\n  Aligns the text to the right.\n\nCenter -\n  Centers the text.\n\nJustify -\n  Stretches the lines so that each line has equal width\n  (like in newspapers and magazines).\n",
            "args": [],
            "cases": [
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Center",
                []
              ],
              [
                "Justify",
                []
              ]
            ]
          },
          {
            "name": "Decoration",
            "comment": " Represent the decoration added to text.\n\nNoDecoration -\n  Defines a normal text.\n\nUnderline -\n  Defines a line below the text.\n\nOverline -\n  Defines a line above the text.\n\nLineThrough -\n  Defines a line through the text.\n",
            "args": [],
            "cases": [
              [
                "NoDecoration",
                []
              ],
              [
                "Underline",
                []
              ],
              [
                "Overline",
                []
              ],
              [
                "LineThrough",
                []
              ]
            ]
          },
          {
            "name": "Direction",
            "comment": " Represent the text direction/writing direction.\n\nLtr -\n  The writing direction is left-to-right.\n\nRtl -\n  The writing direction is right-to-left.\n",
            "args": [],
            "cases": [
              [
                "Ltr",
                []
              ],
              [
                "Rtl",
                []
              ]
            ]
          },
          {
            "name": "UnicodeBidi",
            "comment": " The unicode-bidi property is used together with the direction property to\nset or return whether the text should be overridden to support multiple\nlanguages in the same document.\n\nNormalUnicodeBidi -\n  - Does not use an additional level of embedding.\n\nEmbed -\n  Creates an additional level of embedding.\n\nBidiOverride -\n  Creates an additional level of embedding. Reordering depends on the direction\n  property.\n",
            "args": [],
            "cases": [
              [
                "NormalUnicodeBidi",
                []
              ],
              [
                "Embed",
                []
              ],
              [
                "BidiOverride",
                []
              ]
            ]
          },
          {
            "name": "WhiteSpace",
            "comment": " Represent how white space inside an element is handled.\n\nNormalWhiteSpace -\n  Sequences of whitespace will collapse into a single whitespace. Text will\n  wrap when necessary.\n\nNoWrap -\n  Sequences of whitespace will collapse into a single whitespace.  Text will\n  never wrap to the next line. The text continues on the same line until\n  a <br> tag is encountered.\n\nPre -\n  Whitespace is preserved by the browser. Text will only wrap on line breaks.\n  Acts like the <pre> tag in HTML.\n\nPreLine -\n  Sequences of whitespace will collapse into a single whitespace.\n  Text will wrap when necessary, and on line breaks.\n\nPreWrap -\n  Whitespace is preserved by the browser. Text will wrap when necessary,\n  and on line breaks.\n",
            "args": [],
            "cases": [
              [
                "NormalWhiteSpace",
                []
              ],
              [
                "NoWrap",
                []
              ],
              [
                "Pre",
                []
              ],
              [
                "PreLine",
                []
              ],
              [
                "PreWrap",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "align",
            "comment": " Set the horizontal alignment of text.\n\n    import Css.Text as Text\n\n    -- [ (\"text-align\", \"left\") ]\n    Text.align Text.Left []\n",
            "type": "Css.Text.Align -> Css.Styles -> Css.Styles"
          },
          {
            "name": "alignString",
            "comment": " Convert an align type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.alignString Text.Left -- \"left\"\n",
            "type": "Css.Text.Align -> String"
          },
          {
            "name": "color",
            "comment": " Set the color of text.\n\n    import Css.Text as Text\n\n    -- [ (\"color\", \"rgba(255, 0, 0, 1)\") ]\n    Text.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "decoration",
            "comment": " Set the decoration added to text.\n\n    import Css.Text as Text\n\n    -- [ (\"text-decoration\", \"underline\") ]\n    Text.decoration Text.Underline []\n",
            "type": "Css.Text.Decoration -> Css.Styles -> Css.Styles"
          },
          {
            "name": "decorationString",
            "comment": " Convert an decoration type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.decorationString Text.Underline -- \"underline\"\n",
            "type": "Css.Text.Decoration -> String"
          },
          {
            "name": "direction",
            "comment": " Set the text direction/writing direction.\n\n    import Css.Text as Text\n\n    -- [ (\"direction\", \"ltr\") ]\n    Text.direction Text.Ltr []\n",
            "type": "Css.Text.Direction -> Css.Styles -> Css.Styles"
          },
          {
            "name": "directionString",
            "comment": " Convert a direction type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.directionString Text.Ltr -- \"ltr\"\n",
            "type": "Css.Text.Direction -> String"
          },
          {
            "name": "indent",
            "comment": " Set the indentation of the first line in a text-block.\n\n    import Css.Text as Text\n\n    -- [ (\"text-indent\", \"20px\") ]\n    Text.indent 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "letterSpacing",
            "comment": " Increases or decreases the space between characters in a text.\n\n    import Css.Text as Text\n\n    -- [ (\"letter-spacing\", \"2px\") ]\n    Text.letterSpacing 2 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "lineHeight",
            "comment": " Set the line height.\n\n    import Css.Text as Text\n\n    -- [ (\"line-height\", \"14px\") ]\n    Text.lineHeight 14 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "unicodeBidi",
            "comment": " Used together with the direction property to set or return whether\nthe text should be overridden to support multiple languages\nin the same document.\n\n    import Css.Text as Text\n\n    -- [ (\"unicode-bidi\", \"bidi-override\") ]\n    Text.unicodeBidi Text.BidiOverride []\n",
            "type": "Css.Text.UnicodeBidi -> Css.Styles -> Css.Styles"
          },
          {
            "name": "unicodeBidiString",
            "comment": " Convert an unicode bidi type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.unicodeBidiString Text.Embed -- \"embed\"\n",
            "type": "Css.Text.UnicodeBidi -> String"
          },
          {
            "name": "whiteSpace",
            "comment": " Set how white space inside an element is handled.\n\n    import Css.Text as Text\n\n    -- [ (\"white-space\", \"pre\") ]\n    Text.whiteSpace Text.Pre []\n",
            "type": "Css.Text.WhiteSpace -> Css.Styles -> Css.Styles"
          },
          {
            "name": "whiteSpaceString",
            "comment": " Convert an white space type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.whiteSpaceString Text.Pre -- \"pre\"\n",
            "type": "Css.Text.WhiteSpace -> String"
          },
          {
            "name": "wordSpacing",
            "comment": " Increases or decreases the space between words in a text.\n\n    import Css.Text as Text\n\n    -- [ (\"word-spacing\", \"2px\") ]\n    Text.wordSpacing 2 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Transform3",
        "comment": " Transforms allow you to translate, rotate, scale, and skew elements.\nA transformation is an effect that lets an element change shape, size,\nand position.\n\n#Functions\n@docs transform3, perspective, translate3, rotate3, scale3\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "perspective",
            "comment": " Defines a perspective view for a 3D transformed element.\n\n  -- [ (\"transform\", \"perspective(800)\") ]\n  transform3 [ perspective 800 ]\n",
            "type": "number -> String"
          },
          {
            "name": "rotate3",
            "comment": " Rotates the element around a specified axis at a given degree.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"rotate3d(1, 1, 1, 45deg)\") ]\n    transform3 [ rotate3 1 1 1 45 ] []\n",
            "type": "number -> number -> number -> number -> String"
          },
          {
            "name": "scale3",
            "comment": " Scale an element along the given axis.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"scale3d(1, 2, 1)\") ]\n    transform3 [ scale3 1 2 1 ] []\n",
            "type": "number -> number -> number -> String"
          },
          {
            "name": "transform3",
            "comment": " This function takes a list of transforms and applies them\nto the element.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"translate3(100px, 100px, 0px) rotate3(1, 1, 1, 45deg)\") ]\n    transform3 [ translate3 100 100 0, rotate1 1 1 1 45 ] []\n",
            "type": "List String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "translate3",
            "comment": " Moves an element from its current position (according to the\nparameters given for the X-axis and the Y-axis).\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"translate3d(100px, 100px, 0px)\") ]\n    transform3 [ translate3 100 100 0 ] []\n",
            "type": "number -> number -> number -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Transform2",
        "comment": " Transforms allow you to translate, rotate, scale, and skew elements.\nA transformation is an effect that lets an element change shape, size,\nand position.\n\n#Functions\n@docs transform2, translate2, rotate2, scale2, skew2, matrix2\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matrix2",
            "comment": " Combines all the 2D transform methods into one.\n\nThe matrix method takes six parameters, containing mathematic functions,\nwhich allow you to rotate, scale, move (translate), and skew elements.\n\nThe default matrix has the following form\n\n1 0 0\n\n1 0 0\n\n0 0 1\n\nThis means that the element has a scale of 1 in the x and y direction,\nas well as no skew and no translation.\n\nThe browser multiplies this by a vector which represents a particular\npoint within the local coordinate space.\n\nx\n\ny\n\n1\n\nIf you look at the parameters that this function takes you may also notice\nthat it doesn't take a rotation. So how do we accomplish this? By placing\nopposite values into the x and y skew you will have a rotation.\n\n1 -0.5 0.5\n\n1   0   0\n\n0   0   1\n\nWe only need to specify the first six parameters as the last three will always\nbe 0 0 1.\n\nscalex skewx skewy\n\nscaley   x     y\n\n  0      0     1\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"matrix(1, 0, 0, 1, 0, 0)\") ]\n    transform2 [ matrix2 1 0 0 1 0 0 ] []\n",
            "type": "number -> number -> number -> number -> number -> number -> String"
          },
          {
            "name": "rotate2",
            "comment": " Rotates the element clockwise or counter-clockwise according\nto the given degree.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"rotate(45deg)\") ]\n    transform2 [ rotate2 45 ] []\n",
            "type": "number -> String"
          },
          {
            "name": "scale2",
            "comment": " Increases or decreases the size of an element (according\nto the parameters given for the width and height).\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"scale(0.5, 0.5)\") ]\n    transform2 [ scale2 0.5 0.5 ] []\n",
            "type": "number -> number -> String"
          },
          {
            "name": "skew2",
            "comment": " Skews an element along the X and Y-axis by the given angles.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"skew(20deg, 20deg)\") ]\n    transform2 [ skew2 20 20 ] []\n",
            "type": "number -> number -> String"
          },
          {
            "name": "transform2",
            "comment": " This function takes a list of transforms and applies them\nto the element.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"translate(100px, 100px) rotate(45deg)\") ]\n    transform2 [ translate2 100 100, rotate2 45 ] []\n",
            "type": "List String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "translate2",
            "comment": " Moves an element from its current position (according to the\nparameters given for the X-axis and the Y-axis).\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"translate(100px, 100px)\") ]\n    transform2 [ translate2 100 100 ] []\n",
            "type": "number -> number -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Sheet",
        "comment": " Create a stylesheet from a list of rules which are a list of Styles\n#Get a single name, value pair as string\n@docs createRule\n@docs sheetAsString\n@docs ruleAsString\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "createRule",
            "comment": " Create a name, styles pair ",
            "type": "String -> Css.Styles -> Css.Sheet.Rule"
          },
          {
            "name": "ruleAsString",
            "comment": " Get string representation of a rule ",
            "type": "Css.Sheet.Rule -> String"
          },
          {
            "name": "sheetAsString",
            "comment": " Get string representation of a whole sheet ",
            "type": "Css.Sheet.Sheet -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Padding",
        "comment": " Padding defines the space between the element border and the element content.\n\n#Functions\n@docs bottom, left, right, top, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Set all the padding an element has\n\n    import Css.Padding as Padding\n\n    {-- [ (\"padding-top\", \"10px\")\n        , (\"padding-right\", \"20px\")\n        , (\"padding-bottom\", \"16px\")\n        , (\"padding-left\", \"8px\")]\n    --}\n    Padding.all 10 20 16 8 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "bottom",
            "comment": " Set the bottom padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-bottom\", \"20px\") ]\n    Padding.bottom 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "left",
            "comment": " Set the left padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-left\", \"20px\") ]\n    Padding.left 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "right",
            "comment": " Set the right padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-right\", \"20px\") ]\n    Padding.right 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "top",
            "comment": " Set the top padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-top\", \"20px\") ]\n    Padding.top 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Shadow",
        "comment": " With CSS3 you can add shadow to text and to elements.\n\n#Definitions\n@docs Text, Box\n\n#Strings\n@docs textString, listTextString, boxString, listBoxString\n\n#Functions\n@docs text, box\n",
        "aliases": [
          {
            "name": "Box",
            "comment": " Represent a box shadow.\n\nInt -\n  The position of the horizontal shadow.\n  Negative values are allowed.\n\nInt -\n  The position of the vertical shadow.\n  Negative values are allowed.\n\nInt -\n  The blur radius.\n\nInt -\n  The size of shadow. Negative values are allowed.\n\nColor -\n  The color of the shadow.\n\nBool -\n  Changes the shadow from an outer shadow\n  (outset) to an inner shadow.\n",
            "args": [],
            "type": "( Int, Int, Int, Int, Color.Color, Bool )"
          },
          {
            "name": "Text",
            "comment": " Represent a text shadow.\n\nInt -\n  The position of the horizontal shadow.\n  Negative values are allowed.\n\nInt -\n  The position of the vertical shadow.\n  Negative values are allowed.\n\nInt -\n  The blur radius.\n\nColor -\n  The color of the shadow.\n",
            "args": [],
            "type": "( Int, Int, Int, Color.Color )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "box",
            "comment": " Attach a shadow to an element.\n\n    import Css.Shadow as Shadow\n\n    -- [ (\"box-shadow\", \"10px 10px 10px 5px rgba(0, 0, 0, 1)\") ]\n    Shadow.box [ (10, 10, 10, 5, (rgba 0 0 0 1), false ] []\n",
            "type": "List Css.Shadow.Box -> Css.Styles -> Css.Styles"
          },
          {
            "name": "boxString",
            "comment": " Convert a box shadow to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- \"10px 10px 10px 5px rgba(0, 0, 0, 1)\"\n    shadow.boxString (10, 10, 10, 5, (rgba 0 0 0 1), false)\n",
            "type": "Css.Shadow.Box -> String"
          },
          {
            "name": "listBoxString",
            "comment": " Convert a list of box shadows to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- [ ( \"box-shadow\" , \"10px 10px 10px rgba(0, 0, 0, 1)\") ]\n    Shadow.listTextString [ (10, 10, 10, (rgba 0 0 0 1)) ]\n",
            "type": "String -> List Css.Shadow.Box -> String"
          },
          {
            "name": "listTextString",
            "comment": " Convert a list of text shadows to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- [ ( \"text-shadow\" , \"10px 10px 10px rgba(0, 0, 0, 1) ]\n    Shadow.listTextString [ (10, 10, 10, (rgba 0 0 0 1)) ]\n",
            "type": "String -> List Css.Shadow.Text -> String"
          },
          {
            "name": "text",
            "comment": " Set the shadow effect added to text.\n\n    import Css.Shadow as Shadow\n\n    -- [ (\"text-shadow\", \"10px 10px 10px rgba(0, 0, 0, 1)\") ]\n    Shadow.text [ (10, 10, 10, rgba 0 0 0 1) ] []\n",
            "type": "List Css.Shadow.Text -> Css.Styles -> Css.Styles"
          },
          {
            "name": "textString",
            "comment": " Convert a text shadow to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- \"10px 10px 10px rgba(0, 0, 0, 1)\"\n    Shadow.textString (10, 10, 10, (rgba 0 0 0 1))\n",
            "type": "Css.Shadow.Text -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Position",
        "comment": " Positioning allows you to position an element.  It can also place\nand element behind another, and specify what should happen when an\nelement's content is too big.\n\n#Definitions\n@docs Overflow, Position\n\n#Strings\n@docs overflowString, positionString\n\n#Functions\n@docs clip, bottom, left, overflow, position, right, top, zIndex\n",
        "aliases": [],
        "types": [
          {
            "name": "Overflow",
            "comment": " Represent what happens if content overflows an element's box.\n\nAutoOverflow -\n  If overflow clipped, a scroll-bar should be added to see the\n  rest of the content.\n\nHidden -\n  The overflow is clipped, and the rest of the content will be invisible.\n\nScroll -\n  The overflow is clipped, but a scroll-bar is added to see the\n  rest of the content.\n\nVisible -\n  The overflow is not clipped. It renders outside the element's box.\n",
            "args": [],
            "cases": [
              [
                "AutoOverflow",
                []
              ],
              [
                "Hidden",
                []
              ],
              [
                "Scroll",
                []
              ],
              [
                "Visible",
                []
              ]
            ]
          },
          {
            "name": "Position",
            "comment": " Represent the type of positioning for an element.\n\nAbsolute -\n  The element is positioned relative to its first positioned\n  (not static) ancestor element.\n\nFixed -\n  The element is positioned relative to the browser window.\n\nRelative -\n  The element is positioned relative to its normal position,\n  so \"left:20\" adds 20 pixels to the element's LEFT position.\n\nStatic -\n  Elements render in order, as they appear in the document flow.\n",
            "args": [],
            "cases": [
              [
                "Absolute",
                []
              ],
              [
                "Fixed",
                []
              ],
              [
                "Relative",
                []
              ],
              [
                "Static",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "bottom",
            "comment": " Set the bottom margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"bottom\", \"20px\") ]\n    Position.bottom 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "clip",
            "comment": " What happens if an image is larger than its containing element?\nThe clip property lets you specify a rectangle to clip an absolutely\npositioned element. The rectangle is specified as four coordinates,\nall from the top-left corner of the element to be clipped.\n\n    import Css.Position as Position\n\n    -- [ (\"clip\", \"rect(0px, 60px, 200px, 0px)\") ]\n    Position.clip 0 60 200 0 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "left",
            "comment": " Set the left margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"cursor\", \"crosshair\") ]\n    Position.cursor Position.CrossHair []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "overflow",
            "comment": " Set what happens if content overflows an element's box.\n\n    import Css.Position as Position\n\n    -- [ (\"overflow\", \"hidden\") ]\n    Position.overflow Position.Hidden []\n",
            "type": "Css.Position.Overflow -> Css.Styles -> Css.Styles"
          },
          {
            "name": "overflowString",
            "comment": " Convert a overflow type to string form so it works with css.\n\n    import Css.Position as Position\n\n    Position.overflowString Position.Hidden -- \"hidden\"\n",
            "type": "Css.Position.Overflow -> String"
          },
          {
            "name": "position",
            "comment": " Set the type of positioning for an element.\n\n    import Css.Position as Position exposing (position)\n\n    -- [ (\"position\", \"fixed\") ]\n    position Position.Fixed []\n",
            "type": "Css.Position.Position -> Css.Styles -> Css.Styles"
          },
          {
            "name": "positionString",
            "comment": " Convert a position type to string form so it works with css.\n\n    import Css.Position as Position\n\n    Position.positionString Position.Absolute -- \"absolute\"\n",
            "type": "Css.Position.Position -> String"
          },
          {
            "name": "right",
            "comment": " Set the right margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"right\", \"24px\") ]\n    Position.right 24 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "top",
            "comment": " Set the top margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"top\", \"24px\") ]\n    Position.top 24 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "zIndex",
            "comment": " Set the stack order of an element.\n\n    import Css.Position as Position\n\n    -- [ (\"z-index\", \"2\") ]\n    Position.zIndex 2 []\n",
            "type": "Int -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Style",
        "comment": " This library allows you to set the\nstyle of the border.\n\n# Definition\n@docs Style\n\n# String\n@docs string\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Represent the types of styles that can be\napplied to the border.\n\nNone -\n  Default value. Specifies no border.\n\nHidden -\n  The same as \"none\", except in border conflict\n  resolution for table elements.\n\nDotted -\n  Specifies a dotted border.\n\nDashed -\n  Specifies a dashed border.\n\nSolid -\n  Specifies a solid border.\n\nDouble -\n  Specifies a double border.\n\nGroove -\n  Specifies a 3D grooved border.  The effect\n  depends on the border-color value.\n\nRidge -\n  Specifies a 3D ridged border.\n  The effect depends on the border-color value.\n\nInset -\n  Specifies a 3D inset border.\n  The effect depends on the border-color value.\n\nOutset -\n  Specifies a 3D outset border.\n  The effect depends on the border-color value.\n",
            "args": [],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Hidden",
                []
              ],
              [
                "Dotted",
                []
              ],
              [
                "Dashed",
                []
              ],
              [
                "Solid",
                []
              ],
              [
                "Double",
                []
              ],
              [
                "Groove",
                []
              ],
              [
                "Ridge",
                []
              ],
              [
                "Inset",
                []
              ],
              [
                "Outset",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "string",
            "comment": " Convert a style to the string form so it works with css.\n\n    import Css.Style as Style\n\n    Style.string Style.Groove [] -- \"groove\"\n",
            "type": "Css.Border.Style.Style -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css",
        "comment": " This module provides a few helper functions that make dealing with\ncss in Elm more pleasant and concise.\n\n#Definition\n@docs Styles\n\n#String\n@docs colorString\n\n#Functions\n@docs px, url, setViewport, style\n",
        "aliases": [
          {
            "name": "Styles",
            "comment": " This type alias allows us to be more expressive. ",
            "args": [],
            "type": "List ( String, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "colorString",
            "comment": " Convert a color type to string form so it works with css.\n\n    import Css exposing (colorString)\n\n    colorString (rgba 0 0 0 1) -- \"rgba(0, 0, 0, 1)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "px",
            "comment": " Add a px post fix to the end of any integer.\n\n    import Css exposing (px)\n\n    px 5 -- \"5px\"\n",
            "type": "number -> String"
          },
          {
            "name": "setViewport",
            "comment": " Set the proper width and scaling to allow for responsive design ",
            "type": "Html.Html"
          },
          {
            "name": "style",
            "comment": " Add a css style to a list of styles.\n\n    import Css\n\n    [ (\"cursor\", \"zoom-out\") ]\n    Css.style \"cursor\" \"zoom-out\" []\n",
            "type": "String -> String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "url",
            "comment": " Add a url prefix to a string.\n\n    import Css exposing (url)\n\n    url \"smiley.gif\" -- \"url(\\\"smiley.gif\\\")\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "adam-r-kowalski/elm-css-legacy",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Css.Border",
        "comment": " Sets the border properties for all four sides at the same time.\nYou can set the color, style, width, and border radius\n\n#Functions\n@docs color, style, width, radius\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Sets the color of all four borders\n\n    -- Sets all border colors to red\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-left-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-right-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-top-color\", \"rgba(255, 0, 0, 1)\")\n       ]\n    -}\n    Border.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "radius",
            "comment": " Sets the radius of the\ntop left, top right, bottom right, and bottom left.\n\n    -- Sets the radius of all four sides to 25 pixels\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-left-radius\", \"25px\")\n       , (\"border-bottom-right-radius\", \"25px\")\n       , (\"border-top-left-radius\", \"25px\")\n       , (\"border-top-right-radius\", \"25px\")\n       ]\n    -}\n    Border.radius 25 25 25 25 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Sets the style of all four borders\n\n    -- Sets the border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-style\", \"dashed\")\n       , (\"border-left-style\", \"dashed\")\n       , (\"border-right-style\", \"dashed\")\n       , (\"border-top-style\", \"dashed\")\n       ]\n    -}\n    Border.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Sets the width of all four borders\n\n    -- Sets the border width to 5 pixels\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-width\", \"5px\")\n       , (\"border-left-width\", \"5px\")\n       , (\"border-right-width\", \"5px\")\n       , (\"border-top-width\", \"5px\")\n       ]\n    -}\n    Border.width 5 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Util",
        "comment": " Utility functions provided to make viewing the css generated by\nyour functions possible. I am still not quite sure just how useful this is,\nbut it is quite interesting to see.\n\n#Functions\n@docs toCss\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toCss",
            "comment": " This function takes a class name and a list of styles.\nIt will then generate a block of code that shows how the equivalent styles\nwould look in css.\n\nThis is really useful if you start to have really complex styles, which no\nlonger resemble the base abstractions that were made, yet you still want to\nsee how they transform to css.\n",
            "type": "String -> Css.Styles -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Background",
        "comment": " Sets the background properties for the element.\nYou can set the color, image, position, size, repeat, and attachment.\n\n#Definitions\n@docs Repeat, Attachment\n\n#Strings\n@docs repeatString, attachmentString, pointString\n\n#Functions\n@docs color, image, position, size, repeat, attachment\n",
        "aliases": [],
        "types": [
          {
            "name": "Attachment",
            "comment": " Represent whether the background image is fixed or scrolls\nwith the rest of the page.\n\nScroll -\n  The background scrolls along with the element.\n\nFixed -\n  The background is fixed with regard to the viewport.\n\nLocal -\n  The background scrolls along with the element's contents\n",
            "args": [],
            "cases": [
              [
                "Scroll",
                []
              ],
              [
                "Fixed",
                []
              ],
              [
                "Local",
                []
              ]
            ]
          },
          {
            "name": "Repeat",
            "comment": " Represent how to repeat the background image\n\nRepeat -\n  The background image will be repeated both vertically and horizontally.\n\nRepeatX -\n  The background image will be repeated only horizontally.\n  This is really useful to repeat a gradient or some other thin\n  background to save on storage space, and decrease loading time.\n\nRepeatY -\n  The background image will be repeated only vertically.\n\nNoRepeat -\n  The background image will not be repeated.\n",
            "args": [],
            "cases": [
              [
                "Repeat",
                []
              ],
              [
                "RepeatX",
                []
              ],
              [
                "RepeatY",
                []
              ],
              [
                "NoRepeat",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "attachment",
            "comment": " Set whether a background image is fixed\nor scrolls with the rest of the page.\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"w3css.gif\\\")\")\n       , (\"background-repeat\", \"no-repeat\")\n       , (\"background-attachment\", \"fixed\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.repeat Background.NoRepeat\n    <| Background.attachment Background.Fixed []\n",
            "type": "Css.Background.Attachment -> Css.Styles -> Css.Styles"
          },
          {
            "name": "attachmentString",
            "comment": " Convert the attachment type to the string form so it works with css.\n\n    import Css.Background as Background\n\n    Background.attachmentString Background.Scroll -- \"scroll\"\n",
            "type": "Css.Background.Attachment -> String"
          },
          {
            "name": "color",
            "comment": " Set the background color.\n\n    import Css.Background as Background\n\n    -- [ (\"background-color\", \"rgba(255, 0, 0, 1)\") ]\n    Background.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "image",
            "comment": " Set the background image.\n\n    import Css.Background as Background\n\n    -- [ (\"background-image\", \"url(\\\"paper.gif\\\")\") ]\n    Background.image \"paper.gif\" []\n",
            "type": "String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "pointString",
            "comment": " Take two integers and append \"px\" so it works with css.\n\n    import Css.Background as Background\n\n    Background.pointString 5 10 -- \"5px 10px\"\n",
            "type": "number -> number -> String"
          },
          {
            "name": "position",
            "comment": " Set the starting position of the background image.\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"smiley.gif\\\")\")\n       , (\"background-position\", \"50px 100px\")\n       ] --}\n    Background.image \"smiley.gif\"\n    <| Background.position 50 100 []\n",
            "type": "number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "repeat",
            "comment": " Set how the background repeats\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"img_flwr.gif\\\")\")\n       , (\"background-size\", \"80px 60px\")\n       , (\"background-repeat\", \"no-repeat\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.size 80 60\n    <| Background.repeat Background.NoRepeat []\n",
            "type": "Css.Background.Repeat -> Css.Styles -> Css.Styles"
          },
          {
            "name": "repeatString",
            "comment": " Convert a repeat type to the string form so it works with css.\n\n    import Css.Background as Background\n\n    Background.repeatString Background.Repeat -- \"repeat\"\n",
            "type": "Css.Background.Repeat -> String"
          },
          {
            "name": "size",
            "comment": " Set the size of the background image\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"img_flwr.gif\\\")\")\n       , (\"background-size\", \"80px 60px\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.size 80 60 []\n",
            "type": "number -> number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Bottom",
        "comment": " This library allows you to set the bottom border of any html element.\nYou can set the color, style, width, and radius of the bottom border.\n\n# Functions\n@docs color, style, width, rightRadius, leftRadius\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Sets the color of the bottom border\n\n    -- Sets the bottom border color to red\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderBottom.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "leftRadius",
            "comment": " Set the bottom left border radius\n    -- Set the bottom left border radius to 25 pixels\n    import Css.Border.Bottom as BorderBottom\n\n    -- [ (\"border-bottom-left-radius, \"25px\") ]\n    BorderBottom.leftRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "rightRadius",
            "comment": " Set the bottom right border radius\n\n    -- Set the bottom right border radius to 25 pixels\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-right-radius, \"25px\") ]\n    BorderBottom.rightRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Sets the style of the bottom border\n\n    -- Sets the bottom border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-style, \"dashed\") ]\n    BorderBottom.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Sets the width of the bottom border\n\n    -- Sets the bottom border width to 5 pixels\n    import Css.Border.Bottom as BorderBottom\n\n    -- [ (\"border-bottom-width, \"5px\") ]\n    BorderBottom.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Left",
        "comment": " This library allows you to set the left border of any html element.\nYou can set the color, style, and width.\n\n# Functions\n@docs color, style, width\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set the color of the left border\n\n    -- Set the left border color to red\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderLeft.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the left border\n\n    -- Set the left border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-style, \"dashed\") ]\n    BorderLeft.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of the left border\n\n    -- Set the left border width to 5 pixels\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-width, \"5px\") ]\n    BorderLeft.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Right",
        "comment": " This library allows you to set the right border of any html element.\nYou can set the color, style, and width.\n\n# Functions\n@docs color, style, width\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set the color of the right border\n\n    -- Set the right border color to red\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderRight.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the right border\n\n    -- Set the right border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-style, \"dashed\") ]\n    BorderRight.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of the right border\n\n    -- Set the right border width to 5 pixels\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-width, \"5px\") ]\n    BorderRight.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Top",
        "comment": " This library allows you to set the top border of any html element.\nYou can set the color, style, width, and radius of the top border.\n\n# Functions\n@docs color, style, width, rightRadius, leftRadius\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "color",
            "comment": " Set the color of the top border\n\n    -- Set the top border color to red\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderTop.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "leftRadius",
            "comment": " Set the top left border radius\n    -- Set the top left border radius to 25 pixels\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-left-radius, \"25px\") ]\n    BorderTop.leftRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "rightRadius",
            "comment": " Set the top right border radius\n\n    -- Set the top right border radius to 25 pixels\n    import Css.Border.Top as BorderTop\n\n\n    -- [ (\"border-top-right-radius, \"25px\") ]\n    BorderTop.rightRadius 25 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the top border\n\n    -- Set the top border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-style, \"dashed\") ]\n    BorderTop.style BorderStyle.Dashed []\n",
            "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of the top border\n\n    -- Set the top border width to 5 pixels\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-width, \"5px\") ]\n    BorderTop.width 5 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Cursor",
        "comment": " Change the cursor to be displayed when pointing on an element.\n\n#Definition\n@docs Cursor\n\n#String\n@docs string\n\n#Function\n@docs cursor\n",
        "aliases": [],
        "types": [
          {
            "name": "Cursor",
            "comment": " Represent the type of cursor to be displayed when pointing on an element.\n\nAlias -\n  The cursor indicates an alias of something is to be created.\n\nAllScroll -\n  The cursor indicates that something can be scrolled in any direction.\n\nAuto -\n  The browser sets a cursor.\n\nCell -\n  The cursor indicates that a cell (or set of cells) may be selected.\n\nContextMenu -\n  The cursor indicates that a context-menu is available.\n\nColResize -\n  The cursor indicates that the column can be resized horizontally.\n\nCopy -\n  The cursor indicates something is to be copied.\n\nCrosshair -\n  The cursor render as a crosshair.\n\nDefault -\n  The default cursor.\n\nEResize -\n  The cursor indicates that an edge of a box is to be moved right (east).\n\nEwResize -\n  Indicates a bidirectional resize cursor.\n\nGrab -\n  The cursor indicates that something can be grabbed.\n\nGrabbing -\n  The cursor indicates that something can be grabbed.\n\nHelp -\n  The cursor indicates that help is available.\n\nMove -\n  The cursor indicates something is to be moved.\n\nNResize -\n  The cursor indicates that an edge of a box is to be moved up (north).\n\nNeResize -\n  The cursor indicates that an edge of a box is to be moved up\n  and right (north/east).\n\nNeswResize -\n  Indicates a bidirectional resize cursor.\n\nNsResize -\n  Indicates a bidirectional resize cursor.\n\nNwResize -\n  The cursor indicates that an edge of a box is to be moved up\n  and left (north/west).\n\nNwseResize -\n  Indicates a bidirectional resize cursor.\n\nNoDrop -\n  The cursor indicates that the dragged item cannot be dropped here.\n\nNone -\n  No cursor is rendered for the element.\n\nNotAllowed -\n  The cursor indicates that the requested action will not be executed.\n\nPointer -\n  The cursor is a pointer and indicates a link.\n\nProgress -\n  The cursor indicates that the program is busy (in progress).\n\nRowResize -\n  The cursor indicates that the row can be resized vertically.\n\nSResize -\n  The cursor indicates that an edge of a box is to be moved down (south).\n\nSeResize -\n  The cursor indicates that an edge of a box is to be moved down\n  and right (south/east).\n\nSwResize -\n  The cursor indicates that an edge of a box is to be moved down\n  and left (south/west).\n\nText -\n  The cursor indicates text that may be selected.\n\nUrl String -\n  A comma separated list of URLs to custom cursors.\n  Note: Always specify a generic cursor at the end of the list,\n  in case none of the URL-defined cursors can be used.\n\nVerticalText -\n  The cursor indicates vertical-text that may be selected.\n\nWResize -\n  The cursor indicates that an edge of a box is to be moved left (west).\n\nWait -\n  The cursor indicates that the program is busy.\n\nZoomIn -\n  The cursor indicates that something can be zoomed in.\n\nZoomOut -\n  The cursor indicates that something can be zoomed out.\n",
            "args": [],
            "cases": [
              [
                "Alias",
                []
              ],
              [
                "AllScroll",
                []
              ],
              [
                "Auto",
                []
              ],
              [
                "Cell",
                []
              ],
              [
                "ContextMenu",
                []
              ],
              [
                "ColResize",
                []
              ],
              [
                "Copy",
                []
              ],
              [
                "Crosshair",
                []
              ],
              [
                "Default",
                []
              ],
              [
                "EResize",
                []
              ],
              [
                "EwResize",
                []
              ],
              [
                "Grab",
                []
              ],
              [
                "Grabbing",
                []
              ],
              [
                "Help",
                []
              ],
              [
                "Move",
                []
              ],
              [
                "NResize",
                []
              ],
              [
                "NeResize",
                []
              ],
              [
                "NeswResize",
                []
              ],
              [
                "NsResize",
                []
              ],
              [
                "NwResize",
                []
              ],
              [
                "NwseResize",
                []
              ],
              [
                "NoDrop",
                []
              ],
              [
                "None",
                []
              ],
              [
                "NotAllowed",
                []
              ],
              [
                "Pointer",
                []
              ],
              [
                "Progress",
                []
              ],
              [
                "RowResize",
                []
              ],
              [
                "SResize",
                []
              ],
              [
                "SeResize",
                []
              ],
              [
                "SwResize",
                []
              ],
              [
                "Text",
                []
              ],
              [
                "Url",
                [
                  "String"
                ]
              ],
              [
                "VerticalText",
                []
              ],
              [
                "WResize",
                []
              ],
              [
                "Wait",
                []
              ],
              [
                "ZoomIn",
                []
              ],
              [
                "ZoomOut",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "cursor",
            "comment": " Set the type of cursor to be displayed.\n\n    import Css.Cursor as Cursor exposing (cursor)\n\n    -- [ (\"cursor\", \"crosshair\") ]\n    cursor Cursor.CrossHair []\n",
            "type": "Css.Cursor.Cursor -> Css.Styles -> Css.Styles"
          },
          {
            "name": "string",
            "comment": " Convert a cursor type to string form so it works with css.\n\n    import Css.Cursor as Cursor\n\n    Cursor.string Cursor.Cell -- \"cell\"\n",
            "type": "Css.Cursor.Cursor -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Dimension",
        "comment": " Set the different dimensions an element can have.\nYou can set the height, maxHeight, maxWidth, minHeight, minWidth, and width.\n\n#Height\n@docs height, maxHeight, minHeight\n\n#Width\n@docs width, maxWidth, minWidth\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "height",
            "comment": " Set the height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"height\", \"100px\") ]\n    Dimension.height 100 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "maxHeight",
            "comment": " Set the max height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"max-height\", \"50px\") ]\n    Dimension.maxHeight 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "maxWidth",
            "comment": " Set the max width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"max-width\", \"50px\") ]\n    Dimension.maxWidth 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "minHeight",
            "comment": " Set the min height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"min-height\", \"50px\") ]\n    Dimension.minHeight 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "minWidth",
            "comment": " Set the min width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"min-width\", \"50px\") ]\n    Dimension.minWidth 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "width",
            "comment": " Set the width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"width\", \"50px\") ]\n    Dimension.width 50 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Display",
        "comment": " Set how an element is displayed, and whether it is hidden or visible.\n\n#Definition\n@docs Display\n\n#String\n@docs string\n\n#Function\n@docs display\n",
        "aliases": [],
        "types": [
          {
            "name": "Display",
            "comment": " Represent the display types an element can have.\n\nInline -\n  Displays an element as an inline element (like <span>).\n\nBlock -\n  Displays an element as a block element (like <p>).\n\nFlex -\n  Displays an element as an block-level flex container.\n\nInlineBlock -\n  Displays an element as an inline-level block container.\n  The inside of this block is formatted as block-level box,\n  and the element itself is formatted as an inline-level box\n\nInlineFlex -\n  Displays an element as an inline-level flex container.\n\nInlineTable -\n  The element is displayed as an inline-level table.\n\nListItem -\n  Let the element behave like a <li> element.\n\nRunIn -\n  Displays an element as either block or inline, depending on context.\n\nTable -\n  Let the element behave like a <table> element.\n\nTableCaption -\n  Let the element behave like a <caption> element.\n\nTableColumnGroup -\n  Let the element behave like a <colgroup> element.\n\nTableHeaderGroup -\n  Let the element behave like a <thead> element.\n\nTableFooterGroup -\n  Let the element behave like a <tfoot> element.\n\nTableRowGroup -\n  Let the element behave like a <tbody> element.\n\nTableCell -\n  Let the element behave like a <td> element.\n\nTableColumn -\n  Let the element behave like a <col> element.\n\nTableRow -\n  Let the element behave like a <tr> element.\n\nNone -\n  The element will not be displayed at all (has no effect on layout).\n",
            "args": [],
            "cases": [
              [
                "Inline",
                []
              ],
              [
                "Block",
                []
              ],
              [
                "Flex",
                []
              ],
              [
                "InlineBlock",
                []
              ],
              [
                "InlineFlex",
                []
              ],
              [
                "InlineTable",
                []
              ],
              [
                "ListItem",
                []
              ],
              [
                "RunIn",
                []
              ],
              [
                "Table",
                []
              ],
              [
                "TableCaption",
                []
              ],
              [
                "TableColumnGroup",
                []
              ],
              [
                "TableHeaderGroup",
                []
              ],
              [
                "TableFooterGroup",
                []
              ],
              [
                "TableRowGroup",
                []
              ],
              [
                "TableCell",
                []
              ],
              [
                "TableColumn",
                []
              ],
              [
                "TableRow",
                []
              ],
              [
                "None",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "display",
            "comment": " Sets the display type of an element\n\n    import Css.Display as Display exposing (display)\n\n    -- [ (\"display\", \"flex\") ]\n    display Display.Flex []\n",
            "type": "Css.Display.Display -> Css.Styles -> Css.Styles"
          },
          {
            "name": "string",
            "comment": " Convert a display type to string form so it works with css.\n\n    import Css.Display as Display\n\n    Display.string Display.Inline -- \"inline\"\n",
            "type": "Css.Display.Display -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Flex",
        "comment": " Set the layout of your elements using the flex layout system.\n\n#Definitions\n@docs Direction, Wrap, JustifyContent, AlignItem, AlignContent\n\n#Strings\n@docs directionString, wrapString, justifyContentString, alignItemString, alignContentString\n\n#Direction and Wrap\n@docs direction, wrap, flow\n\n#Alignment\n@docs justifyContent, alignItems, alignContent\n\n#Child Properties\n@docs order, grow, shrink, basis, alignSelf\n",
        "aliases": [],
        "types": [
          {
            "name": "AlignContent",
            "comment": " Represent how to align the flex container's lines within when\nthere is extra space in the cross axis.\n\nACStart -\n  Lines packed to the start of the container.\n\nACEnd -\n  Lines packed to the end of the container.\n\nACCenter -\n  Lines packed to the center of the container.\n\nACStretch -\n  Lines stretch to take up the remaining space.\n\nACBetween -\n  Lines evenly distributed; the first line is at the start of the\n  container while the last one is at the end.\n\nACAround -\n  Lines evenly distributed with equal space around each line.\n",
            "args": [],
            "cases": [
              [
                "ACStart",
                []
              ],
              [
                "ACEnd",
                []
              ],
              [
                "ACCenter",
                []
              ],
              [
                "ACStretch",
                []
              ],
              [
                "ACBetween",
                []
              ],
              [
                "ACAround",
                []
              ]
            ]
          },
          {
            "name": "AlignItem",
            "comment": " Represent how the flex item is laid out along the\ncross axis on the current line.\n\nAIStart -\n  Cross start margin edge of the items is placed on the cross start line.\n\nAIEnd -\n  Cross end margin edge of the items is placed on the cross end line.\n\nAICenter -\n  Items are centered in the cross axis.\n\nAIStretch -\n  Stretch to fill the container (still respect min and max width).\n\nAIBaseline -\n  Items are aligned such as their baselines align.\n",
            "args": [],
            "cases": [
              [
                "AIStart",
                []
              ],
              [
                "AIEnd",
                []
              ],
              [
                "AICenter",
                []
              ],
              [
                "AIStretch",
                []
              ],
              [
                "AIBaseline",
                []
              ]
            ]
          },
          {
            "name": "Direction",
            "comment": " Represent the main-axis, thus defining the direction\nflex items are placed in the flex container.\n\nRow -\n  Left to right in ltr; right to left in rtl.\n\nRowReverse -\n  Right to left in ltr; left to right in rtl.\n\nColumn -\n  Same as row but top to bottom.\n\nColumnReverse -\n  Same as row-reverse but bottom to top.\n",
            "args": [],
            "cases": [
              [
                "Row",
                []
              ],
              [
                "RowReverse",
                []
              ],
              [
                "Column",
                []
              ],
              [
                "ColumnReverse",
                []
              ]
            ]
          },
          {
            "name": "JustifyContent",
            "comment": " Represent the alignment along the main axis.\n\nJCStart -\n  Items are packed toward the start line.\n\nJCEnd -\n  Items are packed toward the end line.\n\nJCCenter -\n  Items are centered along the line.\n\nJCBetween -\n  Items are evenly distributed in the line;\n  first item is on the start line, last item on the end line.\n\nJCAround -\n  Items are evenly distributed in the line with\n  equal space around them.\n",
            "args": [],
            "cases": [
              [
                "JCStart",
                []
              ],
              [
                "JCEnd",
                []
              ],
              [
                "JCCenter",
                []
              ],
              [
                "JCBetween",
                []
              ],
              [
                "JCAround",
                []
              ]
            ]
          },
          {
            "name": "Wrap",
            "comment": " Represent the wrap behavior of flex items.\n\nNoWrap -\n  Single line / left to right in ltr; right to left in rtl.\n\nWrap -\n  Multi-line / left to right in ltr; right to left in rtl.\n\nWrapReverse -\n  Multi-line / right to left in ltr; left to right in rtl.\n",
            "args": [],
            "cases": [
              [
                "NoWrap",
                []
              ],
              [
                "Wrap",
                []
              ],
              [
                "WrapReverse",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "alignContent",
            "comment": " else if Set how to align the flex container's lines within when\nthere is extra space in the cross axis.\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-content\", \"flex-start\") ]\n    Flex.alignContent Flex.ACStart []\n",
            "type": "Css.Flex.AlignContent -> Css.Styles -> Css.Styles"
          },
          {
            "name": "alignContentString",
            "comment": " Convert a align content type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.alignContentString Flex.ACStart -- \"flex-start\"\n",
            "type": "Css.Flex.AlignContent -> String"
          },
          {
            "name": "alignItemString",
            "comment": " Convert a align item type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.alignItemString Flex.AIStart -- \"flex-start\"\n",
            "type": "Css.Flex.AlignItem -> String"
          },
          {
            "name": "alignItems",
            "comment": " else if Set how the flex items are laid out along the\ncross axis on the current line. Think of it as the justifyContent version\nfor the cross axis (perpendicular to the main axis).\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-items\", \"flex-start\") ]\n    Flex.alignItems Flex.AIStart []\n",
            "type": "Css.Flex.AlignItem -> Css.Styles -> Css.Styles"
          },
          {
            "name": "alignSelf",
            "comment": " else if Set the default alignment (or the one specified by align-items)\nto be overridden for individual flex items.\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-self\", \"flex-start\") ]\n    Flex.alignSelf Flex.AIStart []\n",
            "type": "Css.Flex.AlignItem -> Css.Styles -> Css.Styles"
          },
          {
            "name": "basis",
            "comment": " else if Set the default size of an element before the remaining space is distributed.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-basis\", \"1\") ]\n    Flex.basis 1 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "direction",
            "comment": " Set the main-axis, thus defining the direction flex items\nare placed in the flex container.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-direction\", \"row\") ]\n    Flex.direction Flex.Row []\n",
            "type": "Css.Flex.Direction -> Css.Styles -> Css.Styles"
          },
          {
            "name": "directionString",
            "comment": " Convert a direction type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.directionString Flex.Row -- \"row\"\n",
            "type": "Css.Flex.Direction -> String"
          },
          {
            "name": "flow",
            "comment": " Set the direction and the wrap together.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-direction\", \"row\")\n       , (\"flex-wrap\", \"nowrap\")\n       ]\n    Flex.flow Flex.Row Flex.NoWrap []\n",
            "type": "Css.Flex.Direction -> Css.Flex.Wrap -> Css.Styles -> Css.Styles"
          },
          {
            "name": "grow",
            "comment": " else if Set the ability for a flex item to grow if necessary.\nIt accepts a unitless value that serves as a proportion.\nIt dictates what amount of the available space inside the\nflex container the item should take up. Negative numbers\nare invalid.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-grow\", \"1\") ]\n    Flex.grow 1 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "justifyContent",
            "comment": " Set the alignment along the main axis.\n\n    import Css.Flex as Flex\n\n    -- [ (\"justify-content\", \"flex-start\") ]\n    Flex.justifyContent Flex.JCStart []\n",
            "type": "Css.Flex.JustifyContent -> Css.Styles -> Css.Styles"
          },
          {
            "name": "justifyContentString",
            "comment": " Convert a justify content type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.justifyContentString Flex.JCStart -- \"flex-start\"\n",
            "type": "Css.Flex.JustifyContent -> String"
          },
          {
            "name": "order",
            "comment": " else if Set the order in which items appear in the flex container.\n\n    import Css.Flex as Flex\n\n    -- [ (\"order\", \"1\") ]\n    Flex.order 1 []\n",
            "type": "Int -> Css.Styles -> Css.Styles"
          },
          {
            "name": "shrink",
            "comment": " else if Set the ability for a flex item to shrink if necessary.\nNegative numbers are invalid.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-shrink\", \"1\") ]\n    Flex.shrink 1 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "wrap",
            "comment": " Set the wrap behavior of flex items.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-wrap\", \"nowrap\") ]\n    Flex.wrap Flex.NoWrap []\n",
            "type": "Css.Flex.Wrap -> Css.Styles -> Css.Styles"
          },
          {
            "name": "wrapString",
            "comment": " Convert a wrap type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.wrapString Flex.NoWrap -- \"nowrap\"\n",
            "type": "Css.Flex.Wrap -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Float",
        "comment": " Float can be used to push elements left or right,\nallowing other elements to wrap around it.\n\n#Definitions\n@docs Clear, FloatType\n\n#Strings\n@docs clearString, floatString\n\n#Functions\n@docs clear, float\n",
        "aliases": [],
        "types": [
          {
            "name": "Clear",
            "comment": " Represent the sides of an element where\nfloating elements are not allowed to float.\n\nClearLeft -\n  No floating elements allowed on the left side.\n\nClearRight -\n  No floating elements allowed on the right side.\n\nClearBoth -\n  No floating elements allowed on either the left or right side.\n\nClearNone -\n  Allows floating elements on both sides.\n",
            "args": [],
            "cases": [
              [
                "ClearLeft",
                []
              ],
              [
                "ClearRight",
                []
              ],
              [
                "ClearBoth",
                []
              ],
              [
                "ClearNone",
                []
              ]
            ]
          },
          {
            "name": "FloatType",
            "comment": " Represent whether or not an element should float.\n\nLeft -\n  The element floats to the left.\n\nRight -\n  The element floats to the right.\n\nNone -\n  The element is not floated, and will be displayed\n  just where it occurs in the text.\n",
            "args": [],
            "cases": [
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "None",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "clear",
            "comment": " Set the sides of an element where\nfloating elements are not allowed to float.\n\n    import Css.Float as CssFloat\n\n    -- [ (\"clear\", \"left\") ]\n    CssFloat.clear CssFloat.ClearLeft []\n",
            "type": "Css.Float.Clear -> Css.Styles -> Css.Styles"
          },
          {
            "name": "clearString",
            "comment": " Convert a clear type to string form so it works in css.\n\n    import Css.Float as CssFloat\n\n    CssFloat.clearString CssFloat.ClearBoth -- \"both\"\n",
            "type": "Css.Float.Clear -> String"
          },
          {
            "name": "float",
            "comment": " Set whether or not an element should float.\n\n    import Css.Float as CssFloat exposing (float)\n\n    -- [ (\"float\", \"left\") ]\n    float CssFloat.Left []\n",
            "type": "Css.Float.FloatType -> Css.Styles -> Css.Styles"
          },
          {
            "name": "floatString",
            "comment": " Convert a float type to string form so it works in css.\n\n    import Css.Float as CssFloat\n\n    CssFloat.floatString CssFloat.Left -- \"left\"\n",
            "type": "Css.Float.FloatType -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Font",
        "comment": " Font properties define the font family, boldness, size,\nand the style of a text.\n\nSerif -\n  Serif fonts have small lines at the ends on some characters.\n\nSans-Serif -\n  \"Sans\" means without - these fonts do not have the lines at\n  the ends of characters.\n\nMonospace -\n  All monospace characters have the same width.\n\n#Definition\n@docs Style, Variant\n\n#Strings\n@docs styleString, variantString\n\n#Functions\n@docs family, size, style, variant, weight\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Represent the style of the font.\n\nNormalStyle -\n  The text is shown normally.\n\nItalic -\n  The text is shown in italics.\n\nOblique -\n  The text is \"leaning\" (oblique is very similar to\n  italic, but less supported).\n",
            "args": [],
            "cases": [
              [
                "NormalStyle",
                []
              ],
              [
                "Italic",
                []
              ],
              [
                "Oblique",
                []
              ]
            ]
          },
          {
            "name": "Variant",
            "comment": " Represent whether the font is small caps or normal.\n\nNormal -\n  The browser displays a normal font.\n\nSmallCaps -\n  The browser displays a small-caps font.\n",
            "args": [],
            "cases": [
              [
                "NormalVariant",
                []
              ],
              [
                "SmallCaps",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "family",
            "comment": " Set the font family for text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-family\", \"\\\"Times New Roman\\\", Georgia, Serif\") ]\n    Font.family \"\\\"Times New Roman\\\", Georgia, Serif\" []\n",
            "type": "String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "size",
            "comment": " Set the font size of text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-size\", \"24px\") ]\n    Font.size 24 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the font style for text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-style\", \"italic\") ]\n    Font.style Font.Italic []\n",
            "type": "Css.Font.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "styleString",
            "comment": " Convert a style type to string form so it works in css.\n\n    import Css.Font as Font\n\n    Font.styleString Font.Italic -- \"italic\"\n",
            "type": "Css.Font.Style -> String"
          },
          {
            "name": "variant",
            "comment": " Set whether or not a text should be displayed in a small-caps font.\n\n    import Css.Font as Font\n\n    -- [ (\"font-variant\", \"small-caps\") ]\n    Font.variant Font.SmallCaps []\n",
            "type": "Css.Font.Variant -> Css.Styles -> Css.Styles"
          },
          {
            "name": "variantString",
            "comment": " Convert a variant type to string form so it works in css.\n\n    import Css.Font as Font\n\n    Font.variantString Font.SmallCaps -- \"small-caps\"\n",
            "type": "Css.Font.Variant -> String"
          },
          {
            "name": "weight",
            "comment": " Set the weight of the font. (Only values 1-9 have any significance)\n\n    import Css.Font as Font\n\n    -- [ (\"font-weight\", \"900\") ]\n    Font.weight 9 []\n",
            "type": "Int -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Gradient",
        "comment": " Gradients let you display smooth transitions between\ntwo or more specified colors.\n\n#Definitions\n@docs linear, radial\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "linear",
            "comment": " To create a linear gradient you must define at least two color stops.\nColor stops are the colors you want to render smooth transitions among.\nYou must also set the angle along with the gradient effect.\n\n    import Css.Gradient as Gradient\n\n    -- [ (\"background\", \"linear-gradient(90deg, rgba(255, 0, 0, 1), rgba(0, 255, 0, 1))\") ]\n    Gradient.linear 90 [ rgba 255 0 0 1, rgba 0 255 0 1 ] []\n",
            "type": "number -> List Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "radial",
            "comment": " A radial gradient is defined by its center. To create a radial gradient\nyou must also define at least two color stops.\n\n    import Css.Gradient as Gradient\n\n    -- [ (\"background\", \"radial-gradient(rgba(255, 0, 0, 1), rgba(0, 255, 0, 1))\") ]\n    Gradient.radial [ rgba 255 0 0 1, rgba 0 255 0 1 ] []\n",
            "type": "List Color.Color -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.ListStyle",
        "comment": " ListStyle allows you to set different list item markers including images.\n\n#Definitions\n@docs Position, BulletType\n\n#String\n@docs positionString, bulletTypeString\n\n#Functions\n@docs image, position, bulletType\n",
        "aliases": [],
        "types": [
          {
            "name": "BulletType",
            "comment": " Represent the bullet type of list item marker in a list.\n\nDisc -\n  The marker is a filled circle.\n\nArmenian -\n  The marker is traditional Armenian numbering.\n\nCircle -\n  The marker is a circle.\n\nCjkIdeographic -\n  The marker is plain ideographic numbers.\n\nDecimal -\n  The marker is a number.\n\nDecimalLeadingZero -\n  The marker is a number with leading zeros\n  (01, 02, 03, etc.)\n\nGeorgian -\n  The marker is traditional Georgian numbering.\n\nHebrew -\n  The marker is traditional Hebrew numbering.\n\nHiragana -\n  The marker is traditional Hiragana numbering.\n\nHiraganaIroha -\n  The marker is traditional Hiragana iroha numbering.\n\nKatakana -\n  The marker is traditional Katakana numbering.\n\nKatakanaIroha -\n  The marker is traditional Katakana iroha numbering.\n\nLowerAlpha -\n  The marker is lower-alpha (a, b, c, d, e, etc.)\n\nLowerGreek -\n  The marker is lower-greek.\n\nLowerLatin -\n  The marker is lower-latin (a, b, c, d, e, etc.)\n\nLowerRoman -\n  The marker is lower-roman (i, ii, iii, iv, v, etc.)\n\nNone -\n  No marker is shown.\n\nSquare -\n  The marker is a square.\n\nUpperAlpha -\n  The marker is upper-alpha (A, B, C, D, E, etc.)\n\nUpperLatin -\n  The marker is upper-latin (A, B, C, D, E, etc.)\n\nUpperRoman -\n  The marker is upper-roman (I, II, III, IV, V, etc.)\n",
            "args": [],
            "cases": [
              [
                "Disc",
                []
              ],
              [
                "Armenian",
                []
              ],
              [
                "Circle",
                []
              ],
              [
                "CjkIdeographic",
                []
              ],
              [
                "Decimal",
                []
              ],
              [
                "DecimalLeadingZero",
                []
              ],
              [
                "Georgian",
                []
              ],
              [
                "Hebrew",
                []
              ],
              [
                "Hiragana",
                []
              ],
              [
                "HiraganaIroha",
                []
              ],
              [
                "Katakana",
                []
              ],
              [
                "KatakanaIroha",
                []
              ],
              [
                "LowerAlpha",
                []
              ],
              [
                "LowerGreek",
                []
              ],
              [
                "LowerLatin",
                []
              ],
              [
                "LowerRoman",
                []
              ],
              [
                "None",
                []
              ],
              [
                "Square",
                []
              ],
              [
                "UpperAlpha",
                []
              ],
              [
                "UpperLatin",
                []
              ],
              [
                "UpperRoman",
                []
              ]
            ]
          },
          {
            "name": "Position",
            "comment": " Represent if the list item markers should appear inside\nor outside the content flow.\n\nInside -\n  Indents the marker and the text.  The bullets appear inside the content flow.\n\nOutside -\n  Keeps the marker to the left of the text.  The bullets appear outside\n  the content flow.\n",
            "args": [],
            "cases": [
              [
                "Inside",
                []
              ],
              [
                "Outside",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "bulletType",
            "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-type\", \"katakana\") ]\n    ListStyle.bulletType ListStyle.Katakana []\n",
            "type": "Css.ListStyle.BulletType -> Css.Styles -> Css.Styles"
          },
          {
            "name": "bulletTypeString",
            "comment": " Convert a bullet type to string form so it works in css.\n\n    import Css.ListStyle as ListStyle\n\n    ListStyle.typeString ListStyle.Disc -- \"disc\"\n",
            "type": "Css.ListStyle.BulletType -> String"
          },
          {
            "name": "image",
            "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-image\", \"url(\\\"smiley.gif\\\")\") ]\n    ListStyle.image \"smiley.gif\" []\n",
            "type": "String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "position",
            "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-position\", \"inside\") ]\n    ListStyle.position ListStyle.Inside []\n",
            "type": "Css.ListStyle.Position -> Css.Styles -> Css.Styles"
          },
          {
            "name": "positionString",
            "comment": " Convert a position type to string form so it works in css.\n\n    import Css.ListStyle as ListStyle\n\n    ListStye.positionString ListStyle.Inside -- \"inside\"\n",
            "type": "Css.ListStyle.Position -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Margin",
        "comment": " Margins define the space around elements.\n\n#Functions\n@docs bottom, left, right, top, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Set all the margins of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin\", \"10px 10px 5px 8px\")]\n    Margin.top 10 10 5 8 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "bottom",
            "comment": " Set the bottom margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-bottom\", \"10px\")]\n    Margin.bottom 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "left",
            "comment": " Set the left margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-left\", \"10px\")]\n    Margin.left 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "right",
            "comment": " Set the right margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-right\", \"10px\")]\n    Margin.right 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "top",
            "comment": " Set the top margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-top\", \"10px\")]\n    Margin.top 10 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Outline",
        "comment": " An outline is a line that is drawn around elements (outside the borders)\nto make the element \"stand out\".\n\n#Definition\n@docs Style\n\n#String\n@docs styleString\n\n#Funcitons\n@docs color, style, width, all\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Represent the style of the outline\n\nNone -\n  Specifies no outline.\n\nHidden -\n  Specifies a hidden outline.\n\nDotted -\n  Specifies a dotted outline.\n\nDashed -\n  Specifies a dashed outline.\n\nSolid -\n  Specifies a solid outline.\n\nDouble -\n  Specifies a double outliner.\n\nGroove -\n  Specifies a 3D grooved outline.\n  The effect depends on the outline-color value.\n\nRidge -\n  Specifies a 3D ridged outline.\n  The effect depends on the outline-color value.\n\nInset -\n  Specifies a 3D inset outline.\n  The effect depends on the outline-color value.\n\nOutset -\n  Specifies a 3D outset outline.\n  The effect depends on the outline-color value.\n",
            "args": [],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Hidden",
                []
              ],
              [
                "Dotted",
                []
              ],
              [
                "Dashed",
                []
              ],
              [
                "Solid",
                []
              ],
              [
                "Double",
                []
              ],
              [
                "Groove",
                []
              ],
              [
                "Ridge",
                []
              ],
              [
                "Inset",
                []
              ],
              [
                "Outset",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " Set all of the outline properties in one function\n\n    import Css.Outline as Outline\n\n    {--\n      [ (\"outline-color\", \"rgba(255, 0, 0, 1)\")\n      , (\"outline-style\", \"dashed\")\n      , (\"outline-width\", \"2px\")\n      ]\n    --}\n    Outline.all (rgba 255 0 0 1) Outline.Dashed 2 []\n",
            "type": "Color.Color -> Css.Outline.Style -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "color",
            "comment": " Set the color of the outline.\n\n    import Color exposing (rgba)\n    import Css.Outline as Outline\n\n    -- [ (\"outline-color\", \"rgba(255, 0, 0, 1)\") ]\n    Outline.color (rgba 255 0 0 1) []\n\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "style",
            "comment": " Set the style of the outline.\n\n    import Css.Outline as Outline\n\n    -- [ (\"outline-style\", \"dashed\") ]\n    Outline.style Outline.Dashed []\n",
            "type": "Css.Outline.Style -> Css.Styles -> Css.Styles"
          },
          {
            "name": "styleString",
            "comment": " Convert a style type to string form so it works in css.\n\n    import Css.Outline as Outline\n\n    Outline.styleString Outline.Groove -- \"groove\"\n",
            "type": "Css.Outline.Style -> String"
          },
          {
            "name": "width",
            "comment": " Set the width of the outline.\n\n    import Css.Outline as Outline\n\n    -- [ (\"outline-width\", \"2px\") ]\n    Outline.width 2 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Sheet",
        "comment": " Create a stylesheet from a list of rules which are a list of Styles\n#Get a single name, value pair as string\n@docs createRule\n@docs sheetAsString\n@docs ruleAsString\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "createRule",
            "comment": " Create a name, styles pair ",
            "type": "String -> Css.Styles -> Css.Sheet.Rule"
          },
          {
            "name": "ruleAsString",
            "comment": " Get string representation of a rule ",
            "type": "Css.Sheet.Rule -> String"
          },
          {
            "name": "sheetAsString",
            "comment": " Get string representation of a whole sheet ",
            "type": "Css.Sheet.Sheet -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Text",
        "comment": " Change the way that text is displayed on the screen.\n\n#Definitions\n@docs Direction, Align, Decoration, UnicodeBidi, WhiteSpace\n\n#Strings\n@docs directionString, alignString, decorationString, unicodeBidiString, whiteSpaceString\n\n#Functions\n@docs color, direction, letterSpacing, lineHeight, align, decoration, indent, unicodeBidi, whiteSpace, wordSpacing\n",
        "aliases": [],
        "types": [
          {
            "name": "Align",
            "comment": " Specifies the horizontal alignment of text.\n\nLeft -\n  Aligns the text to the left.\n\nRight -\n  Aligns the text to the right.\n\nCenter -\n  Centers the text.\n\nJustify -\n  Stretches the lines so that each line has equal width\n  (like in newspapers and magazines).\n",
            "args": [],
            "cases": [
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Center",
                []
              ],
              [
                "Justify",
                []
              ]
            ]
          },
          {
            "name": "Decoration",
            "comment": " Represent the decoration added to text.\n\nNoDecoration -\n  Defines a normal text.\n\nUnderline -\n  Defines a line below the text.\n\nOverline -\n  Defines a line above the text.\n\nLineThrough -\n  Defines a line through the text.\n",
            "args": [],
            "cases": [
              [
                "NoDecoration",
                []
              ],
              [
                "Underline",
                []
              ],
              [
                "Overline",
                []
              ],
              [
                "LineThrough",
                []
              ]
            ]
          },
          {
            "name": "Direction",
            "comment": " Represent the text direction/writing direction.\n\nLtr -\n  The writing direction is left-to-right.\n\nRtl -\n  The writing direction is right-to-left.\n",
            "args": [],
            "cases": [
              [
                "Ltr",
                []
              ],
              [
                "Rtl",
                []
              ]
            ]
          },
          {
            "name": "UnicodeBidi",
            "comment": " The unicode-bidi property is used together with the direction property to\nset or return whether the text should be overridden to support multiple\nlanguages in the same document.\n\nNormalUnicodeBidi -\n  - Does not use an additional level of embedding.\n\nEmbed -\n  Creates an additional level of embedding.\n\nBidiOverride -\n  Creates an additional level of embedding. Reordering depends on the direction\n  property.\n",
            "args": [],
            "cases": [
              [
                "NormalUnicodeBidi",
                []
              ],
              [
                "Embed",
                []
              ],
              [
                "BidiOverride",
                []
              ]
            ]
          },
          {
            "name": "WhiteSpace",
            "comment": " Represent how white space inside an element is handled.\n\nNormalWhiteSpace -\n  Sequences of whitespace will collapse into a single whitespace. Text will\n  wrap when necessary.\n\nNoWrap -\n  Sequences of whitespace will collapse into a single whitespace.  Text will\n  never wrap to the next line. The text continues on the same line until\n  a <br> tag is encountered.\n\nPre -\n  Whitespace is preserved by the browser. Text will only wrap on line breaks.\n  Acts like the <pre> tag in HTML.\n\nPreLine -\n  Sequences of whitespace will collapse into a single whitespace.\n  Text will wrap when necessary, and on line breaks.\n\nPreWrap -\n  Whitespace is preserved by the browser. Text will wrap when necessary,\n  and on line breaks.\n",
            "args": [],
            "cases": [
              [
                "NormalWhiteSpace",
                []
              ],
              [
                "NoWrap",
                []
              ],
              [
                "Pre",
                []
              ],
              [
                "PreLine",
                []
              ],
              [
                "PreWrap",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "align",
            "comment": " Set the horizontal alignment of text.\n\n    import Css.Text as Text\n\n    -- [ (\"text-align\", \"left\") ]\n    Text.align Text.Left []\n",
            "type": "Css.Text.Align -> Css.Styles -> Css.Styles"
          },
          {
            "name": "alignString",
            "comment": " Convert an align type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.alignString Text.Left -- \"left\"\n",
            "type": "Css.Text.Align -> String"
          },
          {
            "name": "color",
            "comment": " Set the color of text.\n\n    import Css.Text as Text\n\n    -- [ (\"color\", \"rgba(255, 0, 0, 1)\") ]\n    Text.color (rgba 255 0 0 1) []\n",
            "type": "Color.Color -> Css.Styles -> Css.Styles"
          },
          {
            "name": "decoration",
            "comment": " Set the decoration added to text.\n\n    import Css.Text as Text\n\n    -- [ (\"text-decoration\", \"underline\") ]\n    Text.decoration Text.Underline []\n",
            "type": "Css.Text.Decoration -> Css.Styles -> Css.Styles"
          },
          {
            "name": "decorationString",
            "comment": " Convert an decoration type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.decorationString Text.Underline -- \"underline\"\n",
            "type": "Css.Text.Decoration -> String"
          },
          {
            "name": "direction",
            "comment": " Set the text direction/writing direction.\n\n    import Css.Text as Text\n\n    -- [ (\"direction\", \"ltr\") ]\n    Text.direction Text.Ltr []\n",
            "type": "Css.Text.Direction -> Css.Styles -> Css.Styles"
          },
          {
            "name": "directionString",
            "comment": " Convert a direction type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.directionString Text.Ltr -- \"ltr\"\n",
            "type": "Css.Text.Direction -> String"
          },
          {
            "name": "indent",
            "comment": " Set the indentation of the first line in a text-block.\n\n    import Css.Text as Text\n\n    -- [ (\"text-indent\", \"20px\") ]\n    Text.indent 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "letterSpacing",
            "comment": " Increases or decreases the space between characters in a text.\n\n    import Css.Text as Text\n\n    -- [ (\"letter-spacing\", \"2px\") ]\n    Text.letterSpacing 2 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "lineHeight",
            "comment": " Set the line height.\n\n    import Css.Text as Text\n\n    -- [ (\"line-height\", \"14px\") ]\n    Text.lineHeight 14 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "unicodeBidi",
            "comment": " Used together with the direction property to set or return whether\nthe text should be overridden to support multiple languages\nin the same document.\n\n    import Css.Text as Text\n\n    -- [ (\"unicode-bidi\", \"bidi-override\") ]\n    Text.unicodeBidi Text.BidiOverride []\n",
            "type": "Css.Text.UnicodeBidi -> Css.Styles -> Css.Styles"
          },
          {
            "name": "unicodeBidiString",
            "comment": " Convert an unicode bidi type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.unicodeBidiString Text.Embed -- \"embed\"\n",
            "type": "Css.Text.UnicodeBidi -> String"
          },
          {
            "name": "whiteSpace",
            "comment": " Set how white space inside an element is handled.\n\n    import Css.Text as Text\n\n    -- [ (\"white-space\", \"pre\") ]\n    Text.whiteSpace Text.Pre []\n",
            "type": "Css.Text.WhiteSpace -> Css.Styles -> Css.Styles"
          },
          {
            "name": "whiteSpaceString",
            "comment": " Convert an white space type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.whiteSpaceString Text.Pre -- \"pre\"\n",
            "type": "Css.Text.WhiteSpace -> String"
          },
          {
            "name": "wordSpacing",
            "comment": " Increases or decreases the space between words in a text.\n\n    import Css.Text as Text\n\n    -- [ (\"word-spacing\", \"2px\") ]\n    Text.wordSpacing 2 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Shadow",
        "comment": " With CSS3 you can add shadow to text and to elements.\n\n#Definitions\n@docs Text, Box\n\n#Strings\n@docs textString, listTextString, boxString, listBoxString\n\n#Functions\n@docs text, box\n",
        "aliases": [
          {
            "name": "Box",
            "comment": " Represent a box shadow.\n\nInt -\n  The position of the horizontal shadow.\n  Negative values are allowed.\n\nInt -\n  The position of the vertical shadow.\n  Negative values are allowed.\n\nInt -\n  The blur radius.\n\nInt -\n  The size of shadow. Negative values are allowed.\n\nColor -\n  The color of the shadow.\n\nBool -\n  Changes the shadow from an outer shadow\n  (outset) to an inner shadow.\n",
            "args": [],
            "type": "( Int, Int, Int, Int, Color.Color, Bool )"
          },
          {
            "name": "Text",
            "comment": " Represent a text shadow.\n\nInt -\n  The position of the horizontal shadow.\n  Negative values are allowed.\n\nInt -\n  The position of the vertical shadow.\n  Negative values are allowed.\n\nInt -\n  The blur radius.\n\nColor -\n  The color of the shadow.\n",
            "args": [],
            "type": "( Int, Int, Int, Color.Color )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "box",
            "comment": " Attach a shadow to an element.\n\n    import Css.Shadow as Shadow\n\n    -- [ (\"box-shadow\", \"10px 10px 10px 5px rgba(0, 0, 0, 1)\") ]\n    Shadow.box [ (10, 10, 10, 5, (rgba 0 0 0 1), false ] []\n",
            "type": "List Css.Shadow.Box -> Css.Styles -> Css.Styles"
          },
          {
            "name": "boxString",
            "comment": " Convert a box shadow to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- \"10px 10px 10px 5px rgba(0, 0, 0, 1)\"\n    shadow.boxString (10, 10, 10, 5, (rgba 0 0 0 1), false)\n",
            "type": "Css.Shadow.Box -> String"
          },
          {
            "name": "listBoxString",
            "comment": " Convert a list of box shadows to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- [ ( \"box-shadow\" , \"10px 10px 10px rgba(0, 0, 0, 1)\") ]\n    Shadow.listTextString [ (10, 10, 10, (rgba 0 0 0 1)) ]\n",
            "type": "String -> List Css.Shadow.Box -> String"
          },
          {
            "name": "listTextString",
            "comment": " Convert a list of text shadows to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- [ ( \"text-shadow\" , \"10px 10px 10px rgba(0, 0, 0, 1) ]\n    Shadow.listTextString [ (10, 10, 10, (rgba 0 0 0 1)) ]\n",
            "type": "String -> List Css.Shadow.Text -> String"
          },
          {
            "name": "text",
            "comment": " Set the shadow effect added to text.\n\n    import Css.Shadow as Shadow\n\n    -- [ (\"text-shadow\", \"10px 10px 10px rgba(0, 0, 0, 1)\") ]\n    Shadow.text [ (10, 10, 10, rgba 0 0 0 1) ] []\n",
            "type": "List Css.Shadow.Text -> Css.Styles -> Css.Styles"
          },
          {
            "name": "textString",
            "comment": " Convert a text shadow to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- \"10px 10px 10px rgba(0, 0, 0, 1)\"\n    Shadow.textString (10, 10, 10, (rgba 0 0 0 1))\n",
            "type": "Css.Shadow.Text -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Transform2",
        "comment": " Transforms allow you to translate, rotate, scale, and skew elements.\nA transformation is an effect that lets an element change shape, size,\nand position.\n\n#Functions\n@docs transform2, translate2, rotate2, scale2, skew2, matrix2\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matrix2",
            "comment": " Combines all the 2D transform methods into one.\n\nThe matrix method takes six parameters, containing mathematic functions,\nwhich allow you to rotate, scale, move (translate), and skew elements.\n\nThe default matrix has the following form\n\n1 0 0\n\n1 0 0\n\n0 0 1\n\nThis means that the element has a scale of 1 in the x and y direction,\nas well as no skew and no translation.\n\nThe browser multiplies this by a vector which represents a particular\npoint within the local coordinate space.\n\nx\n\ny\n\n1\n\nIf you look at the parameters that this function takes you may also notice\nthat it doesn't take a rotation. So how do we accomplish this? By placing\nopposite values into the x and y skew you will have a rotation.\n\n1 -0.5 0.5\n\n1   0   0\n\n0   0   1\n\nWe only need to specify the first six parameters as the last three will always\nbe 0 0 1.\n\nscalex skewx skewy\n\nscaley   x     y\n\n  0      0     1\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"matrix(1, 0, 0, 1, 0, 0)\") ]\n    transform2 [ matrix2 1 0 0 1 0 0 ] []\n",
            "type": "number -> number -> number -> number -> number -> number -> String"
          },
          {
            "name": "rotate2",
            "comment": " Rotates the element clockwise or counter-clockwise according\nto the given degree.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"rotate(45deg)\") ]\n    transform2 [ rotate2 45 ] []\n",
            "type": "number -> String"
          },
          {
            "name": "scale2",
            "comment": " Increases or decreases the size of an element (according\nto the parameters given for the width and height).\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"scale(0.5, 0.5)\") ]\n    transform2 [ scale2 0.5 0.5 ] []\n",
            "type": "number -> number -> String"
          },
          {
            "name": "skew2",
            "comment": " Skews an element along the X and Y-axis by the given angles.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"skew(20deg, 20deg)\") ]\n    transform2 [ skew2 20 20 ] []\n",
            "type": "number -> number -> String"
          },
          {
            "name": "transform2",
            "comment": " This function takes a list of transforms and applies them\nto the element.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"translate(100px, 100px) rotate(45deg)\") ]\n    transform2 [ translate2 100 100, rotate2 45 ] []\n",
            "type": "List String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "translate2",
            "comment": " Moves an element from its current position (according to the\nparameters given for the X-axis and the Y-axis).\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"translate(100px, 100px)\") ]\n    transform2 [ translate2 100 100 ] []\n",
            "type": "number -> number -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Padding",
        "comment": " Padding defines the space between the element border and the element content.\n\n#Functions\n@docs bottom, left, right, top, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Set all the padding an element has\n\n    import Css.Padding as Padding\n\n    {-- [ (\"padding-top\", \"10px\")\n        , (\"padding-right\", \"20px\")\n        , (\"padding-bottom\", \"16px\")\n        , (\"padding-left\", \"8px\")]\n    --}\n    Padding.all 10 20 16 8 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "bottom",
            "comment": " Set the bottom padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-bottom\", \"20px\") ]\n    Padding.bottom 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "left",
            "comment": " Set the left padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-left\", \"20px\") ]\n    Padding.left 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "right",
            "comment": " Set the right padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-right\", \"20px\") ]\n    Padding.right 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "top",
            "comment": " Set the top padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-top\", \"20px\") ]\n    Padding.top 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Position",
        "comment": " Positioning allows you to position an element.  It can also place\nand element behind another, and specify what should happen when an\nelement's content is too big.\n\n#Definitions\n@docs Overflow, Position\n\n#Strings\n@docs overflowString, positionString\n\n#Functions\n@docs clip, bottom, left, overflow, position, right, top, zIndex\n",
        "aliases": [],
        "types": [
          {
            "name": "Overflow",
            "comment": " Represent what happens if content overflows an element's box.\n\nAutoOverflow -\n  If overflow clipped, a scroll-bar should be added to see the\n  rest of the content.\n\nHidden -\n  The overflow is clipped, and the rest of the content will be invisible.\n\nScroll -\n  The overflow is clipped, but a scroll-bar is added to see the\n  rest of the content.\n\nVisible -\n  The overflow is not clipped. It renders outside the element's box.\n",
            "args": [],
            "cases": [
              [
                "AutoOverflow",
                []
              ],
              [
                "Hidden",
                []
              ],
              [
                "Scroll",
                []
              ],
              [
                "Visible",
                []
              ]
            ]
          },
          {
            "name": "Position",
            "comment": " Represent the type of positioning for an element.\n\nAbsolute -\n  The element is positioned relative to its first positioned\n  (not static) ancestor element.\n\nFixed -\n  The element is positioned relative to the browser window.\n\nRelative -\n  The element is positioned relative to its normal position,\n  so \"left:20\" adds 20 pixels to the element's LEFT position.\n\nStatic -\n  Elements render in order, as they appear in the document flow.\n",
            "args": [],
            "cases": [
              [
                "Absolute",
                []
              ],
              [
                "Fixed",
                []
              ],
              [
                "Relative",
                []
              ],
              [
                "Static",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "bottom",
            "comment": " Set the bottom margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"bottom\", \"20px\") ]\n    Position.bottom 20 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "clip",
            "comment": " What happens if an image is larger than its containing element?\nThe clip property lets you specify a rectangle to clip an absolutely\npositioned element. The rectangle is specified as four coordinates,\nall from the top-left corner of the element to be clipped.\n\n    import Css.Position as Position\n\n    -- [ (\"clip\", \"rect(0px, 60px, 200px, 0px)\") ]\n    Position.clip 0 60 200 0 []\n",
            "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "left",
            "comment": " Set the left margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"cursor\", \"crosshair\") ]\n    Position.cursor Position.CrossHair []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "overflow",
            "comment": " Set what happens if content overflows an element's box.\n\n    import Css.Position as Position\n\n    -- [ (\"overflow\", \"hidden\") ]\n    Position.overflow Position.Hidden []\n",
            "type": "Css.Position.Overflow -> Css.Styles -> Css.Styles"
          },
          {
            "name": "overflowString",
            "comment": " Convert a overflow type to string form so it works with css.\n\n    import Css.Position as Position\n\n    Position.overflowString Position.Hidden -- \"hidden\"\n",
            "type": "Css.Position.Overflow -> String"
          },
          {
            "name": "position",
            "comment": " Set the type of positioning for an element.\n\n    import Css.Position as Position exposing (position)\n\n    -- [ (\"position\", \"fixed\") ]\n    position Position.Fixed []\n",
            "type": "Css.Position.Position -> Css.Styles -> Css.Styles"
          },
          {
            "name": "positionString",
            "comment": " Convert a position type to string form so it works with css.\n\n    import Css.Position as Position\n\n    Position.positionString Position.Absolute -- \"absolute\"\n",
            "type": "Css.Position.Position -> String"
          },
          {
            "name": "right",
            "comment": " Set the right margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"right\", \"24px\") ]\n    Position.right 24 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "top",
            "comment": " Set the top margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"top\", \"24px\") ]\n    Position.top 24 []\n",
            "type": "number -> Css.Styles -> Css.Styles"
          },
          {
            "name": "zIndex",
            "comment": " Set the stack order of an element.\n\n    import Css.Position as Position\n\n    -- [ (\"z-index\", \"2\") ]\n    Position.zIndex 2 []\n",
            "type": "Int -> Css.Styles -> Css.Styles"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Transform3",
        "comment": " Transforms allow you to translate, rotate, scale, and skew elements.\nA transformation is an effect that lets an element change shape, size,\nand position.\n\n#Functions\n@docs transform3, perspective, translate3, rotate3, scale3\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "perspective",
            "comment": " Defines a perspective view for a 3D transformed element.\n\n  -- [ (\"transform\", \"perspective(800)\") ]\n  transform3 [ perspective 800 ]\n",
            "type": "number -> String"
          },
          {
            "name": "rotate3",
            "comment": " Rotates the element around a specified axis at a given degree.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"rotate3d(1, 1, 1, 45deg)\") ]\n    transform3 [ rotate3 1 1 1 45 ] []\n",
            "type": "number -> number -> number -> number -> String"
          },
          {
            "name": "scale3",
            "comment": " Scale an element along the given axis.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"scale3d(1, 2, 1)\") ]\n    transform3 [ scale3 1 2 1 ] []\n",
            "type": "number -> number -> number -> String"
          },
          {
            "name": "transform3",
            "comment": " This function takes a list of transforms and applies them\nto the element.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"translate3(100px, 100px, 0px) rotate3(1, 1, 1, 45deg)\") ]\n    transform3 [ translate3 100 100 0, rotate1 1 1 1 45 ] []\n",
            "type": "List String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "translate3",
            "comment": " Moves an element from its current position (according to the\nparameters given for the X-axis and the Y-axis).\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"translate3d(100px, 100px, 0px)\") ]\n    transform3 [ translate3 100 100 0 ] []\n",
            "type": "number -> number -> number -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css",
        "comment": " This module provides a few helper functions that make dealing with\ncss in Elm more pleasant and concise.\n\n#Definition\n@docs Styles\n\n#String\n@docs colorString\n\n#Functions\n@docs px, url, setViewport, style\n",
        "aliases": [
          {
            "name": "Styles",
            "comment": " This type alias allows us to be more expressive. ",
            "args": [],
            "type": "List ( String, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "colorString",
            "comment": " Convert a color type to string form so it works with css.\n\n    import Css exposing (colorString)\n\n    colorString (rgba 0 0 0 1) -- \"rgba(0, 0, 0, 1)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "px",
            "comment": " Add a px post fix to the end of any integer.\n\n    import Css exposing (px)\n\n    px 5 -- \"5px\"\n",
            "type": "number -> String"
          },
          {
            "name": "setViewport",
            "comment": " Set the proper width and scaling to allow for responsive design ",
            "type": "Html.Html"
          },
          {
            "name": "style",
            "comment": " Add a css style to a list of styles.\n\n    import Css\n\n    [ (\"cursor\", \"zoom-out\") ]\n    Css.style \"cursor\" \"zoom-out\" []\n",
            "type": "String -> String -> Css.Styles -> Css.Styles"
          },
          {
            "name": "url",
            "comment": " Add a url prefix to a string.\n\n    import Css exposing (url)\n\n    url \"smiley.gif\" -- \"url(\\\"smiley.gif\\\")\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Border.Style",
        "comment": " This library allows you to set the\nstyle of the border.\n\n# Definition\n@docs Style\n\n# String\n@docs string\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Represent the types of styles that can be\napplied to the border.\n\nNone -\n  Default value. Specifies no border.\n\nHidden -\n  The same as \"none\", except in border conflict\n  resolution for table elements.\n\nDotted -\n  Specifies a dotted border.\n\nDashed -\n  Specifies a dashed border.\n\nSolid -\n  Specifies a solid border.\n\nDouble -\n  Specifies a double border.\n\nGroove -\n  Specifies a 3D grooved border.  The effect\n  depends on the border-color value.\n\nRidge -\n  Specifies a 3D ridged border.\n  The effect depends on the border-color value.\n\nInset -\n  Specifies a 3D inset border.\n  The effect depends on the border-color value.\n\nOutset -\n  Specifies a 3D outset border.\n  The effect depends on the border-color value.\n",
            "args": [],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Hidden",
                []
              ],
              [
                "Dotted",
                []
              ],
              [
                "Dashed",
                []
              ],
              [
                "Solid",
                []
              ],
              [
                "Double",
                []
              ],
              [
                "Groove",
                []
              ],
              [
                "Ridge",
                []
              ],
              [
                "Inset",
                []
              ],
              [
                "Outset",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "string",
            "comment": " Convert a style to the string form so it works with css.\n\n    import Css.Style as Style\n\n    Style.string Style.Groove [] -- \"groove\"\n",
            "type": "Css.Border.Style.Style -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "agrafix/elm-bootforms",
    "version": "10.0.0",
    "docs": [
      {
        "name": "Html.Form.Input.Suggest",
        "comment": " This module implements an input that includes input suggestions\n\n# The search index\n@docs SearchIndex, makeSearchIndex\n\n# The input field\n@docs SuggestiveInput, suggestiveTextInput\n",
        "aliases": [
          {
            "name": "SuggestiveInput",
            "comment": " Spec for suggestive input ",
            "args": [
              "e"
            ],
            "type": "Html.Form.Input.FormElement String e () { choices : Html.Form.Input.Suggest.SearchIndex , maxSuggest : Int , minTyped : Int }"
          }
        ],
        "types": [
          {
            "name": "SearchIndex",
            "comment": " An abstract search index ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "makeSearchIndex",
            "comment": " Build a search index for a given list of searchable items ",
            "type": "List String -> Html.Form.Input.Suggest.SearchIndex"
          },
          {
            "name": "suggestiveTextInput",
            "comment": " A suggestive input field. Note that suggestions require at least 3 typed characters ",
            "type": "Html.Form.Input.Suggest.SuggestiveInput e -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Form.Input.Suggest.External",
        "comment": " This module implements an input that includes input suggestions coming from an external source,\nsuch as an HTTP request.\n\n# The input field\n@docs Suggestions, extSuggFormVal, ExtSuggestiveInput, extSuggestiveTextInput\n",
        "aliases": [
          {
            "name": "ExtSuggestiveInput",
            "comment": " Spec for suggestive input with external data source.\n",
            "args": [
              "err",
              "e"
            ],
            "type": "Html.Form.Input.FormElement String e Html.Form.Input.Suggest.External.Suggestions { maxSuggest : Int , minTyped : Int , loadSuggestions : String -> Task.Task err Html.Form.Input.Suggest.External.Suggestions }"
          },
          {
            "name": "Suggestions",
            "comment": " A list of suggestions ",
            "args": [],
            "type": "List String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "extSuggFormVal",
            "comment": " Generate a FormValue for a suggestive input boxes ",
            "type": "String -> Html.Form.Input.FormValueSt e String Html.Form.Input.Suggest.External.Suggestions"
          },
          {
            "name": "extSuggestiveTextInput",
            "comment": " A suggestive input field. Note that suggestions require at least 3 typed characters ",
            "type": "Html.Form.Input.Suggest.External.ExtSuggestiveInput err e -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Form.Input.Date",
        "comment": " This module implements an input that includes a date picker\n\n# The input field\n@docs DatePickerInput, datePickerInput\n\n# Configuration helpers\n@docs displayDayGerman, displayMonthGerman\n",
        "aliases": [
          {
            "name": "DatePickerInput",
            "comment": " Spec for date picker input ",
            "args": [
              "e"
            ],
            "type": "Html.Form.Input.FormElement Date.Date e () { displayMonth : Date.Month -> String , displayDay : Date.Day -> String , defaultDate : Date.Date , encoder : Date.Date -> String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "datePickerInput",
            "comment": " An input field that shows a date picker below ",
            "type": "Html.Form.Input.Date.DatePickerInput e -> Html.Html"
          },
          {
            "name": "displayDayGerman",
            "comment": " Short german week days ",
            "type": "Date.Day -> String"
          },
          {
            "name": "displayMonthGerman",
            "comment": " German month names ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Form.Input",
        "comment": " This module will help generating good looking forms using the twitter bootstrap framework.\nIt also provides automatic conversion of textual input to more useful types\n\n# Form input\n@docs FormValue, FormValueSt, FormValueAction, FormValueActionSt, apply, effect, mappedEffect, noFx, getFormValue, getFormValueDef, validFormValue, stringFormVal, mayStringFormVal, emptyFormVal\n\n# Default input element structure\n@docs Element, FormElement\n\n# Popular form groups\n@docs textInput, passwordInput, intInput, floatInput, dateInput, TimeOfDay, timeInput, checkBox, SelectElement, selectBox, textArea\n\n# Custom input elements\n@docs InputElement, basicInput, basicInputRaw, basicInputRawEff\n\n# Custom form groups\n@docs formGroup\n",
        "aliases": [
          {
            "name": "Element",
            "comment": " All inputs will be defined by this basic structure ",
            "args": [
              "v",
              "e",
              "st"
            ],
            "type": "{ id : String , label : String , helpBlock : Maybe.Maybe String , value : Html.Form.Input.FormValueSt e v st , onValue : Html.Form.Input.FormValueActionSt e v st -> Signal.Message }"
          },
          {
            "name": "FormElement",
            "comment": " An element with a decoder ",
            "args": [
              "v",
              "e",
              "st",
              "a"
            ],
            "type": "{ element : Html.Form.Input.Element v e st , props : a , decoder : String -> Result.Result e v , autoBlur : Bool }"
          },
          {
            "name": "FormValue",
            "comment": " The input string of the user and the parsed value ",
            "args": [
              "e",
              "v"
            ],
            "type": "Html.Form.Input.FormValueSt e v ()"
          },
          {
            "name": "FormValueAction",
            "comment": " An action to be applied to a form value ",
            "args": [
              "e",
              "v"
            ],
            "type": "Html.Form.Input.FormValueActionSt e v ()"
          },
          {
            "name": "FormValueSt",
            "comment": " The input string of the user, the parsed value and internal state of the component ",
            "args": [
              "e",
              "v",
              "st"
            ],
            "type": "{ userInput : String , value : Result.Result e v , focused : Bool , internalState : st }"
          },
          {
            "name": "InputElement",
            "comment": " Spec for an input with a type ",
            "args": [
              "v",
              "e",
              "st"
            ],
            "type": "Html.Form.Input.FormElement v e st { type' : String, extraClasses : List String }"
          },
          {
            "name": "SelectElement",
            "comment": " Spec for selectBox ",
            "args": [
              "v",
              "e"
            ],
            "type": "Html.Form.Input.FormElement v e () { choices : List v , displayChoice : v -> String , choiceValue : v -> String }"
          },
          {
            "name": "TimeOfDay",
            "comment": " Time of day ",
            "args": [],
            "type": "{ hour : Int, minute : Int }"
          }
        ],
        "types": [
          {
            "name": "FormValueActionSt",
            "comment": " An action to be applied to a form value for components with internal state ",
            "args": [
              "e",
              "v",
              "st"
            ],
            "cases": [
              [
                "FormValueActionSt",
                [
                  "{ action : Html.Form.Input.FormValueSt e v st -> Html.Form.Input.FormValueSt e v st , effect : Effects.Effects (Html.Form.Input.FormValueActionSt e v st) }"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "apply",
            "comment": " Apply an action to a form value ",
            "type": "Html.Form.Input.FormValueActionSt e v st -> Html.Form.Input.FormValueSt e v st -> Html.Form.Input.FormValueSt e v st"
          },
          {
            "name": "basicInput",
            "comment": " A simple input ",
            "type": "Html.Form.Input.InputElement v e st -> Html.Html"
          },
          {
            "name": "basicInputRaw",
            "comment": " A simple input not grouped yet ",
            "type": "Html.Form.Input.InputElement v e st -> Html.Html"
          },
          {
            "name": "basicInputRawEff",
            "comment": " A simple input not grouped yet emitting an effect ",
            "type": "(Html.Form.Input.FormValueSt e v st -> Effects.Effects (Html.Form.Input.FormValueActionSt e v st)) -> Html.Form.Input.InputElement v e st -> Html.Html"
          },
          {
            "name": "checkBox",
            "comment": " A simple checkbox input ",
            "type": "Html.Form.Input.Element Bool e st -> Html.Html"
          },
          {
            "name": "dateInput",
            "comment": " A simple date input ",
            "type": "Html.Form.Input.Element Date.Date String () -> Html.Html"
          },
          {
            "name": "effect",
            "comment": " Return all side effects of an action to a form value ",
            "type": "Html.Form.Input.FormValueActionSt e v st -> Effects.Effects (Html.Form.Input.FormValueActionSt e v st)"
          },
          {
            "name": "emptyFormVal",
            "comment": " An empty form value ",
            "type": "Html.Form.Input.FormValueSt String v ()"
          },
          {
            "name": "floatInput",
            "comment": " A simple float input ",
            "type": "Html.Form.Input.Element Float String () -> Html.Html"
          },
          {
            "name": "formGroup",
            "comment": " Build your own input element ",
            "type": "Html.Form.Input.Element v e st -> Html.Html -> Html.Html"
          },
          {
            "name": "getFormValue",
            "comment": " Read the current form value if available ",
            "type": "Html.Form.Input.FormValueSt e t st -> Maybe.Maybe t"
          },
          {
            "name": "getFormValueDef",
            "comment": " Read the current form value or fallback to a default ",
            "type": "t -> Html.Form.Input.FormValueSt e t st -> t"
          },
          {
            "name": "intInput",
            "comment": " A simple int input ",
            "type": "Html.Form.Input.Element Int String () -> Html.Html"
          },
          {
            "name": "mappedEffect",
            "comment": " Return all side effects of an action to a form value and apply a function to wrap them ",
            "type": "(Html.Form.Input.FormValueActionSt e v st -> a) -> Html.Form.Input.FormValueActionSt e v st -> Effects.Effects a"
          },
          {
            "name": "mayStringFormVal",
            "comment": " Generate a FormValueSt for textual input boxes w/o validation ",
            "type": "Maybe.Maybe String -> Html.Form.Input.FormValueSt e String ()"
          },
          {
            "name": "noFx",
            "comment": " An effect free form action ",
            "type": "(Html.Form.Input.FormValueSt e v st -> Html.Form.Input.FormValueSt e v st) -> Html.Form.Input.FormValueActionSt e v st"
          },
          {
            "name": "passwordInput",
            "comment": " A simple password input ",
            "type": "Html.Form.Input.Element String e () -> Html.Html"
          },
          {
            "name": "selectBox",
            "comment": " A simple dropdown ",
            "type": "Html.Form.Input.SelectElement v e -> Html.Html"
          },
          {
            "name": "stringFormVal",
            "comment": " Generate a FormValueSt for textual input boxes w/o validation ",
            "type": "String -> Html.Form.Input.FormValueSt e String ()"
          },
          {
            "name": "textArea",
            "comment": " A textarea ",
            "type": "Html.Form.Input.Element String e () -> Html.Html"
          },
          {
            "name": "textInput",
            "comment": " A simple text input ",
            "type": "Html.Form.Input.Element String e () -> Html.Html"
          },
          {
            "name": "timeInput",
            "comment": " A simple time input ",
            "type": "Html.Form.Input.Element Html.Form.Input.TimeOfDay String () -> Html.Html"
          },
          {
            "name": "validFormValue",
            "comment": " Check if the given FormValueSt contains a valid value ",
            "type": "Html.Form.Input.FormValueSt e t st -> Bool"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "alech/elm-calendarweeks",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Date.CalendarWeeks",
        "comment": " This library deals with calculations regardings calendar weeks, i.e.\nit can tell you which calendar weeks are present in a given year, which\ncalendar week corresponds to a certain date, etc.\n\nCalendar week numbering depends on which calendar system you are using.\nThe three main systems, all of which are supported by this library are ISO-8601,\nthe Islamic system, and the North American system.\n\nISO-8601 is the most common system in Europe and Asia. It defines the first\ncalendar week of a year to be the one containing January 4th. Days of the week\nrange from Monday to Sunday. ISO-8601 defines a format for week and date\nstrings which are also supported by this library.\n\nThe Islamic system defines the first calendar week of a year to be the one\ncontaining January 1st. Its week days range from Saturday to Friday.\n\nSimilarly, the North American system (which besides in the US and Canada is \nused in China, Japan, Israel, South Africa, and most of Latin America) \nalso starts with January 1st but the days of the week range from Sunday to\nSaturday.\n\n# Types, Constructors and Deconstructors\n@docs CWSystem, CalendarWeek, cwFromYearAndWeek, cwYear, cwWeek\n\n# Lists of days and calendar weeks per year\n\nOne use case of this library is to get a combination of dates in a year\nand calendar weeks, or the other way round: calendar weeks in a year\nwith the corresponding dates.\n\n@docs daysInYearWithCalendarWeek, calendarWeeksWithDaysInYear, calendarWeeksInYear\n\n# Determining calendar weeks and corresponding days\n\nAnother use case is that you have a date and want to determine the\ncorresponding calendar week, or the other way round: you have a calendar\nweek and want to determine which days are part of it.\n\n@docs whichCalendarWeek, daysInCalendarWeek, weekDays\n\n# ISO-8601\n\nISO-8601 defines string formats for calendar weeks and dates based\non calendar weeks and the day of the week. This library supports converting\nboth to and from these string formats.\n\n@docs toISO8601WeekString, fromISO8601WeekString, toISO8601WeekDateString, fromISO8601WeekDateString\n",
        "aliases": [],
        "types": [
          {
            "name": "CWSystem",
            "comment": " A data type for the possible calendar week systems for use in this library.\n\nFor their definition, please refer to the Wikipedia page on\nweek numbering (https://en.wikipedia.org/wiki/Week#Week_numbering).\n",
            "args": [],
            "cases": [
              [
                "ISO8601",
                []
              ],
              [
                "Islamic",
                []
              ],
              [
                "NorthAmerican",
                []
              ]
            ]
          },
          {
            "name": "CalendarWeek",
            "comment": " A data type to represent a calendar week, i.e. a year and week number.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "calendarWeeksInYear",
            "comment": " Given a CWSystem and a year, produces a list of tuples of CalendarWeek and\na list of corresponding Dates from that year.\nNote that unlike with calendarWeeksWithDaysInYear, this might mean that some\ndates from this calendar year are not present in the list of dates.\n",
            "type": "Date.CalendarWeeks.CWSystem -> Int -> List ( Date.CalendarWeeks.CalendarWeek, List Date.Date )"
          },
          {
            "name": "calendarWeeksWithDaysInYear",
            "comment": " Given a CWSystem and a year, produce a list of calendar weeks and a\ncorresponding list of days in those calendar weeks. The result contains\nall calendar weeks which contain days from the given year, which might\ninclude calendar weeks (and thus also dates) belonging to the year before\nor after. I.e.,\n\n    Maybe.map (\\(cw, _) -> toISO8601WeekString cw) <|\n        List.head <| calendarWeeksWithDaysInYear ISO8601 2016\n\nevaluates to\n\n    Just \"2015-W53\"\n\nSimilarly,\n\n    Maybe.map (\\(cw, _) -> toISO8601WeekString cw) <|\n        List.Extra.last <| calendarWeeksWithDaysInYear ISO8601 2018\n\nevaluates to\n\n    Just \"2019-W01\"\n",
            "type": "Date.CalendarWeeks.CWSystem -> Int -> List ( Date.CalendarWeeks.CalendarWeek, List Date.Date )"
          },
          {
            "name": "cwFromYearAndWeek",
            "comment": " Given a year and week number, construct a CalendarWeek.\n\n    cwFromYearAndWeek 2016 51\n",
            "type": "Int -> Int -> Date.CalendarWeeks.CalendarWeek"
          },
          {
            "name": "cwWeek",
            "comment": " Given a CalendarWeek, extract the month.\n\n    cwMonth <| cwFromYearAndWeek 2016 51 == 51\n",
            "type": "Date.CalendarWeeks.CalendarWeek -> Int"
          },
          {
            "name": "cwYear",
            "comment": " Given a CalendarWeek, extract the year.\n\n    cwYear <| cwFromYearAndWeek 2016 51 == 2016\n",
            "type": "Date.CalendarWeeks.CalendarWeek -> Int"
          },
          {
            "name": "daysInCalendarWeek",
            "comment": " Given a CWSystem and a CalendarWeek, return a list of dates in that\ncalendar week.\n\n    daysInCalendarWeek ISO8601 (cwFromYearAndWeek 2016 1)\n    |> List.map (\\d -> (Date.month d, Date.day d))\n\nevaluates to\n\n    [(Jan,4),(Jan,5),(Jan,6),(Jan,7),(Jan,8),(Jan,9),(Jan,10)]\n\n\nWhile\n\n    daysInCalendarWeek NorthAmerican (cwFromYearAndWeek 2016 1)\n    |> List.map (\\d -> (Date.month d, Date.day d))\n\nevaluates to\n\n    [(Dec,27),(Dec,28),(Dec,29),(Dec,30),(Dec,31),(Jan,1),(Jan,2)]\n\nAnd\n\n    daysInCalendarWeek Islamic (cwFromYearAndWeek 2016 1)\n    |> List.map (\\d -> (Date.month d, Date.day d))\n\nevaluates to\n\n    [(Dec,26),(Dec,27),(Dec,28),(Dec,29),(Dec,30),(Dec,31),(Jan,1)]\n",
            "type": "Date.CalendarWeeks.CWSystem -> Date.CalendarWeeks.CalendarWeek -> List Date.Date"
          },
          {
            "name": "daysInYearWithCalendarWeek",
            "comment": " Given a CWSystem and a year, produce a list of tuples of\ndate and corresponding CalendarWeek for each day of the year.\n\n    let\n        dateToString d =\n            toString (Date.month d) ++ \" \" ++ toString (Date.day d)\n    in\n       daysInYearWithCalendarWeek ISO8601 2016 |>\n       List.map (\\(d, cw) -> (dateToString d) ++ \": \"\n                          ++ (toISO8601WeekString cw)) |>\n       List.take 5\n\nevaluates to\n\n    [\"Jan 1: 2015-W53\",\"Jan 2: 2015-W53\",\"Jan 3: 2015-W53\",\n    \"Jan 4: 2016-W01\",\"Jan 5: 2016-W01\"]\n",
            "type": "Date.CalendarWeeks.CWSystem -> Int -> List ( Date.Date, Date.CalendarWeeks.CalendarWeek )"
          },
          {
            "name": "fromISO8601WeekDateString",
            "comment": " Given an ISO8601 week date string of format YYYY-Www-d or YYYYWwwd,\nreturn a Just Date if parsing succeeds or Nothing if it fails.\n",
            "type": "String -> Maybe.Maybe Date.Date"
          },
          {
            "name": "fromISO8601WeekString",
            "comment": " Given an ISO8601 week string of format YYYY-Www or YYYYWww,\nreturn a Just CalendarWeek if parsing succeeds or Nothing if it fails.\n",
            "type": "String -> Maybe.Maybe Date.CalendarWeeks.CalendarWeek"
          },
          {
            "name": "toISO8601WeekDateString",
            "comment": " Given a Date, convert it into an ISO8601 week date string of\nformat YYYY-Www-d.\n\n    Maybe.map (toISO8601WeekDateString)\n        (Result.toMaybe <| Date.fromString \"1979/06/26\")\n\nevaluates to\n\n    Just \"1979-W26-2\"\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "toISO8601WeekString",
            "comment": " Given a CalendarWeek, convert it into an ISO8601 week string of\nformat YYYY-Www.\n\n    (toISO8601WeekString <| cwFromYearAndWeek 2016 3) == \"2016-W03\"\n",
            "type": "Date.CalendarWeeks.CalendarWeek -> String"
          },
          {
            "name": "weekDays",
            "comment": " Given a CWSystem, produces the seven weekdays in the order applicable\nfor that calendar week system.\n",
            "type": "Date.CalendarWeeks.CWSystem -> List Date.Day"
          },
          {
            "name": "whichCalendarWeek",
            "comment": " Given a CWSystem and a date, return the CalendarWeek that contains this date.\n    Maybe.map (cwWeek << whichCalendarWeek ISO8601)\n        (Result.toMaybe <| Date.fromString \"2016/03/14\") == Just 11\n    Maybe.map (cwWeek << whichCalendarWeek Islamic d)\n        (Result.toMaybe <| Date.fromString \"2016/03/14\") == Just 12\n",
            "type": "Date.CalendarWeeks.CWSystem -> Date.Date -> Date.CalendarWeeks.CalendarWeek"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "alexeisavca/keyframes.elm",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Keyframes.Easing",
        "comment": "\nEasing functions for keyframes animation.\nStolen from Robert Penner's easing formulas http://gizma.com/easing/\n#Easing\n@docs Easing\n#ease\n@docs ease\n#linear\n@docs linear\n#easeInQuad\n@docs easeInQuad\n#easeOutQuad\n@docs easeOutQuad\n#easeInOutQuad\n@docs easeInOutQuad\n#easeInCubic\n@docs easeInCubic\n#easeOutCubic\n@docs easeOutCubic\n#easeInOutCubic\n@docs easeInOutCubic\n#easeInQuart\n@docs easeInQuart\n#easeOutQuart\n@docs easeOutQuart\n#easeInOutQuart\n@docs easeInOutQuart\n#easeInQuint\n@docs easeInQuint\n#easeOutQuint\n@docs easeOutQuint\n#easeInOutQuint\n@docs easeInOutQuint\n#easeInSine\n@docs easeInSine\n#easeOutSine\n@docs easeOutSine\n#easeInOutSine\n@docs easeInOutSine\n#easeInExpo\n@docs easeInExpo\n#easeOutExpo\n@docs easeOutExpo\n#easeInOutExpo\n@docs easeInOutExpo\n#easeInCirc\n@docs easeInCirc\n#easeOutCirc\n@docs easeOutCirc\n#easeInOutCirc\n@docs easeInOutCirc\n",
        "aliases": [
          {
            "name": "Easing",
            "comment": "\nRepresents an easing function. An easing function takes 5 arguments:\n\ncurrentTime - a float from 0 to 1(inclusive) representing the current progress of the animation\n\ntotalTime - total time of an animation, always 1\n\nprogressRatio - same as currentTime\n\nvalue - the initial value to be eased\n\nchange - the diff between initial value and the value at currentTime\n",
            "args": [],
            "type": "Keyframes.Time -> Keyframes.Time -> Float -> Float -> Float -> Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "ease",
            "comment": "Takes an easing function and an animation and returns the eased animation",
            "type": "Keyframes.Easing.Easing -> Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInCirc",
            "comment": "Ease in circularly",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInCubic",
            "comment": "Ease in cubically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInExpo",
            "comment": "Ease in exponentially",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutCirc",
            "comment": "Ease in and out circularly",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutCubic",
            "comment": "Ease in and out cubically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutExpo",
            "comment": "Ease in and out exponentially",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutQuad",
            "comment": "Ease in and out quadratically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutQuart",
            "comment": "Ease in and out quartically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutQuint",
            "comment": "Ease in and out quintically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInOutSine",
            "comment": "Ease in and out sinusoidally",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInQuad",
            "comment": "Ease in quadratically\n\n    transition \"width\" \"1px\" \"100px\" |> easeInQuad\n    --returns an animation of width from 1px to 100px that is eased in quadratically\n",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInQuart",
            "comment": "Ease in quartically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInQuint",
            "comment": "Ease in quintically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeInSine",
            "comment": "Ease in sinusoidally",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutCirc",
            "comment": "Ease in circularly",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutCubic",
            "comment": "Ease out cubically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutExpo",
            "comment": "Ease out exponentially",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutQuad",
            "comment": "Ease out quadratically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutQuart",
            "comment": "Ease out quartically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutQuint",
            "comment": "Ease out quintically",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "easeOutSine",
            "comment": "Ease out sinusoidally",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "linear",
            "comment": "Linear easing, i.e. no easing. This is in truth an identity function.",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Keyframes",
        "comment": "\nKeyframes is a truly functional animation library.\n\nIt treats animations as functions of time over state,\nallowing for complex yet easy combinations\nof those via higher order functions.\n\nWe define time as range of floats [0, 1], zero being the beginning of the animation and 1\nits end. This way, we can abstract animations from physical time and apply them for any duration.\n\nWe define state as a list of (String, String) tuples, first member being an identifier,\nand second member being its value. For example:\n\n     myStyle = [(\"width\", \"0\"), (\"opacity\", \"0\")]\n     myOtherStyle = [(\"marioX\", \"0\", (\"marioY\", \"0\")]\n\nAnd an animation is just a function that takes time(floats from 0 to 1)\nand for any given value returns a state, thus, by consecutively calling\nan animation with a certain step we can animate virtually anything.\n\n#State\n@docs State\n#Time\n@docs Time\n#Animation\n@docs Animation\n#Timestamp\n@docs Timestamp\n#tween\n@docs tween\n#transition\n@docs transition\n#ensure\n@docs ensure\n#ensureProperty\n@docs ensureProperty\n#reverse\n@docs reverse\n#chain\n@docs chain\n#linger\n@docs linger\n#foreshadow\n@docs foreshadow\n#imposePresence\n@docs imposePresence\n#toAndFrom\n@docs toAndFrom\n#repeat\n@docs repeat\n#merge\n@docs merge\n#play\n@docs play\n#playOnce\n@docs playOnce\n#playInfinitely\n@docs playInfinitely\n",
        "aliases": [
          {
            "name": "Animation",
            "comment": "A function of Time over State",
            "args": [],
            "type": "Keyframes.Time -> Keyframes.State"
          },
          {
            "name": "State",
            "comment": "A list of (String, String) tuples, first member being an identifier,\nand second member being its value. For example:\n\n    myStyle = [(\"width\", \"0\"), (\"opacity\", \"0\")]\n    myOtherStyle = [(\"marioX\", \"0\", (\"marioY\", \"0\")]\n",
            "args": [],
            "type": "List ( String, String )"
          },
          {
            "name": "Time",
            "comment": "A float from 0 to 1, inclusive, 0 representing the beginning of an animation an 1 its end",
            "args": [],
            "type": "Float"
          },
          {
            "name": "Timestamp",
            "comment": "A tuple (Time, Animation), used for chaining",
            "args": [],
            "type": "( Keyframes.Time, Keyframes.Animation )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "chain",
            "comment": "Chains animations, given their time of start in the new animation\n\n    fadeIn : Animation\n    fadeOut : Animation\n    blink = chain[\n            (0, fadeIn),--fadeIn will start at 0\n            (0.5, fadeOut),--fadeOut will end at .5, and from here fadeOut will start\n        ]\n",
            "type": "List Keyframes.Timestamp -> Keyframes.Animation"
          },
          {
            "name": "ensure",
            "comment": "Given a state, will create an animation that always returns that state.\nUseful for stuff like _transformOrigin_\n\n    ensure [(\"transformOrigin\", \"(0, 0)\")]\n    --same as transition \"transformOrigin\" \"(0, 0)\" \"(0, 0)\"\n    --or tween [(\"transformOrigin\", \"(0, 0)\")] [(\"transformOrigin\", \"(0, 0)\")]\n",
            "type": "Keyframes.State -> Keyframes.Animation"
          },
          {
            "name": "ensureProperty",
            "comment": "Give a property name and its value, will return an animation that always returns (property, value)\n\n    ensureProperty \"width\" \"100px\"\n    --same as ensure[(\"width\", \"100px\")]\n",
            "type": "String -> String -> Keyframes.Animation"
          },
          {
            "name": "foreshadow",
            "comment": "Persists the initial state of an animation for a given time before running the actual animation",
            "type": "Keyframes.Time -> Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "imposePresence",
            "comment": "Given the time of start and end of an animation(relative to the resulting animation),\npersists the initial and final state of the argument animation\n\n    blur = transition \"opacity\" \"1\" \"0.5\"\n    blurWithDelay = imposePresence 0.25 0.75 blur\n    --the target will stay opaque until one quarter of the animation\n    --then, it will fade to 0.5 opacity until three quarters of animation's duration\n    --after that, it will state at 0.5 opacity until the end of the animation\n",
            "type": "Keyframes.Time -> Keyframes.Time -> Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "linger",
            "comment": "Persists the last state of an animation for a given time\n\n    fadeOut = transition \"opacity\" \"1\" \"0\"\n    fadeOutAndStayThatWay = linger 0.5 animation\n    --the target will fade until the middle of the animation, that it will retain its latest opacity until the end\n\n",
            "type": "Keyframes.Time -> Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "merge",
            "comment": "Merges animations\n\n    collapseWidth = transition \"width\" \"100%\" \"1%\"\n    collapseHeight = transition \"height\" \"100%\" \"1%\"\n    shrink = merge [collapseWidth, collapseHeight]\n    --same as tween [(\"width\", \"100%\"), (\"height\", \"100%\")] [(\"width\", \"1%\"), (\"height\", \"1%\")]\n\n",
            "type": "List Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "play",
            "comment": "Plays an animation in real time\n\n    --play totalTime animation currentTime\n\n    main =\n        let\n            animation = transition \"opacity\" \"1\" \"0\" |> play 500.0 --play for 500ms\n            div' time = div [animation time] [text \"testing\"]\n        in Signal.constant True |> fpsWhen 60 |> Signal.foldp (+) 0 |> Signal.map div'\n\n",
            "type": "Keyframes.Time -> Keyframes.Animation -> Keyframes.Time -> Keyframes.State"
          },
          {
            "name": "playInfinitely",
            "comment": "Plays an animation infinitely, in loops\n\n    playInfinitely loopDuration animation timeSinceStart\n",
            "type": "Keyframes.Time -> Keyframes.Animation -> Keyframes.Time -> Keyframes.State"
          },
          {
            "name": "playOnce",
            "comment": "Same as _play_, but clamps _currentTime_ between _0_ and _1_(inclusive)\n\n    playOnce totalTime animation currentTime\n",
            "type": "Keyframes.Time -> Keyframes.Animation -> Keyframes.Time -> Keyframes.State"
          },
          {
            "name": "repeat",
            "comment": "Repeats an animation\n\n    blink : Animation\n    blink4times = repeat 4 blink\n\n",
            "type": "Int -> Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "reverse",
            "comment": "Reverses an animation\n\n    fadeIn = transition \"opacity\" \"0\" \"1\"\n    fadeOut = reverse fadeIn\n\n",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "toAndFrom",
            "comment": "A combination of _chain_ and _reverse._\n\n    fadeOut = transition \"opacity\" \"1\" \"0\"\n    blink = toAndFrom fadeOut\n",
            "type": "Keyframes.Animation -> Keyframes.Animation"
          },
          {
            "name": "transition",
            "comment": "Given a property name and two values for it, will return an animation\nthat bridges those two values\n\n    transition \"width\" \"1px\" \"100px\"\n    --same as tween [(\"width\", \"1px\")] [\"width\", \"100px\"])\n",
            "type": "String -> String -> String -> Keyframes.Animation"
          },
          {
            "name": "tween",
            "comment": "Given two states, will return an animation that bridges them\n\n    myAnimation = tween [(\"opacity\", \"0\")] [(\"opacity\", \"1\")]\n",
            "type": "Keyframes.State -> Keyframes.State -> Keyframes.Animation"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "alinz/elm-vector2d",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Vector2D",
        "comment": " This file contains the implmantion of Vector 2D for elm-lang.\n\n# Model\n@docs Vector2D\n\n# Constructor\n@docs vector2D\n\n# Comparison\n@docs equal\n\n# Basic Arithmatics\n@docs add, sub, div, mul\n\n# Advanced Airthmatics\n@docs dot, magnitude, distance, normalise, angle\n\n",
        "aliases": [
          {
            "name": "Vector2D",
            "comment": " Represents the Vector2D model\n",
            "args": [],
            "type": "{ x : Float, y : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Adds two Vector2D and returns summation of them\n",
            "type": "Vector2D.Vector2D -> Vector2D.Vector2D -> Vector2D.Vector2D"
          },
          {
            "name": "angle",
            "comment": " Calculates the angle of a given Vector2D and returns the radians value\n",
            "type": "Vector2D.Vector2D -> Float"
          },
          {
            "name": "distance",
            "comment": " Calculates the distance between two Vector2D\n",
            "type": "Vector2D.Vector2D -> Vector2D.Vector2D -> Float"
          },
          {
            "name": "div",
            "comment": " Applies division a float variable to a given Vector2D\n",
            "type": "Vector2D.Vector2D -> Float -> Vector2D.Vector2D"
          },
          {
            "name": "dot",
            "comment": " Calculates a dot product of two Vector2D\n",
            "type": "Vector2D.Vector2D -> Vector2D.Vector2D -> Float"
          },
          {
            "name": "equal",
            "comment": " Compares two Vecotr2D\n",
            "type": "Vector2D.Vector2D -> Vector2D.Vector2D -> Bool"
          },
          {
            "name": "magnitude",
            "comment": " Calculates magnitude of a Vector2D\n",
            "type": "Vector2D.Vector2D -> Float"
          },
          {
            "name": "mul",
            "comment": " Applies multiplication a float number to a given Vector2D\n",
            "type": "Vector2D.Vector2D -> Float -> Vector2D.Vector2D"
          },
          {
            "name": "normalise",
            "comment": " Normalises the given Vector2D\n",
            "type": "Vector2D.Vector2D -> Vector2D.Vector2D"
          },
          {
            "name": "sub",
            "comment": " Subtracts two Vector2D ",
            "type": "Vector2D.Vector2D -> Vector2D.Vector2D -> Vector2D.Vector2D"
          },
          {
            "name": "vector2D",
            "comment": " Creates Vector2D from two float number\n",
            "type": "Float -> Float -> Vector2D.Vector2D"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "andybalaam/elm-param-parsing",
    "version": "1.0.1",
    "docs": [
      {
        "name": "UrlParameterParser",
        "comment": " Parse URL parameters. To use this, you'll need to create an input port, pass the search string to Elm,\nand then parse them with this function, then that can populate your model.\n\nFor instance, in the web page:\n```\n   var app = Elm.fullscreen(Elm.YourModule,\n               { locationSearch: window.location.search });\n```\nin YourModule.elm:\n```\nport locationSearch : String\n```\n\nThen parse the value of the port - this example discards errors:\n```\nparameters : Dict String String\nparameters =\n  case (parseSearchString locationSearch) of\n    Error _ -> Dict.empty\n    UrlParams dict -> dict\n```\n\nThen use that dict when you call your init function that needs the value of the parameter. It'll get a Maybe String.\n```\ninit (Dict.get parameters \"customerID\")\n\ninit : Maybe String -> Model\ninit maybeID = ...\n```\n\n# Method\n@docs parseSearchString\n\n# Return type\n@docs ParseResult\n",
        "aliases": [],
        "types": [
          {
            "name": "ParseResult",
            "comment": " If parsing is successful, you get a UrlParams containing a dictionary of keys to values.\nOtherwise, an error string.\nIf there are no parameters, you'll get an error description.\n",
            "args": [],
            "cases": [
              [
                "Error",
                [
                  "String"
                ]
              ],
              [
                "UrlParams",
                [
                  "Dict.Dict String String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parseSearchString",
            "comment": " Given a search string of the form \"?key=value&key2=val2\"\nparse these into a dictionary of key to value.\n",
            "type": "String -> UrlParameterParser.ParseResult"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "aphorisme/elm-oprocesso",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Oprocesso.EDSL",
        "comment": " The `EDSL` module provides infix operator symbols and precedence to use the framework as mentioned in the `README`.\nJust include, if you into such stuff.\n\n@docs (>>-), (!<<), (-<<), (=>>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "!<<",
            "comment": " Infix operator for 'onfail'. ",
            "type": "Oprocesso.Types.Action error model -> (error -> Oprocesso.Types.Action x model) -> Oprocesso.Types.Action x model",
            "associativity": "left",
            "precedence": 4
          },
          {
            "name": "-<<",
            "comment": " Infix operator for 'thenDo' with *lower* fixity then '(>>-)' or 'thenDo'. ",
            "type": "Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model",
            "associativity": "left",
            "precedence": 3
          },
          {
            "name": "=>>",
            "comment": " Infix operator for 'next'. ",
            "type": "Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model",
            "associativity": "left",
            "precedence": 2
          },
          {
            "name": ">>-",
            "comment": " Infix operator for 'thenDo'. ",
            "type": "Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model",
            "associativity": "left",
            "precedence": 5
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Oprocesso",
        "comment": " The core part of the `oprocesso` framework.\n\n# Background\n@docs RepType, mmstack\n\n# Framework\n@docs actionbox, invoke, hook, ioport\n\n# Lifts\n@docs pure, pureParam, async, asyncOn, task\n\n# Combinators\n@docs thenDo, next, onfail\n",
        "aliases": [],
        "types": [
          {
            "name": "RepType",
            "comment": " Every 'Action' gets replicated into a queue, from where it gets polled and executed; their 'RepType' is a hull for every action in the queue, needed for the framework to decide how to execute the actions. ",
            "args": [
              "error",
              "model"
            ],
            "cases": [
              [
                "Sync",
                [
                  "Oprocesso.Types.Action error model"
                ]
              ],
              [
                "Async",
                [
                  "Task.Task error (Oprocesso.Types.Action error model)"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "actionbox",
            "comment": " 'actionbox' is where one sends actions to, when using the provided framework. ",
            "type": "Signal.Mailbox (Oprocesso.Types.Action error model)"
          },
          {
            "name": "async",
            "comment": " An asynchronous modification of the model is any task which gets invoked based on the current model and returns with a modification. One can use 'async' to lift such functions. ",
            "type": "(model -> Task.Task error (model -> model)) -> Oprocesso.Types.Action error model"
          },
          {
            "name": "asyncOn",
            "comment": " Often the invocation of tasks depends on a certain value out of the model which can be reached by a getter. 'asyncOn' is meant to be used in such a situation:\n\n  requestJson `asyncOn` .typed\n\n\n",
            "type": "(a -> Task.Task error (model -> model)) -> (model -> a) -> Oprocesso.Types.Action error model"
          },
          {
            "name": "hook",
            "comment": " 'hook' sets up the main model signal.\n\n  import Oprocesso  as O\n  main = Signal.map view (O.hook initmodel)\n\n",
            "type": "model -> Signal.Signal model"
          },
          {
            "name": "invoke",
            "comment": " 'invoke' is the direct way to invoke an action. ",
            "type": "Oprocesso.Types.Action error model -> Task.Task x ()"
          },
          {
            "name": "ioport",
            "comment": " 'ioport' sets up a port which runs the asynchronous tasks and calls the actions by feeding them back into the 'actionbox'.\n\n  import Oprocesso as O\n\n  port asyncrunner : Signal (Task x ())\n  port asyncrunner = O.ioport initmodel\n\n\n",
            "type": "model -> Signal.Signal (Task.Task x ())"
          },
          {
            "name": "mmstack",
            "comment": " The 'mmstack' is a signal consisting of the latest model and the next action, if there is any. It *forks* the actionbox by past folding pure operations and keeping track of the latest next action.\n",
            "type": "model -> Signal.Signal ( model, Maybe.Maybe (Oprocesso.RepType error model) )"
          },
          {
            "name": "next",
            "comment": " 'next' is the asynchronous combinator. It combines two actions such that both get invoked asynchronously.\n",
            "type": "Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model"
          },
          {
            "name": "onfail",
            "comment": " 'onfail' is the error handling combinator. Its second argument is an error handler; on none asynchronous actions, nothing changes.\n\n\n   (requestJson `asyncOn` .typed)\n        `onfail` \\err -> pure <| addEntry <| \"Error happened: \" ++ err\n",
            "type": "Oprocesso.Types.Action error model -> (error -> Oprocesso.Types.Action x model) -> Oprocesso.Types.Action x model"
          },
          {
            "name": "pure",
            "comment": " The easiest building blocks are actions which just change the model, these are so called 'pure' ones.\n\n  pure (\\m -> { m | entries <- asEntry m.typed\n                  , typed   <- \"\"})\n",
            "type": "(model -> model) -> Oprocesso.Types.Action error model"
          },
          {
            "name": "pureParam",
            "comment": " Usually, a model gets modified based on a parameter. These can be lifted with `pureParam`:\n\n  addString : String -> Model -> Model\n  addString s = \\m -> { m | entries <- asEntry s }\n\n  pureParam addString \"an Entry\"\n",
            "type": "(a -> model -> model) -> a -> Oprocesso.Types.Action error model"
          },
          {
            "name": "task",
            "comment": " An asynchronous modification which does not depend on the current model can be lifted with 'task'.\n",
            "type": "Task.Task error (model -> model) -> Oprocesso.Types.Action error model"
          },
          {
            "name": "thenDo",
            "comment": " 'thenDo' can be thought of as an `onSuccess` combinator: it combines two actions `act1` and `act2` in such a way, that if `act1` succeeds (which is always the case if no asynchronous action is involved) then right after it returns, `act2` takes place.\n",
            "type": "Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model -> Oprocesso.Types.Action error model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Oprocesso.Types",
        "comment": " Type for Oprocesso.\n# Base Types\n\n## State Monad\n@docs State, run, mapState, andThen, return\n\n## Action and Modifier\n@docs Modifier, Action\n",
        "aliases": [
          {
            "name": "Modifier",
            "comment": " a 'Modifier' is the core of an 'Action'. Inhabitants define how the model gets changed and which is the next 'Action' which has to happen (in the same synchronous task). ",
            "args": [
              "error",
              "model"
            ],
            "type": "Oprocesso.Types.State model (Oprocesso.Types.Action error model)"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " an 'Action' defines how the model change (if at all) or if an asynchronous modification shall take place. ",
            "args": [
              "error",
              "model"
            ],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Modify",
                [
                  "Oprocesso.Types.Modifier error model"
                ]
              ],
              [
                "Launch",
                [
                  "model -> Task.Task error (Oprocesso.Types.Modifier error model)"
                ]
              ]
            ]
          },
          {
            "name": "State",
            "comment": " the 'State' monad is the underlying type of a 'Modifier', where its bindable variable will be an 'Action.' ",
            "args": [
              "s",
              "a"
            ],
            "cases": [
              [
                "State",
                [
                  "s -> ( s, a )"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " 'andThen' is the `bind` of the 'State' monad. ",
            "type": "Oprocesso.Types.State s a -> (a -> Oprocesso.Types.State s b) -> Oprocesso.Types.State s b"
          },
          {
            "name": "mapState",
            "comment": " 'mapState' distributes a map over the inner state of a 'State' monad. ",
            "type": "(s -> s) -> Oprocesso.Types.State s a -> Oprocesso.Types.State s a"
          },
          {
            "name": "return",
            "comment": " 'return' is the `return` of the 'State' monad. ",
            "type": "a -> Oprocesso.Types.State s a"
          },
          {
            "name": "run",
            "comment": " 'run' unwraps the function out of the 'State' monad. ",
            "type": "Oprocesso.Types.State s a -> s -> ( s, a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "apuchenkin/elm-multiway-tree-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "MultiwayTreeUtil",
        "comment": " A set of utility function to work with multiway tree\n\n# Traverse\n@docs flatten, traverse, traverseFrom\n\n# Lookup\n@docs forestLookup, treeLookup, lca\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "flatten",
            "comment": " Flattens the tree resulting with list of all node values\n",
            "type": "MultiwayTree.Tree a -> List a"
          },
          {
            "name": "forestLookup",
            "comment": " Lookup for specified node in a disjoint tree set\n",
            "type": "a -> MultiwayTree.Forest a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "lca",
            "comment": " Finds the lowest common ancestor in a disjoint tree set\n",
            "type": "a -> a -> MultiwayTree.Forest a -> Maybe.Maybe a"
          },
          {
            "name": "traverse",
            "comment": " Performs a traverse of zipper resulting with a list of node values\n",
            "type": "MultiwayTreeZipper.Zipper a -> List a"
          },
          {
            "name": "traverseFrom",
            "comment": " Performs a traverse of zipper starting from given node.\n",
            "type": "Maybe.Maybe a -> MultiwayTreeZipper.Zipper a -> List a"
          },
          {
            "name": "treeLookup",
            "comment": " Lookup for specified node in a tree\n",
            "type": "a -> MultiwayTree.Tree a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "apuchenkin/elm-nested-router",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Router",
        "comment": " A simple nested router for single page applications.\n\nSee [Example](https://github.com/apuchenkin/elm-nested-router/tree/master/example) ([Live demo](http://apuchenkin.github.io/elm-nested-router/example))\nand [Tests](https://github.com/apuchenkin/elm-nested-router/tree/master/test/Test) for more details\n\n@docs runRouter, initialState\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "initialState",
            "comment": " Initial state for router. Fed this into your application state ",
            "type": "Router.Types.RouterState route"
          },
          {
            "name": "runRouter",
            "comment": " Launches the router ",
            "type": "Router.Types.RouterConfig route (Router.Types.WithRouter route state) -> Router.Types.RouterResult (Router.Types.WithRouter route state)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Router.Helpers",
        "comment": " A set of utility functions\n@docs singleton, noFx, combineParams, chainAction, doNothing, memoFallback\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chainAction",
            "comment": " Combines two action together ",
            "type": "Router.Types.Action state -> Router.Types.Action state -> Router.Types.Action state"
          },
          {
            "name": "combineParams",
            "comment": " Combine route wit a provided params ",
            "type": "Router.Types.RouteParams -> Router.Types.Route route -> Router.Types.Route route"
          },
          {
            "name": "doNothing",
            "comment": " An empty action ",
            "type": "Router.Types.Action state"
          },
          {
            "name": "memoFallback",
            "comment": " Performs function memoization with a fallback ",
            "type": "(comparable -> b) -> List comparable -> comparable -> b"
          },
          {
            "name": "noFx",
            "comment": " An action without effects ",
            "type": "state -> ( state, Router.Types.ActionEffects state )"
          },
          {
            "name": "singleton",
            "comment": " Wraps something in a list ",
            "type": "a -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Router.Types",
        "comment": " Router types\n\n# URL parts\n@docs URL, RawURL, RawSegment, Param, Constraint, Route, RouteConfig, RouteParams\n\n# Actions and handlers\n@docs WithRouter, Handler, Action, ActionEffects, Response, Transition\n\n# Router\n@docs Router, RouterConfig, RouterResult, RouterState\n",
        "aliases": [
          {
            "name": "Action",
            "comment": " `Action` represents function that prforms something with application state, and might contain side efects ",
            "args": [
              "state"
            ],
            "type": "state -> Router.Types.Response state"
          },
          {
            "name": "ActionEffects",
            "comment": " Helper to get rid of brackets ",
            "args": [
              "state"
            ],
            "type": "Effects.Effects (Router.Types.Action state)"
          },
          {
            "name": "Handler",
            "comment": "\n  A `Handler` is a piece of functionality binded to specific route\n  * `view` &mdash; Function that describes how to render application state to map of named views\n  * `actions` &mdash; A set of necessary to perform actions\n",
            "args": [
              "state"
            ],
            "type": "{ view : state -> Dict.Dict String Html.Html -> Dict.Dict String Html.Html , actions : List (Router.Types.Action state) }"
          },
          {
            "name": "Param",
            "comment": " Dynamic route parameter name ",
            "args": [],
            "type": "String"
          },
          {
            "name": "RawSegment",
            "comment": " A single segment of `RawURL` template ",
            "args": [],
            "type": "String"
          },
          {
            "name": "RawURL",
            "comment": " Raw URL template:\n```\n\"/home/post/:postId\"\n```\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "Route",
            "comment": " combined abstract route type with params ",
            "args": [
              "route"
            ],
            "type": "( route, Router.Types.RouteParams )"
          },
          {
            "name": "RouteConfig",
            "comment": "\n  `RouteConfig` is a route configuration\n\n  * `segment` &mdash; URL segment\n\n  Expample:\n```\n\"/home\",\n\"/post/:postId\",\n\"/author[/:authorId]\"\n```\n  * `parent` &mdash; A parent route\n  * `bypass` &mdash; When setted to True - route will not be matched directly, but still can provide actions and views\n  * `constraints` &mdash; A set of constraints applied to route params. (`String`, `Int`, `Enum`, `Regexp`) constraints are supported\n  * `handler` &mdash; A binding to handler.\n\n  **Exapmle of route configuration**:\n```\n  config = {\n    -- \"author\" and \"postId\" is dynamic url parts\n    -- \"postId\" is marked as optional and might me ommited in URL\n    segment = \"/page/:author[/:postId]\"\n  , parent = Nothing\n    -- setting a parent for route means that full route URL will be combined with it's parent, and actions for route and it's parent will be fired on match\n  , bypass = False\n  , constraints = Dict.fromList [(\"author\", String),(\"postId\", Int)]\n    -- constraints specify that `author` param must be a string,\n    -- and postId an integer\n  , handler = always PostHandler\n  }\n```\n\n  A `config` above will match following URLs:\n```\n\"/page/mark/1\", \"/page/mark\", \"/page/joe\"\n```\n  \"mark\" and \"joe\" will be stored as `author` param, and \"1\" as `postId`\n  Everything enclosed by brackets considered as optional.\n",
            "args": [
              "route",
              "state"
            ],
            "type": "{ segment : Router.Types.RawSegment , parent : Maybe.Maybe route , bypass : Bool , constraints : Dict.Dict Router.Types.Param Router.Types.Constraint , handler : Router.Types.Router route state -> Router.Types.Handler state }"
          },
          {
            "name": "RouteParams",
            "comment": " A map of route param names and values ",
            "args": [],
            "type": "Dict.Dict Router.Types.Param String"
          },
          {
            "name": "Router",
            "comment": "\n  A `Router` is a provider of following functions:\n\n  * `bindForward` &mdash; Binds a `forward` action to a provided `Route` with a list of html attributes.\n    This is useful to create links in application\n  * `buildUrl` &mdash; Builds an URL for provided `Route`\n  * `forward` &mdash; Preforms a transition to provided `Route`\n  * `redirect` &mdash; Redirects to provided `Route`\n  * `match` &mdash; Performs attempt to match provided URL.\n\n  Router also provide it's `config` and `address`\n",
            "args": [
              "route",
              "state"
            ],
            "type": "{ config : Router.Types.RouterConfig route state , address : Signal.Address (Router.Types.Action state) , bindForward : Router.Types.Route route -> List Html.Attribute -> List Html.Attribute , buildUrl : Router.Types.Route route -> Router.Types.URL , forward : Router.Types.Route route -> Router.Types.Action state , redirect : Router.Types.Route route -> Router.Types.Action state , match : String -> Maybe.Maybe (Router.Types.Route route) }"
          },
          {
            "name": "RouterResult",
            "comment": "\n  A `RouterResult` is a combination of resulting signals:\n\n  * `html` &mdash; a signal of `Html` representing the current visual\n    representation of your app. This should be fed into `main`.\n  * `state` &mdash; a signal representing the central state of your application.\n  * `tasks` &mdash; a signal of tasks that need to get run. Your app is going\n    to be producing tasks in response to all sorts of events, so this needs to\n    be hooked up to a `port` to ensure they get run.\n",
            "args": [
              "state"
            ],
            "type": "{ html : Signal.Signal Html.Html , state : Signal.Signal state , tasks : Signal.Signal (Task.Task Effects.Never ()) }"
          },
          {
            "name": "RouterState",
            "comment": " A state of router ",
            "args": [
              "route"
            ],
            "type": "{ route : Maybe.Maybe route, params : Router.Types.RouteParams }"
          },
          {
            "name": "Transition",
            "comment": " A transition from route A to route B ",
            "args": [
              "route",
              "state"
            ],
            "type": "Maybe.Maybe (Router.Types.Route route) -> Router.Types.Route route -> Router.Types.Action state"
          },
          {
            "name": "URL",
            "comment": " A valid URL:\n```\n\"/home/post/1\"\n```\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "WithRouter",
            "comment": " Type extension for the application state ",
            "args": [
              "route",
              "state"
            ],
            "type": "{ state | router : Router.Types.RouterState route }"
          }
        ],
        "types": [
          {
            "name": "Constraint",
            "comment": " A constraint of route parameter type ",
            "args": [],
            "cases": [
              [
                "Int",
                []
              ],
              [
                "String",
                []
              ],
              [
                "Enum",
                [
                  "List String"
                ]
              ],
              [
                "Regex",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Response",
            "comment": " An action result - a modified state combined with side effects ",
            "args": [
              "state"
            ],
            "cases": [
              [
                "Response",
                [
                  "( state, Router.Types.ActionEffects state )"
                ]
              ]
            ]
          },
          {
            "name": "RouterConfig",
            "comment": "\n  `RouterConfig` is configuration for the router:\n\n  * `init` &mdash; Initial application state\n  * `html5` &mdash; Use html5 pushState.\n  * `removeTrailingSlash` &mdash; Trailing slashes will be removed from matched and builded urls\n  * `fallback` &mdash; A fallback route is used when url matching fails\n  * `layout` &mdash; Main rendered function that combines named views gathered from Handlers in a single HTML\n  * `onTransition` &mdash; An action that should be executed on every router transition\n  * `routeConfig` &mdash; A mapping between route and route configuration\n  * `routes` &mdash; A list of routes available for routing\n  * `inits` &mdash; A list of signals that should run for inititialisation of state\n  * `inputs` &mdash; A list of signals utilized in application in runtime\n",
            "args": [
              "route",
              "state"
            ],
            "cases": [
              [
                "RouterConfig",
                [
                  "{ init : state , html5 : Bool , removeTrailingSlash : Bool , fallback : Router.Types.Route route , layout : Router.Types.Router route state -> state -> Dict.Dict String Html.Html -> Html.Html , onTransition : Router.Types.Router route state -> Router.Types.Transition route state , routeConfig : route -> Router.Types.RouteConfig route state , routes : List route , inits : List (Signal.Signal (Router.Types.Action state)) , inputs : List (Signal.Signal (Router.Types.Action state)) }"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "arturopala/elm-monocle",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Monocle.Optional",
        "comment": " A Optional is a weaker Lens and a weaker Prism\n\n# Definition\n@docs Optional\n\n# Derived methods\n@docs compose, composeLens, modifyOption, modify, zip\n\n# Conversion\n@docs fromPrism, fromLens\n\n# Example\n\n    addressRegionOptional : Optional Address String\n    addressRegionOptional =\n        let\n            getOption a = a.region\n\n            set r a = { a | region = Just r }\n        in\n            Optional getOption set\n",
        "aliases": [
          {
            "name": "Optional",
            "comment": " In order to create Optional we need to suply 2 functions: set and getOption\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ getOption : a -> Maybe.Maybe b, set : b -> a -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Optional a b` with `Optional b c` and returns `Optional a c`\n\n    string2IntPrism : Prism String Int\n    string2IntPrism = Prism (String.toInt >> Result.toMaybe) toString\n\n    addressRegionIntOptional: Optional Address Int\n    addressRegionIntOptional = addressRegionOptional `compose` (fromPrism string2IntPrism)\n",
            "type": "Monocle.Optional.Optional a b -> Monocle.Optional.Optional b c -> Monocle.Optional.Optional a c"
          },
          {
            "name": "composeLens",
            "comment": " Composes `Optional a b` with `Lens b c` and returns `Optional a c`\n\n    string2CharListIso : Iso String (List Char)\n    string2CharListIso = Iso String.toList String.fromList\n\n    addressRegionListCharOptional: Optional Address (List Char)\n    addressRegionListCharOptional = addressRegionOptional `composeLens` (fromIso string2CharListIso)\n",
            "type": "Monocle.Optional.Optional a b -> Monocle.Lens.Lens b c -> Monocle.Optional.Optional a c"
          },
          {
            "name": "fromLens",
            "comment": " Casts `Lens a b` to `Optional a b` where `getOption` will return always `Just`\n",
            "type": "Monocle.Lens.Lens a b -> Monocle.Optional.Optional a b"
          },
          {
            "name": "fromPrism",
            "comment": " Casts `Prism a b` to `Optional a b`\n\n    string2IntPrism : Prism String Int\n    string2IntPrism =\n        Prism (String.toInt >> Result.toMaybe) toString\n\n    stringIntOptional: Optional String Int\n    stringIntOptional = fromPrism string2IntPrism\n",
            "type": "Monocle.Prism.Prism a b -> Monocle.Optional.Optional a b"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Optional a b`\n\n        modifyRegion: String -> String\n        modifyRegion region = String.reverse region\n\n        modifyAddressRegion: Address -> Address\n        modifyAddressRegion address = Optional.modify addressRegionOptional modifyRegion address\n",
            "type": "Monocle.Optional.Optional a b -> (b -> b) -> a -> a"
          },
          {
            "name": "modifyOption",
            "comment": " Modifies given function `(b -> b)` to be `(a -> Maybe a)` using `Optional a b`\n\n        modifyRegion: String -> String\n        modifyRegion region = String.reverse region\n\n        modifyAddressRegion: Address -> Maybe Address\n        modifyAddressRegion address = Optional.modifyOption addressRegionOptional modifyRegion address\n",
            "type": "Monocle.Optional.Optional a b -> (b -> b) -> a -> Maybe.Maybe a"
          },
          {
            "name": "zip",
            "comment": " Zip `Optional a c` with `Optional b d` to form Optional for the pairs ( a, b ) ( c, d )\n",
            "type": "Monocle.Optional.Optional a c -> Monocle.Optional.Optional b d -> Monocle.Optional.Optional ( a, b ) ( c, d )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Monocle.Prism",
        "comment": " A Prism is a tool which optionally converts elements of type A into elements of type B and back.\n\n# Definition\n@docs Prism\n\n# Example\n\n    string2IntPrism : Prism String Int\n    string2IntPrism =\n        Prism (String.toInt >> Result.toMaybe) toString\n\n    string2IntPrism.getOption \"17896\" == Just 17896\n    string2IntPrism.getOption \"1a896\" == Nothing\n    string2IntPrism.reverseGet 1626767 = \"1626767\"\n\n# Derived methods\n@docs isMatching, modify, modifyOption, compose, composeIso\n\n# Conversion\n@docs fromIso\n\n",
        "aliases": [
          {
            "name": "Prism",
            "comment": " In order to create a `Prism` we need to supply two functions: `getOption` and `reverseGet`\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ getOption : a -> Maybe.Maybe b, reverseGet : b -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Prism a b` with `Prism b c` and returns `Prism a c`\n\n        prism = Monocle.Prism.compose string2FloatPrism float2IntPrism\n        prism.getOption \"22\" == Just 22\n        prism.getOption \"22.2\" == Nothing\n        prism.getOption \"22a\" == Nothing\n        prism.getOption \"abc\" == Nothing\n\n",
            "type": "Monocle.Prism.Prism a b -> Monocle.Prism.Prism b c -> Monocle.Prism.Prism a c"
          },
          {
            "name": "composeIso",
            "comment": " Composes `Prism a b` with `Iso b c` and returns `Prism a c`\n\n        iso = Iso ((*) 10) ((//) 10)\n        prism = Monocle.Prism.composeIso string2IntPrism iso\n        prism.getOption \"22\" == Just 220\n        prism.getOption \"22.2\" == Nothing\n        prism.getOption \"22a\" == Nothing\n        prism.getOption \"abc\" == Nothing\n",
            "type": "Monocle.Prism.Prism a b -> Monocle.Iso.Iso b c -> Monocle.Prism.Prism a c"
          },
          {
            "name": "fromIso",
            "comment": " Casts `Iso a b` to `Prism a b`\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Prism.Prism a b"
          },
          {
            "name": "isMatching",
            "comment": " Checks if value of type `A` has matching element of type 'B'\n\n        Monocle.Prism.isMatching string2IntPrism \"abc\" == False\n        Monocle.Prism.isMatching string2IntPrism \"123\" == True\n",
            "type": "Monocle.Prism.Prism a b -> a -> Bool"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Prism a b`\n\n        fx i = i * 2\n        modified = Monocle.Prism.modify string2IntPrism fx\n        modified \"22\" == \"44\"\n        modified \"abc\" == \"abc\"\n",
            "type": "Monocle.Prism.Prism a b -> (b -> b) -> a -> a"
          },
          {
            "name": "modifyOption",
            "comment": " Modifies given function `(b -> b)` to be `(a -> Maybe a)` using `Prism a b`\n\n        fx i = i * 2\n        modified = Monocle.Prism.modify string2IntPrism fx\n        modified \"22\" == Just \"44\"\n        modified \"abc\" == Nothing\n",
            "type": "Monocle.Prism.Prism a b -> (b -> b) -> a -> Maybe.Maybe a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Monocle.Lens",
        "comment": " A Lens is a functional concept which solves a very common problem:\n    how to easily update a complex immutable structure,\n    for this purpose Lens acts as a zoom into a record.\n\n# Definition\n@docs Lens\n\n# Example\n    addressStreetNameLens : Lens Address String\n    addressStreetNameLens =\n        let\n            get a = a.streetName\n\n            set sn a = { a | streetName = sn }\n        in\n            Lens get set\n\n    placeAddressLens : Lens Place Address\n    placeAddressLens =\n        let\n            get p = p.address\n\n            set a p = { p | address = a }\n        in\n            Lens get set\n\n    placeStreetName: Lens Place String\n    placeStreetName = placeAddressLens `compose` addressStreetNameLens\n\n# Derived methods\n@docs compose, modify, modifyAndMerge, zip\n\n# Conversion\n@docs fromIso\n\n",
        "aliases": [
          {
            "name": "Lens",
            "comment": " In order to create Lens we need to suply 2 functions: set and get\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ get : a -> b, set : b -> a -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Lens a b` with `Lens b c` and returns `Lens a c`\n",
            "type": "Monocle.Lens.Lens a b -> Monocle.Lens.Lens b c -> Monocle.Lens.Lens a c"
          },
          {
            "name": "fromIso",
            "comment": " Casts `Iso a b` to `Lens a b`\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Lens.Lens a b"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Lens a b`\n\n    addressStreetNameLens = Lens Address String\n    fx streetName = String.reverse streeName\n    fx2 = Lens.modify addressStreetNameLens fx\n    fx2 {streetName=\"abcdef\"} == {streetName=\"fedcba\"}\n",
            "type": "Monocle.Lens.Lens a b -> (b -> b) -> a -> a"
          },
          {
            "name": "modifyAndMerge",
            "comment": " Modifies given function `(b -> (b,c))` to be `(a,c) -> (a,c)` using `Lens a b` and `merge` function\n\n",
            "type": "Monocle.Lens.Lens a b -> (b -> ( b, c )) -> (c -> c -> c) -> ( a, c ) -> ( a, c )"
          },
          {
            "name": "zip",
            "comment": " Zips `Lens a c` with `Lens b d` to form Lens ( a, b ) ( c, d )\n",
            "type": "Monocle.Lens.Lens a c -> Monocle.Lens.Lens b d -> Monocle.Lens.Lens ( a, b ) ( c, d )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Monocle.Iso",
        "comment": " An Iso is a tool which converts elements of type A into elements of type B and back without loss.\n\n# Definition\n@docs Iso\n\n# Laws\n    Identity:  \\x -> iso.get(iso.reverseGet x) == x\n    Reversed:  \\x -> iso.reverseGet(iso.get x) == x\n\n# Example\n\n    string2CharListIso : Iso String (List Char)\n    string2CharListIso =\n        Iso String.toList String.fromList\n\n    (string2CharListIso.get \"ABcdE\") == ['A','B','c','d','E']\n    (string2CharListIso.reverseGet ['A','B','c','d','E']) == \"ABcdE\"\n\n# Derived methods\n@docs reverse, modify, compose\n",
        "aliases": [
          {
            "name": "Iso",
            "comment": " In order to create an `Iso` we need to supply two total functions: `get` and `reverseGet`\n",
            "args": [
              "a",
              "b"
            ],
            "type": "{ get : a -> b, reverseGet : b -> a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Composes `Iso a b` with `Iso b c` and returns `Iso a c`\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Iso.Iso b c -> Monocle.Iso.Iso a c"
          },
          {
            "name": "modify",
            "comment": " Modifies given function `(b -> b)` to be `(a -> a)` using `Iso a b`\n\n        someiso = Iso String.toList String.fromList\n        somefx xs =  '@' :: xs\n        modified = Iso.modify someiso somefx\n        (modified \"artur\") == \"@artur\"\n\n",
            "type": "Monocle.Iso.Iso a b -> (b -> b) -> a -> a"
          },
          {
            "name": "reverse",
            "comment": " Creates reversed `Iso b a`, exchanges functions `get` and `reverseGet`\n\n        .get (Iso.reversed someiso) == someiso.reverseGet\n        .reverseGet (Iso.reversed someiso) == someiso.get\n        Iso.compose someiso (Iso.reversed someiso) == Iso identity identity\n",
            "type": "Monocle.Iso.Iso a b -> Monocle.Iso.Iso b a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "astynax/elm-state",
    "version": "1.0.1",
    "docs": [
      {
        "name": "State",
        "comment": " This library provides a different approach to handling of app state.\nAccording to this idea the application state changing in time\nby stream of state-mutating functions (updates).\n\n    import Html\n    import Time\n    import State\n\n    main = State.start state view updates\n\n    state = 0\n\n    view address state =\n      Html.text <| toString state\n\n    updates =\n      Signal.map (always <| (+) 1)\n      <| Time.every Time.second\n\n# Types\n@docs Update, View\n\n# Common helpers\n@docs start, forward\n\n# Infix operators\n@docs (^.), (%~)\n",
        "aliases": [
          {
            "name": "Update",
            "comment": " State update (function from the old state to the new one).\n\n    type alias State = Int\n\n    updates : Signal (Update State)\n    updates = Signal.constant ((*) 2)\n",
            "args": [
              "state"
            ],
            "type": "state -> state"
          },
          {
            "name": "View",
            "comment": " View. Receives an address for the updates, and the current\nstate to display.\n\n    type alias State = { value : Int }\n\n    view : View State Html\n    view address state =\n      button\n        [ onClick address (\\s -> { s | value = s.value * 2 }) ]\n        [ text <| toString state ]\n",
            "args": [
              "state",
              "view"
            ],
            "type": "Signal.Address (State.Update state) -> state -> view"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "%~",
            "comment": " Infix operator for constructing of updater.\n\n    type alias Counter = { value_ : Int }\n\n    value : Focus Counter Int\n    value = ...\n\n    increment : Counter -> Counter\n    increment = value %~ (+) 1\n",
            "type": "Focus.Focus state subState -> (subState -> subState) -> state -> state"
          },
          {
            "name": "^.",
            "comment": " Sub-state extracting infix operator.\n\n    type alias User = { name_ : String }\n\n    name : Focus User String\n    name = ...\n\n    -- somewhere in view\n      Html.text <| user ^. name\n",
            "type": "state -> Focus.Focus state subState -> subState"
          },
          {
            "name": "forward",
            "comment": " Calls the sub-view function to display sub-state, extracting it\nfrom the \"root\" state using the Focus. Sub-view can send updates\nonly for sub-state (inner components are isolated from the container).\n",
            "type": "Signal.Address (State.Update state) -> state -> Focus.Focus state subState -> State.View subState view -> view"
          },
          {
            "name": "start",
            "comment": " Starts the application. Receives an initial state, the view function\nand the stream of updates.\n",
            "type": "state -> State.View state a -> Signal.Signal (State.Update state) -> Signal.Signal a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "avh4/elm-diff",
    "version": "1.0.6",
    "docs": [
      {
        "name": "Diff",
        "comment": " Functions to compare strings to produce a list of changes.  This is an\nimplementation of the [Hunt-McIlroy](http://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm)\ndiff algorithm.\n\n# Types and Constructors\n@docs Change\n\n# Diffing strings\n@docs diffChars, diffLines\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Change",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "NoChange",
                [
                  "String"
                ]
              ],
              [
                "Changed",
                [
                  "String",
                  "String"
                ]
              ],
              [
                "Added",
                [
                  "String"
                ]
              ],
              [
                "Removed",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "diffChars",
            "comment": " Diffs two strings, comparing character by charater.\n\n    diffChars \"abc\" \"aBcd\"\n      == [ NoChange \"a\", Changed \"b\" \"B\", NoChange \"c\", Added \"d\" ]\n",
            "type": "String -> String -> List Diff.Change"
          },
          {
            "name": "diffLines",
            "comment": " Diffs two strings, comparing line by line.\n\n    original = \"\"\"Brian\n    Sohie\n    Oscar\n    Stella\n    Takis\n    \"\"\"\n\n    changed = \"\"\"BRIAN\n    Stella\n    Frosty\n    Takis\n    \"\"\"\n\n    diffLines original changed\n      == [ Changed \"Brian\\nSohie\\nOscar\\n\" \"BRIAN\\n\"\n          , NoChange \"Stella\\n\"\n          , Added \"Frosty\\n\"\n          , NoChange \"Takis\\n\"\n          ]\n",
            "type": "String -> String -> List Diff.Change"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "avh4/elm-fifo",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Fifo",
        "comment": "\n\n# Creating FIFOs\n@docs Fifo, empty, fromList\n\n# Inserting/Removing\n@docs insert, remove\n\n# To List\n@docs toList\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Fifo",
            "comment": " A FIFO containing items of type `a`.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Creates an empty Fifo.\n\n    Fifo.empty\n        -- == Fifo.fromList []\n\n",
            "type": "Fifo.Fifo a"
          },
          {
            "name": "fromList",
            "comment": " Creates a Fifo from a List.\n\n    Fifo.fromList [3,4,5]\n    |> Fifo.remove\n    |> fst\n        -- == Just 3\n\n",
            "type": "List a -> Fifo.Fifo a"
          },
          {
            "name": "insert",
            "comment": " Inserts an item into a Fifo\n\n    Fifo.empty\n    |> Fifo.insert 7\n    |> Fifo.insert 8\n        -- == Fifo.fromList [7,8]\n\n",
            "type": "a -> Fifo.Fifo a -> Fifo.Fifo a"
          },
          {
            "name": "remove",
            "comment": " Removes the next (oldest) item from a Fifo, returning the item (if any), and the updated Fifo.\n\n    Fifo.fromList [3,7]\n    |> Fifo.remove\n        -- == (Just 3, Fifo.fromList [7])\n\n",
            "type": "Fifo.Fifo a -> ( Maybe.Maybe a, Fifo.Fifo a )"
          },
          {
            "name": "toList",
            "comment": " Converts a Fifo to a List.\n\n    Fifo.empty\n    |> Fifo.insert 7\n    |> Fifo.insert 9\n    |> Fifo.toList\n        -- == [7,9]\n",
            "type": "Fifo.Fifo a -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "avh4/elm-testable",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Testable.TestContext",
        "comment": " A `TestContext` allows you to manage the lifecycle of an Elm component that\nuses `Testable.Effects`.  Using `TestContext`, you can write tests that exercise\nthe entire lifecycle of your component.\n\n@docs Component, TestContext, startForTest, update\n\n# Inspecting\n@docs currentModel, assertCurrentModel, assertHttpRequest, assertNoPendingHttpRequests\n\n# Simulating Effects\n@docs resolveHttpRequest, advanceTime\n",
        "aliases": [
          {
            "name": "Component",
            "comment": " A component that can be used to create a `TestContext`\n",
            "args": [
              "action",
              "model"
            ],
            "type": "{ init : ( model, Testable.Effects.Effects action ) , update : action -> model -> ( model, Testable.Effects.Effects action ) }"
          }
        ],
        "types": [
          {
            "name": "TestContext",
            "comment": " The representation of the current state of a testable component, including\na representaiton of any pending Effects.\n",
            "args": [
              "action",
              "model"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "advanceTime",
            "comment": " Simulate the passing of time\n",
            "type": "Time.Time -> Testable.TestContext.TestContext action model -> Testable.TestContext.TestContext action model"
          },
          {
            "name": "assertCurrentModel",
            "comment": " A convenient way to assert about the current state of the component under test\n",
            "type": "model -> Testable.TestContext.TestContext action model -> ElmTest.Assertion"
          },
          {
            "name": "assertHttpRequest",
            "comment": " Assert that a given Http.Request has been made by the componet under test\n",
            "type": "Testable.Http.Request -> Testable.TestContext.TestContext action model -> ElmTest.Assertion"
          },
          {
            "name": "assertNoPendingHttpRequests",
            "comment": " Ensure that there are no pending HTTP requests\n",
            "type": "Testable.TestContext.TestContext action model -> ElmTest.Assertion"
          },
          {
            "name": "currentModel",
            "comment": " Get the current state of the component under test\n",
            "type": "Testable.TestContext.TestContext action model -> Result.Result (List String) model"
          },
          {
            "name": "resolveHttpRequest",
            "comment": " Simulate an HTTP response\n",
            "type": "Testable.Http.Request -> Result.Result Testable.Http.RawError Testable.Http.Response -> Testable.TestContext.TestContext action model -> Testable.TestContext.TestContext action model"
          },
          {
            "name": "startForTest",
            "comment": " Create a `TestContext` for the given Component\n",
            "type": "Testable.TestContext.Component action model -> Testable.TestContext.TestContext action model"
          },
          {
            "name": "update",
            "comment": " Apply an action to the component in a given TestContext\n",
            "type": "action -> Testable.TestContext.TestContext action model -> Testable.TestContext.TestContext action model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Testable",
        "comment": "\n\nThis module converts Testable things into real things.\n\n# Basics\n@docs effects, task\n\n# StartApp helpers\n@docs init, update\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "effects",
            "comment": " Converts a `Testable.Effects` into an `Effects`\n\n    Testable.Effects.none |> Testable.effects\n        == Effects.none\n",
            "type": "Testable.Effects.Effects action -> Effects.Effects action"
          },
          {
            "name": "init",
            "comment": " Converts a testable StartApp-style init value into a standard StartApp init value\n",
            "type": "( model, Testable.Effects.Effects action ) -> ( model, Effects.Effects action )"
          },
          {
            "name": "task",
            "comment": " Converts a `Testable.Task` into an `Task`\n\n    Testable.Task.succeed \"A\" |> Testable.task\n        == Task.succeed \"A\"\n",
            "type": "Testable.Task.Task error success -> Task.Task error success"
          },
          {
            "name": "update",
            "comment": " Converts a testable StartApp-style update function into a standard StartApp update function\n",
            "type": "(action -> model -> ( model, Testable.Effects.Effects action )) -> action -> model -> ( model, Effects.Effects action )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Testable.Http",
        "comment": "\n`Testable.Http` is a replacement for the standard `Http` module.  You can use it\nto create components that can be tested with `Testable.TestContext`.\n\n# Helpers\n@docs getRequest, ok, serverError\n\n# Encoding and Decoding\n@docs url\n\n# Fetch Strings and JSON\n@docs getString, get, post, Error\n\n# Body Values\n@docs empty, string\n\n# Arbitrary Requests\n@docs Request\n\n# Responses\n@docs Response, RawError\n",
        "aliases": [
          {
            "name": "Error",
            "comment": " The kinds of errors you typically want in practice. When you get a\nresponse but its status is not in the 200 range, it will trigger a\n`BadResponse`. When you try to decode JSON but something goes wrong,\nyou will get an `UnexpectedPayload`.\n",
            "args": [],
            "type": "Http.Error"
          },
          {
            "name": "RawError",
            "comment": " The things that count as errors at the lowest level. Technically, getting\na response back with status 404 is a &ldquo;successful&rdquo; response in that\nyou actually got all the information you asked for.\n\nThe `fromJson` function and `Error` type provide higher-level errors, but the\npoint of `RawError` is to allow you to define higher-level errors however you\nwant.\n",
            "args": [],
            "type": "Http.RawError"
          },
          {
            "name": "Request",
            "comment": " Fully specify the request you want to send. For example, if you want to\nsend a request between domains (CORS request) you will need to specify some\nheaders manually.\n\n    corsPost : Request\n    corsPost =\n        { verb = \"POST\"\n        , headers =\n            [ (\"Origin\", \"http://elm-lang.org\")\n            , (\"Access-Control-Request-Method\", \"POST\")\n            , (\"Access-Control-Request-Headers\", \"X-Custom-Header\")\n            ]\n        , url = \"http://example.com/hats\"\n        , body = empty\n        }\n",
            "args": [],
            "type": "Http.Request"
          },
          {
            "name": "Response",
            "comment": " All the details of the response. There are many weird facts about\nresponses which include:\n\n  * The `status` may be 0 in the case that you load something from `file://`\n  * You cannot handle redirects yourself, they will all be followed\n    automatically. If you want to know if you have gone through one or more\n    redirect, the `url` field will let you know who sent you the response, so\n    you will know if it does not match the URL you requested.\n  * You are allowed to have duplicate headers, and their values will be\n    combined into a single comma-separated string.\n\nWe have left these underlying facts about `XMLHttpRequest` as is because one\ngoal of this library is to give a low-level enough API that others can build\nwhatever helpful behavior they want on top of it.\n",
            "args": [],
            "type": "Http.Response"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " An empty request body, no value will be sent along.\n",
            "type": "Testable.Http.Body"
          },
          {
            "name": "get",
            "comment": " Send a GET request to the given URL. You also specify how to decode the\nresponse.\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        get (list string) \"http://example.com/hat-categories.json\"\n",
            "type": "Json.Decode.Decoder value -> String -> Testable.Task.Task Testable.Http.Error value"
          },
          {
            "name": "getRequest",
            "comment": " A convenient way to make a `Request` corresponding to the request made by `get`\n",
            "type": "String -> Testable.Http.Request"
          },
          {
            "name": "getString",
            "comment": " Send a GET request to the given URL. You will get the entire response as a\nstring.\n\n    hats : Task Error String\n    hats =\n        getString \"http://example.com/hat-categories.markdown\"\n",
            "type": "String -> Testable.Task.Task Testable.Http.Error String"
          },
          {
            "name": "ok",
            "comment": " A convenient way to create a 200 OK repsonse\n",
            "type": "String -> Result.Result Testable.Http.RawError Testable.Http.Response"
          },
          {
            "name": "post",
            "comment": " Send a POST request to the given URL, carrying the given body. You also\nspecify how to decode the response with [a JSON decoder][json].\n\n[json]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        post (list string) \"http://example.com/hat-categories.json\" empty\n",
            "type": "Json.Decode.Decoder value -> String -> Testable.Http.Body -> Testable.Task.Task Testable.Http.Error value"
          },
          {
            "name": "serverError",
            "comment": " A convenient way to create a response representing a 500 error\n",
            "type": "Result.Result Testable.Http.RawError Testable.Http.Response"
          },
          {
            "name": "string",
            "comment": " Provide a string as the body of the request. Useful if you need to send\nJSON data to a server that does not belong in the URL.\n\n    import Json.Decode as JS\n\n    coolestHats : Task Error (List String)\n    coolestHats =\n        post\n          (JS.list JS.string)\n          \"http://example.com/hats\"\n          (string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "String -> Testable.Http.Body"
          },
          {
            "name": "url",
            "comment": " Create a properly encoded URL with a [query string][qs]. The first argument is\nthe portion of the URL before the query string, which is assumed to be\nproperly encoded already. The second argument is a list of all the\nkey/value pairs needed for the query string. Both the keys and values\nwill be appropriately encoded, so they can contain spaces, ampersands, etc.\n\n[qs]: http://en.wikipedia.org/wiki/Query_string\n\n    url \"http://example.com/users\" [ (\"name\", \"john doe\"), (\"age\", \"30\") ]\n    -- http://example.com/users?name=john+doe&age=30\n",
            "type": "String -> List ( String, String ) -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Testable.Effects",
        "comment": "\n`Testable.Effects` is a replacement for the core `Effects` module.  You can use it\nto create components that can be tested with `Testable.TestContext`.  You can\nconvert `Testable.Effects` into a core `Effects` with the `Testable` module.\n\n# Basic Effects\n@docs Effects, none, task\n\n# Combining Effects\n@docs map, batch\n\n# Running Effects\n@docs Never\n",
        "aliases": [
          {
            "name": "Effects",
            "comment": " Represents some kind of effect. Right now this library supports tasks for\narbitrary effects and clock ticks for animations.\n",
            "args": [
              "action"
            ],
            "type": "Testable.Internal.Effects action"
          },
          {
            "name": "Never",
            "comment": " A type that is \"uninhabited\". There are no values of type `Never`, so if\nsomething has this type, it is a guarantee that it can never happen. It is\nuseful for demanding that a `Task` can never fail.\n",
            "args": [],
            "type": "Effects.Never"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "batch",
            "comment": " Create a batch of effects. The following example requests two tasks: one\nfor the user’s picture and one for their age. You could put a bunch more stuff\nin that batch if you wanted!\n\n    init : String -> (Model, Effects Action)\n    init userID =\n        ( { id = userID\n          , picture = Nothing\n          , age = Nothing\n          }\n        , batch [ getPicture userID, getAge userID ]\n        )\n\n    -- getPicture : String -> Effects Action\n    -- getAge : String -> Effects Action\n\nExample 6 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "List (Testable.Effects.Effects action) -> Testable.Effects.Effects action"
          },
          {
            "name": "map",
            "comment": " Transform the return type of a bunch of `Effects`. This is primarily useful\nfor adding tags to route `Actions` to the right place in The Elm Architecture.\n\nExample 6 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "(a -> b) -> Testable.Effects.Effects a -> Testable.Effects.Effects b"
          },
          {
            "name": "none",
            "comment": " The simplest effect of them all: don’t do anything! This is useful when\nsome branches of your update function request effects and others do not.\n\nExample 5 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "Testable.Effects.Effects never"
          },
          {
            "name": "task",
            "comment": " Turn a `Task` into an `Effects` that results in an `a` value.\n\nNormally a `Task` has a error type and a success type. In this case the error\ntype is `Never` meaning that you must provide a task that never fails. Lots of\ntasks can fail (like HTTP requests), so you will want to use `Task.toMaybe`\nand `Task.toResult` to move potential errors into the success type so they can\nbe handled explicitly.\n\nExample 5 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "Testable.Task.Task Testable.Effects.Never a -> Testable.Effects.Effects a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Testable.Task",
        "comment": "\n`Testable.Task` is a replacement for the core `Task` module.  You can use it\nto create components that can be tested with `Testable.TestContext`.  You can\nconvert `Testable.Task` into a core `Task` with the `Testable` module.\n\n# Basics\n@docs Task, succeed, fail\n\n# Mapping\n@docs map\n\n# Chaining\n@docs andThen\n\n# Errors\n@docs toMaybe, toResult\n\n# Threads\n@docs sleep\n",
        "aliases": [
          {
            "name": "Task",
            "comment": " Represents asynchronous effects that may fail. It is useful for stuff like\nHTTP.\nFor example, maybe we have a task with the type (`Task String User`). This means\nthat when we perform the task, it will either fail with a `String` message or\nsucceed with a `User`. So this could represent a task that is asking a server\nfor a certain user.\n",
            "args": [
              "error",
              "success"
            ],
            "type": "Testable.Internal.Task error success"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together a task and a callback. The first task will run, and if it is\nsuccessful, you give the result to the callback resulting in another task. This\ntask then gets run.\n\n    succeed 2 |> andThen (\\n -> succeed (n + 2)) == succeed 4\n\nThis is useful for chaining tasks together. Maybe you need to get a user from\nyour servers *and then* lookup their picture once you know their name.\n",
            "type": "(a -> Testable.Task.Task x b) -> Testable.Task.Task x a -> Testable.Task.Task x b"
          },
          {
            "name": "fail",
            "comment": " A task that fails immediately when run.\n\n    fail \"file not found\" : Task String a\n",
            "type": "x -> Testable.Task.Task x a"
          },
          {
            "name": "map",
            "comment": " Transform a task.\n\n    map sqrt (succeed 9) == succeed 3\n",
            "type": "(a -> b) -> Testable.Task.Task x a -> Testable.Task.Task x b"
          },
          {
            "name": "sleep",
            "comment": " Make a thread sleep for a certain amount of time. The following example\nsleeps for 1 second and then succeeds with 42.\n\n    sleep 1000 |> andThen \\_ -> succeed 42\n",
            "type": "Time.Time -> Testable.Task.Task never ()"
          },
          {
            "name": "succeed",
            "comment": " A task that succeeds immediately when run.\n\n    succeed 42    -- results in 42\n",
            "type": "a -> Testable.Task.Task x a"
          },
          {
            "name": "toMaybe",
            "comment": " Helps with handling failure. Instead of having a task fail with some value\nof type `x` it promotes the failure to a `Nothing` and turns all successes into\n`Just` something.\n\n    toMaybe (fail \"file not found\") == succeed Nothing\n    toMaybe (succeed 42)            == succeed (Just 42)\n\nThis means you can handle the error with the `Maybe` module instead.\n",
            "type": "Testable.Task.Task x a -> Testable.Task.Task never (Maybe.Maybe a)"
          },
          {
            "name": "toResult",
            "comment": " Helps with handling failure. Instead of having a task fail with some value\nof type `x` it promotes the failure to an `Err` and turns all successes into\n`Ok` something.\n\n    toResult (fail \"file not found\") == succeed (Err \"file not found\")\n    toResult (succeed 42)            == succeed (Ok 42)\n\nThis means you can handle the error with the `Result` module instead.\n",
            "type": "Testable.Task.Task x a -> Testable.Task.Task never (Result.Result x a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "avh4/elm-transducers",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Transducer.Debug",
        "comment": " This module provides support for debugging transducers.\n\n# Logging\n@docs debug\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "debug",
            "comment": " Wrap an existing transducer such that input and output of the transducer \nwill be logged with `Debug.log`.\n\n    filter' pred = debug \"filter\" (filter pred)\n    main = show (transduceList (filter' ((/=) 2)) [1, 2, 3])\n    -- Console output:\n    --     filter: input: 3\n    --     filter: state: ()\n    --     filter -> : 3\n    --     filter: input: 2\n    --     filter: state: ()\n    --     filter: input: 1\n    --     filter: state: ()\n    --     filter -> : 1\n    --     filter: complete: ()\n",
            "type": "String -> Transducer.Transducer a b r s -> Transducer.Transducer a b r s"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Transducer",
        "comment": " A transducer is a composable way of processing a series of values.  \nMany basic transducers correspond to functions you may be familiar with for \nprocessing `List`s or `Signal`s.\n\n    import Maybe\n    import String\n    import Transducer exposing (..)\n\n    port stringSource : Signal String\n\n    parseValidInts =\n        map String.toInt\n        >>> map toMaybe\n        >>> filter ((/=) Nothing)\n        >>> map (Maybe.withDefault 0)\n\n    exampleList : List Int\n    exampleList = transduceList parseValidInts [\"123\", \"-34\", \"35.0\", \"SDF\", \"7\"]\n\n    exampleSignal : Signal Int\n    exampleSignal = transduceSignal parseValidInts stringSource\n\n# Definitions\n@docs Reducer, Transducer, Fold\n\n# Common transducers\n@docs map, filter, take, drop\n\n# More transducers\n@docs concatMap, dedupe, partition\n\n# Composing transducers\n@docs (>>>), comp\n\n# Applying transducers\n@docs transduce, transduceList, transduceSignal, transduceSet, transduceArray\n",
        "aliases": [
          {
            "name": "Fold",
            "comment": " A fold is function that takes a Reducer, an initial value, and input source,\nand returns a final value.\n",
            "args": [
              "input",
              "result",
              "source"
            ],
            "type": "Transducer.Reducer input result -> result -> source -> result"
          },
          {
            "name": "Reducer",
            "comment": " A reducer is a function taking an input and a value and produces a new value.\n\n    List.foldl : Reducer a b -> b -> List a -> b\n",
            "args": [
              "input",
              "result"
            ],
            "type": "input -> result -> result"
          },
          {
            "name": "Transducer",
            "comment": " A transducer an `init` value for it's internal state, a `step` function that\ntransforms a Reducer into a Reducer of a new type, and a `complete` function that\ntransforms a Reducer into a function collapsing the internal state.\n\nWhen defining transducers, the type parameter `r` should be left free.\n",
            "args": [
              "a",
              "b",
              "r",
              "state"
            ],
            "type": "{ init : Transducer.Reducer b r -> r -> ( state, r ) , step : Transducer.Reducer b r -> Transducer.Reducer a ( state, r ) , complete : Transducer.Reducer b r -> ( state, r ) -> r }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ">>>",
            "comment": " Transducer composition\n",
            "type": "Transducer.Transducer a b ( s2, r ) s1 -> Transducer.Transducer b c r s2 -> Transducer.Transducer a c r ( s1, s2 )"
          },
          {
            "name": "comp",
            "comment": " An alias for (>>>).\n",
            "type": "Transducer.Transducer a b ( s2, r ) s1 -> Transducer.Transducer b c r s2 -> Transducer.Transducer a c r ( s1, s2 )"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a list and flatten the results.\n\n    transduceList (concatMap (\\x -> [x,x+10])) [1,2] == [1,10,2,20]\n",
            "type": "(a -> List b) -> Transducer.Transducer a b r ()"
          },
          {
            "name": "dedupe",
            "comment": " Drop values that repeat the previous value.\n\n    transduceList dedupe [1,1,2,2,1] == [1,2,1]\n",
            "type": "Transducer.Transducer a a r (Maybe.Maybe a)"
          },
          {
            "name": "drop",
            "comment": " Drop the first *n* values.\n\n    transduceList (drop 2) [1,2,3,4] == [3,4]\n",
            "type": "Int -> Transducer.Transducer a a r Int"
          },
          {
            "name": "filter",
            "comment": " Keep only values that satisfy the predicate.\n\n    transduceList (filter isEven) [1..6] == [2,4,6]\n",
            "type": "(a -> Bool) -> Transducer.Transducer a a r ()"
          },
          {
            "name": "map",
            "comment": " Apply a function to every value.\n\n    transduceList (map sqrt) [1,4,9] == [1,2,3]\n",
            "type": "(a -> b) -> Transducer.Transducer a b r ()"
          },
          {
            "name": "partition",
            "comment": " Group a series of values into Lists of size n.\n\n    transduceList (partition 2) [1,2,3,4,5] == [[1,2],[3,4],[5]]\n",
            "type": "Int -> Transducer.Transducer a (List a) r ( Int, List a )"
          },
          {
            "name": "take",
            "comment": " Take the first *n* values.\n\n    transduceList (take 2) [1,2,3,4] == [1,2]\n",
            "type": "Int -> Transducer.Transducer a a r Int"
          },
          {
            "name": "transduce",
            "comment": " Apply a transducer.\n",
            "type": "Transducer.Fold a ( s, r ) x -> Transducer.Reducer b r -> r -> Transducer.Transducer a b r s -> x -> r"
          },
          {
            "name": "transduceArray",
            "comment": " Apply a Transducer to an Array, producing an Array.\n\n    transduceArray t xs = transduce Array.foldl Array.push Array.empty t xs\n",
            "type": "Transducer.Transducer a b (Array.Array b) s -> Array.Array a -> Array.Array b"
          },
          {
            "name": "transduceList",
            "comment": " Apply a Transducer to a List, producing a List.\n\n    transduceList t xs == transduce List.foldr (::) [] t xs\n",
            "type": "Transducer.Transducer a b (List b) s -> List a -> List b"
          },
          {
            "name": "transduceSet",
            "comment": " Apply a Transducer to a Set, producing a Set.\n\n    transduceSet t xs = transduce Set.foldr Set.insert Set.empty t xs\n",
            "type": "Transducer.Transducer comparable comparable' (Set.Set comparable'') s -> Set.Set comparable -> Set.Set comparable''"
          },
          {
            "name": "transduceSignal",
            "comment": " Apply a Transducer to a Signal, producing a new Signal.  Note that because Signals\nnever terminate, the transducer's `complete` will never be invoked.\n\n    main = transduceSignal (map show) (show \"initial value\") Mouse.position\n",
            "type": "Transducer.Transducer a b b s -> b -> Signal.Signal a -> Signal.Signal b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "avh4-experimental/elm-layout",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Layout.StartApp",
        "comment": " A `evancz/start-app`-like wrapper for `Layout`\n\n@docs Config, App\n\n@docs start\n\n",
        "aliases": [
          {
            "name": "App",
            "comment": " An alias for StartApp.App\n",
            "args": [
              "model"
            ],
            "type": "StartApp.App model"
          },
          {
            "name": "Config",
            "comment": " Like `StartApp.Config`, except the view produces `Layout` instead of `Html`.\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ init : ( model, Effects.Effects action ) , update : action -> model -> ( model, Effects.Effects action ) , view : Signal.Address action -> model -> Layout.Layout , inputs : List (Signal.Signal action) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " Like `StartApp.start`, except taking a Config with a view the produces `Layout` instead of `Html`.\n",
            "type": "Layout.StartApp.Config model action -> Layout.StartApp.App model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Layout.Circular",
        "comment": " Circular layouts\n\nThis module is similar to `Layout`, but provides an API for creating layouts that are elliptical instead of rectangular.  The bounds for each element is `{ a0, a1, r0, r1 }`, representing the lower and upper angle and the lower and upper radius for the region.\n\n@docs CircularLayout\n\n## Integration\n\n@docs canvas\n\n## Basic Elements\n\n@docs fill\n\n## Positioning\n\n@docs rotate, slice\n\n",
        "aliases": [],
        "types": [
          {
            "name": "CircularLayout",
            "comment": " A graphical element that will be rendered into a particular circular bounds at a later time.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "canvas",
            "comment": " Create a `Layout` that renders a CiruclarLayout within an ellipse filling its bounds.\n",
            "type": "Layout.Circular.CircularLayout -> Layout.Layout"
          },
          {
            "name": "fill",
            "comment": " An element that fills its bounds with a color.\n\n    Layout.fill Color.red\n",
            "type": "Color.Color -> Layout.Circular.CircularLayout"
          },
          {
            "name": "rotate",
            "comment": " Shift the angle of a child\n",
            "type": "Float -> Layout.Circular.CircularLayout -> Layout.Circular.CircularLayout"
          },
          {
            "name": "slice",
            "comment": " Divide the region into multiple children by angle.\n",
            "type": "List ( Float, Layout.Circular.CircularLayout ) -> Layout.Circular.CircularLayout"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Layout",
        "comment": " An experimental alternative to Graphics.Element and elm-html\n\nThe concept being explored by this rendering library is to have the core element\ntype be a function of `{x,y,w,h} -> rendering` instead of simply being a rendering.\nThis leads to some interesting properties with respect to creating dynamic layouts,\nand thus far appears to give a nice API for quickly creating and modifying layouts.\nIt also provides a mechanism for creating reusable layout logic.\n\n@docs Layout\n\n## Basic elements\n\n@docs placeholder, text, image, croppedImage, svg, fill\n\n## Positioning\n\n@docs inset, top, bottom, left, right, center, square\n\n## Lists\n\n@docs flow, stack, list\n\n## Events\n\n@docs onClick\n\n## Integration\n\n@docs toHtml, toFullWindow\n\n",
        "aliases": [
          {
            "name": "Layout",
            "comment": " A graphical element that will be rendered into a particular bounds at a later time.\n",
            "args": [],
            "type": "Layout.Core.Layout Layout.RectangularBounds"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "bottom",
            "comment": " Position two elements vertically, with the first element taking a given height\n\n    Layout.bottom 50\n        (Layout.placeholder \"footer\")\n        (Layout.placeholder \"content\")\n",
            "type": "Float -> Layout.Layout -> Layout.Layout -> Layout.Layout"
          },
          {
            "name": "center",
            "comment": " Makes a centered area of a size that is calculated with the given function.\n",
            "type": "(Layout.Size -> Layout.Size) -> Layout.Layout -> Layout.Layout"
          },
          {
            "name": "croppedImage",
            "comment": " An image cropped to a specific region of the source image.\nThe cropped region will be scaled to fill the bounds that this element renders into.\n\n    Layout.croppedImage 50 70 \"tiles50x70.png\" 10 10 20 30\n",
            "type": "Float -> Float -> Layout.Image -> Float -> Float -> Float -> Float -> Layout.Layout"
          },
          {
            "name": "fill",
            "comment": " An element that fills its bounds with a color.\n\n    Layout.fill Color.red\n",
            "type": "Color.Color -> Layout.Layout"
          },
          {
            "name": "flow",
            "comment": " An element that renders a list of children into bounds of a given size and\nlays them out in a left-to-right flow that wraps at this element's bounds\n\n    Layout.flow (32,32) (List.map fill [Color.red, Color.blue])\n",
            "type": "( Float, Float ) -> List Layout.Layout -> Layout.Layout"
          },
          {
            "name": "image",
            "comment": " An element that renders an image.\n\n    Layout.image \"mario.png\"\n",
            "type": "Layout.Image -> Layout.Layout"
          },
          {
            "name": "inset",
            "comment": " A container element that inserts padding around its child\n\n    withBorder child = Layout.stack\n        [ Layout.fill Color.grey\n        , Layout.inset 2 child\n        ]\n",
            "type": "Float -> Layout.Layout -> Layout.Layout"
          },
          {
            "name": "left",
            "comment": " Position two elements horizontally, with the first element taking a given height\n\n    Layout.left 50\n        (Layout.placeholder \"left side\")\n        (Layout.placeholder \"content\")\n",
            "type": "Float -> Layout.Layout -> Layout.Layout -> Layout.Layout"
          },
          {
            "name": "list",
            "comment": " An element that renders a list of children in a vertical list with a given height.\n\nThe list will scroll vertically if there are enough children to exceed the vertical bounds of the list.\n\n    Layout.list 44 (List.map placeholder [\"Item 1\", \"Item 2\", \"Item 3\"])\n",
            "type": "Float -> List Layout.Layout -> Layout.Layout"
          },
          {
            "name": "onClick",
            "comment": " Adds a click listener to an element\n",
            "type": "Signal.Message -> Layout.Layout -> Layout.Layout"
          },
          {
            "name": "placeholder",
            "comment": " An element intended to be a placeholder for something that will be implemented at\na later time.  The placeholder will show the given text and will use the text to generate a\nunique color to fill the placeholder's bounds.\n\nThis element is intended to aid in quick prototyping where you want to reserve an area on the screen\nto implement at a later time.\n\n    view = Layout.top 50\n        (Layout.placeholder \"header\")\n        (Layout.placeholder \"content\")\n",
            "type": "anything -> Layout.Layout"
          },
          {
            "name": "right",
            "comment": " Position two elements horizontally, with the first element taking a given height\n\n    Layout.right 50\n        (Layout.placeholder \"right side\")\n        (Layout.placeholder \"content\")\n",
            "type": "Float -> Layout.Layout -> Layout.Layout -> Layout.Layout"
          },
          {
            "name": "square",
            "comment": " Makes a a centered area with width equal to height\n\n    Layout.square (Layout.placeholder \"square content\")\n",
            "type": "Layout.Layout -> Layout.Layout"
          },
          {
            "name": "stack",
            "comment": " An element that renders a list of children on top of one another in the same bounds.\n\n    Layout.stack\n        [ Layout.image \"background.png\"\n        , Layout.text \"Welcome\"\n        ]\n",
            "type": "List Layout.Layout -> Layout.Layout"
          },
          {
            "name": "svg",
            "comment": " An element displaying an SVG node\n",
            "type": "Layout.RectangularBounds -> Svg.Svg -> Layout.Layout"
          },
          {
            "name": "text",
            "comment": " An element that renders text with a given style.\n\n    Layout.text {size=32,color=Color.darkCharcoal} \"Welcome\"\n",
            "type": "{ size : Int, color : Color.Color } -> String -> Layout.Layout"
          },
          {
            "name": "toFullWindow",
            "comment": " Simplifies rendering an element to fill the window.\n\n    view = Layout.placeholder \"view\"\n    main = Layout.toFullWindow (Signal.constant view)\n",
            "type": "Signal.Signal Layout.Layout -> Signal.Signal Html.Html"
          },
          {
            "name": "toHtml",
            "comment": " Render a Layout to Html.\n\n    view = Layout.placeholder \"view\"\n    main = Layout.toHtml (800, 600) view\n",
            "type": "( Int, Int ) -> Layout.Layout -> Html.Html"
          },
          {
            "name": "top",
            "comment": " Position two elements vertically, with the first element taking a given height\n\n    Layout.top 50\n        (Layout.placeholder \"header\")\n        (Layout.placeholder \"content\")\n",
            "type": "Float -> Layout.Layout -> Layout.Layout -> Layout.Layout"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "bakkemo/elm-collision",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Collision",
        "comment": " this module provides an implementation of the\nGilbert-Johnson-Keerthi (GJK) collision detection algorith for\nconvex objects in 2D. To deal with concave objects, simply\nbreak your larger object into smaller convex shapes.\n\nIt is very efficient, usually converging in one or two iterations.\n\n# Definitions\n@docs Pt, Mink\n\n\n# API\n@docs collision\n\n",
        "aliases": [
          {
            "name": "Mink",
            "comment": " Simple alias for boundary objects bundled with a support function\n",
            "args": [
              "a"
            ],
            "type": "( a, a -> Collision.Pt -> Collision.Pt )"
          },
          {
            "name": "Pt",
            "comment": " Simple alias for a two dimentional point\n",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "collision",
            "comment": " Determine if there is a collision between two objects.\nObject information is given as a pair of: a boundary representation\nof type a, and a support function for that representaion f : a -> Pt -> Pt\nwhich takes the boundary representation and a direction vector, and\nreturns the point of the boundary furthest along the direction.\nPt here is used as an alias for (Float, Float). The first argument\nto collision is max recursion depth, which might come in handy in\nthe case where you are writing your own support functions.\n\n    poly1 = [(-15,-10),(0,15),(12,-5)] \n    poly2 = [(-9,13),(6,13),(-2,22)] \n\n    collision 10 (poly1, polySupport) (poly2, polySupport) == True\n",
            "type": "Int -> Collision.Mink a -> Collision.Mink b -> Bool"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "bartavelle/json-helpers",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Json.Helpers",
        "comment": " This module exposes helper functions for encoding sum types and maps. It was designed\nwith an eye for compatibility with the `aeson` library from the Haskell world, which explains\nwhy the various functions have such peculiar names.\n\nIf you require Haskell interop, please take a look at the [elm-bridge](https://hackage.haskell.org/package/elm-bridge) package that\nwill make it easy to derive the Elm code alongside the Haskell one.\n\n# The ObjectEncoding type\n@docs ObjectEncoding, encodeObject, encodeValue\n\n# Encoding schemes\n\nThe following Elm type will be used as an example for the different encoding schemes.\n\n    type Foo = Bar Int\n             | Baz { a: Int , b: Int }\n             | Qux Int Int\n\n## ObjectWithSingleField\n\n    -- {\"Bar\":5}\n    -- {\"Baz\":{\"a\":4,\"b\":8}}\n    -- {\"Qux\":[98,42]}\n\n@docs decodeSumObjectWithSingleField, encodeSumObjectWithSingleField\n\n## TwoElemArray\n\n    -- [\"Bar\",5]\n    -- [\"Baz\",{\"a\":4,\"b\":8}]\n    -- [\"Qux\",[98,42]]\n\n@docs decodeSumTwoElemArray, encodeSumTwoElementArray\n\n## TaggedObject\n\n    -- {\"tag\":\"Bar\",\"content\":5}\n    -- {\"tag\":\"Baz\",\"a\":4,\"b\":8}\n    -- [\"tag\":\"Qux\",\"content\":[98,42]}\n\n@docs decodeSumTaggedObject, encodeSumTaggedObject\n\n## Unary sum types\n\n@docs decodeSumUnaries\n\n# Containers helpers\n\n@docs decodeMap, encodeMap, jsonEncDict, jsonDecDict, encodeSet, decodeSet, maybeEncode\n\n",
        "aliases": [],
        "types": [
          {
            "name": "ObjectEncoding",
            "comment": " This is an opaque type that is to be used to give hints when using the `TaggedObject` encoding. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "decodeMap",
            "comment": " Helper function for decoding map-like objects. It takes a decoder for the key type and a decoder for the value type. ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "decodeSet",
            "comment": " A helper for set decoding ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder (Set.Set comparable)"
          },
          {
            "name": "decodeSumObjectWithSingleField",
            "comment": " Decode objects encoded using the `ObjectWithSingleField` scheme.\nThe first argument is the human readable name of the type of data, and will be used in error messages.\nThe second argument is a `Dict` where the keys are the tags of each constructor of the sum type and the values\nare decoders for each case.\n",
            "type": "String -> Dict.Dict String (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "decodeSumTaggedObject",
            "comment": " Decode objects encoded using the `TaggedObject` scheme.\nThe first argument is the human readable name of the type of data, and will be used in error messages.\nThe second argument is a `Dict` where the keys are the tags of each constructor of the sum type and the values\nare decoders for each case.\n\nCompared to the other functions, it expects a set of `String`s. This sets lists all the constructor tags that have an object content,\nsuch as the `Baz` constructor in the example.\n",
            "type": "String -> String -> String -> Dict.Dict String (Json.Decode.Decoder a) -> Set.Set String -> Json.Decode.Decoder a"
          },
          {
            "name": "decodeSumTwoElemArray",
            "comment": " Decode objects encoded using the `TwoElemArray` scheme.\nThe first argument is the human readable name of the type of data, and will be used in error messages.\nThe second argument is a `Dict` where the keys are the tags of each constructor of the sum type and the values\nare decoders for each case.\n",
            "type": "String -> Dict.Dict String (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "decodeSumUnaries",
            "comment": " Helper for decoding enum-like sum types ",
            "type": "String -> Dict.Dict String a -> Json.Decode.Decoder a"
          },
          {
            "name": "encodeMap",
            "comment": " Helper function for encoding map-like objects. It takes an encoder for the key type and an encoder for the value type ",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "encodeObject",
            "comment": " Creates an `ObjectEncoding`, just like the `Json.Encode.object` function. ",
            "type": "List ( String, Json.Decode.Value ) -> Json.Helpers.ObjectEncoding"
          },
          {
            "name": "encodeSet",
            "comment": " A helper for set encoding ",
            "type": "(comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value"
          },
          {
            "name": "encodeSumObjectWithSingleField",
            "comment": " Encode objects using the `WithSingleField` scheme.\nThe first argument is a function that, for each possible value `a`, must return a `String` tag\ndescribing it along with an `ObjectEncoding`.\n",
            "type": "(a -> ( String, Json.Helpers.ObjectEncoding )) -> a -> Json.Decode.Value"
          },
          {
            "name": "encodeSumTaggedObject",
            "comment": " Encode objects using the `TaggedObject` scheme.\nThe first argument is a function that, for each possible value `a`, must return a `String` tag\ndescribing it along with an `ObjectEncoding`.\n",
            "type": "String -> String -> (a -> ( String, Json.Helpers.ObjectEncoding )) -> a -> Json.Decode.Value"
          },
          {
            "name": "encodeSumTwoElementArray",
            "comment": " Encode objects using the `TwoElementArray` scheme.\nThe first argument is a function that, for each possible value `a`, must return a `String` tag\ndescribing it along with an `ObjectEncoding`.\n",
            "type": "(a -> ( String, Json.Helpers.ObjectEncoding )) -> a -> Json.Decode.Value"
          },
          {
            "name": "encodeValue",
            "comment": " Creates an `ObjectEncoding` from any type of `Value`. You should not use this for `Value`s that are actually objects. ",
            "type": "Json.Decode.Value -> Json.Helpers.ObjectEncoding"
          },
          {
            "name": "jsonDecDict",
            "comment": " An alias to `decodeMap` that is compatible with the naming convention from `elm-bridge` ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "jsonEncDict",
            "comment": " An alias to `encodeMap` that is compatible with the naming convention from `elm-bridge` ",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "maybeEncode",
            "comment": " Encodes an optional value, using `null` when there is `Nothing` ",
            "type": "(a -> Json.Decode.Value) -> Maybe.Maybe a -> Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "brenden/elm-tree-diagram",
    "version": "1.0.0",
    "docs": [
      {
        "name": "TreeDiagram",
        "comment": " This library provides functions drawing diagrams of trees.\n\n# Building a tree\n@docs Tree, node\n\n# Drawing a tree\n@docs NodeDrawer, EdgeDrawer, draw\n\n# Tree layout options\n@docs TreeLayout, defaultTreeLayout, TreeOrientation, leftToRight, rightToLeft, bottomToTop, topToBottom\n",
        "aliases": [
          {
            "name": "EdgeDrawer",
            "comment": " Alias for functions that draw edges between nodes\n",
            "args": [],
            "type": "TreeDiagram.Coord -> TreeDiagram.Coord -> Graphics.Collage.Form"
          },
          {
            "name": "NodeDrawer",
            "comment": " Alias for functions that draw nodes\n",
            "args": [
              "a"
            ],
            "type": "a -> Graphics.Collage.Form"
          },
          {
            "name": "TreeLayout",
            "comment": " Options to be passed to `draw` for laying out the tree:\n  * orientation: direction of the tree from root to leaves.\n  * levelHeight: vertical distance between parent and child nodes.\n  * subtreeDistance: horizontal distance between subtrees.\n  * siblingDistance: horizontal distance between siblings. This is usually set\n    below `subtreeDistance` to produce a clearer distinction between sibling\n    nodes and non-siblings on the same level of the tree.\n  * padding: amount of space to leave around the edges of the diagram.\n",
            "args": [],
            "type": "{ orientation : TreeDiagram.TreeOrientation , levelHeight : Int , siblingDistance : Int , subtreeDistance : Int , padding : Int }"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " A tree data structure\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "TreeOrientation",
            "comment": " Direction of the tree from root to leaves\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bottomToTop",
            "comment": " Bottom-to-top tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          },
          {
            "name": "defaultTreeLayout",
            "comment": " A set of default values that should be modified to create your TreeLayout\n",
            "type": "TreeDiagram.TreeLayout"
          },
          {
            "name": "draw",
            "comment": " Draws the tree using the provided functions for drawings nodes and edges.\n    TreeLayout contains some more options for positioning the tree.\n",
            "type": "TreeDiagram.TreeLayout -> TreeDiagram.NodeDrawer a -> TreeDiagram.EdgeDrawer -> TreeDiagram.Tree a -> Graphics.Element.Element"
          },
          {
            "name": "leftToRight",
            "comment": " Left-to-right tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          },
          {
            "name": "node",
            "comment": " Constructs a tree out of a root value and a list of subtrees\n",
            "type": "a -> List (TreeDiagram.Tree a) -> TreeDiagram.Tree a"
          },
          {
            "name": "rightToLeft",
            "comment": " Right-to-left tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          },
          {
            "name": "topToBottom",
            "comment": " Top-to-bottom tree orientation\n",
            "type": "TreeDiagram.TreeOrientation"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "burabure/elm-collision",
    "version": "2.0.2",
    "docs": [
      {
        "name": "Collision2D",
        "comment": " Detect collision/intersection of geometry in a defined 2D coordinate space\nAKA tell me when objects are touching or overlapping.\n\nAll objects use the same coordinate system you might see in an algebra or\nphysics problem, origin (0,0) is at the center of the object,\nso they're compatible with the core Graphics.Collage coordinate system.\n\n# Basic geometry\n@docs Rectangle, rectangle, Circle, circle\n\n# Rectangle to Rectangle Collision\n@docs axisAlignedBoundingBox, rectangleSide, Side\n\n# Circle to Circle Collision\n@docs circleToCircle\n",
        "aliases": [],
        "types": [
          {
            "name": "Circle",
            "comment": " Represents circular geometry.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Rectangle",
            "comment": " Represents rectangular hitbox geometry.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Side",
            "comment": " Represents sides of a Rectangle\n",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Bottom",
                []
              ],
              [
                "Left",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "axisAlignedBoundingBox",
            "comment": " Super efficient collision detection between\ntwo Rectangles that are axis aligned — meaning no rotation.\n\n    rect1 = rectangle 5 5 10 10\n    rect2 = rectangle 7 5 10 10\n\n    axisAlignedBoundingBox rect1 rect2 -- True\n    -- rect1 is coliding with rect2\n",
            "type": "Collision2D.Rectangle -> Collision2D.Rectangle -> Bool"
          },
          {
            "name": "circle",
            "comment": " Create a Circle Hitbox from from coordinates (cx, cy) and geometry (radius)\n\nArguments:\n\n    circle centerX centerY radius\n\nExample:\n\n    circle 5 5 10 -- a radius 10 circle centered on coordinates 5,5\n",
            "type": "Float -> Float -> Float -> Collision2D.Circle"
          },
          {
            "name": "circleToCircle",
            "comment": " Super efficient collision detection between two Circles\n\n    circle1 = circle 5 5 5\n    circle2 = circle 7 5 5\n\n    circleToCircle circle1 circle2 -- True\n    -- circle1 is coliding with circle2\n",
            "type": "Collision2D.Circle -> Collision2D.Circle -> Bool"
          },
          {
            "name": "rectangle",
            "comment": " Create a Rectangle hitbox from coordinates (cx, cy) and geometry (width and height)\n\nArguments:\n\n    rectangle centerX centerY width height\n\nExample:\n\n    rectangle 5 5 10 10\n    -- a 10 x 10 rectangle centered on coordinates 5,5\n",
            "type": "Float -> Float -> Float -> Float -> Collision2D.Rectangle"
          },
          {
            "name": "rectangleSide",
            "comment": " Very efficiently detect which side of a Rectangle is colliding with another Rectangle\n\n    rect1 = rectangle 5 5 10 10\n    rect2 = rectangle 7 5 10 10\n\n    rectangleSide rect1 rect2 -- Just Right\n    -- rect1 is coliding with it's right side onto rect2\n",
            "type": "Collision2D.Rectangle -> Collision2D.Rectangle -> Maybe.Maybe Collision2D.Side"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "camjc/elm-chart",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Chart",
        "comment": " An SVG chart library.\n\n# Pie\n@docs pie\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "pie",
            "comment": " Draws a pie chart of given diameter of the dataset.\n\n    Chart.pie 300 [{color = \"#0ff\", value = 3}, {color = \"purple\", value = 27}]\n",
            "type": "Int -> Chart.Dataset -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ccapndave/elm-effects-extra",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Effects.Extra.Infix",
        "comment": " Infix versions of functions in Effects.Extra\n\n@docs (:>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": ":>",
            "comment": " An infix version of Effects.Extra.pipeUpdate.  Easy to remember because the\ncolon in the symbol represents piping two things through the chain (model and effects!).\n",
            "type": "( m, Effects.Effects a ) -> (m -> ( m, Effects.Effects a )) -> ( m, Effects.Effects a )",
            "associativity": "left",
            "precedence": 0
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Effects.Extra",
        "comment": " Convenience functions for working with effects in Elm\n\n@docs pipeUpdate\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "pipeUpdate",
            "comment": " A function allowing you to compose calls to update.  Most useful when used\nin its infix form to make an update pipeline.\n\n    import Effects.Extra.Infix exposing ((:>))\n\n    update : Action -> Model -> (Model, Effects Action)\n    update action model =\n      ComposedAction ->\n        (model, Effects.none)\n          :> update AnotherAction\n          :> update YetAnotherAction\n          :> update SubComponent.SomeAction\n\n",
            "type": "( m, Effects.Effects a ) -> (m -> ( m, Effects.Effects a )) -> ( m, Effects.Effects a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "chendrix/elm-matrix",
    "version": "3.1.0",
    "docs": [
      {
        "name": "Matrix.Random",
        "comment": " This module lets you generate random Matrices.\n\n@docs matrix, matrixUsing\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matrix",
            "comment": " Generate a matrix with a random width and height, filled with random elements.\n\n  matrix (Random.int 1 4) (Random.int 2 5) (Random.bool)\n\nThe example above will generate you a matrix anywhere between 1-4 rows, 2-5 columns, filled with random Booleans.\n\n",
            "type": "Random.Generator Int -> Random.Generator Int -> Random.Generator a -> Random.Generator (Matrix.Matrix a)"
          },
          {
            "name": "matrixUsing",
            "comment": " Generate a matrix of a random width and height, but whose elements are generated via a function given the location of that element in the matrix.\n\n    matrix\n      (Random.int 1 4)\n      (Random.int 1 2)\n      (\\location ->\n        if (row loc % 2 == 0) then\n          True\n        else\n          False\n      )\n\nIn the example above, if it makes a 4x2 matrix, it will be\n\n    T T T T\n    F F F F\n\n",
            "type": "Random.Generator Int -> Random.Generator Int -> (Matrix.Location -> a) -> Random.Generator (Matrix.Matrix a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Matrix",
        "comment": " A library for creating and using 2-D matrices/grids. Geared towards\n2-D games.\n\n# Locations\n\n@docs Location, loc, row, col\n\n# Matrices\n\n@docs Matrix\n\n## Create\n@docs matrix, square, fromList\n\n## Transform\n@docs map, mapWithLocation, flatten\n\n## Get and Set\n@docs get, set, update\n\n## Properties\n@docs colCount, rowCount\n\n## Convert to other types\n@docs toList\n\n",
        "aliases": [
          {
            "name": "Location",
            "comment": " A representation of a row number and a column number, used to locate and access elements in a matrix.\n",
            "args": [],
            "type": "( Int, Int )"
          },
          {
            "name": "Matrix",
            "comment": " An ordered collection of elements, all of a particular type, arranged into `m` rows and `n` columns.\n\n",
            "args": [
              "a"
            ],
            "type": "Array.Array (Array.Array a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "col",
            "comment": " Extract the col number from a location\n\n    col (loc 3 5) == 5\n\n",
            "type": "Matrix.Location -> Int"
          },
          {
            "name": "colCount",
            "comment": " Get the number of columns in a matrix\n",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "flatten",
            "comment": " Convert a matrix to a single list\n\n    let\n      m = fromList [[0, 1], [2, 3], [4, 5]]\n    in\n      flatten m == [0, 1, 2, 3, 4, 5]\n",
            "type": "Matrix.Matrix a -> List a"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of lists into a matrix\n\n    fromList [[1, 0], [0, 1]] == square 2 (\\l -> if row l == col l then 1 else 0)\n",
            "type": "List (List a) -> Matrix.Matrix a"
          },
          {
            "name": "get",
            "comment": " Get the element at a particular location\n\n    get (loc -1 1) (square 2 (\\_ -> True)) == Nothing\n\n    get (loc 1 1) (fromList [[0, 1], [2, 3]]) == Just 3\n",
            "type": "Matrix.Location -> Matrix.Matrix a -> Maybe.Maybe a"
          },
          {
            "name": "loc",
            "comment": " Turn two integers into a location\n",
            "type": "Int -> Int -> Matrix.Location"
          },
          {
            "name": "map",
            "comment": " Apply the function to every element in the matrix\n\n    map not (fromList [[True, False], [False, True]]) == fromList [[False, True], [True, False]]\n",
            "type": "(a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "mapWithLocation",
            "comment": " Apply the function to every element in the list, where the first function argument\nis the location of the element.\n\n    let\n      m = (square 2 (\\_ -> 1))\n      f location element = if row location == col location\n                            then element * 2\n                            else element\n    in\n      mapWithLocation f m == fromList [[2, 1], [1, 2]]\n\n",
            "type": "(Matrix.Location -> a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "matrix",
            "comment": " Initialize a new matrix of size `m x n`.\nDelegates to a function of type `Location -> a` to determine value to\nplace at each element in the matrix.\n\n    matrix 3 5 (\\location ->\n      if (isEven (row location)) then \"Hello\" else \"World\")\n\nwill give back the matrix\n\n    Hello Hello Hello Hello Hello\n    World World World World World\n    Hello Hello Hello Hello Hello\n",
            "type": "Int -> Int -> (Matrix.Location -> a) -> Matrix.Matrix a"
          },
          {
            "name": "row",
            "comment": " Extract the row number from a location\n\n    row (loc 3 5) == 3\n\n",
            "type": "Matrix.Location -> Int"
          },
          {
            "name": "rowCount",
            "comment": " Get the number of rows in a matrix\n",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular location\n\n    set (loc -1 1) 42 (square 2 (\\_ -> True)) == square 2 (\\_ -> True)\n\n    set (loc 1 1) 42 (fromList [[0, 1], [2, 3]]) == fromList [[0, 1], [2, 42]]\n",
            "type": "Matrix.Location -> a -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "square",
            "comment": " Create a square matrix of a certain size\n\n    square 2 (\\_ -> 'H') == H H\n                            H H\n",
            "type": "Int -> (Matrix.Location -> a) -> Matrix.Matrix a"
          },
          {
            "name": "toList",
            "comment": " Convert a matrix to a list of lists\n\n    toList (fromList [[1, 0], [0, 1]]) == [[1, 0], [0, 1]]\n\n",
            "type": "Matrix.Matrix a -> List (List a)"
          },
          {
            "name": "update",
            "comment": " Update the element at a particular location using the current value\n\n",
            "type": "Matrix.Location -> (a -> a) -> Matrix.Matrix a -> Matrix.Matrix a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-array-extra",
    "version": "1.1.2",
    "docs": [
      {
        "name": "Array.Extra",
        "comment": " Convenience functions for working with Array\n\n# Transformations\n@docs update, sliceFrom, sliceUntil\n\n# Higher order helpers\n@docs filterMap, apply, map2, map3, map4, map5\n\n# Zips\n@docs zip, zip3, zip4, zip5\n\n# Slicing / resizing\n@docs resizelRepeat, resizerRepeat, resizelIndexed, resizerIndexed, splitAt, removeAt\n\n# Unsafe\n@docs getUnsafe\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Apply an array of functions to an array of values.\n",
            "type": "Array.Array (a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "filterMap",
            "comment": " Apply a function that may succeed to all values in the array, but only keep the successes.\n\n    String.toInt : String -> Maybe Int\n    filterMap String.toInt (fromList [\"3\", \"4.0\", \"5\", \"hats\"]) == fromList [3,5]\n",
            "type": "(a -> Maybe.Maybe b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "getUnsafe",
            "comment": " Unsafe version of get, don't use this unless you know what you're doing!\n",
            "type": "Int -> Array.Array a -> a"
          },
          {
            "name": "map2",
            "comment": " Combine two arrays, combining them with the given function.\nIf one array is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n    pairs : Array a -> Array b -> Array (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights\n",
            "type": "(a -> b -> result) -> Array.Array a -> Array.Array b -> Array.Array result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Array.Array a -> Array.Array b -> Array.Array c -> Array.Array result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array e -> Array.Array result"
          },
          {
            "name": "removeAt",
            "comment": " Remove the element at the given index\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizelIndexed",
            "comment": " Resize an array from the left, padding the right-hand side with the given index function.\n",
            "type": "Int -> (Int -> a) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizelRepeat",
            "comment": " Resize an array from the left, padding the right-hand side with the given value.\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizerIndexed",
            "comment": " Resize an array from the right, padding the left-hand side with the given index function.\n",
            "type": "Int -> (Int -> a) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "resizerRepeat",
            "comment": " Resize an array from the right, padding the left-hand side with the given value.\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "sliceFrom",
            "comment": " Drop *n* first elements from an array. In other words, slice an array from an index until the very end. Given negative argument, count the end of the slice from the end of the array.\n\n    sliceFrom  5 (fromList [0..9]) == fromList [5,6,7,8,9]\n    sliceFrom -3 (fromList [0..9]) == fromList [7,8,9]\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "sliceUntil",
            "comment": " Take *n* first elements from an array. In other words, slice an array from the very beginning until index not including. Given negative argument, count the beginning of the slice from the end of the array.\n\n    sliceUntil  5 (fromList [0..9]) == fromList [0,1,2,3,4]\n    sliceUntil -3 (fromList [0..9]) == fromList [0,1,2,3,4,5,6]\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "splitAt",
            "comment": " Split an array into two arrays, the first ending at and the second starting at the given index\n",
            "type": "Int -> Array.Array a -> ( Array.Array a, Array.Array a )"
          },
          {
            "name": "update",
            "comment": " Update the element at the index using a function. Returns the array unchanged if the index is out of bounds.\n\n    update  1 ((+)10) (fromList [1,2,3]) == fromList [1,12,3]\n    update  4 ((+)10) (fromList [1,2,3]) == fromList [1,2,3]\n    update -1 ((+)10) (fromList [1,2,3]) == fromList [1,2,3]\n",
            "type": "Int -> (a -> a) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "zip",
            "comment": " Zip arrays into tuples\n",
            "type": "Array.Array a -> Array.Array b -> Array.Array ( a, b )"
          },
          {
            "name": "zip3",
            "comment": "",
            "type": "Array.Array a -> Array.Array b -> Array.Array c -> Array.Array ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": "",
            "type": "Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": "",
            "type": "Array.Array a -> Array.Array b -> Array.Array c -> Array.Array d -> Array.Array e -> Array.Array ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-html-shorthand",
    "version": "10.0.0",
    "docs": [
      {
        "name": "Html.Shorthand",
        "comment": " Shorthands for common Html elements\n\n# Interactive elements (Unsupported)\nThe following elements are not currently well supported and do not have shorthands:\n\n* [&lt;details&gt;, &lt;summary&gt;](http://caniuse.com/#feat=details)\n* [&lt;menu&gt;, &lt;menuitem&gt;](http://caniuse.com/#feat=menu)\n\n# Conventions\nThe following two conventions are used for shorthands. One example is provided for each.\n\n## Elision form\nMost attributes of the node are elided, only one or two arguments needs to be supplied.\n\n@docs div_\n\n## Idiomatic form\n\nThis form attempts to take a common sense record of parameters. This is a more expansive shorthand which\nwill not satisfy every need, but takes care of the usual cases while still encouraging uniformity.\n\n@docs img'\n\n# Basic types\nThe following types are all aliases for `String` and as such, only serve documentation purposes.\n\n@docs IdString, ClassString, UrlString, TextString, TextDirection\n\n# Event / handler types\n@docs EventDecodeError, FormUpdate, FieldUpdate, SelectUpdate, fieldUpdate, fieldUpdateContinuous, fieldUpdateFocusLost, fieldUpdateFallbackFocusLost, fieldUpdateFallbackContinuous\n\n# Element types\n@docs ClassParam, ClassIdParam, ClassCiteParam, AnchorParam, ModParam, ImgParam, IframeParam, EmbedParam, ObjectParam, MediaParam, VideoParam, AudioParam, FormParam, FieldsetParam, LabelParam, InputFieldParam, InputTextParam, InputMaybeTextParam, InputFloatParam, InputMaybeFloatParam, InputIntParam, InputMaybeIntParam, InputUrlParam, InputMaybeUrlParam, ButtonParam, SelectParam, OptionParam, OutputParam, ProgressParam, MeterParam\n\n# Encoders\n@docs encodeId, encodeClass\n\n# Idiomatic attributes\n@docs id', class'\n\n# Sections\n@docs body_, body', section_, section', nav_, nav', article_, article', aside'\n@docs h1_, h1', h2_, h2', h3_, h3', h4_, h4', h5_, h5', h6_, h6', header_, header', footer_, footer'\n@docs address_, address', main_\n\n# Grouping content\n@docs p_, p', pre_, pre', blockquote_, blockquote', ol_, ol', ul_, ul', li_, li', dl_, dl', dt', dd_, dd', hr_\n@docs figure', figcaption_, figcaption'\n@docs div_, div', a_, a', em_, em', strong_, strong', small_, small', s_, s'\n@docs cite_, cite', q_, q', dfn', abbr_, abbr'\n* time_ (TODO)\n* time' (TODO)\n@docs code_, code', var_, var', samp_, samp', kbd_, kbd'\n@docs sub_, sub', sup_, sup', i_, i', b_, b', u_, u', mark_, mark'\n@docs ruby_, ruby', rt_, rt', rp_, rp', bdi_, bdi', bdo'\n@docs span_, span'\n@docs br', wbr'\n\n# Edits\n@docs ins_, ins', del_, del'\n\n# Embedded content\n@docs img', img_, iframe', embed', object'\n@docs param', video_, video', audio_, audio'\n* source' (TODO)\n* track' (TODO)\n* svg' (TODO)\n* math' (TODO)\n\n# Tabular data\n@docs table_, table', caption_, caption'\n* colgroup' (TODO)\n* col' (TODO)\n@docs tbody_, tbody', thead_, thead', tfoot_, tfoot', tr_, tr', td_, td', th_, th'\n\n# Forms\n@docs form', fieldset_, fieldset', legend_, legend', label_, label'\n@docs inputField', inputText', inputMaybeText', inputFloat', inputMaybeFloat', inputInt', inputMaybeInt', inputUrl', inputMaybeUrl'\n* radio' (TODO)\n* checkbox' (TODO)\n@docs button_, button', buttonLink_, buttonLink', buttonSubmit_, buttonSubmit', buttonReset_, buttonReset'\n@docs select'\n* datalist' (TODO)\n* optgroup' (TODO)\n@docs option_, option'\n* textarea_ (TODO)\n* textarea' (TODO)\n* keygen_ (TODO)\n* keygen' (TODO)\n@docs output', progress', meter'\n\n",
        "aliases": [
          {
            "name": "AnchorParam",
            "comment": " See [AnchorParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#AnchorParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.AnchorParam"
          },
          {
            "name": "AudioParam",
            "comment": " See [AudioParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#AudioParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.AudioParam"
          },
          {
            "name": "ButtonParam",
            "comment": " See [ButtonParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ButtonParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ButtonParam"
          },
          {
            "name": "ClassCiteParam",
            "comment": " See [ClassCiteParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ClassCiteParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassCiteParam"
          },
          {
            "name": "ClassIdParam",
            "comment": " See [ClassIdParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ClassIdParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassIdParam"
          },
          {
            "name": "ClassParam",
            "comment": " See [ClassParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ClassParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassParam"
          },
          {
            "name": "ClassString",
            "comment": " Class parameters will automatically be encoded via `encodeClass`\n",
            "args": [],
            "type": "Html.Shorthand.Type.ClassString"
          },
          {
            "name": "EmbedParam",
            "comment": " See [EmbedParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#EmbedParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.EmbedParam"
          },
          {
            "name": "EventDecodeError",
            "comment": " A field error is generated when an input fails to parse its input string during an attempt to produce the output value.\nThis gives the user an opportunity to specify a fallback behaviour or simply ignore the error, leaving the input in an intermediate state.\n\n* *event* - json event that generated this error\n* *reason* - error string describing the parse error\n\nSee also [EventDecodeError](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#EventDecodeError)\n\n",
            "args": [],
            "type": "Html.Shorthand.Type.EventDecodeError"
          },
          {
            "name": "FieldUpdate",
            "comment": " Update configuration for `input` fields.\n\n* *onInput* - continuously send messages on any input event (`onInput`)\n* *onEnter* - a message to send whenever the enter key is hit\n* *onKeyboardLost* - a message to send whenever the input field loses the keyboard cursor\n\nIn the future, if this can be made efficient, this may also support:\n\n* *onMouseMove* - a message to send whenever the mouse moves while the input field has keyboard focus\n\nSee also [FieldUpdate](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FieldUpdate)\n\n",
            "args": [
              "a"
            ],
            "type": "Html.Shorthand.Type.FieldUpdate a"
          },
          {
            "name": "FieldsetParam",
            "comment": " See [FieldsetParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FieldsetParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.FieldsetParam"
          },
          {
            "name": "FormParam",
            "comment": " See [FormParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FormParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.FormParam"
          },
          {
            "name": "FormUpdate",
            "comment": " Update configuration for a `form` element.\n\n* *onSubmit* - a submit action was triggered\n* *onEnter* - action to perform on enter key... see also [virtual-dom/pull/5#issuecomment-88444513](https://github.com/evancz/virtual-dom/pull/5#issuecomment-88444513)\n\nSee also [FormUpdate](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#FormUpdate)\n\n",
            "args": [],
            "type": "Html.Shorthand.Type.FormUpdate"
          },
          {
            "name": "IdString",
            "comment": " Id parameters will automatically be encoded via `encodeId`\n",
            "args": [],
            "type": "Html.Shorthand.Type.IdString"
          },
          {
            "name": "IframeParam",
            "comment": " See [IframeParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#IframeParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.IframeParam"
          },
          {
            "name": "ImgParam",
            "comment": " See [ImgParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ImgParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ImgParam"
          },
          {
            "name": "InputFieldParam",
            "comment": " See [InputFieldParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputFieldParam)\n",
            "args": [
              "a"
            ],
            "type": "Html.Shorthand.Type.InputFieldParam a"
          },
          {
            "name": "InputFloatParam",
            "comment": " See [InputFloatParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputFloatParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputFloatParam"
          },
          {
            "name": "InputIntParam",
            "comment": " See [InputIntParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputIntParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputIntParam"
          },
          {
            "name": "InputMaybeFloatParam",
            "comment": " See [InputMaybeFloatParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeFloatParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputMaybeFloatParam"
          },
          {
            "name": "InputMaybeIntParam",
            "comment": " See [InputMaybeIntParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeIntParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputMaybeIntParam"
          },
          {
            "name": "InputMaybeTextParam",
            "comment": " See [InputMaybeTextParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeTextParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputMaybeTextParam"
          },
          {
            "name": "InputMaybeUrlParam",
            "comment": " See [InputMaybeUrlParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputMaybeUrlParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputMaybeUrlParam"
          },
          {
            "name": "InputTextParam",
            "comment": " See [InputTextParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputTextParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputTextParam"
          },
          {
            "name": "InputUrlParam",
            "comment": " See [InputUrlParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#InputUrlParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.InputUrlParam"
          },
          {
            "name": "LabelParam",
            "comment": " See [LabelParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#LabelParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.LabelParam"
          },
          {
            "name": "MediaParam",
            "comment": " See [MediaParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#MediaParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.MediaParam"
          },
          {
            "name": "MeterParam",
            "comment": " See [MeterParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#MeterParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.MeterParam"
          },
          {
            "name": "ModParam",
            "comment": " See [ModParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ModParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ModParam"
          },
          {
            "name": "ObjectParam",
            "comment": " See [ObjectParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ObjectParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ObjectParam"
          },
          {
            "name": "OptionParam",
            "comment": " See [OptionParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#OptionParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.OptionParam"
          },
          {
            "name": "OutputParam",
            "comment": " See [OutputParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#OutputParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.OutputParam"
          },
          {
            "name": "ProgressParam",
            "comment": " See [ProgressParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#ProgressParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.ProgressParam"
          },
          {
            "name": "SelectParam",
            "comment": " See [SelectParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#SelectParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.SelectParam"
          },
          {
            "name": "SelectUpdate",
            "comment": " Update configuration for a `select` element.\n\n* *onSelect* - the selected option has changed.\n\nSee also [SelectUpdate](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#SelectUpdate)\n\n",
            "args": [
              "a"
            ],
            "type": "Html.Shorthand.Type.SelectUpdate a"
          },
          {
            "name": "TextString",
            "comment": " The string passed to a function taking this parameter will be rendered as textual content via `text`.\n",
            "args": [],
            "type": "Html.Shorthand.Type.TextString"
          },
          {
            "name": "UrlString",
            "comment": " Only valid urls should be passed to functions taking this parameter\n",
            "args": [],
            "type": "Html.Shorthand.Type.UrlString"
          },
          {
            "name": "VideoParam",
            "comment": " See [VideoParam](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand-Type#VideoParam)\n",
            "args": [],
            "type": "Html.Shorthand.Type.VideoParam"
          }
        ],
        "types": [
          {
            "name": "TextDirection",
            "comment": " Direction to output text\n",
            "args": [],
            "cases": [
              [
                "LeftToRight",
                []
              ],
              [
                "RightToLeft",
                []
              ],
              [
                "AutoDirection",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "a'",
            "comment": "",
            "type": "Html.Shorthand.AnchorParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "a_",
            "comment": " [&lt;a&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) represents a hyperlink , linking to another resource.\n",
            "type": "Html.Shorthand.UrlString -> Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "abbr'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "abbr_",
            "comment": " [&lt;abbr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr) represents an abbreviation or an acronym ; the expansion of the\nabbreviation can be represented in the title attribute.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "address'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "address_",
            "comment": " [&lt;address&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address) defines a section containing contact information.\n\n**Do:**\n* [place inside the &lt;footer&gt; where appropriate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address#Summary)\n\n**Don't:**\n* [represent an arbitrary, unrelated address](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address#Summary)\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "article'",
            "comment": "",
            "type": "Html.Shorthand.ClassIdParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "article_",
            "comment": " [&lt;article&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article) defines self-contained content that could exist independently of the rest\nof the content.\n\n**Do:**\n* [use &lt;article&gt; for self-contained components with informational content](http://html5doctor.com/the-article-element/)\n* [use &lt;article&gt; for blog entries, user-submitted comments, interactive educational gadgets](http://html5doctor.com/the-article-element/)\n\n**Don't:**\n* [confuse &lt;article&gt; with &lt;section&gt; which need not be self-contained](http://www.brucelawson.co.uk/2010/html5-articles-and-sections-whats-the-difference/)\n\n",
            "type": "Html.Shorthand.IdString -> List Html.Html -> Html.Html"
          },
          {
            "name": "aside'",
            "comment": " [&lt;aside&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside) defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
            "type": "Html.Shorthand.ClassIdParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "audio'",
            "comment": "",
            "type": "Html.Shorthand.AudioParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "audio_",
            "comment": " [&lt;audio&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) represents a sound or audio stream.\n\nDoesn't allow for &lt;track&gt;s &lt;source&gt;s, please use `audio` for that.\n",
            "type": "Html.Shorthand.UrlString -> Html.Html"
          },
          {
            "name": "b'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "b_",
            "comment": " [&lt;b&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b) represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate voice.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "bdi'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "bdi_",
            "comment": " [&lt;bdi&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi) represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "bdo'",
            "comment": " [&lt;bdo&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo) represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
            "type": "Html.Shorthand.TextDirection -> List Html.Html -> Html.Html"
          },
          {
            "name": "blockquote'",
            "comment": "",
            "type": "Html.Shorthand.ClassCiteParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "blockquote_",
            "comment": " [&lt;blockquote&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote) represents a content that is quoted from another source.\n\nThe idiomatic form uses a cite url, but an elision form is also provided.\n\n**Don't:**\n* use blockquote for short, inline quotations, we have &lt;`q'`&gt; for that\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "body'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "body_",
            "comment": " [&lt;body&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body) represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "br'",
            "comment": " [&lt;br&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br) represents a line break.\n",
            "type": "Html.Html"
          },
          {
            "name": "button'",
            "comment": "",
            "type": "Html.Shorthand.ButtonParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "buttonLink'",
            "comment": "",
            "type": "Html.Shorthand.ButtonParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "buttonLink_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Signal.Address a -> a -> Html.Html"
          },
          {
            "name": "buttonReset'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "buttonReset_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "buttonSubmit'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "buttonSubmit_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "button_",
            "comment": " [&lt;button&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) represents a button.\n",
            "type": "Html.Shorthand.TextString -> Signal.Address a -> a -> Html.Html"
          },
          {
            "name": "caption'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "caption_",
            "comment": " [&lt;caption&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption) represents the title of a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "cite'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "cite_",
            "comment": " [&lt;cite&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite) represents the title of a work.\n\n**Do:**\n* [consider using an anchor inside of the cite to link to the origin](http://html5doctor.com/cite-and-blockquote-reloaded/)\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "class'",
            "comment": " Encoded class attribute. Uses `encodeClass` to ensure that the classes are nicely normalized.\n",
            "type": "Html.Shorthand.ClassString -> Html.Attribute"
          },
          {
            "name": "code'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "code_",
            "comment": " [&lt;code&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code) represents computer code.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "dd'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "dd_",
            "comment": " [&lt;dd&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) represents the definition of the terms immediately listed before it.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "del'",
            "comment": "",
            "type": "Html.Shorthand.ModParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "del_",
            "comment": " [&lt;del&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del) defines a removal from the document.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "dfn'",
            "comment": " [&lt;dfn&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn) represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
            "type": "Html.Shorthand.ClassIdParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "div'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "div_",
            "comment": " [&lt;div&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div) represents a generic container with no special meaning.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "dl'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "dl_",
            "comment": " [&lt;dl&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl) defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "dt'",
            "comment": " [&lt;dt&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt) represents a term defined by the next `dd`.\n",
            "type": "Html.Shorthand.ClassIdParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "em'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "em_",
            "comment": " [&lt;em&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em) represents emphasized text, like a stress accent.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "embed'",
            "comment": " [&lt;embed&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed) represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
            "type": "Html.Shorthand.EmbedParam -> Html.Html"
          },
          {
            "name": "encodeClass",
            "comment": " A simplistic way of encoding of `class` attributes into a [sane format](http://stackoverflow.com/a/72577).\nThis is used internally by all of the shorthands that take a `ClassString`.\n\n* Everything is turned into lowercase\n* Only alpha-numeric characters (a-z,A-Z,0-9), hyphens (-) and underscores (_) are passed through the filter.\n* Trim hyphens (-) and underscores (_) on the sides of each class.\n* If the first character is a number, 'x' will be prepended.\n* Empty strings are allowed\n\nE.g.\n\n    encodeClass \"Color.encoding: BLUE-GREEN\" == \"colorencoding blue-green\"\n    encodeClass \"99-bottles... 98-bottles\" == \"x99-bottles x98-bottles\"\n    encodeClass \"_internal-class-\" == \"internal-class\"\n    encodeClass \" \\t \\n\" == \"\"\n\n",
            "type": "Html.Shorthand.ClassString -> Html.Shorthand.ClassString"
          },
          {
            "name": "encodeId",
            "comment": " A simplistic way of encoding `id` attributes into a [sane format](http://stackoverflow.com/a/72577).\nThis is used internally by all of the shorthands that take an `IdString`.\n\n* Everything is turned into lowercase\n* Only alpha-numeric characters (a-z,A-Z,0-9), hyphens (-) and underscores (_) are passed through the filter.\n* Trim hyphens (-) and underscores (_) off the sides.\n* If the first character is a number, 'x' will be prepended.\n* Empty strings are allowed\n\nE.g.\n\n    encodeId \"Elmo teaches Elm!\" == \"elmo-teaches-elm\"\n    encodeId \"99 bottles of beer, 98 bottles...\" == \"x99-bottles-of-beer-98-bottles\"\n    encodeId \"_internal- -<-identifier->-\" == \"internal-identifier\"\n    encodeId \" \\t \\n\" == \"\"\n\n",
            "type": "Html.Shorthand.IdString -> Html.Shorthand.IdString"
          },
          {
            "name": "fieldUpdate",
            "comment": " Default field update handlers. Use this to select only one or two handlers.\n\n    { fieldUpdate\n    | onInput <- Just (\\val -> Signal.send updates (MyEvent val))\n    }\n\n",
            "type": "Html.Shorthand.FieldUpdate a"
          },
          {
            "name": "fieldUpdateContinuous",
            "comment": " Good configuration for continuously updating fields that don't have any invalid states, or are restricted by a pattern.\n",
            "type": "{ onInput : a -> Signal.Message } -> Html.Shorthand.FieldUpdate a"
          },
          {
            "name": "fieldUpdateFallbackContinuous",
            "comment": " Continuously update the field, handling invalid states on any input event.\nUse this configuration to generate error notifications rapidly.\n\n    inputField'\n      { update = fieldUpdateFallbackContinuous\n                  { -- Show an error notification (e.g. highlight the input field)\n                    onFallback _ = Channel.send action InvalidTemperature\n                  , -- Update the temperature if it parsed correctly\n                    onInput v = Channel.send action <| SetTemperature v\n                  }\n      , ...\n      }\n\nNote that this configuration does not work well with `inputFloat'`/`inputMaybeFloat'` and `inputInt'`/`inputMaybeInt'` fields due to\nthe strange way that browsers treat numeric inputs. This update method can be used to implement custom field types however.\n\n",
            "type": "{ onFallback : String -> Signal.Message , onInput : a -> Signal.Message } -> Html.Shorthand.FieldUpdate a"
          },
          {
            "name": "fieldUpdateFallbackFocusLost",
            "comment": " Continuously update the field, handling invalid states only when the focus is lost.\nThe input element will try to consolidate the field with its value in all of these scenarios:\n\n* During input event, if and only if the input parses correctly\n* When the return key (ENTER) is hit; resets to the last known value if it couldn't parse\n* When the keyboard cursor is moved to a different element; resets to the last known value if it couldn't parse\n\nIn the future, if this can be made efficient, it will also support:\n* When the element has keyboard focus and the mouse cursor is moved ; resets to the last known value if it couldn't parse\n\nThis function takes an explicit fallback function that can usually be set to the previous value in order to have the field simply reset.\n\n    inputField'\n      { update = fieldUpdateFallbackFocusLost\n                  { -- Reset the input to the current temperature\n                    onFallback _ = Channel.send action <| SetTemperature currentTemperature\n                  , -- Update the temperature if it parsed correctly\n                    onInput v = Channel.send action <| SetTemperature v\n                  }\n      , ...\n      }\n\nNote that this configuration does not work well with `inputFloat'`/`inputMaybeFloat'` and `inputInt'`/`inputMaybeInt'` fields due to\nthe strange way that browsers treat numeric inputs. This update method can be used to implement custom field types however.\n\n",
            "type": "{ onFallback : String -> Signal.Message , onInput : a -> Signal.Message } -> Html.Shorthand.FieldUpdate a"
          },
          {
            "name": "fieldUpdateFocusLost",
            "comment": " Use with fields that should consolidate their value when the focus moved.\n",
            "type": "{ onInput : a -> Signal.Message } -> Html.Shorthand.FieldUpdate a"
          },
          {
            "name": "fieldset'",
            "comment": "",
            "type": "Html.Shorthand.FieldsetParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "fieldset_",
            "comment": " [&lt;fieldset&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset) represents a set of controls.\n",
            "type": "Bool -> List Html.Html -> Html.Html"
          },
          {
            "name": "figcaption'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "figcaption_",
            "comment": " [&lt;figcaption&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption) represents the legend of a figure.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "figure'",
            "comment": " [&lt;figure&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure) represents a figure illustrated as part of the document.\n\n**Do:**\n* [use figure for captioned content](http://html5doctor.com/the-figure-figcaption-elements/)\n* [use figure for things other than images: video, audio, a chart, a table etc](http://html5doctor.com/the-figure-figcaption-elements/)\n\n**Don't:**\n* [turn every image into a figure](http://html5doctor.com/avoiding-common-html5-mistakes/#figure)\n\n",
            "type": "Html.Shorthand.ClassIdParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "footer'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "footer_",
            "comment": " [&lt;footer&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer) defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "form'",
            "comment": " [&lt;form&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) represents a form , consisting of controls, that can be submitted to a\nserver for processing.\n\nIn future `Nothing` may mask out the default submit on Enter key behaviour.\nSee [virtual-dom/pull/5#issuecomment-88444513](https://github.com/evancz/virtual-dom/pull/5#issuecomment-88444513) and [stackoverflow](http://stackoverflow.com/a/587575/167485).\n",
            "type": "Html.Shorthand.FormParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h1'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h1_",
            "comment": " [&lt;h*n*&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) provide titles for sections and subsections, describing the topic it introduces.\n\n**Do:**\n* [use &lt;h*n*&gt; to define a document outline](http://www.paciellogroup.com/blog/2013/10/html5-document-outline/)\n* [try to have only one first level &lt;h*n*&gt; on a page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [introduce &lt;section&gt;s with headings](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n\n**Don't:**\n* [skip &lt;h*n*&gt; levels if you can help it](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [style &lt;h*n*&gt;s using html5 &lt;section&gt;s](http://www.stubbornella.org/content/2011/09/06/style-headings-using-html5-sections/)\n* [use &lt;h*n*&gt; for subtitles, subheadings](http://html5doctor.com/howto-subheadings/)\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "h2'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h2_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "h3'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h3_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "h4'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h4_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "h5'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h5_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "h6'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "h6_",
            "comment": "",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "header'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "header_",
            "comment": " [&lt;header&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header) defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n\n**Don't:**\n* [overuse &lt;header&gt;](http://html5doctor.com/avoiding-common-html5-mistakes/#header-hgroup)\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "hr_",
            "comment": " [&lt;hr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr) represents a thematic break between paragraphs of a section or article or\nany longer content.\n\nNo other form is provided since hr should probably not have any classes or contents.\n\n",
            "type": "Html.Html"
          },
          {
            "name": "i'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "i_",
            "comment": " [&lt;i&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i) represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "id'",
            "comment": " Encoded id attribute. Uses `encodeId` to ensure that the id is nicely normalized.\n",
            "type": "Html.Shorthand.IdString -> Html.Attribute"
          },
          {
            "name": "iframe'",
            "comment": " [&lt;iframe&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) embedded an HTML document.\n",
            "type": "Html.Shorthand.IframeParam -> Html.Html"
          },
          {
            "name": "img'",
            "comment": " [&lt;img&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) represents an image.\n",
            "type": "Html.Shorthand.ImgParam -> Html.Html"
          },
          {
            "name": "img_",
            "comment": "",
            "type": "Int -> Int -> Html.Shorthand.UrlString -> String -> Html.Html"
          },
          {
            "name": "inputField'",
            "comment": " [&lt;input&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) represents a typed data field allowing the user to edit the data.\n\nIn order to disable an input field, use `fieldset_ False`.\n",
            "type": "Html.Shorthand.InputFieldParam a -> List Html.Attribute -> Html.Html"
          },
          {
            "name": "inputFloat'",
            "comment": "",
            "type": "Html.Shorthand.InputFloatParam -> Html.Html"
          },
          {
            "name": "inputInt'",
            "comment": "",
            "type": "Html.Shorthand.InputIntParam -> Html.Html"
          },
          {
            "name": "inputMaybeFloat'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeFloatParam -> Html.Html"
          },
          {
            "name": "inputMaybeInt'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeIntParam -> Html.Html"
          },
          {
            "name": "inputMaybeText'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeTextParam -> Html.Html"
          },
          {
            "name": "inputMaybeUrl'",
            "comment": "",
            "type": "Html.Shorthand.InputMaybeUrlParam -> Html.Html"
          },
          {
            "name": "inputText'",
            "comment": "",
            "type": "Html.Shorthand.InputTextParam -> Html.Html"
          },
          {
            "name": "inputUrl'",
            "comment": "",
            "type": "Html.Shorthand.InputUrlParam -> Html.Html"
          },
          {
            "name": "ins'",
            "comment": "",
            "type": "Html.Shorthand.ModParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "ins_",
            "comment": " [&lt;ins&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins) defines an addition to the document.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "kbd'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "kbd_",
            "comment": " [&lt;kbd&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd) represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n\n    instructions : Html\n    instructions =\n      p_\n        [ text \"Press \"\n        , kbd_\n          [ kbd_ [ text \"Ctrl\" ]\n          , text \"+\"\n          , kbd_ [ text \"S\"]\n          ]\n        , text \" to save this document.\"\n        ]\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "label'",
            "comment": "",
            "type": "Html.Shorthand.LabelParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "label_",
            "comment": " [&lt;label&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) represents the caption of a form control.\n",
            "type": "Html.Shorthand.IdString -> Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "legend'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "legend_",
            "comment": " [&lt;legend&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend) represents the caption for a `fieldset`.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "li'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "li_",
            "comment": " [&lt;li&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) defines a item of an enumeration list.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "main_",
            "comment": " [&lt;main&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) defines the main or important content in the document. There is only one\n`main` element in the document.\n\nNote that main' is provided by [elm-html](http://package.elm-lang.org/packages/evancz/elm-html/latest/Html#main'), not by this package which only provides `main_`.\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "mark'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "mark_",
            "comment": " [&lt;mark&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark) represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "meter'",
            "comment": " [&lt;meter&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter) represents a scalar measurement (or a fractional value), within a known range.\n",
            "type": "Html.Shorthand.MeterParam -> String -> Html.Html"
          },
          {
            "name": "nav'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "nav_",
            "comment": " [&lt;nav&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav) defines a section that contains only navigation links.\n\n**Do:**\n* [use &lt;nav&gt; for major navigation](http://html5doctor.com/avoiding-common-html5-mistakes/#nav-external)\n\n**Don't:**\n* [wrap all lists of links in &lt;nav&gt;](http://html5doctor.com/avoiding-common-html5-mistakes/#nav-external)\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "object'",
            "comment": " [&lt;object&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object) represents an external resource , which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
            "type": "Html.Shorthand.ObjectParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "ol'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "ol_",
            "comment": " [&lt;ol&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol) defines an ordered list of items.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "option'",
            "comment": "",
            "type": "Html.Shorthand.OptionParam -> Html.Html"
          },
          {
            "name": "option_",
            "comment": " [&lt;option&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option) represents an option in a `select` element or a suggestion of a `datalist` element.\n",
            "type": "Html.Shorthand.TextString -> Bool -> Html.Html"
          },
          {
            "name": "output'",
            "comment": " [&lt;output&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output) represents the result of a calculation.\n",
            "type": "Html.Shorthand.OutputParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "p'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "p_",
            "comment": " [&lt;p&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) defines a portion that should be displayed as a paragraph of text.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "param'",
            "comment": " [&lt;param&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param) defines parameters for use by plug-ins invoked by `object` elements.\n",
            "type": "String -> String -> Html.Html"
          },
          {
            "name": "pre'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "pre_",
            "comment": " [&lt;pre&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre) indicates that its content is preformatted and that this format must be\npreserved.\n\n**Do:**\n* [use &lt;pre&gt; for blocks of whitespace sensitive text that must not wrap](http://stackoverflow.com/a/4611735)\n* use &lt;pre&gt; as a wrapper for blocks &lt;`code_`&gt;\n* use &lt;pre&gt; as a wrapper for blocks of &lt;`samp_`&gt; output from a computer program\n\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "progress'",
            "comment": " [&lt;progress&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress) represents the completion progress of a task.\n",
            "type": "Html.Shorthand.ProgressParam -> String -> Html.Html"
          },
          {
            "name": "q'",
            "comment": "",
            "type": "Html.Shorthand.ClassCiteParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "q_",
            "comment": " [&lt;q&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q) represents an inline quotation.\n\nThe idiomatic form uses a cite url, but the elision is also provided.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "rp'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "rp_",
            "comment": " [&lt;rp&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp) represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "rt'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "rt_",
            "comment": " [&lt;rt&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt) represents the text of a ruby annotation .\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "ruby'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "ruby_",
            "comment": " [&lt;ruby&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby) represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "s'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "s_",
            "comment": " [&lt;s&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s) represents content that is no longer accurate or relevant.\n\n**Don't:**\n* [use &lt;s&gt; for indicating document edits, use &lt;del&gt; or &lt;ins&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s#Summary)\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "samp'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "samp_",
            "comment": " [&lt;samp&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp) represents the output of a program or a computer.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "section'",
            "comment": "",
            "type": "Html.Shorthand.ClassIdParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "section_",
            "comment": " [&lt;section&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section) defines a section in a document. Use sections to construct a document outline.\n\n**Do:**\n* [use &lt;section&gt;s to define document outlines](http://html5doctor.com/outlines/)\n* [...but use &lt;h*n*&gt;s carefully](http://www.paciellogroup.com/blog/2013/10/html5-document-outline/)\n\n**Don't:**\n* [use &lt;section&gt; as a wrapper for styling](http://html5doctor.com/avoiding-common-html5-mistakes/#section-wrapper)\n\n",
            "type": "Html.Shorthand.IdString -> List Html.Html -> Html.Html"
          },
          {
            "name": "select'",
            "comment": " [&lt;select&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) represents a control allowing selection among a set of options.\n",
            "type": "Html.Shorthand.SelectParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "small'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "small_",
            "comment": " [&lt;small&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small) represents a side comment , that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n\n**Don't:**\n  * [use small for pure styling](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small#Summary)\n\n**Do:**\n  * [use small for side-comments and small print, including copyright and legal text](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small#Summary)\n\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "span'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "span_",
            "comment": " [&lt;span&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span) represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like class', lang, or dir.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "strong'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "strong_",
            "comment": " [&lt;strong&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) represents especially important text.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "sub'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "sub_",
            "comment": " [&lt;sub&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub) represent a subscript.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "sup'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "sup_",
            "comment": " [&lt;sup&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup) represent a superscript.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "table'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "table_",
            "comment": " [&lt;table&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) represents data with more than one dimension.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "tbody'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "tbody_",
            "comment": " [&lt;tbody&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody) represents the block of rows that describes the concrete data of a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "td'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "td_",
            "comment": " [&lt;td&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td) represents a data cell in a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "tfoot'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "tfoot_",
            "comment": " [&lt;tfoot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot) represents the block of rows that describes the column summaries of a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "th'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "th_",
            "comment": " [&lt;th&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th) represents a header cell in a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "thead'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "thead_",
            "comment": " [&lt;thead&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead) represents the block of rows that describes the column labels of a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "tr'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "tr_",
            "comment": " [&lt;tr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr) represents a row of cells in a table.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "u'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "u_",
            "comment": " [&lt;u&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u) represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "ul'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "ul_",
            "comment": " [&lt;ul&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) defines an unordered list of items.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "var'",
            "comment": "",
            "type": "Html.Shorthand.ClassParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "var_",
            "comment": " [&lt;var&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var) represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
            "type": "Html.Shorthand.TextString -> Html.Html"
          },
          {
            "name": "video'",
            "comment": "",
            "type": "Html.Shorthand.VideoParam -> List Html.Html -> Html.Html"
          },
          {
            "name": "video_",
            "comment": " [&lt;video&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) represents a video, the associated audio and captions, and controls.\n\nDoesn't allow for &lt;track&gt;s &lt;source&gt;s, please use `video` for that.\n",
            "type": "Html.Shorthand.UrlString -> Html.Html"
          },
          {
            "name": "wbr'",
            "comment": " [&lt;wbr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr) represents a line break opportunity , that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
            "type": "Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Shorthand.Internal",
        "comment": " Internals for Html.Shorthand See [Html.Shorthand](http://package.elm-lang.org/packages/circuithub/elm-html-shorthand/latest/Html-Shorthand)\n\n@docs encodeId, encodeClass, class', id'\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "class'",
            "comment": " ",
            "type": "Html.Shorthand.Type.ClassString -> Html.Attribute"
          },
          {
            "name": "encodeClass",
            "comment": " ",
            "type": "Html.Shorthand.Type.ClassString -> Html.Shorthand.Type.ClassString"
          },
          {
            "name": "encodeId",
            "comment": " ",
            "type": "Html.Shorthand.Type.IdString -> Html.Shorthand.Type.IdString"
          },
          {
            "name": "id'",
            "comment": " ",
            "type": "Html.Shorthand.Type.IdString -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Shorthand.Event",
        "comment": " Shorthands for common Html events\n\n# Events\n@docs onInput, onEnter, onChange, onKeyboardLost, onMouseLost\n\n# Special decoders\n@docs messageDecoder\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "messageDecoder",
            "comment": " A special decoder that allows you to mix event decoding logic with message generation.\nThis function takes an existing event decoder and passes the result of the parser along in order to produce an optional message directly.\nThis provides a mechanism for altering messages if parse errors occur in the decoder.\n\n    messageDecoder targetValueFloat <| \\r ->\n      case r of\n        Ok temp -> Just <| Channel.send action (SetTemperature temp)\n        Err _   -> Just <| Channel.send action (SetError \"Please enter a valid temperature\")\n\nAlternatively one could also send to a different channel entirely, although this splitting should be done only after some delibiration.\nIt may not be desirable to split channels if the signals derived from these channels need to be remerged in future.\n\n    messageDecoder targetValueFloat <| \\r ->\n      case r of\n        Ok temp -> Just <| Channel.send action SetTemperature temp\n        Err e   -> Just <| Channel.send errorLog <|\n                    \"Invalid temperature: \"\n                    ++ toString (targetValue e.event)\n                    ++ \"(\" ++ e.reason ++ \").\"\n\n",
            "type": "Json.Decode.Decoder a -> (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe Signal.Message) -> Json.Decode.Decoder Signal.Message"
          },
          {
            "name": "onChange",
            "comment": " Fires when a \"change\" event is triggered.\n",
            "type": "Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          },
          {
            "name": "onEnter",
            "comment": " Fires off the message when the `Enter` key is pressed (on keydown).\n",
            "type": "Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          },
          {
            "name": "onInput",
            "comment": " Fires off the message when an \"input\" event is triggered.\nUse this with &lt;`input`&gt; and &lt;`textarea`&gt; elements.\n",
            "type": "Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          },
          {
            "name": "onKeyboardLost",
            "comment": " Similar to onBlur, but uses a decoder to return the internal state of an input field.\n",
            "type": "Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          },
          {
            "name": "onMouseLost",
            "comment": " Similar to onMouseLeave, but uses a decoder to return the internal state of an input field.\n",
            "type": "Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Shorthand.Type",
        "comment": " Types used by the shorthand. All of these types are re-exported by `Html.Shorthand` so this module is only useful if\nyou aren't already importing Html.Shorthand.\n\n# Common types\n@docs IdString, ClassString, UrlString, TextString\n\n# Event / handler types\n@docs EventDecodeError, FormUpdate, FieldUpdate, ButtonUpdate, SelectUpdate\n\n# Element parameters\n@docs ClassParam, ClassIdParam, ClassCiteParam, AnchorParam, ModParam, ImgParam, IframeParam, EmbedParam, ObjectParam, MediaParam, VideoParam, AudioParam, FormParam, FieldsetParam, LabelParam, InputFieldParam, InputTextParam, InputMaybeTextParam, InputFloatParam, InputMaybeFloatParam, InputIntParam, InputMaybeIntParam, InputUrlParam, InputMaybeUrlParam, ButtonParam, SelectParam, OptionParam, OutputParam, ProgressParam, MeterParam\n\n",
        "aliases": [
          {
            "name": "AnchorParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , href : Html.Shorthand.Type.UrlString }"
          },
          {
            "name": "AudioParam",
            "comment": " ",
            "args": [],
            "type": "Html.Shorthand.Type.MediaParam"
          },
          {
            "name": "ButtonParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , update : Html.Shorthand.Type.ButtonUpdate }"
          },
          {
            "name": "ButtonUpdate",
            "comment": " ",
            "args": [],
            "type": "{ onClick : Signal.Message }"
          },
          {
            "name": "ClassCiteParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , cite : Html.Shorthand.Type.UrlString }"
          },
          {
            "name": "ClassIdParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , id : Html.Shorthand.Type.IdString }"
          },
          {
            "name": "ClassParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString }"
          },
          {
            "name": "ClassString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "EmbedParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , id : Html.Shorthand.Type.IdString , src : Html.Shorthand.Type.UrlString , type' : String , useMapName : Maybe.Maybe Html.Shorthand.Type.IdString , height : Int , width : Int }"
          },
          {
            "name": "EventDecodeError",
            "comment": " ",
            "args": [],
            "type": "{ event : Json.Decode.Value, reason : String }"
          },
          {
            "name": "FieldUpdate",
            "comment": " ",
            "args": [
              "a"
            ],
            "type": "{ onInput : Maybe.Maybe (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe Signal.Message) , onEnter : Maybe.Maybe (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe Signal.Message) , onKeyboardLost : Maybe.Maybe (Result.Result Html.Shorthand.Type.EventDecodeError a -> Maybe.Maybe Signal.Message) }"
          },
          {
            "name": "FieldsetParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString, disabled : Bool }"
          },
          {
            "name": "FormParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , novalidate : Bool , update : Html.Shorthand.Type.FormUpdate }"
          },
          {
            "name": "FormUpdate",
            "comment": " ",
            "args": [],
            "type": "{ onSubmit : Maybe.Maybe Signal.Message , onEnter : Maybe.Maybe Signal.Message }"
          },
          {
            "name": "IdString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "IframeParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , src : Html.Shorthand.Type.UrlString , width : Int , height : Int , sandbox : Maybe.Maybe String , seamless : Bool }"
          },
          {
            "name": "ImgParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , src : Html.Shorthand.Type.UrlString , width : Int , height : Int , alt : String }"
          },
          {
            "name": "InputFieldParam",
            "comment": " ",
            "args": [
              "a"
            ],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , update : Html.Shorthand.Type.FieldUpdate a , type' : String , pattern : Maybe.Maybe String , required : Bool , decoder : Json.Decode.Decoder a }"
          },
          {
            "name": "InputFloatParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Float , min : Maybe.Maybe Float , max : Maybe.Maybe Float , step : Maybe.Maybe Float , update : Html.Shorthand.Type.FieldUpdate Float }"
          },
          {
            "name": "InputIntParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Int , min : Maybe.Maybe Int , max : Maybe.Maybe Int , step : Maybe.Maybe Int , update : Html.Shorthand.Type.FieldUpdate Int }"
          },
          {
            "name": "InputMaybeFloatParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe Float , min : Maybe.Maybe Float , max : Maybe.Maybe Float , step : Maybe.Maybe Float , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe Float) }"
          },
          {
            "name": "InputMaybeIntParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe Int , min : Maybe.Maybe Int , max : Maybe.Maybe Int , step : Maybe.Maybe Int , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe Int) }"
          },
          {
            "name": "InputMaybeTextParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe String , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe String) }"
          },
          {
            "name": "InputMaybeUrlParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Maybe.Maybe Html.Shorthand.Type.UrlString , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate (Maybe.Maybe Html.Shorthand.Type.UrlString) }"
          },
          {
            "name": "InputTextParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : String , required : Bool , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate String }"
          },
          {
            "name": "InputUrlParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , placeholder : Maybe.Maybe String , value : Html.Shorthand.Type.UrlString , required : Bool , autocomplete : Bool , update : Html.Shorthand.Type.FieldUpdate Html.Shorthand.Type.UrlString }"
          },
          {
            "name": "LabelParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , for : Html.Shorthand.Type.IdString }"
          },
          {
            "name": "MediaParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , src : Maybe.Maybe Html.Shorthand.Type.UrlString , autoplay : Bool , controls : Bool , loop : Bool , preload : Maybe.Maybe String , poster : Maybe.Maybe Html.Shorthand.Type.UrlString , volume : Maybe.Maybe Float }"
          },
          {
            "name": "MeterParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , value : Float , min : Float , max : Float , low : Maybe.Maybe Float , high : Maybe.Maybe Float , optimum : Maybe.Maybe Float }"
          },
          {
            "name": "ModParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , cite : String , datetime : String }"
          },
          {
            "name": "ObjectParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , data : Html.Shorthand.Type.UrlString , type' : String , useMapName : Maybe.Maybe Html.Shorthand.Type.IdString , height : Int , width : Int }"
          },
          {
            "name": "OptionParam",
            "comment": " ",
            "args": [],
            "type": "{ label : String, value : String, selected : Bool }"
          },
          {
            "name": "OutputParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , for : List Html.Shorthand.Type.IdString }"
          },
          {
            "name": "ProgressParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , value : Float , max : Float }"
          },
          {
            "name": "SelectParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , name : Html.Shorthand.Type.IdString , update : Html.Shorthand.Type.SelectUpdate String }"
          },
          {
            "name": "SelectUpdate",
            "comment": " ",
            "args": [
              "a"
            ],
            "type": "{ onSelect : a -> Signal.Message }"
          },
          {
            "name": "TextString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "UrlString",
            "comment": " ",
            "args": [],
            "type": "String"
          },
          {
            "name": "VideoParam",
            "comment": " ",
            "args": [],
            "type": "{ class : Html.Shorthand.Type.ClassString , src : Maybe.Maybe Html.Shorthand.Type.UrlString , width : Int , height : Int , videoHeight : Int , videoWidth : Int , autoplay : Bool , controls : Bool , loop : Bool , preload : Maybe.Maybe String , poster : Maybe.Maybe Html.Shorthand.Type.UrlString , volume : Maybe.Maybe Float }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-json-extra",
    "version": "2.2.1",
    "docs": [
      {
        "name": "Json.Decode.Extra",
        "comment": " Convenience functions for working with Json\n\n# Date\n@docs date\n\n# Incremental Decoding\n@docs apply, (|:)\n\n# Set\n@docs set\n\n# Dict\n@docs dict2\n\n# Maybe\n@docs withDefault, maybeNull\n\n# Recursively Defined Decoders\n@docs lazy\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " Can be helpful when decoding large objects incrementally.\n\n    import Date (Date)\n\n    type alias User =\n      { id                : Int\n      , createdAt         : Date\n      , updatedAt         : Date\n      , deletedAt         : Maybe Date\n      , username          : Maybe String\n      , email             : Maybe String\n      , fullname          : Maybe String\n      , avatar            : Maybe String\n      , isModerator       : Bool\n      , isOrganization    : Bool\n      , isAdmin           : Bool\n      }\n\n    metaDecoder : (Int -> Date -> Date -> Maybe Date -> b) -> Decoder b\n    metaDecoder f = f\n      `map`      (\"id\"        := int)\n      `apply` (\"createdAt\" := date)\n      `apply` (\"updatedAt\" := date)\n      `apply` (\"deletedAt\" := maybe date)\n\n    userDecoder : Decoder User\n    userDecoder = metaDecoder User\n      `apply` (\"username\"          := maybe string)\n      `apply` (\"email\"             := maybe string)\n      `apply` (\"fullname\"          := maybe string)\n      `apply` (\"avatar\"            := maybe string)\n      `apply` (\"isModerator\"       := bool)\n      `apply` (\"isOrganization\"    := bool)\n      `apply` (\"isAdmin\"           := bool)\n\nThis is a shortened form of\n\n    metaDecoder : (Int -> Date -> Date -> Maybe Date -> b) -> Decoder b\n    metaDecoder f = f\n      `map`      (\"id\"        := int)\n      `andThen` \\f -> f `map` (\"createdAt\" := date)\n      `andThen` \\f -> f `map` (\"updatedAt\" := date)\n      `andThen` \\f -> f `map` (\"deletedAt\" := maybe date)\n\n    userDecoder : Decoder User\n    userDecoder = metaDecoder User\n      `andThen` \\f -> f `map` (\"username\"          := maybe string)\n      `andThen` \\f -> f `map` (\"email\"             := maybe string)\n      `andThen` \\f -> f `map` (\"fullname\"          := maybe string)\n      `andThen` \\f -> f `map` (\"avatar\"            := maybe string)\n      `andThen` \\f -> f `map` (\"isModerator\"       := bool)\n      `andThen` \\f -> f `map` (\"isOrganization\"    := bool)\n      `andThen` \\f -> f `map` (\"isAdmin\"           := bool)\n\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          },
          {
            "name": "date",
            "comment": " Extract a date.\n\nNote that this function is not total, it will throw an exception given an incorrectly formatted date.\nSee `Date.fromString` and `Json.customDecoder`.\n\n",
            "type": "Json.Decode.Decoder Date.Date"
          },
          {
            "name": "dict2",
            "comment": " Extract a dict using separate decoders for keys and values. ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder v -> Json.Decode.Decoder (Dict.Dict comparable v)"
          },
          {
            "name": "lazy",
            "comment": " Enable decoders defined in terms of themselves by lazily creating them.\n\n    treeNode =\n      object2\n        instantiateTreeNode\n        (\"name\" := string)\n        (\"children\" := list (lazy (\\_ -> treeNode)))\n\n",
            "type": "(() -> Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "maybeNull",
            "comment": " Extract a value that might be null. If the value is null,\nsucceed with Nothing. If the value is present but not null, succeed with\nJust that value. If the value is missing, fail.\n\n    -- Yields Nothing if middleName is null, and Just middleName if it's a string.\n    \"middleName\" := maybeNull string\n\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "set",
            "comment": " Extract a set. ",
            "type": "Json.Decode.Decoder comparable -> Json.Decode.Decoder (Set.Set comparable)"
          },
          {
            "name": "withDefault",
            "comment": " Try running the given decoder; if that fails, then succeed with the given\nfallback value.\n\n    -- If this field is missing or malformed, it will decode to [].\n    (\"optionalNames\" := list string)\n      |> (withDefault [])\n\n",
            "type": "a -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "|:",
            "comment": " Infix version of `apply` that makes for a nice DSL when decoding objects:\n\n    locationDecoder : Decoder Location\n    locationDecoder =\n        succeed Location\n            |: (\"id\" := int)\n            |: (\"name\" := string)\n            |: (\"address\" := string)\n            |: (\"city\" := string)\n            |: (\"state\" := string)\n\n\n    type alias Location =\n        { id : Int\n        , name : String\n        , address : String\n        , city : String\n        , state : String\n        }\n\n",
            "type": "Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-list-extra",
    "version": "3.10.0",
    "docs": [
      {
        "name": "List.Extra",
        "comment": " Convenience functions for working with List\n\n# Basics\n@docs last, init, getAt, (!!), uncons, maximumBy, minimumBy, andMap, andThen, takeWhile, dropWhile, dropDuplicates, find, replaceIf, singleton, removeWhen\n\n# List transformations\n@docs intercalate, transpose, subsequences, permutations, interweave, unique\n\n# Folds\n@docs foldl1, foldr1\n\n# Building lists\n@docs scanl1, scanr, scanr1, unfoldr, iterate\n\n# Sublists\n@docs splitAt, takeWhileEnd, dropWhileEnd, span, break, stripPrefix, group, groupBy, groupByTransitive, inits, tails, select, selectSplit\n\n# Predicates\n@docs isPrefixOf, isSuffixOf, isInfixOf, isSubsequenceOf, isPermutationOf\n\n# Searching\n@docs notMember, find, elemIndex, elemIndices, findIndex, findIndices\n\n# Zipping\n@docs zip, zip3, zip4, zip5\n\n# Lift functions onto multiple lists of arguments\n@docs lift2, lift3, lift4\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "!!",
            "comment": " Alias for getAt\n",
            "type": "List a -> Int -> Maybe.Maybe a"
          },
          {
            "name": "andMap",
            "comment": " Map functions taking multiple arguments over multiple lists. Each list should be of the same length.\n\n    ( (\\a b c -> a + b * c)\n        `map` [1,2,3]\n        `andMap` [4,5,6]\n        `andMap` [2,1,1]\n    ) == [9,7,9]\n",
            "type": "List (a -> b) -> List a -> List b"
          },
          {
            "name": "andThen",
            "comment": " Equivalent to `concatMap` with arguments reversed. Ideal to use as an infix function, chaining together functions that return List. For example, suppose you want to have a cartesian product of [1,2] and [3,4]:\n\n    [1,2] `andThen` \\x ->\n    [3,4] `andThen` \\y ->\n    [(x,y)]\n\nwill give back the list:\n\n    [(1,3),(1,4),(2,3),(2,4)]\n\nNow suppose we want to have a cartesian product between the first list and the second list and its doubles:\n\n    [1,2] `andThen` \\x ->\n    [3,4] `andThen` \\y ->\n    [y,y*2] `andThen` \\z ->\n    [(x,z)]\n\nwill give back the list:\n\n    [(1,3),(1,6),(1,4),(1,8),(2,3),(2,6),(2,4),(2,8)]\n\nAdvanced functional programmers will recognize this as the implementation of bind operator (>>=) for lists from the `Monad` typeclass.\n",
            "type": "List a -> (a -> List b) -> List b"
          },
          {
            "name": "break",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is longest prefix of that list, for each element of which the predicate *does not* hold. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(dropWhile p xs, takeWhile p xs)`.\n\n    break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\n    break (< 5) [1,2,3] == ([],[1,2,3])\n    break (> 5) [1,2,3] == ([1,2,3],[])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "dropDuplicates",
            "comment": " Drop _all_ duplicate elements from the list\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "dropWhile",
            "comment": " Drop elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "dropWhileEnd",
            "comment": " Drop elements from the end, while predicate still holds.\n\n    dropWhileEnd ((<)5) [1..10] == [1,2,3,4,5]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "elemIndex",
            "comment": " Return the index of the first occurrence of the element. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    elemIndex 1 [1,2,3] == Just 0\n    elemIndex 4 [1,2,3] == Nothing\n    elemIndex 1 [1,2,1] == Just 0\n",
            "type": "a -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "elemIndices",
            "comment": " Return all indices of occurrences of the element. If element is not found, return empty list. Indexing starts from 0.\n\n    elemIndices 1 [1,2,3] == [0]\n    elemIndices 4 [1,2,3] == []\n    elemIndices 1 [1,2,1] == [0,2]\n",
            "type": "a -> List a -> List Int"
          },
          {
            "name": "find",
            "comment": " Find the first element that satisfies a predicate and return\nJust that element. If none match, return Nothing.\n\n    find (\\num -> num > 5) [2, 4, 6, 8] == Just 6\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "findIndex",
            "comment": " Take a predicate and a list, return the index of the first element that satisfies the predicate. Otherwise, return `Nothing`. Indexing starts from 0.\n\n    findIndex isEven [1,2,3] == Just 1\n    findIndex isEven [1,3,5] == Nothing\n    findIndex isEven [1,2,4] == Just 1\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe Int"
          },
          {
            "name": "findIndices",
            "comment": " Take a predicate and a list, return indices of all elements satisfying the predicate. Otherwise, return empty list. Indexing starts from 0.\n\n    findIndices isEven [1,2,3] == [1]\n    findIndices isEven [1,3,5] == []\n    findIndices isEven [1,2,4] == [1,2]\n",
            "type": "(a -> Bool) -> List a -> List Int"
          },
          {
            "name": "foldl1",
            "comment": " Variant of `foldl` that has no starting value argument and treats the head of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldl1 max [1,2,3,2,1] == Just 3\n    foldl1 max [] == Nothing\n    foldl1 (-) [1,2,3] == Just -4\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "foldr1",
            "comment": " Variant of `foldr` that has no starting value argument and treats the last element of the list as its starting value. If the list is empty, return `Nothing`.\n\n    foldr1 min [1,2,3,2,1] == Just 1\n    foldr1 min [] == Nothing\n    foldr1 (-) [1,2,3] == Just 2\n",
            "type": "(a -> a -> a) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "getAt",
            "comment": " Returns `Just` the element at the given index in the list,\nor `Nothing` if the list is not long enough.\n",
            "type": "List a -> Int -> Maybe.Maybe a"
          },
          {
            "name": "group",
            "comment": " Group similar elements together. `group` is equivalent to `groupBy (==)`.\n\n    group [1,2,2,3,3,3,2,2,1] == [[1],[2,2],[3,3,3],[2,2],[1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "groupBy",
            "comment": " Group elements together, using a custom equality test.\n\n    groupBy (\\x y -> fst x == fst y) [(0,'a'),(0,'b'),(1,'c'),(1,'d')] == [[(0,'a'),(0,'b')],[(1,'c'),(1,'d')]]\n\nThe equality test should be an equivalent relationship, i.e. it should have the properties of reflexivity, symmetry, and transitivity. For non-equivalent relations it gives non-intuitive behavior:\n\n    groupBy (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3,2,4],[1,3,2],[1]]\n\nFor grouping elements with a comparison test, which must only hold the property of transitivity, see `groupByTransitive`.\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "groupByTransitive",
            "comment": " Group elements together, using a custom comparison test. Start a new group each time the comparison test doesn't hold for two adjacent elements.\n\n    groupByTransitive (<) [1,2,3,2,4,1,3,2,1] == [[1,2,3],[2,4],[1,3],[2],[1]]\n",
            "type": "(a -> a -> Bool) -> List a -> List (List a)"
          },
          {
            "name": "init",
            "comment": " Return all elements of the list except the last one.\n\n    init [1,2,3] == Just [1,2]\n    init [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "inits",
            "comment": " Return all initial segments of a list, from shortest to longest, empty list first, the list itself last.\n\n    inits [1,2,3] == [[],[1],[1,2],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "intercalate",
            "comment": " Take a list and a list of lists, insert that list between every list in the list of lists, concatenate the result. `intercalate xs xss` is equivalent to `concat (intersperse xs xss)`.\n\n    intercalate [0,0] [[1,2],[3,4],[5,6]] == [1,2,0,0,3,4,0,0,5,6]\n",
            "type": "List a -> List (List a) -> List a"
          },
          {
            "name": "interweave",
            "comment": " Return a list that contains elements from the two provided, in alternate order.\n    If one list runs out of items, append the items from the remaining list.\n\n    interweave [1,3] [2,4] == [1,2,3,4]\n    interweave [1,3,5,7] [2,4] == [1,2,3,4,5,7]\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "isInfixOf",
            "comment": " Take 2 lists and return True, if the first list is an infix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPermutationOf",
            "comment": " Take 2 lists and return True, if the first list is a permutation of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isPrefixOf",
            "comment": " Take 2 lists and return True, if the first list is the prefix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSubsequenceOf",
            "comment": " Take 2 lists and return True, if the first list is a subsequence of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "isSuffixOf",
            "comment": " Take 2 lists and return True, if the first list is the suffix of the second list.\n",
            "type": "List a -> List a -> Bool"
          },
          {
            "name": "iterate",
            "comment": " Returns a list of repeated applications of `f`.\n\nIf `f` returns `Nothing` the iteration will stop. If it returns `Just y` then `y` will be added to the list and the iteration will continue with `f y`.\n    nextYear : Int -> Maybe Int\n    nextYear year =\n      if year >= 2030 then\n        Nothing\n      else\n        Just (year + 1)\n    -- Will evaluate to [2010, 2011, ..., 2030]\n    iterate nextYear 2010\n",
            "type": "(a -> Maybe.Maybe a) -> a -> List a"
          },
          {
            "name": "last",
            "comment": " Extract the last element of a list.\n\n    last [1,2,3] == Just 3\n    last [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "lift2",
            "comment": " Map functions taking multiple arguments over multiple lists, regardless of list length.\n  All possible combinations will be explored.\n\n  lift2 (+) [1,2,3] [4,5] == [5,6,6,7,7,8]\n",
            "type": "(a -> b -> c) -> List a -> List b -> List c"
          },
          {
            "name": "lift3",
            "comment": "\n",
            "type": "(a -> b -> c -> d) -> List a -> List b -> List c -> List d"
          },
          {
            "name": "lift4",
            "comment": "\n",
            "type": "(a -> b -> c -> d -> e) -> List a -> List b -> List c -> List d -> List e"
          },
          {
            "name": "maximumBy",
            "comment": " Find the first maximum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "minimumBy",
            "comment": " Find the first minimum element in a list using a comparable transformation\n",
            "type": "(a -> comparable) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "notMember",
            "comment": " Negation of `member`.\n\n    1 `notMember` [1,2,3] == False\n    4 `notMember` [1,2,3] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "permutations",
            "comment": " Return the list of of all permutations of a list. The result is in lexicographic order.\n\n    permutations [1,2,3] == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "removeWhen",
            "comment": " Take a predicate and a list, and return a list that contains elements which fails to satisfy the predicate.\n    This is equivalent to `List.filter (not << predicate) list`.\n\n    removeWhen isEven [1,2,3,4] == [1,3]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "replaceIf",
            "comment": " Replace all values that satisfy a predicate with a replacement value.\n",
            "type": "(a -> Bool) -> a -> List a -> List a"
          },
          {
            "name": "scanl1",
            "comment": " `scanl1` is a variant of `scanl` that has no starting value argument.\n\nCompare:\n\n    List.scanl (+) 0 [1,2,3] == [0,1,3,6]\n    scanl1 (+) [1,2,3] == [1,3,6]\n\n    List.scanl (-) 0 [1,2,3] == [0,1,1,2]\n    scanl1 (-) [1,2,3] == [1,1,2]\n\n    List.scanl (flip (-)) 0 [1,2,3] == [0,-1,-3,-6]\n    scanl1 (flip (-)) [1,2,3] == [1,-1,4]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "scanr",
            "comment": " `scanr` is a right-to-left dual of `scanl`. Note that:\n\n    head (scanr f z xs) == foldr f z xs\n\nExamples:\n\n    scanr (+) 0 [1,2,3] == [6,5,3,0]\n    scanr (-) 0 [1,2,3] == [2,-1,3,0]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "scanr1",
            "comment": " `scanr1` is a variant of `scanr` that has no starting value argument.\n\n    scanr1 (+) [1,2,3] == [6,5,3]\n    scanr1 (-) [1,2,3] == [2,-1,3]\n    scanr1 (flip (-)) [1,2,3] == [0,1,3]\n",
            "type": "(a -> a -> a) -> List a -> List a"
          },
          {
            "name": "select",
            "comment": " Return all combinations in the form of (element, rest of the list). Read [Haskell Libraries proposal](https://mail.haskell.org/pipermail/libraries/2008-February/009270.html) for further ideas on how to use this function.\n\n    select [1,2,3,4] == [(1,[2,3,4]),(2,[1,3,4]),(3,[1,2,4]),(4,[1,2,3])]\n",
            "type": "List a -> List ( a, List a )"
          },
          {
            "name": "selectSplit",
            "comment": " Return all combinations in the form of (elements before, element, elements after).\n\n    selectSplit [1,2,3] == [([],1,[2,3]),([1],2,[3]),([1,2],3,[])]\n",
            "type": "List a -> List ( List a, a, List a )"
          },
          {
            "name": "singleton",
            "comment": " Convert a value to a list containing one value.\n\n    singleton 3 == [3]\n",
            "type": "a -> List a"
          },
          {
            "name": "span",
            "comment": " Take a predicate and a list, return a tuple. The first part of the tuple is longest prefix of that list, for each element of which the predicate holds. The second part of the tuple is the remainder of the list. `span p xs` is equivalent to `(takeWhile p xs, dropWhile p xs)`.\n\n    span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])\n    span (< 5) [1,2,3] == ([1,2,3],[])\n    span (< 0) [1,2,3] == ([],[1,2,3])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "splitAt",
            "comment": " Take a number and a list, return a tuple of lists, where first part is prefix of the list of length equal the number, and second part is the remainder of the list. `splitAt n xs` is equivalent to `(take n xs, drop n xs)`.\n\n    splitAt 3 [1,2,3,4,5] == ([1,2,3],[4,5])\n    splitAt 1 [1,2,3] == ([1],[2,3])\n    splitAt 3 [1,2,3] == ([1,2,3],[])\n    splitAt 4 [1,2,3] == ([1,2,3],[])\n    splitAt 0 [1,2,3] == ([],[1,2,3])\n    splitAt (-1) [1,2,3] == ([],[1,2,3])\n",
            "type": "Int -> List a -> ( List a, List a )"
          },
          {
            "name": "stripPrefix",
            "comment": " Drop the given prefix from the list. If the list doesn't start with that prefix, return `Nothing`.\n\n    stripPrefix [1,2] [1,2,3,4] == Just [3,4]\n    stripPrefix [1,2,3] [1,2,3,4,5] == Just [4,5]\n    stripPrefix [1,2,3] [1,2,3] == Just []\n    stripPrefix [1,2,3] [1,2] == Nothing\n    stripPrefix [3,2,1] [1,2,3,4,5] == Nothing\n",
            "type": "List a -> List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "subsequences",
            "comment": " Return the list of all subsequences of a list.\n\n    subsequences [1,2,3] == [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "tails",
            "comment": " Return all final segments of a list, from longest to shortest, the list itself first, empty list last.\n\n    tails [1,2,3] == [[1,2,3],[2,3],[3],[]]\n",
            "type": "List a -> List (List a)"
          },
          {
            "name": "takeWhile",
            "comment": " Take elements in order as long as the predicate evaluates to `True`\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "takeWhileEnd",
            "comment": " Take elements from the end, while predicate still holds.\n\n    takeWhileEnd ((<)5) [1..10] == [6,7,8,9,10]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "transpose",
            "comment": " Transpose rows and columns of the list of lists.\n\n    transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\n\nIf some rows are shorter than the following rows, their elements are skipped:\n\n    transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\n",
            "type": "List (List a) -> List (List a)"
          },
          {
            "name": "uncons",
            "comment": " Decompose a list into its head and tail. If the list is empty, return `Nothing`. Otherwise, return `Just (x, xs)`, where `x` is head and `xs` is tail.\n\n    uncons [1,2,3] == Just (1, [2,3])\n    uncons [] = Nothing\n",
            "type": "List a -> Maybe.Maybe ( a, List a )"
          },
          {
            "name": "unfoldr",
            "comment": " The `unfoldr` function is \"dual\" to `foldr`. `foldr` reduces a list to a summary value, `unfoldr` builds a list from a seed. The function takes a function and a starting element. It applies the function to the element. If the result is `Just (a, b)`, `a` is accumulated and the function is applied to `b`. If the result is `Nothing`, the list accumulated so far is returned.\n\n    unfoldr (\\b -> if b == 0 then Nothing else Just (b, b-1)) 5 == [5,4,3,2,1]\n",
            "type": "(b -> Maybe.Maybe ( a, b )) -> b -> List a"
          },
          {
            "name": "unique",
            "comment": " Remove all duplicates from a list and return a list of distinct elements.\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "zip",
            "comment": " Take two lists and returns a list of corresponding pairs\n",
            "type": "List a -> List b -> List ( a, b )"
          },
          {
            "name": "zip3",
            "comment": " Take three lists and returns a list of triples\n",
            "type": "List a -> List b -> List c -> List ( a, b, c )"
          },
          {
            "name": "zip4",
            "comment": " Take four lists and returns a list of quadruples\n",
            "type": "List a -> List b -> List c -> List d -> List ( a, b, c, d )"
          },
          {
            "name": "zip5",
            "comment": " Take five lists and returns a list of quintuples\n",
            "type": "List a -> List b -> List c -> List d -> List e -> List ( a, b, c, d, e )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-list-split",
    "version": "1.0.1",
    "docs": [
      {
        "name": "List.Split",
        "comment": " Split lists into chunks\n\n# Splitters\n@docs chunksOfLeft, chunksOfRight\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chunksOfLeft",
            "comment": " Split list into smaller lists of length `k`, starting from the left.\n\n    chunksOfLeft 3 [1,2,3,4,5,6,7,8] == [[1,2,3],[4,5,6],[7,8]]\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "chunksOfRight",
            "comment": " Split list into smaller lists of length `k`, starting from the right.\n\n    chunksOfRight 3 [1,2,3,4,5,6,7,8] == [[1,2], [3,4,5], [6,7,8]]\n",
            "type": "Int -> List a -> List (List a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-maybe-extra",
    "version": "1.6.0",
    "docs": [
      {
        "name": "Maybe.Extra",
        "comment": " Convenience functions for Maybe.\n\n# Common helpers\n@docs (?), join, isNothing, isJust, mapDefault\n\n# Map\n@docs map2, map3, map4, map5\n\n# Applicative functions\n@docs andMap, next, prev, or\n\n# List and array functions\n@docs maybeToList, maybeToArray, traverse, combine, traverseArray, combineArray\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "?",
            "comment": " Flipped, infix version of `withDefault`.\n\n    head [] ? 0 == 0\n",
            "type": "Maybe.Maybe a -> a -> a"
          },
          {
            "name": "andMap",
            "comment": " Apply the function that is inside `Maybe` to a value that is inside `Maybe`. Return the result inside `Maybe`. If one of the `Maybe` arguments is `Nothing`, return `Nothing`.\n\n    Just ((+)2) `andMap` Just 3 == Just 5\n    Just Nothing `andMap` Just 3 == Nothing\n    Just ((+)2) `andMap` Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `<*>` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe (a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "combine",
            "comment": " Take a list of `Maybe`s and return a `Maybe` with a list of values. `combine == traverse identity`.\n\n    combine [] == Just []\n    combine [Just 1, Just 2, Just 3] == Just [1,2,3]\n    combine [Just 1, Nothing, Just 3] == Nothing\n",
            "type": "List (Maybe.Maybe a) -> Maybe.Maybe (List a)"
          },
          {
            "name": "combineArray",
            "comment": "",
            "type": "Array.Array (Maybe.Maybe a) -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "isJust",
            "comment": " Conveniently check if a `Maybe` matches `Just _`.\n\n    isJust (Just 42) == True\n    isJust (Just []) == True\n    isJust Nothing   == False\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "isNothing",
            "comment": " Conveniently check if a `Maybe` matches `Nothing`.\n\n    isNothing (Just 42) == False\n    isNothing (Just []) == False\n    isNothing Nothing   == True\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "join",
            "comment": " Flattens nested Maybes\n\n    join (Just (Just 1)) == Just 1\n    join (Just Nothing)  == Nothing\n    join Nothing         == Nothing\n",
            "type": "Maybe.Maybe (Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "map2",
            "comment": " Combine two `Maybe`s with the given function. If one of the `Maybe`s is `Nothing`, the result is `Nothing`.\n\n    map2 (+) (Just 1) (Just 2) == Just 3\n    map2 (,) (Just 0) (Just 'a') == Just (0, 'a')\n",
            "type": "(a -> b -> c) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe f"
          },
          {
            "name": "mapDefault",
            "comment": " Take a default value, a function and a Maybe.\nReturn the default value if the `Maybe` if `Nothing`.\nIf the `Maybe` is `Just a`, apply the function on a and return the b.\n",
            "type": "b -> (a -> b) -> Maybe.Maybe a -> b"
          },
          {
            "name": "maybeToArray",
            "comment": " Return an empty array on `Nothing` or a list with one element, where the element is the value of `Just`.\n\n    maybeToArray Nothing == Array.fromList []\n    maybeToArray (Just 1) == Array.fromList [1]\n\n",
            "type": "Maybe.Maybe a -> Array.Array a"
          },
          {
            "name": "maybeToList",
            "comment": " Return an empty list on `Nothing` or a list with one element, where the element is the value of `Just`.\n\n    maybeToList Nothing == []\n    maybeToList (Just 1) == [1]\n",
            "type": "Maybe.Maybe a -> List a"
          },
          {
            "name": "next",
            "comment": " Take two `Maybe` values. If the first one equals `Nothing`, return `Nothing`. Otherwise return the second value.\n\n    next (Just 1) (Just 2) == Just 2\n    next Nothing (Just 2) == Nothing\n    next (Just 1) Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `*>` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe b"
          },
          {
            "name": "or",
            "comment": "\n  Like the boolean '||' this will return the first value that is positive ('Just').\n\n    Just 4 `or` Just 5    == Just 4\n    Just 4 `or` Nothing   == Just 4\n    Nothing `or` Just 5   == Just 5\n    Nothing `or` Nothing  == Nothing\n\n  This function sort of works like 'oneOf' but on single 'Maybe's.\n\n  Advanced functional programmers will recognize this as the implementation of 'mplus' for Maybes from the 'MonadPlus' Typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe a -> Maybe.Maybe a"
          },
          {
            "name": "prev",
            "comment": " Take two `Maybe` values. If the second one equals `Nothing`, return `Nothing`. Otherwise return the first value.\n\n    prev (Just 1) (Just 2) == Just 1\n    prev Nothing (Just 2) == Nothing\n    prev (Just 1) Nothing == Nothing\n\nAdvanced functional programmers will recognize this as the implementation of `<*` for `Maybe`s from the `Applicative` typeclass.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe a"
          },
          {
            "name": "traverse",
            "comment": " Take a function that returns `Maybe` value and a list. Map a function over each element of the list. Collect the result in the list within `Maybe`.\n\n    traverse (\\x -> Just (x*10)) [1,2,3,4,5] == Just [10,20,30,40,50]\n",
            "type": "(a -> Maybe.Maybe b) -> List a -> Maybe.Maybe (List b)"
          },
          {
            "name": "traverseArray",
            "comment": "",
            "type": "(a -> Maybe.Maybe b) -> Array.Array a -> Maybe.Maybe (Array.Array b)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-number-format",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Number.Format",
        "comment": "\n@docs pretty, prettyInt\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "pretty",
            "comment": " A (de facto?) standard pretty formatting for numbers.\n\n    pretty 2 ',' '.' 81601710123.338023  == \"81,601,710,123.34\"\n    pretty 3 ' ' '.' 81601710123.338023  == \"81 601 710 123.338\"\n    pretty 3 ' ' '.' -81601710123.338023 == \"-81 601 710 123.34\"\n\n* Numbers are rounded to the nearest printable digit\n* Digits before the decimal are grouped into spans of three and separated by a seperator character\n",
            "type": "Int -> Char -> Char -> Float -> String"
          },
          {
            "name": "prettyInt",
            "comment": " A (de facto?) standard pretty formatting for numbers.\nThis version of the function operates on integers instead of floating point values.\nIn future `pretty` may be used on both integers as well as floating point values and this function\nwill be deprecated.\n\n    prettyInt ',' 81601710123  == \"81,601,710,123\"\n    prettyInt ' ' 81601710123  == \"81 601 710 123\"\n    prettyInt ' ' -81601710123 == \"-81 601 710 123\"\n\n* Digits are grouped into spans of three and separated by a seperator character\n",
            "type": "Char -> Int -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "circuithub/elm-result-extra",
    "version": "1.4.0",
    "docs": [
      {
        "name": "Result.Extra",
        "comment": " Convenience functions for working with Result\n\n# Common Helpers\n@docs isOk, isErr, extract, mapBoth, withDefault, combine\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "combine",
            "comment": " Combine a list of results into a single result (holding a list).\n",
            "type": "List (Result.Result x a) -> Result.Result x (List a)"
          },
          {
            "name": "extract",
            "comment": " Turn a `Result e a` to an `a`, by applying the conversion\nfunction specified to the `e`.\n",
            "type": "(e -> a) -> Result.Result e a -> a"
          },
          {
            "name": "isErr",
            "comment": " Check whether the result is `Err` without unwrapping it.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "isOk",
            "comment": " Check whether the result is `Ok` without unwrapping it.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " Convert a `Result e a` to a `b` by applying either a function\nif the `Result` is an `Err` or a function if the `Result` is `Ok`.\nBoth of these functions must return the same type.\n",
            "type": "(e -> b) -> (a -> b) -> Result.Result e a -> b"
          },
          {
            "name": "withDefault",
            "comment": " Returns a `Result`'s contents if the `Result` is an `Ok`,\nor the given default value if the `Result` is an `Err`.\nThis is basically the same as running `Result.toMaybe` and then `Maybe.withDefault`.\n\n    0 == Result.withDefault 0 (String.toInt \"this is not a valid integer!\")\n",
            "type": "a -> Result.Result x a -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "coreytrampe/elm-vendor",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Vendor",
        "comment": " A tiny module that detects the browser vendor prefix\n\n```elm\ndisplayValue : String\ndisplayValue =\n    if Vendor.prefix == Vendor.Webkit\n    then \"-webkit-flex\"\n    else \"flex\"\n```\n\n@docs Prefix, prefix\n",
        "aliases": [],
        "types": [
          {
            "name": "Prefix",
            "comment": " A union of prefix tags\n",
            "args": [],
            "cases": [
              [
                "Moz",
                []
              ],
              [
                "Webkit",
                []
              ],
              [
                "MS",
                []
              ],
              [
                "O",
                []
              ],
              [
                "Unknown",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "prefix",
            "comment": " The detected vendor\n",
            "type": "Vendor.Prefix"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "damienklinnert/elm-hue",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Hue",
        "comment": " Control your Philips Hue devices with Elm!\n\nCheck the [README for a general introduction into this module](http://package.elm-lang.org/packages/damienklinnert/elm-hue/latest/).\n\n# Bridge\n\n## Referencing the Bridge\n@docs BridgeReference, bridgeRef\n\n# Lights\n\n## Referencing Lights\n@docs LightReference, lightRef\n\n## Querying Light Details\n@docs listLights, LightDetails\n\n## Retrieving Light State\n@docs getLightState, LightState, LightEffect, Alert\n\n## Updating Light State\n@docs updateLight, LightUpdate, turnOn, turnOff, brightness, hue, saturation, colorTemperature, singleAlert, loopedAlert, noEffect, colorLoopEffect, transition\n\n# Errors\n\n@docs Error\n",
        "aliases": [
          {
            "name": "LightDetails",
            "comment": " Details about a light like identifier, software version and bulb type.\n",
            "args": [],
            "type": "{ id : String , name : String , uniqueId : String , bulbType : String , modelId : String , manufacturerName : String , softwareVersion : String }"
          },
          {
            "name": "LightState",
            "comment": " Describes the current state of a light.\n\n - `on`: is this light turned on?\n - `brightness`: a range from `1` (minimal brightness) to `254` (maximal brightness)\n - `hue`: a range from `0` to `65535`, with both of them resulting in red, `25500` in green and\n   `46920` in blue\n - `saturation`: range from `0` (white) to `254` (fully colored)\n - `colorTemperature`: The Mired Color temperature\n - `reachable`: is the light reachable?\n",
            "args": [],
            "type": "{ on : Bool , brightness : Int , hue : Int , saturation : Int , effect : Hue.LightEffect , colorTemperature : Int , alert : Hue.Alert , reachable : Bool }"
          }
        ],
        "types": [
          {
            "name": "Alert",
            "comment": " A temporary change to a light's state.\n\n - `NoAlert`: Disable any existing alerts.\n - `SingleAlert`: The light will perform a single, smooth transition up to a higher brightness and\n   back to the original again.\n - `LoopedAlert`: The light will perform multiple, smooth transitions up to a higher brightness and\n   back to the original again for a period of `15` seconds.\n",
            "args": [],
            "cases": [
              [
                "NoAlert",
                []
              ],
              [
                "SingleAlert",
                []
              ],
              [
                "LoopedAlert",
                []
              ]
            ]
          },
          {
            "name": "BridgeReference",
            "comment": " Used to identify and reference a particular bridge.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Error",
            "comment": " Something went wrong.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LightEffect",
            "comment": " A light can have the `ColorLoopEffect` enabled, which means that the light will cycle through\nall hues, while keeping brightness and saturation values.\n",
            "args": [],
            "cases": [
              [
                "NoLightEffect",
                []
              ],
              [
                "ColorLoopEffect",
                []
              ]
            ]
          },
          {
            "name": "LightReference",
            "comment": " Used to identify and reference a particular light.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LightUpdate",
            "comment": "\n  A `LightUpdate` describes a single change to a light's state. To actually perform a `LightUpdate`,\n  pass a list of updates to the `updateLight` function.\n\n  To describe a `1s` transition to a bright red, you can specify:\n\n      [ turnOn, transition 10, hue 0, brightness 254 ]\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bridgeRef",
            "comment": " Create a reference to a bridge by providing the bridge base url and your username.\n\n    bridgeRef \"http://192.168.1.1\" \"A2iasDJs123fi793uiSh\"\n\nIf you don't yet know the bridge base url or your username,\n[check the readme for detailed instructions](http://package.elm-lang.org/packages/damienklinnert/elm-hue/latest/).\n",
            "type": "String -> String -> Hue.BridgeReference"
          },
          {
            "name": "brightness",
            "comment": " Set light to the given brightness.\n\nThe brightness can range from `1` (minimal brightness) to `254` (maximal brightness).\nA brightness of `1` doesn't turn the light off. Use `turnOff` instead.\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "colorLoopEffect",
            "comment": " Sets the colorloop effect on the light.\n\nThe light will cycle through all hues, while keeping brightness and saturation values.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "colorTemperature",
            "comment": " Set the Mired Color temperature of the light.\n\nA light should be capable of a value of `153` (6500K) to `500` (2000K).\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "getLightState",
            "comment": " Get the state for a given light.\n",
            "type": "Hue.LightReference -> Task.Task Hue.Error Hue.LightState"
          },
          {
            "name": "hue",
            "comment": " Set light to the given hue value.\n\nImagine arranging all colors around a circle (a color wheel). On that circle, a value of `0` will\nresult in red, `25500` in green and `46920` in blue. Values in between result in mixed colors,\ne.g. `10710` being yellow. When the value reaches `65535`, you've reached the starting point on the\ncircle, so you'll get red again.\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "lightRef",
            "comment": " Create a reference to a light by specifying it's bridge and id.\n\nThe id can be obtained by calling `listLights` and looking at the `id` field.\n\nTo create a reference to the light with id `\"2\"`, you can do:\n\n    lightRef myBridge \"2\"\n",
            "type": "Hue.BridgeReference -> String -> Hue.LightReference"
          },
          {
            "name": "listLights",
            "comment": " List details about all lights connected to a particular bridge.\n",
            "type": "Hue.BridgeReference -> Task.Task Hue.Error (List Hue.LightDetails)"
          },
          {
            "name": "loopedAlert",
            "comment": " The light will perform multiple, smooth transitions up to a higher brightness and back to the\noriginal again for a period of `15` seconds.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "noEffect",
            "comment": " Turn off all effects on the light.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "saturation",
            "comment": " Set light to the given saturation.\n\nThe saturation can range from `0` (minimally saturated, white) to `254` (fully colored).\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "singleAlert",
            "comment": " The light will perform a single, smooth transition up to a higher brightness and back to the\noriginal again.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "transition",
            "comment": " Specify the duration for the transition between the light's current and updated state.\n\nA value of `1` will create a `100ms` transition, a value of `10` will create a `1s` transition.\n\nThe default is `4` (`400ms`).\n",
            "type": "Int -> Hue.LightUpdate"
          },
          {
            "name": "turnOff",
            "comment": " Turn light off.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "turnOn",
            "comment": " Turn light on.\n",
            "type": "Hue.LightUpdate"
          },
          {
            "name": "updateLight",
            "comment": " Apply a list of `LightUpdate`s to a particular light.\n\nThe following command will transition a light to a bright red:\n\n    updateLight lightRef [ turnOn, transition 10, hue 0, brightness 254 ]\n",
            "type": "Hue.LightReference -> List Hue.LightUpdate -> Task.Task Hue.Error ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "danpalmer/elm-param-parsing",
    "version": "1.0.0",
    "docs": [
      {
        "name": "UrlParameterParser",
        "comment": " Parse URL parameters. To use this, you'll need to create an input port, pass the search string to Elm,\nand then parse them with this function, then that can populate your model.\n\nFor instance, in the web page:\n```\n   var app = Elm.fullscreen(Elm.YourModule,\n               { locationSearch: window.location.search });\n```\nin YourModule.elm:\n```\nport locationSearch : String\n```\n\nThen parse the value of the port - this example discards errors:\n```\nparameters : Dict String String\nparameters =\n  case (parseSearchString locationSearch) of\n    Error _ -> Dict.empty\n    UrlParams dict -> dict\n```\n\nThen use that dict when you call your init function that needs the value of the parameter. It'll get a Maybe String.\n```\ninit (Dict.get parameters \"customerID\")\n\ninit : Maybe String -> Model\ninit maybeID = ...\n```\n\n# Method\n@docs parseSearchString\n\n# Return type\n@docs ParseResult\n",
        "aliases": [],
        "types": [
          {
            "name": "ParseResult",
            "comment": " If parsing is successful, you get a UrlParams containing a dictionary of keys to values.\nOtherwise, an error string.\nIf there are no parameters, you'll get an error description.\n",
            "args": [],
            "cases": [
              [
                "Error",
                [
                  "String"
                ]
              ],
              [
                "UrlParams",
                [
                  "Dict.Dict String String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parseSearchString",
            "comment": " Given a search string of the form \"?key=value&key2=val2\"\nparse these into a dictionary of key to value.\n",
            "type": "String -> UrlParameterParser.ParseResult"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "danyx23/elm-dropzone",
    "version": "1.0.2",
    "docs": [
      {
        "name": "DropZone",
        "comment": " This library makes it easier to use Html5 Drag/Drop events when you want\nto support dropping of files into a webpage. \n\n# Main DnD support\n@docs dropZoneEventHandlers\n\n# Drop action\n@docs Action\n\n# Model\n@docs Model\n\n# Helper functions\n@docs init, update, isHovering\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Opaque model of the DropZone.\n",
            "args": [],
            "type": "{ hoverState : DropZone.HoverState }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " The Drop actions is tagged with a (List NativeFile) that represent the files\nthe user dropped onto the element. Handle this action in your code and do something\nwith the files.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Drop",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "dropZoneEventHandlers",
            "comment": " Returns a list of Attributes to add to an element to turn it into a \n\"Dropzone\" by registering the required event handlers. \n\nThe Json.Decoder you pass in is used to extract the data from the drop operation.\nIf the drop operation is a user dropping files in a browser, you will want to \nextract the .dataTransfer.files content. The FileReader project\n( https://github.com/simonh1000/file-reader ) provides a convinience function \n`parseDroppedFiles` to do this for you.\n\n    -- Example view, renders a div that acts as a dropzone by \n    -- adding the dragDropEventHandlers. Note that DropZoneAction \n    -- would be one of your components Actions, tagged with \n    -- the Action of the Dropzone. Since we pass just a dummy Json.value\n    -- decoder, the Drop action will be tagged with this. A real example\n    -- may want to use parseDroppedFiles\n    view : Signal.Address Action -> Model -> Html\n    view address model =\n        div\n        (  dropZoneStyle model.dropZoneModel \n        :: dragDropEventHandlers (Json.value) (Signal.forwardTo address DropZoneAction))    \n        [ renderImageOrPrompt model\n        ]\n",
            "type": "Json.Decode.Decoder a -> Signal.Address (DropZone.Action a) -> List Html.Attribute"
          },
          {
            "name": "init",
            "comment": " Initializes the Model\n",
            "type": "DropZone.Model"
          },
          {
            "name": "isHovering",
            "comment": " Function that tells you if the user is currently hovering over the dropzone\nwith a Drag operation. \n\nThis information is stored inside the model and thus\nisHovering can only give you a correct information if you attached the event\nhandlers to the dropzone you render and make sure that Dropzone Actions are \"routed\"\nto the update function of the DropZone\n\n    getDropZoneAttributes : Signal.Address Action -> DropZone.Model -> List Html.Attribute\n    getDropZoneAttributes address dropZoneModel =\n        ( if (DropZone.isHovering dropZoneModel) then\n            style [( \"border\", \"3px dashed red\")]\n          else\n            style [( \"border\", \"3px dashed steelblue\")]\n        )\n        ::\n        dragDropEventHandlers (Signal.forwardTo address DnD)\n",
            "type": "DropZone.Model -> Bool"
          },
          {
            "name": "update",
            "comment": " Updates the Model from an Action.\n",
            "type": "DropZone.Action a -> DropZone.Model -> DropZone.Model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "danyx23/elm-mimetype",
    "version": "2.0.0",
    "docs": [
      {
        "name": "MimeType",
        "comment": " This modules provides the union type MimeType to model some of the most common\nmime types and a parsing function that tries to parse a MimeType. The possible values for\nMimeType are all union types as well that specify the Sub-type. It was originally developed to\nclassify files dropped into the browser via the HTML5 Drag and Drop api.\n\nThis library ATM provides only an incomplete, somewhat arbitrary mapping of the most common\nbrowser mime types.\nSee https://code.google.com/p/chromium/codesearch#chromium/src/net/base/mime_util.cc&l=201\nfor a full list of Mime types as implemented in chromium.\n\n# Mime type\n@docs MimeType\n\n# Parsing function & toString\n@docs parseMimeType, toString\n\n# Subtypes\n@docs MimeText, MimeImage, MimeAudio, MimeVideo, MimeApp\n\n",
        "aliases": [],
        "types": [
          {
            "name": "MimeApp",
            "comment": " Models the most common app subtypes\n",
            "args": [],
            "cases": [
              [
                "Word",
                []
              ],
              [
                "WordXml",
                []
              ],
              [
                "Excel",
                []
              ],
              [
                "ExcelXml",
                []
              ],
              [
                "PowerPoint",
                []
              ],
              [
                "PowerPointXml",
                []
              ],
              [
                "OtherApp",
                []
              ]
            ]
          },
          {
            "name": "MimeAudio",
            "comment": " Models the most common audio subtypes\n",
            "args": [],
            "cases": [
              [
                "Mp3",
                []
              ],
              [
                "Ogg",
                []
              ],
              [
                "Wav",
                []
              ],
              [
                "OtherAudio",
                []
              ]
            ]
          },
          {
            "name": "MimeImage",
            "comment": " Models the most common image subtypes\n",
            "args": [],
            "cases": [
              [
                "Jpeg",
                []
              ],
              [
                "Png",
                []
              ],
              [
                "Gif",
                []
              ],
              [
                "OtherImage",
                []
              ]
            ]
          },
          {
            "name": "MimeText",
            "comment": " Models the most common text subtypes\n",
            "args": [],
            "cases": [
              [
                "PlainText",
                []
              ],
              [
                "Html",
                []
              ],
              [
                "Css",
                []
              ],
              [
                "Xml",
                []
              ],
              [
                "Json",
                []
              ],
              [
                "OtherText",
                []
              ]
            ]
          },
          {
            "name": "MimeType",
            "comment": " Models the major types image, audio, video and text\nwith a subtype or OtherMimeType\n",
            "args": [],
            "cases": [
              [
                "Image",
                [
                  "MimeType.MimeImage"
                ]
              ],
              [
                "Audio",
                [
                  "MimeType.MimeAudio"
                ]
              ],
              [
                "Video",
                [
                  "MimeType.MimeVideo"
                ]
              ],
              [
                "Text",
                [
                  "MimeType.MimeText"
                ]
              ],
              [
                "App",
                [
                  "MimeType.MimeApp"
                ]
              ],
              [
                "OtherMimeType",
                []
              ]
            ]
          },
          {
            "name": "MimeVideo",
            "comment": " Models the most common video subtypes\n",
            "args": [],
            "cases": [
              [
                "Mp4",
                []
              ],
              [
                "Mpeg",
                []
              ],
              [
                "Quicktime",
                []
              ],
              [
                "Avi",
                []
              ],
              [
                "Webm",
                []
              ],
              [
                "OtherVideo",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parseMimeType",
            "comment": " Tries to parse the Mime type from a string.\n\n    -- normal use of a type/subtype that is modelled:\n    parseMimeType \"image/jpeg\" == Just (Image Jpeg)\n\n    -- use of a subtype that is not modelled ATM\n    parseMimeType \"image/tiff\" == Just (Image OtherImage)\n\n    -- use with an empty string\n    parseMimeType \"\" == Nothing\n\n    -- use with something else\n    parseMimeType \"bla\" == Just OtherMimeType\n\n",
            "type": "String -> Maybe.Maybe MimeType.MimeType"
          },
          {
            "name": "toString",
            "comment": " Transforms a MimeType back to a string represenation.\nNote that this only works properly for correctly recognized\nmime types at the moment. A future version of this library\nwill instead store the originally parsed mime type.\n\n    toString (Image Jpeg) == \"image/jpeg\"\n",
            "type": "MimeType.MimeType -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "danyx23/elm-uuid",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Uuid",
        "comment": " This modules provides an opaque type for Uuids, helpers to serialize\nfrom and to String and helpers to generate new Uuids using Max Goldsteins\nRandom.PCG pseudo-random generator library.\n\nUuids are Universally Unique IDentifiers. They are 128 bit ids that are\ndesigned to be extremely unlikely to collide with other Uuids.\n\nThis library only supports generating Version 4 Uuid (those generated using \nrandom numbers, as opposed to hashing. See \n[Wikipedia on Uuids](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29) \nfor more details). Version 4 Uuids are constructed using 122 pseudo random bits.\n\nDisclaimer: If you use this Library to generate Uuids, please be advised\nthat it does not use a cryptographically secure pseudo random number generator.\nWhile Random.PCG is a definite improvement over Elms native RNG, depending\non your use case the randomness provided may not be enough.  \n\nThis library is split into two Modules. Uuid (this module) wraps Uuids in\nan opaque type for improved type safety. If you prefer to simply get strings\nyou can use the Uuid.Barebones module which provides methods to generate\nand verify Uuid as plain Strings.\n\nUuids can be generated either by parsing them from the canonical string representation\n(see fromString) or by generating them. If you are unfamiliar with random number generation\nin pure functional languages, this can be a bit confusing. The gist of it is that:\n\n1. you need a good random seed and this has to come from outside our wonderfully\npredictable Elm code (meaning you have to create an incoming port and feed in\nsome initial randomness)\n\n2. every call to generate a new Uuid will give you a tuple of a Uuid and a new \nseed. It is very important that whenever you generate a new Uuid you store this\nseed you get back into your model and use this one for the next Uuid generation. \nIf you reuse a seed, you will create the same Uuid twice! \n\nHere is a complete example that shows how to initialize the random number seed\nand how to carry the returned seed forward to the next Uuid generation.\n\n    import Uuid\n    import Random.PCG exposing (generate, Seed, initialSeed2)\n    import StartApp.Simple exposing (start)\n    import Html exposing (Html, div, button, text)\n    import Html.Events exposing (onClick)\n\n    -- 1.: Plumbing code to get a good initial random seed from Javascript \n    --     via a port (As described in the docs of mgold/elm-random-pcg) \n    port randomSeed : (Int, Int)\n\n    seed0 : Seed\n    seed0 = (uncurry initialSeed2) randomSeed\n\n    -- attention, this has to go in your Javascript code\n    -- Begin JS code\n    Elm.fullscreen(Elm.ModuleName,\n      {randomSeed: [Math.floor(Math.random()*0xFFFFFFFF), \n                    Math.floor(Math.random()*0xFFFFFFFF)] })\n    -- End JS code\n      \n    -- 2.: In your elm code, store the seed and update it every time you \n    --     create a new Uuid\n    type alias Model = \n      { currentSeed : Seed\n      , currentUuid : Maybe Uuid.Uuid\n      }\n\n    type Action = NewUuid\n\n    update : Action -> Model -> Model\n    update action model =\n      case action of \n        NewUuid ->\n          let\n            (newUuid, newSeed) = generate Uuid.uuidGenerator model.currentSeed\n          in\n          { model\n          | currentUuid = Just newUuid\n          , currentSeed = newSeed \n          }\n\n    view : Signal.Address Action -> Model -> Html      \n    view address model =\n      let\n        uuidText = case model.currentUuid of\n                    Nothing -> \n                      \"No Uuid was created so far\"\n                    Just uuid ->\n                        \"Current Uuid: \" ++ Uuid.toString uuid\n      in\n        div []\n          [ button [ onClick address NewUuid ] [ text \"Create a new Uuid!\" ]\n          , text uuidText          \n          ]\n        \n    main =\n      start\n        { model = { currentSeed = seed0, currentUuid = Nothing }\n        , update = update\n        , view = view\n        }\n\n@docs Uuid, uuidGenerator, fromString, toString\n",
        "aliases": [],
        "types": [
          {
            "name": "Uuid",
            "comment": " Uuid type. Represents a 128 bit Uuid (Version 4) \n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromString",
            "comment": " Create a Uuid from a String in the canonical form (e.g. \n\"63B9AAA2-6AAF-473E-B37E-22EB66E66B76\"). Note that this module only supports \ncanonical Uuids, Versions 1-5 and will refuse to parse other Uuid variants.\n",
            "type": "String -> Maybe.Maybe Uuid.Uuid"
          },
          {
            "name": "toString",
            "comment": " Create a string representation from a Uuid in the canonical 8-4-4-4-12 form, i.e. \n\"63B9AAA2-6AAF-473E-B37E-22EB66E66B76\"\n",
            "type": "Uuid.Uuid -> String"
          },
          {
            "name": "uuidGenerator",
            "comment": " Random.PCG Generator for Uuids. Using this Generator instead of the generate\nfunction let's you use the full power of the Random.PCG to create lists of Uuids, \nmap them to other types etc. \n",
            "type": "Random.PCG.Generator Uuid.Uuid"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Uuid.Barebones",
        "comment": " This is the Uuid.Barebones version that generates valid Uuids\nas Strings and provides a method to verify if a given String is a\nvalid Uuid.\n\nSee the main Uuid module docs for more information on how\n\n@docs uuidStringGenerator, isValidUuid\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "isValidUuid",
            "comment": " Verification function to check if the given string is a valid Uuid in the canonical\nrepresentation xxxxxxxx-xxxx-Axxx-Yxxx-xxxxxxxxxxxx where A is the version number between\n[1-5] and Y is in the range [8-B]\n",
            "type": "String -> Bool"
          },
          {
            "name": "uuidStringGenerator",
            "comment": " Random.PCG Generator for Uuid Strings. Using this Generator instead of the generate\nfunction lets you use the full power of the Random.PCG library to create lists of Uuids,\nmap them to other types etc.\n",
            "type": "Random.PCG.Generator String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dasch/elm-basics-extra",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Basics.Extra",
        "comment": " Additional useful functions.\n\n\n# Tuples\n@docs swap\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "swap",
            "comment": " Swaps the elements in a tuple.\n\n    swap (1, 2) == (2, 1)\n\n",
            "type": "( a, b ) -> ( b, a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "deadfoxygrandpa/elm-architecture",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Architecture.Simple",
        "comment": " This module is used for creating a simpler Signal that does not need to\nrely on Effects. In other respects, it is the same as the base Architecture\nmodule.\n\nIt is designed to work perfectly with [the Elm Architecture][arch] which\ndescribes a simple architecture pattern that makes testing and refactoring\nshockingly pleasant. Definitely read [the tutorial][arch] to get started!\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n# Start your Application\n@docs start, Config\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration has three key components:\n\n  * `model` &mdash; a big chunk of data fully describing your application.\n\n  * `view` &mdash; a way to convert your model into your desired output type.\n    It takes in two arguments. One is the model, which contains *all* the\n    information about our app. The other is an [`Address`][address] that helps\n    us handle user input. Whenever there is a click or key press, we send a\n    message to the address describing what happened and where.\n\n  * `update` &mdash; a function to update your model. Whenever an event\n    occurs, is routed through the `Address` to this update function. We take\n    in the message and the current model, then we give back a new model!\n\n[The Elm Architecture][arch] augments this basic pattern to give you all the\nmodularity you want. But since we have whole model in one place, it is\nalso really easy to support features like *save* and *undo* that can be quite\nhard in other languages.\n\n[address]: http://package.elm-lang.org/packages/elm-lang/core/2.0.1/Signal#Mailbox\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n",
            "args": [
              "model",
              "action",
              "output"
            ],
            "type": "{ model : model , view : Signal.Address action -> model -> output , update : action -> model -> model }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " This starts up your application. The following code sets up a counter\nthat can be incremented and decremented. You can read more about writing\nprograms like this [here](https://github.com/evancz/elm-architecture-tutorial/).\n\n    import Graphics.Element exposing (show, flow, down)\n    import Graphics.Input exposing (button)\n    import Architecture.Simple as Architecture\n\n    main =\n      Architecture.start { model = model, view = view, update = update }\n\n    model = 0\n\n    view address model =\n      flow down <|\n        [ button (Signal.message address Decrement) \"-\"\n        , show model\n        , button (Signal.message address Increment) \"+\"\n        ]\n\n    type Action = Increment | Decrement\n\n    update action model =\n      case action of\n        Increment -> model + 1\n        Decrement -> model - 1\n\nNotice that the program cleanly breaks up into model, update, and view.\nThis means it is super easy to test your update logic independent of any\nrendering.\n",
            "type": "Architecture.Simple.Config model action output -> Signal.Signal output"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Architecture",
        "comment": " This module helps you create a complex signal in a typical Elm workflow.\nIt is an abstraction based on [StartApp][start-app]. Where StartApp allows you\nto create a `Signal Html`, this package allows you to create a `Signal a`, as\nlong as you supply a function `view : Signal.Adress Action -> Model -> a`.\nIt otherwise assumes you are following [the Elm Architecture][arch] and using\n[elm-effects][]. From there it will wire everything up for you!\n\n**Be sure to [read the Elm Architecture tutorial][arch] to learn how this all\nworks!**\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial\n[elm-effects]: http://package.elm-lang.org/packages/evancz/elm-effects/latest\n[start-app]: http://package.elm-lang.org/packages/evancz/start-app/latest\n\n# Start your Application\n@docs start, Config, Module\n\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration of an app follows the basic model / update / view pattern\nthat you see in every Elm program.\n\nThe `init` transaction will give you an initial model and create any tasks that\nare needed on start up.\n\nThe `update` and `view` fields describe how to step the model and view the\nmodel. Note that the biggest difference between this package and StartApp is\nthat the view function can produce any type, not only Html.\n\nThe `inputs` field is for any external signals you might need. If you need to\nget values from JavaScript, they will come in through a port as a signal which\nyou can pipe into your app as one of the `inputs`.\n",
            "args": [
              "model",
              "action",
              "output"
            ],
            "type": "{ init : ( model, Effects.Effects action ) , update : action -> model -> ( model, Effects.Effects action ) , view : Signal.Address action -> model -> output , inputs : List (Signal.Signal action) }"
          },
          {
            "name": "Module",
            "comment": " An `Module` is made up of a couple signals:\n\n  * `output` &mdash; a signal of `output` representing the current visual\n    representation of your module. This is the primary Signal intended for use\n    as the output of this package.\n\n  * `model` &mdash; a signal representing the current model. Generally you\n    will not need this one, but it is there just in case. You will know if you\n    need this.\n\n  * `tasks` &mdash; a signal of tasks that need to get run. Your app is going\n    to be producing tasks in response to all sorts of events, so this needs to\n    be hooked up to a `port` to ensure they get run.\n",
            "args": [
              "model",
              "output"
            ],
            "type": "{ output : Signal.Signal output , model : Signal.Signal model , tasks : Signal.Signal (Task.Task Effects.Never ()) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " Start an application. It requires a bit of wiring once you have created an\n`Module`. It should pretty much always look like this:\n\n    app =\n        start { init = init, view = view, update = update, inputs = [] }\n\n    output =\n        app.output\n\n    port tasks : Signal (Task.Task Never ())\n    port tasks =\n        app.tasks\n\nSo once we start the `Module` we feed the output signal into our main\napplication and feed the resulting tasks into a `port` that will run them all.\n",
            "type": "Architecture.Config model action output -> Architecture.Module model output"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "deadfoxygrandpa/elm-test",
    "version": "3.1.1",
    "docs": [
      {
        "name": "ElmTest",
        "comment": " A unit testing framework for Elm.\n\n# Tests\n@docs Test, test, defaultTest, equals, suite\n\n# Assertions\n@docs Assertion, assert, assertEqual, assertNotEqual, lazyAssert, assertionList, pass, fail\n\n# Running Tests\n@docs elementRunner, consoleRunner, stringRunner\n\n",
        "aliases": [
          {
            "name": "Assertion",
            "comment": " The basic unit of testability.\n",
            "args": [],
            "type": "ElmTest.Assertion.Assertion"
          },
          {
            "name": "Test",
            "comment": " The core unit representing a runnable test, or a group of tests called a\nsuite.\n",
            "args": [],
            "type": "ElmTest.Test.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "assert",
            "comment": " Basic function to assert that some expression is True\n",
            "type": "Bool -> ElmTest.Assertion"
          },
          {
            "name": "assertEqual",
            "comment": " Basic function to assert that two expressions are equal in value.\n",
            "type": "a -> a -> ElmTest.Assertion"
          },
          {
            "name": "assertNotEqual",
            "comment": " Basic function to assser that two expressions are not equal.\n",
            "type": "a -> a -> ElmTest.Assertion"
          },
          {
            "name": "assertionList",
            "comment": " Given a list of values and another list of expected values, generates a\nlist of assertions that these values are equal.\n",
            "type": "List a -> List a -> List ElmTest.Assertion"
          },
          {
            "name": "consoleRunner",
            "comment": " Run a test or a test suite with `laszlopandy/elm-console` and return an\n`IO ()` action which outputs the test results to console.\n",
            "type": "ElmTest.Test -> Console.IO ()"
          },
          {
            "name": "defaultTest",
            "comment": " Create a `Test` with a default name automatically chosen based on the inputs.\nFor example, `defaultTest (assertEqual 5 5)` will be named \"5 == 5\".\n",
            "type": "ElmTest.Assertion -> ElmTest.Test"
          },
          {
            "name": "elementRunner",
            "comment": " Run a test or a test suite and return an `Element` containing the\nformatted test results.\n",
            "type": "ElmTest.Test -> Graphics.Element.Element"
          },
          {
            "name": "equals",
            "comment": " Create a `Test` which asserts equality between two expressions.\nFor example, `(7 + 10) `equals` (1 + 16)` will create a `Test` which tests for\nequality between the statements `(7 + 10)` and `(1 + 16)`.\n",
            "type": "a -> a -> ElmTest.Test"
          },
          {
            "name": "fail",
            "comment": " Create an assertion that always fails, for reasons described by the given\nstring.\n",
            "type": "String -> ElmTest.Assertion"
          },
          {
            "name": "lazyAssert",
            "comment": " A lazy version of `assert`. Delays execution of the expression until tests\nare run.\n",
            "type": "(() -> Bool) -> ElmTest.Assertion"
          },
          {
            "name": "pass",
            "comment": " An assertion that always passes. This is useful when you have test results\nfrom another library but want to use ElmTest runners.\n",
            "type": "ElmTest.Assertion"
          },
          {
            "name": "stringRunner",
            "comment": " Run a test or a test suite and return the results as a `String`. Mostly\nuseful if you want to implement a different type of output for your test\nresults. If you aren't sure whether or not to use this function, you should\nprobably use either `elementRunner` or `consoleRunner`.\n",
            "type": "ElmTest.Test -> String"
          },
          {
            "name": "suite",
            "comment": " Convert a list of `Test`s to a test suite. Test suites are used to group\ntests into logical units, simplifying the management and running of many tests.\nTakes a name and a list of `Test`s. Since suites are also of type `Test`, they\ncan contain other suites, allowing for a more complex tree structure.\n",
            "type": "String -> List ElmTest.Test -> ElmTest.Test"
          },
          {
            "name": "test",
            "comment": " A basic function to create a `Test`. Takes a name and an `Assertion`.\n",
            "type": "String -> ElmTest.Assertion -> ElmTest.Test"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "debois/elm-dom",
    "version": "1.2.0",
    "docs": [
      {
        "name": "DOM",
        "comment": " You read values off the DOM by constructing a JSON decoder.\nSee the `target` value for example use.\n\n# Traversing the DOM\n@docs target, offsetParent, parentElement, nextSibling, previousSibling, childNode, childNodes\n\n# Geometry\nDecoders for reading sizing etc. properties off the DOM. All decoders return\nmeasurements in pixels.\n\nRefer to, e.g.,\n[the Mozilla documentation](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements)\nfor the precise semantics of these measurements. See also\n[this stackoverflow answer](https://stackoverflow.com/questions/294250/how-do-i-retrieve-an-html-elements-actual-width-and-height).\n\n@docs offsetWidth, offsetHeight\n@docs offsetLeft, offsetTop\n@docs Rectangle, boundingClientRect\n\n# Scroll\n@docs scrollLeft, scrollTop\n\n# Miscellanous\n@docs className\n",
        "aliases": [
          {
            "name": "Rectangle",
            "comment": " Types for rectangles.\n",
            "args": [],
            "type": "{ top : Float, left : Float, width : Float, height : Float }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "boundingClientRect",
            "comment": " Approximation of the method\n[getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Floaterface/nsIDOMClientRect),\nbased off\n[this stackoverflow answer](https://stackoverflow.com/questions/442404/retrieve-the-position-x-y-of-an-html-element).\n\nNB! This decoder is likely computationally expensive and may produce results\nthat differ slightly from `getBoundingClientRect` in browser-dependent ways.\n\n(I don't get to call getBoundingClientRect directly from Elm without going\nnative or using ports; my packages don't get to go native and I can find no\nsolution with ports. So we do it like in the bad old days with an O(lg n)\ntraversal of the DOM, only now through presumably expensive JSON decoders.\nIt's 2007 forever, baby!)\n",
            "type": "Json.Decode.Decoder DOM.Rectangle"
          },
          {
            "name": "childNode",
            "comment": " Find the ith child of an element. \n",
            "type": "Int -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "childNodes",
            "comment": " Get the children of an element.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"
          },
          {
            "name": "className",
            "comment": " Get the class name(s) of an element.\n",
            "type": "Json.Decode.Decoder String"
          },
          {
            "name": "nextSibling",
            "comment": " Get the next sibling of an element.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "offsetHeight",
            "comment": " Get the heigh of an element in pixels. Underlying implementation\nreads `.offsetHeight`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "offsetLeft",
            "comment": " Get the left-offset of the element in the parent element in pixels.\nUnderlying implementation reads `.offsetLeft`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "offsetParent",
            "comment": " Get the offsetParent of the current element. Returns first argument if the current\nelement is already the root; applies the second argument to the parent element\nif not.\n\nTo do traversals of the DOM, exploit that Elm allows recursive values. \n",
            "type": "a -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "offsetTop",
            "comment": " Get the top-offset of the element in the parent element in pixels.\nUnderlying implementation reads `.offsetTop`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "offsetWidth",
            "comment": " Get the width of an element in pixels; underlying implementation\nreads `.offsetWidth`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "parentElement",
            "comment": " Get the parent of an element. \n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "previousSibling",
            "comment": " Get the previous sibling of an element.\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "scrollLeft",
            "comment": " Get the amount of left scroll of the element in pixels.\nUnderlying implementation reads `.scrollLeft`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "scrollTop",
            "comment": " Get the amount of top scroll of the element in pixels.\nUnderlying implementation reads `.scrollTop`.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "target",
            "comment": " Get the target DOM element of an event. You will usually start with this\ndecoder. E.g., to make a button which when clicked emit an Action that carries\nthe width of the button:\n\n    import DOM exposing (target, offsetWidth)\n\n    type Action = Click Float\n\n    myButton : Signal.Address Action -> Html\n    myButton addr =\n      button\n        [ on \"click\" (target offsetWidth) (Click >> Signal.message addr) ]\n        [ text \"Click me!\" ]\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "debois/elm-mdl",
    "version": "3.1.0",
    "docs": [
      {
        "name": "Material",
        "comment": "\n\nMaterial Design component library for Elm based on Google's\n[Material Design Lite](https://www.getmdl.io/).\n\nClick \n[here](https://debois.github.io/elm-mdl/)\nfor a live demo. \n\n# Component model \n\nThe component model of the library is simply the Elm Architecture (TEA), i.e.,\neach component has types `Model` and `Action`, and values `view` and `update`. A\nminimal example using this library in plain TEA can be found\n  [here](https://github.com/debois/elm-mdl/blob/master/examples/Component-TEA.elm).\n\nUsing more than a few component in plain TEA is  unwieldy because of the large\namount of boilerplate one has to write. This library provides the \"component \nsupport\" for getting rid of most of that boilerplate. A minimal example using\ncomponent support is\n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\n\nIt is important to note that component support lives __within__ TEA; \nit is not an alternative architecture. \n\n# Getting started\n\nThe easiest way to get started is to start with one of the minimal examples above.\nWe recommend going with the one that uses \n[the one that uses](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm)\nthe library's component support rather than working directly in plain Elm\nArchitecture.\n\n# Interfacing with CSS\n\nThis library depends on the CSS part of Google's Material Design Lite. Your app\nwill have to load that. See the\n[Scheme](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Scheme)\nmodule for details. (The starting point implementations above\nload CSS automatically.)\n\nThe view function of most components has this signature: \n\n    view : Signal.Address -> Model -> List Style -> Html \n\nThe address is standard, and `Model` is just the model type of the component. \nThe third argument, `List Style`, is a mechanism for you to specify additional\nclasses and CSS for the component. You need this, e.g., when you want to\nspecify the width of a button. See the\n[Style](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Style)\nmodule for details. \n\nMaterial Design defines a color palette. The \n[Color](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Color)\nmodule contains various `Style` values and helper functions for working with\nthis color palette.\n\n\n\n# Component Support\n\nThis module contains only convenience functions for working with nested \ncomponents in the Elm architecture. A minimal example using this library\nwith component support can be found \n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\nWe encourage you to use the library in this fashion.\n\nAll examples in this subsection is from the \n[above minimal example](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm)\n\nHere is how you use component support in general.  First, boilerplate. \n\n 1. Include `Material`:\n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.1.3/material.min.css\" />\n\n 2. Add a model container Material components to your model:\n\n        type alias Model = \n          { ...\n          , mdl : Material.Model    \n          }\n\n        model : Model = \n          { ...\n          , mdl = Material.model\n          }\n\n 3. Add an action for Material components. \n\n        type Action = \n          ...\n          | MDL (Material.Action Action)\n\n 4. Handle that action in your update function as follows:\n\n        update action model = \n          case action of \n            ...\n            MDL action' -> \n              let (mdl', fx) = \n                Material.update MDL action' model.mdl \n              in \n                ( { model | mdl = mdl' } , fx )\n\nNext, make the component instances you need. Do this in the View section of your \nsource file. Let's say you need a textfield for name entry, and you'd like to\nbe notifed whenever the field changes value through your own NameChanged action: \n\n        import Material.Textfield as Textfield\n\n        ...\n\n        type Action = \n          ...\n          | NameChanged String\n\n        ... \n\n        update action model = \n          case action of \n            ...\n            NameChanged name -> \n              -- Do whatever you need to do. \n\n        ...\n\n        nameInput : Textfield.Instance Material.Model Action\n        nameInput = \n          Textfield.instance 2 MDL Textfield.model \n            [ Textfield.fwdInput NameChanged \n            ] \n        \n        view addr model = \n          ...\n          nameInput.view addr model.mdl \n\n\nThe win relative to using plain Elm Architecture is that adding a component\nneither requires you to update your model, your Actions, nor your update function. \n(As in the above example, you will frequently have to update the latter two anyway, \nbut now it's not boilerplate, its \"business logic\".)\n\n\n## Optimising for size\n\nUsing this module will force all elm-mdl components to be built and included in \nyour application. If this is unacceptable, you can custom-build a version of this\nmodule that uses only the components you need. To do so, you need to provide your\nown versions of the type `Model` and the value `model` of the present module. \nUse the corresponding definitions in this module as a starting point \n([source](https://github.com/debois/elm-mdl/blob/master/src/Material.elm)) \nand simply comment out the components you do not need. \n\n@docs Model, model, Action, update\n",
        "aliases": [
          {
            "name": "Action",
            "comment": " Action encompassing actions of all Material components. \n",
            "args": [
              "obs"
            ],
            "type": "Material.Component.Action Material.Model obs"
          },
          {
            "name": "Model",
            "comment": " Model encompassing all Material components. Since some components store\nuser actions in their model (notably Snackbar), the model is generic in the \ntype of such \"observations\". \n",
            "args": [],
            "type": "{ button : Material.Component.Indexed Material.Button.Model , textfield : Material.Component.Indexed Material.Textfield.Model , snackbar : Maybe.Maybe (Material.Snackbar.Model Int) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "model",
            "comment": " Initial model.\n",
            "type": "Material.Model"
          },
          {
            "name": "update",
            "comment": " Update function for the above Action. Provide as the first \nargument a lifting function that embeds the generic MDL action in \nyour own Action type. \n",
            "type": "(Material.Action obs -> obs) -> Material.Action obs -> Material.Model -> ( Material.Model, Effects.Effects obs )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Layout",
        "comment": " From the\n[Material Design Lite documentation](https://www.getmdl.io/components/index.html#layout-section):\n\n> The Material Design Lite (MDL) layout component is a comprehensive approach to\n> page layout that uses MDL development tenets, allows for efficient use of MDL\n> components, and automatically adapts to different browsers, screen sizes, and\n> devices.\n>\n> Appropriate and accessible layout is a critical feature of all user interfaces,\n> regardless of a site's content or function. Page design and presentation is\n> therefore an important factor in the overall user experience. See the layout\n> component's\n> [Material Design specifications page](https://www.google.com/design/spec/layout/structure.html#structure-system-bars)\n> for details.\n>\n> Use of MDL layout principles simplifies the creation of scalable pages by\n> providing reusable components and encourages consistency across environments by\n> establishing recognizable visual elements, adhering to logical structural\n> grids, and maintaining appropriate spacing across multiple platforms and screen\n> sizes. MDL layout is extremely powerful and dynamic, allowing for great\n> consistency in outward appearance and behavior while maintaining development\n> flexibility and ease of use.\n\n# Setup\n@docs setupSignals\n\n# Model & Actions\n@docs Mode, Model, defaultLayoutModel, initState, Action, update\n\n# View\n@docs Contents, view\n\n## Sub-views\n@docs row, spacer, title, navigation, link\n\n",
        "aliases": [
          {
            "name": "Contents",
            "comment": " Content of the layout only (contents of main pane is set elsewhere). Every\npart is optional; if you supply an empty list for either, the sub-component is \nomitted. \n\nThe `header` and `drawer` contains the contents of the header rows and drawer,\nrespectively. Use `row`, `spacer`, `title`, `nav`, and `link`, as well as\nregular Html to construct these. The `tabs` contains\nthe title of each tab.\n",
            "args": [],
            "type": "{ header : List Html.Html , drawer : List Html.Html , tabs : List Html.Html , main : List Html.Html }"
          },
          {
            "name": "Model",
            "comment": " Layout model. If your layout view has tabs, any tab with the same name as\n`selectedTab` will be highlighted as selected; otherwise, `selectedTab` has no\nsignificance. `isDrawerOpen` indicates whether the drawer, if the layout has\nsuch, is open; otherwise, it has no significance.\n\nThe header disappears on small devices unless\n`fixedHeader` is true. The drawer opens and closes with user interactions\nunless `fixedDrawer` is true, in which case it is permanently open on large\nscreens. Tabs scroll horisontally unless `fixedTabs` is true.\nFinally, the header respects `mode`\n\nThe `state` is the opaque\nlayout component state; use the function `initState` to construct it. If you\nchange the number of tabs, you must re-initialise this state.\n",
            "args": [],
            "type": "{ selectedTab : Int , isDrawerOpen : Bool , fixedHeader : Bool , fixedDrawer : Bool , fixedTabs : Bool , rippleTabs : Bool , mode : Material.Layout.Mode , state : Material.Layout.State }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Component actions.\nUse `SwitchTab` to request a switch of tabs. Use `ToggleDrawer` to toggle the\nopened/closed state of the drawer.\n",
            "args": [],
            "cases": [
              [
                "SwitchTab",
                [
                  "Int"
                ]
              ],
              [
                "ToggleDrawer",
                []
              ]
            ]
          },
          {
            "name": "Mode",
            "comment": " Mode for the header.\n- A `Standard` header casts shadow, is permanently affixed to the top of the screen.\n- A `Seamed` header does not cast shadow, is permanently affixed to the top of the\n  screen.\n- A `Scroll`'ing header scrolls with contents.\n- A `Waterfall` header drops either the top (argument True) or bottom (argument False) \nheader-row when content scrolls. \n",
            "args": [],
            "cases": [
              [
                "Standard",
                []
              ],
              [
                "Seamed",
                []
              ],
              [
                "Scroll",
                []
              ],
              [
                "Waterfall",
                [
                  "Bool"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultLayoutModel",
            "comment": " Default configuration of the layout: Fixed header, non-fixed drawer,\nnon-fixed tabs, tabs do not ripple, tab 0 is selected, standard header\nbehaviour.\n",
            "type": "Material.Layout.Model"
          },
          {
            "name": "initState",
            "comment": " Initialiser for Layout component state. Supply a number of tabs you\nuse in your layout. If you subsequently change the number of tabs, you\nmust re-initialise the state.\n",
            "type": "Int -> Material.Layout.State"
          },
          {
            "name": "link",
            "comment": " Link.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "navigation",
            "comment": " Container for links.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "row",
            "comment": " Header row. \n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "setupSignals",
            "comment": " Setup various signals layout needs (viewport size changes, scrolling). Use\nwith StartApp like so, supposing you have a `LayoutAction` encapsulating\nactions of the\nlayout:\n\n    inputs : List (Signal.Signal Action)\n    inputs =\n      [ Layout.setupSignals LayoutAction\n      ]\n",
            "type": "(Material.Layout.Action -> a) -> Signal.Signal a"
          },
          {
            "name": "spacer",
            "comment": " Push subsequent elements in header row or drawer column to the right/bottom.\n",
            "type": "Html.Html"
          },
          {
            "name": "title",
            "comment": " Title in header row or drawer.\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Layout.Action -> Material.Layout.Model -> ( Material.Layout.Model, Effects.Effects Material.Layout.Action )"
          },
          {
            "name": "view",
            "comment": " Main layout view.\n",
            "type": "Material.Layout.Addr -> Material.Layout.Model -> Material.Layout.Contents -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Scheme",
        "comment": " \nThe elm-mdl library depends on Google's MDL CSS implementation, and your\napplication must load this CSS in order for elm-mdl to function correctly.\nThere are two ways to accomplish this: \n\n1. Load CSS from HTML by adding suitable `<link ...>` directives to the\nHTML-file containing your app, or \n2. Load CSS from Elm (by inserting `style` elements into the DOM).\n\n\n# Load CSS from HTML \n\nTo load CSS manually, add the following to your main html file. \n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.1.3/material.min.css\" />\n\n# Loading CSS from Elm \n\n@docs topWithScheme, top\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "top",
            "comment": " Top-level container with default color scheme. See `topWithScheme` above.\n",
            "type": "Html.Html -> Html.Html"
          },
          {
            "name": "topWithScheme",
            "comment": " Top-level container for Material components. This will force loading of\nMaterial Design Lite CSS files by inserting an appropriate `style` element.\n\nSupply primary and accent colors as parameters. Refer to the Material Design\nLite [Custom CSS theme builder](https://www.getmdl.io/customize/index.html)\nto preview combinations.  Please be aware that Grey, Blue Grey, and Brown\ncannot be secondary colors. If you choose them as such anyway, you will get the\ndefault theme.\n\n**NB!** Using this top-level container is not recommended, as most browsers\nwill load CSS requested from `style` elements concurrently with rendering the\ninitial page, which will produce a flicker on page load. The container is\nincluded only to provide an option to get started quickly and for use with\nelm-reactor.\n\nTODO: Usage example\n",
            "type": "Material.Color.Hue -> Material.Color.Hue -> Html.Html -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Button",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#buttons-section):\n\n> The Material Design Lite (MDL) button component is an enhanced version of the\n> standard HTML `<button>` element. A button consists of text and/or an image that\n> clearly communicates what action will occur when the user clicks or touches it.\n> The MDL button component provides various types of buttons, and allows you to\n> add both display and click effects.\n>\n> Buttons are a ubiquitous feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the button component's Material\n> Design specifications page for details.\n>\n> The available button display types are flat (default), raised, fab, mini-fab,\n> and icon; any of these types may be plain (light gray) or colored, and may be\n> initially or programmatically disabled. The fab, mini-fab, and icon button\n> types typically use a small image as their caption rather than text.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/buttons.html).\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/buttons) \nfor a live demo. \n\n \n# Elm architecture\n@docs Model, model, Action, update, View\n\n# Style\n@docs colored, primary, accent\n\n# View\nRefer to the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html)\nfor details about what type of buttons are appropriate for which situations.\n\n@docs flat, raised, fab, minifab, icon\n\n# Component support\n@docs instance, fwdClick \n\n## Component instance types\n\n@docs Container, Observer, Instance\n\n",
        "aliases": [
          {
            "name": "Container",
            "comment": "\n",
            "args": [
              "c"
            ],
            "type": "{ c | button : Material.Component.Indexed Material.Button.Model }"
          },
          {
            "name": "Instance",
            "comment": "\n",
            "args": [
              "container",
              "obs"
            ],
            "type": "Material.Component.Instance Material.Button.Model container Material.Button.Action obs (List Material.Style.Style -> List Html.Html -> Html.Html)"
          },
          {
            "name": "Observer",
            "comment": "\n",
            "args": [
              "obs"
            ],
            "type": "Material.Component.Observer Material.Button.Action obs"
          },
          {
            "name": "View",
            "comment": " Type of button views. \n",
            "args": [],
            "type": "Signal.Address Material.Button.Action -> Material.Button.Model -> List Material.Style.Style -> List Html.Html -> Html.Html"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Component action. The `Click` action fires when the button is clicked.\n",
            "args": [],
            "cases": [
              [
                "Click",
                []
              ]
            ]
          },
          {
            "name": "Model",
            "comment": " Model of the button; common to all kinds of button.\nUse `model` to initalise it.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "accent",
            "comment": " Color button with accent color. \n",
            "type": "Material.Style.Style"
          },
          {
            "name": "colored",
            "comment": " Color button with primary or accent color depending on button type.\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "fab",
            "comment": " Floating Action Button. From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons-floating-action-button.html):\n\n> Floating action buttons are used for a promoted action. They are distinguished\n> by a circled icon floating above the UI and have motion behaviors that include\n> morphing, launching, and a transferring anchor point.\n>\n> Floating action buttons come in two sizes:\n>\n>  - Default size: For most use cases\n>  - Mini size: Only used to create visual continuity with other screen elements\n\nThis constructor produces the default size, use `minifab` to get the mini-size.\n\nExample use (colored with a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    fabButton : Html\n    fabButton = fab addr model Colored [Icon.i \"add\"]\n",
            "type": "Material.Button.View"
          },
          {
            "name": "flat",
            "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-flat-buttons):\n\n> Flat buttons are printed on material. They do not lift, but fill with color on\n> press.\n>\n> Use flat buttons in the following locations:\n>\n>  - On toolbars\n>  - In dialogs, to unify the button action with the dialog content\n>  - Inline, with padding, so the user can easily find them\n\nExample use (uncolored flat button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    flatButton : Html\n    flatButton = Button.flat addr model Button.Plain [text \"Click me!\"]\n\n",
            "type": "Material.Button.View"
          },
          {
            "name": "fwdClick",
            "comment": " Lift the button Click action to your own action. \n",
            "type": "obs -> Material.Button.Observer obs"
          },
          {
            "name": "icon",
            "comment": " The [Material Design Lite implementation](https://www.getmdl.io/components/index.html#buttons-section)\nalso offers an \"icon button\", which we\nre-implement here. See also\n[Material Design Specification](http://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons).\nExample use (no color, displaying a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    iconButton : Html\n    iconButton = icon addr model Plain [Icon.i \"add\"]\n",
            "type": "Material.Button.View"
          },
          {
            "name": "instance",
            "comment": " Create a component instance. Example usage, assuming you have a type\n`Action` with a constructor `MyButtonAction : Action`, and that your \n`model` has a field `mdl : Material.Model`. \n\n    type alias Mdl = \n      Material.Model \n\n\n    myButton : Button.Instance Mdl Action \n    myButton = \n      Button.instance 0 MDL\n        Button.raised (Button.model True)\n        [ Button.fwdClick MyButtonAction ]\n\n\n    -- in your view:\n    ... \n      div \n        []\n        [ myButton.view addr model.mdl [ Button.colored ] [ text \"Click me!\" ]\n",
            "type": "Int -> (Material.Component.Action (Material.Button.Container c) obs -> obs) -> Material.Button.View -> Material.Button.Model -> List (Material.Button.Observer obs) -> Material.Button.Instance (Material.Button.Container c) obs"
          },
          {
            "name": "minifab",
            "comment": " Mini-sized variant of a Floating Action Button; refer to `fab`.\n",
            "type": "Material.Button.View"
          },
          {
            "name": "model",
            "comment": " Model initialiser. Call with `True` if the button should ripple when\nclicked, `False` otherwise.\n",
            "type": "Bool -> Material.Button.Model"
          },
          {
            "name": "primary",
            "comment": " Color button with primary color.\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "raised",
            "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-raised-buttons):\n\n> Raised buttons add dimension to mostly flat layouts. They emphasize functions\n> on busy or wide spaces.\n>\n> Raised buttons behave like a piece of material resting on another sheet –\n> they lift and fill with color on press.\n\nExample use (colored raised button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    raisedButton : Html\n    raisedButton = Button.raised addr model Button.Colored [text \"Click me!\"]\n\n",
            "type": "Material.Button.View"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Button.Action -> Material.Button.Model -> ( Material.Button.Model, Effects.Effects Material.Button.Action )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Textfield",
        "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#textfields-section):\n\n> The Material Design Lite (MDL) text field component is an enhanced version of\n> the standard HTML `<input type=\"text\">` and `<input type=\"textarea\">` elements.\n> A text field consists of a horizontal line indicating where keyboard input\n> can occur and, typically, text that clearly communicates the intended\n> contents of the text field. The MDL text field component provides various\n> types of text fields, and allows you to add both display and click effects.\n>\n> Text fields are a common feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the text field component's\n> [Material  Design specifications page](https://www.google.com/design/spec/components/text-fields.html)\n> for details.\n>\n> The enhanced text field component has a more vivid visual look than a standard\n> text field, and may be initially or programmatically disabled. There are three\n> main types of text fields in the text field component, each with its own basic\n> coding requirements. The types are single-line, multi-line, and expandable.\n\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/textfields)\nfor a live demo.\n \nThis implementation provides only single-line.\n\n\n# Configuration\n@docs Kind, Label\n\n# Elm Architecture\n@docs Action, Model, model, update, view\n\n# Component\n@docs Container, Instance\n@docs instance, fwdInput, fwdBlur, fwdFocus\n\n",
        "aliases": [
          {
            "name": "Container",
            "comment": "\n",
            "args": [
              "c"
            ],
            "type": "{ c | textfield : Material.Component.Indexed Material.Textfield.Model }"
          },
          {
            "name": "Instance",
            "comment": " \n",
            "args": [
              "container",
              "obs"
            ],
            "type": "Material.Component.Instance Material.Textfield.Model container Material.Textfield.Action obs (List Material.Style.Style -> Html.Html)"
          },
          {
            "name": "Label",
            "comment": " Label configuration. The `text` is the text of the label;\nthe label floats if `float` is True.\n",
            "args": [],
            "type": "{ text : String, float : Bool }"
          },
          {
            "name": "Model",
            "comment": " Model. The textfield is in its error-container if `error` is not `Nothing`.\nThe contents of the field is `value`.\n",
            "args": [],
            "type": "{ label : Maybe.Maybe Material.Textfield.Label , error : Maybe.Maybe String , kind : Material.Textfield.Kind , isDisabled : Bool , isFocused : Bool , value : String }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Component actions. `Input` carries the new value of the field.\n",
            "args": [],
            "cases": [
              [
                "Input",
                [
                  "String"
                ]
              ],
              [
                "Blur",
                []
              ],
              [
                "Focus",
                []
              ]
            ]
          },
          {
            "name": "Kind",
            "comment": " Kind of textfield. Currently supports only single-line input or password\ninputs.\n",
            "args": [],
            "cases": [
              [
                "SingleLine",
                []
              ],
              [
                "Password",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "fwdBlur",
            "comment": " Lift the Blur action to your own action. \n",
            "type": "obs -> Material.Textfield.Action -> Maybe.Maybe obs"
          },
          {
            "name": "fwdFocus",
            "comment": " Lift the Focus action to your own action.\n",
            "type": "obs -> Material.Textfield.Action -> Maybe.Maybe obs"
          },
          {
            "name": "fwdInput",
            "comment": " Lift the button Click action to your own action. E.g., \n",
            "type": "(String -> obs) -> Material.Textfield.Action -> Maybe.Maybe obs"
          },
          {
            "name": "instance",
            "comment": " Component constructor. See module `Material`.\n",
            "type": "Int -> (Material.Component.Action (Material.Textfield.Container c) obs -> obs) -> Material.Textfield.Model -> List (Material.Component.Observer Material.Textfield.Action obs) -> Material.Textfield.Instance (Material.Textfield.Container c) obs"
          },
          {
            "name": "model",
            "comment": " Default model. No label, error, or value.\n",
            "type": "Material.Textfield.Model"
          },
          {
            "name": "update",
            "comment": " Component update.\n",
            "type": "Material.Textfield.Action -> Material.Textfield.Model -> Material.Textfield.Model"
          },
          {
            "name": "view",
            "comment": " Component view.\n",
            "type": "Signal.Address Material.Textfield.Action -> Material.Textfield.Model -> List Material.Style.Style -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icon",
        "comment": " Convenience functions for producing Material Design Icons. Refer to\n[the Material Design Icons page](https://google.github.io/material-design-icons),\nor skip straight to the [Material Icons Library](https://design.google.com/icons/).\n\nThis implementation assumes that you have\n\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\">\n\nor an equivalent means of loading the icons in your HTML header. \n(`Material.top` will do this for you.)\n\n@docs i, view, size18, size24, size36, size48\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "i",
            "comment": " Render a default-sized icon with no behaviour. The\n`String` argument must be the name of a [Material Icon](https://design.google.com/icons/)\n(replace spaces with underscores).\n\nI.e., to produce a default size (24xp) \"trending flat\" icon:\n\n    import Material.Icon as Icon\n\n    icon : Html\n    icon = Icon.i \"trending_flat\"\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "size18",
            "comment": " Set icon to have size 18px. \n",
            "type": "Material.Style.Style"
          },
          {
            "name": "size24",
            "comment": " Set icon to have size 24px. \n",
            "type": "Material.Style.Style"
          },
          {
            "name": "size36",
            "comment": " Set icon to have size 36px. \n",
            "type": "Material.Style.Style"
          },
          {
            "name": "size48",
            "comment": " Set icon to have size 48px. \n",
            "type": "Material.Style.Style"
          },
          {
            "name": "view",
            "comment": " View function for icons. Supply the\n[Material Icons Library](https://design.google.com/icons/) name as\nthe first argument (replace spaces with underscores). Set the size of the\nicon with the `size..` Styles (default is 24px).  Do not use this function to\nproduce clickable icons; use icon buttons in Material.Button.icon for that.\n\n    import Material.Icon as Icon\n\n    icon : Html\n    icon = Icon.view \"trending_flat\" [Icon.size48] []\n",
            "type": "String -> List Material.Style.Style -> List Html.Attribute -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Grid",
        "comment": " From the\n[Material Design Lite documentation](http://www.getmdl.io/components/#layout-section/grid):\n\n> The Material Design Lite (MDL) grid component is a simplified method for laying\n> out content for multiple screen sizes. It reduces the usual coding burden\n> required to correctly display blocks of content in a variety of display\n> conditions.\n>\n> The MDL grid is defined and enclosed by a container element. A grid has 12\n> columns in the desktop screen size, 8 in the tablet size, and 4 in the phone\n> size, each size having predefined margins and gutters. Cells are laid out\n> sequentially in a row, in the order they are defined, with some exceptions:\n>\n>   - If a cell doesn't fit in the row in one of the screen sizes, it flows\n>     into the following line.\n>   - If a cell has a specified column size equal to or larger than the number\n>     of columns for the current screen size, it takes up the entirety of its\n>     row.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/grid)\nfor a live demo. \n\nExample use:\n\n    import Material.Grid exposing (grid, cell, size, Device(..))\n\n    top : Html\n    top =\n      grid []\n        [ cell [ size All 4 ]\n            [ h4 [] [text \"Cell 1\"]\n            ]\n        , cell [ offset All 2, size All 4 ]\n            [ h4 [] [text \"Cell 2\"]\n            , p [] [text \"This cell is offset by 2\"]\n            ]\n        , cell [ size All 6 ]\n            [ h4 [] [text \"Cell 3\"]\n            ]\n        , cell [ size Tablet 6, size Desktop 12, size Phone 2 ]\n            [ h4 [] [text \"Cell 4\"]\n            , p [] [text \"Size varies with device\"]\n            ]\n        ]\n\n# Grid container\n@docs grid, noSpacing, maxWidth\n\n# Cells\n\nCells are configured with a `List Style`; this configuration dictates the\nsize, offset, etc. of the cell. \n\n@docs cell, Cell, Device, size, offset, Align, align, hide, order\n",
        "aliases": [],
        "types": [
          {
            "name": "Align",
            "comment": " Alignment of cell contents; use with `align`.\n",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Middle",
                []
              ],
              [
                "Bottom",
                []
              ]
            ]
          },
          {
            "name": "Cell",
            "comment": " Opaque cell type.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Device",
            "comment": " Device specifiers, used with `size` and `offset`. (A `Device` really\nencapsulates a screen size.)\n",
            "args": [],
            "cases": [
              [
                "All",
                []
              ],
              [
                "Desktop",
                []
              ],
              [
                "Tablet",
                []
              ],
              [
                "Phone",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "align",
            "comment": " Specify vertical cell alignment. See `Align`.\n",
            "type": "Material.Grid.Align -> Material.Style.Style"
          },
          {
            "name": "cell",
            "comment": " Construct a cell for use in the argument list for `grid`. Note that this\nmodule defines various styles to set size, offset, etc. of the cell. \n",
            "type": "List Material.Style.Style -> List Html.Html -> Material.Grid.Cell"
          },
          {
            "name": "grid",
            "comment": " Construct a grid with options.\n",
            "type": "List Material.Style.Style -> List Material.Grid.Cell -> Html.Html"
          },
          {
            "name": "hide",
            "comment": " Specify that a cell should be hidden on given `Device`.\n",
            "type": "Material.Grid.Device -> Material.Style.Style"
          },
          {
            "name": "maxWidth",
            "comment": " Set maximum grid width. If more space is available, the grid stays centered with\npadding on either side. Width must be a valid CSS dimension. \n",
            "type": "String -> Material.Style.Style"
          },
          {
            "name": "noSpacing",
            "comment": " Set grid to have no spacing between cells. \n",
            "type": "Material.Style.Style"
          },
          {
            "name": "offset",
            "comment": " Specify cell offset, i.e., empty number of empty cells before the present\none. On devices of type `Device`, leave `Int` columns blank before the present\none begins.\n",
            "type": "Material.Grid.Device -> Int -> Material.Style.Style"
          },
          {
            "name": "order",
            "comment": " Specify that a cell should re-order itself to position 'Int' on `Device`.\n",
            "type": "Material.Grid.Device -> Int -> Material.Style.Style"
          },
          {
            "name": "size",
            "comment": " Specify cell size. On devices of type `Device`, the\ncell being specified spans `Int` columns.\n",
            "type": "Material.Grid.Device -> Int -> Material.Style.Style"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Color",
        "comment": " Material Design color palette.\n\n# Palette\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> The color palette starts with primary colors and fills in the spectrum to\n> create a complete and usable palette for Android, Web, and iOS. Google suggests\n> using the 500 colors as the primary colors in your app and the other colors as\n> accents colors.\n\n@docs Color, white, black, Hue, Shade, color\n\n# Color Schemes\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> [The Material Design] palette comprises primary and accent colors that can be\n> used for illustration or to develop your brand colors. They’ve been designed\n> to work harmoniously with each other.  [...] Apps that don’t have existing\n> color schemes may select colors from the material design color palette. Limit\n> your selection of colors to three hues from the primary palette and one\n> accent color from the secondary palette.\n\nThe Material Design Lite CSS supports this selection; you choose your primary\nand accent colors when loading MDL css; see\n`Material.top`. Many components can be instructed to take on one of the four hues\nmentioned above; below you'll find constructors for these scheme-dependent\ncolors.\n\n@docs primary, primaryDark, primaryContrast, accent, accentContrast\n\n# Styles\n@docs background, text\n\n# Misc\n@docs hues, shades, scheme\n",
        "aliases": [],
        "types": [
          {
            "name": "Color",
            "comment": " Type of colors.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Hue",
            "comment": " Color palette.\n",
            "args": [],
            "cases": [
              [
                "Indigo",
                []
              ],
              [
                "Blue",
                []
              ],
              [
                "LightBlue",
                []
              ],
              [
                "Cyan",
                []
              ],
              [
                "Teal",
                []
              ],
              [
                "Green",
                []
              ],
              [
                "LightGreen",
                []
              ],
              [
                "Lime",
                []
              ],
              [
                "Yellow",
                []
              ],
              [
                "Amber",
                []
              ],
              [
                "Orange",
                []
              ],
              [
                "Brown",
                []
              ],
              [
                "BlueGrey",
                []
              ],
              [
                "Grey",
                []
              ],
              [
                "DeepOrange",
                []
              ],
              [
                "Red",
                []
              ],
              [
                "Pink",
                []
              ],
              [
                "Purple",
                []
              ],
              [
                "DeepPurple",
                []
              ]
            ]
          },
          {
            "name": "Shade",
            "comment": "\n",
            "args": [],
            "cases": [
              [
                "S50",
                []
              ],
              [
                "S100",
                []
              ],
              [
                "S200",
                []
              ],
              [
                "S300",
                []
              ],
              [
                "S400",
                []
              ],
              [
                "S500",
                []
              ],
              [
                "S600",
                []
              ],
              [
                "S700",
                []
              ],
              [
                "S800",
                []
              ],
              [
                "S900",
                []
              ],
              [
                "A100",
                []
              ],
              [
                "A200",
                []
              ],
              [
                "A400",
                []
              ],
              [
                "A700",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "accent",
            "comment": " Accent color.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "accentContrast",
            "comment": " Accent color, contrast variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "background",
            "comment": " Background color.\n",
            "type": "Material.Color.Color -> Material.Style.Style"
          },
          {
            "name": "black",
            "comment": " Black color.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "color",
            "comment": " Construct a specific color given a palette base hue and a shade.\n",
            "type": "Material.Color.Hue -> Material.Color.Shade -> Material.Color.Color"
          },
          {
            "name": "hues",
            "comment": " Hues as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Hue"
          },
          {
            "name": "primary",
            "comment": " Primary color of the theme.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "primaryContrast",
            "comment": " Primary color, contrast variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "primaryDark",
            "comment": " Primary color, dark variant.\n",
            "type": "Material.Color.Color"
          },
          {
            "name": "scheme",
            "comment": " Given primary and accent base colors, compute name of appropriate MDL .css-file.\n(You are not likely to need to call this function.)\n",
            "type": "Material.Color.Hue -> Material.Color.Hue -> String"
          },
          {
            "name": "shades",
            "comment": " Shades as array. Mostly useful for demos.\n",
            "type": "Array.Array Material.Color.Shade"
          },
          {
            "name": "text",
            "comment": " Text or foreground color.\n",
            "type": "Material.Color.Color -> Material.Style.Style"
          },
          {
            "name": "white",
            "comment": " White color.\n",
            "type": "Material.Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Elevation",
        "comment": " From the [Material Design Lite documentation](https://github.com/google/material-design-lite/blob/master/src/shadow/README.md)\n\n> The Material Design Lite (MDL) shadow is not a component in the same sense as\n> an MDL card, menu, or textbox; it is a visual effect that can be assigned to a\n> user interface element. The effect simulates a three-dimensional positioning of\n> the element, as though it is slightly raised above the surface it rests upon —\n> a positive z-axis value, in user interface terms. The shadow starts at the\n> edges of the element and gradually fades outward, providing a realistic 3-D\n> effect.\n> \n> Shadows are a convenient and intuitive means of distinguishing an element from\n> its surroundings. A shadow can draw the user's eye to an object and emphasize\n> the object's importance, uniqueness, or immediacy.\n> \n> Shadows are a well-established feature in user interfaces, and provide users\n> with a visual clue to an object's intended use or value. Their design and use\n> is an important factor in the overall user experience.)\n\nThe [Material Design Specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-elevation-android-)\npre-defines appropriate elevation for most UI elements; you need to manually\nassign shadows only to your own elements. \n\nYou are encouraged to visit the\n[Material Design specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html)\nfor details about appropriate use of shadows. \n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/elevation)\nfor a live demo. \n  \n\n# Elevations\nEach of the values below denote an elevation of a certain heigh, e.g., \n`e4` will cast a shadow indicating an elevation of 4dp. \n@docs e2, e3, e4, e6, e8, e16, e24\n@docs elevations\n\n# Transitions\n@docs transition\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "e16",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "e2",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "e24",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "e3",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "e4",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "e6",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "e8",
            "comment": "\n",
            "type": "Material.Style.Style"
          },
          {
            "name": "elevations",
            "comment": " List of all elevations and their depth in dp. \n",
            "type": "List ( Material.Style.Style, Int )"
          },
          {
            "name": "transition",
            "comment": " Add a CSS-transition to changes in elevation. Supply a transition\nduration in milliseconds as argument. \n\nNB! This Style is dictated by neither MDL nor the Material Design\nSpecification. \n",
            "type": "String -> Material.Style.Style"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Snackbar",
        "comment": " From the [Material Design Lite documentation](https://www.getmdl.io/components/index.html#snackbar-section):\n\n> The Material Design Lite (MDL) __snackbar__ component is a container used to\n> notify a user of an operation's status. It displays at the bottom of the\n> screen. A snackbar may contain an action button to execute a command for the\n> user. Actions should undo the committed action or retry it if it failed for\n> example. Actions should not be to close the snackbar. By not providing an\n> action, the snackbar becomes a __toast__ component.\n\nRefer to [this site](http://debois.github.io/elm-mdl#/snackbar)\nfor a live demo. \n\n# Generating messages\n@docs Contents, toast, snackbar, add\n\n# Elm Architecture\n\n@docs Model, model\n@docs Action, update\n@docs view\n\n# Component support\nSnackbar does not have component support. It must be used as a regular TEA\ncomponent. \n",
        "aliases": [
          {
            "name": "Contents",
            "comment": " Defines a single snackbar message. Usually, you would use either `toast`\nor `snackbar` to construct `Contents`.\n\n - `message` defines the (text) message displayed\n - `action` defines a label for the action-button in the snackbar. If \n    no action is provided, the snackbar is a message-only toast. \n - `payload` defines the data returned by Snackbar actions for this message. \n   You will usually choose this to be an Action of yours for later dispatch, \n   e.g., if your snackbar has an \"Undo\" action, you would store the\n   corresponding action as the payload. \n - `timeout` is the amount of time the snackbar should be visible\n - `fade` is the duration of the fading animation of the snackbar. \n\nIf you are satsified with the default timeout and fade, do not construct\nvalues of this type yourself; use `snackbar` and `toast` below instead. \n",
            "args": [
              "a"
            ],
            "type": "{ message : String , action : Maybe.Maybe String , payload : a , timeout : Time.Time , fade : Time.Time }"
          },
          {
            "name": "Model",
            "comment": " Do not construct this yourself; use `model` below.\n",
            "args": [
              "a"
            ],
            "type": "{ queue : List (Material.Snackbar.Contents a) , state : Material.Snackbar.State a , seq : Int }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Elm Architecture Action type.  \nThe following actions are observable to you: \n- `Begin a`. The snackbar is now displaying the message with payload `a`.\n- `End a`. The snackbar is done displaying the message with payload `a`.\n- `Click a`. The user clicked the action on the message with payload `a`.\nYou can consume these three actions without forwarding them to `Snackbar.update`.\n(You still need to forward other Snackbar actions.)\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Begin",
                [
                  "a"
                ]
              ],
              [
                "End",
                [
                  "a"
                ]
              ],
              [
                "Click",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add a message to the snackbar. If another message is currently displayed, \nthe provided message will be queued. You will be able to observe a `Begin` action\n(see `Action` above) once the action begins displaying.\n\nYou must dispatch the returned effect for the Snackbar to begin displaying your\nmessage.\n",
            "type": "Material.Snackbar.Contents a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Effects.Effects (Material.Snackbar.Action a) )"
          },
          {
            "name": "model",
            "comment": " Default snackbar model.\n",
            "type": "Material.Snackbar.Model a"
          },
          {
            "name": "snackbar",
            "comment": " Generate snackbar with given payload, message and label. \nTimeout is 2750ms, fade 250ms.\n",
            "type": "a -> String -> String -> Material.Snackbar.Contents a"
          },
          {
            "name": "toast",
            "comment": " Generate toast with given payload and message. Timeout is 2750ms, fade 250ms.\n",
            "type": "a -> String -> Material.Snackbar.Contents a"
          },
          {
            "name": "update",
            "comment": " Elm Architecture update function. \n",
            "type": "Material.Snackbar.Action a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Effects.Effects (Material.Snackbar.Action a) )"
          },
          {
            "name": "view",
            "comment": " Elm architecture update function. \n",
            "type": "Signal.Address (Material.Snackbar.Action a) -> Material.Snackbar.Model a -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Component",
        "comment": " \n\nThe Elm Architecture is conceptually very nice, but it forces us to write large\namounts of boilerplate whenever we need to use a \"component\".  We must:\n\n  1. Retain the state of the component in our Model \n  2. Add the components actions to our Action \n  3. Dispatch those actions in our update\n\nNone of these things have anything to do with what we want from the component, \nnamely rendering it in our View function, and potentially reacting to some \n(but not all) of its actions---e.g., we want to react to a Click of a button, \nbut we don't care when it updates its animation state. \n\nThis module provides an extensible mechanism for collecting arbitrary\n(differently-typed) Elm Architecture components into a single component with\na single Action type and update function. The module is used internally to \nproduce `instance` functions; if you are using elm-mdl (and are not interested in\noptimising for compiled program size or writing your own components), you\nshould ignore this module and look instead at `Material`. \n\n\n# Embeddings \n@docs Indexed, Embedding, embed, embedIndexed\n\n# Instance construction\n@docs Action, Instance, Observer, instance, instance1\n\n# Instance consumption\n@docs update\n\n",
        "aliases": [
          {
            "name": "Embedding",
            "comment": " An __embedding__ of an Elm Architecture component is a variant in which\nview and update functions know how to extract and update their model \nfrom a larger master model. \n",
            "args": [
              "model",
              "container",
              "action",
              "a"
            ],
            "type": "{ view : Material.Component.View container action a , update : Material.Helpers.Update container action , getModel : container -> model , setModel : model -> container -> container }"
          },
          {
            "name": "Indexed",
            "comment": " Indexed families of things.\n",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Int a"
          },
          {
            "name": "Instance",
            "comment": " Type of component instances. A component instance contains a view, \nget/set/map for the inner model, and a forwarder lifting component \nactions to observations. \n",
            "args": [
              "model",
              "container",
              "action",
              "obs",
              "a"
            ],
            "type": "{ view : Material.Component.View container obs a , get : container -> model , set : model -> container -> container , map : (model -> model) -> container -> container , fwd : action -> obs }"
          },
          {
            "name": "Observer",
            "comment": " Type of observers, i.e., functions that take an actual action of the \nunderlying TEA component to an observation.  E.g., Button has an Observer for\nits `Click` action. \n",
            "args": [
              "action",
              "obs"
            ],
            "type": "action -> Maybe.Maybe obs"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Similarly to how embeddings enable collecting models of different type\nin a single model container, we need to collect actions in a single \"master\naction\" type.  Obviously, actions need to be eventually executed by running\nthe corresponding update function. To avoid this master action type explicitly\nrepresenting the Action/update pairs of elm-mdl components, we represent an\naction of an individual component as a partially applied update function; that\nis, a function `container -> container`. E.g., the `Click` action of Button is\nconceptually represented as:\n\n    embeddedButton : Embedding Button.Model container action ...\n    embeddedButton = \n      embedIndexed \n        Button.view Button.update .button {\\m x -> {m|button=x} Button.model 0\n\n    clickAction : container -> container \n    clickAction = embeddedButton.update Button.click \n\nWhen all Material components are embedded in the same `container` model, we \nthen have a uniform update mechanism. \n\nWe lost the ability to inspect the action when we did this, though. To be \nable to react to some actions of a component, we add to our `container -> \ncontainer` type for actions a potential __observation__ of type `obs`. \nIn practice, this observation type `obs` will be the Action of the TEA\ncomponent __hosting__ MDL components. \n\nAltogether, accounting also for effects, we arrive at the following type. \n",
            "args": [
              "container",
              "obs"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "embed",
            "comment": " Embed a component. Third and fourth arguments are a getter (extract the \nlocal model from the container) and a setter (update local model in the \ncontainer). \n\nIt is instructive to compare the types of the view and update function in \nthe input and output:\n\n     {- Input -}                    {- Output -}\n     View model action a            View container action a\n     Update model action            Update container action \n\n",
            "type": "Material.Component.View model action a -> Material.Helpers.Update model action -> (container -> model) -> (model -> container -> container) -> Material.Component.Embedding model container action a"
          },
          {
            "name": "embedIndexed",
            "comment": " We are interested in particular embeddings where components of the same\ntype all have their state living inside a shared `Dict`; the individual\ncomponent has a key used to look up its own state. \n",
            "type": "Material.Component.View model action a -> Material.Helpers.Update model action -> (container -> Material.Component.Indexed model) -> (Material.Component.Indexed model -> container -> container) -> model -> Int -> Material.Component.Embedding model container action a"
          },
          {
            "name": "instance",
            "comment": " It is helpful to see parameter names: \n\n    instance view update get set id lift model0 observers = \n      ...\n\nConvert a regular Elm Architecture component (`view`, `update`) to a component\nwhich knows how to access its model inside a generic container model (`get`,\n`set`), and which dispatches generic `Action` updates, lifted to the consumers\naction type `obs` (`lift`). You can react to actions in custom way by providing\nobservers (`observers`). You must also provide an initial model (`model0`) and an\nidentifier for the instance (`id`). The identifier must be unique for all\ninstances of the same type stored in the same model (overapproximating rule of\nthumb: if they are in the same file, they need distinct ids.)\n\nIts instructive to compare the types of the input and output views:\n\n    {- Input -}                 {- Output -}\n    View model action a         View container obs a\n\nThat is, this function fully converts a view from its own `model` and `action`\nto the master `container` model and `observation` action. \n",
            "type": "Material.Component.View model action a -> Material.Helpers.Update model action -> (container -> Material.Component.Indexed model) -> (Material.Component.Indexed model -> container -> container) -> Int -> (Material.Component.Action container obs -> obs) -> model -> List (Material.Component.Observer action obs) -> Material.Component.Instance model container action obs a"
          },
          {
            "name": "instance1",
            "comment": " Variant of `instance` for components that are naturally singletons \n(e.g., snackbar, layout).\n",
            "type": "Material.Component.View model action a -> Material.Helpers.Update model action -> (container -> Maybe.Maybe model) -> (Maybe.Maybe model -> container -> container) -> (Material.Component.Action container obs -> obs) -> model -> List (Material.Component.Observer action obs) -> Material.Component.Instance model container action obs a"
          },
          {
            "name": "update",
            "comment": " Generic update function for Action. \n",
            "type": "(Material.Component.Action container obs -> obs) -> Material.Helpers.Update' container (Material.Component.Action container obs) obs"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Style",
        "comment": " Styling Material components.\n\nUse these to customize components and add your own classes and css to\nMaterial container elements.\n\n(This mechanism is necessary because Elm does not provide a good way to\nadd to or remove from the contents of an already constructed class Attribute.)\n\n@docs Style\n\n# Constructors\n@docs cs, cs', css, css', attribute, multiple\n\n# Application\n@docs styled, div, span\n\n# Convenience\n@docs stylesheet\n",
        "aliases": [],
        "types": [
          {
            "name": "Style",
            "comment": " Type of Style information. \n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "attribute",
            "comment": " Add a custom attribute\n",
            "type": "Html.Attribute -> Material.Style.Style"
          },
          {
            "name": "cs",
            "comment": " Add a HTML class to a component. (Name chosen to avoid clashing with\nHtml.Attributes.class.)\n",
            "type": "String -> Material.Style.Style"
          },
          {
            "name": "cs'",
            "comment": " Conditionally add a HTML class to a component.\n",
            "type": "String -> Bool -> Material.Style.Style"
          },
          {
            "name": "css",
            "comment": " Add a CSS style to a component.\n",
            "type": "String -> String -> Material.Style.Style"
          },
          {
            "name": "css'",
            "comment": " Conditionally add a CSS style to a component\n",
            "type": "String -> String -> Bool -> Material.Style.Style"
          },
          {
            "name": "div",
            "comment": " Convenience function for the ultra-common case of setting attributes of a\ndiv element. Use like this: \n\n    myDiv : Html \n    myDiv = \n      Style.div\n        [ Color.background Color.primary\n        , Color.text Color.accentContrast\n        ]\n        [ text \"I'm in color!\" ]\n\n",
            "type": "List Material.Style.Style -> List Html.Html -> Html.Html"
          },
          {
            "name": "multiple",
            "comment": " Add a custom attribute\n",
            "type": "List Material.Style.Style -> Material.Style.Style"
          },
          {
            "name": "span",
            "comment": " Convenience function for the reasonably common case of setting attributes\nof a span element. See also `div`. \n",
            "type": "List Material.Style.Style -> List Html.Html -> Html.Html"
          },
          {
            "name": "styled",
            "comment": " Handle the common case of setting attributes of a standard Html node\nfrom a List Style. Use like this:\n\n    import Material.Style exposing (..)\n\n    myDiv : Html\n    myDiv =\n      styled div\n        [ css \"classA\", css \"classB\" ]\n        [ {- onClick ... (*) -} ]\n        [ text \"This is my div with classes classA and classB!\" ]\n\nNote that if you do specify `style`, `class`, or `classList` attributes in\n(*), they will be discarded.\n",
            "type": "(List Html.Attribute -> a) -> List Material.Style.Style -> List Html.Attribute -> a"
          },
          {
            "name": "stylesheet",
            "comment": " Construct an Html element contributing to the global stylesheet.\nThe resulting Html is a `<style>` element.  Remember to insert the resulting Html\nsomewhere. \n",
            "type": "String -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Helpers",
        "comment": " Convenience functions. These are mostly trivial functions that are used\ninternally in the library; you might\nfind some of them useful. \n\n# HTML & Events\n@docs filter, blurOn\n\n# Effects\n@docs pure, effect, delay\n\n# Tuples\n@docs map1st, map2nd\n\n# Elm architecture\n@docs Update, Update', lift, lift'\n",
        "aliases": [
          {
            "name": "Update",
            "comment": " Standard EA update function type. \n",
            "args": [
              "model",
              "action"
            ],
            "type": "Material.Helpers.Update' model action action"
          },
          {
            "name": "Update'",
            "comment": " Variant of EA update function type, where effects may be \nlifted to a different type. \n",
            "args": [
              "model",
              "action",
              "action'"
            ],
            "type": "action -> model -> ( model, Effects.Effects action' )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "blurOn",
            "comment": " Attribute which causes element to blur on given event. Example use\n\n    myButton : Html\n    myButton = \n      button \n        [ blurOn \"mouseleave\" ]\n        [ text \"Click me!\" ]\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "delay",
            "comment": " Produce a delayed effect. Suppose you want `MyAction` to happen 200ms after\na button is clicked:\n\n    button \n      [ onClick (delay 0.2 MyAction) ] \n      [ text \"Click me!\" ]\n",
            "type": "Time.Time -> a -> Effects.Effects a"
          },
          {
            "name": "effect",
            "comment": " Add an effect to a value. Example use (supposing you have an \naction `MyAction`): \n\n    model |> effect MyAction\n",
            "type": "Effects.Effects b -> a -> ( a, Effects.Effects b )"
          },
          {
            "name": "filter",
            "comment": " Convert the `List Html` parameter of a standard elm-html element to \n`List (Maybe Html)`; this is convenient when sub-elements should not always be\nrendered. Example use: \n\n    myDiv : Maybe Html -> Html\n    myDiv optionalSubElement = \n      filter div \n        [ class \"div-with-filtered-elements\" \n        ]\n        [ Just <| text \"Always present\" \n        , optionalSubElement   \n        ]\n",
            "type": "(a -> List b -> c) -> a -> List (Maybe.Maybe b) -> c"
          },
          {
            "name": "lift",
            "comment": " Convenience function for writing update-function boilerplate. Example use:\n\n  case action of \n    ...\n    ButtonsAction a -> \n      lift .buttons (\\m x->{m|buttons=x}) ButtonsAction Demo.Buttons.update a model\n\nThis is equivalent to the more verbose\n\n  case action of \n    ...\n    ButtonsAction a -> \n      let \n        (buttons', fx) = \n          Demo.Buttons.update a model.buttons\n      in \n        ( { model | buttons = buttons'}\n        , Effects.map ButtonsAction fx\n        )\n",
            "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> action) -> Material.Helpers.Update submodel subaction -> subaction -> model -> ( model, Effects.Effects action )"
          },
          {
            "name": "lift'",
            "comment": " Variant of `lift` for effect-free components. \n",
            "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> submodel -> submodel) -> subaction -> model -> ( model, Effects.Effects action )"
          },
          {
            "name": "map1st",
            "comment": " Map the first element of a tuple. \n\n    map1st ((+) 1) (1, \"foo\") == (2, \"foo\")\n",
            "type": "(a -> c) -> ( a, b ) -> ( c, b )"
          },
          {
            "name": "map2nd",
            "comment": " Map the second element of a tuple\n\n    map2nd ((+) 1) (\"bar\", 3) == (\"bar\", 4)\n",
            "type": "(b -> c) -> ( a, b ) -> ( a, c )"
          },
          {
            "name": "pure",
            "comment": " Add the trivial effect to a value. Example use:\n    \n    model |> pure\n",
            "type": "a -> ( a, Effects.Effects b )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "debois/elm-parts",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Parts",
        "comment": " \n\n# Elm Architecture types\n@docs Update, View\n\n# Embeddings \n@docs Indexed, Embedding, embed, embedIndexed\n\n# Part construction\n@docs Action, Part, Observer, new, new1\n\n# Part consumption\n@docs update\n\n",
        "aliases": [
          {
            "name": "Embedding",
            "comment": " An __embedding__ of an Elm Architecture component is a variant in which\nview and update functions know how to extract and update their model \nfrom a larger master model. \n",
            "args": [
              "model",
              "container",
              "action",
              "a"
            ],
            "type": "{ view : Parts.View container action a , update : Parts.Update container action , getModel : container -> model , setModel : model -> container -> container }"
          },
          {
            "name": "Indexed",
            "comment": " Indexed families of things.\n",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Int a"
          },
          {
            "name": "Observer",
            "comment": " Type of observers, i.e., functions that take an actual action of the \nunderlying TEA component to an observation.  E.g., Button has an Observer for\nits `Click` action. \n",
            "args": [
              "action",
              "obs"
            ],
            "type": "action -> Maybe.Maybe obs"
          },
          {
            "name": "Part",
            "comment": " Type of parts. A part contains a view, \nget/set/map for the inner model, and a forwarder lifting component \nactions to observations. \n",
            "args": [
              "model",
              "container",
              "action",
              "obs",
              "a"
            ],
            "type": "{ view : Parts.View container obs a , get : container -> model , set : model -> container -> container , map : (model -> model) -> container -> container , fwd : action -> obs }"
          },
          {
            "name": "Update",
            "comment": " Standard TEA update function type. \n",
            "args": [
              "model",
              "action"
            ],
            "type": "action -> model -> ( model, Effects.Effects action )"
          },
          {
            "name": "View",
            "comment": " Standard TEA view function type. \n",
            "args": [
              "model",
              "action",
              "a"
            ],
            "type": "Signal.Address action -> model -> a"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Similarly to how embeddings enable collecting models of different type\nin a single model container, we need to collect actions in a single \"master\naction\" type.  Obviously, actions need to be eventually executed by running\nthe corresponding update function. To avoid this master action type explicitly\nrepresenting the Action/update pairs of elm-mdl components, we represent an\naction of an individual component as a partially applied update function; that\nis, a function `container -> container`. E.g., the `Click` action of Button is\nconceptually represented as:\n\n    embeddedButton : Embedding Button.Model container action ...\n    embeddedButton = \n      embedIndexed \n        Button.view Button.update .button {\\m x -> {m|button=x} Button.model 0\n\n    clickAction : container -> container \n    clickAction = embeddedButton.update Button.click \n\nWhen all components are embedded in the same `container` model, we \nthen have a uniform update mechanism. \n\nWe lost the ability to inspect the action when we did this, though. To be \nable to react to some actions of a component, we add to our `container -> \ncontainer` type for actions a potential __observation__ of type `obs`. \nIn practice, this observation type `obs` will be the Action of the TEA\ncomponent __hosting__ the sub-components. \n\nAltogether, accounting also for effects, we arrive at the following type. \n",
            "args": [
              "container",
              "obs"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "embed",
            "comment": " Embed a component. Third and fourth arguments are a getter (extract the \nlocal model from the container) and a setter (update local model in the \ncontainer). \n\nIt is instructive to compare the types of the view and update function in \nthe input and output:\n\n     {- Input -}                    {- Output -}\n     View model action a            View container action a\n     Update model action            Update container action \n\n",
            "type": "Parts.View model action a -> Parts.Update model action -> (container -> model) -> (model -> container -> container) -> Parts.Embedding model container action a"
          },
          {
            "name": "embedIndexed",
            "comment": " We are interested in particular embeddings where components of the same\ntype all have their state living inside a shared `Dict`; the individual\ncomponent has a key used to look up its own state. \n",
            "type": "Parts.View model action a -> Parts.Update model action -> (container -> Parts.Indexed model) -> (Parts.Indexed model -> container -> container) -> model -> Int -> Parts.Embedding model container action a"
          },
          {
            "name": "new",
            "comment": " It is helpful to see parameter names: \n\n    new view update get set id lift model0 observers = \n      ...\n\nConvert a regular Elm Architecture component (`view`, `update`) to a part, \ni.e., a component which knows how to access its model inside a generic\ncontainer model (`get`, `set`), and which dispatches generic `Action` updates,\nlifted to the consumers action type `obs` (`lift`). You can react to actions in\ncustom way by providing observers (`observers`). You must also provide an\ninitial model (`model0`) and an identifier for the part (`id`). The\nidentifier must be unique for all parts of the same type stored in the\nsame model (overapproximating rule of thumb: if they are in the same file,\nthey need distinct ids.)\n\nIts instructive to compare the types of the input and output views:\n\n    {- Input -}                 {- Output -}\n    View model action a         View container obs a\n\nThat is, this function fully converts a view from its own `model` and `action`\nto the master `container` model and `observation` action. \n",
            "type": "Parts.View model action a -> Parts.Update model action -> (container -> Parts.Indexed model) -> (Parts.Indexed model -> container -> container) -> Int -> (Parts.Action container obs -> obs) -> model -> List (Parts.Observer action obs) -> Parts.Part model container action obs a"
          },
          {
            "name": "new1",
            "comment": " Variant of `new` for parts that will be used only once in any \nTEA component. \n",
            "type": "Parts.View model action a -> Parts.Update model action -> (container -> Maybe.Maybe model) -> (Maybe.Maybe model -> container -> container) -> (Parts.Action container obs -> obs) -> model -> List (Parts.Observer action obs) -> Parts.Part model container action obs a"
          },
          {
            "name": "update",
            "comment": " Generic update function for Action. \n",
            "type": "(Parts.Action container obs -> obs) -> Parts.Update' container (Parts.Action container obs) obs"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dustinspecker/capitalize-word",
    "version": "1.0.0",
    "docs": [
      {
        "name": "CapitalizeWord",
        "comment": " Capitalize a word\n\n# Usage\n@docs make\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "make",
            "comment": " Perform the capitalization of a word\n\n    make \"hi\" -- \"Hi\"\n\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dustinspecker/dict-key-values",
    "version": "1.0.0",
    "docs": [
      {
        "name": "DictKeyValues",
        "comment": " Swap the key value pairs of a Dict\n\n# Usage\n@docs swap\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "swap",
            "comment": " Swap the key value pairs of a Dict\n\n    people = Dict.fromList [ (\"Bob\", 3), (\"Jan\", 7) ]\n\n    swap people -- Dict.fromList [ (3, \"Bob\"), (7, \"Jan\") ]\n",
            "type": "Dict.Dict comparable comparable' -> Dict.Dict comparable' comparable"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dustinspecker/is-fibonacci-number",
    "version": "1.0.0",
    "docs": [
      {
        "name": "IsFibonacciNumber",
        "comment": " This library determines if an Int is a Fibonacci Number.\n\n# Usage\n@docs test\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "test",
            "comment": " Determine if an Int is a Fibonacci Number.\n\n    test -1 == False\n    test 0 == False\n    test 3 == True\n    test 4 == False\n\n",
            "type": "Int -> Bool"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dustinspecker/last",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Last",
        "comment": " Get the last element from a List.\n\n# Usage\n@docs fromList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromList",
            "comment": " Get the last element from a List.\n\n    last [] -- Nothing\n    last [ 1 ] -- Just 1\n    last [ \"yo\", \"hello\" ] -- Just \"hello\"\n\n",
            "type": "List a -> Maybe.Maybe a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dustinspecker/list-join-conjunction",
    "version": "1.0.0",
    "docs": [
      {
        "name": "ListJoinConjunction",
        "comment": " Join a List with a conjunction.\n\n# Usage\n@docs make\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "make",
            "comment": " Join a List of Strings into a String with a conjunction.\n\n    ListJoinConjunction.make \"and\" [ \"red\", \"blue\" ] -- \"red and blue\"\n    ListJoinConjunction.make \"or\" [ \"red\", \"blue\" ] -- \"red or blue\"\n    ListJoinConjunction.make \"and\" [ \"red\", \"blue\", \"white\" ] -- \"red, blue, and white\"\n",
            "type": "String -> List String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "dustinspecker/us-states",
    "version": "1.0.1",
    "docs": [
      {
        "name": "UsStates",
        "comment": " Get the last element from a List.\n\n# Usage\n@docs fromAbbr\n@docs toAbbr\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromAbbr",
            "comment": " Get state name from abbrevation\n\n    fromAbbr \"ZZ\" -- Nothing\n    fromAbbr \"mo\" -- Just \"Missouri\"\n    fromAbbr \"MO\" -- Just \"Missouri\"\n\n",
            "type": "String -> Maybe.Maybe String"
          },
          {
            "name": "toAbbr",
            "comment": " Get abbrevation from state name\n\n    toAbbr \"Cow\" -- Nothing\n    toAbbr \"missouri\" -- Just \"MO\"\n    toAbbr \"Missouri\" -- Just \"MO\"\n\n",
            "type": "String -> Maybe.Maybe String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "eeue56/elm-all-dict",
    "version": "1.1.1",
    "docs": [
      {
        "name": "AllDict",
        "comment": " A dictionary mapping unique keys to values. This dictionary can use any type as a key.\nIn the core-provided Dict, keys can only be comparable.\n\nAllDict allows you to provide a custom operation for hashing keys. The ord function has a type signature of `k -> comparable`.\n\nIt's possible to define the ord function in such a way that AllDict can actually function as a DefaultDict.\n\nAn example of this might be\n\n```\nord : Action -> Int\nord action =\n  case action of\n    Run -> 0\n    Hide -> 1\n    StandStill -> 2\n    _ -> 3\n```\n\nThis will default any Action in the dictionary to 3. You can then set a default like so:\n\n```\n\nmyDict : AllDict Action String Int\nmyDict =\n  AllDict.fromList\n    ord\n    [(Noop, \"Do nothing\")]\n\n-- equal to `\"Do nothing\"`\n-- as `ord` maps anything outside of Run, Hide, StandStill\n-- to the same hash\neat =\n  myDict |>\n    AllDict.get Eat\n\n```\n\nInsert, remove, and query operations all take *O(log n)* time. AllDictionary\nequality with `(==)` is unreliable and should not be used. Instead, use AllDict.eq for element-wise comparisons,\nand AllDict.fullEq for a full comparison\n\n# Types\n@docs AllDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, getOrd, eq, fullEq\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "AllDict",
            "comment": " A dict which works with any type which lifts the type from Core's Dict",
            "args": [
              "k",
              "v",
              "comparable"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary using a given ord function to calculate hashes ",
            "type": "(k -> comparable) -> AllDict.AllDict k v comparable"
          },
          {
            "name": "eq",
            "comment": " Element equality. Does not check equality of base ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(k -> v -> Bool) -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(k -> v -> b -> b) -> b -> AllDict.AllDict k v comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(k -> v -> b -> b) -> b -> AllDict.AllDict k v comparable -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\nTakes a default value, and a list of key-pair tuples\n ",
            "type": "(k -> comparable) -> List ( k, v ) -> AllDict.AllDict k v comparable"
          },
          {
            "name": "fullEq",
            "comment": " Base + element equality ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Mouse\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "k -> AllDict.AllDict k v comparable -> Maybe.Maybe v"
          },
          {
            "name": "getOrd",
            "comment": " Helper function for grabbing the default value used in the dict\n",
            "type": "AllDict.AllDict k v comparable -> k -> comparable"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "k -> v -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "AllDict.AllDict k v comparable -> List k"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary. ",
            "type": "(k -> a -> a) -> AllDict.AllDict k a comparable -> AllDict.AllDict k a comparable"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "k -> AllDict.AllDict k v comparable -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(k -> v -> Bool) -> AllDict.AllDict k v comparable -> ( AllDict.AllDict k v comparable, AllDict.AllDict k v comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "k -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "(k -> comparable) -> k -> v -> AllDict.AllDict k v comparable"
          },
          {
            "name": "size",
            "comment": " Get the number of key-value pairs in a dict ",
            "type": "AllDict.AllDict k v comparable -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "AllDict.AllDict k v comparable -> List ( k, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> AllDict.AllDict k v comparable -> AllDict.AllDict k v comparable"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "AllDict.AllDict k v comparable -> List v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "EveryDict",
        "comment": " A dictionary mapping unique keys to values. This dictionary can use any type as a key.\nIn the core-provided Dict, keys can only be comparable.\n\nThis little dictionary is hacky. It uses a custom toString as a hashing function - so don't use it on\nany types which have non-unique representations in strings! At the moment, it has custom support for converting functions into keys.\n\nIt's hard to imagine many cases where you would want a function as a key, but it's now possible.\n\nInsert, remove, and query operations all take *O(log n)* time. EveryDictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Types\n@docs EveryDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, eq\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "EveryDict",
            "comment": " A dict which works with any type which lifts the type from Core's Dict",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary  ",
            "type": "EveryDict.EveryDict k v"
          },
          {
            "name": "eq",
            "comment": " Element equality ",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(k -> v -> Bool) -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(k -> v -> b -> b) -> b -> EveryDict.EveryDict k v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(k -> v -> b -> b) -> b -> EveryDict.EveryDict k v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\nTakes a default value, and a list of key-pair tuples\n ",
            "type": "List ( k, v ) -> EveryDict.EveryDict k v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Mouse\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "k -> EveryDict.EveryDict k v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "k -> v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "EveryDict.EveryDict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "EveryDict.EveryDict k v -> List k"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(k -> a -> a) -> EveryDict.EveryDict k a -> EveryDict.EveryDict k a"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "k -> EveryDict.EveryDict k v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(k -> v -> Bool) -> EveryDict.EveryDict k v -> ( EveryDict.EveryDict k v, EveryDict.EveryDict k v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "k -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "k -> v -> EveryDict.EveryDict k v"
          },
          {
            "name": "size",
            "comment": " Get the number of key-value pairs in a dict ",
            "type": "EveryDict.EveryDict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "EveryDict.EveryDict k v -> List ( k, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "EveryDict.EveryDict k v -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> EveryDict.EveryDict k v -> EveryDict.EveryDict k v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "EveryDict.EveryDict k v -> List v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "eeue56/elm-default-dict",
    "version": "2.0.0",
    "docs": [
      {
        "name": "DefaultDict",
        "comment": " A dictionary mapping unique keys to values. A provided default is used for when\nkeys are missing. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time. DefaultDictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Types\n@docs DefaultDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, getDefault, eq, fullEq\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, mapWithDefault, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "DefaultDict",
            "comment": " A default dict which lifts the type from Core's Dict",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary with a given default value ",
            "type": "v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "eq",
            "comment": " Element equality. Does not check equality of base ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(comparable -> v -> Bool) -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(comparable -> v -> b -> b) -> b -> DefaultDict.DefaultDict comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(comparable -> v -> b -> b) -> b -> DefaultDict.DefaultDict comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary.\nTakes a default value, and a list of key-pair tuples\n ",
            "type": "v -> List ( comparable, v ) -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "fullEq",
            "comment": " Base + element equality ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Mouse\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "comparable -> DefaultDict.DefaultDict comparable v -> v"
          },
          {
            "name": "getDefault",
            "comment": " Helper function for grabbing the default value used in the dict\n",
            "type": "DefaultDict.DefaultDict comparable v -> v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "comparable -> v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\nNotice that this function takes a function of type `comparable -> a -> a`,\nrather than Dict's `comparable a -> b`. If you want to provide a new default,\nsee mapWithDefault ",
            "type": "(comparable -> a -> a) -> DefaultDict.DefaultDict comparable a -> DefaultDict.DefaultDict comparable a"
          },
          {
            "name": "mapWithDefault",
            "comment": " Like map, but allows you to provide a default value too.\nWhen mapping from type `a` to type `b`, the old default of\ntype `a` won't work as it's not possible to have `DefaultDict compareable (a|b)`\nIf this is what you want, use an `Either` type instead.\n",
            "type": "b -> (comparable -> a -> b) -> DefaultDict.DefaultDict comparable a -> DefaultDict.DefaultDict comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "comparable -> DefaultDict.DefaultDict comparable v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(comparable -> v -> Bool) -> DefaultDict.DefaultDict comparable v -> ( DefaultDict.DefaultDict comparable v , DefaultDict.DefaultDict comparable v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "comparable -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "comparable -> v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "size",
            "comment": " Get the number of key-value pairs in a dict ",
            "type": "DefaultDict.DefaultDict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "DefaultDict.DefaultDict comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "comparable -> (v -> Maybe.Maybe v) -> DefaultDict.DefaultDict comparable v -> DefaultDict.DefaultDict comparable v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "DefaultDict.DefaultDict comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "eeue56/elm-flat-matrix",
    "version": "2.0.4",
    "docs": [
      {
        "name": "Matrix.Extra",
        "comment": " Extra methods for Matricies\n\n# Element-wise computation\n@docs add, subtract, hadamard, power\n\n# Syntax aliases\n@docs (.*), (.^) \n\n# Interacting with other cells\n@docs neighbours, indexedNeighbours, diagonals, neighboursFour\n\n@docs prettyPrint\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": ".*",
            "comment": "\nelement wise multiplication \n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": ".^",
            "comment": "\nelement wise power \n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "add",
            "comment": "\nadd two matricies together element by element and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "diagonals",
            "comment": "\nGet the diagonal-neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "hadamard",
            "comment": "\ntake the product of every corresponding element in two matricies and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "indexedNeighbours",
            "comment": "\nGet the neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List ( ( Int, Int ), a )"
          },
          {
            "name": "neighbours",
            "comment": "\nGet the neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "neighboursFour",
            "comment": "\nGet the non-diagonal neighbours of a point (x, y) in the matrix\nIf on edge, then no wrapping happens - they are excluded\n",
            "type": "Int -> Int -> Matrix.Matrix a -> List a"
          },
          {
            "name": "power",
            "comment": "\nelement-wise power of elements\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          },
          {
            "name": "prettyPrint",
            "comment": "\nPrint out a matrix into a table\n",
            "type": "Matrix.Matrix a -> Html.Html"
          },
          {
            "name": "subtract",
            "comment": "\nsubtract two matricies together element by element and return the result\n",
            "type": "Matrix.Matrix number -> Matrix.Matrix number -> Maybe.Maybe (Matrix.Matrix number)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Matrix",
        "comment": " \nA matrix implemention for Elm.\nInternally it uses a flat array for speed reasons.\n\n# The matrix type\n\n@docs Matrix\n\n# Creating a matrix\n\n@docs repeat, fromList, empty\n\n# Get matrix dimensions\n\n@docs height, width\n\n# Dealing with individual elements\n\n@docs get, set, update \n\n# Appending to an Matrix\n\n@docs concatVertical, concatHorizontal\n\n# Get rows/columns\n\n@docs getRow, getColumn\n\n# Applying functions\n@docs filter, map, map2, indexedMap, toIndexedArray\n",
        "aliases": [
          {
            "name": "Matrix",
            "comment": "\n  Matrix a has a given size, and data contained within\n",
            "args": [
              "a"
            ],
            "type": "{ size : ( Int, Int ), data : Array.Array a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "concatHorizontal",
            "comment": " Append a matrix to another matrix horizontally and return the result. Return Nothing if the heights don't match ",
            "type": "Matrix.Matrix a -> Matrix.Matrix a -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "concatVertical",
            "comment": " Append a matrix to another matrix vertically and return the result. Return Nothing if the widths don't match ",
            "type": "Matrix.Matrix a -> Matrix.Matrix a -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "empty",
            "comment": " Create an empty matrix ",
            "type": "Matrix.Matrix a"
          },
          {
            "name": "filter",
            "comment": " \n  Keep only elements that return `True` when passed to the given function f\n",
            "type": "(a -> Bool) -> Matrix.Matrix a -> Array.Array a"
          },
          {
            "name": "fromList",
            "comment": "\n  Create a matrix from a list of lists.\n  If the lists within the list are not consistently sized, return `Nothing`\n  Otherwise return a matrix with the size as the size of the outer and nested lists\n",
            "type": "List (List a) -> Maybe.Maybe (Matrix.Matrix a)"
          },
          {
            "name": "get",
            "comment": "\n  Get a value from a given `x y` and return `Just v` if it exists\n  Otherwise `Nothing`\n",
            "type": "Int -> Int -> Matrix.Matrix a -> Maybe.Maybe a"
          },
          {
            "name": "getColumn",
            "comment": " Get a row at a given i\n",
            "type": "Int -> Matrix.Matrix a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "getRow",
            "comment": " Get a row at a given j\n",
            "type": "Int -> Matrix.Matrix a -> Maybe.Maybe (Array.Array a)"
          },
          {
            "name": "height",
            "comment": " Height of a given matrix ",
            "type": "Matrix.Matrix a -> Int"
          },
          {
            "name": "indexedMap",
            "comment": " \n  Apply a function, taking the `x, y` of every element in the matrix\n",
            "type": "(Int -> Int -> a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "map",
            "comment": " \n  Apply a function of every element in the matrix\n",
            "type": "(a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two matricies at once\n",
            "type": "(a -> b -> c) -> Matrix.Matrix a -> Matrix.Matrix b -> Maybe.Maybe (Matrix.Matrix c)"
          },
          {
            "name": "repeat",
            "comment": " \n  Create a matrix of a given size `x y` with a default value of `v`\n",
            "type": "Int -> Int -> a -> Matrix.Matrix a"
          },
          {
            "name": "set",
            "comment": "\n  Set a value at a given `i, j` in the matrix and return the new matrix\n  If the `i, j` is out of bounds then return the unmodified matrix\n",
            "type": "Int -> Int -> a -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "toIndexedArray",
            "comment": " Convert a matrix to an indexed array\n",
            "type": "Matrix.Matrix a -> Array.Array ( ( Int, Int ), a )"
          },
          {
            "name": "update",
            "comment": "\n  Update an element at `x, y` with the given update function\n  If out of bounds, return the matrix unchanged\n",
            "type": "Int -> Int -> (a -> a) -> Matrix.Matrix a -> Matrix.Matrix a"
          },
          {
            "name": "width",
            "comment": " Width of a given matrix ",
            "type": "Matrix.Matrix a -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-history",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Location",
        "comment": " Facilities related to the browser's `window.location` object.\n\n@docs Location, location, reload, Source, assign, replace\n",
        "aliases": [
          {
            "name": "Location",
            "comment": " The parts of a location object. Note `port'`, since `port` is a reserved word. ",
            "args": [],
            "type": "{ href : String , protocol : String , host : String , hostname : String , port' : String , pathname : String , search : String , hash : String , origin : String }"
          }
        ],
        "types": [
          {
            "name": "Source",
            "comment": " Whether to force `reload` to use the server, or allow use of the cache. ",
            "args": [],
            "cases": [
              [
                "ForceServer",
                []
              ],
              [
                "AllowCache",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "assign",
            "comment": " A task which, when executed, loads the resource at the provided URL,\nor provides an error message upon failure. This actually loads a new\nresource -- it does not merely change the URL in the title bar.\n\nNote that only Firefox appears to reliably report an error -- other browsers\nsilently fail if an invalid URL is provided.\n",
            "type": "String -> Task.Task String ()"
          },
          {
            "name": "location",
            "comment": " A task which, when executed, gets the browser's `window.location` object. ",
            "type": "Task.Task x Location.Location"
          },
          {
            "name": "reload",
            "comment": " Reloads the page from the current URL. ",
            "type": "Location.Source -> Task.Task String ()"
          },
          {
            "name": "replace",
            "comment": " Like `assign`, loads the resource at the provided URL, but replaces the\ncurrent page in the browser's history. This actually loads a new\nresource -- it does not merely change the URL in the title bar.\n\nNote that only Firefox appears to reliably report an error -- other browsers\nsilently fail if an invalid URL is provided.\n",
            "type": "String -> Task.Task String ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "History",
        "comment": " Elm bindings to HTML5 History API.\n\n# Changing the URL path\n@docs setPath, replacePath, setHash\n\n# Going back and forth in the browser history\n@docs back, forward, go\n\n# URL path as input\n@docs path, hash, href, length\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "back",
            "comment": " Moves the browser history back by 1. Equivalent\nto pressing the back button on the browser or calling\n`go -1`.\n",
            "type": "Task.Task error ()"
          },
          {
            "name": "forward",
            "comment": " Moves the browser history forward by 1. Equivalent\nto pressing the forward button on the browser or calling\n`go 1`.\n",
            "type": "Task.Task error ()"
          },
          {
            "name": "go",
            "comment": " Move backwards or forwards in the browser history\nby the given amount. If given a positive number, `go`\nwill move the browser history forward by that amount.\nIf given a negative number, `go` will move the browser\nhistory back by the absolute value of that amount. This\nresults in a no-op if there are no available pages to\ngo to in the browser history.\n",
            "type": "Int -> Task.Task error ()"
          },
          {
            "name": "hash",
            "comment": " The current hash value of the url. The value is updated\nwhenever it is changed, usually through interaction.\nWhen you click on an `a` tag, the browser focuses on the area\naround the tag and does not refresh the page. This change is\nmirrored in the url where often a `#` is added. It is often\nuseful to track these changes and perform different operations\ndepending on the state of the hash.\n\nHashes are of the form: `#myTag`\n",
            "type": "Signal.Signal String"
          },
          {
            "name": "href",
            "comment": " The current href value of the url. The value is updated\nwhenever it is changed, either through interaction or code.\nThis is the main way you can create single page applications.\nBy incorporating the `href` as an input of your application,\nyou are able to react to changes to these hrefs and route\nand re-route your pages accordingly in order to show the most\nappropriate information given the href.\n\nHrefs are of the form: `https://localhost:1337/myPath.html`\n",
            "type": "Signal.Signal String"
          },
          {
            "name": "length",
            "comment": " The length of the browser history. This number does not\nstate where you are in relation to the browser history but\nsimply how long that history is.\n",
            "type": "Signal.Signal Int"
          },
          {
            "name": "path",
            "comment": " The current path value of the url. The value is updated\nwhenever it is changed, either through interaction or code.\nThis is the main way you can create single page applications.\nBy incorporating the `path` as an input of your application,\nyou are able to react to changes to these paths and route\nand re-route your pages accordingly in order to show the most\nappropriate information given the path.\n\nPaths are of the form: `/myPath.html` or `/users/4873/profile.html`\n",
            "type": "Signal.Signal String"
          },
          {
            "name": "replacePath",
            "comment": " Replaces the path of the url by the given path.\nIf you are familiar with the HTML5 History API,\n`replacePath` calls `history.replaceState()` which means\nthat in performing this task, the browser history\ndoes not move forward. In other words, pressing the back\nbutton will not lead you to where you were prior to\nperforming this task. This is useful for things such as\nslideshows of login pages where the paths are transient\nand you do not wish to clutter the back button. If you\nwant to simply point users towards a different page,\nconsider using `setPath`.\n",
            "type": "String -> Task.Task error ()"
          },
          {
            "name": "setHash",
            "comment": " Sets the path fragment (\"hash\") of the url.\nThis directly corresponds to setting the `location.hash`\nvalue. If the new value differs from the old one,\ndoing this will push a new state to the history stack.\n\n    setHash \"stringified-state\"\n",
            "type": "String -> Task.Task error ()"
          },
          {
            "name": "setPath",
            "comment": " Sets the path of the url to the given path.\nIf you are familiar with the HTML5 History API,\n`setPath` calls `history.pushState()` which means\nthat in performing this task, the browser history\nmoves forward. In other words, pressing the back\nbutton will lead you where you were prior to performing\nthis task.\n\n    setPath \"/blog.html\"\n",
            "type": "String -> Task.Task error ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-linear-algebra",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Math.Matrix4",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All matrices are immutable.\n\nThis library uses the convention that the prefix `make` is creating a new\narray, whereas without the prefix, you are applying some transform to an\nexisting matrix.\n\n# Create\n\n@docs Mat4, identity\n\n# Operations\n\n@docs inverseOrthonormal, mul, mulAffine, transpose, makeBasis, transform\n\n# Projections\n\n@docs makeFrustum, makePerspective, makeOrtho, makeOrtho2D, makeLookAt\n\n# Apply Transformations\n\n@docs rotate, scale, scale3, translate, translate3\n\n# Create Transformations\n\n@docs makeRotate, makeScale, makeScale3, makeTranslate, makeTranslate3\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Mat4",
            "comment": " 4x4 matrix type ",
            "args": [],
            "cases": [
              [
                "Mat4",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "identity",
            "comment": " A matrix with all 0s, except 1s on the diagonal.\n",
            "type": "Math.Matrix4.Mat4"
          },
          {
            "name": "inverseOrthonormal",
            "comment": " Computes the inverse of the given matrix m, assuming that the matrix is\northonormal.\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeBasis",
            "comment": " Creates a transform from a basis consisting of 3 linearly independent vectors.\n",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeFrustum",
            "comment": " Creates a matrix for a projection frustum with the given parameters.\n\nParameters: \n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n * znear - the near z distance of the frustum \n * zfar - the far z distance of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeLookAt",
            "comment": "\nCreates a transformation matrix for a camera.\n\nParameters:\n\n * eye - The location of the camera\n * center - The location of the focused object\n * up - The \"up\" direction according to the camera\n",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeOrtho",
            "comment": "\nCreates a matrix for an orthogonal frustum projection with the given parameters.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum \n * top - the top coordinate of the frustum\n * znear - the near z distance of the frustum\n * zfar - the far z distance of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeOrtho2D",
            "comment": " Creates a matrix for a 2D orthogonal frustum projection with the given\nparameters. `znear` and `zfar` are assumed to be -1 and 1, respectively.\n\nParameters:\n\n * left - the left coordinate of the frustum\n * right- the right coordinate of the frustum\n * bottom - the bottom coordinate of the frustum\n * top - the top coordinate of the frustum\n",
            "type": "Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makePerspective",
            "comment": " Creates a matrix for a perspective projection with the given parameters.\n\nParameters:\n\n * fovy - field of view in the y axis, in degrees\n * aspect - aspect ratio\n * znear - the near z distance of the projection\n * zfar - the far z distance of the projection\n",
            "type": "Float -> Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeRotate",
            "comment": " Creates a transformation matrix for rotation in radians about the\n3-element vector axis.\n",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeScale",
            "comment": " Creates a transformation matrix for scaling each of the x, y, and z axes by\nthe amount given in the corresponding element of the 3-element vector.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeScale3",
            "comment": " Creates a transformation matrix for scaling by 3 scalar values, one for\neach of the x, y, and z directions.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeTranslate",
            "comment": " Creates a transformation matrix for translating each of the x, y, and z\naxes by the amount given in the corresponding element of the 3-element vector.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4"
          },
          {
            "name": "makeTranslate3",
            "comment": "\nCreates a transformation matrix for translating by 3 scalar values, one for\neach of the x, y, and z directions.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4"
          },
          {
            "name": "mul",
            "comment": " Matrix multiplcation: a * b\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "mulAffine",
            "comment": " Matrix multiplication, assuming a and b are affine: a * b\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "rotate",
            "comment": " Concatenates a rotation in radians about an axis to the given matrix.\n",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "scale",
            "comment": " Concatenates a scaling to the given matrix.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "scale3",
            "comment": " Concatenates a scaling to the given matrix.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "transform",
            "comment": " Multiply a vector by a 4x4 matrix: m * v\n",
            "type": "Math.Matrix4.Mat4 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "translate",
            "comment": "\nConcatenates a translation to the given matrix.\n",
            "type": "Math.Vector3.Vec3 -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "translate3",
            "comment": "\nConcatenates a translation to the given matrix.\n",
            "type": "Float -> Float -> Float -> Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          },
          {
            "name": "transpose",
            "comment": " \"Flip\" the matrix across the diagonal by swapping row index and column\nindex.\n",
            "type": "Math.Matrix4.Mat4 -> Math.Matrix4.Mat4"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Math.Vector2",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec2, vec2\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, setX, setY\n\n# Operations\n@docs add, sub, negate, scale, dot, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec2",
            "comment": " Two dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec2",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float } -> Math.Vector2.Vec2"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float ) -> Math.Vector2.Vec2"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector2.Vec2 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector2.Vec2 -> Math.Vector2.Vec2 -> Math.Vector2.Vec2"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector2.Vec2 -> { x : Float, y : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector2.Vec2 -> ( Float, Float )"
          },
          {
            "name": "vec2",
            "comment": " Creates a new 2-element vector with the given values. ",
            "type": "Float -> Float -> Math.Vector2.Vec2"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Math.Vector4",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec4, vec4\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, getZ, getW, setX, setY, setZ, setW\n\n# Operations\n@docs add, sub, negate, scale, dot, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec4",
            "comment": " Four dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec4",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float, z : Float, w : Float } -> Math.Vector4.Vec4"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float, Float, Float ) -> Math.Vector4.Vec4"
          },
          {
            "name": "getW",
            "comment": " Extract the w component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "getZ",
            "comment": " Extract the z component of a vector. ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector4.Vec4 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setW",
            "comment": " Update the w component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "setZ",
            "comment": " Update the z component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector4.Vec4 -> Math.Vector4.Vec4 -> Math.Vector4.Vec4"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector4.Vec4 -> { x : Float, y : Float, z : Float, w : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector4.Vec4 -> ( Float, Float, Float, Float )"
          },
          {
            "name": "vec4",
            "comment": " Creates a new 4-element vector with the given x, y, z, and w values. ",
            "type": "Float -> Float -> Float -> Float -> Math.Vector4.Vec4"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Math.Vector3",
        "comment": " A high performance linear algebra library using native JS arrays. Geared\ntowards 3D graphics and use with `Graphics.WebGL`. All vectors are immutable.\n\n# Create\n@docs Vec3, vec3, i, j, k\n\n# Get and Set\nThe set functions create a new copy of the vector, updating a single field.\n\n@docs getX, getY, getZ, setX, setY, setZ\n\n# Operations\n@docs add, sub, negate, scale, dot, cross, normalize, direction,\n      length, lengthSquared, distance, distanceSquared\n\n# Conversions\n@docs toTuple, fromTuple, toRecord, fromRecord\n",
        "aliases": [],
        "types": [
          {
            "name": "Vec3",
            "comment": " Three dimensional vector type ",
            "args": [],
            "cases": [
              [
                "Vec3",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Vector addition: a + b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "cross",
            "comment": " The cross product of a and b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "direction",
            "comment": " The normalized direction from b to a: (a - b) / |a - b| ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "distance",
            "comment": " The distance between two vectors. ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "distanceSquared",
            "comment": " The square of the distance between two vectors. ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "dot",
            "comment": " The dot product of a and b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "fromRecord",
            "comment": " Convert a record to a vector. ",
            "type": "{ x : Float, y : Float, z : Float } -> Math.Vector3.Vec3"
          },
          {
            "name": "fromTuple",
            "comment": " Convert a tuple to a vector. ",
            "type": "( Float, Float, Float ) -> Math.Vector3.Vec3"
          },
          {
            "name": "getX",
            "comment": " Extract the x component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "getY",
            "comment": " Extract the y component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "getZ",
            "comment": " Extract the z component of a vector. ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "i",
            "comment": " The unit vector &icirc; which points in the x direction: `vec3 1 0 0` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "j",
            "comment": " The unit vector &jcirc; which points in the y direction: `vec3 0 1 0` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "k",
            "comment": " The unit vector k&#0770; which points in the z direction: `vec3 0 0 1` ",
            "type": "Math.Vector3.Vec3"
          },
          {
            "name": "length",
            "comment": " The length of the given vector: |a| ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "lengthSquared",
            "comment": " The square of the length of the given vector: |a| * |a| ",
            "type": "Math.Vector3.Vec3 -> Float"
          },
          {
            "name": "negate",
            "comment": " Vector negation: -a ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "normalize",
            "comment": " A unit vector with the same direction as the given vector: a / |a| ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "scale",
            "comment": " Multiply the vector by a scalar: s * v ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setX",
            "comment": " Update the x component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setY",
            "comment": " Update the y component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "setZ",
            "comment": " Update the z component of a vector, returning a new vector. ",
            "type": "Float -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "sub",
            "comment": " Vector subtraction: a - b ",
            "type": "Math.Vector3.Vec3 -> Math.Vector3.Vec3 -> Math.Vector3.Vec3"
          },
          {
            "name": "toRecord",
            "comment": " Convert a vector to a record. ",
            "type": "Math.Vector3.Vec3 -> { x : Float, y : Float, z : Float }"
          },
          {
            "name": "toTuple",
            "comment": " Convert a vector to a tuple. ",
            "type": "Math.Vector3.Vec3 -> ( Float, Float, Float )"
          },
          {
            "name": "vec3",
            "comment": " Creates a new 3-element vector with the given values.\n",
            "type": "Float -> Float -> Float -> Math.Vector3.Vec3"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-material-icons",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Material.Icons.Toggle",
        "comment": "\n\n# Icons\n@docs check_box\n@docs check_box_outline_blank\n@docs indeterminate_check_box\n@docs radio_button_checked\n@docs radio_button_unchecked\n@docs star\n@docs star_border\n@docs star_half\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "check_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "check_box_outline_blank",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "indeterminate_check_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "radio_button_checked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "radio_button_unchecked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "star",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "star_border",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "star_half",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Social",
        "comment": "\n\n# Icons\n@docs cake\n@docs domain\n@docs group\n@docs group_add\n@docs location_city\n@docs mood\n@docs mood_bad\n@docs notifications\n@docs notifications_active\n@docs notifications_none\n@docs notifications_off\n@docs notifications_paused\n@docs pages\n@docs party_mode\n@docs people\n@docs people_outline\n@docs person\n@docs person_add\n@docs person_outline\n@docs plus_one\n@docs poll\n@docs public\n@docs school\n@docs share\n@docs whatshot\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cake",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "domain",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "group",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "group_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "location_city",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mood",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mood_bad",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "notifications",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "notifications_active",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "notifications_none",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "notifications_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "notifications_paused",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "pages",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "party_mode",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "people",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "people_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "person",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "person_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "person_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "plus_one",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "poll",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "public",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "school",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "share",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "whatshot",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Notification",
        "comment": "\n\n# Icons\n@docs adb\n@docs airline_seat_flat\n@docs airline_seat_flat_angled\n@docs airline_seat_individual_suite\n@docs airline_seat_legroom_extra\n@docs airline_seat_legroom_normal\n@docs airline_seat_legroom_reduced\n@docs airline_seat_recline_extra\n@docs airline_seat_recline_normal\n@docs bluetooth_audio\n@docs confirmation_number\n@docs disc_full\n@docs do_not_disturb\n@docs do_not_disturb_alt\n@docs drive_eta\n@docs event_available\n@docs event_busy\n@docs event_note\n@docs folder_special\n@docs live_tv\n@docs mms\n@docs more\n@docs network_locked\n@docs ondemand_video\n@docs personal_video\n@docs phone_bluetooth_speaker\n@docs phone_forwarded\n@docs phone_in_talk\n@docs phone_locked\n@docs phone_missed\n@docs phone_paused\n@docs power\n@docs sd_card\n@docs sim_card_alert\n@docs sms\n@docs sms_failed\n@docs sync\n@docs sync_disabled\n@docs sync_problem\n@docs system_update\n@docs tap_and_play\n@docs time_to_leave\n@docs vibration\n@docs voice_chat\n@docs vpn_lock\n@docs wc\n@docs wifi\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adb",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_flat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_flat_angled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_individual_suite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_legroom_extra",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_legroom_normal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_legroom_reduced",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_recline_extra",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airline_seat_recline_normal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bluetooth_audio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "confirmation_number",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "disc_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "do_not_disturb",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "do_not_disturb_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "drive_eta",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "event_available",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "event_busy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "event_note",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "folder_special",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "live_tv",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "more",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "network_locked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "ondemand_video",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "personal_video",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_bluetooth_speaker",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_forwarded",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_in_talk",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_locked",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_missed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_paused",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "power",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sd_card",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sim_card_alert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sms_failed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sync",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sync_disabled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sync_problem",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "system_update",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tap_and_play",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "time_to_leave",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vibration",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "voice_chat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vpn_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wc",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Navigation",
        "comment": "\n\n# Icons\n@docs apps\n@docs arrow_back\n@docs arrow_drop_down\n@docs arrow_drop_down_circle\n@docs arrow_drop_up\n@docs arrow_forward\n@docs cancel\n@docs check\n@docs chevron_left\n@docs chevron_right\n@docs close\n@docs expand_less\n@docs expand_more\n@docs fullscreen\n@docs fullscreen_exit\n@docs menu\n@docs more_horiz\n@docs more_vert\n@docs refresh\n@docs unfold_less\n@docs unfold_more\n\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apps",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "arrow_back",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "arrow_drop_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "arrow_drop_down_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "arrow_drop_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "arrow_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cancel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "check",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "chevron_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "chevron_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "close",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "expand_less",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "expand_more",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "fullscreen",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "fullscreen_exit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "menu",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "more_horiz",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "more_vert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "refresh",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "unfold_less",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "unfold_more",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Maps",
        "comment": "\n\n#Icons\n@docs beenhere\n@docs directions\n@docs directions_bike\n@docs directions_boat\n@docs directions_bus\n@docs directions_car\n@docs directions_railway\n@docs directions_run\n@docs directions_subway\n@docs directions_transit\n@docs directions_walk\n@docs flight\n@docs hotel\n@docs layers\n@docs layers_clear\n@docs local_activity\n@docs local_airport\n@docs local_atm\n@docs local_bar\n@docs local_cafe\n@docs local_car_wash\n@docs local_convenience_store\n@docs local_dining\n@docs local_drink\n@docs local_florist\n@docs local_gas_station\n@docs local_grocery_store\n@docs local_hospital\n@docs local_hotel\n@docs local_laundry_service\n@docs local_library\n@docs local_mall\n@docs local_movies\n@docs local_offer\n@docs local_parking\n@docs local_pharmacy\n@docs local_phone\n@docs local_pizza\n@docs local_play\n@docs local_post_office\n@docs local_printshop\n@docs local_see\n@docs local_shipping\n@docs local_taxi\n@docs map\n@docs my_location\n@docs navigation\n@docs person_pin\n@docs pin_drop\n@docs place\n@docs rate_review\n@docs restaurant_menu\n@docs satellite\n@docs store_mall_directory\n@docs terrain\n@docs traffic\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "beenhere",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_bike",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_boat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_bus",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_car",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_railway",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_run",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_subway",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_transit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "directions_walk",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flight",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hotel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "layers",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "layers_clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_activity",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_airport",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_atm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_cafe",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_car_wash",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_convenience_store",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_dining",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_drink",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_florist",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_gas_station",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_grocery_store",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_hospital",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_hotel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_laundry_service",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_library",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_mall",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_movies",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_offer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_parking",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_pharmacy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_pizza",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_play",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_post_office",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_printshop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_see",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_shipping",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "local_taxi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "map",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "my_location",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "navigation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "person_pin",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "pin_drop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "place",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "rate_review",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "restaurant_menu",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "satellite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "store_mall_directory",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "terrain",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "traffic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Image",
        "comment": "\n\n#Icons\n@docs add_to_photos\n@docs adjust\n@docs assistant\n@docs assistant_photo\n@docs audiotrack\n@docs blur_circular\n@docs blur_linear\n@docs blur_off\n@docs blur_on\n@docs brightness_1\n@docs brightness_2\n@docs brightness_3\n@docs brightness_4\n@docs brightness_5\n@docs brightness_6\n@docs brightness_7\n@docs broken_image\n@docs brush\n@docs camera\n@docs camera_alt\n@docs camera_front\n@docs camera_rear\n@docs camera_roll\n@docs center_focus_strong\n@docs center_focus_weak\n@docs collections\n@docs collections_bookmark\n@docs color_lens\n@docs colorize\n@docs compare\n@docs control_point\n@docs control_point_duplicate\n@docs crop_16_9\n@docs crop\n@docs crop_3_2\n@docs crop_5_4\n@docs crop_7_5\n@docs crop_din\n@docs crop_free\n@docs crop_landscape\n@docs crop_original\n@docs crop_portrait\n@docs crop_square\n@docs dehaze\n@docs details\n@docs edit\n@docs exposure\n@docs exposure_neg_1\n@docs exposure_neg_2\n@docs exposure_plus_1\n@docs exposure_plus_2\n@docs exposure_zero\n@docs filter\n@docs filter_1\n@docs filter_2\n@docs filter_3\n@docs filter_4\n@docs filter_5\n@docs filter_6\n@docs filter_7\n@docs filter_8\n@docs filter_9\n@docs filter_9_plus\n@docs filter_b_and_w\n@docs filter_center_focus\n@docs filter_drama\n@docs filter_frames\n@docs filter_hdr\n@docs filter_none\n@docs filter_tilt_shift\n@docs filter_vintage\n@docs flare\n@docs flash_auto\n@docs flash_off\n@docs flash_on\n@docs flip\n@docs gradient\n@docs grain\n@docs grid_off\n@docs grid_on\n@docs hdr_off\n@docs hdr_on\n@docs hdr_strong\n@docs hdr_weak\n@docs healing\n@docs image\n@docs image_aspect_ratio\n@docs iso\n@docs landscape\n@docs leak_add\n@docs leak_remove\n@docs lens\n@docs looks\n@docs looks_3\n@docs looks_4\n@docs looks_5\n@docs looks_6\n@docs looks_one\n@docs looks_two\n@docs loupe\n@docs monochrome_photos\n@docs movie_creation\n@docs music_note\n@docs nature\n@docs nature_people\n@docs navigate_before\n@docs navigate_next\n@docs palette\n@docs panorama\n@docs panorama_fish_eye\n@docs panorama_horizontal\n@docs panorama_vertical\n@docs panorama_wide_angle\n@docs photo\n@docs photo_album\n@docs photo_camera\n@docs photo_library\n@docs photo_size_select_actual\n@docs photo_size_select_large\n@docs photo_size_select_small\n@docs picture_as_pdf\n@docs portrait\n@docs remove_red_eye\n@docs rotate_90_degrees_ccw\n@docs rotate_left\n@docs rotate_right\n@docs slideshow\n@docs straighten\n@docs style\n@docs switch_camera\n@docs switch_video\n@docs tag_faces\n@docs texture\n@docs timelapse\n@docs timer_10\n@docs timer\n@docs timer_3\n@docs timer_off\n@docs tonality\n@docs transform\n@docs tune\n@docs view_comfy\n@docs view_compact\n@docs vignette\n@docs wb_auto\n@docs wb_cloudy\n@docs wb_incandescent\n@docs wb_iridescent\n@docs wb_sunny\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add_to_photos",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "adjust",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assistant",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assistant_photo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "audiotrack",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "blur_circular",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "blur_linear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "blur_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "blur_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_6",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_7",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "broken_image",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brush",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "camera",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "camera_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "camera_front",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "camera_rear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "camera_roll",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "center_focus_strong",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "center_focus_weak",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "collections",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "collections_bookmark",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "color_lens",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "colorize",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "compare",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "control_point",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "control_point_duplicate",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_16_9",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_3_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_5_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_7_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_din",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_free",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_original",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "crop_square",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dehaze",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "details",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "edit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exposure",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exposure_neg_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exposure_neg_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exposure_plus_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exposure_plus_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exposure_zero",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_6",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_7",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_8",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_9",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_9_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_b_and_w",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_center_focus",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_drama",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_frames",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_hdr",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_none",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_tilt_shift",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_vintage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flare",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flash_auto",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flash_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flash_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flip",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gradient",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "grain",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "grid_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "grid_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hdr_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hdr_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hdr_strong",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hdr_weak",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "healing",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "image",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "image_aspect_ratio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "iso",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "leak_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "leak_remove",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "lens",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks_6",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks_one",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "looks_two",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "loupe",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "monochrome_photos",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "movie_creation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "music_note",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "nature",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "nature_people",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "navigate_before",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "navigate_next",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "palette",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "panorama",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "panorama_fish_eye",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "panorama_horizontal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "panorama_vertical",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "panorama_wide_angle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo_album",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo_camera",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo_library",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo_size_select_actual",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo_size_select_large",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "photo_size_select_small",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "picture_as_pdf",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "remove_red_eye",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "rotate_90_degrees_ccw",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "rotate_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "rotate_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "slideshow",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "straighten",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "switch_camera",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "switch_video",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tag_faces",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "texture",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "timelapse",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "timer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "timer_10",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "timer_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "timer_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tonality",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "transform",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tune",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_comfy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_compact",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vignette",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wb_auto",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wb_cloudy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wb_incandescent",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wb_iridescent",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wb_sunny",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Hardware",
        "comment": "\n\n#Icons\n@docs cast\n@docs cast_connected\n@docs computer\n@docs desktop_mac\n@docs desktop_windows\n@docs developer_board\n@docs device_hub\n@docs dock\n@docs gamepad\n@docs headset\n@docs headset_mic\n@docs keyboard\n@docs keyboard_arrow_down\n@docs keyboard_arrow_left\n@docs keyboard_arrow_right\n@docs keyboard_arrow_up\n@docs keyboard_arrow_backspace\n@docs keyboard_arrow_capslock\n@docs keyboard_arrow_hide\n@docs keyboard_arrow_return\n@docs keyboard_tab\n@docs keyboard_voice\n@docs laptop\n@docs laptop_chromebook\n@docs laptop_mac\n@docs laptop_windows\n@docs memory\n@docs mouse\n@docs phone_android\n@docs phone_iphone\n@docs phonelink\n@docs phonelink_off\n@docs power_input\n@docs router\n@docs scanner\n@docs security\n@docs sim_card\n@docs smartphone\n@docs speaker\n@docs speaker_group\n@docs tablet\n@docs tablet_android\n@docs tablet_mac\n@docs toys\n@docs tv\n@docs watch\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "cast",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cast_connected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "computer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "desktop_mac",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "desktop_windows",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "developer_board",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "device_hub",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gamepad",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "headset",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "headset_mic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_backspace",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_capslock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_hide",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_return",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_arrow_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_tab",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "keyboard_voice",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "laptop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "laptop_chromebook",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "laptop_mac",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "laptop_windows",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "memory",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mouse",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_android",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone_iphone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phonelink",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phonelink_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "power_input",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "router",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "scanner",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "security",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sim_card",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "smartphone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "speaker",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "speaker_group",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tablet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tablet_android",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tablet_mac",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "toys",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tv",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "watch",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.File",
        "comment": "\n\n# Icons\n@docs attachment\n@docs cloud\n@docs cloud_circle\n@docs cloud_done\n@docs cloud_download\n@docs cloud_off\n@docs cloud_queue\n@docs cloud_upload\n@docs file_download\n@docs file_upload\n@docs folder\n@docs folder_open\n@docs folder_shared\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "attachment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud_done",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud_download",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud_queue",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cloud_upload",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "file_download",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "file_upload",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "folder",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "folder_open",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "folder_shared",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Editor",
        "comment": "\n\n# Icons\n@docs attach_file\n@docs attach_money\n@docs border_all\n@docs border_bottom\n@docs border_clear\n@docs border_color\n@docs border_horizontal\n@docs border_inner\n@docs border_left\n@docs border_outer\n@docs border_right\n@docs border_style\n@docs border_top\n@docs border_vertical\n@docs format_align_center\n@docs format_align_justify\n@docs format_align_left\n@docs format_align_right\n@docs format_bold\n@docs format_clear\n@docs format_color_fill\n@docs format_color_reset\n@docs format_color_text\n@docs format_indent_decrease\n@docs format_indent_increase\n@docs format_italic\n@docs format_line_spacing\n@docs format_list_bulleted\n@docs format_list_numbered\n@docs format_paint\n@docs format_quote\n@docs format_size\n@docs format_strikethrough\n@docs format_textdirection_l_to_r\n@docs format_textdirection_r_to_l\n@docs format_underlined\n@docs functions\n@docs insert_chart\n@docs insert_comment\n@docs insert_drive_file\n@docs insert_emoticon\n@docs insert_invitation\n@docs insert_link\n@docs insert_photo\n@docs merge_type\n@docs mode_comment\n@docs mode_edit\n@docs money_off\n@docs publish\n@docs space_bar\n@docs strikethrough_s\n@docs vertical_align_bottom\n@docs vertical_align_center\n@docs vertical_align_top\n@docs wrap_text\n\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "attach_file",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "attach_money",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_bottom",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_color",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_horizontal",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_inner",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_outer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_style",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_top",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "border_vertical",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_align_center",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_align_justify",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_align_left",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_align_right",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_bold",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_color_fill",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_color_reset",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_color_text",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_indent_decrease",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_indent_increase",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_italic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_line_spacing",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_list_bulleted",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_list_numbered",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_paint",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_quote",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_size",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_strikethrough",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_textdirection_l_to_r",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_textdirection_r_to_l",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "format_underlined",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "functions",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_comment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_drive_file",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_emoticon",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_invitation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_link",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "insert_photo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "merge_type",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mode_comment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mode_edit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "money_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "publish",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "space_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "strikethrough_s",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vertical_align_bottom",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vertical_align_center",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vertical_align_top",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wrap_text",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Device",
        "comment": "\n\n# Icons\n@docs access_alarm\n@docs access_alarms\n@docs access_time\n@docs add_alarm\n@docs airplanemode_active\n@docs airplanemode_inactive\n@docs battery_20\n@docs battery_30\n@docs battery_50\n@docs battery_60\n@docs battery_80\n@docs battery_90\n@docs battery_alert\n@docs battery_charging_20\n@docs battery_charging_30\n@docs battery_charging_50\n@docs battery_charging_60\n@docs battery_charging_80\n@docs battery_charging_90\n@docs battery_charging_full\n@docs battery_full\n@docs battery_std\n@docs battery_unknown\n@docs bluetooth\n@docs bluetooth_connected\n@docs bluetooth_disabled\n@docs bluetooth_searching\n@docs brightness_auto\n@docs brightness_high\n@docs brightness_low\n@docs brightness_medium\n@docs data_usage\n@docs developer_mode\n@docs devices\n@docs dvr\n@docs gps_fixed\n@docs gps_not_fixed\n@docs gps_off\n@docs graphic_eq\n@docs location_disabled\n@docs location_searching\n@docs network_cell\n@docs network_wifi\n@docs nfc\n@docs screen_lock_landscape\n@docs screen_lock_portrait\n@docs screen_lock_rotation\n@docs screen_rotation\n@docs sd_storage\n@docs settings_system_daydream\n@docs signal_cellular_0_bar\n@docs signal_cellular_1_bar\n@docs signal_cellular_2_bar\n@docs signal_cellular_3_bar\n@docs signal_cellular_4_bar\n@docs signal_cellular_connected_no_internet_0_bar\n@docs signal_cellular_connected_no_internet_1_bar\n@docs signal_cellular_connected_no_internet_2_bar\n@docs signal_cellular_connected_no_internet_3_bar\n@docs signal_cellular_connected_no_internet_4_bar\n@docs signal_cellular_no_sim\n@docs signal_cellular_null\n@docs signal_cellular_off\n@docs signal_wifi_0_bar\n@docs signal_wifi_1_bar\n@docs signal_wifi_1_bar_lock\n@docs signal_wifi_2_bar\n@docs signal_wifi_2_bar_lock\n@docs signal_wifi_3_bar\n@docs signal_wifi_3_bar_lock\n@docs signal_wifi_4_bar\n@docs signal_wifi_4_bar_lock\n@docs signal_wifi_off\n@docs signal_wifi_statusbar_1_bar\n@docs signal_wifi_statusbar_2_bar\n@docs signal_wifi_statusbar_3_bar\n@docs signal_wifi_statusbar_4_bar\n@docs signal_wifi_statusbar_connected_no_internet\n@docs signal_wifi_statusbar_connected_no_internet_1\n@docs signal_wifi_statusbar_connected_no_internet_2\n@docs signal_wifi_statusbar_connected_no_internet_3\n@docs signal_wifi_statusbar_connected_no_internet_4\n@docs signal_wifi_statusbar_not_connected\n@docs signal_wifi_statusbar_null\n@docs storage\n@docs usb\n@docs wallpaper\n@docs widgets\n@docs wifi_lock\n@docs wifi_tethering\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "access_alarm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "access_alarms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "access_time",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "add_alarm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airplanemode_active",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "airplanemode_inactive",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_20",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_50",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_60",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_80",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_90",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_alert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_20",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_50",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_60",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_80",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_90",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_charging_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_std",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "battery_unknown",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bluetooth_connected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bluetooth_disabled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bluetooth_searching",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_auto",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_high",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_low",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "brightness_medium",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "data_usage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "developer_mode",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "devices",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dvr",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gps_fixed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gps_not_fixed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gps_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "graphic_eq",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "location_disabled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "location_searching",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "network_cell",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "network_wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "nfc",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "screen_lock_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "screen_lock_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "screen_lock_rotation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "screen_rotation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sd_storage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_system_daydream",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_0_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_connected_no_internet_0_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_connected_no_internet_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_connected_no_internet_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_connected_no_internet_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_connected_no_internet_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_no_sim",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_null",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_cellular_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_0_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_1_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_2_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_3_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_4_bar_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_1_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_2_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_3_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_4_bar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_1",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_2",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_3",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_connected_no_internet_4",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_not_connected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "signal_wifi_statusbar_null",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "storage",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "usb",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wallpaper",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "widgets",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wifi_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "wifi_tethering",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Content",
        "comment": "\n\n# Icons\n@docs add\n@docs add_box\n@docs add_circle\n@docs add_circle_outline\n@docs archive\n@docs backspace\n@docs block\n@docs clear\n@docs content_copy\n@docs content_cut\n@docs content_paste\n@docs create\n@docs drafts\n@docs filter_list\n@docs flag\n@docs font_download\n@docs forward\n@docs gesture\n@docs inbox\n@docs link\n@docs mail\n@docs markunread\n@docs redo\n@docs remove\n@docs remove_circle\n@docs remove_circle_outline\n@docs reply\n@docs reply_all\n@docs report\n@docs save\n@docs select_all\n@docs send\n@docs sort\n@docs text_format\n@docs undo\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "add_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "add_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "add_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "archive",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "backspace",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "block",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "clear",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "content_copy",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "content_cut",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "content_paste",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "create",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "drafts",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "filter_list",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flag",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "font_download",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "forward",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gesture",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "inbox",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "link",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mail",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "markunread",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "redo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "remove",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "remove_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "remove_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "reply",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "reply_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "report",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "save",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "select_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "send",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sort",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "text_format",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "undo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Action",
        "comment": "\n\n# Icons\n@docs three_d_rotation\n@docs accessibility\n@docs account_balance\n@docs account_balance_with_wallet\n@docs account_box\n@docs account_circle\n@docs add_shopping_cart\n@docs alarm\n@docs alarm_add\n@docs alarm_off\n@docs alarm_on\n@docs android\n@docs announcement\n@docs aspect_ratio\n@docs assessment\n@docs assignment\n@docs assignment_ind\n@docs assignment_late\n@docs assignment_return\n@docs assignment_returned\n@docs assignment_turned_in\n@docs autorenew\n@docs backup\n@docs book\n@docs bookmark\n@docs bookmark_border\n@docs bug_report\n@docs build\n@docs cached\n@docs camera_enhance\n@docs card_giftcard\n@docs card_membership\n@docs card_travel\n@docs change_history\n@docs check_circle\n@docs chrome_reader_mode\n@docs class\n@docs code\n@docs credit_card\n@docs dashboard\n@docs delete\n@docs description\n@docs dns\n@docs done\n@docs done_all\n@docs eject\n@docs event\n@docs event_seat\n@docs exit_to_app\n@docs explore\n@docs extension\n@docs face\n@docs favorite\n@docs favorite_border\n@docs feedback\n@docs find_in_page\n@docs find_replace\n@docs flight_land\n@docs flight_takeoff\n@docs flip_to_back\n@docs flip_to_front\n@docs get_app\n@docs gif\n@docs grade\n@docs group_work\n@docs help\n@docs help_outline\n@docs highlight_off\n@docs history\n@docs home\n@docs hourglass_empty\n@docs hourglass_full\n@docs http\n@docs https\n@docs info\n@docs info_outline\n@docs input\n@docs invert_colors\n@docs label\n@docs label_outline\n@docs language\n@docs launch\n@docs list\n@docs lock\n@docs lock_open\n@docs lock_outline\n@docs loyalty\n@docs markunread_mailbox\n@docs note_add\n@docs offline_pin\n@docs open_in_browser\n@docs open_in_new\n@docs open_with\n@docs pageview\n@docs payment\n@docs perm_camera_mic\n@docs perm_contact_calendar\n@docs perm_data_setting\n@docs perm_device_information\n@docs perm_identity\n@docs perm_media\n@docs perm_phone_msg\n@docs perm_scan_wifi\n@docs picture_in_picture\n@docs play_for_work\n@docs polymer\n@docs power_settings_new\n@docs print\n@docs query_builder\n@docs question_answer\n@docs receipt\n@docs redeem\n@docs reorder\n@docs report_problem\n@docs restore\n@docs room\n@docs schedule\n@docs search\n@docs settings\n@docs settings_application\n@docs settings_backup_restore\n@docs settings_bluetooth\n@docs settings_brightness\n@docs settings_cell\n@docs settings_ethernet\n@docs settings_input_antenna\n@docs settings_input_component\n@docs settings_input_composite\n@docs settings_input_hdmi\n@docs settings_input_svideo\n@docs settings_overscan\n@docs settings_phone\n@docs settings_power\n@docs settings_remote\n@docs settings_voice\n@docs shop\n@docs shop_two\n@docs shopping_basket\n@docs shopping_cart\n@docs speaker_notes\n@docs spellcheck\n@docs star_rate\n@docs stars\n@docs store\n@docs subject\n@docs supervisor_account\n@docs swap_horiz\n@docs swap_vert\n@docs swap_vertical_circle\n@docs system_update_alt\n@docs tab\n@docs tab_unselected\n@docs theaters\n@docs thumb_down\n@docs thumb_up\n@docs thumps_up_down\n@docs toc\n@docs today\n@docs toll\n@docs track_changes\n@docs translate\n@docs trending_down\n@docs trending_flat\n@docs trending_up\n@docs turned_in\n@docs turned_in_not\n@docs verified_user\n@docs view_agenda\n@docs view_array\n@docs view_carousel\n@docs view_column\n@docs view_day\n@docs view_headline\n@docs view_list\n@docs view_module\n@docs view_quilt\n@docs view_stream\n@docs view_week\n@docs visibility\n@docs visibility_off\n@docs work\n@docs youtube_searched_for\n@docs zoom_in\n@docs zoom_out\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accessibility",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "account_balance",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "account_balance_with_wallet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "account_box",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "account_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "add_shopping_cart",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "alarm",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "alarm_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "alarm_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "alarm_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "android",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "announcement",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "aspect_ratio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assessment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assignment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assignment_ind",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assignment_late",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assignment_return",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assignment_returned",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "assignment_turned_in",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "autorenew",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "backup",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "book",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bookmark",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bookmark_border",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "bug_report",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "build",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "cached",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "camera_enhance",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "card_giftcard",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "card_membership",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "card_travel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "change_history",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "check_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "chrome_reader_mode",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "class",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "code",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "credit_card",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dashboard",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "delete",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "description",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dns",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "done",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "done_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "eject",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "event",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "event_seat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "exit_to_app",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "explore",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "extension",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "face",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "favorite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "favorite_border",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "feedback",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "find_in_page",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "find_replace",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flight_land",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flight_takeoff",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flip_to_back",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "flip_to_front",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "get_app",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "gif",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "grade",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "group_work",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "help",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "help_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "highlight_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "history",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "home",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hourglass_empty",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hourglass_full",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "http",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "https",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "info",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "info_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "input",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "invert_colors",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "label",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "label_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "language",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "launch",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "list",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "lock_open",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "lock_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "loyalty",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "markunread_mailbox",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "note_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "offline_pin",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "open_in_browser",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "open_in_new",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "open_with",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "pageview",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "payment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_camera_mic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_contact_calendar",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_data_setting",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_device_information",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_identity",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_media",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_phone_msg",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "perm_scan_wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "picture_in_picture",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "play_for_work",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "polymer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "power_settings_new",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "print",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "query_builder",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "question_answer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "receipt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "redeem",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "reorder",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "report_problem",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "restore",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "room",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "schedule",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "search",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_application",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_backup_restore",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_bluetooth",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_brightness",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_cell",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_ethernet",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_input_antenna",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_input_component",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_input_composite",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_input_hdmi",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_input_svideo",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_overscan",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_power",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_remote",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "settings_voice",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "shop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "shop_two",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "shopping_basket",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "shopping_cart",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "speaker_notes",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "spellcheck",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "star_rate",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "stars",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "store",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "subject",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "supervisor_account",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "swap_horiz",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "swap_vert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "swap_vertical_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "system_update_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tab",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "tab_unselected",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "theaters",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "three_d_rotation",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "thumb_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "thumb_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "thumps_up_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "toc",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "today",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "toll",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "track_changes",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "translate",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "trending_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "trending_flat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "trending_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "turned_in",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "turned_in_not",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "verified_user",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_agenda",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_array",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_carousel",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_column",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_day",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_headline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_list",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_module",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_quilt",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_stream",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "view_week",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "visibility",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "visibility_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "work",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "youtube_searched_for",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "zoom_in",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "zoom_out",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Alert",
        "comment": "\n\n# Icons\n@docs add_alert\n@docs error\n@docs error_outline\n@docs warning\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "add_alert",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "error",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "error_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "warning",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Communication",
        "comment": "\n\n# Icons\n@docs contact_mail\n@docs business\n@docs call\n@docs call_end\n@docs call_made\n@docs call_merge\n@docs call_missed\n@docs call_received\n@docs call_split\n@docs chat\n@docs chat_bubble\n@docs chat_bubble_outline\n@docs clear_all\n@docs comment\n@docs contact_phone\n@docs contacts\n@docs dialer_sip\n@docs dialpad\n@docs email\n@docs forum\n@docs import_export\n@docs invert_colors_off\n@docs live_help\n@docs location_off\n@docs location_on\n@docs message\n@docs no_sim\n@docs phone\n@docs phonelink_erase\n@docs phonelink_lock\n@docs phonelink_ring\n@docs phonelink_setup\n@docs portable_wifi_off\n@docs present_to_all\n@docs ring_volume\n@docs speaker_phone\n@docs stay_current_landscape\n@docs stay_current_portrait\n@docs stay_primary_landscape\n@docs stay_primary_portrait\n@docs swap_calls\n@docs textsms\n@docs voicemail\n@docs vpn_key\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "business",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call_end",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call_made",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call_merge",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call_missed",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call_received",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "call_split",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "chat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "chat_bubble",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "chat_bubble_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "clear_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "comment",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "contact_mail",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "contact_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "contacts",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dialer_sip",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "dialpad",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "email",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "forum",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "import_export",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "invert_colors_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "live_help",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "location_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "location_on",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "message",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "no_sim",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phonelink_erase",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phonelink_lock",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phonelink_ring",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "phonelink_setup",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "portable_wifi_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "present_to_all",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "ring_volume",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "speaker_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "stay_current_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "stay_current_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "stay_primary_landscape",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "stay_primary_portrait",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "swap_calls",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "textsms",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "voicemail",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "vpn_key",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Material.Icons.Av",
        "comment": "\n\n# Icons\n@docs airplay\n@docs album\n@docs av_timer\n@docs closed_caption\n@docs equalizer\n@docs explicit\n@docs fast_forward\n@docs fast_rewind\n@docs forward_10\n@docs forward_30\n@docs forward_5\n@docs games\n@docs hd\n@docs hearing\n@docs high_quality\n@docs library_add\n@docs library_books\n@docs library_music\n@docs loop\n@docs mic\n@docs mic_none\n@docs mic_off\n@docs movie\n@docs new_releases\n@docs not_interested\n@docs pause\n@docs pause_circle_filled\n@docs pause_circle_outline\n@docs play_arrow\n@docs play_circle_filled\n@docs play_circle_outline\n@docs playlist_add\n@docs queue\n@docs queue_music\n@docs radio\n@docs recent_actors\n@docs repeat\n@docs repeat_one\n@docs replay_10\n@docs replay\n@docs replay_30\n@docs replay_5\n@docs shuffle\n@docs skip_next\n@docs skip_previous\n@docs snooze\n@docs sort_by_alpha\n@docs stop\n@docs subtitles\n@docs surround_sound\n@docs video_library\n@docs videocam\n@docs videocam_off\n@docs volume_down\n@docs volume_mute\n@docs volume_off\n@docs volume_up\n@docs web\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "airplay",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "album",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "av_timer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "closed_caption",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "equalizer",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "explicit",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "fast_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "fast_rewind",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "forward_10",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "forward_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "forward_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "games",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hd",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "hearing",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "high_quality",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "library_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "library_books",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "library_music",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "loop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mic",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mic_none",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "mic_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "movie",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "new_releases",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "not_interested",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "pause",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "pause_circle_filled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "pause_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "play_arrow",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "play_circle_filled",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "play_circle_outline",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "playlist_add",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "queue",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "queue_music",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "radio",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "recent_actors",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "repeat",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "repeat_one",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "replay",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "replay_10",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "replay_30",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "replay_5",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "shuffle",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "skip_next",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "skip_previous",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "snooze",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "sort_by_alpha",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "subtitles",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "surround_sound",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "video_library",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "videocam",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "videocam_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "volume_down",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "volume_mute",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "volume_off",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "volume_up",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          },
          {
            "name": "web",
            "comment": "",
            "type": "Color.Color -> Int -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-undo-redo",
    "version": "1.0.1",
    "docs": [
      {
        "name": "UndoList.Shrink",
        "comment": " Shrink UndoList Submodule.\n\nProvides shrinking strategies for timelines and actions.\n\n# Shrinkers\n@docs undolist, action\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "action",
            "comment": " Shrink an undo-list action given an action shrinker.\nConsiders `Reset` to be most minimal.\n",
            "type": "Shrink.Shrinker action -> Shrink.Shrinker (UndoList.Action action)"
          },
          {
            "name": "undolist",
            "comment": " Shrink an undo-list of states given a shrinker of states.\n",
            "type": "Shrink.Shrinker state -> Shrink.Shrinker (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "UndoList.Random",
        "comment": " Random UndoList Submodule.\n\nProvides random undolist and undolist action generators.\n\n# Generators\n@docs undolist, action\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "action",
            "comment": " Generate random undolist actions given an action generator.\n\nGenerates actions with the following probabilities:\n\n- Reset  : 5%\n- Forget : 5%\n- Undo   : 30%\n- Redo   : 30%\n- New    : 30%\n",
            "type": "Random.Generator action -> Random.Generator (UndoList.Action action)"
          },
          {
            "name": "undolist",
            "comment": " Random UndoList Generator constructor.\nGiven a generator of state, a length for the past, and a length for the future,\ngenerate a random undolist of states.\n\n    undolist pastLength futureLength generator\n",
            "type": "Int -> Int -> Random.Generator state -> Random.Generator (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "UndoList.Encode",
        "comment": " Encode UndoList submodule.\n\nProvides JSON encoders for Timelines and UndoList Actions.\n\n# Encoders\n@docs undolist, action\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "action",
            "comment": " Encode an UndoList Action of JSON values.\nBest paired with the `mapAction` function from UndoList.\n\n    encodeAction actionEncoder =\n      UndoList.mapAction actionEncoder >> action\n",
            "type": "UndoList.Action Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "undolist",
            "comment": " Encode an undolist of JSON values.\nBest paired with the `map` function from UndoList.\n\n    encodeUndoList stateEncoder  =\n      UndoList.map stateEncoder >> undolist\n",
            "type": "UndoList.UndoList Json.Encode.Value -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "UndoList.Decode",
        "comment": " Decode UndoList submodule.\n\nProvides JSON decoders for Timelines and UndoList Actions.\n\n# Decoders\n@docs undolist, action\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "action",
            "comment": " Decode an undo-list action given a decoder of actions.\n",
            "type": "Json.Decode.Decoder action -> Json.Decode.Decoder (UndoList.Action action)"
          },
          {
            "name": "undolist",
            "comment": " Decode an undo-list given a decoder of state.\n",
            "type": "Json.Decode.Decoder state -> Json.Decode.Decoder (UndoList.UndoList state)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "UndoList",
        "comment": " UndoList Data Structure.\n\n# Definition\n@docs UndoList\n\n# Basic Operations\n@docs undo, redo, fresh, new, forget, reset\n\n# Query UndoList\n@docs hasPast, hasFuture, length, lengthPast, lengthFuture\n\n# Actions\n@docs Action, mapAction\n\n# Functional Operations\n@docs map, mapPresent, update, connect, reduce, foldl, foldr, reverse, flatten, flatMap, andThen, map2, andMap\n\n# Shorthands\n@docs view, foldp, mailbox\n\n# Conversions\n@docs toList, fromList\n",
        "aliases": [
          {
            "name": "UndoList",
            "comment": " The UndoList data structure.\nAn UndoList has:\n\n1. A list of past states\n2. A present state\n3. A list of future states\n\n\nThe head of the past list is the most recent state and the head of the future\nlist is the next state. (i.e., the tails of both lists point away from the\npresent)\n",
            "args": [
              "state"
            ],
            "type": "{ past : List state, present : state, future : List state }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Simple UndoList Action type. This is a simple type that can be used for\nmost use cases. This works best when paired with the `update` function as\n`update` will perform the corresponding operations on the undolist automatically.\n\nConsider using your own data type only if you really need it.\n",
            "args": [
              "action"
            ],
            "cases": [
              [
                "Reset",
                []
              ],
              [
                "Redo",
                []
              ],
              [
                "Undo",
                []
              ],
              [
                "Forget",
                []
              ],
              [
                "New",
                [
                  "action"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Map a function over any number of undo-lists.\n\n    map f xs `andMap` ys `andMap` zs\n",
            "type": "UndoList.UndoList (a -> b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "andThen",
            "comment": " Chain undo-list operations.\n",
            "type": "UndoList.UndoList a -> (a -> UndoList.UndoList b) -> UndoList.UndoList b"
          },
          {
            "name": "connect",
            "comment": " Connect two undo-lists end to end. The present of the first undolist is\nconsidered the present of the output undolist.\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "flatMap",
            "comment": " Map over an undo-list and then flatten the result.\n",
            "type": "(a -> UndoList.UndoList b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "flatten",
            "comment": " Flatten an undo-list of undo-lists into a single undo-list.\n",
            "type": "UndoList.UndoList (UndoList.UndoList a) -> UndoList.UndoList a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an undo-list from the left (or from the past)\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "foldp",
            "comment": " Analog of Signal.foldp\n\nThis shorthand is defined simple as follows:\n\n    foldp update initial =\n      Signal.foldp (update update) (fresh initial)\n\nThis allows you to foldp on undo-lists without having to explicitly sprinkle\nin undolist-specific code.\n",
            "type": "(action -> state -> state) -> state -> Signal.Signal (UndoList.Action action) -> Signal.Signal (UndoList.UndoList state)"
          },
          {
            "name": "foldr",
            "comment": " Reduce an undo-list from the right (or from the future)\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "forget",
            "comment": " Forget the past and look to the future!\nThis simply clears the past list.\n\ni.e.\n    forget (UndoList [3,2,1] 4 [5,6]) == UndoList [] 4 [5,6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "fresh",
            "comment": " Turn a state into an undo-list with neither past nor future.\n",
            "type": "state -> UndoList.UndoList state"
          },
          {
            "name": "fromList",
            "comment": " Convert a list to undolist. The provided state is used as the present\nstate and the list is used as the future states.\n\n    fromList 1 [2,3,4] == UndoList [] 1 [2,3,4]\n",
            "type": "state -> List state -> UndoList.UndoList state"
          },
          {
            "name": "hasFuture",
            "comment": " Check if the undo-list has any future states.\n",
            "type": "UndoList.UndoList state -> Bool"
          },
          {
            "name": "hasPast",
            "comment": " Check if the undo-list has any past states.\n",
            "type": "UndoList.UndoList state -> Bool"
          },
          {
            "name": "length",
            "comment": " Get the full length of an undo-list\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "lengthFuture",
            "comment": " Get the length of the future\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "lengthPast",
            "comment": " Get the length of the past.\n",
            "type": "UndoList.UndoList state -> Int"
          },
          {
            "name": "mailbox",
            "comment": " Shorthand for\n\n    Signal.mailbox << New\n\nAllows you to create a mailbox of undo-list actions given an action.\n\nIn many cases, you might be better off just doing:\n\n    myMailbox = Signal.mailbox Reset\n\nThis allows you to avoid the problem of coming up with an initial value for\nyour mailbox.\n",
            "type": "action -> Signal.Mailbox (UndoList.Action action)"
          },
          {
            "name": "map",
            "comment": " Map a function over an undo-list.\nBe careful with this. The function will be applied to the past and the future\nas well. If you just want to change the present, use `mapPresent`.\n\nA good use case for `map` is to encode an undo-list as JSON.\n\nExample:\n\n    import UndoList.Encode as Encode\n\n    encode encoder undolist =\n      map encoder undolist\n      |> Encode.undolist\n",
            "type": "(a -> b) -> UndoList.UndoList a -> UndoList.UndoList b"
          },
          {
            "name": "map2",
            "comment": " Map a function over a pair of undo-lists.\n",
            "type": "(a -> b -> c) -> UndoList.UndoList a -> UndoList.UndoList b -> UndoList.UndoList c"
          },
          {
            "name": "mapAction",
            "comment": " Map a function over an action.\n",
            "type": "(a -> b) -> UndoList.Action a -> UndoList.Action b"
          },
          {
            "name": "mapPresent",
            "comment": " Apply a function only on the present.\n",
            "type": "(a -> a) -> UndoList.UndoList a -> UndoList.UndoList a"
          },
          {
            "name": "new",
            "comment": " Add a new present state to the undo-list, turning the old\npresent state into a past state and erasing the future.\n",
            "type": "state -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "redo",
            "comment": " If the undo-list has any future states, set the next\nfuture state as the current state and turn the old present state\ninto a past state.\n\ni.e.\n\n    redo (UndoList [3,2,1] 4 [5,6]) == UndoList [4,3,2,1] 5 [6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "reduce",
            "comment": " Alias for `foldl`\n",
            "type": "(a -> b -> b) -> b -> UndoList.UndoList a -> b"
          },
          {
            "name": "reset",
            "comment": " Reset the undo-list by returning to the very first state\nand clearing all other states.\n\ni.e.\n\n    reset (UndoList [3,2,1] 4 [5,6]) == UndoList [] 1 []\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "reverse",
            "comment": " Reverse an undo-list.\n",
            "type": "UndoList.UndoList a -> UndoList.UndoList a"
          },
          {
            "name": "toList",
            "comment": " Convert an undo-list to a list :\n\n    toList (UndoList [3,2,1] 4 [5,6]) == [1,2,3,4,5,6]\n",
            "type": "UndoList.UndoList state -> List state"
          },
          {
            "name": "undo",
            "comment": " If the undolist has any past states, set the most recent past\nstate as the current state and turn the old present state into\na future state.\n\ni.e.\n\n    undo (UndoList [3,2,1] 4 [5,6]) == UndoList [2,1] 3 [4,5,6]\n",
            "type": "UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "update",
            "comment": " Convert a function that updates the state to a function that updates an undo-list.\nThis is very useful to allow you to write update functions that only deal with\nthe individual states of your system and treat undo/redo as an add on.\n\n\nExample:\n\n    -- Your update function\n    update action state =\n      case action of\n        ... -- some implementation\n\n    -- Your new update function\n    update' = UndoList.update update\n\n",
            "type": "(action -> state -> state) -> UndoList.Action action -> UndoList.UndoList state -> UndoList.UndoList state"
          },
          {
            "name": "view",
            "comment": " Function to help not having to deal with the full undolist from with\nyour actual view function.\n\nSuppose you define the following:\n\n    initial : model\n    update : action -> model -> model\n    view : Address (UndoList.Action action) -> model -> view\n    address : Address (UndoList.Action action)\n    signal : Signal (UndoList.Action action)\n\nThen, you could construct the main function as follows:\n\n    main =\n      Signal.map (UndoList.view view address)\n        (Signal.foldp (UndoList.update update) (UndoList.fresh initial) signal)\n\n",
            "type": "(Signal.Address (UndoList.Action action) -> state -> view) -> Signal.Address (UndoList.Action action) -> UndoList.UndoList state -> view"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "elm-community/elm-webgl",
    "version": "1.0.0",
    "docs": [
      {
        "name": "WebGL",
        "comment": " The WebGL API is for high performance rendering. Definitely read about\n[how WebGL works](https://github.com/johnpmayer/elm-webgl/blob/master/README.md)\nand look at some examples before trying to do too much with just the\ndocumentation provided here.\n\n# Main Types\n@docs Texture, TextureFilter, Shader, Renderable, Error, Drawable\n\n# Entities\n@docs render, renderWithConfig\n\n# WebGL Element\n@docs webgl, webglWithConfig, defaultConfiguration\n\n# WebGL API Calls\n@docs FunctionCall\n\n# WebGL API Types\n@docs Capability, BlendOperation, BlendMode, CompareMode, FaceMode, ZMode\n\n# Loading Textures\n@docs loadTexture, loadTextureWithFilter, textureSize\n\n# Unsafe Shader Creation (for library writers)\n@docs unsafeShader\n\n# Functions\n@docs computeAPICall, computeAPICalls, computeBlendModeString, computeBlendOperationString, computeCapabilityString, computeCompareModeString, computeFaceModeString, computeZModeString\n\n",
        "aliases": [],
        "types": [
          {
            "name": "BlendMode",
            "comment": " The `BlendMode` type allows you to define which blend mode to use.\n",
            "args": [],
            "cases": [
              [
                "Add",
                []
              ],
              [
                "Subtract",
                []
              ],
              [
                "ReverseSubtract",
                []
              ]
            ]
          },
          {
            "name": "BlendOperation",
            "comment": " The `BlendOperation` type allows you to define which blend operation to use.\n",
            "args": [],
            "cases": [
              [
                "Zero",
                []
              ],
              [
                "One",
                []
              ],
              [
                "SrcColor",
                []
              ],
              [
                "OneMinusSrcColor",
                []
              ],
              [
                "DstColor",
                []
              ],
              [
                "OneMinusDstColor",
                []
              ],
              [
                "SrcAlpha",
                []
              ],
              [
                "OneMinusSrcAlpha",
                []
              ],
              [
                "DstAlpha",
                []
              ],
              [
                "OneMinusDstAlpha",
                []
              ],
              [
                "ConstantColor",
                []
              ],
              [
                "OneMinusConstantColor",
                []
              ],
              [
                "ConstantAlpha",
                []
              ],
              [
                "OneMinusConstantAlpha",
                []
              ],
              [
                "SrcAlphaSaturate",
                []
              ]
            ]
          },
          {
            "name": "Capability",
            "comment": " The `Capability` type is used to enable/disable server-side GL capabilities.\n\n+ `Blend`: If enabled, blend the computed fragment color values\nwith the values in the color buffers.\n+ `CullFace`: If enabled, cull polygons based on their winding in window coordinates.\n+ `DepthTest`: If enabled, do depth comparisons and update the depth buffer.\n+ `Dither`: If enabled, dither color components.\nor indices before they are written to the color buffer.\n+ `PolygonOffsetFill`: If enabled, an offset is added\nto depth values of a polygon's fragments produced by rasterization.\n+ `SampleAlphaToCoverage`: If enabled, compute a temporary coverage value\nwhere each bit is determined by the alpha value at the corresponding sample location.\nThe temporary coverage value is then ANDed with the fragment coverage value.\n+ `SampleCoverage`: If enabled, the fragment's coverage\nis ANDed with the temporary coverage value.\n+ `ScissorTest`: If enabled, discard fragments that are outside the scissor rectangle\n+ `StencilTest`: If enabled, do stencil testing and update the stencil buffer.\n",
            "args": [],
            "cases": [
              [
                "Blend",
                []
              ],
              [
                "CullFace",
                []
              ],
              [
                "DepthTest",
                []
              ],
              [
                "Dither",
                []
              ],
              [
                "PolygonOffsetFill",
                []
              ],
              [
                "SampleAlphaToCoverage",
                []
              ],
              [
                "SampleCoverage",
                []
              ],
              [
                "ScissorTest",
                []
              ],
              [
                "StencilTest",
                []
              ]
            ]
          },
          {
            "name": "CompareMode",
            "comment": " The `CompareMode` type allows you to define how to compare values.\n",
            "args": [],
            "cases": [
              [
                "Never",
                []
              ],
              [
                "Always",
                []
              ],
              [
                "Less",
                []
              ],
              [
                "LessOrEqual",
                []
              ],
              [
                "Equal",
                []
              ],
              [
                "GreaterOrEqual",
                []
              ],
              [
                "Greater",
                []
              ],
              [
                "NotEqual",
                []
              ]
            ]
          },
          {
            "name": "Drawable",
            "comment": " \nWebGl has a number of rendering modes available. Each of the tagged union types \nmaps to a separate rendering mode. \n\nTriangles are the basic building blocks of a mesh. You can put them together\nto form any shape. Each corner of a triangle is called a *vertex* and contains a\nbunch of *attributes* that describe that particular corner. These attributes can\nbe things like position and color.\n\nSo when you create a `Triangle` you are really providing three sets of attributes\nthat describe the corners of a triangle.\n\nSee: [Library reference](https://msdn.microsoft.com/en-us/library/dn302395(v=vs.85).aspx) for the description of each type. \n",
            "args": [
              "attributes"
            ],
            "cases": [
              [
                "Triangle",
                [
                  "List ( attributes, attributes, attributes )"
                ]
              ],
              [
                "Lines",
                [
                  "List ( attributes, attributes )"
                ]
              ],
              [
                "LineStrip",
                [
                  "List attributes"
                ]
              ],
              [
                "LineLoop",
                [
                  "List attributes"
                ]
              ],
              [
                "Points",
                [
                  "List attributes"
                ]
              ],
              [
                "TriangleFan",
                [
                  "List attributes"
                ]
              ],
              [
                "TriangleStrip",
                [
                  "List attributes"
                ]
              ]
            ]
          },
          {
            "name": "Error",
            "comment": " An error which occured in the graphics ocntext ",
            "args": [],
            "cases": [
              [
                "Error",
                []
              ]
            ]
          },
          {
            "name": "FaceMode",
            "comment": " The `FaceMode` type defines which face of the stencil state is updated.\n",
            "args": [],
            "cases": [
              [
                "Front",
                []
              ],
              [
                "Back",
                []
              ],
              [
                "FrontAndBack",
                []
              ]
            ]
          },
          {
            "name": "FunctionCall",
            "comment": " The `FunctionCall` provides a typesafe way to call\nall pre-fragment operations and some special functions.\n\n`Enable(capability: Capability)`\n+ enable server-side GL capabilities\n\n`Disable(cap: Capability)`\n+ disable server-side GL capabilities\n\n`BlendColor(red: Float, green: Float, blue: Float, alpha: Float)`\n+ set the blend color\n\n`BlendEquation(mode: BlendMode)`\n+ specify the equation used for both the\nRGB blend equation and the Alpha blend equation\n+ `mode`: specifies how source and destination colors are combined\n\n`BlendEquationSeparate(modeRGB: BlendMode, modeAlpha: BlendMode)`\n+ set the RGB blend equation and the alpha blend equation separately\n+ `modeRGB`: specifies the RGB blend equation, how the red, green,\nand blue components of the source and destination colors are combined\n+ `modeAlpha`: specifies the alpha blend equation, how the alpha component\nof the source and destination colors are combined\n\n`BlendFunc(srcFactor: BlendMode, dstFactor: BlendMode)`\n+ specify pixel arithmetic\n+ `srcFactor`: Specifies how the red, green, blue,\nand alpha source blending factors are computed\n+ `dstFactor`: Specifies how the red, green, blue,\nand alpha destination blending factors are computed\n+ `SrcAlphaSaturate` should only be used for the srcFactor);\n+ Both values may not reference a `ConstantColor` value;\n\n`SampleCoverageFunc(value: Float, invert: Bool)`\n+ specify multisample coverage parameters\n+ `value`: Specify a single floating-point sample coverage value.\nThe value is clamped to the range 0 1 . The initial value is `1`\n+ `invert`: Specify a single boolean value representing\nif the coverage masks should be inverted. The initial value is `False`\n\n`StencilFunc(func: CompareMode, ref: Int, mask: Int)`\n+ set front and back function and reference value for stencil testing\n+ `func`: Specifies the test function.  The initial value is `Always`\n+ `ref`: Specifies the reference value for the stencil test. ref is\nclamped to the range 0 2 n - 1 , where n is the number of bitplanes\nin the stencil buffer. The initial value is `0`.\n+ `mask`: Specifies a mask that is ANDed with both the reference value\nand the stored stencil value when the test is done.\nThe initial value is all `1`'s.\n\n`StencilFuncSeparate(face: FaceMode, func: CompareMode, ref: Int, mask: Int)`\n+ set front and/or back function and reference value for stencil testing\n+ `face`: Specifies whether front and/or back stencil state is updated\n+ see the description of `StencilFunc` for info about the other parameters\n\n`StencilOperation(fail: ZMode, zfail: ZMode, pass: ZMode)`\n+ set front and back stencil test actions\n+ `fail`: Specifies the action to take when the stencil test fails.\nThe initial value is `Keep`\n+ `zfail`: Specifies the stencil action when the stencil test passes,\nbut the depth test fails. The initial value is `Keep`\n+ `pass`: Specifies the stencil action when both the stencil test\nand the depth test pass, or when the stencil test passes and either\nthere is no depth buffer or depth testing is not enabled.\nThe initial value is `Keep`\n\n`StencilOperationSeparate(face: FaceMode, fail: ZMode, zfail: ZMode, pass: Zmode)`\n+ set front and/or back stencil test actions\n+ `face`: Specifies whether front and/or back stencil state is updated.\n+ See the description of `StencilOperation` for info about the other parameters.\n",
            "args": [],
            "cases": [
              [
                "Enable",
                [
                  "WebGL.Capability"
                ]
              ],
              [
                "Disable",
                [
                  "WebGL.Capability"
                ]
              ],
              [
                "BlendColor",
                [
                  "( Float, Float, Float, Float )"
                ]
              ],
              [
                "BlendEquation",
                [
                  "WebGL.BlendMode"
                ]
              ],
              [
                "BlendEquationSeparate",
                [
                  "( WebGL.BlendMode, WebGL.BlendMode )"
                ]
              ],
              [
                "BlendFunc",
                [
                  "( WebGL.BlendOperation, WebGL.BlendOperation )"
                ]
              ],
              [
                "DepthFunc",
                [
                  "WebGL.CompareMode"
                ]
              ],
              [
                "SampleCoverageFunc",
                [
                  "( Float, Bool )"
                ]
              ],
              [
                "StencilFunc",
                [
                  "( WebGL.CompareMode, Int, Int )"
                ]
              ],
              [
                "StencilFuncSeparate",
                [
                  "( WebGL.FaceMode, WebGL.CompareMode, Int, Int )"
                ]
              ],
              [
                "StencilOperation",
                [
                  "( WebGL.ZMode, WebGL.ZMode, WebGL.ZMode )"
                ]
              ],
              [
                "StencilOperationSeparate",
                [
                  "( WebGL.FaceMode, WebGL.ZMode, WebGL.ZMode, WebGL.ZMode )"
                ]
              ]
            ]
          },
          {
            "name": "Renderable",
            "comment": " Conceptually, an encapsulataion of the instructions to render something ",
            "args": [],
            "cases": [
              [
                "Renderable",
                []
              ]
            ]
          },
          {
            "name": "Shader",
            "comment": " Shader is a phantom data type. Don't instantiate it yourself. See below.\n",
            "args": [
              "attributes",
              "uniforms",
              "varyings"
            ],
            "cases": [
              [
                "Shader",
                []
              ]
            ]
          },
          {
            "name": "Texture",
            "comment": " A `Texture` loads a texture with linear filtering enabled. If you do not\nwant filtering, create a `RawTexture` with `loadTextureRaw`.\n",
            "args": [],
            "cases": [
              [
                "Texture",
                []
              ]
            ]
          },
          {
            "name": "TextureFilter",
            "comment": " Textures work in two ways when looking up a pixel value - Linear or Nearest \n",
            "args": [],
            "cases": [
              [
                "Linear",
                []
              ],
              [
                "Nearest",
                []
              ]
            ]
          },
          {
            "name": "ZMode",
            "comment": " The `ZMode` type allows you to define what to do with the stencil buffer value.\n\n+ `Keep`: Keeps the current value.\n+ `None`: Sets the stencil buffer value to 0.\n+ `Replace`: Sets the stencil buffer value to `ref`,\nSee `StencilFunc` for more information.\n+ `Increment`: Increments the current stencil buffer value.\nClamps to the maximum representable unsigned value.\n+ `Decrement`: Decrements the current stencil buffer value. Clamps to 0.\n+ `Invert`: Bitwise inverts the current stencil buffer value.\n+ `IncrementWrap`: Increments the current stencil buffer value.\nWraps stencil buffer value to zero when incrementing\nthe maximum representable unsigned value.\n+ `DecrementWrap`: Decrements the current stencil buffer value.\nWraps stencil buffer value to the maximum representable unsigned\nvalue when decrementing a stencil buffer value of zero.\n",
            "args": [],
            "cases": [
              [
                "Keep",
                []
              ],
              [
                "None",
                []
              ],
              [
                "Replace",
                []
              ],
              [
                "Increment",
                []
              ],
              [
                "Decrement",
                []
              ],
              [
                "Invert",
                []
              ],
              [
                "IncrementWrap",
                []
              ],
              [
                "DecrementWrap",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "computeAPICall",
            "comment": " ",
            "type": "WebGL.FunctionCall -> a -> b"
          },
          {
            "name": "computeAPICalls",
            "comment": " ",
            "type": "List WebGL.FunctionCall -> List (a -> b)"
          },
          {
            "name": "computeBlendModeString",
            "comment": " ",
            "type": "WebGL.BlendMode -> String"
          },
          {
            "name": "computeBlendOperationString",
            "comment": " ",
            "type": "WebGL.BlendOperation -> String"
          },
          {
            "name": "computeCapabilityString",
            "comment": " ",
            "type": "WebGL.Capability -> String"
          },
          {
            "name": "computeCompareModeString",
            "comment": " ",
            "type": "WebGL.CompareMode -> String"
          },
          {
            "name": "computeFaceModeString",
            "comment": " ",
            "type": "WebGL.FaceMode -> String"
          },
          {
            "name": "computeZModeString",
            "comment": " ",
            "type": "WebGL.ZMode -> String"
          },
          {
            "name": "defaultConfiguration",
            "comment": " Default configuration that is used as\nthe implicit configurations for `webgl`.\n",
            "type": "List WebGL.FunctionCall"
          },
          {
            "name": "loadTexture",
            "comment": " Loads a texture from the given url. PNG and JPEG are known to work, but\nother formats have not been as well-tested yet.\n",
            "type": "String -> Task.Task WebGL.Error WebGL.Texture"
          },
          {
            "name": "loadTextureWithFilter",
            "comment": " Loads a texture from the given url. PNG and JPEG are known to work, but\nother formats have not been as well-tested yet. Configurable filter.\n",
            "type": "WebGL.TextureFilter -> String -> Task.Task WebGL.Error WebGL.Texture"
          },
          {
            "name": "render",
            "comment": " Same as `renderWithConfig` but without using\ncustom per-render configurations.\n",
            "type": "WebGL.Shader attributes uniforms varyings -> WebGL.Shader {} uniforms varyings -> WebGL.Drawable attributes -> uniforms -> WebGL.Renderable"
          },
          {
            "name": "renderWithConfig",
            "comment": " Packages a vertex shader, a fragment shader, a mesh, and uniform variables\nas an `Renderable`. This specifies a full rendering pipeline to be run on the GPU.\nYou can read more about the pipeline\n[here](https://github.com/johnpmayer/elm-webgl/blob/master/README.md).\n\nValues will be cached intelligently, so if you have already sent a shader or\nmesh to the GPU, it will not be resent. This means it is fairly cheap to create\nnew entities if you are reusing shaders and meshes that have been used before.\n",
            "type": "List WebGL.FunctionCall -> WebGL.Shader attributes uniforms varyings -> WebGL.Shader {} uniforms varyings -> WebGL.Drawable attributes -> uniforms -> WebGL.Renderable"
          },
          {
            "name": "textureSize",
            "comment": " Return the (width, height) size of a texture. Useful for sprite sheets\nor other times you may want to use only a potion of a texture image.\n",
            "type": "WebGL.Texture -> ( Int, Int )"
          },
          {
            "name": "unsafeShader",
            "comment": " Shaders are programs for running many computations on the GPU in parallel.\nThey are written in a language called\n[GLSL](http://en.wikipedia.org/wiki/OpenGL_Shading_Language). Read more about\nshaders [here](https://github.com/johnpmayer/elm-webgl/blob/master/README.md).\n\nNormally you specify a shader with a `shader` block. This is because shaders\nmust be compiled before they are used, imposing an overhead that it is best to\navoid in general. This function lets you create a shader with a raw string of\nGLSL. It is intended specifically for libary writers who want to create shader\ncombinators.\n",
            "type": "String -> WebGL.Shader attribute uniform varying"
          },
          {
            "name": "webgl",
            "comment": " Same as webglWithConfig but with default configurations,\nimplicitly configured for you. See `defaultConfiguration` for more information.\n",
            "type": "( Int, Int ) -> List WebGL.Renderable -> Graphics.Element.Element"
          },
          {
            "name": "webglWithConfig",
            "comment": " Render a WebGL scene with the given dimensions and entities. Shaders and\nmeshes are cached so that they do not get resent to the GPU, so it should be\nrelatively cheap to create new entities out of existing values.\n",
            "type": "List WebGL.FunctionCall -> ( Int, Int ) -> List WebGL.Renderable -> Graphics.Element.Element"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "elm-lang/core",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Date",
        "comment": " Library for working with dates. Email the mailing list if you encounter\nissues with internationalization or locale formatting.\n\n# Dates\n@docs Date\n\n# Conversions\n@docs fromString, toTime, fromTime\n\n# Extractions\n@docs year, month, Month, day, dayOfWeek, Day, hour, minute, second, millisecond\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Date",
            "comment": " Representation of a date.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Day",
            "comment": " Represents the days of the week.\n",
            "args": [],
            "cases": [
              [
                "Mon",
                []
              ],
              [
                "Tue",
                []
              ],
              [
                "Wed",
                []
              ],
              [
                "Thu",
                []
              ],
              [
                "Fri",
                []
              ],
              [
                "Sat",
                []
              ],
              [
                "Sun",
                []
              ]
            ]
          },
          {
            "name": "Month",
            "comment": " Represents the month of the year.\n",
            "args": [],
            "cases": [
              [
                "Jan",
                []
              ],
              [
                "Feb",
                []
              ],
              [
                "Mar",
                []
              ],
              [
                "Apr",
                []
              ],
              [
                "May",
                []
              ],
              [
                "Jun",
                []
              ],
              [
                "Jul",
                []
              ],
              [
                "Aug",
                []
              ],
              [
                "Sep",
                []
              ],
              [
                "Oct",
                []
              ],
              [
                "Nov",
                []
              ],
              [
                "Dec",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "day",
            "comment": " Extract the day of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `23`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "dayOfWeek",
            "comment": " Extract the day of the week for a given date. Given the date 23 June\n1990 at 11:45AM this returns the Day `Thu` as defined below.\n",
            "type": "Date.Date -> Date.Day"
          },
          {
            "name": "fromString",
            "comment": " Attempt to read a date from a string.\n",
            "type": "String -> Result.Result String Date.Date"
          },
          {
            "name": "fromTime",
            "comment": " Take a UNIX time and convert it to a `Date`.\n",
            "type": "Time.Time -> Date.Date"
          },
          {
            "name": "hour",
            "comment": " Extract the hour of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `11`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "millisecond",
            "comment": " Extract the millisecond of a given date. Given the date 23 June 1990 at 11:45:30.123AM\nthis returns the integer `123`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "minute",
            "comment": " Extract the minute of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `45`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "month",
            "comment": " Extract the month of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the Month `Jun` as defined below.\n",
            "type": "Date.Date -> Date.Month"
          },
          {
            "name": "second",
            "comment": " Extract the second of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `0`.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "toTime",
            "comment": " Convert a date into a time since midnight (UTC) of 1 January 1970 (i.e.\n[UNIX time](http://en.wikipedia.org/wiki/Unix_time)). Given the date 23 June\n1990 at 11:45AM this returns the corresponding time.\n",
            "type": "Date.Date -> Time.Time"
          },
          {
            "name": "year",
            "comment": " Extract the year of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `1990`.\n",
            "type": "Date.Date -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Touch",
        "comment": " This is an early version of the touch library. It will likely grow to\ninclude gestures that would be useful for both games and web-pages.\n\n# Touches\n@docs Touch, touches\n\n# Gestures\n@docs taps\n",
        "aliases": [
          {
            "name": "Touch",
            "comment": " Every `Touch` has `xy` coordinates. It also has an identifier\n`id` to distinguish one touch from another.\n\nA touch also keeps info about the initial point and time of contact:\n`x0`, `y0`, and `t0`. This helps compute more complicated gestures\nlike taps, drags, and swipes which need to know about timing or direction.\n",
            "args": [],
            "type": "{ x : Int, y : Int, id : Int, x0 : Int, y0 : Int, t0 : Time.Time }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "taps",
            "comment": " The last position that was tapped. Default value is `{x=0,y=0}`.\nUpdates whenever the user taps the screen.\n",
            "type": "Signal.Signal { x : Int, y : Int }"
          },
          {
            "name": "touches",
            "comment": " A list of ongoing touches. ",
            "type": "Signal.Signal (List Touch.Touch)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Graphics.Input",
        "comment": " This module is for creating input widgets such as buttons and text fields.\nAll functions in this library report to a [`Signal.Mailbox`](Signal#message).\n\n# Basic Input Elements\n\nTo learn about text fields, see the\n[`Graphics.Input.Field`](Graphics-Input-Field) library.\n\n@docs button, customButton, checkbox, dropDown\n\n# Clicks and Hovers\n@docs clickable, hoverable\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "button",
            "comment": " Create a standard button. The following example begins making a basic\ncalculator:\n\n    type Keys = Number Int | Plus | Minus | Clear\n\n    keys : Signal.Mailbox Keys\n    keys = Signal.mailbox Clear\n\n    calculator : Element\n    calculator =\n        flow right\n          [ button (Signal.message keys.address (Number 1)) \"1\"\n          , button (Signal.message keys.address (Number 2)) \"2\"\n          , button (Signal.message keys.address    Plus   ) \"+\"\n          ]\n\nIf the user presses the \"+\" button, `keys.signal` will update to `Plus`. If the\nusers presses \"2\", `keys.signal` will update to `(Number 2)`.\n",
            "type": "Signal.Message -> String -> Graphics.Element.Element"
          },
          {
            "name": "checkbox",
            "comment": " Create a checkbox. The following example creates three synced checkboxes:\n\n    check : Signal.Mailbox Bool\n    check = Signal.mailbox False\n\n    boxes : Bool -> Element\n    boxes checked =\n        let box = container 40 40 middle (checkbox (Signal.message check.address) checked)\n        in\n            flow right [ box, box, box ]\n\n    main : Signal Element\n    main = Signal.map boxes check.signal\n",
            "type": "(Bool -> Signal.Message) -> Bool -> Graphics.Element.Element"
          },
          {
            "name": "clickable",
            "comment": " Detect mouse clicks on a specific `Element`. In the following example,\nwe will create a clickable picture called `cat`.\n\n    type Picture = Cat | Hat\n\n    picture : Signal.Mailbox Picture\n    picture = Signal.mailbox Cat\n\n    cat : Element\n    cat =\n      image 30 30 \"/cat.jpg\"\n        |> clickable (Signal.message picture.address Cat)\n\n    hat : Element\n    hat =\n      image 30 30 \"/hat.jpg\"\n        |> clickable (Signal.message picture.address Hat)\n\nWhen the user clicks on the `cat` element, `picture.signal` receives\nan update containing the value `Cat`. When the user clicks on the `hat` element,\n`picture.signal` receives an update containing the value `Hat`. This lets you\ndistinguish which element was clicked. In a more complex example, they could be\ndistinguished with IDs or more complex data structures.\n",
            "type": "Signal.Message -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "customButton",
            "comment": " Same as `button` but lets you customize buttons to look however you want.\n\n    click : Signal.Mailbox ()\n    click = Signal.mailbox ()\n\n    prettyButton : Element\n    prettyButton =\n        customButton (Signal.message click.address ())\n            (image 100 40 \"/button_up.jpg\")\n            (image 100 40 \"/button_hover.jpg\")\n            (image 100 40 \"/button_down.jpg\")\n",
            "type": "Signal.Message -> Graphics.Element.Element -> Graphics.Element.Element -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "dropDown",
            "comment": " Create a drop-down menu.  The following drop-down lets you choose your\nfavorite British sport:\n\n    type Sport = Football | Cricket | Snooker\n\n    sport : Signal.Mailbox (Maybe Sport)\n    sport = Signal.mailbox Nothing\n\n    sportDropDown : Element\n    sportDropDown =\n        dropDown (Signal.message sport.address)\n          [ (\"\"        , Nothing)\n          , (\"Football\", Just Football)\n          , (\"Cricket\" , Just Cricket)\n          , (\"Snooker\" , Just Snooker)\n          ]\n\nIf the user selects \"Football\" from the drop down menu, `sport.signal`\nwill update to `Just Football`.\n",
            "type": "(a -> Signal.Message) -> List ( String, a ) -> Graphics.Element.Element"
          },
          {
            "name": "hoverable",
            "comment": " Detect mouse hovers over a specific `Element`. In the following example,\nwe will create a hoverable picture called `cat`.\n\n    hover : Signal.Mailbox Bool\n    hover = Signal.mailbox False\n\n    cat : Element\n    cat =\n      image 30 30 \"/cat.jpg\"\n        |> hoverable (Signal.message hover.address)\n\nWhen the mouse hovers above the `cat` element, `hover.signal` will become\n`True`. When the mouse leaves it, `hover.signal` will become `False`.\n",
            "type": "(Bool -> Signal.Message) -> Graphics.Element.Element -> Graphics.Element.Element"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Graphics.Input.Field",
        "comment": " This library provides an API for creating and updating text fields.\nText fields use exactly the same approach as [`Graphics.Input`](Graphics-Input)\nfor modelling user input, allowing you to keep track of new events and update\ntext fields programmatically.\n\n# Create Fields\n@docs field, password, email\n\n# Field Content\n@docs Content, Selection, Direction, noContent\n\n# Field Style\n@docs defaultStyle, Style, Outline, noOutline, Highlight, noHighlight, Dimensions, uniformly\n",
        "aliases": [
          {
            "name": "Content",
            "comment": " Represents the current content of a text field. For example:\n\n    content = Content \"She sells sea shells\" (Selection 0 3 Backward)\n\nThis means the user highlighted the substring `\"She\"` backwards. The value of\n`content.string` is `\"She sells sea shells\"`.\n",
            "args": [],
            "type": "{ string : String, selection : Graphics.Input.Field.Selection }"
          },
          {
            "name": "Dimensions",
            "comment": " For setting dimensions of a field's padding or outline. The left, right,\ntop, and bottom may all have different sizes. The following example creates\ndimensions such that the left and right are twice as wide as the top and bottom:\n\n    myDimensions : Int -> Dimensions\n    myDimensions n =\n        { left = 2 * n\n        , right = 2 * n\n        , top = n\n        , bottom = n\n        }\n",
            "args": [],
            "type": "{ left : Int, right : Int, top : Int, bottom : Int }"
          },
          {
            "name": "Highlight",
            "comment": " When a field has focus, it has a blue highlight around it by default. The\n`Highlight` lets you set the `color` and `width` of this highlight. Set the\n`width` to zero to turn the highlight off. Here is an example highlight that\nis blue and thin:\n\n    { color = blue, width = 1 }\n",
            "args": [],
            "type": "{ color : Color.Color, width : Int }"
          },
          {
            "name": "Outline",
            "comment": " A field can have a outline around it. This lets you set its color, width,\nand radius. The radius allows you to round the corners of your field. Set the\nwidth to zero to make it invisible. Here is an example outline that is grey\nand thin with slightly rounded corners:\n\n    { color = grey, width = uniformly 1, radius = 4 }\n",
            "args": [],
            "type": "{ color : Color.Color , width : Graphics.Input.Field.Dimensions , radius : Int }"
          },
          {
            "name": "Selection",
            "comment": " The selection within a text field. `start` is never greater than `end`:\n\n    Selection 0 0 Forward  -- cursor precedes all characters\n\n    Selection 5 9 Backward -- highlighting characters starting after\n                           -- the 5th and ending after the 9th\n",
            "args": [],
            "type": "{ start : Int , end : Int , direction : Graphics.Input.Field.Direction }"
          },
          {
            "name": "Style",
            "comment": " Describe the style of a text box. `style` describes the style of the text\nitself using [`Text.Style`](Text#Style). `highlight` describes the glowing blue\nhighlight that shows up when the field has focus. `outline` describes the line\nsurrounding the text field, and `padding` adds whitespace between the `outline`\nand the text.\n\nThe width and height of the text box *includes* the `padding` and `outline`.\nSay we have a text box that is 40 pixels tall. It has a uniform outline of\n1 pixel and a uniform padding of 5 pixels. Both of these must be subtracted\nfrom the total height to determine how much room there is for text. The\n`padding` and `outline` appear on the top and bottom, so there will be 28\nvertical pixels remaining for the text (40 - 1 - 5 - 5 - 1).\n",
            "args": [],
            "type": "{ padding : Graphics.Input.Field.Dimensions , outline : Graphics.Input.Field.Outline , highlight : Graphics.Input.Field.Highlight , style : Text.Style }"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " The direction of selection. When the user highlights a selection in a text\nfield, they must do it in a particular direction. This determines which end of\nthe selection moves when they change the selection by pressing Shift-Left or\nShift-Right.\n",
            "args": [],
            "cases": [
              [
                "Forward",
                []
              ],
              [
                "Backward",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultStyle",
            "comment": " The default style for a text field. The outline is `Color.grey` with width\n1 and radius 2. The highlight is `Color.blue` with width 1, and the default\ntext color is black.\n",
            "type": "Graphics.Input.Field.Style"
          },
          {
            "name": "email",
            "comment": " Same as `field` but it adds an annotation that this field is for email\naddresses. This is helpful for auto-complete and for mobile users who may\nget a custom keyboard with an `@` and `.com` button.\n",
            "type": "Graphics.Input.Field.Style -> (Graphics.Input.Field.Content -> Signal.Message) -> String -> Graphics.Input.Field.Content -> Graphics.Element.Element"
          },
          {
            "name": "field",
            "comment": " Create a text field. The following example creates a time-varying element\ncalled `nameField`. As the user types their name, the field will be updated\nto match what they have entered.\n\n    name : Signal.Mailbox Content\n    name = Signal.mailbox noContent\n\n    nameField : Signal Element\n    nameField =\n        Signal.map (field defaultStyle (Signal.message name.address) \"Name\") name.signal\n\nWhen we use the `field` function, we first give it a visual style. This is\nthe first argument so that it is easier to define your own custom field\n(`myField = field myStyle`). The next two arguments are a `Handle` and a\nhandler function that processes or augments events before sending them along\nto the associated `Input`. In the example above we use the `identity` function to\npass events along unchanged to the `name` `Input`. We then provide the\nplace-holder message to use when no input has been provided yet. Finally,\nwe give the current `Content` of the field. This argument is last because\nit is most likely to change frequently, making function composition easier.\n",
            "type": "Graphics.Input.Field.Style -> (Graphics.Input.Field.Content -> Signal.Message) -> String -> Graphics.Input.Field.Content -> Graphics.Element.Element"
          },
          {
            "name": "noContent",
            "comment": " A field with no content:\n\n    Content \"\" (Selection 0 0 Forward)\n",
            "type": "Graphics.Input.Field.Content"
          },
          {
            "name": "noHighlight",
            "comment": " A highlight with zero width, so you cannot see it. ",
            "type": "Graphics.Input.Field.Highlight"
          },
          {
            "name": "noOutline",
            "comment": " An outline with zero width, so you cannot see it. ",
            "type": "Graphics.Input.Field.Outline"
          },
          {
            "name": "password",
            "comment": " Same as `field` but the UI element blocks out each characters. ",
            "type": "Graphics.Input.Field.Style -> (Graphics.Input.Field.Content -> Signal.Message) -> String -> Graphics.Input.Field.Content -> Graphics.Element.Element"
          },
          {
            "name": "uniformly",
            "comment": " Create uniform dimensions:\n\n    uniformly 4 == { left=4, right=4, top=4, bottom=4 }\n\nThe following example creates an outline where the left, right, top, and bottom\nedges all have width 1:\n\n    Outline grey (uniformly 1) 4\n",
            "type": "Int -> Graphics.Input.Field.Dimensions"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Window",
        "comment": " Provides information about the container that your Elm program lives in.\nWhen you embed Elm in a `<div>` it gives the dimensions of the container, not\nthe whole window.\n\n# Dimensions\n@docs dimensions, width, height\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dimensions",
            "comment": " The current width and height of the window (i.e. the area viewable to the\nuser, not including scroll bars). ",
            "type": "Signal.Signal ( Int, Int )"
          },
          {
            "name": "height",
            "comment": " The current height of the window. ",
            "type": "Signal.Signal Int"
          },
          {
            "name": "width",
            "comment": " The current width of the window. ",
            "type": "Signal.Signal Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Time",
        "comment": " Library for working with time.\n\n# Units\n@docs Time, millisecond, second, minute, hour,\n      inMilliseconds, inSeconds, inMinutes, inHours\n\n# Tickers\n@docs fps, fpsWhen, every\n\n# Timing\n@docs timestamp, delay, since\n",
        "aliases": [
          {
            "name": "Time",
            "comment": " Type alias to make it clearer when you are working with time values.\nUsing the `Time` constants instead of raw numbers is very highly recommended.\n",
            "args": [],
            "type": "Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "delay",
            "comment": " Delay a signal by a certain amount of time. So `(delay second Mouse.clicks)`\nwill update one second later than any mouse click.\n\nNote: Even calling `delay` with the same number on the same signal twice\ngives two independently firing signals.\n",
            "type": "Time.Time -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "every",
            "comment": " Takes a time interval `t`. The resulting signal is the current time, updated\nevery `t`.\n\nNote: Calling `every 100` twice gives two independently running timers.\n",
            "type": "Time.Time -> Signal.Signal Time.Time"
          },
          {
            "name": "fps",
            "comment": " Takes desired number of frames per second (FPS). The resulting signal\ngives a sequence of time deltas as quickly as possible until it reaches\nthe desired FPS. A time delta is the time between the last frame and the\ncurrent frame.\n\nNote: Calling `fps 30` twice gives two independently running timers.\n",
            "type": "number -> Signal.Signal Time.Time"
          },
          {
            "name": "fpsWhen",
            "comment": " Same as the `fps` function, but you can turn it on and off. Allows you\nto do brief animations based on user input without major inefficiencies.\nThe first time delta after a pause is always zero, no matter how long\nthe pause was. This way summing the deltas will actually give the amount\nof time that the output signal has been running.\n",
            "type": "number -> Signal.Signal Bool -> Signal.Signal Time.Time"
          },
          {
            "name": "hour",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "inHours",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inMilliseconds",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inMinutes",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "inSeconds",
            "comment": "",
            "type": "Time.Time -> Float"
          },
          {
            "name": "millisecond",
            "comment": " Units of time, making it easier to specify things like a half-second\n`(500 * millisecond)` without remembering Elm&rsquo;s underlying units of time.\n",
            "type": "Time.Time"
          },
          {
            "name": "minute",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "second",
            "comment": "",
            "type": "Time.Time"
          },
          {
            "name": "since",
            "comment": " Takes a time `t` and any signal. The resulting boolean signal is true for\ntime `t` after every event on the input signal. So ``(second `since`\nMouse.clicks)`` would result in a signal that is true for one second after\neach mouse click and false otherwise.\n",
            "type": "Time.Time -> Signal.Signal a -> Signal.Signal Bool"
          },
          {
            "name": "timestamp",
            "comment": " Add a timestamp to any signal. Timestamps increase monotonically. When you\ncreate `(timestamp Mouse.x)`, an initial timestamp is produced. The timestamp\nupdates whenever `Mouse.x` updates.\n\nTimestamp updates are tied to individual events, so `(timestamp Mouse.x)` and\n`(timestamp Mouse.y)` will always have the same timestamp because they rely on\nthe same underlying event (`Mouse.position`).\n",
            "type": "Signal.Signal a -> Signal.Signal ( Time.Time, a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Keyboard",
        "comment": " Library for working with keyboard input.\n\n# Directions\n@docs arrows, wasd\n\n# Specific Keys\nThe following signals are `True` when the particular key is pressed and `False`\notherwise.\n\n@docs enter, space, ctrl, shift, alt, meta\n\n# General Keypresses\n@docs isDown, keysDown, presses\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "alt",
            "comment": "",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "arrows",
            "comment": " A signal of records indicating which arrow keys are pressed.\n\n  * `{ x = 0, y = 0 }` when pressing no arrows.\n  * `{ x =-1, y = 0 }` when pressing the left arrow.\n  * `{ x = 1, y = 1 }` when pressing the up and right arrows.\n  * `{ x = 0, y =-1 }` when pressing the down, left, and right arrows.\n",
            "type": "Signal.Signal { x : Int, y : Int }"
          },
          {
            "name": "ctrl",
            "comment": "",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "enter",
            "comment": "",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "isDown",
            "comment": " Whether an arbitrary key is pressed. ",
            "type": "Char.KeyCode -> Signal.Signal Bool"
          },
          {
            "name": "keysDown",
            "comment": " Set of keys that are currently down. ",
            "type": "Signal.Signal (Set.Set Char.KeyCode)"
          },
          {
            "name": "meta",
            "comment": " The meta key is the Windows key on Windows and the Command key on Mac.\n",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "presses",
            "comment": " The latest key that has been pressed. ",
            "type": "Signal.Signal Char.KeyCode"
          },
          {
            "name": "shift",
            "comment": "",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "space",
            "comment": "",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "wasd",
            "comment": " Just like the arrows signal, but this uses keys w, a, s, and d,\nwhich are common controls for many computer games.\n",
            "type": "Signal.Signal { x : Int, y : Int }"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Mouse",
        "comment": " Library for working with mouse input.\n\n# Position\n@docs position, x, y\n\n# Button Status\n@docs isDown, clicks\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "clicks",
            "comment": " Always equal to unit. Event triggers on every mouse click. ",
            "type": "Signal.Signal ()"
          },
          {
            "name": "isDown",
            "comment": " The current state of the mouse\nTrue when any mouse button is down, and false otherwise. ",
            "type": "Signal.Signal Bool"
          },
          {
            "name": "position",
            "comment": " The current mouse position. ",
            "type": "Signal.Signal ( Int, Int )"
          },
          {
            "name": "x",
            "comment": " The current x-coordinate of the mouse. ",
            "type": "Signal.Signal Int"
          },
          {
            "name": "y",
            "comment": " The current y-coordinate of the mouse. ",
            "type": "Signal.Signal Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Signal",
        "comment": " A *signal* is a value that changes over time. For example, we can\nthink of the mouse position as a pair of numbers that is changing over time,\nwhenever the user moves the mouse.\n\n    Mouse.position : Signal (Int,Int)\n\nAnother signal is the `Element` or `Html` we want to show on screen.\n\n    main : Signal Html\n\nAs the `Html` changes, the user sees different things on screen automatically.\n\nSome useful functions for working with time (e.g. setting FPS) and combining\nsignals and time (e.g. timestamps) can be found in the [`Time`](Time) library.\n\n# Signals\n@docs Signal\n\n# Merging\n@docs merge, mergeMany\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Past-Dependence\n@docs foldp\n\n# Filters\n@docs filter, filterMap, dropRepeats, sampleOn\n\n# Mailboxes\n@docs Mailbox, Address, mailbox, Message, message, forwardTo, send\n\n# Constants\n@docs constant\n\n",
        "aliases": [
          {
            "name": "Mailbox",
            "comment": " A `Mailbox` is a communication hub. It is made up of\n\n  * an `Address` that you can send messages to\n  * a `Signal` of messages sent to the mailbox\n",
            "args": [
              "a"
            ],
            "type": "{ address : Signal.Address a, signal : Signal.Signal a }"
          }
        ],
        "types": [
          {
            "name": "Address",
            "comment": " An `Address` points to a specific signal. It allows you to feed values into\nsignals, so you can provide your own signal updates.\n\nThe primary use case is when a `Task` or UI element needs to talk back to the\nmain part of your application.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Message",
            "comment": " A `Message` is like an envelope that you have not yet put in a mailbox.\nThe address is filled out and the envelope is filled, but it will be sent at\nsome point in the future.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Signal",
            "comment": " A value that changes over time. So a `(Signal Int))` is an integer that is\nvarying as time passes, perhaps representing the current window width of the\nbrowser. Every signal is updated at discrete moments in response to events in\nthe world.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "constant",
            "comment": " Create a signal that never changes. This can be useful if you need\nto pass a combination of signals and normal values to a function:\n\n    map3 view Window.dimensions Mouse.position (constant initialModel)\n",
            "type": "a -> Signal.Signal a"
          },
          {
            "name": "dropRepeats",
            "comment": " Drop updates that repeat the current value of the signal.\n\n    numbers : Signal Int\n\n    noDups : Signal Int\n    noDups =\n        dropRepeats numbers\n\n    --  numbers => 0 0 3 3 5 5 5 4 ...\n    --  noDups  => 0   3   5     4 ...\n\nThe signal should not be a signal of functions, or a record that contains a\nfunction (you'll get a runtime error since functions cannot be equated).\n",
            "type": "Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "filter",
            "comment": " Filter out some updates. The given function decides whether we should\n*keep* an update. If no updates ever flow through, we use the default value\nprovided. The following example only keeps even numbers and has an initial\nvalue of zero.\n\n    numbers : Signal Int\n\n    isEven : Int -> Bool\n\n    evens : Signal Int\n    evens =\n        filter isEven 0 numbers\n",
            "type": "(a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "filterMap",
            "comment": " Filter out some updates. When the filter function gives back `Just` a\nvalue, we send that value along. When it returns `Nothing` we drop it.\nIf the initial value of the incoming signal turns into `Nothing`, we use the\ndefault value provided. The following example keeps only strings that can be\nread as integers.\n\n    userInput : Signal String\n\n    toInt : String -> Maybe Int\n\n    numbers : Signal Int\n    numbers =\n        filterMap toInt 0 userInput\n",
            "type": "(a -> Maybe.Maybe b) -> b -> Signal.Signal a -> Signal.Signal b"
          },
          {
            "name": "foldp",
            "comment": " Create a past-dependent signal. Each update from the incoming signals will\nbe used to step the state forward. The outgoing signal represents the current\nstate.\n\n    clickCount : Signal Int\n    clickCount =\n        foldp (\\click total -> total + 1) 0 Mouse.clicks\n\n    timeSoFar : Signal Time\n    timeSoFar =\n        foldp (+) 0 (fps 40)\n\nSo `clickCount` updates on each mouse click, incrementing by one. `timeSoFar`\nis the time the program has been running, updated 40 times a second.\n",
            "type": "(a -> state -> state) -> state -> Signal.Signal a -> Signal.Signal state"
          },
          {
            "name": "forwardTo",
            "comment": " Create a new address. This address will tag each message it receives\nand then forward it along to some other address.\n\n    type Action = Undo | Remove Int | NoOp\n\n    actions : Mailbox Action\n    actions = mailbox NoOp\n\n    removeAddress : Address Int\n    removeAddress =\n        forwardTo actions.address Remove\n\nIn this case we have a general `address` that many people may send\nmessages to. The new `removeAddress` tags all messages with the `Remove` tag\nbefore forwarding them along to the more general `address`. This means\nsome parts of our application can know *only* about `removeAddress` and not\ncare what other kinds of `Actions` are possible.\n",
            "type": "Signal.Address b -> (a -> b) -> Signal.Address a"
          },
          {
            "name": "mailbox",
            "comment": " Create a mailbox you can send messages to. The primary use case is\nreceiving updates from tasks and UI elements. The argument is a default value\nfor the custom signal.\n\nNote: Creating new signals is inherently impure, so `(mailbox ())` and\n`(mailbox ())` produce two different mailboxes.\n",
            "type": "a -> Signal.Mailbox a"
          },
          {
            "name": "map",
            "comment": " Apply a function to a signal.\n\n    mouseIsUp : Signal Bool\n    mouseIsUp =\n        map not Mouse.isDown\n\n    main : Signal Element\n    main =\n        map Graphics.Element.show Mouse.position\n",
            "type": "(a -> result) -> Signal.Signal a -> Signal.Signal result"
          },
          {
            "name": "map2",
            "comment": " Apply a function to the current value of two signals. The function\nis reevaluated whenever *either* signal changes. In the following example, we\nfigure out the `aspectRatio` of the window by combining the current width and\nheight.\n\n    ratio : Int -> Int -> Float\n    ratio width height =\n        toFloat width / toFloat height\n\n    aspectRatio : Signal Float\n    aspectRatio =\n        map2 ratio Window.width Window.height\n",
            "type": "(a -> b -> result) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal c -> Signal.Signal result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal c -> Signal.Signal d -> Signal.Signal result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal c -> Signal.Signal d -> Signal.Signal e -> Signal.Signal result"
          },
          {
            "name": "merge",
            "comment": " Merge two signals into one. This function is extremely useful for bringing\ntogether lots of different signals to feed into a `foldp`.\n\n    type Update = MouseMove (Int,Int) | TimeDelta Float\n\n    updates : Signal Update\n    updates =\n        merge\n            (map MouseMove Mouse.position)\n            (map TimeDelta (fps 40))\n\nIf an update comes from either of the incoming signals, it updates the outgoing\nsignal. If an update comes on both signals at the same time, the update provided\nby the left input signal wins (i.e., the update from the second signal is discarded).\n",
            "type": "Signal.Signal a -> Signal.Signal a -> Signal.Signal a"
          },
          {
            "name": "mergeMany",
            "comment": " Merge many signals into one. This is useful when you are merging more than\ntwo signals. When multiple updates come in at the same time, the left-most\nupdate wins, just like with `merge`.\n\n    type Update = MouseMove (Int,Int) | TimeDelta Float | Click\n\n    updates : Signal Update\n    updates =\n        mergeMany\n            [ map MouseMove Mouse.position\n            , map TimeDelta (fps 40)\n            , map (always Click) Mouse.clicks\n            ]\n",
            "type": "List (Signal.Signal a) -> Signal.Signal a"
          },
          {
            "name": "message",
            "comment": " Create a message that may be sent to a `Mailbox` at a later time.\n\nMost importantly, this lets us create APIs that can send values to ports\n*without* allowing people to run arbitrary tasks.\n",
            "type": "Signal.Address a -> a -> Signal.Message"
          },
          {
            "name": "sampleOn",
            "comment": " Sample from the second input every time an event occurs on the first input.\nFor example, `(sampleOn Mouse.clicks (Time.every Time.second))` will give the\napproximate time of the latest click. ",
            "type": "Signal.Signal a -> Signal.Signal b -> Signal.Signal b"
          },
          {
            "name": "send",
            "comment": " Send a message to an `Address`.\n\n    type Action = Undo | Remove Int\n\n    address : Address Action\n\n    requestUndo : Task x ()\n    requestUndo =\n        send address Undo\n\nThe `Signal` associated with `address` will receive the `Undo` message\nand push it through the Elm program.\n",
            "type": "Signal.Address a -> a -> Task.Task x ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Debug",
        "comment": " This library is for investigating bugs or performance problems. It should\n*not* be used in production code.\n\n# Console Debugging\n@docs log, crash\n\n# Time-Travel Debugging\n@docs watch, watchSummary, trace\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "crash",
            "comment": " Crash the program with an error message. This is an uncatchable error,\nintended for code that is soon-to-be-implemented. For example, if you are\nworking with a large ADT and have partially completed a case expression, it may\nmake sense to do this:\n\n    data Entity = Ship | Fish | Captain | Seagull\n\n    drawEntity entity =\n        case entity of\n          Ship ->\n              ...\n\n          Fish ->\n              ...\n\n          _ ->\n              Debug.crash \"TODO\"\n\nThe Elm compiler recognizes each `Debug.crash` and when you run into it at\nruntime, the error will point to the corresponding module name and line number.\nFor `case` expressions that ends with a wildcard pattern and a crash, it will\nalso show the value that snuck through. In our example, that'd be `Captain` or\n`Seagull`.\n\n**Use this if** you want to do some testing while you are partway through\nwriting a function.\n\n**Do not use this if** you want to do some typical try-catch exception handling.\nUse the [`Maybe`](Maybe) or [`Result`](Result) libraries instead.\n",
            "type": "String -> a"
          },
          {
            "name": "log",
            "comment": " Log a tagged value on the developer console, and then return the value.\n\n    1 + log \"number\" 1        -- equals 2, logs \"number: 1\"\n    length (log \"start\" [])   -- equals 0, logs \"start: []\"\n\nNotice that `log` is not a pure function! It should *only* be used for\ninvestigating bugs or performance problems.\n",
            "type": "String -> a -> a"
          },
          {
            "name": "trace",
            "comment": " Trace all past positions of a `Form` in the debugger. Add this to a `Form`\nand you will see a line tracing its entire history.\n",
            "type": "String -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "watch",
            "comment": " Watch a particular value in the debugger. Say we want to know the value of\na variable called `velocity` because it may not be updated correctly. Adding\n`Debug.watch` allows us to name the value and show it with the debugger. The\nresult of evaluating such an expression is unchanged.\n\n\t  Debug.watch \"velocity\" velocity == velocity\n\nThat means it's easy to add `Debug.watch` to any value.\n\nNote that calling `Debug.watch` on a signal is not useful. Instead, it needs\nto be mapped into the signal (to act on the contained value). So if you want\nto watch a timer signal, instead of `Debug.watch \"time\" (Time.every 1000)`\nyou need `Signal.map (Debug.watch \"time\") (Time.every 1000)`.\n",
            "type": "String -> a -> a"
          },
          {
            "name": "watchSummary",
            "comment": " Watch a summary of a particular value in the debugger. This function is\npretty much the same as `watch` but it lets you specify a way to summarize\nthe value you are interested in. For example, maybe you only want to see part\nof a record:\n\n\t  Debug.watchSummary \"velocity\" .velocity object\n\nThis is the same as just writing `object`, but it creates a watch that *only*\nlooks at the value of `object.velocity`. You can also show summary statistics\nlike length of a list:\n\n\t  Debug.watchSummary \"Number of clicks\" length clicks\n\nAgain, this evaluates to `clicks` but we get to see how long that list is in\nthe debugger.\n",
            "type": "String -> (a -> b) -> a -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Set",
        "comment": " A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time. Set equality with\n`(==)` is unreliable and should not be used.\n\n# Sets\n@docs Set\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Set",
            "comment": " Represents a set of unique values. So `(Set Int)` is a set of integers and\n`(Set String)` is a set of strings.\n",
            "args": [
              "t"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "empty",
            "comment": " Create an empty set.\n",
            "type": "Set.Set a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(comparable -> Bool) -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest.\n",
            "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest.\n",
            "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates.\n",
            "type": "List comparable -> Set.Set comparable"
          },
          {
            "name": "insert",
            "comment": " Insert a value into a set.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty.\n",
            "type": "Set.Set a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
            "type": "(comparable -> comparable') -> Set.Set comparable -> Set.Set comparable'"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set.\n",
            "type": "comparable -> Set.Set comparable -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
            "type": "(comparable -> Bool) -> Set.Set comparable -> ( Set.Set comparable, Set.Set comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
            "type": "comparable -> Set.Set comparable -> Set.Set comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value.\n",
            "type": "comparable -> Set.Set comparable"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set.\n",
            "type": "Set.Set a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list, sorted from lowest to highest.\n",
            "type": "Set.Set comparable -> List comparable"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values.\n",
            "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Json.Decode",
        "comment": " A way to turn Json values into Elm values. A `Decoder a` represents a\ndecoding operation that will either produce a value of type `a`, or fail.\n\n# Decoders\n@docs Decoder, Value\n\n# Run a Decoder\n@docs decodeString, decodeValue\n\n# Primitives\n@docs string, int, float, bool, null\n\n# Arrays\n@docs list, array,\n  tuple1, tuple2, tuple3, tuple4, tuple5, tuple6, tuple7, tuple8\n\n# Objects\n@docs (:=), at,\n  object1, object2, object3, object4, object5, object6, object7, object8,\n  keyValuePairs, dict\n\n# Oddly Shaped Values\n@docs maybe, oneOf, map, fail, succeed, andThen\n\n# \"Creative\" Values\n@docs value, customDecoder\n",
        "aliases": [
          {
            "name": "Value",
            "comment": " Represents a JavaScript value.\n",
            "args": [],
            "type": "Json.Encode.Value"
          }
        ],
        "types": [
          {
            "name": "Decoder",
            "comment": " Represents a way of decoding JSON values. If you have a `(Decoder (List String))`\nit will attempt to take some JSON value and turn it into a list of strings.\nThese decoders are easy to put together so you can create more and more complex\ndecoders.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": ":=",
            "comment": " Applies the decoder to the field with the given name.\nFails if the JSON object has no such field.\n\n    nameAndAge : Decoder (String,Int)\n    nameAndAge =\n        object2 (,)\n          (\"name\" := string)\n          (\"age\" := int)\n\n    optionalProfession : Decoder (Maybe String)\n    optionalProfession =\n        maybe (\"profession\" := string)\n",
            "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "andThen",
            "comment": " Helpful when one field will determine the shape of a bunch of other fields.\n\n    type Shape\n        = Rectangle Float Float\n        | Circle Float\n\n    shape : Decoder Shape\n    shape =\n      (\"tag\" := string) `andThen` shapeInfo\n\n    shapeInfo : String -> Decoder Shape\n    shapeInfo tag =\n      case tag of\n        \"rectangle\" ->\n            object2 Rectangle\n              (\"width\" := float)\n              (\"height\" := float)\n\n        \"circle\" ->\n            object1 Circle\n              (\"radius\" := float)\n\n        _ ->\n            fail (tag ++ \" is not a recognized tag for shapes\")\n",
            "type": "Json.Decode.Decoder a -> (a -> Json.Decode.Decoder b) -> Json.Decode.Decoder b"
          },
          {
            "name": "array",
            "comment": " Extract an Array from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers : Decoder (Array Int)\n    numbers =\n        array int\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Array.Array a)"
          },
          {
            "name": "at",
            "comment": " Access a nested field, making it easy to dive into big structures. This is\nreally a helper function so you do not need to write `(:=)` so many times.\n\n    -- object.target.value = 'hello'\n    value : Decoder String\n    value =\n        at [\"target\", \"value\"] string\n\nIt is defined as\n\n    at fields decoder =\n        List.foldr (:=) decoder fields\n",
            "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
          },
          {
            "name": "bool",
            "comment": " Extract a boolean.\n\n    -- { ... checked: true ... }\n\n    checked : Decoder Bool\n    checked =\n        \"checked\" := bool\n",
            "type": "Json.Decode.Decoder Bool"
          },
          {
            "name": "customDecoder",
            "comment": " Create a custom decoder that may do some fancy computation. See the `value`\ndocumentation for an example usage.\n",
            "type": "Json.Decode.Decoder a -> (a -> Result.Result String b) -> Json.Decode.Decoder b"
          },
          {
            "name": "decodeString",
            "comment": " Using a certain decoder, attempt to parse a JSON string. If the decoder\nfails, you will get a string message telling you why.\n\n    decodeString (tuple2 float float) \"[3,4]\"                  -- Ok (3,4)\n    decodeString (tuple2 float float) \"{ \\\"x\\\": 3, \\\"y\\\": 4 }\" -- Err \"\"\n",
            "type": "Json.Decode.Decoder a -> String -> Result.Result String a"
          },
          {
            "name": "decodeValue",
            "comment": " Using a certain decoder, attempt to parse a raw `Json.Value`. You can pass\na `Json.Value` into Elm through a port, so this can let you handle data with\nextra weird shapes or stuff that currently is not allowed through ports\nautomatically.\n\n    port jsonValues : Signal Json.Value\n\n    shapes : Signal (Result String Shape)\n    shapes =\n      Signal.map (decodeValue shape) jsonValues\n\n    type Shape\n        = Rectangle Float Float\n        | Circle Float\n\n    shape : Decoder Shape  -- see definition in `andThen` docs\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Value -> Result.Result String a"
          },
          {
            "name": "dict",
            "comment": " Turn any object into a dictionary of key-value pairs.\n\n    -- { mercury: 0.33, venus: 4.87, earth: 5.97, ... }\n    planetMasses : Decoder (Dict String Float)\n    planetMasses =\n        dict float\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Dict.Dict String a)"
          },
          {
            "name": "fail",
            "comment": " A decoder that always fails. Useful when paired with `andThen` or `oneOf`\nto improve error messages when things go wrong. For example, the following\ndecoder is able to provide a much more specific error message when `fail` is\nthe last option.\n\n    point : Decoder (Float,Float)\n    point =\n        oneOf\n        [ tuple2 (,) float float\n        , object2 (,) (\"x\" := float) (\"y\" := float)\n        , fail \"expecting some kind of point\"\n        ]\n",
            "type": "String -> Json.Decode.Decoder a"
          },
          {
            "name": "float",
            "comment": " Extract a float.\n\n    -- [ 6.022, 3.1415, 1.618 ]\n\n    numbers : Decoder (List Float)\n    numbers =\n        list float\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "int",
            "comment": " Extract an integer.\n\n    -- { ... age: 42 ... }\n\n    age : Decoder Int\n    age =\n        \"age\" := int\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "keyValuePairs",
            "comment": " Turn any object into a list of key-value pairs. Fails if _any_ key can't be\ndecoded with the given decoder.\n\n    -- { tom: 89, sue: 92, bill: 97, ... }\n    grades : Decoder (List (String, Int))\n    grades =\n        keyValuePairs int\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List ( String, a ))"
          },
          {
            "name": "list",
            "comment": " Extract a List from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers : Decoder (List Int)\n    numbers =\n        list int\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the value returned by a decoder. Most useful when paired with\nthe `oneOf` function.\n\n    nullOr : Decoder a -> Decoder (Maybe a)\n    nullOr decoder =\n        oneOf\n          [ null Nothing\n          , map Just decoder\n          ]\n\n    type UserID = OldID Int | NewID String\n\n    -- 1234 or \"1234abc\"\n    userID : Decoder UserID\n    userID =\n        oneOf\n          [ map OldID int\n          , map NewID string\n          ]\n",
            "type": "(a -> b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"
          },
          {
            "name": "maybe",
            "comment": " Extract a Maybe value, wrapping successes with `Just` and turning any\nfailure in `Nothing`. If you are expecting that a field can sometimes be `null`,\nit's better to check for it [explicitly](#null), as this function will swallow\nerrors from ill-formed JSON.\n\nThe following code decodes JSON objects that may not have a profession field.\n\n    -- profession: Just \"plumber\"\n    -- { name: \"Tom\", age: 31, profession: \"plumber\" }\n    -- profession: Nothing\n    -- { name: \"Sue\", age: 42 }\n    -- { name: \"Amy\", age: 27, profession: null }\n    -- { name: \"Joe\", age: 36, profession: [\"something\", \"unexpected\"] }\n\n    type alias Person =\n        { name : String\n        , age : Int\n        , profession : Maybe String\n        }\n\n    person : Decoder Person\n    person =\n        object3 Person\n          (\"name\" := string)\n          (\"age\" := int)\n          (maybe (\"profession\" := string))\n",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
          },
          {
            "name": "null",
            "comment": " Decode null as the value given, and fail otherwise. Primarily useful for\ncreating *other* decoders.\n\n    numbers : Decoder [Int]\n    numbers =\n        list (oneOf [ int, null 0 ])\n\nThis decoder treats `null` as `Nothing`, and otherwise tries to produce a\n`Just`.\n\n    nullOr : Decoder a -> Decoder (Maybe a)\n    nullOr decoder =\n        oneOf\n        [ null Nothing\n        , map Just decoder\n        ]\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "object1",
            "comment": " Apply a function to a decoder. You can use this function as `map` if you\nmust (which can be done with any `objectN` function actually).\n\n    object1 sqrt (\"x\" := float)\n",
            "type": "(a -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder value"
          },
          {
            "name": "object2",
            "comment": " Use two different decoders on a JS value. This is nice for extracting\nmultiple fields from an object.\n\n    point : Decoder (Float,Float)\n    point =\n        object2 (,)\n          (\"x\" := float)\n          (\"y\" := float)\n",
            "type": "(a -> b -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder value"
          },
          {
            "name": "object3",
            "comment": " Use three different decoders on a JS value. This is nice for extracting\nmultiple fields from an object.\n\n    type alias Job = { name : String, id : Int, completed : Bool }\n\n    point : Decoder Job\n    point =\n        object3 Job\n          (\"name\" := string)\n          (\"id\" := int)\n          (\"completed\" := bool)\n",
            "type": "(a -> b -> c -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder value"
          },
          {
            "name": "object4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder value"
          },
          {
            "name": "object5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder value"
          },
          {
            "name": "object6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder value"
          },
          {
            "name": "object7",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder value"
          },
          {
            "name": "object8",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder h -> Json.Decode.Decoder value"
          },
          {
            "name": "oneOf",
            "comment": " Try out multiple different decoders. This is helpful when you are dealing\nwith something with a very strange shape and when `andThen` does not help\nnarrow things down so you can be more targeted.\n\n    -- [ [3,4], { x:0, y:0 }, [5,12] ]\n\n    points : Decoder (List (Float,Float))\n    points =\n        list point\n\n    point : Decoder (Float,Float)\n    point =\n        oneOf\n        [ tuple2 (,) float float\n        , object2 (,) (\"x\" := float) (\"y\" := float)\n        ]\n",
            "type": "List (Json.Decode.Decoder a) -> Json.Decode.Decoder a"
          },
          {
            "name": "string",
            "comment": " Extract a string.\n\n    -- [\"John\",\"Doe\"]\n\n    name : Decoder (String, String)\n    name =\n        tuple2 (,) string string\n",
            "type": "Json.Decode.Decoder String"
          },
          {
            "name": "succeed",
            "comment": " A decoder that always succeeds. Useful when paired with `andThen` or\n`oneOf` but everything is supposed to work out at the end. For example,\nmaybe you have an optional field that can have a default value when it is\nmissing.\n\n    -- { x:3, y:4 } or { x:3, y:4, z:5 }\n\n    point3D : Decoder (Float,Float,Float)\n    point3D =\n        object3 (,,)\n          (\"x\" := float)\n          (\"y\" := float)\n          (oneOf [ \"z\" := float, succeed 0 ])\n",
            "type": "a -> Json.Decode.Decoder a"
          },
          {
            "name": "tuple1",
            "comment": " Handle an array with exactly one element.\n\n    extractString : Decoder String\n    extractString = \n        tuple1 identity string\n\n    authorship : Decoder String\n    authorship =\n        oneOf\n          [ tuple1 (\\author -> \"Author: \" ++ author) string\n          , list string |> map (\\authors -> \"Co-authors: \" ++ String.join \", \" authors)\n          ]\n",
            "type": "(a -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple2",
            "comment": " Handle an array with exactly two elements. Useful for points and simple\npairs.\n\n    -- [3,4] or [0,0]\n    point : Decoder (Float,Float)\n    point =\n        tuple2 (,) float float\n\n    -- [\"John\",\"Doe\"] or [\"Hermann\",\"Hesse\"]\n    name : Decoder Name\n    name =\n        tuple2 Name string string\n\n    type alias Name = { first : String, last : String }\n",
            "type": "(a -> b -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple3",
            "comment": " Handle an array with exactly three elements.\n\n    -- [3,4,5] or [0,0,0]\n    point3D : Decoder (Float,Float,Float)\n    point3D =\n        tuple3 (,,) float float float\n\n",
            "type": "(a -> b -> c -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple6",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple7",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder value"
          },
          {
            "name": "tuple8",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder h -> Json.Decode.Decoder value"
          },
          {
            "name": "value",
            "comment": " Bring in an arbitrary JSON value. Useful if you need to work with crazily\nformatted data. For example, this lets you create a parser for \"variadic\" lists\nwhere the first few types are different, followed by 0 or more of the same\ntype.\n\n    variadic2 : (a -> b -> List c -> value) -> Decoder a -> Decoder b -> Decoder c -> Decoder value\n    variadic2 f a b c =\n        let\n            combineResults = List.foldr (Result.map2 (::)) (Ok [])\n        in\n            customDecoder (list value) (\\jsonList ->\n                case jsonList of\n                  one :: two :: rest ->\n                      Result.map3 f\n                        (decodeValue a one)\n                        (decodeValue b two)\n                        (combineResults (List.map (decodeValue c) rest))\n\n                  _ -> Result.Err \"expecting at least two elements in the array\")\n",
            "type": "Json.Decode.Decoder Json.Decode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Graphics.Collage",
        "comment": " The collage API is for freeform graphics. You can move, rotate, scale, etc.\nall sorts of forms including lines, shapes, images, and elements.\n\nCollages use the same coordinate system you might see in an algebra or physics\nproblem. The origin (0,0) is at the center of the collage, not the top left\ncorner as in some other graphics libraries. Furthermore, the y-axis points up,\nso moving a form 10 units in the y-axis will move it up on screen.\n\n# Unstructured Graphics\n@docs collage, Form\n\n# Creating Forms\n@docs toForm, filled, textured, gradient, outlined, traced, text, outlinedText\n\n# Transforming Forms\n@docs move, moveX, moveY, scale, rotate, alpha\n\n# Grouping Forms\nGrouping forms makes it easier to write modular graphics code. You can create\na form that is a composite of many subforms. From there it is easy to transform\nit as a single unit.\n\n@docs group, groupTransform\n\n# Shapes\n@docs Shape, rect, oval, square, circle, ngon, polygon\n\n# Paths\n@docs Path, segment, path\n\n# Line Styles\n@docs solid, dashed, dotted, LineStyle, LineCap, LineJoin, defaultLine\n\n",
        "aliases": [
          {
            "name": "LineStyle",
            "comment": " All of the attributes of a line style. This lets you build up a line style\nhowever you want. You can also update existing line styles with record updates.\n",
            "args": [],
            "type": "{ color : Color.Color , width : Float , cap : Graphics.Collage.LineCap , join : Graphics.Collage.LineJoin , dashing : List Int , dashOffset : Int }"
          }
        ],
        "types": [
          {
            "name": "Form",
            "comment": " A visual `Form` has a shape and texture. This can be anything from a red\nsquare to a circle textured with stripes.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "LineCap",
            "comment": " The shape of the ends of a line. ",
            "args": [],
            "cases": [
              [
                "Flat",
                []
              ],
              [
                "Round",
                []
              ],
              [
                "Padded",
                []
              ]
            ]
          },
          {
            "name": "LineJoin",
            "comment": " The shape of the &ldquo;joints&rdquo; of a line, where each line segment\nmeets. `Sharp` takes an argument to limit the length of the joint. This\ndefaults to 10.\n",
            "args": [],
            "cases": [
              [
                "Smooth",
                []
              ],
              [
                "Sharp",
                [
                  "Float"
                ]
              ],
              [
                "Clipped",
                []
              ]
            ]
          },
          {
            "name": "Path",
            "comment": " A 2D path. Paths are a sequence of points. They do not have a color.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Shape",
            "comment": " A 2D shape. Shapes are closed polygons. They do not have a color or\ntexture, that information can be filled in later.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "alpha",
            "comment": " Set the alpha of a `Form`. The default is 1, and 0 is totally transparent. ",
            "type": "Float -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "circle",
            "comment": " A circle with a given radius. ",
            "type": "Float -> Graphics.Collage.Shape"
          },
          {
            "name": "collage",
            "comment": " Create a collage with certain dimensions and content. It takes width and height\narguments to specify dimensions, and then a list of 2D forms to decribe the content.\n\nUnlike with `Element`s, these 2D forms can be moved and rotated however you like.\nThe forms are drawn in the order of the list, i.e., `collage w h [a, b]` will\ndraw `b` on top of `a`.\n",
            "type": "Int -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element"
          },
          {
            "name": "dashed",
            "comment": " Create a dashed line style with a given color. Dashing equals `[8,4]`. ",
            "type": "Color.Color -> Graphics.Collage.LineStyle"
          },
          {
            "name": "defaultLine",
            "comment": " The default line style, which is solid black with flat caps and sharp joints.\nYou can use record updates to build the line style you\nwant. For example, to make a thicker line, you could say:\n\n    { defaultLine | width = 10 }\n",
            "type": "Graphics.Collage.LineStyle"
          },
          {
            "name": "dotted",
            "comment": " Create a dotted line style with a given color. Dashing equals `[3,3]`. ",
            "type": "Color.Color -> Graphics.Collage.LineStyle"
          },
          {
            "name": "filled",
            "comment": " Create a filled in shape. ",
            "type": "Color.Color -> Graphics.Collage.Shape -> Graphics.Collage.Form"
          },
          {
            "name": "gradient",
            "comment": " Fill a shape with a [gradient](Color#linear). ",
            "type": "Color.Gradient -> Graphics.Collage.Shape -> Graphics.Collage.Form"
          },
          {
            "name": "group",
            "comment": " Flatten many forms into a single `Form`. This lets you move and rotate them\nas a single unit, making it possible to build small, modular components.\nForms will be drawn in the order that they are listed, as in `collage`.\n",
            "type": "List Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "groupTransform",
            "comment": " Flatten many forms into a single `Form` and then apply a matrix\ntransformation. Forms will be drawn in the order that they are listed, as in\n`collage`.\n",
            "type": "Transform2D.Transform2D -> List Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "move",
            "comment": " Move a form by the given amount (x, y). This is a relative translation so\n`(move (5,10) form)` would move `form` five pixels to the right and ten pixels up.\n",
            "type": "( Float, Float ) -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "moveX",
            "comment": " Move a shape in the x direction. This is relative so `(moveX 10 form)` moves\n`form` 10 pixels to the right.\n",
            "type": "Float -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "moveY",
            "comment": " Move a shape in the y direction. This is relative so `(moveY 10 form)` moves\n`form` upwards by 10 pixels.\n",
            "type": "Float -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "ngon",
            "comment": " A regular polygon with N sides. The first argument specifies the number\nof sides and the second is the radius. So to create a pentagon with radius\n30 you would say:\n\n    ngon 5 30\n",
            "type": "Int -> Float -> Graphics.Collage.Shape"
          },
          {
            "name": "outlined",
            "comment": " Outline a shape with a given line style. ",
            "type": "Graphics.Collage.LineStyle -> Graphics.Collage.Shape -> Graphics.Collage.Form"
          },
          {
            "name": "outlinedText",
            "comment": " Create some outlined text. Since we are just outlining the text, the color\nis taken from the `LineStyle` attribute instead of the `Text`.\n",
            "type": "Graphics.Collage.LineStyle -> Text.Text -> Graphics.Collage.Form"
          },
          {
            "name": "oval",
            "comment": " An oval with a given width and height. ",
            "type": "Float -> Float -> Graphics.Collage.Shape"
          },
          {
            "name": "path",
            "comment": " Create a path that follows a sequence of points. ",
            "type": "List ( Float, Float ) -> Graphics.Collage.Path"
          },
          {
            "name": "polygon",
            "comment": " Create an arbitrary polygon by specifying its corners in order.\n`polygon` will automatically close all shapes, so the given list\nof points does not need to start and end with the same position.\n",
            "type": "List ( Float, Float ) -> Graphics.Collage.Shape"
          },
          {
            "name": "rect",
            "comment": " A rectangle with a given width and height. ",
            "type": "Float -> Float -> Graphics.Collage.Shape"
          },
          {
            "name": "rotate",
            "comment": " Rotate a form by a given angle. Rotate takes standard Elm angles (radians)\nand turns things counterclockwise. So to turn `form` 30&deg; to the left\nyou would say, `(rotate (degrees 30) form)`.\n",
            "type": "Float -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "scale",
            "comment": " Scale a form by a given factor. Scaling by 2 doubles both dimensions,\nand quadruples the area.\n",
            "type": "Float -> Graphics.Collage.Form -> Graphics.Collage.Form"
          },
          {
            "name": "segment",
            "comment": " Create a path along a given line segment. ",
            "type": "( Float, Float ) -> ( Float, Float ) -> Graphics.Collage.Path"
          },
          {
            "name": "solid",
            "comment": " Create a solid line style with a given color. ",
            "type": "Color.Color -> Graphics.Collage.LineStyle"
          },
          {
            "name": "square",
            "comment": " A square with a given edge length. ",
            "type": "Float -> Graphics.Collage.Shape"
          },
          {
            "name": "text",
            "comment": " Create some text. Details like size and color are part of the `Text` value\nitself, so you can mix colors and sizes and fonts easily.\n",
            "type": "Text.Text -> Graphics.Collage.Form"
          },
          {
            "name": "textured",
            "comment": " Create a textured shape. The texture is described by some url and is\ntiled to fill the entire shape.\n",
            "type": "String -> Graphics.Collage.Shape -> Graphics.Collage.Form"
          },
          {
            "name": "toForm",
            "comment": " Turn any `Element` into a `Form`. This lets you use text, gifs, and video\nin your collage. This means you can move, rotate, and scale\nan `Element` however you want.\n",
            "type": "Graphics.Element.Element -> Graphics.Collage.Form"
          },
          {
            "name": "traced",
            "comment": " Trace a path with a given line style. ",
            "type": "Graphics.Collage.LineStyle -> Graphics.Collage.Path -> Graphics.Collage.Form"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Dict",
        "comment": " A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time. Dictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Dictionaries\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Dict",
            "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "Dict.Dict k v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n",
            "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( comparable, v ) -> Dict.Dict comparable v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "comparable -> Dict.Dict comparable v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "comparable -> v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
            "type": "Dict.Dict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
            "type": "Dict.Dict comparable v -> List comparable"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(comparable -> a -> b) -> Dict.Dict comparable a -> Dict.Dict comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "comparable -> Dict.Dict comparable v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> ( Dict.Dict comparable v, Dict.Dict comparable v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "comparable -> v -> Dict.Dict comparable v"
          },
          {
            "name": "size",
            "comment": " Determine the number of key-value pairs in the dictionary. ",
            "type": "Dict.Dict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys. ",
            "type": "Dict.Dict comparable v -> List ( comparable, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n",
            "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Dict.Dict comparable v -> Dict.Dict comparable v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
            "type": "Dict.Dict comparable v -> List v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Graphics.Element",
        "comment": " Graphical elements that snap together to build complex widgets and layouts.\nEach Element is a rectangle with a known width and height, making them easy to\ncombine and position.\n\n# Elements\n@docs Element\n\n# Show Anything\n@docs show\n\n# Images\n@docs image, fittedImage, croppedImage, tiledImage\n\n# Text\nEach of the following functions places [`Text`](Text) into a box. The function\nyou use determines the alignment of the text.\n\n@docs leftAligned, rightAligned, centered, justified\n\n# Styling\n@docs width, height, size, color, opacity, link, tag\n\n# Inspection\n@docs widthOf, heightOf, sizeOf\n\n# Layout\n@docs flow, Direction, up, down, left, right, inward, outward\n\n## Layout Aliases\nThere are also some convenience functions for working\nwith `flow` in specific cases:\n\n@docs layers, above, below, beside\n\n# Positioning\n@docs empty, spacer, container\n\n## Specific Positions\n\n@docs Position, middle, midTop, midBottom, midLeft, midRight, topLeft,\n  topRight, bottomLeft, bottomRight\n\nIf you need more precision, you can create custom positions.\n\n@docs Pos, absolute, relative, middleAt, midTopAt, midBottomAt, midLeftAt,\n      midRightAt, topLeftAt, topRightAt, bottomLeftAt, bottomRightAt\n",
        "aliases": [],
        "types": [
          {
            "name": "Direction",
            "comment": " Represents a `flow` direction for a list of elements.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Element",
            "comment": " A graphical element that can be rendered on screen. Every element is a\nrectangle with a known width and height, so they can be composed and stacked\neasily.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Pos",
            "comment": " Specifies a distance from a particular location within a `container`, like\n“20 pixels right and up from the center”. You can use `absolute` or `relative`\nto specify a `Pos` in pixels or as a percentage of the container.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Position",
            "comment": " Specifies a position for an element within a `container`, like “the top\nleft corner”.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "above",
            "comment": " Stack elements vertically.\nTo put `a` above `b` you would say: ``a `above` b``\n",
            "type": "Graphics.Element.Element -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "absolute",
            "comment": " A position specified in pixels. If you want something 10 pixels to the\nright of the middle of a container, you would write this:\n\n    middleAt (absolute 10) (absolute 0)\n\n",
            "type": "Int -> Graphics.Element.Pos"
          },
          {
            "name": "below",
            "comment": " Stack elements vertically.\nTo put `a` below `b` you would say: ``a `below` b``\n",
            "type": "Graphics.Element.Element -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "beside",
            "comment": " Put elements beside each other horizontally.\nTo put `a` beside `b` you would say: ``a `beside` b``\n",
            "type": "Graphics.Element.Element -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "bottomLeft",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "bottomLeftAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "bottomRight",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "bottomRightAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "centered",
            "comment": " Center text in the text block. There is equal spacing on either side of a\nline of text.\n",
            "type": "Text.Text -> Graphics.Element.Element"
          },
          {
            "name": "color",
            "comment": " Create an `Element` with a given background color. ",
            "type": "Color.Color -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "container",
            "comment": " Put an element in a container. This lets you position the element really\neasily, and there are tons of ways to set the `Position`.\nTo center `element` exactly in a 300-by-300 square you would say:\n\n    container 300 300 middle element\n\nBy setting the color of the container, you can create borders.\n",
            "type": "Int -> Int -> Graphics.Element.Position -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "croppedImage",
            "comment": " Create a cropped image. Take a rectangle out of the picture starting\nat the given top left coordinate. If you have a 140-by-140 image,\nthe following will cut a 100-by-100 square out of the middle of it.\n\n    croppedImage (20,20) 100 100 \"yogi.jpg\"\n",
            "type": "( Int, Int ) -> Int -> Int -> String -> Graphics.Element.Element"
          },
          {
            "name": "down",
            "comment": "",
            "type": "Graphics.Element.Direction"
          },
          {
            "name": "empty",
            "comment": " An Element that takes up no space. Good for things that appear conditionally:\n\n    flow down [ img1, if showMore then img2 else empty ]\n",
            "type": "Graphics.Element.Element"
          },
          {
            "name": "fittedImage",
            "comment": " Create a fitted image given a width, height, and image source.\nThis will crop the picture to best fill the given dimensions.\n",
            "type": "Int -> Int -> String -> Graphics.Element.Element"
          },
          {
            "name": "flow",
            "comment": " Have a list of elements flow in a particular direction.\nThe `Direction` starts from the first element in the list.\n\n    flow right [a,b,c]\n\n        +---+---+---+\n        | a | b | c |\n        +---+---+---+\n",
            "type": "Graphics.Element.Direction -> List Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "height",
            "comment": " Create an `Element` with a given height. ",
            "type": "Int -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "heightOf",
            "comment": " Get the height of an Element ",
            "type": "Graphics.Element.Element -> Int"
          },
          {
            "name": "image",
            "comment": " Create an image given a width, height, and image source. ",
            "type": "Int -> Int -> String -> Graphics.Element.Element"
          },
          {
            "name": "inward",
            "comment": "",
            "type": "Graphics.Element.Direction"
          },
          {
            "name": "justified",
            "comment": " Align text along the left and right sides of the text block. Word spacing is\nadjusted to make this possible.\n",
            "type": "Text.Text -> Graphics.Element.Element"
          },
          {
            "name": "layers",
            "comment": " Layer elements on top of each other, starting from the bottom:\n`layers == flow outward`\n",
            "type": "List Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "left",
            "comment": "",
            "type": "Graphics.Element.Direction"
          },
          {
            "name": "leftAligned",
            "comment": " Align text along the left side of the text block. This is sometimes known as\n*ragged right*.\n",
            "type": "Text.Text -> Graphics.Element.Element"
          },
          {
            "name": "link",
            "comment": " Create an `Element` that is a hyper-link. ",
            "type": "String -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "midBottom",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "midBottomAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "midLeft",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "midLeftAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "midRight",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "midRightAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "midTop",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "midTopAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "middle",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "middleAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "opacity",
            "comment": " Create an `Element` with a given opacity. Opacity is a number between 0 and 1\nwhere 0 means totally clear.\n",
            "type": "Float -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "outward",
            "comment": "",
            "type": "Graphics.Element.Direction"
          },
          {
            "name": "relative",
            "comment": " A position specified as a percentage. If you want something 10% away from\nthe top left corner, you would say:\n\n    topLeftAt (relative 0.1) (relative 0.1)\n",
            "type": "Float -> Graphics.Element.Pos"
          },
          {
            "name": "right",
            "comment": "",
            "type": "Graphics.Element.Direction"
          },
          {
            "name": "rightAligned",
            "comment": " Align text along the right side of the text block. This is sometimes known\nas *ragged left*.\n",
            "type": "Text.Text -> Graphics.Element.Element"
          },
          {
            "name": "show",
            "comment": " Convert anything to its textual representation and make it displayable in\nthe browser. Excellent for debugging.\n\n    main : Element\n    main =\n      show \"Hello World!\"\n\n    show value =\n        leftAligned (Text.monospace (Text.fromString (toString value)))\n",
            "type": "a -> Graphics.Element.Element"
          },
          {
            "name": "size",
            "comment": " Create an `Element` with a new width and height. ",
            "type": "Int -> Int -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "sizeOf",
            "comment": " Get the width and height of an Element ",
            "type": "Graphics.Element.Element -> ( Int, Int )"
          },
          {
            "name": "spacer",
            "comment": " Create an empty box. This is useful for getting your spacing right and\nfor making borders.\n",
            "type": "Int -> Int -> Graphics.Element.Element"
          },
          {
            "name": "tag",
            "comment": " Create an `Element` with a tag. This lets you link directly to it.\nThe element `(tag \"all-about-badgers\" thirdParagraph)` can be reached\nwith a link like this: `/facts-about-animals.elm#all-about-badgers`\n",
            "type": "String -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "tiledImage",
            "comment": " Create a tiled image. Repeat the image to fill the given width and height.\n\n    tiledImage 100 100 \"yogi.jpg\"\n",
            "type": "Int -> Int -> String -> Graphics.Element.Element"
          },
          {
            "name": "topLeft",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "topLeftAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "topRight",
            "comment": "",
            "type": "Graphics.Element.Position"
          },
          {
            "name": "topRightAt",
            "comment": "",
            "type": "Graphics.Element.Pos -> Graphics.Element.Pos -> Graphics.Element.Position"
          },
          {
            "name": "up",
            "comment": "",
            "type": "Graphics.Element.Direction"
          },
          {
            "name": "width",
            "comment": " Create an `Element` with a given width. ",
            "type": "Int -> Graphics.Element.Element -> Graphics.Element.Element"
          },
          {
            "name": "widthOf",
            "comment": " Get the width of an Element ",
            "type": "Graphics.Element.Element -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Json.Encode",
        "comment": " Library for turning Elm values into Json values.\n\n# Encoding\n@docs encode, Value\n\n# Primitives\n@docs string, int, float, bool, null\n\n# Arrays\n@docs list, array\n\n# Objects\n@docs object\n",
        "aliases": [],
        "types": [
          {
            "name": "Value",
            "comment": " Represents a JavaScript value.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "array",
            "comment": "",
            "type": "Array.Array Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "bool",
            "comment": "",
            "type": "Bool -> Json.Encode.Value"
          },
          {
            "name": "encode",
            "comment": " Convert a `Value` into a prettified string. The first argument specifies\nthe amount of indentation in the resulting string.\n\n    person =\n        object\n          [ (\"name\", string \"Tom\")\n          , (\"age\", int 42)\n          ]\n\n    compact = encode 0 person\n    -- {\"name\":\"Tom\",\"age\":42}\n\n    readable = encode 4 person\n    -- {\n    --     \"name\": \"Tom\",\n    --     \"age\": 42\n    -- }\n",
            "type": "Int -> Json.Encode.Value -> String"
          },
          {
            "name": "float",
            "comment": " Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n",
            "type": "Float -> Json.Encode.Value"
          },
          {
            "name": "int",
            "comment": "",
            "type": "Int -> Json.Encode.Value"
          },
          {
            "name": "list",
            "comment": "",
            "type": "List Json.Encode.Value -> Json.Encode.Value"
          },
          {
            "name": "null",
            "comment": "",
            "type": "Json.Encode.Value"
          },
          {
            "name": "object",
            "comment": "",
            "type": "List ( String, Json.Encode.Value ) -> Json.Encode.Value"
          },
          {
            "name": "string",
            "comment": "",
            "type": "String -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "String",
        "comment": " A built-in representation for efficient string manipulation. String literals\nare enclosed in `\"double quotes\"`. Strings are *not* lists of characters.\n\n# Basics\n@docs isEmpty, length, reverse, repeat\n\n# Building and Splitting\n@docs cons, uncons, fromChar, append, concat, split, join, words, lines\n\n# Get Substrings\n@docs slice, left, right, dropLeft, dropRight\n\n# Check for Substrings\n@docs contains, startsWith, endsWith, indexes, indices\n\n# Conversions\n@docs toInt, toFloat, toList, fromList\n\n# Formatting\nCosmetic operations such as padding with extra characters or trimming whitespace.\n\n@docs toUpper, toLower,\n      pad, padLeft, padRight,\n      trim, trimLeft, trimRight\n\n# Higher-Order Functions\n@docs map, filter, foldl, foldr, any, all\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Determine whether *all* characters satisfy a predicate.\n\n    all isDigit \"90210\" == True\n    all isDigit \"R2-D2\" == False\n    all isDigit \"heart\" == False\n",
            "type": "(Char -> Bool) -> String -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine whether *any* characters satisfy a predicate.\n\n    any isDigit \"90210\" == True\n    any isDigit \"R2-D2\" == True\n    any isDigit \"heart\" == False\n",
            "type": "(Char -> Bool) -> String -> Bool"
          },
          {
            "name": "append",
            "comment": " Append two strings. You can also use [the `(++)` operator](Basics#++)\nto do this.\n\n    append \"butter\" \"fly\" == \"butterfly\"\n",
            "type": "String -> String -> String"
          },
          {
            "name": "concat",
            "comment": " Concatenate many strings into one.\n\n    concat [\"never\",\"the\",\"less\"] == \"nevertheless\"\n",
            "type": "List String -> String"
          },
          {
            "name": "cons",
            "comment": " Add a character to the beginning of a string. ",
            "type": "Char -> String -> String"
          },
          {
            "name": "contains",
            "comment": " See if the second string contains the first one.\n\n    contains \"the\" \"theory\" == True\n    contains \"hat\" \"theory\" == False\n    contains \"THE\" \"theory\" == False\n\nUse [`Regex.contains`](Regex#contains) if you need something more flexible.\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "dropLeft",
            "comment": " Drop *n* characters from the left side of a string. ",
            "type": "Int -> String -> String"
          },
          {
            "name": "dropRight",
            "comment": " Drop *n* characters from the right side of a string. ",
            "type": "Int -> String -> String"
          },
          {
            "name": "endsWith",
            "comment": " See if the second string ends with the first one.\n\n    endsWith \"the\" \"theory\" == False\n    endsWith \"ory\" \"theory\" == True\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep only the characters that satisfy the predicate.\n\n    filter isDigit \"R2-D2\" == \"22\"\n",
            "type": "(Char -> Bool) -> String -> String"
          },
          {
            "name": "foldl",
            "comment": " Reduce a string from the left.\n\n    foldl cons \"\" \"time\" == \"emit\"\n",
            "type": "(Char -> b -> b) -> b -> String -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a string from the right.\n\n    foldr cons \"\" \"time\" == \"time\"\n",
            "type": "(Char -> b -> b) -> b -> String -> b"
          },
          {
            "name": "fromChar",
            "comment": " Create a string from a given character.\n\n    fromChar 'a' == \"a\"\n",
            "type": "Char -> String"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of characters into a String. Can be useful if you\nwant to create a string primarily by consing, perhaps for decoding\nsomething.\n\n    fromList ['a','b','c'] == \"abc\"\n",
            "type": "List Char -> String"
          },
          {
            "name": "indexes",
            "comment": " Get all of the indexes for a substring in another string.\n\n    indexes \"i\" \"Mississippi\"   == [1,4,7,10]\n    indexes \"ss\" \"Mississippi\"  == [2,5]\n    indexes \"needle\" \"haystack\" == []\n",
            "type": "String -> String -> List Int"
          },
          {
            "name": "indices",
            "comment": " Alias for `indexes`. ",
            "type": "String -> String -> List Int"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a string is empty.\n\n    isEmpty \"\" == True\n    isEmpty \"the world\" == False\n",
            "type": "String -> Bool"
          },
          {
            "name": "join",
            "comment": " Put many strings together with a given separator.\n\n    join \"a\" [\"H\",\"w\",\"ii\",\"n\"]        == \"Hawaiian\"\n    join \" \" [\"cat\",\"dog\",\"cow\"]       == \"cat dog cow\"\n    join \"/\" [\"home\",\"evan\",\"Desktop\"] == \"home/evan/Desktop\"\n",
            "type": "String -> List String -> String"
          },
          {
            "name": "left",
            "comment": " Take *n* characters from the left side of a string. ",
            "type": "Int -> String -> String"
          },
          {
            "name": "length",
            "comment": " Get the length of a string.\n\n    length \"innumerable\" == 11\n    length \"\" == 0\n\n",
            "type": "String -> Int"
          },
          {
            "name": "lines",
            "comment": " Break a string into lines, splitting on newlines.\n\n    lines \"How are you?\\nGood?\" == [\"How are you?\", \"Good?\"]\n",
            "type": "String -> List String"
          },
          {
            "name": "map",
            "comment": " Transform every character in a string\n\n    map (\\c -> if c == '/' then '.' else c) \"a/b/c\" == \"a.b.c\"\n",
            "type": "(Char -> Char) -> String -> String"
          },
          {
            "name": "pad",
            "comment": " Pad a string on both sides until it has a given length.\n\n    pad 5 ' ' \"1\"   == \"  1  \"\n    pad 5 ' ' \"11\"  == \"  11 \"\n    pad 5 ' ' \"121\" == \" 121 \"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "padLeft",
            "comment": " Pad a string on the left until it has a given length.\n\n    padLeft 5 '.' \"1\"   == \"....1\"\n    padLeft 5 '.' \"11\"  == \"...11\"\n    padLeft 5 '.' \"121\" == \"..121\"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "padRight",
            "comment": " Pad a string on the right until it has a given length.\n\n    padRight 5 '.' \"1\"   == \"1....\"\n    padRight 5 '.' \"11\"  == \"11...\"\n    padRight 5 '.' \"121\" == \"121..\"\n",
            "type": "Int -> Char -> String -> String"
          },
          {
            "name": "repeat",
            "comment": " Repeat a string *n* times.\n\n    repeat 3 \"ha\" == \"hahaha\"\n",
            "type": "Int -> String -> String"
          },
          {
            "name": "reverse",
            "comment": " Reverse a string.\n\n    reverse \"stressed\" == \"desserts\"\n",
            "type": "String -> String"
          },
          {
            "name": "right",
            "comment": " Take *n* characters from the right side of a string. ",
            "type": "Int -> String -> String"
          },
          {
            "name": "slice",
            "comment": " Take a substring given a start and end index. Negative indexes\nare taken starting from the *end* of the list.\n\n    slice  7  9 \"snakes on a plane!\" == \"on\"\n    slice  0  6 \"snakes on a plane!\" == \"snakes\"\n    slice  0 -7 \"snakes on a plane!\" == \"snakes on a\"\n    slice -6 -1 \"snakes on a plane!\" == \"plane\"\n",
            "type": "Int -> Int -> String -> String"
          },
          {
            "name": "split",
            "comment": " Split a string using a given separator.\n\n    split \",\" \"cat,dog,cow\"        == [\"cat\",\"dog\",\"cow\"]\n    split \"/\" \"home/evan/Desktop/\" == [\"home\",\"evan\",\"Desktop\", \"\"]\n\nUse [`Regex.split`](Regex#split) if you need something more flexible.\n",
            "type": "String -> String -> List String"
          },
          {
            "name": "startsWith",
            "comment": " See if the second string starts with the first one.\n\n    startsWith \"the\" \"theory\" == True\n    startsWith \"ory\" \"theory\" == False\n",
            "type": "String -> String -> Bool"
          },
          {
            "name": "toFloat",
            "comment": " Try to convert a string into a float, failing on improperly formatted strings.\n\n    toFloat \"123\" == Ok 123.0\n    toFloat \"-42\" == Ok -42.0\n    toFloat \"3.1\" == Ok 3.1\n    toFloat \"31a\" == Err \"could not convert string '31a' to a Float\"\n",
            "type": "String -> Result.Result String Float"
          },
          {
            "name": "toInt",
            "comment": " Try to convert a string into an int, failing on improperly formatted strings.\n\n    toInt \"123\" == Ok 123\n    toInt \"-42\" == Ok -42\n    toInt \"3.1\" == Err \"could not convert string '3.1' to an Int\"\n    toInt \"31a\" == Err \"could not convert string '31a' to an Int\"\n",
            "type": "String -> Result.Result String Int"
          },
          {
            "name": "toList",
            "comment": " Convert a string to a list of characters.\n\n    toList \"abc\" == ['a','b','c']\n",
            "type": "String -> List Char"
          },
          {
            "name": "toLower",
            "comment": " Convert a string to all lower case. Useful for case-insensitive comparisons. ",
            "type": "String -> String"
          },
          {
            "name": "toUpper",
            "comment": " Convert a string to all upper case. Useful for case-insensitive comparisons\nand VIRTUAL YELLING.\n",
            "type": "String -> String"
          },
          {
            "name": "trim",
            "comment": " Get rid of whitespace on both sides of a string.\n\n    trim \"  hats  \\n\" == \"hats\"\n",
            "type": "String -> String"
          },
          {
            "name": "trimLeft",
            "comment": " Get rid of whitespace on the left of a string.\n\n    trimLeft \"  hats  \\n\" == \"hats  \\n\"\n",
            "type": "String -> String"
          },
          {
            "name": "trimRight",
            "comment": " Get rid of whitespace on the right of a string.\n\n    trimRight \"  hats  \\n\" == \"  hats\"\n",
            "type": "String -> String"
          },
          {
            "name": "uncons",
            "comment": " Split a non-empty string into its head and tail. This lets you\npattern match on strings exactly as you would with lists.\n\n    uncons \"abc\" == Just ('a',\"bc\")\n    uncons \"\"    == Nothing\n",
            "type": "String -> Maybe.Maybe ( Char, String )"
          },
          {
            "name": "words",
            "comment": " Break a string into words, splitting on chunks of whitespace.\n\n    words \"How are \\t you? \\n Good?\" == [\"How\",\"are\",\"you?\",\"Good?\"]\n",
            "type": "String -> List String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Text",
        "comment": " A library for styling and displaying text. While the\n[`String`](String) library focuses on representing and manipulating\nstrings of character strings, the `Text` library focuses on how those\nstrings should look on screen. It lets you make text bold or italic,\nset the typeface, set the text size, etc.\n\n# Text\n@docs Text\n\n# Creating Text\n@docs fromString, empty, append, concat, join\n\n# Links and Style\n@docs link, typeface, monospace, height, color, bold, italic, line, Line,\n    style, Style, defaultStyle\n\n",
        "aliases": [
          {
            "name": "Style",
            "comment": " Represents all the ways you can style `Text`. If the `typeface` list is\nempty or the `height` is `Nothing`, the users will fall back on their browser's\ndefault settings. The following `Style` is black, 16 pixel tall, underlined, and\nTimes New Roman (assuming that typeface is available on the user's computer):\n\n    { typeface = [ \"Times New Roman\", \"serif\" ]\n    , height   = Just 16\n    , color    = black\n    , bold     = False\n    , italic   = False\n    , line     = Just Under\n    }\n",
            "args": [],
            "type": "{ typeface : List String , height : Maybe.Maybe Float , color : Color.Color , bold : Bool , italic : Bool , line : Maybe.Maybe Text.Line }"
          }
        ],
        "types": [
          {
            "name": "Line",
            "comment": " Styles for lines on text. This allows you to add an underline, an overline,\nor a strike out text:\n\n    line Under   (fromString \"underline\")\n    line Over    (fromString \"overline\")\n    line Through (fromString \"strike out\")\n",
            "args": [],
            "cases": [
              [
                "Under",
                []
              ],
              [
                "Over",
                []
              ],
              [
                "Through",
                []
              ]
            ]
          },
          {
            "name": "Text",
            "comment": " Represents styled text. It can be rendered with collages or with elements.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "append",
            "comment": " Put two chunks of text together.\n\n    append (fromString \"hello \") (fromString \"world\") == fromString \"hello world\"\n",
            "type": "Text.Text -> Text.Text -> Text.Text"
          },
          {
            "name": "bold",
            "comment": " Make text bold.\n\n    fromString \"sometimes you want \" ++ bold (fromString \"emphasis\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "color",
            "comment": " Set the color of some text.\n\n    color red (fromString \"Red\")\n",
            "type": "Color.Color -> Text.Text -> Text.Text"
          },
          {
            "name": "concat",
            "comment": " Put many chunks of text together.\n\n    concat\n      [ fromString \"type \"\n      , bold (fromString \"Maybe\")\n      , fromString \" = Just a | Nothing\"\n      ]\n",
            "type": "List Text.Text -> Text.Text"
          },
          {
            "name": "defaultStyle",
            "comment": " Plain black text. It uses the browsers default typeface and text height.\nNo decorations are used.\n\n    { typeface = []\n    , height = Nothing\n    , color = black\n    , bold = False\n    , italic = False\n    , line = Nothing\n    }\n",
            "type": "Text.Style"
          },
          {
            "name": "empty",
            "comment": " Text with nothing in it.\n\n    empty = fromString \"\"\n",
            "type": "Text.Text"
          },
          {
            "name": "fromString",
            "comment": " Convert a string into text which can be styled and displayed. To show the\nstring `\"Hello World!\"` on screen in italics, you could say:\n\n    main = leftAligned (italic (fromString \"Hello World!\"))\n",
            "type": "String -> Text.Text"
          },
          {
            "name": "height",
            "comment": " Set the height of some text.\n\n    height 40 (fromString \"Title\")\n",
            "type": "Float -> Text.Text -> Text.Text"
          },
          {
            "name": "italic",
            "comment": " Make text italic.\n\n    fromString \"make it \" ++ italic (fromString \"important\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "join",
            "comment": " Put many chunks of text together with a separator.\n\n    chunks : List Text\n    chunks = List.map fromString [\"lions\",\"tigers\",\"bears\"]\n\n    join (fromString \", \") chunks == fromString \"lions, tigers, bears\"\n",
            "type": "Text.Text -> List Text.Text -> Text.Text"
          },
          {
            "name": "line",
            "comment": " Put lines on text.\n\n    line Under   (fromString \"underlined\")\n    line Over    (fromString \"overlined\")\n    line Through (fromString \"strike out\")\n",
            "type": "Text.Line -> Text.Text -> Text.Text"
          },
          {
            "name": "link",
            "comment": " Create a link by providing a URL and the text of the link.\n\n    link \"http://elm-lang.org\" (fromString \"Elm Website\")\n",
            "type": "String -> Text.Text -> Text.Text"
          },
          {
            "name": "monospace",
            "comment": " Switch to a monospace typeface. Good for code snippets.\n\n    monospace (fromString \"foldl (+) 0 [1,2,3]\")\n",
            "type": "Text.Text -> Text.Text"
          },
          {
            "name": "style",
            "comment": " Set the style of some text. For example, if you design a `Style` called\n`footerStyle` that is specifically for the bottom of your page, you could apply\nit to text like this:\n\n    style footerStyle (fromString \"the old prince / 2007\")\n",
            "type": "Text.Style -> Text.Text -> Text.Text"
          },
          {
            "name": "typeface",
            "comment": " Provide a list of preferred typefaces for some text.\n\n    [\"helvetica\",\"arial\",\"sans-serif\"]\n\nNot every browser has access to the same typefaces, so rendering will use the\nfirst typeface in the list that is found on the user's computer. If there are\nno matches, it will use their default typeface. This works the same as the CSS\nfont-family property.\n",
            "type": "List String -> Text.Text -> Text.Text"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Array",
        "comment": " A library for fast immutable arrays. The elements in an array must have the\nsame type. The arrays are implemented in Relaxed Radix Balanced-Trees for fast\nreads, updates, and appends.\n\n# Arrays\n@docs Array\n\n# Creating Arrays\n@docs empty, repeat, initialize, fromList\n\n# Basics\n@docs isEmpty, length, push, append\n\n# Get and Set\n@docs get, set\n\n# Taking Arrays Apart\n@docs slice, toList, toIndexedList\n\n# Mapping, Filtering, and Folding\n@docs map, indexedMap, filter, foldl, foldr\n",
        "aliases": [],
        "types": [
          {
            "name": "Array",
            "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "append",
            "comment": " Append two arrays to a new one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n",
            "type": "Array.Array a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "empty",
            "comment": " Return an empty array.\n\n    length empty == 0\n",
            "type": "Array.Array a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate:\n\n    filter isEven (fromList [1..6]) == (fromList [2,4,6])\n",
            "type": "(a -> Bool) -> Array.Array a -> Array.Array a"
          },
          {
            "name": "foldl",
            "comment": " Reduce an array from the left. Read `foldl` as &ldquo;fold from the left&rdquo;.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> Array.Array a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce an array from the right. Read `foldr` as &ldquo;fold from the right&rdquo;.\n\n    foldr (+) 0 (repeat 3 5) == 15\n",
            "type": "(a -> b -> b) -> b -> Array.Array a -> b"
          },
          {
            "name": "fromList",
            "comment": " Create an array from a list.\n",
            "type": "List a -> Array.Array a"
          },
          {
            "name": "get",
            "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Nothing\n\n",
            "type": "Int -> Array.Array a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n",
            "type": "(Int -> a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "initialize",
            "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n",
            "type": "Int -> (Int -> a) -> Array.Array a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n",
            "type": "Array.Array a -> Bool"
          },
          {
            "name": "length",
            "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n",
            "type": "Array.Array a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n",
            "type": "(a -> b) -> Array.Array a -> Array.Array b"
          },
          {
            "name": "push",
            "comment": " Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n",
            "type": "a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "repeat",
            "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n",
            "type": "Int -> a -> Array.Array a"
          },
          {
            "name": "set",
            "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "slice",
            "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n",
            "type": "Int -> Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "toIndexedList",
            "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n",
            "type": "Array.Array a -> List ( Int, a )"
          },
          {
            "name": "toList",
            "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n",
            "type": "Array.Array a -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random",
        "comment": " This library helps you generate pseudo-random values.\n\nThis library is all about building [`generators`](#Generator) for whatever\ntype of values you need. There are a bunch of primitive generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier\ngenerators with functions like [`list`](#list) and [`map`](#map).\n\nYou use a `Generator` by running the [`generate`](#generate) function. If you\nneed random values across many frames, you will probably want to store the\nmost recent seed in your application state.\n\n*Note:* This is an implementation of the Portable Combined Generator of\nL'Ecuyer for 32-bit computers. It is almost a direct translation from the\n[System.Random](http://hackage.haskell.org/package/random-1.0.1.1/docs/System-Random.html)\nmodule. It has a period of roughly 2.30584e18.\n\n# Generators\n@docs Generator\n\n# Primitive Generators\n@docs bool, int, float\n\n# Data Structure Generators\n@docs pair, list\n\n# Custom Generators\n@docs map, map2, map3, map4, map5, andThen\n\n# Run a Generator\n@docs generate, Seed, initialSeed\n\n# Constants\n@docs maxInt, minInt\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n\nTo actually *run* a generator and produce the random values, you need to use\nfunctions like [`generate`](#generate) and [`initialSeed`](#initialSeed).\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Seed",
            "comment": " A `Seed` is the source of randomness in this whole system. Whenever\nyou want to use a generator, you need to pair it with a seed.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain random operations, threading through the seed. In the following\nexample, we will generate a random letter by putting together uppercase and\nlowercase letters.\n\n    letter : Generator Char\n    letter =\n      bool `andThen` \\b ->\n        if b then uppercaseLetter else lowercaseLetter\n\n    -- bool : Generator Bool\n    -- uppercaseLetter : Generator Char\n    -- lowercaseLetter : Generator Char\n",
            "type": "Random.Generator a -> (a -> Random.Generator b) -> Random.Generator b"
          },
          {
            "name": "bool",
            "comment": " Create a generator that produces boolean values. The following example\nsimulates a coin flip that may land heads or tails.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n        map (\\b -> if b then Heads else Tails) bool\n",
            "type": "Random.Generator Bool"
          },
          {
            "name": "float",
            "comment": " Generate floats in a given range. The following example is a generator\nthat produces decimals between 0 and 1.\n\n    probability : Generator Float\n    probability =\n        float 0 1\n",
            "type": "Float -> Float -> Random.Generator Float"
          },
          {
            "name": "generate",
            "comment": " Generate a random value as specified by a given `Generator`.\n\nIn the following example, we are trying to generate a number between 0 and 100\nwith the `int 0 100` generator. Each time we call `generate` we need to provide\na seed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\nSo here it is done right, where we get a new seed from each `generate` call and\nthread that through.\n\n    seed0 = initialSeed 31415\n\n    -- generate (int 0 100) seed0 ==> (42, seed1)\n    -- generate (int 0 100) seed1 ==> (31, seed2)\n    -- generate (int 0 100) seed2 ==> (99, seed3)\n\nNotice that we use different seeds on each line. This is important! If you use\nthe same seed, you get the same results.\n\n    -- generate (int 0 100) seed0 ==> (42, seed1)\n    -- generate (int 0 100) seed0 ==> (42, seed1)\n    -- generate (int 0 100) seed0 ==> (42, seed1)\n",
            "type": "Random.Generator a -> Random.Seed -> ( a, Random.Seed )"
          },
          {
            "name": "initialSeed",
            "comment": " Create a &ldquo;seed&rdquo; of randomness which makes it possible to\ngenerate random values. If you use the same seed many times, it will result\nin the same thing every time! A good way to get an unexpected seed is to use\nthe current time.\n",
            "type": "Int -> Random.Seed"
          },
          {
            "name": "int",
            "comment": " Generate 32-bit integers in a given range.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n",
            "type": "Int -> Int -> Random.Generator Int"
          },
          {
            "name": "list",
            "comment": " Create a list of random values.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n",
            "type": "Int -> Random.Generator a -> Random.Generator (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the values produced by a generator. The following examples show\nhow to generate booleans and letters based on a basic integer generator.\n\n    bool : Generator Bool\n    bool =\n      map ((==) 1) (int 0 1)\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n",
            "type": "(a -> b) -> Random.Generator a -> Random.Generator b"
          },
          {
            "name": "map2",
            "comment": " Combine two generators.\n\nThis function is used to define things like [`pair`](#pair) where you want to\nput two generators together.\n\n    pair : Generator a -> Generator b -> Generator (a,b)\n    pair genA genB =\n      map2 (,) genA genB\n\n",
            "type": "(a -> b -> c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"
          },
          {
            "name": "map3",
            "comment": " Combine three generators. This could be used to produce random colors.\n\n    import Color\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (int 0 360)) (float 0 1) (float 0 1)\n",
            "type": "(a -> b -> c -> d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"
          },
          {
            "name": "map4",
            "comment": " Combine four generators.\n",
            "type": "(a -> b -> c -> d -> e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"
          },
          {
            "name": "map5",
            "comment": " Combine five generators.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"
          },
          {
            "name": "maxInt",
            "comment": " The maximum value for randomly generated 32-bit ints. ",
            "type": "Int"
          },
          {
            "name": "minInt",
            "comment": " The minimum value for randomly generated 32-bit ints. ",
            "type": "Int"
          },
          {
            "name": "pair",
            "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n",
            "type": "Random.Generator a -> Random.Generator b -> Random.Generator ( a, b )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Task",
        "comment": " Tasks make it easy to describe asynchronous operations that may fail, like HTTP requests or writing to a database.\nFor more information, see the [Elm documentation on Tasks](http://elm-lang.org/guide/reactivity#tasks).\n\n# Basics\n@docs Task, succeed, fail\n\n# Mapping\n@docs map, map2, map3, map4, map5, andMap\n\n# Chaining\n@docs andThen, sequence\n\n# Errors\n@docs onError, mapError, toMaybe, fromMaybe, toResult, fromResult\n\n# Threads\n@docs spawn, sleep, ThreadID\n",
        "aliases": [],
        "types": [
          {
            "name": "Task",
            "comment": " Represents asynchronous effects that may fail. It is useful for stuff like\nHTTP.\n\nFor example, maybe we have a task with the type (`Task String User`). This means\nthat when we perform the task, it will either fail with a `String` message or\nsucceed with a `User`. So this could represent a task that is asking a server\nfor a certain user.\n",
            "args": [
              "x",
              "a"
            ],
            "cases": []
          },
          {
            "name": "ThreadID",
            "comment": " Abstract type that uniquely identifies a thread.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Put the results of two tasks together. If either task fails, the whole\nthing fails. It also runs in order so the first task will be completely\nfinished before the second task starts.\n\nThis function makes it possible to chain tons of tasks together and pipe them\nall into a single function.\n\n    (f `map` task1 `andMap` task2 `andMap` task3) == map3 f task1 task2 task3\n",
            "type": "Task.Task x (a -> b) -> Task.Task x a -> Task.Task x b"
          },
          {
            "name": "andThen",
            "comment": " Chain together a task and a callback. The first task will run, and if it is\nsuccessful, you give the result to the callback resulting in another task. This\ntask then gets run.\n\n    succeed 2 `andThen` (\\n -> succeed (n + 2)) == succeed 4\n\nThis is useful for chaining tasks together. Maybe you need to get a user from\nyour servers *and then* lookup their picture once you know their name.\n",
            "type": "Task.Task x a -> (a -> Task.Task x b) -> Task.Task x b"
          },
          {
            "name": "fail",
            "comment": " A task that fails immediately when run.\n\n    fail \"file not found\" : Task String a\n",
            "type": "x -> Task.Task x a"
          },
          {
            "name": "fromMaybe",
            "comment": " If you are chaining together a bunch of tasks, it may be useful to treat\na maybe value like a task.\n\n    fromMaybe \"file not found\" Nothing   == fail \"file not found\"\n    fromMaybe \"file not found\" (Just 42) == succeed 42\n",
            "type": "x -> Maybe.Maybe a -> Task.Task x a"
          },
          {
            "name": "fromResult",
            "comment": " If you are chaining together a bunch of tasks, it may be useful to treat\na result like a task.\n\n    fromResult (Err \"file not found\") == fail \"file not found\"\n    fromResult (Ok 42)                == succeed 42\n",
            "type": "Result.Result x a -> Task.Task x a"
          },
          {
            "name": "map",
            "comment": " Transform a task.\n\n    map sqrt (succeed 9) == succeed 3\n",
            "type": "(a -> b) -> Task.Task x a -> Task.Task x b"
          },
          {
            "name": "map2",
            "comment": " Put the results of two tasks together. If either task fails, the whole\nthing fails. It also runs in order so the first task will be completely\nfinished before the second task starts.\n\n    map2 (+) (succeed 9) (succeed 3) == succeed 12\n",
            "type": "(a -> b -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x e -> Task.Task x result"
          },
          {
            "name": "mapError",
            "comment": " Transform the error value. This can be useful if you need a bunch of error\ntypes to match up.\n\n    type Error = Http Http.Error | WebGL WebGL.Error\n\n    getResources : Task Error Resource\n    getResources =\n      sequence [ mapError Http serverTask, mapError WebGL textureTask ]\n",
            "type": "(x -> y) -> Task.Task x a -> Task.Task y a"
          },
          {
            "name": "onError",
            "comment": " Recover from a failure in a task. If the given task fails, we use the\ncallback to recover.\n\n    fail \"file not found\" `onError` (\\msg -> succeed 42) -- succeed 42\n    succeed 9 `onError` (\\msg -> succeed 42)             -- succeed 9\n",
            "type": "Task.Task x a -> (x -> Task.Task y a) -> Task.Task y a"
          },
          {
            "name": "sequence",
            "comment": " Start with a list of tasks, and turn them into a single task that returns a\nlist. The tasks will be run in order one-by-one and if any task fails the whole\nsequence fails.\n\n    sequence [ succeed 1, succeed 2 ] == succeed [ 1, 2 ]\n\nThis can be useful if you need to make a bunch of HTTP requests one-by-one.\n",
            "type": "List (Task.Task x a) -> Task.Task x (List a)"
          },
          {
            "name": "sleep",
            "comment": " Make a thread sleep for a certain amount of time. The following example\nsleeps for 1 second and then succeeds with 42.\n\n    sleep 1000 `andThen` \\_ -> succeed 42\n",
            "type": "Task.Time -> Task.Task x ()"
          },
          {
            "name": "spawn",
            "comment": " Run a task on a separate thread. This lets you start working with basic\nconcurrency. In the following example, `task1` and `task2` will be interleaved.\nIf `task1` makes a long HTTP request, we can hop over to `task2` and do some\nwork there.\n\n    spawn task1 `andThen` \\_ -> task2\n",
            "type": "Task.Task x a -> Task.Task y Task.ThreadID"
          },
          {
            "name": "succeed",
            "comment": " A task that succeeds immediately when run.\n\n    succeed 42    -- results in 42\n",
            "type": "a -> Task.Task x a"
          },
          {
            "name": "toMaybe",
            "comment": " Translate a task that can fail into a task that can never fail, by\nconverting any failure into `Nothing` and any success into `Just` something.\n\n    toMaybe (fail \"file not found\") == succeed Nothing\n    toMaybe (succeed 42)            == succeed (Just 42)\n\nThis means you can handle the error with the `Maybe` module instead.\n",
            "type": "Task.Task x a -> Task.Task never (Maybe.Maybe a)"
          },
          {
            "name": "toResult",
            "comment": " Translate a task that can fail into a task that can never fail, by\nconverting any failure into `Err` something and any success into `Ok` something.\n\n    toResult (fail \"file not found\") == succeed (Err \"file not found\")\n    toResult (succeed 42)            == succeed (Ok 42)\n\nThis means you can handle the error with the `Result` module instead.\n",
            "type": "Task.Task x a -> Task.Task never (Result.Result x a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Char",
        "comment": " Functions for working with characters. Character literals are enclosed in\n`'a'` pair of single quotes.\n\n# Classification\n@docs isUpper, isLower, isDigit, isOctDigit, isHexDigit\n\n# Conversion\n@docs toUpper, toLower, toLocaleUpper, toLocaleLower\n\n# Key Codes\n@docs KeyCode, toCode, fromCode\n\n",
        "aliases": [
          {
            "name": "KeyCode",
            "comment": " In this library, we use integers to represent the key codes coming from the\nkeyboard. You can use [`toCode`](#toCode) and [`fromCode`](#fromCode)\nto convert between key codes and characters.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "fromCode",
            "comment": " Convert from unicode. ",
            "type": "Char.KeyCode -> Char"
          },
          {
            "name": "isDigit",
            "comment": " True for ASCII digits `[0-9]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isHexDigit",
            "comment": " True for ASCII hexadecimal digits `[0-9a-fA-F]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isLower",
            "comment": " True for lower case letters. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isOctDigit",
            "comment": " True for ASCII octal digits `[0-7]`. ",
            "type": "Char -> Bool"
          },
          {
            "name": "isUpper",
            "comment": " True for upper case letters. ",
            "type": "Char -> Bool"
          },
          {
            "name": "toCode",
            "comment": " Convert to unicode. Used with the [`Keyboard`](Keyboard) library,\nwhich expects the input to be uppercase.\n",
            "type": "Char -> Char.KeyCode"
          },
          {
            "name": "toLocaleLower",
            "comment": " Convert to lower case, according to any locale-specific case mappings. ",
            "type": "Char -> Char"
          },
          {
            "name": "toLocaleUpper",
            "comment": " Convert to upper case, according to any locale-specific case mappings. ",
            "type": "Char -> Char"
          },
          {
            "name": "toLower",
            "comment": " Convert to lower case. ",
            "type": "Char -> Char"
          },
          {
            "name": "toUpper",
            "comment": " Convert to upper case. ",
            "type": "Char -> Char"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Color",
        "comment": " Library for working with colors. Includes\n[RGB](https://en.wikipedia.org/wiki/RGB_color_model) and\n[HSL](http://en.wikipedia.org/wiki/HSL_and_HSV) creation, gradients, and\nbuilt-in names.\n\n# Colors\n@docs Color\n\n# Creation\n@docs rgb, rgba, hsl, hsla, greyscale, grayscale, complement\n\n# Gradients\n@docs Gradient, linear, radial\n\n# Extracting Colors\n@docs toRgb, toHsl\n\n# Built-in Colors\nThese colors come from the [Tango\npalette](http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines)\nwhich provides aesthetically reasonable defaults for colors. Each color also\ncomes with a light and dark version.\n\n### Standard\n@docs red, orange, yellow, green, blue, purple, brown\n\n### Light\n@docs lightRed, lightOrange, lightYellow, lightGreen, lightBlue, lightPurple, lightBrown\n\n### Dark\n@docs darkRed, darkOrange, darkYellow, darkGreen, darkBlue, darkPurple, darkBrown\n\n### Eight Shades of Grey\nThese colors are a compatible series of shades of grey, fitting nicely\nwith the Tango palette.\n@docs white, lightGrey, grey, darkGrey, lightCharcoal, charcoal, darkCharcoal, black\n\nThese are identical to the *grey* versions. It seems the spelling is regional, but\nthat has never helped me remember which one I should be writing.\n@docs lightGray, gray, darkGray\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Color",
            "comment": " Representation of colors.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Gradient",
            "comment": " Abstract representation of a color gradient.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "black",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "blue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "brown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "charcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "complement",
            "comment": " Produce a &ldquo;complementary color&rdquo;. The two colors will\naccent each other. This is the same as rotating the hue by 180&deg;.\n",
            "type": "Color.Color -> Color.Color"
          },
          {
            "name": "darkBlue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkBrown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkCharcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGreen",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkGrey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkOrange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkPurple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkRed",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "darkYellow",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "gray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n",
            "type": "Float -> Color.Color"
          },
          {
            "name": "green",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "grey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "greyscale",
            "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n",
            "type": "Float -> Color.Color"
          },
          {
            "name": "hsl",
            "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives\nyou access to colors more like a color wheel, where all hues are arranged in a\ncircle that you specify with standard Elm angles (radians).\n\n    red   = hsl (degrees   0) 1 0.5\n    green = hsl (degrees 120) 1 0.5\n    blue  = hsl (degrees 240) 1 0.5\n\n    pastelRed = hsl (degrees 0) 0.7 0.7\n\nTo cycle through all colors, just cycle through degrees. The saturation level\nis how vibrant the color is, like a dial between grey and bright colors. The\nlightness level is a dial between white and black.\n",
            "type": "Float -> Float -> Float -> Color.Color"
          },
          {
            "name": "hsla",
            "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV)\nwith an alpha component for transparency.\n",
            "type": "Float -> Float -> Float -> Float -> Color.Color"
          },
          {
            "name": "lightBlue",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightBrown",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightCharcoal",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGray",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGreen",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightGrey",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightOrange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightPurple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightRed",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "lightYellow",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "linear",
            "comment": " Create a linear gradient. Takes a start and end point and then a series of\n&ldquo;color stops&rdquo; that indicate how to interpolate between the start and\nend points. See [this example](http://elm-lang.org/examples/linear-gradient) for a\nmore visual explanation.\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> List ( Float, Color.Color ) -> Color.Gradient"
          },
          {
            "name": "orange",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "purple",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "radial",
            "comment": " Create a radial gradient. First takes a start point and inner radius.  Then\ntakes an end point and outer radius. It then takes a series of &ldquo;color\nstops&rdquo; that indicate how to interpolate between the inner and outer\ncircles. See [this example](http://elm-lang.org/examples/radial-gradient) for a\nmore visual explanation.\n",
            "type": "( Float, Float ) -> Float -> ( Float, Float ) -> Float -> List ( Float, Color.Color ) -> Color.Gradient"
          },
          {
            "name": "red",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "rgb",
            "comment": " Create RGB colors from numbers between 0 and 255 inclusive. ",
            "type": "Int -> Int -> Int -> Color.Color"
          },
          {
            "name": "rgba",
            "comment": " Create RGB colors with an alpha component for transparency.\nThe alpha component is specified with numbers between 0 and 1. ",
            "type": "Int -> Int -> Int -> Float -> Color.Color"
          },
          {
            "name": "toHsl",
            "comment": " Extract the components of a color in the HSL format.\n",
            "type": "Color.Color -> { hue : Float , saturation : Float , lightness : Float , alpha : Float }"
          },
          {
            "name": "toRgb",
            "comment": " Extract the components of a color in the RGB format.\n",
            "type": "Color.Color -> { red : Int, green : Int, blue : Int, alpha : Float }"
          },
          {
            "name": "white",
            "comment": "",
            "type": "Color.Color"
          },
          {
            "name": "yellow",
            "comment": "",
            "type": "Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "List",
        "comment": " A library for manipulating lists of values. Every value in a\nlist must have the same type.\n\n# Basics\n@docs isEmpty, length, reverse, member\n\n# Sub-lists\n@docs head, tail, filter, take, drop\n\n# Putting Lists Together\n@docs repeat, (::), append, concat, intersperse\n\n# Taking Lists Apart\n@docs partition, unzip\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\nIf you can think of a legitimate use of `mapN` where `N` is 6 or more, please\nlet us know on [the list](https://groups.google.com/forum/#!forum/elm-discuss).\nThe current sentiment is that it is already quite error prone once you get to\n4 and possibly should be approached another way.\n\n# Special Maps\n@docs filterMap, concatMap, indexedMap\n\n# Folding\n@docs foldr, foldl\n\n# Special Folds\n@docs sum, product, maximum, minimum, all, any, scanl\n\n# Sorting\n@docs sort, sortBy, sortWith\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "::",
            "comment": " Add an element to the front of a list. Pronounced *cons*.\n\n    1 :: [2,3] == [1,2,3]\n    1 :: [] == [1]\n",
            "type": "a -> List a -> List a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "all",
            "comment": " Determine if all elements satisfy the predicate.\n\n    all isEven [2,4] == True\n    all isEven [2,3] == False\n    all isEven [] == True\n",
            "type": "(a -> Bool) -> List a -> Bool"
          },
          {
            "name": "any",
            "comment": " Determine if any elements satisfy the predicate.\n\n    any isEven [2,3] == True\n    any isEven [1,3] == False\n    any isEven [] == False\n",
            "type": "(a -> Bool) -> List a -> Bool"
          },
          {
            "name": "append",
            "comment": " Put two lists together.\n\n    append [1,1,2] [3,5,8] == [1,1,2,3,5,8]\n    append ['a','b'] ['c'] == ['a','b','c']\n",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "concat",
            "comment": " Concatenate a bunch of lists into a single list:\n\n    concat [[1,2],[3],[4,5]] == [1,2,3,4,5]\n",
            "type": "List (List a) -> List a"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a list and flatten the resulting lists.\n\n    concatMap f xs == concat (map f xs)\n",
            "type": "(a -> List b) -> List a -> List b"
          },
          {
            "name": "drop",
            "comment": " Drop the first *n* members of a list.\n\n    drop 2 [1,2,3,4] == [3,4]\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "filter",
            "comment": " Keep only elements that satisfy the predicate.\n\n    filter isEven [1..6] == [2,4,6]\n",
            "type": "(a -> Bool) -> List a -> List a"
          },
          {
            "name": "filterMap",
            "comment": " Apply a function that may succeed to all values in the list, but only keep\nthe successes.\n\n    String.toInt : String -> Maybe Int\n\n    filterMap String.toInt [\"3\", \"4.0\", \"5\", \"hats\"] == [3,5]\n",
            "type": "(a -> Maybe.Maybe b) -> List a -> List b"
          },
          {
            "name": "foldl",
            "comment": " Reduce a list from the left.\n\n    foldl (::) [] [1,2,3] == [3,2,1]\n",
            "type": "(a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "foldr",
            "comment": " Reduce a list from the right.\n\n    foldr (+) 0 [1,2,3] == 6\n",
            "type": "(a -> b -> b) -> b -> List a -> b"
          },
          {
            "name": "head",
            "comment": " Extract the first element of a list.\n\n    head [1,2,3] == Just 1\n    head [] == Nothing\n",
            "type": "List a -> Maybe.Maybe a"
          },
          {
            "name": "indexedMap",
            "comment": " Same as `map` but the function is also applied to the index of each\nelement (starting at zero).\n\n    indexedMap (,) [\"Tom\",\"Sue\",\"Bob\"] == [ (0,\"Tom\"), (1,\"Sue\"), (2,\"Bob\") ]\n",
            "type": "(Int -> a -> b) -> List a -> List b"
          },
          {
            "name": "intersperse",
            "comment": " Places the given value between all members of the given list.\n\n    intersperse \"on\" [\"turtles\",\"turtles\",\"turtles\"] == [\"turtles\",\"on\",\"turtles\",\"on\",\"turtles\"]\n",
            "type": "a -> List a -> List a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a list is empty.\n\n    isEmpty [] == True\n",
            "type": "List a -> Bool"
          },
          {
            "name": "length",
            "comment": " Determine the length of a list.\n\n    length [1,2,3] == 3\n",
            "type": "List a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to every element of a list.\n\n    map sqrt [1,4,9] == [1,2,3]\n\n    map not [True,False,True] == [False,True,False]\n",
            "type": "(a -> b) -> List a -> List b"
          },
          {
            "name": "map2",
            "comment": " Combine two lists, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n\n    pairs : List a -> List b -> List (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights\n",
            "type": "(a -> b -> result) -> List a -> List b -> List result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> List a -> List b -> List c -> List result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> List a -> List b -> List c -> List d -> List result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> List a -> List b -> List c -> List d -> List e -> List result"
          },
          {
            "name": "maximum",
            "comment": " Find the maximum element in a non-empty list.\n\n    maximum [1,4,2] == Just 4\n    maximum []      == Nothing\n",
            "type": "List comparable -> Maybe.Maybe comparable"
          },
          {
            "name": "member",
            "comment": " Figure out whether a list contains a value.\n\n    member 9 [1,2,3,4] == False\n    member 4 [1,2,3,4] == True\n",
            "type": "a -> List a -> Bool"
          },
          {
            "name": "minimum",
            "comment": " Find the minimum element in a non-empty list.\n\n    minimum [3,2,1] == Just 1\n    minimum []      == Nothing\n",
            "type": "List comparable -> Maybe.Maybe comparable"
          },
          {
            "name": "partition",
            "comment": " Partition a list based on a predicate. The first list contains all values\nthat satisfy the predicate, and the second list contains all the value that do\nnot.\n\n    partition (\\x -> x < 3) [0..5] == ([0,1,2], [3,4,5])\n    partition isEven        [0..5] == ([0,2,4], [1,3,5])\n",
            "type": "(a -> Bool) -> List a -> ( List a, List a )"
          },
          {
            "name": "product",
            "comment": " Get the product of the list elements.\n\n    product [1..4] == 24\n",
            "type": "List number -> number"
          },
          {
            "name": "repeat",
            "comment": " Create a list with *n* copies of a value:\n\n    repeat 3 (0,0) == [(0,0),(0,0),(0,0)]\n",
            "type": "Int -> a -> List a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a list.\n\n    reverse [1..4] == [4,3,2,1]\n",
            "type": "List a -> List a"
          },
          {
            "name": "scanl",
            "comment": " Reduce a list from the left, building up all of the intermediate results into a list.\n\n    scanl (+) 0 [1,2,3,4] == [0,1,3,6,10]\n",
            "type": "(a -> b -> b) -> b -> List a -> List b"
          },
          {
            "name": "sort",
            "comment": " Sort values from lowest to highest\n\n    sort [3,1,5] == [1,3,5]\n",
            "type": "List comparable -> List comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort values by a derived property.\n\n    alice = { name=\"Alice\", height=1.62 }\n    bob   = { name=\"Bob\"  , height=1.85 }\n    chuck = { name=\"Chuck\", height=1.76 }\n\n    sortBy .name   [chuck,alice,bob] == [alice,bob,chuck]\n    sortBy .height [chuck,alice,bob] == [alice,chuck,bob]\n\n    sortBy String.length [\"mouse\",\"cat\"] == [\"cat\",\"mouse\"]\n",
            "type": "(a -> comparable) -> List a -> List a"
          },
          {
            "name": "sortWith",
            "comment": " Sort values with a custom comparison function.\n\n    sortWith flippedComparison [1..5] == [5,4,3,2,1]\n\n    flippedComparison a b =\n        case compare a b of\n          LT -> GT\n          EQ -> EQ\n          GT -> LT\n\nThis is also the most general sort function, allowing you\nto define any other: `sort == sortWith compare`\n",
            "type": "(a -> a -> Basics.Order) -> List a -> List a"
          },
          {
            "name": "sum",
            "comment": " Get the sum of the list elements.\n\n    sum [1..4] == 10\n",
            "type": "List number -> number"
          },
          {
            "name": "tail",
            "comment": " Extract the rest of the list.\n\n    tail [1,2,3] == Just [2,3]\n    tail [] == Nothing\n",
            "type": "List a -> Maybe.Maybe (List a)"
          },
          {
            "name": "take",
            "comment": " Take the first *n* members of a list.\n\n    take 2 [1,2,3,4] == [1,2]\n",
            "type": "Int -> List a -> List a"
          },
          {
            "name": "unzip",
            "comment": " Decompose a list of tuples into a tuple of lists.\n\n    unzip [(0, True), (17, False), (1337, True)] == ([0,17,1337], [True,False,True])\n",
            "type": "List ( a, b ) -> ( List a, List b )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Regex",
        "comment": " A library for working with regular expressions. It uses [the\nsame kind of regular expressions accepted by JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n# Create\n@docs Regex, regex, escape, caseInsensitive\n\n# Helpful Data Structures\n\nThese data structures are needed to help define functions like [`find`](#find)\nand [`replace`](#replace).\n\n@docs HowMany, Match\n\n# Use\n@docs contains, find, replace, split\n\n",
        "aliases": [
          {
            "name": "Match",
            "comment": " A `Match` represents all of the details about a particular match in a string.\nHere are details on each field:\n\n  * `match` &mdash; the full string of the match.\n  * `submatches` &mdash; a regex might have [subpatterns, surrounded by\n    parentheses](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Parenthesized_Substring_Matches).\n    If there are N subpatterns, there will be N elements in the `submatches` list.\n    Each submatch in this list is a `Maybe` because not all subpatterns may trigger.\n    For example, `(regex \"(a+)|(b+)\")` will either match many `a`&rsquo;s or\n    many `b`&rsquo;s, but never both.\n  * `index` &mdash; the index of the match in the original string.\n  * `number` &mdash; if you find many matches, you can think of each one\n    as being labeled with a `number` starting at one. So the first time you\n    find a match, that is match `number` one. Second time is match `number` two.\n    This is useful when paired with `replace All` if replacement is dependent on how\n    many times a pattern has appeared before.\n",
            "args": [],
            "type": "{ match : String , submatches : List (Maybe.Maybe String) , index : Int , number : Int }"
          }
        ],
        "types": [
          {
            "name": "HowMany",
            "comment": " `HowMany` is used to specify how many matches you want to make. So\n`replace All` would replace every match, but `replace (AtMost 2)` would\nreplace at most two matches (i.e. zero, one, two, but never three or more).\n",
            "args": [],
            "cases": [
              [
                "All",
                []
              ],
              [
                "AtMost",
                [
                  "Int"
                ]
              ]
            ]
          },
          {
            "name": "Regex",
            "comment": " A regular expression, describing a certain set of strings.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "caseInsensitive",
            "comment": " Make a regex case insensitive ",
            "type": "Regex.Regex -> Regex.Regex"
          },
          {
            "name": "contains",
            "comment": " Check to see if a Regex is contained in a string.\n\n    contains (regex \"123\") \"12345\" == True\n    contains (regex \"b+\") \"aabbcc\" == True\n\n    contains (regex \"789\") \"12345\" == False\n    contains (regex \"z+\") \"aabbcc\" == False\n",
            "type": "Regex.Regex -> String -> Bool"
          },
          {
            "name": "escape",
            "comment": " Escape strings to be regular expressions, making all special characters\nsafe. So `regex (escape \"^a+\")` will match exactly `\"^a+\"` instead of a series\nof `a`&rsquo;s that start at the beginning of the line.\n",
            "type": "String -> String"
          },
          {
            "name": "find",
            "comment": " Find matches in a string:\n\n    findTwoCommas = find (AtMost 2) (regex \",\")\n\n      -- map .index (findTwoCommas \"a,b,c,d,e\") == [1,3]\n      -- map .index (findTwoCommas \"a b c d e\") == []\n\n    places = find All (regex \"[oi]n a (\\\\w+)\") \"I am on a boat in a lake.\"\n\n      -- map .match places == [\"on a boat\", \"in a lake\"]\n      -- map .submatches places == [ [Just \"boat\"], [Just \"lake\"] ]\n",
            "type": "Regex.HowMany -> Regex.Regex -> String -> List Regex.Match"
          },
          {
            "name": "regex",
            "comment": " Create a Regex that matches patterns [as specified in JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Writing_a_Regular_Expression_Pattern).\n\nBe careful to escape backslashes properly! For example, `\"\\w\"` is escaping the\nletter `w` which is probably not what you want. You probably want `\"\\\\w\"`\ninstead, which escapes the backslash.\n",
            "type": "String -> Regex.Regex"
          },
          {
            "name": "replace",
            "comment": " Replace matches. The function from `Match` to `String` lets\nyou use the details of a specific match when making replacements.\n\n    devowel = replace All (regex \"[aeiou]\") (\\_ -> \"\")\n\n      -- devowel \"The quick brown fox\" == \"Th qck brwn fx\"\n\n    reverseWords = replace All (regex \"\\\\w+\") (\\{match} -> String.reverse match)\n\n      -- reverseWords \"deliver mined parts\" == \"reviled denim strap\"\n",
            "type": "Regex.HowMany -> Regex.Regex -> (Regex.Match -> String) -> String -> String"
          },
          {
            "name": "split",
            "comment": " Split a string, using the regex as the separator.\n\n    split (AtMost 1) (regex \",\") \"tom,99,90,85\" == [\"tom\",\"99,90,85\"]\n\n    split All (regex \",\") \"a,b,c,d\" == [\"a\",\"b\",\"c\",\"d\"]\n",
            "type": "Regex.HowMany -> Regex.Regex -> String -> List String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Result",
        "comment": " A `Result` is the result of a computation that may fail. This is a great\nway to manage errors in Elm.\n\n# Type and Constructors\n@docs Result\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs andThen\n\n# Handling Errors\n@docs withDefault, toMaybe, fromMaybe, formatError\n",
        "aliases": [],
        "types": [
          {
            "name": "Result",
            "comment": " A `Result` is either `Ok` meaning the computation succeeded, or it is an\n`Err` meaning that there was some failure.\n",
            "args": [
              "error",
              "value"
            ],
            "cases": [
              [
                "Ok",
                [
                  "value"
                ]
              ],
              [
                "Err",
                [
                  "error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together a sequence of computations that may fail. It is helpful\nto see its definition:\n\n    andThen : Result e a -> (a -> Result e b) -> Result e b\n    andThen result callback =\n        case result of\n          Ok value -> callback value\n          Err msg -> Err msg\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`toInt : String -> Result String Int`) to parse\na month and make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Result String Int\n    toValidMonth month =\n        if month >= 1 && month <= 12\n            then Ok month\n            else Err \"months must be between 1 and 12\"\n\n    toMonth : String -> Result String Int\n    toMonth rawString =\n        toInt rawString `andThen` toValidMonth\n\n    -- toMonth \"4\" == Ok 4\n    -- toMonth \"9\" == Ok 9\n    -- toMonth \"a\" == Err \"cannot parse to an Int\"\n    -- toMonth \"0\" == Err \"months must be between 1 and 12\"\n\nThis allows us to come out of a chain of operations with quite a specific error\nmessage. It is often best to create a custom type that explicitly represents\nthe exact ways your computation may fail. This way it is easy to handle in your\ncode.\n",
            "type": "Result.Result x a -> (a -> Result.Result x b) -> Result.Result x b"
          },
          {
            "name": "formatError",
            "comment": " Format the error value of a result. If the result is `Ok`, it stays exactly\nthe same, but if the result is an `Err` we will format the error. For example,\nsay the errors we get have too much information:\n\n    parseInt : String -> Result ParseError Int\n\n    type ParseError =\n        { message : String\n        , code : Int\n        , position : (Int,Int)\n        }\n\n    formatError .message (parseInt \"123\") == Ok 123\n    formatError .message (parseInt \"abc\") == Err \"char 'a' is not a number\"\n",
            "type": "(error -> error') -> Result.Result error a -> Result.Result error' a"
          },
          {
            "name": "fromMaybe",
            "comment": " Convert from a simple `Maybe` to interact with some code that primarily\nuses `Results`.\n\n    parseInt : String -> Maybe Int\n\n    resultParseInt : String -> Result String Int\n    resultParseInt string =\n        fromMaybe (\"error parsing string: \" ++ toString string) (parseInt string)\n",
            "type": "x -> Maybe.Maybe a -> Result.Result x a"
          },
          {
            "name": "map",
            "comment": " Apply a function to a result. If the result is `Ok`, it will be converted.\nIf the result is an `Err`, the same error value will propagate through.\n\n    map sqrt (Ok 4.0)          == Ok 2.0\n    map sqrt (Err \"bad input\") == Err \"bad input\"\n",
            "type": "(a -> value) -> Result.Result x a -> Result.Result x value"
          },
          {
            "name": "map2",
            "comment": " Apply a function to two results, if both results are `Ok`. If not,\nthe first argument which is an `Err` will propagate through.\n\n    map2 (+) (String.toInt \"1\") (String.toInt \"2\") == Ok 3\n    map2 (+) (String.toInt \"1\") (String.toInt \"y\") == Err \"could not convert string 'y' to an Int\"\n    map2 (+) (String.toInt \"x\") (String.toInt \"y\") == Err \"could not convert string 'x' to an Int\"\n",
            "type": "(a -> b -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x value"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x e -> Result.Result x value"
          },
          {
            "name": "toMaybe",
            "comment": " Convert to a simpler `Maybe` if the actual error message is not needed or\nyou need to interact with some code that primarily uses maybes.\n\n    parseInt : String -> Result ParseError Int\n\n    maybeParseInt : String -> Maybe Int\n    maybeParseInt string =\n        toMaybe (parseInt string)\n",
            "type": "Result.Result x a -> Maybe.Maybe a"
          },
          {
            "name": "withDefault",
            "comment": " If the result is `Ok` return the value, but if the result is an `Err` then\nreturn a given default value. The following examples try to parse integers.\n\n    Result.withDefault 0 (String.toInt \"123\") == 123\n    Result.withDefault 0 (String.toInt \"abc\") == 0\n",
            "type": "a -> Result.Result x a -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Transform2D",
        "comment": " A library for performing [2D matrix transformations][affine].  It\nis used primarily with the `groupTransform` function from\n[`Graphics.Collage`](Graphics-Collage) and allows you to do things\nlike rotation, scaling, translation, shearing, and reflection.\n\nNote that all the matrices in this library are 3x3 matrices of homogeneous\ncoordinates, used for [affine transformations][affine]. Since the bottom row as\nalways `0 0 1` in these matrices, it is omitted in the diagrams below.\n\n [affine]: http://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\n\n# Transforms\n@docs Transform2D, identity, matrix, rotation, translation, scale, scaleX, scaleY\n\n# Multiplication\n@docs multiply\n",
        "aliases": [],
        "types": [
          {
            "name": "Transform2D",
            "comment": " A matrix representing a 2D transformation.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "identity",
            "comment": " Create an identity transform. Transforming by the identity does\nnot change anything, but it can come in handy as a default or\nbase case.\n\n        / 1 0 0 \\\n        \\ 0 1 0 /\n",
            "type": "Transform2D.Transform2D"
          },
          {
            "name": "matrix",
            "comment": " Create a transformation matrix. This lets you create transforms\nsuch as scales, shears, reflections, and translations.\n\n    matrix a b c d x y\n\n        / a b x \\\n        \\ c d y /\n\nNote that `x` and `y` are the translation values.\n",
            "type": "Float -> Float -> Float -> Float -> Float -> Float -> Transform2D.Transform2D"
          },
          {
            "name": "multiply",
            "comment": " Multiply two transforms together.\n\n    multiply m n\n\n        / ma mb mx \\     / na nb nx \\\n        | mc md my |  .  | nc nd ny |\n        \\  0  0  1 /     \\  0  0  1 /\n",
            "type": "Transform2D.Transform2D -> Transform2D.Transform2D -> Transform2D.Transform2D"
          },
          {
            "name": "rotation",
            "comment": " Create a [rotation matrix](http://en.wikipedia.org/wiki/Rotation_matrix).\nGiven an angle t, it creates a counterclockwise rotation matrix:\n\n    rotation t\n\n        / cos t  -sin t  0 \\\n        \\ sin t   cos t  0 /\n",
            "type": "Float -> Transform2D.Transform2D"
          },
          {
            "name": "scale",
            "comment": " Creates a transformation matrix for scaling by a all directions.\n\n    scale s\n\n      / s 0 0 \\\n      \\ 0 s 0 /\n",
            "type": "Float -> Transform2D.Transform2D"
          },
          {
            "name": "scaleX",
            "comment": " Create a transformation for horizontal scaling. ",
            "type": "Float -> Transform2D.Transform2D"
          },
          {
            "name": "scaleY",
            "comment": " Create a transformation for vertical scaling. ",
            "type": "Float -> Transform2D.Transform2D"
          },
          {
            "name": "translation",
            "comment": " Create a transformation matrix for translation.\n\n    translation x y\n\n        / 1 0 x \\\n        \\ 0 1 y /\n",
            "type": "Float -> Float -> Transform2D.Transform2D"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Bitwise",
        "comment": " Library for [bitwise operations](http://en.wikipedia.org/wiki/Bitwise_operation).\n\n# Basic Operations\n\n@docs and, or, xor, complement\n\n# Bit Shifts\n\n@docs shiftLeft, shiftRight, shiftRightLogical\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "and",
            "comment": " Bitwise AND\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "complement",
            "comment": " Flip each bit individually, often called bitwise NOT\n",
            "type": "Int -> Int"
          },
          {
            "name": "or",
            "comment": " Bitwise OR\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftLeft",
            "comment": " Shift bits to the left by a given offset, filling new bits with zeros.\nThis can be used to multiply numbers by powers of two.\n\n    8 `shiftLeft` 1 == 16\n    8 `shiftLeft` 2 == 32\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftRight",
            "comment": " Shift bits to the right by a given offset, filling new bits with\nwhatever is the topmost bit. This can be used to divide numbers by powers of two.\n\n     32 `shiftRight` 1 == 16\n     32 `shiftRight` 2 == 8\n    -32 `shiftRight` 1 == -16\n\nThis is called an [arithmetic right\nshift](http://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift),\noften written (>>), and sometimes called a sign-propagating\nright shift because it fills empty spots with copies of the highest bit.\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "shiftRightLogical",
            "comment": " Shift bits to the right by a given offset, filling new bits with\nzeros.\n\n     32 `shiftRightLogical` 1 == 16\n     32 `shiftRightLogical` 2 == 8\n    -32 `shiftRightLogical` 1 == 2147483632\n\nThis is called an [logical right\nshift](http://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift), often written (>>>),\nand sometimes called a zero-fill right shift because it fills empty spots\nwith zeros.\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "xor",
            "comment": " Bitwise XOR\n",
            "type": "Int -> Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Basics",
        "comment": " Tons of useful functions that get imported by default.\n\n# Equality\n@docs (==), (/=)\n\n# Comparison\n\nThese functions only work on `comparable` types. This includes numbers,\ncharacters, strings, lists of comparable things, and tuples of comparable\nthings. Note that tuples with 7 or more elements are not comparable; why\nare your tuples so big?\n\n@docs (<), (>), (<=), (>=), max, min, Order, compare\n\n# Booleans\n@docs not, (&&), (||), xor\n\n# Mathematics\n@docs (+), (-), (*), (/), (^), (//), rem, (%), negate, abs, sqrt, clamp, logBase, e\n\n# Trigonometry\n@docs pi, cos, sin, tan, acos, asin, atan, atan2\n\n# Number Conversions\n@docs round, floor, ceiling, truncate, toFloat\n\n# Angle Conversions\nAll angle conversions result in &ldquo;standard Elm angles&rdquo;\nwhich happen to be radians.\n\n@docs degrees, radians, turns\n\n# Polar Coordinates\n@docs toPolar, fromPolar\n\n# Floating Point Checks\n@docs isNaN, isInfinite\n\n# Strings and Lists\n@docs toString, (++)\n\n# Tuples\n@docs fst, snd\n\n# Higher-Order Helpers\n@docs identity, always, (<|), (|>), (<<), (>>), flip, curry, uncurry\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Order",
            "comment": " Represents the relative ordering of two things.\nThe relations are less than, equal to, and greater than.\n",
            "args": [],
            "cases": [
              [
                "LT",
                []
              ],
              [
                "EQ",
                []
              ],
              [
                "GT",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "%",
            "comment": " Perform [modular arithmetic](http://en.wikipedia.org/wiki/Modular_arithmetic).\n\n     7 % 2 == 1\n    -1 % 4 == 3\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "&&",
            "comment": " The logical AND operator. `True` if both inputs are `True`.\nThis operator short-circuits to `False` if the first argument is `False`.\n",
            "type": "Bool -> Bool -> Bool",
            "associativity": "right",
            "precedence": 3
          },
          {
            "name": "*",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "+",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 6
          },
          {
            "name": "++",
            "comment": " Put two appendable things together. This includes strings, lists, and text.\n\n    \"hello\" ++ \"world\" == \"helloworld\"\n    [1,1,2] ++ [3,5,8] == [1,1,2,3,5,8]\n",
            "type": "appendable -> appendable -> appendable",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "-",
            "comment": "",
            "type": "number -> number -> number",
            "associativity": "left",
            "precedence": 6
          },
          {
            "name": "/",
            "comment": " Floating point division. ",
            "type": "Float -> Float -> Float",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "//",
            "comment": " Integer division. The remainder is discarded. ",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "/=",
            "comment": "",
            "type": "a -> a -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<<",
            "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    not << isEven << sqrt\n\nYou can think of this operator as equivalent to the following:\n\n    (g << f)  ==  (\\x -> g (f x))\n\nSo our example expands out to something like this:\n\n    \\n -> not (isEven (sqrt n))\n",
            "type": "(b -> c) -> (a -> b) -> a -> c",
            "associativity": "right",
            "precedence": 9
          },
          {
            "name": "<=",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": "<|",
            "comment": " Backward function application `f <| x == f x`. This function is useful for\navoiding parenthesis. Consider the following code to create a text element:\n\n    leftAligned (monospace (fromString \"code\"))\n\nThis can also be written as:\n\n    leftAligned << monospace <| fromString \"code\"\n",
            "type": "(a -> b) -> a -> b",
            "associativity": "right",
            "precedence": 0
          },
          {
            "name": "==",
            "comment": "",
            "type": "a -> a -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">=",
            "comment": "",
            "type": "comparable -> comparable -> Bool",
            "associativity": "non",
            "precedence": 4
          },
          {
            "name": ">>",
            "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    sqrt >> isEven >> not\n\nThis direction of function composition seems less pleasant than `(<<)` which\nreads nicely in expressions like: `filter (not << isRegistered) students`\n",
            "type": "(a -> b) -> (b -> c) -> a -> c",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "^",
            "comment": " Exponentiation\n\n    3^2 == 9\n",
            "type": "number -> number -> number",
            "associativity": "right",
            "precedence": 8
          },
          {
            "name": "abs",
            "comment": " Take the absolute value of a number. ",
            "type": "number -> number"
          },
          {
            "name": "acos",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "always",
            "comment": " Create a [constant function](http://en.wikipedia.org/wiki/Constant_function),\na function that *always* returns the same value regardless of what input you give.\nIt is defined as:\n\n    always a b = a\n\nIt totally ignores the second argument, so `always 42` is a function that always\nreturns 42. When you are dealing with higher-order functions, this comes in\nhandy more often than you might expect. For example, creating a zeroed out list\nof length ten would be:\n\n    map (always 0) [0..9]\n",
            "type": "a -> b -> a"
          },
          {
            "name": "asin",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "atan",
            "comment": " You probably do not want to use this. It takes `(y/x)` as the\nargument, so there is no way to know whether the negative signs comes from\nthe `y` or `x`. Thus, the resulting angle is always between &pi;/2 and -&pi;/2\n(in quadrants I and IV). You probably want to use `atan2` instead.\n",
            "type": "Float -> Float"
          },
          {
            "name": "atan2",
            "comment": " This helps you find the angle of a Cartesian coordinate.\nYou will almost certainly want to use this instead of `atan`.\nSo `atan2 y x` computes *atan(y/x)* but also keeps track of which\nquadrant the angle should really be in. The result will be between\n&pi; and -&pi;, giving you the full range of angles.\n",
            "type": "Float -> Float -> Float"
          },
          {
            "name": "ceiling",
            "comment": " Ceiling function, rounding up. ",
            "type": "Float -> Int"
          },
          {
            "name": "clamp",
            "comment": " Clamps a number within a given range. With the expression\n`clamp 100 200 x` the results are as follows:\n\n    100     if x < 100\n     x      if 100 <= x < 200\n    200     if 200 <= x\n",
            "type": "number -> number -> number -> number"
          },
          {
            "name": "compare",
            "comment": " Compare any two comparable values. Comparable values include `String`, `Char`,\n`Int`, `Float`, `Time`, or a list or tuple containing comparable values.\nThese are also the only values that work as `Dict` keys or `Set` members.\n",
            "type": "comparable -> comparable -> Basics.Order"
          },
          {
            "name": "cos",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "curry",
            "comment": " Change how arguments are passed to a function.\nThis splits paired arguments into two separate arguments.\n",
            "type": "(( a, b ) -> c) -> a -> b -> c"
          },
          {
            "name": "degrees",
            "comment": " Convert degrees to standard Elm angles (radians). ",
            "type": "Float -> Float"
          },
          {
            "name": "e",
            "comment": " An approximation of e. ",
            "type": "Float"
          },
          {
            "name": "flip",
            "comment": " Flip the order of the first two arguments to a function. ",
            "type": "(a -> b -> c) -> b -> a -> c"
          },
          {
            "name": "floor",
            "comment": " Floor function, rounding down. ",
            "type": "Float -> Int"
          },
          {
            "name": "fromPolar",
            "comment": " Convert polar coordinates (r,&theta;) to Cartesian coordinates (x,y). ",
            "type": "( Float, Float ) -> ( Float, Float )"
          },
          {
            "name": "fst",
            "comment": " Given a 2-tuple, returns the first value. ",
            "type": "( a, b ) -> a"
          },
          {
            "name": "identity",
            "comment": " Given a value, returns exactly the same value. This is called\n[the identity function](http://en.wikipedia.org/wiki/Identity_function).\n",
            "type": "a -> a"
          },
          {
            "name": "isInfinite",
            "comment": " Determine whether a float is positive or negative infinity.\n\n    isInfinite (0/0)     == False\n    isInfinite (sqrt -1) == False\n    isInfinite (1/0)     == True\n    isInfinite 1         == False\n\nNotice that NaN is not infinite! For float `n` to be finite implies that\n`not (isInfinite n || isNaN n)` evaluates to `True`.\n",
            "type": "Float -> Bool"
          },
          {
            "name": "isNaN",
            "comment": " Determine whether a float is an undefined or unrepresentable number.\nNaN stands for *not a number* and it is [a standardized part of floating point\nnumbers](http://en.wikipedia.org/wiki/NaN).\n\n    isNaN (0/0)     == True\n    isNaN (sqrt -1) == True\n    isNaN (1/0)     == False  -- infinity is a number\n    isNaN 1         == False\n",
            "type": "Float -> Bool"
          },
          {
            "name": "logBase",
            "comment": " Calculate the logarithm of a number with a given base.\n\n    logBase 10 100 == 2\n    logBase 2 256 == 8\n",
            "type": "Float -> Float -> Float"
          },
          {
            "name": "max",
            "comment": " Find the larger of two comparables. ",
            "type": "comparable -> comparable -> comparable"
          },
          {
            "name": "min",
            "comment": " Find the smaller of two comparables. ",
            "type": "comparable -> comparable -> comparable"
          },
          {
            "name": "negate",
            "comment": " Negate a number.\n\n    negate 42 == -42\n    negate -42 == 42\n    negate 0 == 0\n",
            "type": "number -> number"
          },
          {
            "name": "not",
            "comment": " Negate a boolean value.\n\n    not True == False\n    not False == True\n",
            "type": "Bool -> Bool"
          },
          {
            "name": "pi",
            "comment": " An approximation of pi. ",
            "type": "Float"
          },
          {
            "name": "radians",
            "comment": " Convert radians to standard Elm angles (radians). ",
            "type": "Float -> Float"
          },
          {
            "name": "rem",
            "comment": " Find the remainder after dividing one number by another.\n\n     7 `rem` 2 == 1\n    -1 `rem` 4 == -1\n",
            "type": "Int -> Int -> Int",
            "associativity": "left",
            "precedence": 7
          },
          {
            "name": "round",
            "comment": " Round a number to the nearest integer. ",
            "type": "Float -> Int"
          },
          {
            "name": "sin",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "snd",
            "comment": " Given a 2-tuple, returns the second value. ",
            "type": "( a, b ) -> b"
          },
          {
            "name": "sqrt",
            "comment": " Take the square root of a number. ",
            "type": "Float -> Float"
          },
          {
            "name": "tan",
            "comment": "",
            "type": "Float -> Float"
          },
          {
            "name": "toFloat",
            "comment": " Convert an integer into a float. ",
            "type": "Int -> Float"
          },
          {
            "name": "toPolar",
            "comment": " Convert Cartesian coordinates (x,y) to polar coordinates (r,&theta;). ",
            "type": "( Float, Float ) -> ( Float, Float )"
          },
          {
            "name": "toString",
            "comment": " Turn any kind of value into a string. When you view the resulting string\nwith `Text.fromString` it should look just like the value it came from.\n\n    toString 42 == \"42\"\n    toString [1,2] == \"[1,2]\"\n    toString \"he said, \\\"hi\\\"\" == \"\\\"he said, \\\\\\\"hi\\\\\\\"\\\"\"\n",
            "type": "a -> String"
          },
          {
            "name": "truncate",
            "comment": " Truncate a number, rounding towards zero. ",
            "type": "Float -> Int"
          },
          {
            "name": "turns",
            "comment": " Convert turns to standard Elm angles (radians).\nOne turn is equal to 360&deg;.\n",
            "type": "Float -> Float"
          },
          {
            "name": "uncurry",
            "comment": " Change how arguments are passed to a function.\nThis combines two arguments into a single pair.\n",
            "type": "(a -> b -> c) -> ( a, b ) -> c"
          },
          {
            "name": "xor",
            "comment": " The exclusive-or operator. `True` if exactly one input is `True`. ",
            "type": "Bool -> Bool -> Bool"
          },
          {
            "name": "|>",
            "comment": " Forward function application `x |> f == f x`. This function is useful\nfor avoiding parenthesis and writing code in a more natural way.\nConsider the following code to create a pentagon:\n\n    scale 2 (move (10,10) (filled blue (ngon 5 30)))\n\nThis can also be written as:\n\n    ngon 5 30\n      |> filled blue\n      |> move (10,10)\n      |> scale 2\n",
            "type": "a -> (a -> b) -> b",
            "associativity": "left",
            "precedence": 0
          },
          {
            "name": "||",
            "comment": " The logical OR operator. `True` if one or both inputs are `True`.\nThis operator short-circuits to `True` if the first argument is `True`.\n",
            "type": "Bool -> Bool -> Bool",
            "associativity": "right",
            "precedence": 2
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Trampoline",
        "comment": " A [trampoline](http://en.wikipedia.org/wiki/Tail-recursive_function#Through_trampolining)\nmakes it possible to recursively call a function without growing the stack.\n\nPopular JavaScript implementations do not perform any tail-call elimination, so\nrecursive functions can cause a stack overflow if they go too deep. Trampolines\npermit unbounded recursion despite limitations in JavaScript.\n\nThis strategy may create many intermediate closures, which is very expensive in\nJavaScript, so use this library only when it is essential that you recurse deeply.\n\n# Trampolines\n@docs trampoline, Trampoline\n",
        "aliases": [],
        "types": [
          {
            "name": "Trampoline",
            "comment": " A way to build computations that may be deeply recursive. We will take an\nexample of a tail-recursive function and rewrite it in a way that lets us use\na trampoline:\n\n    length : List a -> Int\n    length list = length' 0 list\n\n    length' : Int -> List a -> Int\n    length' accum list =\n        case list of\n          []     -> accum\n          hd::tl -> length' (accum+1) tl\n\nThis finds the length of a list, but if the list is too long, it may cause a\nstack overflow. We can rewrite it as follows:\n\n    length : List a -> Int\n    length list = trampoline (length' 0 list)\n\n    length' : Int -> List a -> Trampoline Int\n    length' accum list =\n        case list of\n          []     -> Done accum\n          hd::tl -> Continue (\\() -> length' (accum+1) tl)\n\nNow it uses a trampoline and can recurse without growing the stack!\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Done",
                [
                  "a"
                ]
              ],
              [
                "Continue",
                [
                  "() -> Trampoline.Trampoline a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "trampoline",
            "comment": " Evaluate a trampolined value in constant space. ",
            "type": "Trampoline.Trampoline a -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Maybe",
        "comment": " This library fills a bunch of important niches in Elm. A `Maybe` can help\nyou with optional arguments, error handling, and records with optional fields.\n\n# Definition\n@docs Maybe\n\n# Common Helpers\n@docs withDefault, oneOf, map, map2, map3, map4, map5\n\n# Chaining Maybes\n@docs andThen\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Maybe",
            "comment": " Represent values that may or may not exist. It can be useful if you have a\nrecord field that is only filled in sometimes. Or if a function takes a value\nsometimes, but does not absolutely need it.\n\n    -- A person, but maybe we do not know their age.\n    type alias Person =\n        { name : String\n        , age : Maybe Int\n        }\n\n    tom = { name = \"Tom\", age = Just 42 }\n    sue = { name = \"Sue\", age = Nothing }\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Just",
                [
                  "a"
                ]
              ],
              [
                "Nothing",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Chain together many computations that may fail. It is helpful to see its\ndefinition:\n\n    andThen : Maybe a -> (a -> Maybe b) -> Maybe b\n    andThen maybe callback =\n        case maybe of\n            Just value ->\n                callback value\n\n            Nothing ->\n                Nothing\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`head : List Int -> Maybe Int`) to get the\nfirst month from a `List` and then make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Maybe Int\n    toValidMonth month =\n        if month >= 1 && month <= 12 then\n            Just month\n        else\n            Nothing\n\n    getFirstMonth : List Int -> Maybe Int\n    getFirstMonth months =\n        head months `andThen` toValidMonth\n\nIf `head` fails and results in `Nothing` (because the `List` was empty`),\nthis entire chain of operations will short-circuit and result in `Nothing`.\nIf `toValidMonth` results in `Nothing`, again the chain of computations\nwill result in `Nothing`.\n",
            "type": "Maybe.Maybe a -> (a -> Maybe.Maybe b) -> Maybe.Maybe b"
          },
          {
            "name": "map",
            "comment": " Transform a `Maybe` value with a given function:\n\n    map sqrt (Just 9) == Just 3\n    map sqrt Nothing == Nothing\n",
            "type": "(a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"
          },
          {
            "name": "map2",
            "comment": " Apply a function if all the arguments are `Just` a value.\n\n    map2 (+) (Just 3) (Just 4) == Just 7\n    map2 (+) (Just 3) Nothing == Nothing\n    map2 (+) Nothing (Just 4) == Nothing\n",
            "type": "(a -> b -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe value"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe value"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe value"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe value"
          },
          {
            "name": "oneOf",
            "comment": " Pick the first `Maybe` that actually has a value. Useful when you want to\ntry a couple different things, but there is no default value.\n\n    oneOf [ Nothing, Just 42, Just 71 ] == Just 42\n    oneOf [ Nothing, Nothing, Just 71 ] == Just 71\n    oneOf [ Nothing, Nothing, Nothing ] == Nothing\n",
            "type": "List (Maybe.Maybe a) -> Maybe.Maybe a"
          },
          {
            "name": "withDefault",
            "comment": " Provide a default value, turning an optional value into a normal\nvalue.  This comes in handy when paired with functions like\n[`Dict.get`](Dict#get) which gives back a `Maybe`.\n\n    withDefault 100 (Just 42)   -- 42\n    withDefault 100 Nothing     -- 100\n\n    withDefault \"unknown\" (Dict.get \"Tom\" Dict.empty)   -- \"unknown\"\n\n",
            "type": "a -> Maybe.Maybe a -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-color-extra",
    "version": "3.0.1",
    "docs": [
      {
        "name": "Color.Gradient",
        "comment": "\n# Gradient\n@docs GradientStop, Gradient, Palette, gradient, gradientFromStops\n",
        "aliases": [
          {
            "name": "Gradient",
            "comment": " ",
            "args": [],
            "type": "List Color.Gradient.GradientStop"
          },
          {
            "name": "GradientStop",
            "comment": " A color and a stop value that indicates where the color appears in a gradient.\n The stop value must be between `0` and `1`.\n",
            "args": [],
            "type": "( Float, Color.Color )"
          },
          {
            "name": "Palette",
            "comment": " ",
            "args": [],
            "type": "List Color.Color"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "gradient",
            "comment": " Create a new `Palette`  with gradient colors from a given `Palette`,\n with a given size.\n\n    p1 : Palette\n    p1 =\n      [ rgb 200 0 200\n      , rgb 0 100 100\n      , rgb 100 0 0\n      ]\n    gradient RGB p1 5 -- [RGBA 200 0 200 1,RGBA 100 50 150 1,RGBA 0 100 100 1,RGBA 50 50 50 1,RGBA 100 0 0 1]\n",
            "type": "Color.Interpolate.Space -> Color.Gradient.Palette -> Int -> Color.Gradient.Palette"
          },
          {
            "name": "gradientFromStops",
            "comment": " Create a new `Palette`  with gradient colors from a given `Gradient`,\n with a given size.\n\n    g : Gradient\n    g =\n      [ (0, rgb 200 0 200)\n      , (0.25, rgb 0 100 100)\n      , (1, rgb 150 175 160)\n      ]\n    gradientFromStops RGB g 5 -- [RGBA 200 0 200 1,RGBA 0 100 100 1,RGBA 50 125 120 1,RGBA 100 150 140 1,RGBA 150 175 160 1]\n",
            "type": "Color.Interpolate.Space -> Color.Gradient.Gradient -> Int -> Color.Gradient.Palette"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Color.Interpolate",
        "comment": "\n# Interpolate\nInterpolate between two colors\n\n@docs Space, interpolate\n",
        "aliases": [],
        "types": [
          {
            "name": "Space",
            "comment": " The color space that is used for the interpolation\n",
            "args": [],
            "cases": [
              [
                "RGB",
                []
              ],
              [
                "HSL",
                []
              ],
              [
                "LAB",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "interpolate",
            "comment": " Linear interpolation of two colors by a factor between `0` and `1`.\n",
            "type": "Color.Interpolate.Space -> Color.Color -> Color.Color -> Float -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Color.Convert",
        "comment": "\n#Convert\nConvert colors to differnt string formats and hexadecimal strings to colors.\n\n@docs colorToCssRgb, colorToCssRgba, colorToCssHsl, colorToCssHsla, colorToHex, hexToColor, colorToLab, labToColor\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "colorToCssHsl",
            "comment": "\nConverts a color to an css hsl string.\n\n    colorToCssRgb (hsl 1 1 0.5) -- \"hsl(1, 1, 0.5)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssHsla",
            "comment": "\nConverts a color to an css hsla string.\n\n    colorToCssRgb (hsla 1 1 0.5 1) -- \"hsla(56, 100%, 50%, 1)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssRgb",
            "comment": "\nConverts a color to an css rgb string.\n\n    colorToCssRgb (rgb 255 0 0 ) -- \"rgb(255, 0, 0)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToCssRgba",
            "comment": "\nConverts a color to an css rgba string.\n\n    colorToCssRgb (rgba 255 0 0 0.5) -- \"rgb(255, 0, 0, 0.5)\"\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToHex",
            "comment": "\nConverts a color to a hexadecimal string.\n\n    hexToColor (rgb 255 0 0) -- \"#ff0000\"\n\n",
            "type": "Color.Color -> String"
          },
          {
            "name": "colorToLab",
            "comment": " Convert color to CIELAB- color space\n",
            "type": "Color.Color -> { l : Float, a : Float, b : Float }"
          },
          {
            "name": "hexToColor",
            "comment": "\nConverts a string to `Maybe` of color.\n\n    hexToColor \"#ff0000\" -- \"Just RGB 255 0 0\"\n    hexToColor \"ff0000\" -- \"Just RGB 255 0 0\"\n    hexToColor \"1234\" -- \"Nothing\"\n\n",
            "type": "String -> Maybe.Maybe Color.Color"
          },
          {
            "name": "labToColor",
            "comment": " Convert a color in CIELAB- color space to Elm `Color`\n",
            "type": "{ l : Float, a : Float, b : Float } -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Color.Manipulate",
        "comment": " A library for creating and manipulating colors.\n\n\n# Color adjustment\n@docs darken, lighten, saturate, desaturate, rotateHue, fadeIn, fadeOut, grayscale\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "darken",
            "comment": " Decrease the lightning of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "desaturate",
            "comment": " Decrease the saturation of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeIn",
            "comment": " Increase the opacity of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeOut",
            "comment": " Decrease the opacity of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "grayscale",
            "comment": " Convert the color to a greyscale version, aka set saturation to 0\n",
            "type": "Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": " Increase the lightning of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "rotateHue",
            "comment": " Change the hue of a color. The angle value must be in degrees\n",
            "type": "Float -> Color.Color -> Color.Color"
          },
          {
            "name": "saturate",
            "comment": " Increase the saturation of a color\n",
            "type": "Float -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Color.Blending",
        "comment": "\n# Blending\nBased on the [Compositing and Blending Level 1](https://www.w3.org/TR/compositing-1/#blending)\n\n@docs multiply, screen, overlay, difference, exclusion, hardlight, softlight, colorBurn, colorDodge, lighten, darken\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "colorBurn",
            "comment": "\nDarkens the backdrop color to reflect the source color.\nPainting with white produces no change.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "colorDodge",
            "comment": "\nBrightens the backdrop color to reflect the source color.\nPainting with black produces no changes.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "darken",
            "comment": "\nSelects the darker of the backdrop and source colors.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "difference",
            "comment": "\nSubtracts the darker of the two constituent colors from the lighter color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "exclusion",
            "comment": "\nProduces an effect similar to that of the Difference mode but lower in contrast.\nPainting with white inverts the backdrop color; painting with black produces no change\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "hardlight",
            "comment": "\nMultiplies or screens the colors, depending on the source color value.\nThe effect is similar to shining a harsh spotlight on the backdrop.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": "\nSelects the lighter of the backdrop and source colors.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "multiply",
            "comment": "\nThe source color is multiplied by the destination color and replaces the destination.\n\nThe resultant color is always at least as dark as either the source or destination color.\nMultiplying any color with black results in black.\nMultiplying any color with white preserves the original color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "overlay",
            "comment": "\nMultiplies or screens the colors, depending on the backdrop color value.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "screen",
            "comment": "\nMultiplies the complements of the backdrop and source color values,\n then complements the result.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "softlight",
            "comment": "\nDarkens or lightens the colors, depending on the source color value.\nThe effect is similar to shining a diffused spotlight on the backdrop.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-simplex-noise",
    "version": "1.2.1",
    "docs": [
      {
        "name": "Noise",
        "comment": " This is a library to generate simplex noise in Elm.\n\nThe code is a port of the [simplex noise JavaScript version](https:--github.com/jwagner/simplex-noise.js) by Jonas Wagner.\n\n## Example usage\n\n    (perm, newSeed) = permutationTable (initialSeed 42) -- generate the permutation table\n    noiseValue = noise3d perm 1 1 1\n\n# Permutation tables\n@docs permutationTable, PermutationTable\n\n# Genarate noise\n@docs noise4d, noise3d, noise2d\n\n",
        "aliases": [
          {
            "name": "PermutationTable",
            "comment": "\nPermutation table that is needed to generate the noise value.\n",
            "args": [],
            "type": "{ perm : Array.Array Int, permMod12 : Array.Array Int }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "noise2d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x and y value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float"
          },
          {
            "name": "noise3d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x, y and z value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float -> Float"
          },
          {
            "name": "noise4d",
            "comment": "\nGenerates a noise value between `-1` and `1` based on the given x, y, z and w value and a seeded permutation table.\nUsing the same permutation table will always return the same result for the same coordinate.\n",
            "type": "Noise.PermutationTable -> Float -> Float -> Float -> Float -> Float"
          },
          {
            "name": "permutationTable",
            "comment": "\nGenrate the permutation tables that are needed to calculate the noise value.\nThe function takes a seed and returns the table and  a new seed.\n",
            "type": "Random.Seed -> ( Noise.PermutationTable, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "eskimoblood/elm-wallpaper",
    "version": "2.1.3",
    "docs": [
      {
        "name": "WallpaperGroup.Pattern",
        "comment": "\nCreates wallpaper group based pattern\n\n#create pattern\n@docs pattern\n@docs bounding\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bounding",
            "comment": "\n  get the bounding box for a specific pattern group\n\n",
            "type": "WallpaperGroup.Group.Group -> WallpaperGroup.Geom.BoundingBox.BoundingBox"
          },
          {
            "name": "pattern",
            "comment": "\n  Create pattern by passing a group the number of columns and rows and tiles.\n\n",
            "type": "WallpaperGroup.Group.Group -> Int -> Int -> List (List { x : Float, y : Float }) -> List (List (List { x : Float, y : Float }))"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "WallpaperGroup.Geom.BoundingBox",
        "comment": "\nBounding box of a single pattern.\n\n@docs BoundingBox\n\n",
        "aliases": [],
        "types": [
          {
            "name": "BoundingBox",
            "comment": "\n  Bounding box can be a triangle oder a rect.\n\n",
            "args": [],
            "cases": [
              [
                "Triangle",
                [
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }"
                ]
              ],
              [
                "Rect",
                [
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }",
                  "{ x : Float, y : Float }"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "WallpaperGroup.Group",
        "comment": "\nThe predefined Groups according to\n[this](https://en.wikipedia.org/wiki/Wallpaper_group) Wikipedia entry\n\n@docs Group\n",
        "aliases": [],
        "types": [
          {
            "name": "Group",
            "comment": "\nCreate a pattern width the specific width and/or height.\nFor triangle shaped pattern only the width of the base line is needed.\n",
            "args": [],
            "cases": [
              [
                "P1",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Pm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Pg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Cm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2mg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P2gg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "C2mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4mm",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P4mg",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "P3",
                [
                  "Float"
                ]
              ],
              [
                "P3m1",
                [
                  "Float"
                ]
              ],
              [
                "P31m",
                [
                  "Float"
                ]
              ],
              [
                "P6",
                [
                  "Float"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-dialog",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Dialog.Simple",
        "comment": "\nA simple theme for Elm Dialog.\n\n@docs view, header, closeButton, body, footer\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "body",
            "comment": " Body decorator. ",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "closeButton",
            "comment": " Close button with action. ",
            "type": "Dialog.Options -> List Html.Html"
          },
          {
            "name": "footer",
            "comment": " Footer decorator. ",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "header",
            "comment": " Header decorator, showing Close button if options.onClose is set. ",
            "type": "Dialog.Options -> String -> Html.Html"
          },
          {
            "name": "view",
            "comment": " A simple decorator for the dialog, with backdrop. Put it at the bottom of your body. ",
            "type": "Dialog.Dialog -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Dialog",
        "comment": "\nA modal component for Elm. See README for usage instructions.\n\n# Types\n@docs Dialog, WithDialog, Action, Options\n\n# Init and update\n@docs initial, update, wrappedUpdate, actions\n\n# Send actions\n@docs address, open, openWithOptions, updateContent, closeThenSend, closeThenDo\n\n# View helpers\n@docs openOnClick, openWithOptionsOnClick, closeOnClick, closeThenSendOnClick, opacity, display\n\n# State querying\n@docs getContent, getOptions, getTransition, isOpen, isVisible\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Display and behaviour options (see showWithOptions):\n* `duration` of the fade transition,\n* `onClose`: what should be done when closing the modal. Set it to Nothing to prevent closing.\n ",
            "args": [],
            "type": "{ duration : Float , onClose : Maybe.Maybe (Task.Task Effects.Never ()) }"
          },
          {
            "name": "WithDialog",
            "comment": " Record extension that puts state in `dialog` field (see also [wrappedUpdate](#wrappedUpdate)). ",
            "args": [
              "model"
            ],
            "type": "{ model | dialog : Dialog.Dialog }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Dialog actions. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Dialog",
            "comment": " Dialog state (opaque type). ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "actions",
            "comment": " Dialog actions signal: consumption required! ",
            "type": "Signal.Signal Dialog.Action"
          },
          {
            "name": "address",
            "comment": " Where to send your actions ",
            "type": "Signal.Address Dialog.Action"
          },
          {
            "name": "closeOnClick",
            "comment": " On click, hide dialog. ",
            "type": "Html.Attribute"
          },
          {
            "name": "closeThenDo",
            "comment": " Action builder for closing dialog send performing a task. ",
            "type": "Task.Task Effects.Never () -> Dialog.Action"
          },
          {
            "name": "closeThenSend",
            "comment": " Action builder for closing dialog then sending an action to an address. ",
            "type": "Signal.Address a -> a -> Dialog.Action"
          },
          {
            "name": "closeThenSendOnClick",
            "comment": " On click, hide dialog then send action. ",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "display",
            "comment": " CSS display helper. ",
            "type": "Dialog.Dialog -> String"
          },
          {
            "name": "getContent",
            "comment": " Get current dialog content. ",
            "type": "Dialog.Dialog -> List Html.Html"
          },
          {
            "name": "getOptions",
            "comment": " Get current dialog options ",
            "type": "Dialog.Dialog -> Dialog.Options"
          },
          {
            "name": "getTransition",
            "comment": " Get current transition state. ",
            "type": "Dialog.Dialog -> Transit.Transition"
          },
          {
            "name": "initial",
            "comment": " Empty, hidden state for model init. ",
            "type": "Dialog.Dialog"
          },
          {
            "name": "isOpen",
            "comment": " Is the dialog currently open? ",
            "type": "Dialog.Dialog -> Bool"
          },
          {
            "name": "isVisible",
            "comment": " Visibility helper: either open, or transitionning to closed ",
            "type": "Dialog.Dialog -> Bool"
          },
          {
            "name": "opacity",
            "comment": " CSS opacity helper for fading effect. ",
            "type": "Dialog.Dialog -> Float"
          },
          {
            "name": "open",
            "comment": " Action builder for opening dialog with default options and content. ",
            "type": "(Dialog.Options -> List Html.Html) -> Dialog.Action"
          },
          {
            "name": "openOnClick",
            "comment": " On click, fill and show up dialog with the provided content. ",
            "type": "(Dialog.Options -> List Html.Html) -> Html.Attribute"
          },
          {
            "name": "openWithOptions",
            "comment": " Action builder for open dialog with custom options and content. ",
            "type": "Dialog.Options -> (Dialog.Options -> List Html.Html) -> Dialog.Action"
          },
          {
            "name": "openWithOptionsOnClick",
            "comment": " On click, fill and show up dialog with the provided options and content. ",
            "type": "Dialog.Options -> (Dialog.Options -> List Html.Html) -> Html.Attribute"
          },
          {
            "name": "update",
            "comment": " Update dialog state. Takes effect duration in ms as first parameter. ",
            "type": "Dialog.Action -> Dialog.Dialog -> Response.Response Dialog.Dialog Dialog.Action"
          },
          {
            "name": "updateContent",
            "comment": " Action builder for content update ",
            "type": "(Dialog.Options -> List Html.Html) -> Dialog.Action"
          },
          {
            "name": "wrappedUpdate",
            "comment": " Wrapped update for `WithDialog`, saves you a model field update and an Effects map. ",
            "type": "(Dialog.Action -> action) -> Dialog.Action -> Dialog.WithDialog model -> Response.Response (Dialog.WithDialog model) action"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-hexagons",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Hexagons.Grid",
        "comment": " A naive grid storage for hexagons: `Dict Int (Dict Int a)`\n\n# Types\n@docs Grid, Row, Tile\n\n# Finders\n@docs get, list, getPoint\n\n# Modifiers\n@docs set, delete\n",
        "aliases": [
          {
            "name": "Grid",
            "comment": " A grid is a Dict of rows ",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Int (Hexagons.Grid.Row a)"
          },
          {
            "name": "Row",
            "comment": " A row is a Dict of values ",
            "args": [
              "a"
            ],
            "type": "Dict.Dict Int a"
          },
          {
            "name": "Tile",
            "comment": " A tile has coords and some content ",
            "args": [
              "a"
            ],
            "type": "{ content : a, coords : Hexagons.Axial }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "delete",
            "comment": " Remove content from those axial coordinates within grid ",
            "type": "Hexagons.Axial -> Hexagons.Grid.Grid a -> Hexagons.Grid.Grid a"
          },
          {
            "name": "get",
            "comment": " Find eventual content in grid on those axial coordinates ",
            "type": "Hexagons.Grid.Grid a -> Hexagons.Axial -> Maybe.Maybe a"
          },
          {
            "name": "getPoint",
            "comment": " Given an hexagonal grid definition (radius and grid),\nwhat's in the hexagon holding this point?\n",
            "type": "Float -> Hexagons.Grid.Grid a -> Hexagons.Point -> Maybe.Maybe a"
          },
          {
            "name": "list",
            "comment": " Produce a list of all tiles within grid ",
            "type": "Hexagons.Grid.Grid a -> List (Hexagons.Grid.Tile a)"
          },
          {
            "name": "set",
            "comment": " Add or update content to grid on those axial coordinates ",
            "type": "a -> Hexagons.Axial -> Hexagons.Grid.Grid a -> Hexagons.Grid.Grid a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Hexagons",
        "comment": " Suite of functions for hexagonal grid computing, focused on horizontal grids (\"pointy topped\" hexagons) with axial coordinate system.\n\nSee http://www.redblobgames.com/grids/hexagons for reference.\n\n# Types\n@docs Axial, Point\n\n# Conversions\n@docs dims, axialToPoint, pointToAxial\n\n# Measuring\n@docs axialDistance\n\n# Drawing\n@docs axialLine, axialRange\n",
        "aliases": [
          {
            "name": "Axial",
            "comment": " Axial coordinates of an hexagon with a grid ",
            "args": [],
            "type": "( Int, Int )"
          },
          {
            "name": "Point",
            "comment": " Point on screen (pixel) ",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "axialDistance",
            "comment": " Distance between two axial coordinates ",
            "type": "Hexagons.Axial -> Hexagons.Axial -> Int"
          },
          {
            "name": "axialLine",
            "comment": " List all hexagons composing a line between two hexagons.\n\nSee [Line Drawing](http://www.redblobgames.com/grids/hexagons/#line-drawing) on Red Blob Games\n ",
            "type": "Hexagons.Axial -> Hexagons.Axial -> List Hexagons.Axial"
          },
          {
            "name": "axialRange",
            "comment": " List all hexagons within given distance of this one.\n\nSee [Range](http://www.redblobgames.com/grids/hexagons/#range) on Red Blob Games\n",
            "type": "Hexagons.Axial -> Int -> List Hexagons.Axial"
          },
          {
            "name": "axialToPoint",
            "comment": " Given hex radius and axial coords, return pixel coords of its center\n",
            "type": "Float -> Hexagons.Axial -> Hexagons.Point"
          },
          {
            "name": "dims",
            "comment": " Given radius, returns width and height of hexagon\n",
            "type": "Float -> ( Float, Float )"
          },
          {
            "name": "pointToAxial",
            "comment": " Given hex radius and pixel coords, returns corresponding axial coords\n",
            "type": "Float -> Hexagons.Point -> Hexagons.Axial"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-response",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Response",
        "comment": "\nResponse utilities for Elm Architecture. Build responses from tasks, pipe them, map over.\n\n# Construct\n@docs Response, res, taskRes, withEffects, withTask, withNone\n\n# Transform\n@docs mapModel, mapEffects, mapBoth\n",
        "aliases": [
          {
            "name": "Response",
            "comment": " A response is an updated model and some effects. ",
            "args": [
              "model",
              "action"
            ],
            "type": "( model, Effects.Effects action )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "mapBoth",
            "comment": " Map over model and effects. ",
            "type": "(m -> m') -> (a -> a') -> Response.Response m a -> Response.Response m' a'"
          },
          {
            "name": "mapEffects",
            "comment": " Map over effects. ",
            "type": "(a -> a') -> Response.Response m a -> Response.Response m a'"
          },
          {
            "name": "mapModel",
            "comment": " Map over model. ",
            "type": "(m -> m') -> Response.Response m a -> Response.Response m' a"
          },
          {
            "name": "res",
            "comment": " Canonical usage: construct a result from model and effects. ",
            "type": "m -> Effects.Effects a -> Response.Response m a"
          },
          {
            "name": "taskRes",
            "comment": " Construct a result from model and task. ",
            "type": "m -> Task.Task Effects.Never a -> Response.Response m a"
          },
          {
            "name": "withEffects",
            "comment": " Construct a result from model and effects, flipped for piping:\n\n    { model | foo = bar }\n      |> withEffects someEffects\n ",
            "type": "Effects.Effects a -> m -> Response.Response m a"
          },
          {
            "name": "withNone",
            "comment": " Construct a result from model without effects, flipped for piping:\n\n    { model | foo = bar }\n      |> withNone\n ",
            "type": "m -> Response.Response m a"
          },
          {
            "name": "withTask",
            "comment": " Construct a result from model and task, flipped for piping:\n\n    { model | foo = bar }\n      |> withTask someTask\n ",
            "type": "Task.Task Effects.Never a -> m -> Response.Response m a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-route-parser",
    "version": "2.2.0",
    "docs": [
      {
        "name": "RouteParser.QueryString",
        "comment": " Tools for query string parsing and extraction\n\n@docs QueryString, parse\n",
        "aliases": [
          {
            "name": "QueryString",
            "comment": " A parsed query string is a Dict of param names to param value list. ",
            "args": [],
            "type": "Dict.Dict String (List String)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "parse",
            "comment": " Parse a query string. Parsed string must include the leading \"?\" char. ",
            "type": "String -> RouteParser.QueryString.QueryString"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "RouteParser",
        "comment": " A typed router in Elm, with a nice DSL built on top of parser cominators\n(see [README](https://github.com/etaque/elm-route-parser) for usage).\n\n# DSL for simple cases\n@docs int, string, customParam, static, dyn1, dyn2, dyn3\n\n# Other route matcher builders\n@docs parserMatcher, rawMatcher, mapMatcher, mapMatchers\n\n# Because eventually you'll have to run the router\n@docs match, router\n\n# Types\n@docs Matcher, Param, Router\n",
        "aliases": [
          {
            "name": "Router",
            "comment": " A router is composed of a route parser, and a path generator.\n ",
            "args": [
              "route"
            ],
            "type": "{ fromPath : String -> Maybe.Maybe route, toPath : route -> String }"
          }
        ],
        "types": [
          {
            "name": "Matcher",
            "comment": " A single route parser ",
            "args": [
              "route"
            ],
            "cases": []
          },
          {
            "name": "Param",
            "comment": " A param parser in a route ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "customParam",
            "comment": " Build a custom param extractor from a parser instance ",
            "type": "Combine.Parser a -> RouteParser.Param a"
          },
          {
            "name": "dyn1",
            "comment": " Matcher for a path with one dynamic param.\n\n    type Route = Topic Int\n    matchers = [ dyn1 Topic \"/topic/\" int \"/edit\" ]\n\n    match matchers \"/topic/1/edit\" == Just (Topic 1)\n",
            "type": "(a -> route) -> String -> RouteParser.Param a -> String -> RouteParser.Matcher route"
          },
          {
            "name": "dyn2",
            "comment": " Matcher for a path with two dynamic params.\n\n    type Route = SubTopic Int Int\n    matchers = [ dyn2 SubTopic \"/topic/\" int \"/\" int \"\" ]\n\n    match matchers \"/topic/1/2\" == Just (SubTopic 1 2)\n",
            "type": "(a -> b -> route) -> String -> RouteParser.Param a -> String -> RouteParser.Param b -> String -> RouteParser.Matcher route"
          },
          {
            "name": "dyn3",
            "comment": " Matcher for a path with three dynamic params.\n\n    type Route = Something String String String\n    matchers = [ dyn3 Something \"/some/\" string \"/thing/\" string \"/here/\" string \"\" ]\n\n    match matchers \"/some/cool/thing/must-be/here/i-guess\" == Just (Something \"cool\" \"must-be\" \"i-guess\")\n",
            "type": "(a -> b -> c -> route) -> String -> RouteParser.Param a -> String -> RouteParser.Param b -> String -> RouteParser.Param c -> String -> RouteParser.Matcher route"
          },
          {
            "name": "int",
            "comment": " Extract an Int param ",
            "type": "RouteParser.Param Int"
          },
          {
            "name": "mapMatcher",
            "comment": " Map the result of the match ",
            "type": "(a -> b) -> RouteParser.Matcher a -> RouteParser.Matcher b"
          },
          {
            "name": "mapMatchers",
            "comment": " map a list of matchers from a route type to another route type.\nUseful for subrouting, like delegating one of the routes to another type :\n\n    -- global routing:\n\n    type Route = Home | Admin AdminRoute\n\n    matchers =\n      [ static Home \"/\" ] ++ (mapMatchers Admin adminMatchers)\n\n    -- can be delegated to a component without knowdedge of global routing:\n\n    type AdminRoute = Dashboard | Users\n\n    adminMatchers =\n      [ static Dashboard \"/admin\", static Users \"/users\" ]\n ",
            "type": "(a -> b) -> List (RouteParser.Matcher a) -> List (RouteParser.Matcher b)"
          },
          {
            "name": "match",
            "comment": " Given a list of matchers and a path, return the first successful match of the path.\n",
            "type": "List (RouteParser.Matcher route) -> String -> Maybe.Maybe route"
          },
          {
            "name": "parserMatcher",
            "comment": " Build a route from a Parser instance ",
            "type": "Combine.Parser route -> RouteParser.Matcher route"
          },
          {
            "name": "rawMatcher",
            "comment": " Build a route from a raw matcher function ",
            "type": "(String -> Maybe.Maybe route) -> RouteParser.Matcher route"
          },
          {
            "name": "router",
            "comment": " Full-featured router. A record with two properties:\n\n* `fromPath` to maybe get the route from a path,\n* `toPath`to build the path from the route, typically for links in the views.\n ",
            "type": "List (RouteParser.Matcher route) -> (route -> String) -> RouteParser.Router route"
          },
          {
            "name": "static",
            "comment": " Matcher for a static path.\n\n    type Route = About\n    matchers = [ static About \"/about\" ]\n\n    match matchers \"/about\" == Just About\n",
            "type": "route -> String -> RouteParser.Matcher route"
          },
          {
            "name": "string",
            "comment": " Extract a String param ",
            "type": "RouteParser.Param String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-simple-form",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Form.Input",
        "comment": "\n@docs Input\n\n@docs baseInput, textInput, passwordInput, textArea, checkboxInput, selectInput, radioInput\n\n@docs dumpErrors\n",
        "aliases": [
          {
            "name": "Input",
            "comment": " An input render Html from a field state, a form and address for actions.\nAll input functions using this type alias are pre-wired with event handlers.\n",
            "args": [
              "e",
              "a"
            ],
            "type": "Form.FieldState e a -> Signal.Address Form.Action -> List Html.Attribute -> Html.Html"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "baseInput",
            "comment": " Untyped input, first param is `type` attribute.\n",
            "type": "String -> (String -> Form.Field.Field) -> Form.Input.Input e String"
          },
          {
            "name": "checkboxInput",
            "comment": " Checkbox input.\n",
            "type": "Form.Input.Input e Bool"
          },
          {
            "name": "dumpErrors",
            "comment": " Dump all form errors in a `<pre>` tag. Useful for debugging.\n",
            "type": "Form.Form e o -> Html.Html"
          },
          {
            "name": "passwordInput",
            "comment": " Password input.\n",
            "type": "Form.Input.Input e String"
          },
          {
            "name": "radioInput",
            "comment": " Radio input.\n",
            "type": "String -> Form.Input.Input e String"
          },
          {
            "name": "selectInput",
            "comment": " Select input.\n",
            "type": "List ( String, String ) -> Form.Input.Input e String"
          },
          {
            "name": "textArea",
            "comment": " Textarea.\n",
            "type": "Form.Input.Input e String"
          },
          {
            "name": "textInput",
            "comment": " Text input.\n",
            "type": "Form.Input.Input e String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Form",
        "comment": " Simple forms made easy: A Dict implementation of the core `Json.Decode` API,\nwith state lifecycle and input helpers for the views.\n\n# Types\n@docs Action, Form, FieldState\n\n# Init/update lifecyle\n@docs initial, update\n\n# Field state accessors\n@docs getFieldAsString, getFieldAsBool\n\n# Global state accessors\n@docs getFocus, isSubmitted, getErrors, getOutput\n",
        "aliases": [
          {
            "name": "FieldState",
            "comment": " Field state containing all necessary data for view and update,\ncan be retrived with `Form.getFieldAsString` or `Form.getFieldAsBool`.\n\n * `path` - qualified path of the field in the form, with dots for nested fields (`field.subfield`)\n * `value` - a `Maybe` of the requested type\n * `error` - a `Maybe` of the field error\n * `liveError` - same but with added logic for live validation\n    (see [`getLiveErrorAt`](https://github.com/etaque/elm-simple-form/blob/master/src/Form.elm) impl)\n * `isDirty` - if the field content has been changed since last validation\n * `isChanged` - if the field value has changed since last init/reset\n * `hasFocus` - if the field is currently focused\n",
            "args": [
              "e",
              "a"
            ],
            "type": "{ path : String , value : Maybe.Maybe a , error : Maybe.Maybe (Form.Error.Error e) , liveError : Maybe.Maybe (Form.Error.Error e) , isDirty : Bool , isChanged : Bool , hasFocus : Bool }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Form actions for `update`.\n",
            "args": [],
            "cases": [
              [
                "NoOp",
                []
              ],
              [
                "Focus",
                [
                  "String"
                ]
              ],
              [
                "Blur",
                [
                  "String"
                ]
              ],
              [
                "Input",
                [
                  "String",
                  "Form.Field.Field"
                ]
              ],
              [
                "Submit",
                []
              ],
              [
                "Validate",
                []
              ],
              [
                "Reset",
                [
                  "List ( String, Form.Field.Field )"
                ]
              ]
            ]
          },
          {
            "name": "Form",
            "comment": " Form to embed in your model. Type parameters are:\n\n * `customError` - a custom error type to extend built-in errors (set to `()` if you don't need it)\n * `output` - the type of the validation output.\n",
            "args": [
              "customError",
              "output"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "getErrors",
            "comment": " Get list of errors on qualified paths.\n",
            "type": "Form.Form e o -> List ( String, Form.Error.Error e )"
          },
          {
            "name": "getFieldAsBool",
            "comment": " Get field state at path, with value as a `Bool`.\n",
            "type": "String -> Form.Form e o -> Form.FieldState e Bool"
          },
          {
            "name": "getFieldAsString",
            "comment": " Get field state at path, with value as a `String`.\n",
            "type": "String -> Form.Form e o -> Form.FieldState e String"
          },
          {
            "name": "getFocus",
            "comment": " Return currently focused field, if any.\n",
            "type": "Form.Form e o -> Maybe.Maybe String"
          },
          {
            "name": "getOutput",
            "comment": " Get form output, in case of validation success.\n",
            "type": "Form.Form e o -> Maybe.Maybe o"
          },
          {
            "name": "initial",
            "comment": " Initial form state. See `Form.Field` for initial fields, and `Form.Validate` for validation.\n",
            "type": "List ( String, Form.Field.Field ) -> Form.Validate.Validation e output -> Form.Form e output"
          },
          {
            "name": "isSubmitted",
            "comment": " Get form submission state. Useful to show errors on unchanged fields.\n",
            "type": "Form.Form e o -> Bool"
          },
          {
            "name": "update",
            "comment": " Update form state with the given action.\n",
            "type": "Form.Action -> Form.Form e output -> Form.Form e output"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Form.Validate",
        "comment": " Form validation.\n\n# Combinators\n@docs Validation, get, map, succeed, andThen, pipeTo, apply, customError, defaultValue\n\n# Fixed-size forms\n@docs form1, form2, form3, form4, form5, form6, form7, form8\n\n# Type extractors\n@docs string, int, float, bool, date, maybe, email, url, emptyString\n\n# Common filters\n@docs minInt, maxInt, minFloat, maxFloat, minLength, maxLength, nonEmpty, format, includedIn\n\n# Custom validations\n@docs fail, succeed, customValidation, oneOf\n",
        "aliases": [
          {
            "name": "Validation",
            "comment": " A validation is a function that takes a form field and returns a result\nbeing either a validation error or the expected object.\n",
            "args": [
              "customError",
              "output"
            ],
            "type": "Form.Field.Field -> Result.Result (Form.Error.Error customError) output"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andThen",
            "comment": " Apply a new validation to the result of the validation.\n\n    int `andThen` (minInt 10)\n",
            "type": "Form.Validate.Validation e a -> (a -> Form.Validate.Validation e b) -> Form.Validate.Validation e b"
          },
          {
            "name": "apply",
            "comment": " Incremental form validation for records with more that 8 fields.\n\n    Form.succeed SomeRecord\n      `apply` (\"foo\" `at` string)\n      `apply` (\"bar\" `at` string)\n",
            "type": "Form.Validate.Validation e (a -> b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          },
          {
            "name": "bool",
            "comment": " Validation a Bool.\n",
            "type": "Form.Validate.Validation e Bool"
          },
          {
            "name": "customError",
            "comment": " Helper to create a CustomError.\n",
            "type": "e -> Form.Error.Error e"
          },
          {
            "name": "customValidation",
            "comment": " Custom validation for your special cases.\n",
            "type": "Form.Validate.Validation e a -> (a -> Result.Result (Form.Error.Error e) b) -> Form.Validate.Validation e b"
          },
          {
            "name": "date",
            "comment": " Validation a Date using `Date.fromString`.\n",
            "type": "Form.Validate.Validation e Date.Date"
          },
          {
            "name": "defaultValue",
            "comment": " Rescue a failed validation with the supplied value.\n",
            "type": "a -> Form.Validate.Validation e a -> Form.Validate.Validation e a"
          },
          {
            "name": "email",
            "comment": " Check if the string is a valid email address.\n",
            "type": "Form.Validate.Validation e String"
          },
          {
            "name": "emptyString",
            "comment": " Validate an empty string, otherwise failing with InvalidString.\nUseful with `oneOf` for optional fields with format validation.\n",
            "type": "Form.Validate.Validation e String"
          },
          {
            "name": "fail",
            "comment": " A validation that always fails. Useful for contextual validation.\n",
            "type": "Form.Error.Error e -> Form.Validate.Validation e a"
          },
          {
            "name": "float",
            "comment": " Validation a float using `String.toFloat`.\n",
            "type": "Form.Validate.Validation e Float"
          },
          {
            "name": "form1",
            "comment": " Validation a form with one field.\n",
            "type": "(a -> field) -> Form.Validate.Validation e a -> Form.Validate.Validation e field"
          },
          {
            "name": "form2",
            "comment": " Validation a form with two fields.\n",
            "type": "(a -> b -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e m"
          },
          {
            "name": "form3",
            "comment": " Validation a form with three fields.\n",
            "type": "(a -> b -> c -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e c -> Form.Validate.Validation e m"
          },
          {
            "name": "form4",
            "comment": " Validation a form with four fields.\n",
            "type": "(a -> b -> c -> d -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e c -> Form.Validate.Validation e d -> Form.Validate.Validation e m"
          },
          {
            "name": "form5",
            "comment": " Validation a form with five fields.\n",
            "type": "(a -> b -> c -> d -> e -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err m"
          },
          {
            "name": "form6",
            "comment": " Validation a form with six fields.\n",
            "type": "(a -> b -> c -> d -> e -> f -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err m"
          },
          {
            "name": "form7",
            "comment": " Validation a form with seven fields.\n",
            "type": "(a -> b -> c -> d -> e -> f -> g -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err g -> Form.Validate.Validation err m"
          },
          {
            "name": "form8",
            "comment": " Validation a form with eight fields.\n",
            "type": "(a -> b -> c -> d -> e -> f -> g -> h -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err g -> Form.Validate.Validation err h -> Form.Validate.Validation err m"
          },
          {
            "name": "format",
            "comment": " Validates format of the string.\n",
            "type": "Regex.Regex -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "get",
            "comment": " Access the given field in the group.\n\n    get \"name\" string\n",
            "type": "String -> Form.Validate.Validation e a -> Form.Validate.Validation e a"
          },
          {
            "name": "includedIn",
            "comment": " Check if the string is included in the given list.\n",
            "type": "List String -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "int",
            "comment": " Validation an integer using `String.toInt`.\n",
            "type": "Form.Validate.Validation e Int"
          },
          {
            "name": "map",
            "comment": " Map over the result of the validation.\n\n    string `map` String.trim\n",
            "type": "(a -> b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          },
          {
            "name": "maxFloat",
            "comment": " Max value for Float.\n",
            "type": "Float -> Float -> Form.Validate.Validation e Float"
          },
          {
            "name": "maxInt",
            "comment": " Max value for Int.\n",
            "type": "Int -> Int -> Form.Validate.Validation e Int"
          },
          {
            "name": "maxLength",
            "comment": " Max length for String.\n",
            "type": "Int -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "maybe",
            "comment": " Transform validation result to `Maybe`, using `Result.toMaybe`.\n",
            "type": "Form.Validate.Validation e a -> Form.Validate.Validation e (Maybe.Maybe a)"
          },
          {
            "name": "minFloat",
            "comment": " Min value for Float.\n",
            "type": "Float -> Float -> Form.Validate.Validation e Float"
          },
          {
            "name": "minInt",
            "comment": " Min value for Int.\n",
            "type": "Int -> Int -> Form.Validate.Validation e Int"
          },
          {
            "name": "minLength",
            "comment": " Min length for String.\n",
            "type": "Int -> String -> Form.Validate.Validation e String"
          },
          {
            "name": "nonEmpty",
            "comment": " Fails if `String.isEmpty`.\n",
            "type": "String -> Form.Validate.Validation e String"
          },
          {
            "name": "oneOf",
            "comment": " First successful validation wins, from left to right.\n",
            "type": "List (Form.Validate.Validation e a) -> Form.Validate.Validation e a"
          },
          {
            "name": "pipeTo",
            "comment": " Same as `andThen`, but flipped for piping.\n\n    int |> pipeTo (minInt 10)\n",
            "type": "(a -> Form.Validate.Validation e b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          },
          {
            "name": "string",
            "comment": " Validation a String.\n",
            "type": "Form.Validate.Validation e String"
          },
          {
            "name": "succeed",
            "comment": " A validation that always succeeds. Useful for contextual validation.\n",
            "type": "a -> Form.Validate.Validation e a"
          },
          {
            "name": "url",
            "comment": " Check if the string is a valid URL.\n",
            "type": "Form.Validate.Validation e String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Form.Error",
        "comment": " Validation errors.\n\n@docs Error, getAt\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " A validation error. See `Form.Validate.customError` for `CustomError` building.\n",
            "args": [
              "e"
            ],
            "cases": [
              [
                "GroupErrors",
                [
                  "Dict.Dict String (Form.Error.Error e)"
                ]
              ],
              [
                "Empty",
                []
              ],
              [
                "InvalidString",
                []
              ],
              [
                "InvalidEmail",
                []
              ],
              [
                "InvalidUrl",
                []
              ],
              [
                "InvalidFormat",
                []
              ],
              [
                "InvalidInt",
                []
              ],
              [
                "InvalidFloat",
                []
              ],
              [
                "InvalidBool",
                []
              ],
              [
                "InvalidDate",
                []
              ],
              [
                "SmallerIntThan",
                [
                  "Int"
                ]
              ],
              [
                "GreaterIntThan",
                [
                  "Int"
                ]
              ],
              [
                "SmallerFloatThan",
                [
                  "Float"
                ]
              ],
              [
                "GreaterFloatThan",
                [
                  "Float"
                ]
              ],
              [
                "ShorterStringThan",
                [
                  "Int"
                ]
              ],
              [
                "LongerStringThan",
                [
                  "Int"
                ]
              ],
              [
                "NotIncludedIn",
                []
              ],
              [
                "CustomError",
                [
                  "e"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "getAt",
            "comment": " Get error at name, for nested errors.\n",
            "type": "String -> Form.Error.Error e -> Maybe.Maybe (Form.Error.Error e)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Form.Field",
        "comment": " Read and write field values.\n\n# Constructors\n@docs Field, group\n\n# Value readers\n@docs at, asString, asBool\n",
        "aliases": [],
        "types": [
          {
            "name": "Field",
            "comment": " Form field. Can either be a group of named fields, or a final field.\n",
            "args": [],
            "cases": [
              [
                "Group",
                [
                  "Dict.Dict String Form.Field.Field"
                ]
              ],
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "Textarea",
                [
                  "String"
                ]
              ],
              [
                "Select",
                [
                  "String"
                ]
              ],
              [
                "Radio",
                [
                  "String"
                ]
              ],
              [
                "Check",
                [
                  "Bool"
                ]
              ],
              [
                "EmptyField",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "asBool",
            "comment": " Get field value as boolean.\n",
            "type": "Form.Field.Field -> Maybe.Maybe Bool"
          },
          {
            "name": "asString",
            "comment": " Get field value as string.\n",
            "type": "Form.Field.Field -> Maybe.Maybe String"
          },
          {
            "name": "at",
            "comment": " Get field at name, for nested forms.\n",
            "type": "String -> Form.Field.Field -> Maybe.Maybe Form.Field.Field"
          },
          {
            "name": "group",
            "comment": " Build a group of values, for nested forms.\n",
            "type": "List ( String, Form.Field.Field ) -> Form.Field.Field"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-simple-form-infix",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Form.Infix",
        "comment": " Form validation infix operators.\n\n@docs (:=), (?=), (|:)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": ":=",
            "comment": " Infix version of `get`.\n\n    \"name\" := string\n",
            "type": "String -> Form.Validate.Validation e a -> Form.Validate.Validation e a"
          },
          {
            "name": "?=",
            "comment": " Access given field, wrapped in a `maybe` (Nothing if error).\n\n    \"hobby\" ?= string\n",
            "type": "String -> Form.Validate.Validation e a -> Form.Validate.Validation e (Maybe.Maybe a)"
          },
          {
            "name": "|:",
            "comment": " Infix version of `apply`:\n\nForm.succeed SomeRecord\n|: (\"foo\" := string)\n|: (\"bar\" := string)\n\n",
            "type": "Form.Validate.Validation e (a -> b) -> Form.Validate.Validation e a -> Form.Validate.Validation e b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-transit",
    "version": "5.0.0",
    "docs": [
      {
        "name": "Transit",
        "comment": " Styled transitions with minimal boilerplate, typically for page transitions in single page apps.\n\nSee README or [example](https://github.com/etaque/elm-transit/blob/master/example/src/Main.elm) for usage.\n\nUses elm-animations and Effects.tick for animation logic.\n\n# Model\n@docs Transition, WithTransition, initial\n\n# Timeline\n@docs Timeline, timeline, defaultTimeline, withExitDuration, withEnterDuration\n\n# Update\n@docs Action, init, update\n\n# View\n@docs getValue, getStatus, Status\n",
        "aliases": [
          {
            "name": "Timeline",
            "comment": " Timeline of the transition ",
            "args": [
              "a"
            ],
            "type": "{ exitDuration : Float, action : a, enterDuration : Float }"
          },
          {
            "name": "WithTransition",
            "comment": " Extended type for the target model holding the transition. ",
            "args": [
              "model"
            ],
            "type": "{ model | transition : Transit.Transition }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Transition action, to be wrapped in your own action type. ",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Status",
            "comment": " Transition status. ",
            "args": [],
            "cases": [
              [
                "Exit",
                []
              ],
              [
                "Enter",
                []
              ],
              [
                "Done",
                []
              ]
            ]
          },
          {
            "name": "Transition",
            "comment": " Opaque type for transition state storage. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "defaultTimeline",
            "comment": " Default timeline for this action: exit of 100ms then enter of 200ms. ",
            "type": "a -> Transit.Timeline a"
          },
          {
            "name": "getStatus",
            "comment": " Extract current animation status. ",
            "type": "Transit.Transition -> Transit.Status"
          },
          {
            "name": "getValue",
            "comment": " Extract current animation value (a float between 0 and 1). ",
            "type": "Transit.Transition -> Float"
          },
          {
            "name": "init",
            "comment": " A shortcut to `update` that initialize the transition with the following parameters:\n* `actionWrapper` to wrap Transit's action into your app's Action type (saves you one `Effects.map`)\n* `timeline` to setup transition\n* `target` is the model storing the Transition, that will be updated with new transition state\nReturns a tuple that you can directly return from your `update`.\n ",
            "type": "(Transit.Action a -> a) -> Transit.Timeline a -> Transit.WithTransition target -> ( Transit.WithTransition target, Effects.Effects a )"
          },
          {
            "name": "initial",
            "comment": " Empty transition state, as initial value in the model. ",
            "type": "Transit.Transition"
          },
          {
            "name": "timeline",
            "comment": " Build the timeline:\n> exitDuration => action => enterDuration\n",
            "type": "Float -> a -> Float -> Transit.Timeline a"
          },
          {
            "name": "update",
            "comment": " Where all the logic happens. Run transition steps, and triggers timeline's action when needed.\n* `actionWrapper` to wrap Transit's action into app's Action type (saves one `Effects.map`),\n* `action` is the Transit action to process,\n* `target` is the model storing the Transition, that will be updated with new transition state.\n ",
            "type": "(Transit.Action a -> a) -> Transit.Action a -> Transit.WithTransition target -> ( Transit.WithTransition target, Effects.Effects a )"
          },
          {
            "name": "withEnterDuration",
            "comment": " Update enter duration of timeline. ",
            "type": "Float -> Transit.Timeline a -> Transit.Timeline a"
          },
          {
            "name": "withExitDuration",
            "comment": " Update exit duration of timeline. ",
            "type": "Float -> Transit.Timeline a -> Transit.Timeline a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-transit-router",
    "version": "1.0.1",
    "docs": [
      {
        "name": "TransitRouter",
        "comment": "\nDrop-in router with transitions for animated, single page apps. See README for usage.\n\n# Types\n@docs WithRoute, TransitRouter, Action, Config\n\n# Actions\n@docs actions, empty, init, update\n\n# Views\n@docs getRoute, getTransition, pushPathAddress\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Config record for router behaviour:\n * `mountRoute`: what should be the result of a route update (previous route, new route, model) on your model & effects\n * `getDurations`: durations for `Enter` (before `routeUpdate`) and `Exit` (after) phases, same params as `mountRoute`\n * `actionWrapper`: wrapper for router actions into your own action type, to be consistent with `mountRoute` result\n * `routeDecoder`: to transform a path to a route (see `etaque/elm-route-decoder`)\n ",
            "args": [
              "route",
              "action",
              "model"
            ],
            "type": "{ mountRoute : route -> route -> TransitRouter.WithRoute route model -> Response.Response (TransitRouter.WithRoute route model) action , getDurations : route -> route -> TransitRouter.WithRoute route model -> ( Float, Float ) , actionWrapper : TransitRouter.Action route -> action , routeDecoder : String -> route }"
          },
          {
            "name": "WithRoute",
            "comment": " Type extension for the model. ",
            "args": [
              "route",
              "model"
            ],
            "type": "{ model | transitRouter : TransitRouter.TransitRouter route }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Router actions, wrap it in you own Action type. ",
            "args": [
              "route"
            ],
            "cases": []
          },
          {
            "name": "TransitRouter",
            "comment": " State of the router. ",
            "args": [
              "route"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "actions",
            "comment": " Signal for path updates, feed your app with this as input. ",
            "type": "Signal.Signal (TransitRouter.Action route)"
          },
          {
            "name": "empty",
            "comment": " Empty state for model initialisation (route should render nothing, like EmptyRoute). ",
            "type": "route -> TransitRouter.TransitRouter route"
          },
          {
            "name": "getRoute",
            "comment": " Get current route from model ",
            "type": "TransitRouter.WithRoute route model -> route"
          },
          {
            "name": "getTransition",
            "comment": " Get current transition from model.\nSee etaque/elm-transit for transition handling.\n",
            "type": "TransitRouter.WithRoute route model -> Transit.Transition"
          },
          {
            "name": "init",
            "comment": " Start the router with this config and an initial path. Returns host's model and action. ",
            "type": "TransitRouter.Config route action model -> String -> TransitRouter.WithRoute route model -> Response.Response (TransitRouter.WithRoute route model) action"
          },
          {
            "name": "pushPathAddress",
            "comment": " Address for path updates. Can be used to create a click handler:\n\n    clickTo : String -> List Attribute\n    clickTo path =\n      [ href path\n      , onWithOptions\n          \"click\"\n          { stopPropagation = True, preventDefault = True }\n          Json.value\n          (\\_ -> message TransitRouter.pushPathAddress path)\n      ]\n ",
            "type": "Signal.Address String"
          },
          {
            "name": "update",
            "comment": " Update the router with this config, for a given action. Returns host's model and action. ",
            "type": "TransitRouter.Config route action model -> TransitRouter.Action route -> TransitRouter.WithRoute route model -> Response.Response (TransitRouter.WithRoute route model) action"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "etaque/elm-transit-style",
    "version": "1.0.1",
    "docs": [
      {
        "name": "TransitStyle",
        "comment": " Animations for elm-transit, to be used on elm-html `style` attribute.\n\n    div\n      [ style (fadeSlideLeft 100 model.transition) ]\n      [ text \"Some content\" ]\n\n# Combinations\n@docs fadeSlideLeft\n\n# Slide left\n@docs slideLeft, slideOutLeft, slideInLeft\n\n# Fade\n@docs fade, fadeOut, fadeIn\n\n# Tooling to create animations\n@docs compose, Style\n",
        "aliases": [
          {
            "name": "Style",
            "comment": " Just an alias for elm-html style value ",
            "args": [],
            "type": "List ( String, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compose",
            "comment": " Compose an animation with `exit` and `enter` phases. ",
            "type": "(Float -> TransitStyle.Style) -> (Float -> TransitStyle.Style) -> Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "fade",
            "comment": " Fade animation ",
            "type": "Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "fadeIn",
            "comment": " Fade in ",
            "type": "Float -> TransitStyle.Style"
          },
          {
            "name": "fadeOut",
            "comment": " Fade out ",
            "type": "Float -> TransitStyle.Style"
          },
          {
            "name": "fadeSlideLeft",
            "comment": " Combine fade and slideLeft with the specified offset ",
            "type": "Float -> Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "slideInLeft",
            "comment": " Slide in to left ",
            "type": "Float -> Float -> TransitStyle.Style"
          },
          {
            "name": "slideLeft",
            "comment": " Slide left animation, with the specified offset ",
            "type": "Float -> Transit.Transition -> TransitStyle.Style"
          },
          {
            "name": "slideOutLeft",
            "comment": " Slide out to left ",
            "type": "Float -> Float -> TransitStyle.Style"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/automaton",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Automaton",
        "comment": " This library is for structuring reactive code. The key concepts come\ndirectly from [Arrowized FRP][afrp]. It is not yet clear how\nvaluable this is, so it is a great domain for experimentation and iteration\nto see if we can make it a really useful tool.\n\nThis library aims to be a simple and minimal API that will help you get\nstarted with Arrowized FRP (AFRP), which can be very hard to understand\nfrom just the academic papers. From there, let us know on [the mailing\nlist](https://groups.google.com/forum/#!forum/elm-discuss) if you wrote\na larger program with it or have ideas of how to extend the API.\n\n [afrp]: http://haskell.cs.yale.edu/wp-content/uploads/2011/02/workshop-02.pdf\n\n# Automatons\n@docs Automaton\n\n# Create\n@docs pure, state, hiddenState\n\n# Evaluate\n@docs run, step\n\n# Combine\n@docs (>>>), (<<<), branch, pair, merge, first, second, combine, loop\n\n# Common Automatons\n@docs count, average\n",
        "aliases": [],
        "types": [
          {
            "name": "Automaton",
            "comment": " Think of an automaton as a little robot. It takes in `a` values and spits\nout `b` values. These robots can also remember stuff. If you put two of these\nrobots next to each other you can do fancier stuff.\n",
            "args": [
              "a",
              "b"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "<<<",
            "comment": " Compose two automatons into a pipeline. For example, lets say we have a way\nto gather wood from the trees and a way to build a ship out of wood.\n\n      gatherWood : Automaton Trees Wood\n      buildShip  : Automaton Wood  Ship\n\n      createShip : Automaton Trees Ship\n      createShip = buildShip <<< gatherWood\n",
            "type": "Automaton.Automaton inner o -> Automaton.Automaton i inner -> Automaton.Automaton i o"
          },
          {
            "name": ">>>",
            "comment": " Compose two automatons into a pipeline. For example, lets say we have a way\nto gather wood from the trees and a way to build a ship out of wood.\n\n      gatherWood : Automaton Trees Wood\n      buildShip  : Automaton Wood  Ship\n\n      createShip : Automaton Trees Ship\n      createShip = gatherWood >>> buildShip\n",
            "type": "Automaton.Automaton i inner -> Automaton.Automaton inner o -> Automaton.Automaton i o"
          },
          {
            "name": "average",
            "comment": " Computes the running average of the last `n` inputs. ",
            "type": "Int -> Automaton.Automaton Float Float"
          },
          {
            "name": "branch",
            "comment": " Take a single input and branch it out into two different results.\n\n      buildShip  : Automaton Wood Ship\n      buildHouse : Automaton Wood House\n\n      build : Automaton Wood (Ship,House)\n      build = branch buildShip buildHouse\n",
            "type": "Automaton.Automaton i o1 -> Automaton.Automaton i o2 -> Automaton.Automaton i ( o1, o2 )"
          },
          {
            "name": "combine",
            "comment": " Combine a list of automatons into a single automaton that produces a\nlist.\n",
            "type": "List (Automaton.Automaton i o) -> Automaton.Automaton i (List o)"
          },
          {
            "name": "count",
            "comment": " Count the number of steps taken. ",
            "type": "Automaton.Automaton a Int"
          },
          {
            "name": "first",
            "comment": " Create an automaton that takes in a tuple and returns a tuple, but only\ntransform the *first* thing in the tuple.\n\n      build       : Automaton Wood (Ship,House)\n      upgradeShip : Automaton Ship Yacht\n\n      buildNicer : Automaton Wood (Yacht,House)\n      buildNicer = build >>> first upgradeShip\n\nIt may be helpful to know about the following equivalence:\n\n      first upgradeShip == pair upgradeShip (pure identity)\n",
            "type": "Automaton.Automaton i o -> Automaton.Automaton ( i, extra ) ( o, extra )"
          },
          {
            "name": "hiddenState",
            "comment": " Create an automaton with hidden state. Requires an initial state and a\nstep function to step the state forward and produce an output.\n\n      type Feelings = Happy | Sad\n\n      stepPerson : Action -> Feelings -> (Reaction, Feelings)\n\n      person : Automaton Action Reaction\n      person = hiddenState Happy stepPerson\n\nNotice that a `person` has feelings, but like [the\nBehaviorists](http://en.wikipedia.org/wiki/Behaviorism), we do not need to\nworry about that as an outside observer.\n",
            "type": "s -> (i -> s -> ( o, s )) -> Automaton.Automaton i o"
          },
          {
            "name": "loop",
            "comment": " Turn an automaton into a loop, feeding some of its output back into itself!\nThis is how you make a stateful automaton the hard way.\n\n      type Feelings = Happy | Sad\n\n      stepPerson : (Action, Feelings) -> (Reaction, Feelings)\n\n      person : Automaton Action Reaction\n      person = loop Happy (pure stepPerson)\n\nThis example is equivalent to using `hiddenState` to create a `person`, but the\nbenefit of loop is that you can add state to *any* automaton. We used\n`(pure stepPerson)` in our example, but something more complex such as\n`(branch f g >>> merge h)` would work just as well with `loop`.\n",
            "type": "state -> Automaton.Automaton ( i, state ) ( o, state ) -> Automaton.Automaton i o"
          },
          {
            "name": "merge",
            "comment": " Create an automaton that takes a branched input and merges it into a single\noutput.\n\n      disaster : Automaton (Ship,House) (Wood,Wood)\n      pileWood : Wood -> Wood -> Wood\n\n      disasterRelief : Automaton (Ship,House) Wood\n      disasterRelief = disaster >>> merge pileWood\n\nIt may be helpful to notice that merge is just a variation of `pure`:\n\n      merge plieWood == pure (\\(logs,sticks) -> pileWood logs sticks)\n",
            "type": "(i1 -> i2 -> o) -> Automaton.Automaton ( i1, i2 ) o"
          },
          {
            "name": "pair",
            "comment": " Combine two independent automatons. The new automaton takes a pair of\ninputs and produces a pair of outputs. In this case we convert two separate\nvalues into two separate piles of wood:\n\n      tsunami : Automaton Ship  Wood\n      tornado : Automaton House Wood\n\n      disaster : Automaton (Ship,House) (Wood,Wood)\n      disaster = pair tsunami tornado\n",
            "type": "Automaton.Automaton i1 o1 -> Automaton.Automaton i2 o2 -> Automaton.Automaton ( i1, i2 ) ( o1, o2 )"
          },
          {
            "name": "pure",
            "comment": " Create an automaton with no memory. It just applies the given function to\nevery input.\n\n      burnCoal : Coal -> Energy\n\n      powerPlant : Automaton Coal Energy\n      powerPlant = pure burnCoal\n\nThe term *pure* refers to the fact that [the same input will always result in\nthe same output](http://en.wikipedia.org/wiki/Pure_function).\n",
            "type": "(a -> b) -> Automaton.Automaton a b"
          },
          {
            "name": "run",
            "comment": " Run an automaton on a given signal. The automaton steps forward whenever the\ninput signal updates.\n\n      count : Automaton a Int\n\n      run count Mouse.clicks\n",
            "type": "Automaton.Automaton i o -> o -> Signal.Signal i -> Signal.Signal o"
          },
          {
            "name": "second",
            "comment": " Create an automaton that takes in a tuple and returns a tuple, but only\ntransform the *second* thing in the tuple.\n\n      build        : Automaton Wood (Ship,House)\n      upgradeHouse : Automaton House Palace\n\n      buildNicer : Automaton Wood (Ship,Palace)\n      buildNicer = build >>> second upgradeHouse\n\nIt may be helpful to know about the following equivalence:\n\n      second upgradeHouse == pair (pure identity) upgradeHouse\n",
            "type": "Automaton.Automaton i o -> Automaton.Automaton ( extra, i ) ( extra, o )"
          },
          {
            "name": "state",
            "comment": " Create an automaton with state. Requires an initial state and a step\nfunction to step the state forward. For example, an automaton that counted\nhow many steps it has taken would look like this:\n\n      count = Automaton a Int\n      count = state 0 (\\_ c -> c+1)\n\nIt is a stateful automaton. The initial state is zero, and the step function\nincrements the state on every step.\n\nThis is very similar to `Signal.foldp`. Indeed, the following equivalence\nholds:\n\n      foldp f s == run (state s f) s\n",
            "type": "b -> (a -> b -> b) -> Automaton.Automaton a b"
          },
          {
            "name": "step",
            "comment": " Step an automaton forward once with a given input.\n\nSay we start with the `count` automaton, which begins with the counter at zero.\nWhen we run `step 42 count` we get back a new automaton with the counter at\n1 and the value 1. The original `count` automaton is unchanged, so we need to\nuse the new automaton to use the latest state.\n",
            "type": "i -> Automaton.Automaton i o -> ( Automaton.Automaton i o, o )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/elm-effects",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Effects",
        "comment": " This module provides all the tools necessary to create modular components\nthat manage their own effects. **It is very important that you go through\n[this tutorial](https://github.com/evancz/elm-architecture-tutorial/).** It\ndescribes a pattern that is crucial for any of these functions to make sense.\n\n# Basic Effects\n@docs Effects, none, task, tick\n\n# Combining Effects\n@docs map, batch\n\n# Helpers\n\nThere are some common patterns that will show up in folks code a lot, so there\nare some helper functions you may want to define in your own code. For example,\nthe `noFx` function makes it easier to return a model without any effects.\n\n    import Effects exposing (Effects)\n\n    noFx : model -> (model, Effects a)\n    noFx model =\n        (model, Effects.none)\n\nThis way you don't have to add the tuple in, just say something like\n`(noFx <| ...)` and get the same result.\n\nIf folks find this helpful, we will add it to this library. Let us know your\nexperience in an issue.\n\n\n# Running Effects\n@docs toTask, Never\n",
        "aliases": [],
        "types": [
          {
            "name": "Effects",
            "comment": " Represents some kind of effect. Right now this library supports tasks for\narbitrary effects and clock ticks for animations.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Never",
            "comment": " A type that is \"uninhabited\". There are no values of type `Never`, so if\nsomething has this type, it is a guarantee that it can never happen. It is\nuseful for demanding that a `Task` can never fail.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "batch",
            "comment": " Create a batch of effects. The following example requests two tasks: one\nfor the user’s picture and one for their age. You could put a bunch more stuff\nin that batch if you wanted!\n\n    init : String -> (Model, Effects Action)\n    init userID =\n        ( { id = userID\n          , picture = Nothing\n          , age = Nothing\n          }\n        , batch [ getPicture userID, getAge userID ]\n        )\n\n    -- getPicture : String -> Effects Action\n    -- getAge : String -> Effects Action\n\nExample 6 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "List (Effects.Effects a) -> Effects.Effects a"
          },
          {
            "name": "map",
            "comment": " Transform the return type of a bunch of `Effects`. This is primarily useful\nfor adding tags to route `Actions` to the right place in The Elm Architecture.\n\nExample 6 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "(a -> b) -> Effects.Effects a -> Effects.Effects b"
          },
          {
            "name": "none",
            "comment": " The simplest effect of them all: don’t do anything! This is useful when\nsome branches of your update function request effects and others do not.\n\nExample 5 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "Effects.Effects a"
          },
          {
            "name": "task",
            "comment": " Turn a `Task` into an `Effects` that results in an `a` value.\n\nNormally a `Task` has a error type and a success type. In this case the error\ntype is `Never` meaning that you must provide a task that never fails. Lots of\ntasks can fail (like HTTP requests), so you will want to use `Task.toMaybe`\nand `Task.toResult` to move potential errors into the success type so they can\nbe handled explicitly.\n\nExample 5 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "Task.Task Effects.Never a -> Effects.Effects a"
          },
          {
            "name": "tick",
            "comment": " Request a clock tick for animations. This function takes a function to turn\nthe current time into an `a` value that can be handled by the relevant component.\n\nExample 8 in [elm-architecture-tutorial](https://github.com/evancz/elm-architecture-tutorial/)\nhas a nice example of this with further explanation in the tutorial itself.\n",
            "type": "(Time.Time -> a) -> Effects.Effects a"
          },
          {
            "name": "toTask",
            "comment": " Convert an `Effects` into a task that cannot fail. When run, the resulting\ntask will send a bunch of message lists to the given `Address`. As an invariant,\nno empty list will ever be sent. Non-singleton lists will only ever be sent for\neffects created with [`tick`](#tick). Those may be batched even over different\ncalls to `toTask` with the same `Address`. In such lists, the order of elements\nis not significant.\n\nGenerally speaking, you should not need this function, particularly if you are\nusing [start-app](http://package.elm-lang.org/packages/evancz/start-app/latest).\nIt is mainly useful at the very root of your program where you actually need to\ngive all the effects to a port. So in the common case you should use this\nfunction 0 times per project, and if you are doing very special things for\nexpert reasons, you should probably have either 0 or 1 uses of this per\nproject.\n",
            "type": "Signal.Address (List a) -> Effects.Effects a -> Task.Task Effects.Never ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/elm-html",
    "version": "4.0.2",
    "docs": [
      {
        "name": "Html.Lazy",
        "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Html` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> Html.Html) -> a -> Html.Html"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> Html.Html) -> a -> b -> Html.Html"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> Html.Html) -> a -> b -> c -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Events",
        "comment": "\nIt is often helpful to create an [Union Type][] so you can have many different kinds\nof events as seen in the [TodoMVC][] example.\n\n[Union Type]: http://elm-lang.org/learn/Union-Types.elm\n[TodoMVC]: https://github.com/evancz/elm-todomvc/blob/master/Todo.elm\n\n# Focus Helpers\n@docs onBlur, onFocus, onSubmit\n\n# Keyboard Helpers\n@docs onKeyUp, onKeyDown, onKeyPress\n\n# Mouse Helpers\n@docs onClick, onDoubleClick, onMouseMove,\n      onMouseDown, onMouseUp,\n      onMouseEnter, onMouseLeave,\n      onMouseOver, onMouseOut\n\n# Custom Event Handlers\n@docs on, targetValue, targetChecked, keyCode,\n    onWithOptions, Options, defaultOptions\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
            "args": [],
            "type": "{ stopPropagation : Bool, preventDefault : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n",
            "type": "Html.Events.Options"
          },
          {
            "name": "keyCode",
            "comment": " A `Json.Decoder` for grabbing `event.keyCode` from the triggered event.\nThis is useful for key events today, though it looks like the spec is moving\ntowards the `event.key` field for this someday.\n\n    onKeyUp : Signal.Address a -> (Int -> a) -> Attribute\n    onKeyUp address handler =\n        on \"keyup\" keyCode (\\code -> Signal.message address (handler code))\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "on",
            "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : Signal.Address a -> Attribute\n    onClick address =\n        on \"click\" Json.value (\\_ -> Signal.message address ())\n\nYou first specify the name of the event in the same format as with\nJavaScript’s `addEventListener`. Next you give a JSON decoder, which lets\nyou pull information out of the event object. If that decoder is successful,\nthe resulting value is given to a function that creates a `Signal.Message`.\nSo in our example, we will send `()` to the given `address`.\n",
            "type": "String -> Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          },
          {
            "name": "onBlur",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onClick",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onDoubleClick",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onFocus",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onKeyDown",
            "comment": "",
            "type": "Signal.Address a -> (Int -> a) -> Html.Attribute"
          },
          {
            "name": "onKeyPress",
            "comment": "",
            "type": "Signal.Address a -> (Int -> a) -> Html.Attribute"
          },
          {
            "name": "onKeyUp",
            "comment": "",
            "type": "Signal.Address a -> (Int -> a) -> Html.Attribute"
          },
          {
            "name": "onMouseDown",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onMouseEnter",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onMouseLeave",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onMouseMove",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onMouseOut",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onMouseOver",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onMouseUp",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onSubmit",
            "comment": "",
            "type": "Signal.Address a -> a -> Html.Attribute"
          },
          {
            "name": "onWithOptions",
            "comment": " Same as `on` but you can set a few options.\n",
            "type": "String -> Html.Events.Options -> Json.Decode.Decoder a -> (a -> Signal.Message) -> Html.Attribute"
          },
          {
            "name": "targetChecked",
            "comment": " A `Json.Decoder` for grabbing `event.target.checked` from the triggered\nevent. This is useful for input event on checkboxes.\n\n    onInput : Signal.Address a -> (Bool -> a) -> Attribute\n    onInput address contentToValue =\n        on \"input\" targetChecked (\\bool -> Signal.message address (contentToValue bool))\n",
            "type": "Json.Decode.Decoder Bool"
          },
          {
            "name": "targetValue",
            "comment": " A `Json.Decoder` for grabbing `event.target.value` from the triggered\nevent. This is often useful for input event on text fields.\n\n    onInput : Signal.Address a -> (String -> a) -> Attribute\n    onInput address contentToValue =\n        on \"input\" targetValue (\\str -> Signal.message address (contentToValue str))\n",
            "type": "Json.Decode.Decoder String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Attributes",
        "comment": " Helper functions for HTML attributes. They are organized roughly by\ncategory. Each attribute is labeled with the HTML tags it can be used with, so\njust search the page for `video` if you want video stuff.\n\nIf you cannot find what you are looking for, go to the [Custom\nAttributes](#custom-attributes) section to learn how to create new helpers.\n\n# Special Attributes\n@docs key, style\n\n# Super Common Attributes\n@docs class, classList, id, title, hidden\n\n# Inputs\n@docs type', value, checked, placeholder, selected\n\n## Input Helpers\n@docs accept, acceptCharset, action, autocomplete, autofocus, autosave,\n    disabled, enctype, formaction, list, maxlength, minlength, method, multiple,\n    name, novalidate, pattern, readonly, required, size, for, form\n\n## Input Ranges\n@docs max, min, step\n\n## Input Text Areas\n@docs cols, rows, wrap\n\n\n# Links and Areas\n@docs href, target, download, downloadAs, hreflang, media, ping, rel\n\n## Maps\n@docs ismap, usemap, shape, coords\n\n\n# Embedded Content\n@docs src, height, width, alt\n\n## Audio and Video\n@docs autoplay, controls, loop, preload, poster, default, kind, srclang\n\n## iframes\n@docs sandbox, seamless, srcdoc\n\n# Ordered Lists\n@docs reversed, start\n\n# Tables\n@docs align, colspan, rowspan, headers, scope\n\n# Header Stuff\n@docs async, charset, content, defer, httpEquiv, language, scoped\n\n# Less Common Global Attributes\nAttributes that can be attached to any HTML tag but are less commonly used.\n@docs accesskey, contenteditable, contextmenu, dir, draggable, dropzone,\n      itemprop, lang, spellcheck, tabindex\n\n# Key Generation\n@docs challenge, keytype\n\n# Miscellaneous\n@docs cite, datetime, pubdate, manifest\n\n# Custom Attributes\n\nWhen using HTML and JS, there are two ways to specify parts of a DOM node.\n\n  1. Attributes &mdash; You can set things in HTML itself. So the `class`\n     in `<div class=\"greeting\"></div>` is called an *attribute*.\n\n  2. Properties &mdash; You can also set things in JS. So the `className`\n     in `div.className = 'greeting'` is called a *property*.\n\nSo the `class` attribute corresponds to the `className` property. At first\nglance, perhaps this distinction is defensible, but it gets much crazier.\n*There is not always a one-to-one mapping between attributes and properties!*\nYes, that is a true fact. Sometimes an attribute exists, but there is no\ncorresponding property. Sometimes changing an attribute does not change the\nunderlying property. For example, as of this writing the `webkit-playsinline`\nattribute can be used in HTML, but there is no corresponding property!\n\nPretty much all of the functions in `Html.Attributes` are defined with\n`property` and that is generally the preferred approach.\n\n@docs property, attribute\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accept",
            "comment": " List of types the server accepts, typically a file type.\nFor `form` and `input`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "acceptCharset",
            "comment": " List of supported charsets in a `form`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "accesskey",
            "comment": " Defines a keyboard shortcut to activate or add focus to the element. ",
            "type": "Char -> Html.Attribute"
          },
          {
            "name": "action",
            "comment": " The URI of a program that processes the information submitted via a `form`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "align",
            "comment": " Specifies the horizontal alignment of a `caption`, `col`, `colgroup`,\n`hr`, `iframe`, `img`, `table`, `tbody`,  `td`,  `tfoot`, `th`, `thead`, or\n`tr`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "alt",
            "comment": " Alternative text in case an image can't be displayed. Works with `img`,\n`area`, and `input`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "async",
            "comment": " Indicates that the `script` should be executed asynchronously. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "attribute",
            "comment": " Create arbitrary HTML *attributes*. Maps onto JavaScript&rsquo;s\n`setAttribute` function under the hood.\n\n    greeting : Html\n    greeting =\n        div [ attribute \"class\" \"greeting\" ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *attribute* name, so we use `class` as it would\nbe in HTML, not `className` as it would appear in JS.\n",
            "type": "String -> String -> Html.Attribute"
          },
          {
            "name": "autocomplete",
            "comment": " Indicates whether a `form` anor `input` can have their values automatically\ncompleted by the browser.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "autofocus",
            "comment": " The element should be automatically focused after the page loaded.\nFor `button`, `input`, `keygen`, `select`, and `textarea`.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "autoplay",
            "comment": " The `audio` or `video` should play as soon as possible. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "autosave",
            "comment": " Previous entries into an `input` will be persisted across page loads,\nassociated with a unique ID. The previous entries will be displayed as\nsuggestions when the user types into an `input` that has an autosave attribute\nwith the same unique ID.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "challenge",
            "comment": " A challenge string that is submitted along with the public key in a `keygen`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "charset",
            "comment": " Declares the character encoding of the page or script. Common values include:\n\n  * UTF-8 - Character encoding for Unicode\n  * ISO-8859-1 - Character encoding for the Latin alphabet\n\nFor `meta` and `script`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "checked",
            "comment": " Indicates whether an `input` of type checkbox is checked. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "cite",
            "comment": " Contains a URI which points to the source of the quote or change in a\n`blockquote`, `del`, `ins`, or `q`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "class",
            "comment": " Often used with CSS to style elements with common properties. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "classList",
            "comment": " This function makes it easier to build a space-separated class attribute.\nEach class can easily be added and removed depending on the boolean value it\nis paired with.\n\n    renderMessage : Msg -> Html\n    renderMessage msg =\n      div\n        [\n          classList [\n            (\"message\", True),\n            (\"message-important\", msg.isImportant),\n            (\"message-read\", msg.isRead)\n          ]\n        ]\n        [ text msg.content ]\n",
            "type": "List ( String, Bool ) -> Html.Attribute"
          },
          {
            "name": "cols",
            "comment": " Defines the number of columns in a `textarea`. ",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "colspan",
            "comment": " The colspan attribute defines the number of columns a cell should span.\nFor `td` and `th`.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "content",
            "comment": " A value associated with http-equiv or name depending on the context. For\n`meta`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "contenteditable",
            "comment": " Indicates whether the element's content is editable. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "contextmenu",
            "comment": " Defines the ID of a `menu` element which will serve as the element's\ncontext menu.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "controls",
            "comment": " Indicates whether the browser should show playback controls for the `audio`\nor `video`.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "coords",
            "comment": " A set of values specifying the coordinates of the hot-spot region in an\n`area`. Needs to be paired with a `shape` attribute to be meaningful.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "datetime",
            "comment": " Indicates the date and time associated with the element.\nFor `del`, `ins`, `time`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "default",
            "comment": " Indicates that the `track` should be enabled unless the user's preferences\nindicate something different.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "defer",
            "comment": " Indicates that a `script` should be executed after the page has been\nparsed.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "dir",
            "comment": " Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl\n(Right-To-Left).\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "disabled",
            "comment": " Indicates whether the user can interact with a `button`, `fieldset`,\n`input`, `keygen`, `optgroup`, `option`, `select` or `textarea`.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "download",
            "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "downloadAs",
            "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly, and that the downloaded resource with have the given filename.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "draggable",
            "comment": " Defines whether the element can be dragged. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "dropzone",
            "comment": " Indicates that the element accept the dropping of content on it. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "enctype",
            "comment": " How `form` data should be encoded when submitted with the POST method.\nOptions include: application/x-www-form-urlencoded, multipart/form-data, and\ntext/plain.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "for",
            "comment": " The element ID described by this `label` or the element IDs that are used\nfor an `output`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "form",
            "comment": " Indicates the element ID of the `form` that owns this particular `button`,\n`fieldset`, `input`, `keygen`, `label`, `meter`, `object`, `output`,\n`progress`, `select`, or `textarea`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "formaction",
            "comment": " Indicates the action of an `input` or `button`. This overrides the action\ndefined in the surrounding `form`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "headers",
            "comment": " A space separated list of element IDs indicating which `th` elements are\nheaders for this cell. For `td` and `th`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "height",
            "comment": " Declare the height of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "hidden",
            "comment": " Indicates the relevance of an element. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "href",
            "comment": " The URL of a linked resource, such as `a`, `area`, `base`, or `link`. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "hreflang",
            "comment": " Two-letter language code of the linked resource of an `a`, `area`, or `link`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "httpEquiv",
            "comment": " This attribute is an indicator that is paired with the `content` attribute,\nindicating what that content means. `httpEquiv` can take on three different\nvalues: content-type, default-style, or refresh. For `meta`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "id",
            "comment": " Often used with CSS to style a specific element. The value of this\nattribute must be unique.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "ismap",
            "comment": " When an `img` is a descendent of an `a` tag, the `ismap` attribute\nindicates that the click location should be added to the parent `a`'s href as\na query string.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "itemprop",
            "comment": "",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "key",
            "comment": " A special attribute that uniquely identifies a node during the diffing\nprocess. If you have a list of 20 items and want to remove the 4th one, adding\nkeys ensures that you do not end up doing misaligned diffs on the following 15\nitems.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "keytype",
            "comment": " Specifies the type of key generated by a `keygen`. Possible values are:\nrsa, dsa, and ec.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "kind",
            "comment": " Specifies the kind of text `track`. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "lang",
            "comment": " Defines the language used in the element. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "language",
            "comment": " Defines the script language used in a `script`. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "list",
            "comment": " Associates an `input` with a `datalist` tag. The datalist gives some\npre-defined options to suggest to the user as they interact with an input.\nThe value of the list attribute must match the id of a `datalist` node.\nFor `input`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "loop",
            "comment": " Indicates whether the `audio` or `video` should start playing from the\nstart when it's finished.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "manifest",
            "comment": " Specifies the URL of the cache manifest for an `html` tag. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "max",
            "comment": " Indicates the maximum value allowed. When using an input of type number or\ndate, the max value must be a number or date. For `input`, `meter`, and `progress`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "maxlength",
            "comment": " Defines the maximum number of characters allowed in an `input` or\n`textarea`.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "media",
            "comment": " Specifies a hint of the target media of a `a`, `area`, `link`, `source`,\nor `style`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "method",
            "comment": " Defines which HTTP method to use when submitting a `form`. Can be GET\n(default) or POST.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "min",
            "comment": " Indicates the minimum value allowed. When using an input of type number or\ndate, the min value must be a number or date. For `input` and `meter`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "minlength",
            "comment": " Defines the minimum number of characters allowed in an `input` or\n`textarea`.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "multiple",
            "comment": " Indicates whether multiple values can be entered in an `input` of type\nemail or file. Can also indicate that you can `select` many options.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "name",
            "comment": " Name of the element. For example used by the server to identify the fields\nin form submits. For `button`, `form`, `fieldset`, `iframe`, `input`, `keygen`,\n`object`, `output`, `select`, `textarea`, `map`, `meta`, and `param`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "novalidate",
            "comment": " This attribute indicates that a `form` shouldn't be validated when\nsubmitted.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "pattern",
            "comment": " Defines a regular expression which an `input`'s value will be validated\nagainst.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "ping",
            "comment": " Specify a URL to send a short POST request to when the user clicks on an\n`a` or `area`. Useful for monitoring and tracking.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "placeholder",
            "comment": " Provides a hint to the user of what can be entered into an `input` or\n`textarea`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "poster",
            "comment": " A URL indicating a poster frame to show until the user plays or seeks the\n`video`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "preload",
            "comment": " Control how much of an `audio` or `video` resource should be preloaded. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "property",
            "comment": " Create arbitrary *properties*.\n\n    import Json.Encode as Json\n\n    greeting : Html\n    greeting =\n        div [ property \"className\" (Json.string \"greeting\") ] [\n          text \"Hello!\"\n        ]\n\nNotice that you must give the *property* name, so we use `className` as it\nwould be in JavaScript, not `class` as it would appear in HTML.\n",
            "type": "String -> Json.Encode.Value -> Html.Attribute"
          },
          {
            "name": "pubdate",
            "comment": " Indicates whether this date and time is the date of the nearest `article`\nancestor element. For `time`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "readonly",
            "comment": " Indicates whether an `input` or `textarea` can be edited. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "rel",
            "comment": " Specifies the relationship of the target object to the link object.\nFor `a`, `area`, `link`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "required",
            "comment": " Indicates whether this element is required to fill out or not.\nFor `input`, `select`, and `textarea`.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "reversed",
            "comment": " Indicates whether an ordered list `ol` should be displayed in a descending\norder instead of a ascending.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "rows",
            "comment": " Defines the number of rows in a `textarea`. ",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "rowspan",
            "comment": " Defines the number of rows a table cell should span over.\nFor `td` and `th`.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "sandbox",
            "comment": " A space separated list of security restrictions you'd like to lift for an\n`iframe`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "scope",
            "comment": " Specifies the scope of a header cell `th`. Possible values are: col, row,\ncolgroup, rowgroup.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "scoped",
            "comment": " Indicates that a `style` should only apply to its parent and all of the\nparents children.\n",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "seamless",
            "comment": "  Make an `iframe` look like part of the containing document. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "selected",
            "comment": " Defines which `option` will be selected on page load. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "shape",
            "comment": " Declare the shape of the clickable area in an `a` or `area`. Valid values\ninclude: default, rect, circle, poly. This attribute can be paired with\n`coords` to create more particular shapes.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "size",
            "comment": " For `input` specifies the width of an input in characters.\n\nFor `select` specifies the number of visible options in a drop-down list.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "spellcheck",
            "comment": " Indicates whether spell checking is allowed for the element. ",
            "type": "Bool -> Html.Attribute"
          },
          {
            "name": "src",
            "comment": " The URL of the embeddable content. For `audio`, `embed`, `iframe`, `img`,\n`input`, `script`, `source`, `track`, and `video`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "srcdoc",
            "comment": " An HTML document that will be displayed as the body of an `iframe`. It will\noverride the content of the `src` attribute if it has been specified.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "srclang",
            "comment": " A two letter language code indicating the language of the `track` text data.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "start",
            "comment": " Defines the first number of an ordered list if you want it to be something\nbesides 1.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "step",
            "comment": " Add a step size to an `input`. Use `step \"any\"` to allow any floating-point\nnumber to be used in the input.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "style",
            "comment": " This function makes it easier to specify a set of styles.\n\n    myStyle : Attribute\n    myStyle =\n      style\n        [ (\"backgroundColor\", \"red\")\n        , (\"height\", \"90px\")\n        , (\"width\", \"100%\")\n        ]\n\n    greeting : Html\n    greeting =\n      div [ myStyle ] [ text \"Hello!\" ]\n\nThere is no `Html.Styles` module because best practices for working with HTML\nsuggest that this should primarily be specified in CSS files. So the general\nrecommendation is to use this function lightly.\n",
            "type": "List ( String, String ) -> Html.Attribute"
          },
          {
            "name": "tabindex",
            "comment": " Overrides the browser's default tab order and follows the one specified\ninstead.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "target",
            "comment": " Specify where the results of clicking an `a`, `area`, `base`, or `form`\nshould appear. Possible special values include:\n\n  * _blank &mdash; a new window or tab\n  * _self &mdash; the same frame (this is default)\n  * _parent &mdash; the parent frame\n  * _top &mdash; the full body of the window\n\nYou can also give the name of any `frame` you have created.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "title",
            "comment": " Text to be displayed in a tooltip when hovering over the element. ",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "type'",
            "comment": " Defines the type of a `button`, `input`, `embed`, `object`, `script`,\n`source`, `style`, or `menu`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "usemap",
            "comment": " Specify the hash name reference of a `map` that should be used for an `img`\nor `object`. A hash name reference is a hash symbol followed by the element's name or id.\nE.g. `\"#planet-map\"`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "value",
            "comment": " Defines a default value which will be displayed in a `button`, `option`,\n`input`, `li`, `meter`, `progress`, or `param`.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "width",
            "comment": " Declare the width of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "wrap",
            "comment": " Indicates whether the text should be wrapped in a `textarea`. Possible\nvalues are \"hard\" and \"soft\".\n",
            "type": "String -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html",
        "comment": " This file is organized roughly in order of popularity. The tags which you'd\nexpect to use frequently will be closer to the top.\n\n# Custom Nodes\n@docs text, node, Html, Attribute\n\n# Conversions\n@docs toElement, fromElement\n\n# Headers\n@docs h1, h2, h3, h4, h5, h6\n\n# Grouping Content\n@docs div, p, hr, pre, blockquote\n\n# Text\n@docs span, a, code, em, strong, i, b, u, sub, sup, br\n\n# Lists\n@docs ol, ul, li, dl, dt, dd\n\n# Emdedded Content\n@docs img, iframe, canvas, svg, math\n\n# Inputs\n@docs form, input, textarea, button, select, option\n\n# Sections\n@docs section, nav, article, aside, header, footer, address, main', body\n\n# Figures\n@docs figure, figcaption\n\n# Tables\n@docs table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th\n\n\n# Less Common Elements\n\n## Less Common Inputs\n@docs fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter\n\n\n## Audio and Video\n@docs audio, video, source, track\n\n## Embedded Objects\n@docs embed, object, param\n\n## Text Edits\n@docs ins, del\n\n## Semantic Text\n@docs small, cite, dfn, abbr, time, var, samp, kbd, s, q\n\n## Less Common Text Tags\n@docs mark, ruby, rt, rp, bdi, bdo, wbr\n\n# Interactive Elements\n@docs details, summary, menuitem, menu\n\n",
        "aliases": [
          {
            "name": "Attribute",
            "comment": " Set attributes on your `Html`.\n",
            "args": [],
            "type": "VirtualDom.Property"
          },
          {
            "name": "Html",
            "comment": " The core building block used to build up HTML. It is backed by\n`VirtualDom.Node` in `evancz/virtual-dom` but that is not a super crucial\ndetail.\n",
            "args": [],
            "type": "VirtualDom.Node"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " Represents a hyperlink, linking to another resource. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "abbr",
            "comment": " Represents an abbreviation or an acronym; the expansion of the\nabbreviation can be represented in the title attribute.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "address",
            "comment": " Defines a section containing contact information. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "article",
            "comment": " Defines self-contained content that could exist independently of the rest\nof the content.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "aside",
            "comment": " Defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "audio",
            "comment": " Represents a sound or audio stream. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "b",
            "comment": " Represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate\nvoice.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "bdi",
            "comment": " Represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "bdo",
            "comment": " Represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "blockquote",
            "comment": " Represents a content that is quoted from another source. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "body",
            "comment": " Represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "br",
            "comment": " Represents a line break. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "button",
            "comment": " Represents a button. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "canvas",
            "comment": " Represents a bitmap area for graphics rendering. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "caption",
            "comment": " Represents the title of a table. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "cite",
            "comment": " Represents the title of a work. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "code",
            "comment": " Represents computer code. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "col",
            "comment": " Represents a column of a table. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "colgroup",
            "comment": " Represents a set of one or more columns of a table. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "datalist",
            "comment": " Represents a set of predefined options for other controls. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "dd",
            "comment": " Represents the definition of the terms immediately listed before it. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "del",
            "comment": " Defines a removal from the document. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "details",
            "comment": " Represents a widget from which the user can obtain additional information\nor controls.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "dfn",
            "comment": " Represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "div",
            "comment": " Represents a generic container with no special meaning. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "dl",
            "comment": " Defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "dt",
            "comment": " Represents a term defined by the next `dd`. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "em",
            "comment": " Represents emphasized text, like a stress accent. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "embed",
            "comment": " Represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "fieldset",
            "comment": " Represents a set of controls. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "figcaption",
            "comment": " Represents the legend of a figure. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "figure",
            "comment": " Represents a figure illustrated as part of the document. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "footer",
            "comment": " Defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "form",
            "comment": " Represents a form, consisting of controls, that can be submitted to a\nserver for processing.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "fromElement",
            "comment": " Embed Elements in HTML. Useful if you have some component written with\nElements or that uses `collage` that you want to embed in a larger HTML\ncomponent.\n",
            "type": "Graphics.Element.Element -> Html.Html"
          },
          {
            "name": "h1",
            "comment": "",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "h2",
            "comment": "",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "h3",
            "comment": "",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "h4",
            "comment": "",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "h5",
            "comment": "",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "h6",
            "comment": "",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "header",
            "comment": " Defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "hr",
            "comment": " Represents a thematic break between paragraphs of a section or article or\nany longer content.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "i",
            "comment": " Represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "iframe",
            "comment": " Embedded an HTML document. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "img",
            "comment": " Represents an image. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "input",
            "comment": " Represents a typed data field allowing the user to edit the data. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "ins",
            "comment": " Defines an addition to the document. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "kbd",
            "comment": " Represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "keygen",
            "comment": " Represents a key-pair generator control. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "label",
            "comment": " Represents the caption of a form control. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "legend",
            "comment": " Represents the caption for a `fieldset`. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "li",
            "comment": " Defines a item of an enumeration list. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "main'",
            "comment": " Defines the main or important content in the document. There is only one\n`main` element in the document.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "mark",
            "comment": " Represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "math",
            "comment": " Defines a mathematical formula. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "menu",
            "comment": " Represents a list of commands. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "menuitem",
            "comment": " Represents a command that the user can invoke. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "meter",
            "comment": " Represents a scalar measurement (or a fractional value), within a known\nrange.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "nav",
            "comment": " Defines a section that contains only navigation links.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "node",
            "comment": " General way to create HTML nodes. It is used to define all of the helper\nfunctions in this library.\n\n    div : List Attribute -> List Html -> Html\n    div attributes children =\n        node \"div\" attributes children\n\nYou can use this to create custom nodes if you need to create something that\nis not covered by the helper functions in this library.\n",
            "type": "String -> List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "object",
            "comment": " Represents an external resource, which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "ol",
            "comment": " Defines an ordered list of items. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "optgroup",
            "comment": " Represents a set of options, logically grouped. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "option",
            "comment": " Represents an option in a `select` element or a suggestion of a `datalist`\nelement.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "output",
            "comment": " Represents the result of a calculation. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "p",
            "comment": " Defines a portion that should be displayed as a paragraph. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "param",
            "comment": " Defines parameters for use by plug-ins invoked by `object` elements. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "pre",
            "comment": " Indicates that its content is preformatted and that this format must be\npreserved.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "progress",
            "comment": " Represents the completion progress of a task. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "q",
            "comment": " Represents an inline quotation. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "rp",
            "comment": " Represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "rt",
            "comment": " Represents the text of a ruby annotation. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "ruby",
            "comment": " Represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "s",
            "comment": " Represents content that is no longer accurate or relevant. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "samp",
            "comment": " Represents the output of a program or a computer. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "section",
            "comment": " Defines a section in a document.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "select",
            "comment": " Represents a control allowing selection among a set of options. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "small",
            "comment": " Represents a side comment, that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "source",
            "comment": " Allows authors to specify alternative media resources for media elements\nlike `video` or `audio`.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "span",
            "comment": " Represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like `class`, `lang`, or `dir`.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "strong",
            "comment": " Represents especially important text. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "sub",
            "comment": " Represent a subscript. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "summary",
            "comment": " Represents a summary, caption, or legend for a given `details`. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "sup",
            "comment": " Represent a superscript. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "svg",
            "comment": " Defines an embedded vectorial image. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "table",
            "comment": " Represents data with more than one dimension. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "tbody",
            "comment": " Represents the block of rows that describes the concrete data of a table.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "td",
            "comment": " Represents a data cell in a table. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "text",
            "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n      text \"Hello World!\"\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "textarea",
            "comment": " Represents a multiline text edit control. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "tfoot",
            "comment": " Represents the block of rows that describes the column summaries of a table.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "th",
            "comment": " Represents a header cell in a table. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "thead",
            "comment": " Represents the block of rows that describes the column labels of a table.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "time",
            "comment": " Represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "toElement",
            "comment": " Embed HTML in Elements. Useful if your app is written primarily with\nElements, but you need to switch over to HTML for some small section.\n",
            "type": "Int -> Int -> Html.Html -> Graphics.Element.Element"
          },
          {
            "name": "tr",
            "comment": " Represents a row of cells in a table. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "track",
            "comment": " Allows authors to specify timed text track for media elements like `video`\nor `audio`.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "u",
            "comment": " Represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "ul",
            "comment": " Defines an unordered list of items. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "var",
            "comment": " Represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "video",
            "comment": " Represents a video, the associated audio and captions, and controls. ",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          },
          {
            "name": "wbr",
            "comment": " Represents a line break opportunity, that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
            "type": "List Html.Attribute -> List Html.Html -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/elm-http",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Http",
        "comment": "\n\n# Encoding and Decoding\n@docs url, uriEncode, uriDecode\n\n# Fetch Strings and JSON\n@docs getString, get, post, Error\n\n# Body Values\n@docs Body, empty, string, multipart, Data, stringData\n\n# Arbitrary Requests\n@docs send, Request, Settings, defaultSettings\n\n# Responses\n@docs Response, Value, fromJson, RawError\n",
        "aliases": [
          {
            "name": "Request",
            "comment": " Fully specify the request you want to send. For example, if you want to\nsend a request between domains (CORS request) you will need to specify some\nheaders manually.\n\n    corsPost : Request\n    corsPost =\n        { verb = \"POST\"\n        , headers =\n            [ (\"Origin\", \"http://elm-lang.org\")\n            , (\"Access-Control-Request-Method\", \"POST\")\n            , (\"Access-Control-Request-Headers\", \"X-Custom-Header\")\n            ]\n        , url = \"http://example.com/hats\"\n        , body = empty\n        }\n",
            "args": [],
            "type": "{ verb : String , headers : List ( String, String ) , url : String , body : Http.Body }"
          },
          {
            "name": "Response",
            "comment": " All the details of the response. There are many weird facts about\nresponses which include:\n\n  * The `status` may be 0 in the case that you load something from `file://`\n  * You cannot handle redirects yourself, they will all be followed\n    automatically. If you want to know if you have gone through one or more\n    redirect, the `url` field will let you know who sent you the response, so\n    you will know if it does not match the URL you requested.\n  * You are allowed to have duplicate headers, and their values will be\n    combined into a single comma-separated string.\n\nWe have left these underlying facts about `XMLHttpRequest` as is because one\ngoal of this library is to give a low-level enough API that others can build\nwhatever helpful behavior they want on top of it.\n",
            "args": [],
            "type": "{ status : Int , statusText : String , headers : Dict.Dict String String , url : String , value : Http.Value }"
          },
          {
            "name": "Settings",
            "comment": " Configure your request if you need specific behavior.\n\n  * `timeout` lets you specify how long you are willing to wait for a response\n    before giving up. By default it is 0 which means &ldquo;never give\n    up!&rdquo;\n\n  * `onStart` and `onProgress` allow you to monitor progress. This is useful\n    if you want to show a progress bar when uploading a large amount of data.\n\n  * `desiredResponseType` lets you override the MIME type of the response, so\n    you can influence what kind of `Value` you get in the `Response`.\n",
            "args": [],
            "type": "{ timeout : Time.Time , onStart : Maybe.Maybe (Task.Task () ()) , onProgress : Maybe.Maybe (Maybe.Maybe { loaded : Int, total : Int } -> Task.Task () ()) , desiredResponseType : Maybe.Maybe String , withCredentials : Bool }"
          }
        ],
        "types": [
          {
            "name": "Body",
            "comment": " An opaque type representing the body of your HTTP message. With GET\nrequests this is empty, but in other cases it may be a string or blob.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Data",
            "comment": " Represents data that can be put in a multi-part body. Right now it only\nsupports strings, but we will support blobs and files when we get an API for\nthem in Elm.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Error",
            "comment": " The kinds of errors you typically want in practice. When you get a\nresponse but its status is not in the 200 range, it will trigger a\n`BadResponse`. When you try to decode JSON but something goes wrong,\nyou will get an `UnexpectedPayload`.\n",
            "args": [],
            "cases": [
              [
                "Timeout",
                []
              ],
              [
                "NetworkError",
                []
              ],
              [
                "UnexpectedPayload",
                [
                  "String"
                ]
              ],
              [
                "BadResponse",
                [
                  "Int",
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "RawError",
            "comment": " The things that count as errors at the lowest level. Technically, getting\na response back with status 404 is a &ldquo;successful&rdquo; response in that\nyou actually got all the information you asked for.\n\nThe `fromJson` function and `Error` type provide higher-level errors, but the\npoint of `RawError` is to allow you to define higher-level errors however you\nwant.\n",
            "args": [],
            "cases": [
              [
                "RawTimeout",
                []
              ],
              [
                "RawNetworkError",
                []
              ]
            ]
          },
          {
            "name": "Value",
            "comment": " The information given in the response. Currently there is no way to handle\n`Blob` types since we do not have an Elm API for that yet. This type will\nexpand as more values become available in Elm itself.\n",
            "args": [],
            "cases": [
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "Blob",
                [
                  "Http.Blob"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultSettings",
            "comment": " The default settings used by `get` and `post`.\n\n    { timeout = 0\n    , onStart = Nothing\n    , onProgress = Nothing\n    , desiredResponseType = Nothing\n    }\n",
            "type": "Http.Settings"
          },
          {
            "name": "empty",
            "comment": " An empty request body, no value will be sent along.\n",
            "type": "Http.Body"
          },
          {
            "name": "fromJson",
            "comment": " Turn a `Response` into an Elm value that is easier to deal with. Helpful\nif you are making customized HTTP requests with `send`, as is the case with\n`get` and `post`.\n\nGiven a `Response` this function will:\n\n  * Check that the status code is in the 200 range.\n  * Make sure the response `Value` is a string.\n  * Convert the string to Elm with the given `Decoder`.\n\nAssuming all these steps succeed, you will get an Elm value as the result!\n",
            "type": "Json.Decode.Decoder a -> Task.Task Http.RawError Http.Response -> Task.Task Http.Error a"
          },
          {
            "name": "get",
            "comment": " Send a GET request to the given URL. You also specify how to decode the\nresponse.\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        get (list string) \"http://example.com/hat-categories.json\"\n\n",
            "type": "Json.Decode.Decoder value -> String -> Task.Task Http.Error value"
          },
          {
            "name": "getString",
            "comment": " Send a GET request to the given URL. You will get the entire response as a\nstring.\n\n    hats : Task Error String\n    hats =\n        getString \"http://example.com/hat-categories.markdown\"\n\n",
            "type": "String -> Task.Task Http.Error String"
          },
          {
            "name": "multipart",
            "comment": " Create multi-part request bodies, allowing you to send many chunks of data\nall in one request. All chunks of data must be given a name.\n\nCurrently, you can only construct `stringData`, but we will support `blobData`\nand `fileData` once we have proper APIs for those types of data in Elm.\n",
            "type": "List Http.Data -> Http.Body"
          },
          {
            "name": "post",
            "comment": " Send a POST request to the given URL, carrying the given body. You also\nspecify how to decode the response with [a JSON decoder][json].\n\n[json]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#Decoder\n\n    import Json.Decode (list, string)\n\n    hats : Task Error (List String)\n    hats =\n        post (list string) \"http://example.com/hat-categories.json\" empty\n\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "send",
            "comment": " Send a request exactly how you want it. The `Settings` argument lets you\nconfigure things like timeouts and progress monitoring. The `Request` argument\ndefines all the information that will actually be sent along to a server.\n\n    crossOriginGet : String -> String -> Task RawError Response\n    crossOriginGet origin url =\n      send defaultSettings\n        { verb = \"GET\"\n        , headers = [(\"Origin\", origin)]\n        , url = url\n        , body = empty\n        }\n",
            "type": "Http.Settings -> Http.Request -> Task.Task Http.RawError Http.Response"
          },
          {
            "name": "string",
            "comment": " Provide a string as the body of the request. Useful if you need to send\nJSON data to a server that does not belong in the URL.\n\n    import Json.Decode as JS\n\n    coolestHats : Task Error (List String)\n    coolestHats =\n        post\n          (JS.list JS.string)\n          \"http://example.com/hats\"\n          (string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "String -> Http.Body"
          },
          {
            "name": "stringData",
            "comment": " A named chunk of string data.\n\n    import Json.Encode as JS\n\n    body =\n      multipart\n        [ stringData \"user\" (JS.encode user)\n        , stringData \"payload\" (JS.encode payload)\n        ]\n",
            "type": "String -> String -> Http.Data"
          },
          {
            "name": "uriDecode",
            "comment": " Decode a URI string. Same behavior as JavaScript's `decodeURIComponent`\nfunction.\n",
            "type": "String -> String"
          },
          {
            "name": "uriEncode",
            "comment": " Encode a string to be placed in any part of a URI. Same behavior as\nJavaScript's `encodeURIComponent` function.\n",
            "type": "String -> String"
          },
          {
            "name": "url",
            "comment": " Create a properly encoded URL with a [query string][qs]. The first argument is\nthe portion of the URL before the query string, which is assumed to be\nproperly encoded already. The second argument is a list of all the\nkey/value pairs needed for the query string. Both the keys and values\nwill be appropriately encoded, so they can contain spaces, ampersands, etc.\n\n[qs]: http://en.wikipedia.org/wiki/Query_string\n\n    url \"http://example.com/users\" [ (\"name\", \"john doe\"), (\"age\", \"30\") ]\n    -- http://example.com/users?name=john+doe&age=30\n",
            "type": "String -> List ( String, String ) -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/elm-markdown",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Markdown",
        "comment": " A library for markdown parsing. This is just an Elm API built on top of the\n[marked](https://github.com/chjj/marked) project which focuses on speed.\n\n# Parsing Markdown\n@docs toElement, toHtml\n\n# Parsing with Custom Options\n@docs Options, defaultOptions, toElementWith, toHtmlWith\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " Some parser options so you can tweak things for your particular case.\n\n  * `githubFlavored` &mdash; overall reasonable improvements on the original\n    markdown parser as described [here][gfm]. This includes stuff like [fenced\n    code blocks][fenced]. There are some odd parts though, such as [tables][]\n    and a setting to turn all newlines into newlines in the resulting output,\n    so there are settings to turn those on or off based on your preference.\n\n  * `defaultHighlighting` &mdash; a default language to use for code blocks that do\n    not have a language tag. So setting this to `Just \"elm\"` will treat all\n    unlabeled code blocks as Elm code. (This relies on [highlight.js][highlight]\n    as explained in the README [here](../#code-blocks).)\n\n  * `sanitize` &mdash; this determines if all HTML should be escaped. If you\n    are parsing user markdown or user input can somehow reach the markdown\n    parser, you should almost certainly turn on sanitation. If it is just you\n    writing markdown, turning sanitation off is a nice way to do some HTML\n    tricks if it is needed.\n\n  * `smartypants` &mdash; This will automatically upgrade quotes to the\n    prettier versions and turn dashes into [em dashes or en dashes][dash]\n\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown/\n[fenced]: https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks\n[tables]: https://help.github.com/articles/github-flavored-markdown/#tables\n[highlight]: https://highlightjs.org/\n[dash]: http://en.wikipedia.org/wiki/Dash\n",
            "args": [],
            "type": "{ githubFlavored : Maybe.Maybe { tables : Bool, breaks : Bool } , defaultHighlighting : Maybe.Maybe String , sanitize : Bool , smartypants : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultOptions",
            "comment": " The `Options` used by the `toElement` and `toHtml` functions.\n\n    { githubFlavored = Just { tables = False, breaks = False }\n    , defaultHighlighting = Nothing\n    , sanitize = False\n    , smartypants = False\n    }\n",
            "type": "Markdown.Options"
          },
          {
            "name": "toElement",
            "comment": " Turn a markdown string into an HTML element, using the `defaultOptions`.\n\n    intro : Element\n    intro =\n        Markdown.toElement \"\"\"\n\n    # Time Travel Made Easy\n\n    Elm Reactor grew out of my internship working on Elm at Prezi this summer...\n\n    \"\"\"\n",
            "type": "String -> Graphics.Element.Element"
          },
          {
            "name": "toElementWith",
            "comment": " Maybe you want to get prettier quotes with a simple syntax. You can use\nmodified parsing options.\n\n    options : Options\n    options =\n        { defaultOptions | smartypants = True }\n\n    toSmartElement : String -> Element\n    toSmartElement markdown =\n        Markdown.toElementWith options markdown\n",
            "type": "Markdown.Options -> String -> Graphics.Element.Element"
          },
          {
            "name": "toHtml",
            "comment": " Turn a markdown string into an HTML element, using the `defaultOptions`.\n\n    bodyParagraph : Html\n    bodyParagraph =\n        Markdown.toHtml \"\"\"\n\n    # Changing History\n\n    In addition to time travel, Elm Reactor lets you change history...\n\n    \"\"\"\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "toHtmlWith",
            "comment": " Maybe you want to parse user input into markdown. To stop them from adding\n`<script>` tags, you can use modified parsing options.\n\n    options : Options\n    options =\n        { defaultOptions | sanitize = True }\n\n    toMarkdown : String -> Html\n    toMarkdown userInput =\n        Markdown.toHtmlWith options userInput\n",
            "type": "Markdown.Options -> String -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/elm-svg",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Svg.Attributes",
        "comment": "\n\n# Regular attributes\n@docs accentHeight, accelerate, accumulate, additive, alphabetic, allowReorder,\n  amplitude, arabicForm, ascent, attributeName, attributeType, autoReverse,\n  azimuth, baseFrequency, baseProfile, bbox, begin, bias, by, calcMode,\n  capHeight, class, clipPathUnits, contentScriptType, contentStyleType, cx, cy,\n  d, decelerate, descent, diffuseConstant, divisor, dur, dx, dy, edgeMode,\n  elevation, end, exponent, externalResourcesRequired, filterRes, filterUnits,\n  format, from, fx, fy, g1, g2, glyphName, glyphRef, gradientTransform,\n  gradientUnits, hanging, height, horizAdvX, horizOriginX, horizOriginY, id,\n  ideographic, in', in2, intercept, k, k1, k2, k3, k4, kernelMatrix,\n  kernelUnitLength, keyPoints, keySplines, keyTimes, lang, lengthAdjust,\n  limitingConeAngle, local, markerHeight, markerUnits, markerWidth,\n  maskContentUnits, maskUnits, mathematical, max, media, method, min, mode,\n  name, numOctaves, offset, operator, order, orient, orientation, origin,\n  overlinePosition, overlineThickness, panose1, path, pathLength,\n  patternContentUnits, patternTransform, patternUnits, pointOrder, points,\n  pointsAtX, pointsAtY, pointsAtZ, preserveAlpha, preserveAspectRatio,\n  primitiveUnits, r, radius, refX, refY, renderingIntent, repeatCount,\n  repeatDur, requiredExtensions, requiredFeatures, restart, result, rotate,\n  rx, ry, scale, seed, slope, spacing, specularConstant, specularExponent,\n  speed, spreadMethod, startOffset, stdDeviation, stemh, stemv, stitchTiles,\n  strikethroughPosition, strikethroughThickness, string, style, surfaceScale,\n  systemLanguage, tableValues, target, targetX, targetY, textLength, title, to,\n  transform, type', u1, u2, underlinePosition, underlineThickness, unicode,\n  unicodeRange, unitsPerEm, vAlphabetic, vHanging, vIdeographic, vMathematical,\n  values, version, vertAdvY, vertOriginX, vertOriginY, viewBox, viewTarget,\n  width, widths, x, xHeight, x1, x2, xChannelSelector, xlinkActuate,\n  xlinkArcrole, xlinkHref, xlinkRole, xlinkShow, xlinkTitle, xlinkType,\n  xmlBase, xmlLang, xmlSpace, y, y1, y2, yChannelSelector, z, zoomAndPan\n\n# Presentation attributes\n@docs alignmentBaseline, baselineShift, clipPath, clipRule, clip,\n  colorInterpolationFilters, colorInterpolation, colorProfile, colorRendering,\n  color, cursor, direction, display, dominantBaseline, enableBackground,\n  fillOpacity, fillRule, fill, filter, floodColor, floodOpacity, fontFamily,\n  fontSizeAdjust, fontSize, fontStretch, fontStyle, fontVariant, fontWeight,\n  glyphOrientationHorizontal, glyphOrientationVertical, imageRendering,\n  kerning, letterSpacing, lightingColor, markerEnd, markerMid, markerStart,\n  mask, opacity, overflow, pointerEvents, shapeRendering, stopColor,\n  stopOpacity, strokeDasharray, strokeDashoffset, strokeLinecap,\n  strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, stroke,\n  textAnchor, textDecoration, textRendering, unicodeBidi, visibility,\n  wordSpacing, writingMode\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "accelerate",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "accentHeight",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "accumulate",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "additive",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "alignmentBaseline",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "allowReorder",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "alphabetic",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "amplitude",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "arabicForm",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "ascent",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "attributeName",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "attributeType",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "autoReverse",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "azimuth",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "baseFrequency",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "baseProfile",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "baselineShift",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "bbox",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "begin",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "bias",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "by",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "calcMode",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "capHeight",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "class",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "clip",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "clipPath",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "clipPathUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "clipRule",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "color",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "colorInterpolation",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "colorInterpolationFilters",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "colorProfile",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "colorRendering",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "contentScriptType",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "contentStyleType",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "cursor",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "cx",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "cy",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "d",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "decelerate",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "descent",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "diffuseConstant",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "direction",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "display",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "divisor",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "dominantBaseline",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "dur",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "dx",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "dy",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "edgeMode",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "elevation",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "enableBackground",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "end",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "exponent",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "externalResourcesRequired",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fill",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fillOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fillRule",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "filterRes",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "filterUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "floodColor",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "floodOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontFamily",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontSize",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontSizeAdjust",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontStretch",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontStyle",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontVariant",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fontWeight",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "format",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "from",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fx",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "fy",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "g1",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "g2",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "glyphName",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "glyphOrientationHorizontal",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "glyphOrientationVertical",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "glyphRef",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "gradientTransform",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "gradientUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "hanging",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "height",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "horizAdvX",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "horizOriginX",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "horizOriginY",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "id",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "ideographic",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "imageRendering",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "in'",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "in2",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "intercept",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "k",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "k1",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "k2",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "k3",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "k4",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "kernelMatrix",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "kernelUnitLength",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "kerning",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "keyPoints",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "keySplines",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "keyTimes",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "lang",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "lengthAdjust",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "letterSpacing",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "lightingColor",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "limitingConeAngle",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "local",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "markerEnd",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "markerHeight",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "markerMid",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "markerStart",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "markerUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "markerWidth",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "mask",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "maskContentUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "maskUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "mathematical",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "max",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "media",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "method",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "min",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "mode",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "name",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "numOctaves",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "offset",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "opacity",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "operator",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "order",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "orient",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "orientation",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "origin",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "overflow",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "overlinePosition",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "overlineThickness",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "panose1",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "path",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "pathLength",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "patternContentUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "patternTransform",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "patternUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "pointOrder",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "pointerEvents",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "points",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "pointsAtX",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "pointsAtY",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "pointsAtZ",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "preserveAlpha",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "preserveAspectRatio",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "primitiveUnits",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "r",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "radius",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "refX",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "refY",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "renderingIntent",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "repeatCount",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "repeatDur",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "requiredExtensions",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "requiredFeatures",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "restart",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "result",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "rotate",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "rx",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "ry",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "scale",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "seed",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "shapeRendering",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "slope",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "spacing",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "specularConstant",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "specularExponent",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "speed",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "spreadMethod",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "startOffset",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stdDeviation",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stemh",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stemv",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stitchTiles",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stopColor",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stopOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strikethroughPosition",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strikethroughThickness",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "string",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "stroke",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeDasharray",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeDashoffset",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeLinecap",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeLinejoin",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeMiterlimit",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeOpacity",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "strokeWidth",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "style",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "surfaceScale",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "systemLanguage",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "tableValues",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "target",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "targetX",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "targetY",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "textAnchor",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "textDecoration",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "textLength",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "textRendering",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "title",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "to",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "transform",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "type'",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "u1",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "u2",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "underlinePosition",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "underlineThickness",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "unicode",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "unicodeBidi",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "unicodeRange",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "unitsPerEm",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vAlphabetic",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vHanging",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vIdeographic",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vMathematical",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "values",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "version",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vertAdvY",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vertOriginX",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "vertOriginY",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "viewBox",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "viewTarget",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "visibility",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "width",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "widths",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "wordSpacing",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "writingMode",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "x",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "x1",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "x2",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xChannelSelector",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xHeight",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkActuate",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkArcrole",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkHref",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkRole",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkShow",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkTitle",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xlinkType",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xmlBase",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xmlLang",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "xmlSpace",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "y",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "y1",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "y2",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "yChannelSelector",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "z",
            "comment": "",
            "type": "String -> Svg.Attribute"
          },
          {
            "name": "zoomAndPan",
            "comment": "",
            "type": "String -> Svg.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Svg.Lazy",
        "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Svg` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lazy",
            "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n",
            "type": "(a -> Svg.Svg) -> a -> Svg.Svg"
          },
          {
            "name": "lazy2",
            "comment": " Same as `lazy` but checks on two arguments.\n",
            "type": "(a -> b -> Svg.Svg) -> a -> b -> Svg.Svg"
          },
          {
            "name": "lazy3",
            "comment": " Same as `lazy` but checks on three arguments.\n",
            "type": "(a -> b -> c -> Svg.Svg) -> a -> b -> c -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Svg.Events",
        "comment": "\n\n# Animation event attributes\n@docs onBegin, onEnd, onRepeat\n\n# Document event attributes\n@docs onAbort, onError, onResize, onScroll, onLoad, onUnload, onZoom\n\n# Graphical event attributes\n@docs onActivate, onClick, onFocusIn, onFocusOut, onMouseDown, onMouseMove,\n  onMouseOut, onMouseOver, onMouseUp\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onAbort",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onActivate",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onBegin",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onClick",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onEnd",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onError",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onFocusIn",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onFocusOut",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onLoad",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onMouseDown",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onMouseMove",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onMouseOut",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onMouseOver",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onMouseUp",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onRepeat",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onResize",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onScroll",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onUnload",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          },
          {
            "name": "onZoom",
            "comment": "",
            "type": "Signal.Message -> Svg.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Svg",
        "comment": "\n\n# SVG Nodes\n@docs Svg, Attribute, node, text\n\n# HTML Embedding\n@docs svg, foreignObject\n\n# Graphics elements\n@docs circle, ellipse, image, line, path, polygon, polyline, rect, use\n\n# Animation elements\n@docs animate, animateColor, animateMotion, animateTransform, mpath, set\n\n# Descriptive elements\n@docs desc, metadata, title\n\n# Containers\n@docs a, defs, g, marker, mask, missingGlyph, pattern, switch, symbol\n\n# Text\n@docs altGlyph, altGlyphDef, altGlyphItem, glyph, glyphRef, textPath, text',\n  tref, tspan\n\n# Fonts\n@docs font, fontFace, fontFaceFormat, fontFaceName, fontFaceSrc, fontFaceUri,\n  hkern, vkern\n\n# Gradients\n@docs linearGradient, radialGradient, stop\n\n# Filters\n@docs feBlend, feColorMatrix, feComponentTransfer, feComposite,\n  feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feFlood, feFuncA,\n  feFuncB, feFuncG, feFuncR, feGaussianBlur, feImage, feMerge, feMergeNode,\n  feMorphology, feOffset, feSpecularLighting, feTile, feTurbulence\n\n# Light source elements\n@docs feDistantLight, fePointLight, feSpotLight\n\n# Miscellaneous\n@docs clipPath, colorProfile, cursor, filter, script, style, view\n",
        "aliases": [
          {
            "name": "Attribute",
            "comment": " Set attributes on your `Svg`.\n",
            "args": [],
            "type": "VirtualDom.Property"
          },
          {
            "name": "Svg",
            "comment": " The core building block to create SVG. This library is filled with helper\nfunctions to create these `Svg` values.\n\nThis is backed by `VirtualDom.Node` in `evancz/virtual-dom`, but you do not\nneed to know any details about that to use this library!\n",
            "args": [],
            "type": "VirtualDom.Node"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "altGlyph",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "altGlyphDef",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "altGlyphItem",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "animate",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "animateColor",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "animateMotion",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "animateTransform",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "circle",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "clipPath",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "colorProfile",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "cursor",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "defs",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "desc",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "ellipse",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feBlend",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feColorMatrix",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feComponentTransfer",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feComposite",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feConvolveMatrix",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feDiffuseLighting",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feDisplacementMap",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feDistantLight",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feFlood",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feFuncA",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feFuncB",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feFuncG",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feFuncR",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feGaussianBlur",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feImage",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feMerge",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feMergeNode",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feMorphology",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feOffset",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "fePointLight",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feSpecularLighting",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feSpotLight",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feTile",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "feTurbulence",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "font",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "fontFace",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "fontFaceFormat",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "fontFaceName",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "fontFaceSrc",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "fontFaceUri",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "foreignObject",
            "comment": "",
            "type": "List Svg.Attribute -> List Html.Html -> Svg.Svg"
          },
          {
            "name": "g",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "glyph",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "glyphRef",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "hkern",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "image",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "line",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "linearGradient",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "marker",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "mask",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "metadata",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "missingGlyph",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "mpath",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "node",
            "comment": " Create any SVG node. To create a `<rect>` helper function, you would write:\n\n    rect : List Attribute -> List Svg -> Svg\n    rect attributes children =\n        node \"rect\" attributes children\n\nYou should always be able to use the helper functions already defined in this\nlibrary though!\n",
            "type": "String -> List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "path",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "pattern",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "polygon",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "polyline",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "radialGradient",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "rect",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "script",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "set",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "style",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "svg",
            "comment": " The root `<svg>` node for any SVG scene. This example shows a scene\ncontaining a rounded rectangle:\n\n    import Html\n    import Svg exposing (..)\n    import Svg.Attributes exposing (..)\n\n    roundRect : Html.Html\n    roundRect =\n        svg\n          [ width \"120\", height \"120\", viewBox \"0 0 120 120\" ]\n          [ rect [ x \"10\", y \"10\", width \"100\", height \"100\", rx \"15\", ry \"15\" ] [] ]\n",
            "type": "List Html.Attribute -> List Svg.Svg -> Html.Html"
          },
          {
            "name": "switch",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "symbol",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "text",
            "comment": " A simple text node, no tags at all.\n\nWarning: not to be confused with `text'` which produces the SVG `<text>` tag!\n",
            "type": "String -> Svg.Svg"
          },
          {
            "name": "text'",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "textPath",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "title",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "tref",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "tspan",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "use",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "view",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          },
          {
            "name": "vkern",
            "comment": "",
            "type": "List Svg.Attribute -> List Svg.Svg -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/focus",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Focus",
        "comment": " Our goal is to update a field deep inside some nested records. For example,\nif we want to add one to `object.physics.velocity.x` or set it to zero, we would\nbe writing code like this:\n\n    update (physics => velocity => x) (\\x -> x + 1) object\n\n    set (physics => velocity => x) 0 object\n\nThis means you could avoid writing record update syntax which would be messier.\n\n**Warning!** It is possible that the concept of a `Focus` is harmful to code\nquality in that it can help you to be lax with abstraction boundaries.\n\nBy making it easy to look deep inside of data structures, it encourages you to\nstop thinking about how to make these substructures modular, perhaps leading\nto messier architecture *and* some extra conceptual complexity. It may also\nmake your code slower by encouraging you to take many passes over data,\ncreating lots of intermediate data structures for no particular reason.\n*Use with these risk in mind!*\n\n# Focus\n@docs Focus\n\n# Get, Set, Update\n@docs get, set, update\n\n# Compose Foci\n@docs (=>)\n\n# Create your own Focus\n@docs create\n",
        "aliases": [],
        "types": [
          {
            "name": "Focus",
            "comment": " A `Focus` lets you focus on a small part of some larger data structure.\nMaybe this means a certain field in a record or a certain element in an array.\nThe focus then lets you `get`, `set`, and `update` this small part of a big\nvalue.\n",
            "args": [
              "big",
              "small"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "=>",
            "comment": " The power of this library comes from the fact that you can compose many\nfoci. This means we can update a field deep inside some nested records. For\nexample, perhaps we want to add one to `object.physics.velocity.x` or set it to\nzero.\n\n    physics  : Focus { record | physics  : a } a\n    velocity : Focus { record | velocity : a } a\n    x        : Focus { record | x        : a } a\n    y        : Focus { record | y        : a } a\n\n    update (physics => velocity => x) (\\x -> x + 1) object\n\n    set (physics => velocity => x) 0 object\n\nThis would be a lot messier with typical record update syntax! This is what\nmakes this library worthwhile, but also what makes it dangerous. You will be\ndoing a lot of silly work if you start writing code like this:\n\n    object\n      |> set (physics => velocity => x) 0\n      |> set (physics => velocity => y) 0\n\nIt is pretty, but you pay for it in performance because you take two passes\nover `object` instead of one. It may be best to do the last step with typical\nrecord updates so that this can be done in one pass.\n",
            "type": "Focus.Focus big medium -> Focus.Focus medium small -> Focus.Focus big small"
          },
          {
            "name": "create",
            "comment": " A `Focus` is a value. It describes a strategy for getting and updating\nthings. This function lets you define a `Focus` yourself by providing a `get`\nfunction and an `update` function.\n",
            "type": "(big -> small) -> ((small -> small) -> big -> big) -> Focus.Focus big small"
          },
          {
            "name": "get",
            "comment": " Get a small part of a big thing.\n\n    x : Focus { record | x:a } a\n\n    get x { x=3, y=4 } == 3\n\nSeems sort of silly given that you can just say `.x` to do the same thing. It\nwill become much more useful when we can begin to compose foci, so keep reading!\n",
            "type": "Focus.Focus big small -> big -> small"
          },
          {
            "name": "set",
            "comment": " Set a small part of a big thing.\n\n    x : Focus { record | x:a } a\n\n    set x 42 { x=3, y=4 } == { x=42, y=4 }\n",
            "type": "Focus.Focus big small -> small -> big -> big"
          },
          {
            "name": "update",
            "comment": " Update a small part of a big thing.\n\n    x : Focus { record | x:a } a\n\n    update x sqrt { x=9, y=10 } == { x=3, y=10 }\n\nThis lets us chain updates without any special record syntax:\n\n    x : Focus { record | x:a } a\n    y : Focus { record | y:a } a\n\n    point\n      |> update x sqrt\n      |> update y sqrt\n\nThe downside of this approach is that this means we take two passes over the\nrecord, whereas normal record syntax would only have required one. It may be\nbest to use a mix `Focus` and typical record updates to minimize traversals.\n",
            "type": "Focus.Focus big small -> (small -> small) -> big -> big"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/start-app",
    "version": "2.0.2",
    "docs": [
      {
        "name": "StartApp.Simple",
        "comment": " This module makes it super simple to get started making a typical web app.\nThis is what you want if you are new to Elm, still getting a handle on the\nsyntax and patterns.\n\nIt is designed to work perfectly with [the Elm Architecture][arch] which\ndescribes a simple architecture pattern that makes testing and refactoring\nshockingly pleasant. Definitely read [the tutorial][arch] to get started!\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n# Start your Application\n@docs start, Config\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration has three key components:\n\n  * `model` &mdash; a big chunk of data fully describing your application.\n\n  * `view` &mdash; a way to show your model on screen. It takes in two\n    arguments. One is the model, which contains *all* the information about our\n    app. The other is an [`Address`][address] that helps us handle user input.\n    Whenever there is a click or key press, we send a message to the address\n    describing what happened and where.\n\n  * `update` &mdash; a function to update your model. Whenever a UI event\n    occurs, is routed through the `Address` to this update function. We take\n    in the message and the current model, then we give back a new model!\n\n[The Elm Architecture][arch] augments this basic pattern to give you all the\nmodularity you want. But since we have whole model in one place, it is\nalso really easy to support features like *save* and *undo* that can be quite\nhard in other languages.\n\n[address]: http://package.elm-lang.org/packages/elm-lang/core/2.0.1/Signal#Mailbox\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ model : model , view : Signal.Address action -> model -> Html.Html , update : action -> model -> model }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " This starts up your application. The following code sets up a counter\nthat can be incremented and decremented. You can read more about writing\nprograms like this [here](https://github.com/evancz/elm-architecture-tutorial/).\n\n    import Html exposing (div, button, text)\n    import Html.Events exposing (onClick)\n    import StartApp.Simple as StartApp\n\n    main =\n      StartApp.start { model = model, view = view, update = update }\n\n    model = 0\n\n    view address model =\n      div []\n        [ button [ onClick address Decrement ] [ text \"-\" ]\n        , div [] [ text (toString model) ]\n        , button [ onClick address Increment ] [ text \"+\" ]\n        ]\n\n    type Action = Increment | Decrement\n\n    update action model =\n      case action of\n        Increment -> model + 1\n        Decrement -> model - 1\n\nNotice that the program cleanly breaks up into model, update, and view.\nThis means it is super easy to test your update logic independent of any\nrendering.\n",
            "type": "StartApp.Simple.Config model action -> Signal.Signal Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "StartApp",
        "comment": " This module helps you start your application in a typical Elm workflow.\nIt assumes you are following [the Elm Architecture][arch] and using\n[elm-effects][]. From there it will wire everything up for you!\n\n**Be sure to [read the Elm Architecture tutorial][arch] to learn how this all\nworks!**\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial\n[elm-effects]: http://package.elm-lang.org/packages/evancz/elm-effects/latest\n\n# Start your Application\n@docs start, Config, App\n\n",
        "aliases": [
          {
            "name": "App",
            "comment": " An `App` is made up of a couple signals:\n\n  * `html` &mdash; a signal of `Html` representing the current visual\n    representation of your app. This should be fed into `main`.\n\n  * `model` &mdash; a signal representing the current model. Generally you\n    will not need this one, but it is there just in case. You will know if you\n    need this.\n\n  * `tasks` &mdash; a signal of tasks that need to get run. Your app is going\n    to be producing tasks in response to all sorts of events, so this needs to\n    be hooked up to a `port` to ensure they get run.\n",
            "args": [
              "model"
            ],
            "type": "{ html : Signal.Signal Html.Html , model : Signal.Signal model , tasks : Signal.Signal (Task.Task Effects.Never ()) }"
          },
          {
            "name": "Config",
            "comment": " The configuration of an app follows the basic model / update / view pattern\nthat you see in every Elm program.\n\nThe `init` transaction will give you an initial model and create any tasks that\nare needed on start up.\n\nThe `update` and `view` fields describe how to step the model and view the\nmodel.\n\nThe `inputs` field is for any external signals you might need. If you need to\nget values from JavaScript, they will come in through a port as a signal which\nyou can pipe into your app as one of the `inputs`.\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ init : ( model, Effects.Effects action ) , update : action -> model -> ( model, Effects.Effects action ) , view : Signal.Address action -> model -> Html.Html , inputs : List (Signal.Signal action) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " Start an application. It requires a bit of wiring once you have created an\n`App`. It should pretty much always look like this:\n\n    app =\n        start { init = init, view = view, update = update, inputs = [] }\n\n    main =\n        app.html\n\n    port tasks : Signal (Task.Task Never ())\n    port tasks =\n        app.tasks\n\nSo once we start the `App` we feed the HTML into `main` and feed the resulting\ntasks into a `port` that will run them all.\n",
            "type": "StartApp.Config model action -> StartApp.App model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "evancz/task-tutorial",
    "version": "1.0.3",
    "docs": [
      {
        "name": "TaskTutorial",
        "comment": " This module provides some of the most basic tasks to serve as building\nblocks for [this tutorial](http://elm-lang.org/learn/Tasks.elm).\n\n@docs print, getCurrentTime\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "getCurrentTime",
            "comment": " This task results in the current time. Whenever the task is performed, it\nwill look at the current time and give it to you.\n",
            "type": "Task.Task x Time.Time"
          },
          {
            "name": "print",
            "comment": " Take in any Elm value and produce a task. This task will display the value\nin your browser's developer console.\n",
            "type": "a -> Task.Task x ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "fredcy/elm-parseint",
    "version": "1.1.1",
    "docs": [
      {
        "name": "ParseInt",
        "comment": " Convert String value to Int, or Int to String, with given radix.\n\n# Functions\n@docs parseInt, parseIntOct, parseIntHex, parseIntRadix, toRadix, toRadix'\n\n# Errors\n@docs Error\n",
        "aliases": [],
        "types": [
          {
            "name": "Error",
            "comment": " Possible Result.Err returns from these functions.\n",
            "args": [],
            "cases": [
              [
                "InvalidChar",
                [
                  "Char"
                ]
              ],
              [
                "OutOfRange",
                [
                  "Char"
                ]
              ],
              [
                "InvalidRadix",
                [
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parseInt",
            "comment": " Convert String to Int assuming base 10.\n\n    parseInt \"314159\" == Ok 314159\n    parseInt \"foo\" = Err (OutOfRange 'o')\n\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntHex",
            "comment": " Convert String to Int assuming base 16 (hexadecimal). No leading characters\nare expected; input starting with \"0x\" (or any other out of range character)\nwill cause an `Err` return.\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntOct",
            "comment": " Convert String to Int assuming base 8 (octal). No leading '0' is required.\n",
            "type": "String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "parseIntRadix",
            "comment": " Convert String to Int assuming given radix. Radix can be any of\n2..36. Leading zeroes are ignored. Valid characters are the alphanumerics: those\nin the ASCII range [0-9a-zA-Z]. Case does not matter. For radixes beyond 16 the\nnormal [A-F] range for hexadecimal is extended in the natural way. Any invalid\ncharacter results in a `Err` return. Any valid character outside of the range\ndefined by the radix also results in an `Err`. In particular, any initial '-' or\n' ' (space) is an error. An `Ok` return means that the entire input string was\nconsumed. The empty string results in `Ok 0`\n\n    parseIntRadix 16 \"DEADBEEF\" = Ok 3735928559\n",
            "type": "Int -> String -> Result.Result ParseInt.Error Int"
          },
          {
            "name": "toRadix",
            "comment": " Convert Int to String assuming given radix. Radix values from 2..36 are\nallowed; others result in an `Err InvalidRadix`. Negative numbers get an initial\n'-'.\n\n    toRadix 16 1234 == Ok \"4D2\"\n    toRadix 8 -99 == Ok \"-143\"\n",
            "type": "Int -> Int -> Result.Result ParseInt.Error String"
          },
          {
            "name": "toRadix'",
            "comment": " Convert Int to String assuming given radix. Radix value must be in 2..36\n(not checked, so it can crash).\n\n    toRadix' 16 3735928559 == \"DEADBEEF\"\n    toRadix' 37 36 --> crash\n",
            "type": "Int -> Int -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "fredcy/elm-timer",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Timer",
        "comment": " Timer provides a fine-grained timer component for use in Elm Architecture\napps. Its resolution is as good as can be obtained using Effects.tick.\n\nSee example/Main.elm in the source for an example application that uses Timer.\n\nNote: There is a simpler solution available using just `Task.sleep`. See\nexamples/Sleep.elm for that. So this Timer package is probably over-complicated.\n\n## Steps in adding Timer to an application\n\n### Add Timer model to application model\n\n```elm\ntype alias Model = { ..., timer : Timer.Model }\n```\n\n### Initialize the timer\n\n```elm\ninit = Model ..., Timer.init\n```\n\n### Define new actions to represent timeout and timer actions\n\n```elm\ntype Action = ... | TimerAction Timer.Action | Timeout\n```\n\nThese action names are arbitrary (but must be consistent with their usage\nbelow). The former represents actions that must be forwarded to the timer\ncomponent. The latter occurs when the timer expires.\n\n### Define a Mailbox for receiving the expiration event\n\n```elm\nactionsMailbox =\n  Signal.mailbox Timeout\n```\n\n### Add the Mailbox signal to app inputs\n\n```elm\napp = StartApp.start { ..., inputs = [ actionMailbox.signal ] }\n```\n\n### Start timer as an effect in the update function\n\n```elm\nupdate action model =\n  case action of\n    ...\n    SomeTriggerAction -> ( model\n                         , Timer.start 500 |> Effects.map TimerAction\n                         )\n```\n\nThis could also be done as an effect in the app's init function.\n\n### Handle timeout as new case in the update function\n\n```elm\n    Timeout -> ( someChangeTo model, Effects.none )\n```\nThis could return some other effect if that's what is desired when timeout occurs.\n\n\n### Forward actions and effects to and from timer in update function\n\n```elm\n    TimerAction timerAction ->\n      let\n        context =\n          Signal.forwardTo actionsMailbox.address (always Timeout)\n\n        ( newTimer, timerEffect ) =\n          Timer.update context timerAction model.timer\n      in\n        ( { model | timer = newTimer }\n        , Effects.map TimerAction timerEffect\n        )\n```\n\n# Functions\n@docs init, update, start\n\n# Types\n@docs Action, Model\n\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " The parent app must include the Timer Model in its own model.\n",
            "args": [],
            "type": "{ state : Timer.State, remaining : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " The parent's update function must forward these actions to the Timer. The\ntype is opaque as the parent just forwards all timer actions the same way.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Provide a Timer model in the initial idle state.\n",
            "type": "Timer.Model"
          },
          {
            "name": "start",
            "comment": " Start the timer, setting it to expire in the given number of\nmilliseconds. The resulting effect must be the `Action` value that forwards to\nthe timer, `TimerAction` in the examples.\n",
            "type": "Time.Time -> Effects.Effects Timer.Action"
          },
          {
            "name": "update",
            "comment": " Update the Timer: start it, advance it by one tick, expire it.\nThe Timer reports expiration by sending to the Context.\n",
            "type": "Timer.Context -> Timer.Action -> Timer.Model -> ( Timer.Model, Effects.Effects Timer.Action )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "fresheyeball/elm-cardinal",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Cardinal",
        "comment": "\nCardinal Numbers\n(maybe this is the wrong name)\nA number that can either be finite or infinite\n\n@docs Cardinal, toCardinal, withDefault, withDefaults, map\n",
        "aliases": [],
        "types": [
          {
            "name": "Cardinal",
            "comment": " Cardinal number can be Positive or Negative Infinity\n",
            "args": [
              "number"
            ],
            "cases": [
              [
                "Finite",
                [
                  "number"
                ]
              ],
              [
                "PosInfinity",
                []
              ],
              [
                "NegInfinity",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "map",
            "comment": "\nNot a Functor, but still mappable\n",
            "type": "(number -> number) -> Cardinal.Cardinal number -> Cardinal.Cardinal number"
          },
          {
            "name": "toCardinal",
            "comment": " ",
            "type": "number -> Cardinal.Cardinal number"
          },
          {
            "name": "withDefault",
            "comment": "\nGet the value out of `Cardinal` providing a default for the infinite case\n",
            "type": "a -> (number -> a) -> Cardinal.Cardinal number -> a"
          },
          {
            "name": "withDefaults",
            "comment": "\nGet the value out of `Cardinal` providing a default for the infinite cases.\nFirst argument is the default for the `PosInfinity` case, the second is for `NegInfinity`\n",
            "type": "a -> a -> (number -> a) -> Cardinal.Cardinal number -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "fresheyeball/elm-check-runner",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Check.Runner.Browser",
        "comment": " Browser test runner for elm-check. This module provides functions to\nrun and visualize tests in the browser.\n\n# Display Test Results\n@docs display, displayVerbose\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "display",
            "comment": " Display test results in the browser.\n",
            "type": "Check.Evidence -> Html.Html"
          },
          {
            "name": "displayVerbose",
            "comment": " Verbose version of `display`. Contains additional information\nabout the test results.\n",
            "type": "Check.Evidence -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "garetht/elm-dynamic-style",
    "version": "1.0.3",
    "docs": [
      {
        "name": "DynamicStyle",
        "comment": "\n# Library for simple, dynamic style effects\n\n@docs hover, hover', pressure, pressure', focus, focus', cssStateEffect, CSSKey, CSSValue, JSEventAttribute\n\nThe goal of this library is make locally stateful, declarative CSS effects\n(e.g., :hover, :focus, etc.) as easy in Elm as they are with stylesheets.\n\nFor example, the following achieves the same effect as setting the\n:hover attribute in your stylesheet:\n\n    div\n      ( hover\n          [ (\"color\",\"blue\",\"lightblue\") ]\n      )\n      [ text \"so cool!\" ]\n\nYou may user the primed versions as shorthand to provide a base list of\nstyles, like this:\n\n    div\n      ( hover'\n          [ (\"font-size\",\"20px\")\n          , (\"font-face\",\"Droid Sans Mono\")\n          ]\n          [ (\"color\",\"blue\",\"lightblue\") ]\n      )\n      [ text \"wow\" ]\n\nCompletely painless!\n\n* Note: the effects in this library consume whatever JS hooks are needed\nto achieve the effect on that element (e.g., hover consumes onmouseover and\nonmouseout, but you are still free to use onclick). If for some reason you\ndo want to do both a CSS transition and have your application respond to\nan event, you can simply make a wrapper element and hook its events.\n\n",
        "aliases": [
          {
            "name": "CSSKey",
            "comment": "\nThe key for a CSS property.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "CSSValue",
            "comment": "\nThe value of a CSS property.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "JSEventAttribute",
            "comment": "\nThe name of a JavaScript event attribute.\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "cssStateEffect",
            "comment": "\nConstruct your own stateful effects.\n\nProvide:\n- A list of events that deactivate your effect\n- One event that activates your effect\n- A list of styles (key, value) to apply constantly (the inactive event styles are added to these)\n- A list of styles (key, valueIfInactive, valueIfActive) that depend on the stateful effect\n\nA list of attributes will be generated to implement the effect, using inline js and css\n",
            "type": "List DynamicStyle.JSEventAttribute -> DynamicStyle.JSEventAttribute -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          },
          {
            "name": "focus",
            "comment": "\nChange styles when the user focuses on element. For example,\n\n    pressure [(\"border-color\",\"black\",\"blue\")]\n\nwill render a black border\nnormally, but a blue border when the user focuses on the element.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          },
          {
            "name": "focus'",
            "comment": "\nShorthand to add a list of static base styles.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          },
          {
            "name": "hover",
            "comment": "\nChange styles when the user hovers over an element. For example,\n\n    hover [(\"color\",\"black\",\"blue\")]\n\nwill render black text normally, but\nblue text when the user hovers over the element.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          },
          {
            "name": "hover'",
            "comment": "\nShorthand to add a list of static base styles.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          },
          {
            "name": "pressure",
            "comment": "\nChange styles when the user pushes on element. For example,\n\n    pressure [(\"color\",\"black\",\"blue\")]\n\nwill render black text normally, but\nblue text when the user pushes the mouse down on the element.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          },
          {
            "name": "pressure'",
            "comment": "\nShorthand to add a list of static base styles.\n",
            "type": "List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue ) -> List ( DynamicStyle.CSSKey, DynamicStyle.CSSValue, DynamicStyle.CSSValue ) -> List Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ggb/numeral-elm",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Numeral",
        "comment": " Elm module for (advanced) number formatting. It is a direct port of [Numeral.js](http://numeraljs.com/) and it is possible to use the same format strings. Manipulation and unformatting of numbers is not yet supported.\n\nIf you create a new language-file, please let me know or send a pull request.\n\n# Formatting\n\n@docs format, formatWithLanguage\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Same as formatWithLanguage, but English is set as default language.\n\n    format \"$0,0.00\" 1000.234 == \"$1,000.23\"\n",
            "type": "String -> Float -> String"
          },
          {
            "name": "formatWithLanguage",
            "comment": " Format a number with a given language.\n\n    import Language.Japanese as Japanese\n\n    myFormat = formatWithLanguage Japanese.lang \"0.0a\"\n\n    -- map myFormat [10123.12, 235798239.3242] == [\"10.1千\",\"235.8百万\"]\n",
            "type": "Language.Language -> String -> Float -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Languages.English",
        "comment": " English language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=englishOrdinal\n      , currency=\n        { symbol=\"$\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Languages.German",
        "comment": " German language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\" \"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=germanOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Languages.French",
        "comment": " French language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\" \"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"k\"\n        , million=\"m\"\n        , billion=\"b\"\n        , trillion=\"t\"\n        }\n      , ordinal=frenchOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Languages.Japanese",
        "comment": " Japanese language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n  \n    lang =\n      { delimiters=\n        { thousands=\",\"\n        , decimal=\".\"\n        }\n      , abbreviations=\n        { thousand=\"千\"\n        , million=\"百万\"\n        , billion=\"十億\"\n        , trillion=\"兆\"\n        }\n      , ordinal=japaneseOrdinal\n      , currency=\n        { symbol=\"¥\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Languages.Italian",
        "comment": " Italian language configuration.\n\n@docs lang\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lang",
            "comment": " Configuration data.\n\n    lang =\n      { delimiters=\n        { thousands=\".\"\n        , decimal=\",\"\n        }\n      , abbreviations=\n        { thousand=\"mila\"\n        , million=\"mln\"\n        , billion=\"mld\"\n        , trillion=\"bil\"\n        }\n      , ordinal=italianOrdinal\n      , currency=\n        { symbol=\"€\"\n        }\n      }\n",
            "type": "Language.Language"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Language",
        "comment": " Type definition for language configurations.\n\nTo implement a new language configuration, copy an existing one and modify it.\n\n@docs Ordinal, Language\n\n",
        "aliases": [
          {
            "name": "Language",
            "comment": " Language defines the delimiters, abbreviations, ordinal and currency symbol.\n",
            "args": [],
            "type": "{ delimiters : Language.Delimiters , abbreviations : Language.Abbreviations , ordinal : Language.Ordinal , currency : Language.Currency }"
          },
          {
            "name": "Ordinal",
            "comment": " Type of a function that takes a float as input and returns an ordinal abbreviation string.\n",
            "args": [],
            "type": "Float -> String"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ggb/porterstemmer",
    "version": "1.0.0",
    "docs": [
      {
        "name": "PorterStemmer",
        "comment": " Elm implementation of the classical Porter Stemming-algorithm. The algorithm\nis described in [this paper](http://tartarus.org/martin/PorterStemmer/def.txt) \nand on [Wikipedia](https://en.wikipedia.org/wiki/Stemming). \nThe implementation is inspired by the [JavaScript](http://tartarus.org/martin/PorterStemmer/js.txt)- \nand the [Haskell](http://tartarus.org/martin/PorterStemmer/haskell.txt)-implementation.\n\nThe module exposes a single function.\n\n@docs stem\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "stem",
            "comment": " The stem-function takes a word and returns its stem. \n\n    stem \"sky\" == \"sky\"\n    stem \"hopefulness\" == \"hope\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "gummesson/elm-csv",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Csv",
        "comment": " A CSV parser.\n\n## Parser\n@docs Csv, parse, split\n",
        "aliases": [
          {
            "name": "Csv",
            "comment": " The `Csv` type structure.\n",
            "args": [],
            "type": "{ headers : List String, records : List (List String) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "parse",
            "comment": " Convert a string of comma-separated values into a `Csv` structure.\n\n    -- { headers = [\"id\", \"value\"], records = [[\"1\", \"one\"], [\"2\", \"two\"]] }\n\n    Csv.parse \"id,value\\n1,one\\n2,two\\n\"\n",
            "type": "String -> Csv.Csv"
          },
          {
            "name": "split",
            "comment": " Convert a string of comma-separated values into a list of lists.\n\n    -- [[\"id\", \"value\"], [\"1\", \"one\"], [\"2\", \"two\"]]\n\n    Csv.split \"id,value\\n1,one\\n2,two\\n\"\n",
            "type": "String -> List (List String)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "hrldcpr/elm-cons",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Cons",
        "comment": " This library provides a type for non-empty lists, called `Cons`.\n\nBeing able to encode non-emptiness in the type system can lead to simpler, clearer code.\n\nFor example, to find the largest element in a List, you have to account for the empty list, which complicates things:\n\n    maximum : List comparable -> Maybe comparable\n    maximum l =\n      case l of\n        [] -> Nothing\n        first::rest -> Just <| List.foldl max first rest\n\nUsing Cons, on the other hand, the type system knows the list will never be empty, leading to much simpler code:\n\n    maximum : Cons comparable -> comparable\n    maximum = foldl1 max\n\n\n# Basics\n\n@docs Cons, cons, uncons, singleton, toList\n\n\n# Avoiding Maybe\n\nSome functions on Lists are forced to use Maybe to handle the empty list. The following functions are quivalent to their List counterparts, but with no need for Maybe.\n\n@docs head, tail, minimum, maximum\n\n\n# Convenient Folding\n\nFolds over Lists require a start value, but the following fold functions take the start value from the cons.\n\n@docs foldl1, foldr1, scanl1\n\n\n# List May Be Cons\n\nA cons can't be empty, but a `Maybe (Cons a)` can be, if we treat Nothing as empty.\n\nThus `List a` and `Maybe (Cons a)` are completely equivalent, and the following functions let you go back and forth between them.\n\nThis is useful for recursion on Cons. For example, to recursively find the maximum element of a cons:\n\n    maximum : Cons comparable -> comparable\n    maximum c =\n      case uncons' c of\n        (first, Nothing) -> first\n        (first, Just rest) -> max first <| maximum rest\n\n@docs fromList, cons', uncons', tail', toList', forList\n\n\n# Preserving Non-Emptiness\n\nThe following functions preserve non-emptiness, so given a cons they return a cons.\n\n@docs reverse, append, appendList, appendToList, concat, intersperse, unzip, map, map2, map3, map4, map5, concatMap, indexedMap, scanl, scanlList, sort, sortBy, sortWith\n\n\n# List Functions\n\nEvery function from the List library has been adapted to Cons.\n\nThe following are just convenience functions which convert the cons to a list and then apply the corresponding list function. For example, the definition of `sum` is:\n\n    sum = toList >> List.sum\n\n@docs isEmpty, length, member, filter, take, drop, partition, filterMap, foldl, foldr, sum, product, all, any\n",
        "aliases": [],
        "types": [
          {
            "name": "Cons",
            "comment": " A non-empty list of elements of type `a`.\n",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " True if and only if all elements of the cons satisfy the given predicate.\n\n    c = cons 1 [2, 3]\n    all (\\x -> x > 2) == False\n    all (\\x -> x > 0) == True\n",
            "type": "(a -> Bool) -> Cons.Cons a -> Bool"
          },
          {
            "name": "any",
            "comment": " True if and only if any elements of the cons satisfy the given predicate.\n\n    c = cons 1 [2, 3]\n    any (\\x -> x > 5) == False\n    any (\\x -> x > 2) == True\n",
            "type": "(a -> Bool) -> Cons.Cons a -> Bool"
          },
          {
            "name": "append",
            "comment": " Append the second cons to the first.\n\n    c = cons 1 [2, 3]\n    d = cons 4 [5, 6]\n    append c d == cons 1 [2, 3, 4, 5, 6]\n",
            "type": "Cons.Cons a -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "appendList",
            "comment": " Append a list to a cons.\n\n    c = cons 1 [2, 3]\n    l = [4, 5, 6]\n    appendList c l == cons 1 [2, 3, 4, 5, 6]\n",
            "type": "Cons.Cons a -> List a -> Cons.Cons a"
          },
          {
            "name": "appendToList",
            "comment": " Append a cons to a list.\n\n    l = [1, 2, 3]\n    c = cons 4 [5, 6]\n    appendToList l c == cons 1 [2, 3, 4, 5, 6]\n",
            "type": "List a -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "concat",
            "comment": " Concatenate a non-empty list of non-empty lists.\n\n    c = cons 1 [2, 3]\n    d = singleton 4\n    e = cons 5 [6]\n    cs = cons c [d, e]\n    concat cs == cons 1 [2, 3, 4, 5, 6]\n\n    concat == foldr1 append\n",
            "type": "Cons.Cons (Cons.Cons a) -> Cons.Cons a"
          },
          {
            "name": "concatMap",
            "comment": " Also known as \"flat map\", map each element of the cons to a cons, and then concatenate them together.\n\n    f : number -> Cons number\n    f x = cons x [-x]\n\n    c = cons 1 [2, 3]\n    concatMap f c == cons 1 [-1, 2, -2, 3, -3]\n\n    concatMap f == concat << map f\n",
            "type": "(a -> Cons.Cons b) -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "cons",
            "comment": " A cons with the given head and tail. Equivalent to ::\n\n    c = cons 1 [2, 3]\n    head c == 1\n    tail c == [2, 3]\n\n",
            "type": "a -> List a -> Cons.Cons a"
          },
          {
            "name": "cons'",
            "comment": " A cons with the given head and tail.\n\n    c = cons' \"a\" Nothing\n    toList c == [\"a\"]\n\n    d = cons' 1 <| Just <| cons' 2 <| Just <| cons' 3 Nothing\n    toList d = [1, 2, 3]\n",
            "type": "a -> Maybe.Maybe (Cons.Cons a) -> Cons.Cons a"
          },
          {
            "name": "drop",
            "comment": " The cons without its first *n* elements. This can't generally be a cons itself, because it might be empty.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    drop 2 c == [\"c\"]\n    drop 100 c == []\n    drop -10 c == toList c\n",
            "type": "Int -> Cons.Cons a -> List a"
          },
          {
            "name": "filter",
            "comment": " The list of elements from the cons which satisfy the given predicate. This can't generally be a cons itself, because it might be empty.\n\n    c = cons 1 [2, 3]\n    filter (\\x -> x > 10) c == []\n    filter (\\x -> x > 1) c == [2, 3]\n",
            "type": "(a -> Bool) -> Cons.Cons a -> List a"
          },
          {
            "name": "filterMap",
            "comment": " Map the given Maybe function over the cons, discarding every Nothing. This can't generally be a cons itself, because it might be empty.\n\n    String.toInt : String -> Maybe Int\n\n    c = cons \"1\" [\"a\", \"2\", \"b\"]\n    filterMap String.toInt c == [1, 2]\n",
            "type": "(a -> Maybe.Maybe b) -> Cons.Cons a -> List b"
          },
          {
            "name": "foldl",
            "comment": " Reduce the cons from the left, starting with the given value. To start with the first value in the cons, use [foldl1](#foldl1).\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldl1 step \"x\" c == \"xabc\"\n",
            "type": "(a -> b -> b) -> b -> Cons.Cons a -> b"
          },
          {
            "name": "foldl1",
            "comment": " Reduce the cons from the left.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldl1 step c == \"abc\"\n",
            "type": "(a -> a -> a) -> Cons.Cons a -> a"
          },
          {
            "name": "foldr",
            "comment": " Reduce the cons from the right, starting with the given value. To start with the last value in the cons, use [foldr1](#foldr1).\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldr1 step \"x\" c == \"xcba\"\n",
            "type": "(a -> b -> b) -> b -> Cons.Cons a -> b"
          },
          {
            "name": "foldr1",
            "comment": " Reduce the cons from the right.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    foldr1 step c == \"cba\"\n",
            "type": "(a -> a -> a) -> Cons.Cons a -> a"
          },
          {
            "name": "forList",
            "comment": " Convert a function that operates on Cons to a function that operates on List, where the empty list results in Nothing.\n\n    maximum : Cons comparable -> comparable\n    maximum = foldl1 max\n\n    listMaximum : List comparable -> Maybe comparable\n    listMaximum = forList maximum\n\n    listMaximum [] == Nothing\n    listMaximum [1, 2, 3] == Just 3\n",
            "type": "(Cons.Cons a -> b) -> List a -> Maybe.Maybe b"
          },
          {
            "name": "fromList",
            "comment": " Convert the list to the equivalent cons, or Nothing for the empty list.\n\n    fromList [] == Nothing\n    fromList [1, 2, 3] == Just <| cons 1 [2, 3]\n",
            "type": "List a -> Maybe.Maybe (Cons.Cons a)"
          },
          {
            "name": "head",
            "comment": " The first element of the cons.\n\n    c = cons 1 [2, 3]\n    head c == 1\n",
            "type": "Cons.Cons a -> a"
          },
          {
            "name": "indexedMap",
            "comment": " Apply a function to each element of the cons, as well as the index.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    indexedMap (,) c == cons (0, \"a\") [(1, \"b\"), (2, \"c\")]\n",
            "type": "(Int -> a -> b) -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "intersperse",
            "comment": " Intersperse the value between each element of the cons.\n\n    c = cons \"first\" [\"second\", \"third\"]\n    intersperse \"and\" c == cons \"first\" [\"and\", \"second\", \"and\", \"third\"]\n",
            "type": "a -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "isEmpty",
            "comment": " Always false for a cons, only here to make porting List code easier.\n\n    isEmpty == always False\n",
            "type": "Cons.Cons a -> Bool"
          },
          {
            "name": "length",
            "comment": " The number of elements in the cons.\n\n    c = cons 1 [2, 3]\n    length c == 3\n",
            "type": "Cons.Cons a -> Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to each element of the cons.\n\n    c = cons 1 [4, 9]\n    map sqrt c == cons 1 [2, 3]\n",
            "type": "(a -> b) -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "map2",
            "comment": " Apply a function to each pair of elements, limited by the shortest cons.\n\n    zip : Cons a -> Cons b -> Cons (a, b)\n    zip = map2 (,)\n    c = cons 1 [2, 3]\n    d = cons \"a\" [\"b\", \"c\", \"d\", \"e\"]\n    zip c d = cons (1, \"a\") [(2, \"b\"), (3, \"c\")]\n",
            "type": "(a -> b -> c) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> d) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c -> Cons.Cons d"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> e) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c -> Cons.Cons d -> Cons.Cons e"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> f) -> Cons.Cons a -> Cons.Cons b -> Cons.Cons c -> Cons.Cons d -> Cons.Cons e -> Cons.Cons f"
          },
          {
            "name": "maximum",
            "comment": " The largest element of the cons.\n\n    c = cons 1 [2, 3]\n    maximum c == 3\n\n    maximum == foldl1 max\n",
            "type": "Cons.Cons comparable -> comparable"
          },
          {
            "name": "member",
            "comment": " True if and only if the given element is in the given cons.\n\n    c = cons 1 [2, 3]\n    member 5 c == False\n    member 2 c == True\n",
            "type": "a -> Cons.Cons a -> Bool"
          },
          {
            "name": "minimum",
            "comment": " The smallest element of the cons.\n\n    c = cons 1 [2, 3]\n    minimum c == 1\n\n    minimum == foldl1 min\n",
            "type": "Cons.Cons comparable -> comparable"
          },
          {
            "name": "partition",
            "comment": " Partition the cons into two lists, the first containing the elements which satisfy the given predicate, the second containing the elements which don't. These can't generally be a cons themselves, since one might be empty.\n\n    c = cons 1 [2, 3]\n    partition (\\x -> x > 1) c == ([2, 3], [1])\n",
            "type": "(a -> Bool) -> Cons.Cons a -> ( List a, List a )"
          },
          {
            "name": "product",
            "comment": " The product of the elements of the cons.\n\n    c = cons 2 [3, 4]\n    product c == 24\n",
            "type": "Cons.Cons number -> number"
          },
          {
            "name": "reverse",
            "comment": " Reverse the cons.\n\n    c = cons 1 [2, 3]\n    reverse c == cons 3 [2, 1]\n",
            "type": "Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "scanl",
            "comment": " Reduce the cons from the left, producing a cons of all intermediate results.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    scanl step \"\" c == cons \"\" [\"a\", \"ab\", \"abc\"]\n",
            "type": "(a -> b -> b) -> b -> Cons.Cons a -> Cons.Cons b"
          },
          {
            "name": "scanl1",
            "comment": " Reduce the cons from the left, producing a cons of all intermediate results.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    step value result = result ++ value\n    scanl1 step c == cons \"a\" [\"ab\", \"abc\"]\n",
            "type": "(a -> a -> a) -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "scanlList",
            "comment": " Reduce the list from the left, producing a cons of all intermediate results, since even for the empty list there is one intermediate result.\n\nEquivalent to List.scanl, but with a more specific return type.\n\n    step value result = result ++ value\n    scanlList step \"\" [] == cons \"\" []\n    scanlList step \"\" [\"a\", \"b\", \"c\"] == cons \"\" [\"a\", \"ab\", \"abc\"]\n",
            "type": "(a -> b -> b) -> b -> List a -> Cons.Cons b"
          },
          {
            "name": "singleton",
            "comment": " A cons containing only the given element.\n\n    c = singleton \"a\"\n    toList c == [\"a\"]\n",
            "type": "a -> Cons.Cons a"
          },
          {
            "name": "sort",
            "comment": " Sort the cons in ascending order.\n\n    c = cons 2 [3, 1]\n    sort c == cons 1 [2, 3]\n",
            "type": "Cons.Cons comparable -> Cons.Cons comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort the cons in ascending order, by applying the given function to each value.\n\n    alice = {name=\"Alice\", age=30}\n    bob = {name=\"Bob\", age=20}\n    charlie = {name=\"Charlie\", age=40}\n\n    c = cons alice [bob, charlie]\n    sortBy .age c == cons bob [alice, charlie]\n",
            "type": "(a -> comparable) -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "sortWith",
            "comment": " Sort the cons in ascending order, based on the given comparison function.\n\n    reverseCompare : comparable -> comparable -> Order\n    reverseCompare x y =\n      case compare x y of\n        LT -> GT\n        EQ -> EQ\n        GT -> LT\n\n    c = cons \"b\" [\"a\", \"c\"]\n    sortWith reverseCompare c == cons \"c\" [\"b\", \"a\"]\n\n    sortWith compare == sort\n",
            "type": "(a -> a -> Basics.Order) -> Cons.Cons a -> Cons.Cons a"
          },
          {
            "name": "sum",
            "comment": " The sum of the elements of the cons.\n\n    c = cons 2 [3, 4]\n    sum c == 9\n",
            "type": "Cons.Cons number -> number"
          },
          {
            "name": "tail",
            "comment": " The list of all elements after the first element of the cons.\n\n    c = cons 1 [2, 3]\n    tail c == [2, 3]\n",
            "type": "Cons.Cons a -> List a"
          },
          {
            "name": "tail'",
            "comment": " The tail of the cons.\n\n    c = cons' \"a\" Nothing\n    tail' c == Nothing\n\n    d = cons' 1 <| Just <| cons' 2 <| Just <| cons' 3 Nothing\n    tail' d == Just <| cons' 2 <| Just <| cons' 3 Nothing\n\n    length : Cons a -> Int\n    length c =\n      case tail' c of\n        Nothing -> 1\n        Just rest -> 1 + length rest\n",
            "type": "Cons.Cons a -> Maybe.Maybe (Cons.Cons a)"
          },
          {
            "name": "take",
            "comment": " The first *n* elements of the cons, up to the length of the cons. This can't generally be a cons itself, since *n* might not be positive.\n\n    c = cons \"a\" [\"b\", \"c\"]\n    take 2 c == [\"a\", \"b\"]\n    take 100 c == toList c\n    take -10 c == []\n",
            "type": "Int -> Cons.Cons a -> List a"
          },
          {
            "name": "toList",
            "comment": " Convert the cons to the equivalent list.\n\n    c = cons 1 [2, 3]\n    toList c == [1, 2, 3]\n",
            "type": "Cons.Cons a -> List a"
          },
          {
            "name": "toList'",
            "comment": " Convert the cons to the equivalent list, or the empty list for Nothing.\n\nThis is the inverse of fromList.\n\n    c = fromList []\n    c == Nothing\n    toList' c == []\n\n    c = fromList [1, 2, 3]\n    c == Just <| cons 1 [2, 3]\n    toList' c == [1, 2, 3]\n",
            "type": "Maybe.Maybe (Cons.Cons a) -> List a"
          },
          {
            "name": "uncons",
            "comment": " The head and tail of the cons.\n\n    c = cons 1 [2, 3]\n    uncons c == (1, [2, 3])\n",
            "type": "Cons.Cons a -> ( a, List a )"
          },
          {
            "name": "uncons'",
            "comment": " The head and tail of the cons.\n\n    c = cons' \"a\" Nothing\n    uncons' c == (\"a\", Nothing)\n\n    d = cons' 1 <| Just <| cons' 2 <| Just <| cons' 3 Nothing\n    uncons' d == (1, Just <| cons' 2 <| Just <| cons' 3 Nothing)\n\n    maximum : Cons comparable -> comparable\n    maximum c =\n      case uncons' c of\n        (first, Nothing) -> first\n        (first, Just rest) -> max first <| maximum rest\n",
            "type": "Cons.Cons a -> ( a, Maybe.Maybe (Cons.Cons a) )"
          },
          {
            "name": "unzip",
            "comment": " A tuple of each cons, corresponding to a cons of tuples.\n\n    c = cons (1, \"a\") [(2, \"b\"), (3, \"c\")]\n    unzip c == (cons 1 [2, 3], cons \"a\" [\"b\", \"c\"])\n",
            "type": "Cons.Cons ( a, b ) -> ( Cons.Cons a, Cons.Cons b )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "imeckler/either",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Either",
        "comment": " A simple module providing an Either type.\n\n# Types\n@docs Either\n\n# Maps\n@docs mapLeft, mapRight, mapBoth\n\n# Elimination\n@docs elim, isLeft, isRight\n",
        "aliases": [],
        "types": [
          {
            "name": "Either",
            "comment": " For when you want a function that needs to take/return values of\n    two different types and you don't want to define a whole type. ",
            "args": [
              "a",
              "b"
            ],
            "cases": [
              [
                "Left",
                [
                  "a"
                ]
              ],
              [
                "Right",
                [
                  "b"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "elim",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(a -> c) -> (b -> c) -> Either.Either a b -> c"
          },
          {
            "name": "isLeft",
            "comment": " ",
            "type": "Either.Either a b -> Bool"
          },
          {
            "name": "isRight",
            "comment": " ",
            "type": "Either.Either a b -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(a -> a') -> (b -> b') -> Either.Either a b -> Either.Either a' b'"
          },
          {
            "name": "mapLeft",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(a -> a') -> Either.Either a b -> Either.Either a' b"
          },
          {
            "name": "mapRight",
            "comment": " There's only one possible implementation of this function! Try to guess\n    what it is. ",
            "type": "(b -> b') -> Either.Either a b -> Either.Either a b'"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "imeckler/empty",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Empty",
        "comment": " Just a simple empty type.\n\n# Types\n@docs Empty\n\n# Elimination\n@docs elim, yeahRight\n",
        "aliases": [],
        "types": [
          {
            "name": "Empty",
            "comment": " It's impossible to construct a value of type `Empty`, because to do\n    so, you'd already need a value of type `Empty`!\n    \n    This type is useful for witnessing the impossibility of certain things.\n    For example, you could have a function which took a value of type\n    `Task Empty Int` which, the first type parameter to `Task` being the type\n    of errors encountered by the task, means it's impossible for that task to\n    fail. What a world we live in, eh? ",
            "args": [],
            "cases": [
              [
                "Empty",
                [
                  "Empty.Empty"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "elim",
            "comment": " If `Empty` is inhabited then anything is. ",
            "type": "Empty.Empty -> a"
          },
          {
            "name": "yeahRight",
            "comment": " A synonym for `elim`. ",
            "type": "Empty.Empty -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "imeckler/iterator",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Iterator",
        "comment": " An `Iterator a` can be thought of as a function `Int -> a` along with\nan `Int` indicating its \"length\". It's a simple data type supporting mapping,\nconcatenation, and most importantly, folding in constant space with early return.\n\n# Type\n@docs Iterator\n\n# Introduction\n@docs upTil, range, fromArray, fromList\n\n# Transformation\n@docs map, concat, concatMap, indexedMap\n\n# Elimination\n@docs fold, Status, foldWhile, find, findMany, all, and\n",
        "aliases": [],
        "types": [
          {
            "name": "Iterator",
            "comment": " ",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Status",
            "comment": " This type helps us control early return from a fold. ",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Finished",
                [
                  "a"
                ]
              ],
              [
                "KeepGoing",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "all",
            "comment": " Check if `all` element in your sequence satisfy the given property. ",
            "type": "(a -> Bool) -> Iterator.Iterator a -> Bool"
          },
          {
            "name": "and",
            "comment": " Check if all values are true. ",
            "type": "Iterator.Iterator Bool -> Bool"
          },
          {
            "name": "concat",
            "comment": " Concatenate an iterator of iterators. ",
            "type": "Iterator.Iterator (Iterator.Iterator a) -> Iterator.Iterator a"
          },
          {
            "name": "concatMap",
            "comment": "\n    concatMap f = concat << map f\n",
            "type": "(a -> Iterator.Iterator b) -> Iterator.Iterator a -> Iterator.Iterator b"
          },
          {
            "name": "find",
            "comment": " `find` the first element in your sequence satisfying the given property. ",
            "type": "(a -> Bool) -> Iterator.Iterator a -> Maybe.Maybe a"
          },
          {
            "name": "findMany",
            "comment": " Find the at most `k` first elements in the sequence satisfying the given property. ",
            "type": "Int -> (a -> Bool) -> Iterator.Iterator a -> List a"
          },
          {
            "name": "fold",
            "comment": " Folds until the bitter end. ",
            "type": "(a -> b -> b) -> b -> Iterator.Iterator a -> b"
          },
          {
            "name": "foldWhile",
            "comment": " `foldWhile` allows you to fold, returning early if you like, in constant space (stack or otherwise).\nSuppose for example that we'd like to find the first element in a sequence of `a`'s satisfying some property\n`p : a -> Bool`. We can express this as a fold over our sequence (assuming it supports some notion of `fold`) as\n\n    fold (\\x r -> if p x then Just x else r) Nothing\n\nbut we would like for this fold to return early with the first `x` satisfying `p`.\nSo, we have foldWhile which stops folding once a `Finished x` value is found. We\ncan thus express `find : (a -> Bool) -> Iterator a -> Maybe a` as\n\n    find f = foldWhile (\\x _ -> if f x then Finished (Just x) else KeepGoing Nothing)\n               (KeepGoing Nothing)\n\n",
            "type": "(a -> b -> Iterator.Status b) -> Iterator.Status b -> Iterator.Iterator a -> b"
          },
          {
            "name": "fromArray",
            "comment": " ",
            "type": "Array.Array a -> Iterator.Iterator a"
          },
          {
            "name": "fromList",
            "comment": " ",
            "type": "List a -> Iterator.Iterator a"
          },
          {
            "name": "indexedMap",
            "comment": " ",
            "type": "(Int -> a -> b) -> Iterator.Iterator a -> Iterator.Iterator b"
          },
          {
            "name": "map",
            "comment": " Map over the values of the iterator. ",
            "type": "(a -> b) -> Iterator.Iterator a -> Iterator.Iterator b"
          },
          {
            "name": "range",
            "comment": " `range start stop` is conceptually the sequence\n\n    [start, start + 1,...,stop]\n",
            "type": "Int -> Int -> Iterator.Iterator Int"
          },
          {
            "name": "upTil",
            "comment": " `upTil n f` is conceptually the sequence \n\n    [f 0, f 1,..., f (n - 1)]\n",
            "type": "Int -> (Int -> a) -> Iterator.Iterator a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "imeckler/piece",
    "version": "2.1.0",
    "docs": [
      {
        "name": "Piece.Infix",
        "comment": " Infix synonyms. \n# Operators\n@docs (<>), (+>), (>+>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "+>",
            "comment": " (+>) = Piece.chainTo ",
            "type": "Piece.Piece Piece.ForATime a -> (a -> Piece.Piece t a) -> Piece.Piece t a",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "<>",
            "comment": " (<>) = Piece.followedBy ",
            "type": "Piece.Piece Piece.ForATime a -> Piece.Piece t a -> Piece.Piece t a",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": ">+>",
            "comment": " (>+>) f g = \\x -> f x +> g ",
            "type": "(a -> Piece.Piece Piece.ForATime a) -> (a -> Piece.Piece t a) -> a -> Piece.Piece t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Piece",
        "comment": " A type and functions on it for building up values as a function of time.\n\nA `Piece t a` is essentially a function `f : Time -> a` with\nan associated duration `dur` which indicates that `f` is\nmeant to be considered as a function on the\ntime interval [0, dur].\n\nThe first type paramater `t` is `ForATime` if that duration\nis some finite time and is `Forever` if `f` is to be considered\na total function.\n\nAs an example, we might have a value \n`circlePos : Piece ForATime (Float, Float)` indicating the position\nof a circle in an animation.\n\n# Formation\n@docs Piece, ForATime, Forever\n\n# Introduction\n@docs forever, for, stayFor, stayForever\n\n# Transformation\n@docs dilate, cycle, sustain, map\n\n# Composition\n@docs followedBy, chainTo\n\n# Elimination\n@docs finalValue, run, layer\n\n",
        "aliases": [
          {
            "name": "Piece",
            "comment": " ",
            "args": [
              "t",
              "a"
            ],
            "type": "Piece.Internal.Piece t a"
          }
        ],
        "types": [
          {
            "name": "ForATime",
            "comment": " A tag type indicating that a `Piece` is defined on some bounded interval. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Forever",
            "comment": " A tag type indicating that a `Piece` is defined everywhere ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "chainTo",
            "comment": " Create a sequence of two Pieces, giving the second access to the\nfinal value of the first. For example,\n\n    pos = for (3 * second) (\\t -> t * (100 / 1*second))\n          `chainTo` \\finalPos -> for (1*second) (\\t -> finalPos - t * (finalPos / 1*second))\n\nConsider using the synonym `(+>)` from `Piece.Infix`.\n",
            "type": "Piece.Piece Piece.ForATime a -> (a -> Piece.Piece t a) -> Piece.Piece t a"
          },
          {
            "name": "cycle",
            "comment": " Repeat the given `Piece` forever. ",
            "type": "Piece.Piece Piece.ForATime a -> Piece.Piece Piece.Forever a"
          },
          {
            "name": "dilate",
            "comment": " Speed up or slow down time by the given factor. E.g.,\n\n    dilate 0.5 s\n\nis a `Piece` which lasts twice as long as `s` and proceeds half\nas fast ",
            "type": "Float -> Piece.Piece t a -> Piece.Piece t a"
          },
          {
            "name": "finalValue",
            "comment": " Get the last value the `Piece` takes on. ",
            "type": "Piece.Piece Piece.ForATime a -> a"
          },
          {
            "name": "followedBy",
            "comment": " Sequence two Piece. Thinking of Pieces as functions of\ntime, s1 `followedBy` s2 is a piecewise function which acts like\n`s1` for the duration of s1 and afterwards acts like `s2` (shifted\nby the duration of `s1`). For example, we could write\n\n    for (3 * second) (\\_ -> \"hi\") `followedBy` for (1 * second) (\\_ -> \"bye\")\n\nwhich corresponds to a function of time which is `\"hi\"` for times in\nthe interval `[0, 3]` and `\"bye\"` in the interval `(3, 4]`. Consider \nusing the synonym `(<>)` from `Piece.Infix`.\n",
            "type": "Piece.Piece Piece.ForATime a -> Piece.Piece t a -> Piece.Piece t a"
          },
          {
            "name": "for",
            "comment": " Create a `Piece` which runs for the specified duration ",
            "type": "Time.Time -> (Time.Time -> a) -> Piece.Piece Piece.ForATime a"
          },
          {
            "name": "forever",
            "comment": " Create a total `Piece`, defined on all times. ",
            "type": "(Time.Time -> a) -> Piece.Piece Piece.Forever a"
          },
          {
            "name": "layer",
            "comment": " Documentation forthcoming. ",
            "type": "Signal.Signal Time.Time -> Signal.Signal (Piece.Piece Piece.ForATime a) -> Signal.Signal (List a)"
          },
          {
            "name": "map",
            "comment": " ",
            "type": "(a -> b) -> Piece.Piece t a -> Piece.Piece t b"
          },
          {
            "name": "run",
            "comment": " Convert a Signal of `Piece`s into a `Signal` by sampling using the given\n`Signal Time`. ",
            "type": "Signal.Signal Time.Time -> Signal.Signal (Piece.Piece Piece.Forever a) -> Signal.Signal a"
          },
          {
            "name": "stayFor",
            "comment": " A constant `Piece`.\n\n    stayFor dur x = for dur (\\_ -> x)\n",
            "type": "Time.Time -> a -> Piece.Piece Piece.ForATime a"
          },
          {
            "name": "stayForever",
            "comment": " An eternally constant `Piece` \n\n    stayForever x = forever (\\_ -> x)\n",
            "type": "a -> Piece.Piece Piece.Forever a"
          },
          {
            "name": "sustain",
            "comment": " Turn a finite piece into a piece defined for all time by having it\n    just maintain its final value forever. ",
            "type": "Piece.Piece Piece.ForATime a -> Piece.Piece Piece.Forever a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Piece.Internal",
        "comment": " Internal implementation of Piece if you need access to it.\n    This is all subject to change.\n    \n@docs Duration, Piece\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Duration",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "ForATime",
                [
                  "Time.Time"
                ]
              ],
              [
                "Forever",
                []
              ]
            ]
          },
          {
            "name": "Piece",
            "comment": " ",
            "args": [
              "t",
              "a"
            ],
            "cases": [
              [
                "Piece",
                [
                  "Piece.Internal.Duration",
                  "Time.Time -> a"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "imeckler/queue",
    "version": "1.1.2",
    "docs": [
      {
        "name": "Queue",
        "comment": " Just a simple queue data type.\n\n# Type\n@docs Queue\n\n# Construction\n@docs empty, push\n\n# Inspection\n@docs pop\n\n# Utilities\n@docs isEmpty, length, map, toList\n",
        "aliases": [
          {
            "name": "Queue",
            "comment": " A queue is a sequence supporting O(1) appending (`push`) of a new\n    element to the back and amortizsed O(1) removal of the element at the\n    front (`pop`). ",
            "args": [
              "a"
            ],
            "type": "Queue.Internal.Queue a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " An empty queue, ready for pushin'. ",
            "type": "Queue.Queue a"
          },
          {
            "name": "isEmpty",
            "comment": " ",
            "type": "Queue.Queue a -> Bool"
          },
          {
            "name": "length",
            "comment": " ",
            "type": "Queue.Queue a -> Int"
          },
          {
            "name": "map",
            "comment": " ",
            "type": "(a -> b) -> Queue.Queue a -> Queue.Queue b"
          },
          {
            "name": "pop",
            "comment": " Get the first element of the queue and the queue with the first element\n    removed. Returns nothing if the queue is empty. Amortized O(1). ",
            "type": "Queue.Queue a -> Maybe.Maybe ( a, Queue.Queue a )"
          },
          {
            "name": "push",
            "comment": " Put the given element at the back of the given queue. O(1). ",
            "type": "a -> Queue.Queue a -> Queue.Queue a"
          },
          {
            "name": "toList",
            "comment": " A list consisting of the elements in the order in which they were put into the\n    queue (i.e., \"front to back\"). ",
            "type": "Queue.Queue a -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Queue.Internal",
        "comment": " Internal representation of the queue type.\n\n@docs Queue\n",
        "aliases": [],
        "types": [
          {
            "name": "Queue",
            "comment": " See [this blog post](http://parametricity.com/posts/2015-02-19-animating.html). ",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Queue",
                [
                  "List a",
                  "List a"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "imeckler/ratio",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Ratio",
        "comment": " A simple module providing a ratio type for rational numbers \n\n# Types\n@docs Rational\n\n# Introduction\n@docs over, fromInt\n\n# Operations\n@docs add, multiply, divide, negate\n\n# Elimination\n@docs numerator, denominator, split, toFloat\n\n# Util\n@docs gcd \n\n",
        "aliases": [],
        "types": [
          {
            "name": "Rational",
            "comment": " \"Arbitrary\" (up to `max_int` size) precision fractional numbers. Think of\n    it as the length of a rigid bar that you've constructed from a bunch of\n    initial bars of the same fixed length\n    by the operations of gluing bars together and shrinking a\n    given bar so that an integer number of copies of it glues together to\n    make another given bar.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Addition. It's like gluing together two bars of the given lengths. ",
            "type": "Ratio.Rational -> Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "denominator",
            "comment": " ",
            "type": "Ratio.Rational -> Int"
          },
          {
            "name": "divide",
            "comment": " Division. It's sort of like multiplication! ",
            "type": "Ratio.Rational -> Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "fromInt",
            "comment": " `fromInt x = over x 1` ",
            "type": "Int -> Ratio.Rational"
          },
          {
            "name": "gcd",
            "comment": " The biggest number that divides both arguments (the greatest common divisor). ",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "multiply",
            "comment": " Mulitplication. `mulitply x (c / d)` is the length of the bar that you'd get\n    if you glued `c` copies of a bar of length `x` end-to-end and then shrunk it\n    down enough so that `d` copies of the shrunken bar would fit in the big\n    glued bar. ",
            "type": "Ratio.Rational -> Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "negate",
            "comment": " This doesn't really fit with the bar metaphor but this is multiplication by `-1`. ",
            "type": "Ratio.Rational -> Ratio.Rational"
          },
          {
            "name": "numerator",
            "comment": " ",
            "type": "Ratio.Rational -> Int"
          },
          {
            "name": "over",
            "comment": " `over x y` is like `x / y`. ",
            "type": "Int -> Int -> Ratio.Rational"
          },
          {
            "name": "split",
            "comment": " `split x = (numerator x, denominator x)` ",
            "type": "Ratio.Rational -> ( Int, Int )"
          },
          {
            "name": "toFloat",
            "comment": " ",
            "type": "Ratio.Rational -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ir4y/elm-cursor",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Cursor",
        "comment": " Alternative way to build elm app,\n    this module contains all low level primitives\n    to build elm app with high level cursor abstraction.\n\n# Cursor\n@docs Cursor\n\n# Composition operator\n@docs (>=>)\n\n# Cursor helpers\n@docs cursor, start\n\n# Cursor modifiers\n@docs get, set, update\n\n",
        "aliases": [
          {
            "name": "Cursor",
            "comment": " Base type, the triplet of state, signal and lens\n ",
            "args": [
              "a",
              "b"
            ],
            "type": "{ receiver : Signal.Address a, state : a, lens : Focus.Focus a b }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ">=>",
            "comment": " Composition operator, allow to go deeper in state via lens\n ",
            "type": "Cursor.Cursor a b -> Focus.Focus b c -> Cursor.Cursor a c"
          },
          {
            "name": "cursor",
            "comment": " Helper to create a Cursor form signal mail box and initial state data\n",
            "type": "Signal.Mailbox a -> a -> Cursor.Cursor a a"
          },
          {
            "name": "get",
            "comment": " Get cursor value\n ",
            "type": "Cursor.Cursor a b -> b"
          },
          {
            "name": "set",
            "comment": " Set cursor value\n ",
            "type": "Cursor.Cursor a b -> b -> Signal.Message"
          },
          {
            "name": "start",
            "comment": " Create render loop for cursor\n",
            "type": "a -> (Cursor.Cursor a a -> b) -> Signal.Signal b"
          },
          {
            "name": "update",
            "comment": " Update cursor value via f\n ",
            "type": "Cursor.Cursor a b -> (b -> b) -> Signal.Message"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "izdi/junk",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Ff",
        "comment": "Documentation showcase\nThis is still module documentation\n\n# Category Type and Value (Header)\nDescribe what to include below in this category\n@docs Type, value\n\n# About Anyfin\nAnyfin can happen is a hearthstone card\n@docs anyfinCanHappen\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Type",
            "comment": "",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "anyfinCanHappen",
            "comment": "\nJust do this\n\n    anyfinCanHappen == int 0 64\n",
            "type": "Random.Generator Int"
          },
          {
            "name": "value",
            "comment": "WRONG",
            "type": "Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jackfranklin/elm-statey",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Statey",
        "comment": " This library provides a simple state machine implementation in Elm.\n\n# Making a state machine\n@docs StateMachine, makeState, State, StateRecord\n\n# Getting the state\n@docs getState, getStates\n\n# Transitioning\n@docs transition\n\n# Errors\n@docs StateyError\n",
        "aliases": [
          {
            "name": "StateMachine",
            "comment": " A state machine contains a list of valid states, a list of transitions and a list of guards.\n\nA state machine is given a record type that it will always expect to be given. This type should be an extensible record that extends `StateRecord`:\n\n    type alias Person = StateRecord { name: String }\n\n    stateMachine : StateMachine Person\n    stateMachine =\n        { states = [ startState, tiredState, sleepState ]\n        , transitions =\n            [ ( startState, tiredState )\n            , ( tiredState, sleepState )\n            , ( sleepState, startState )\n            ]\n        , guards = []\n        }\n\n",
            "args": [
              "a"
            ],
            "type": "{ states : List Statey.State , transitions : List ( Statey.State, Statey.State ) , guards : List (Statey.Guard a) }"
          },
          {
            "name": "StateRecord",
            "comment": " A `StateRecord` is just any record that has a `state : State` property on it. Every state machine is created with one of these as its type, and most of the functions expect to be given one.\n\nThe records that you want to use in the state machine should be based off this:\n\n    type alias Person = StateRecord { name : String }\n",
            "args": [
              "a"
            ],
            "type": "{ a | state : Statey.State }"
          }
        ],
        "types": [
          {
            "name": "State",
            "comment": " Represents a state. This can either be a user given state, or `AnyState`,\nwhich is used in guards to denote that it applies to any state\n",
            "args": [],
            "cases": []
          },
          {
            "name": "StateyError",
            "comment": " Represents an error in a state transition.\n",
            "args": [],
            "cases": [
              [
                "TransitionNotDefined",
                []
              ],
              [
                "GuardPreventedTansition",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "getState",
            "comment": " given a particular record, return the state of it. This is an alias to `.state`\ncurrently, but you should use is in case the underlying abstractions change\n\n    getState { name = \"jack\", state = startState } == startState\n\n",
            "type": "Statey.StateRecord a -> Statey.State"
          },
          {
            "name": "getStates",
            "comment": " given a state machine, return its list of states. An alias to `.states`.\n",
            "type": "Statey.StateMachine a -> List Statey.State"
          },
          {
            "name": "makeState",
            "comment": " Make a state from a string. This is the method you should use to create states\nfor your state machine. The string given doesn't matter, just make it relevant to\nyour application.\n\n    startState = makeState \"start\"\n",
            "type": "String -> Statey.State"
          },
          {
            "name": "transition",
            "comment": " Transition the given record from its state to the new state. The result will\neither be an `Ok newRecord` or `Err StateyErr`.\n\n    startState = makeState \"start\"\n    middleState = makeState \"middle\"\n    endState = makeState \"end\"\n\n    stateMachine : StateMachine { name : String }\n    stateMachine =\n        { states = [ startState, middleState, endState ]\n        , transitions = [ ( startState, middleState ), ( middleState, endState ) ]\n        , guards = []\n        }\n\n    person = { name = \"Jack\", state = startState }\n\n    case transition stateMachine middleState person of\n        Ok newPerson ->\n            newPerson\n        Err err ->\n            err == GuardPreventedTansition || err == TransitionNotDefined\n",
            "type": "Statey.StateMachine a -> Statey.State -> Statey.StateRecord a -> Result.Result Statey.StateyError (Statey.StateRecord a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jasonmahr/html-escape-sequences",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Unicode",
        "comment": " Use HTML escape sequences with elm-html. Supports all Unicode characters and\nrecognizes decimal, hexadecimal and non-digit escape sequences.\n@docs unEsc, text', txt\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "text'",
            "comment": " unEsc >> Html.text\n\n    Html.text \"© &copy; &#169;\"  -- renders © &copy; &#169; to the page\n    text'     \"© &copy; &#169;\"  -- renders © © ©\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "txt",
            "comment": " An alternate name that avoids apostrophes.\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "unEsc",
            "comment": " Unescapes all valid HTML escape sequences within a string.\n\n    unEsc \"© &COPY; &copy; &#169; &#x000A9; &cpy;\" == \"© © © © © &cpy;\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jasonmahr/html-escaped-unicode",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Unicode",
        "comment": " Allows use of HTML-escaped strings with elm-html. Supports decimal,\nhexadecimal and non-digit escape sequences. No more hunting around for Unicode\nsymbols!\n@docs unEsc, text', txt\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "text'",
            "comment": " unEsc >> Html.text\n\n    Html.text \"© &copy; &#169;\"  -- renders © &copy; &#169; to the page\n    text'     \"© &copy; &#169;\"  -- renders © © ©\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "txt",
            "comment": " An alternate name that avoids apostrophes.\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "unEsc",
            "comment": " Unescapes an HTML-escaped string.\n\n    unEsc \"© &COPY; &copy; &#169; &#x000A9; &cpy;\" == \"© © © © © &cpy;\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jastice/boxes-and-bubbles",
    "version": "2.0.0",
    "docs": [
      {
        "name": "BoxesAndBubbles",
        "comment": " The interface for the Boxes and Bubbles physics engine.\n\n# Concepts\n\n## Simulation\n\nBoxes and Bubbles implements a very simple physics simulation. It updates a list of bodies\nat each step. There is no time-normalized integration - if you run it with higher fps, \nit will run faster.\n\nSee the [example code](https://github.com/jastice/boxes-and-bubbles/blob/master/Example.elm) \nand the [example animation](http://jastice.github.io/boxes-and-bubbles/) that it produces\nfor a working usage example.\n\n## Bodies\n\nEverything in Boxes and Bubbles is a Body. A Body is a Box, or a Bubble.\n\nBodies have some properties:\n\n* `position` -- reference point and center of body\n* `velocity` -- direction and speed of movement\n* `mass` -- the mass (stored as inverseMass)\n* `restitution` -- bounciness factor: how much force is preserved on collisions\n* `shape` -- radius for Bubble, extents for Box, wrapped in an ADT.\n\nBodies can have infinite mass. Infinite mass bodies are not affected by any forces.\n\n## Forces\n\nTwo types of global forces: gravity and ambient. Both are vectors,\nso that they could point in any direction. Both can vary over time.\nAmbient force takes the mass of objects into account, while gravity does not.\n\n# Functions\n\n## Constructors and helpers\n\n@docs bubble, box, bounds\n\n## Running the simulation\n\n@docs step, run\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bounds",
            "comment": " Create a bounding box made up of boxes with infinite mass.\n\n    bounds (width,height) thickness restitution center meta\n\nCreate bounds with width and height 800, 50 thick walls and 0.6 restitution and a String tag\nat the origin:\n\n    bounds (800,800) 50 0.6 (0,0) \"tag\"\n\n",
            "type": "Math2D.Vec2 -> Float -> Float -> Math2D.Vec2 -> meta -> List (BoxesAndBubblesBodies.Body meta)"
          },
          {
            "name": "box",
            "comment": " Create a box. Mass is derived from density and size.\n    \n    box (width,height) position velocity density restitution\n\nCreate a box with width 100, height 20, density 1 and restitution 1\nat origin, moving toward the upper right:\n\n    box (100,20) 1 1 (0,0) (3,3)\n",
            "type": "Math2D.Vec2 -> Float -> Float -> Math2D.Vec2 -> Math2D.Vec2 -> meta -> BoxesAndBubblesBodies.Body meta"
          },
          {
            "name": "bubble",
            "comment": " Create a bubble. Mass is derived from density and size.\n\n    bubble radius density restitution position velocity meta\n\nCreate a bubble with radius 100 with density 1 and restitution 1\nat origin and a string \"tag\", moving toward the upper right:\n\n    bubble 100 1 1 (0,0) (3,3) \"tag\"\n",
            "type": "Float -> Float -> Float -> Math2D.Vec2 -> Math2D.Vec2 -> meta -> BoxesAndBubblesBodies.Body meta"
          },
          {
            "name": "run",
            "comment": " Convenience function to run the physics engine with a signal and a fixed list of bodies. \nThe forces are a signal so that you can vary them over time. \nOrder of bodies in initial list is not preserved in the output signal.\n\nApplies the step function to (gravity,ambient) tuple from the signal and the \nupdated list of bodies.\n\n    run tick bodies\n\nRun with constant gravity and ambient forces that increase over time, updated at 20 fps:\n\n    f t = ((0,-0.1), (t/1000))\n    run bodies (f <~ foldp (+) 0 (fps 20))\n\n",
            "type": "List (BoxesAndBubblesBodies.Body meta) -> Signal.Signal ( Math2D.Vec2, Math2D.Vec2 ) -> Signal.Signal (List (BoxesAndBubblesBodies.Body meta))"
          },
          {
            "name": "step",
            "comment": " Perform a step in the physics simulation. Applies forces to objects and updates them based\non their velocity and collisions. Order of bodies in input list is not preserved in the output.\n\nThe `gravity` parameter give a global force that ignores object masses, while `force` \ntakes mass into account. Since both types of forces are vectors, they can point in any direction.\nThe ambient force can be used to simulate a current, for example.\n\n    step gravity ambient bodies\n\nApply a downward gravity and sideways ambient force to bodies:\n\n    step (0,-0.2) (20,0) bodies\n",
            "type": "Math2D.Vec2 -> Math2D.Vec2 -> List (BoxesAndBubblesBodies.Body meta) -> List (BoxesAndBubblesBodies.Body meta)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "BoxesAndBubblesEngine",
        "comment": " The actual physics implementation of Boxes and Bubbles.\n\n## Exposed functions\n\nExposes some internal functions mostly for use in the actual API \nand to let you fine-tune your application.\nPlease consult the source code to understand these functions.\nNo implication of API stability.\n\n@docs update, collide, collideWith\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "collide",
            "comment": " Recursive collision resolution.\n\nInternal method, exposed only for your convenience. \nNo implication of API stability.\n",
            "type": "List (BoxesAndBubblesBodies.Body a) -> List (BoxesAndBubblesBodies.Body a) -> List (BoxesAndBubblesBodies.Body a)"
          },
          {
            "name": "collideWith",
            "comment": " Collide a0 with all the bodies, modifying b along the way.\n\n   return (updated a0, [updated bodies])\n\n   Internal method, exposed only for your convenience. No implication of API stability.\n",
            "type": "BoxesAndBubblesBodies.Body a -> List (BoxesAndBubblesBodies.Body a) -> List (BoxesAndBubblesBodies.Body a) -> List (BoxesAndBubblesBodies.Body a)"
          },
          {
            "name": "update",
            "comment": " Update body position with its speed and apply additional forces.\n\nMay be used to gain a more fine-grained control over what forces affect.\nNo implication of API stability.\n",
            "type": "Math2D.Vec2 -> Math2D.Vec2 -> BoxesAndBubblesBodies.Body a -> BoxesAndBubblesBodies.Body a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "BoxesAndBubblesBodies",
        "comment": " # Boxes and Bubbles Bodies.\nDefines bodies as used by the Boxes and Bubbles engine. You will need these data types to \ndisplay and modify bodies being calculated. For creating them, you may prefer the constructor \nfunctions in the BoxesAndBubbles module.\n\n@docs Body, Shape\n\n",
        "aliases": [
          {
            "name": "Body",
            "comment": " A rigid body in the Boxes and Bubbles universe, as used internally by the engine.\nMass is stored as inverse, because it is more convenient for calculation.\n\nType parameter `meta` can be used to attach arbitrary other information used\nby your application to bodies. For example: label, hit points, an object type ADT, or more low-level, \nan id used to associate the body with arbitrary other data via a Dict.\n",
            "args": [
              "meta"
            ],
            "type": "{ pos : Math2D.Vec2 , velocity : Math2D.Vec2 , inverseMass : Float , restitution : Float , shape : BoxesAndBubblesBodies.Shape , meta : meta }"
          }
        ],
        "types": [
          {
            "name": "Shape",
            "comment": " Shape data for a body. \nA bubble is defined by its radius.\nA box is defined by its extents (half-width/half-height from the center).\nWe use half-lengths because that's what is convenient for calculation, and it's most consistent\nwith using radius for circles.\n",
            "args": [],
            "cases": [
              [
                "Box",
                [
                  "Math2D.Vec2"
                ]
              ],
              [
                "Bubble",
                [
                  "Float"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jastice/president",
    "version": "1.1.0",
    "docs": [
      {
        "name": "President",
        "comment": " \n\nPresident turns a `List (Signal Element)` into a presentation\nthat you can navigate with arrow keys. That's about it.\n\n@docs present, voidSlide\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "present",
            "comment": "\nA signal that displays each of the signals in the list\nas a slide. This may be navigated with the arrow keys.\n",
            "type": "List (Signal.Signal Graphics.Element.Element) -> Signal.Signal Graphics.Element.Element"
          },
          {
            "name": "voidSlide",
            "comment": " A default almost-empty slide that is needed as workaround for a bug in Elm. ",
            "type": "Graphics.Element.Element"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "javcasas/elm-decimal",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Data.Decimal",
        "comment": "\n\n# The datatype\n@docs Decimal\n\n# From stuff\n@docs fromInt\n@docs fromIntWithExponent\n@docs fromString\n@docs fromFloat\n@docs unsafeFromString\n\n# To stuff\n@docs toString\n@docs toFloat\n\n# Arithmetic operations\n@docs add\n@docs sub\n@docs negate\n@docs mul\n@docs fastdiv\n\n# Rounding\n@docs truncate\n@docs round\n\n# Comparing\n@docs gt\n@docs gte\n@docs eq\n@docs neq\n@docs lt\n@docs lte\n@docs compare\n\n# Misc operations\n@docs abs\n@docs getDigit\n\n# Common numbers\n@docs zero\n@docs one\n@docs minusOne\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Decimal",
            "comment": "\nThe Decimal data type\nIt is represented as mantissa * 10 ^ exponent\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "abs",
            "comment": "\nAbsolute value (sets the sign as positive)\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "add",
            "comment": "\nAddition\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "compare",
            "comment": "\nCompares two Decimals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Basics.Order"
          },
          {
            "name": "eq",
            "comment": "\nEquals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "fastdiv",
            "comment": "\nFast and dirty division. Don't expect too much precision from this division. Dividing by zero is bad, and Nothing will be returned.\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Maybe.Maybe Data.Decimal.Decimal"
          },
          {
            "name": "fromFloat",
            "comment": "\nConverts a Float to a Decimal\n",
            "type": "Float -> Maybe.Maybe Data.Decimal.Decimal"
          },
          {
            "name": "fromInt",
            "comment": "\nConverts an Int to a Decimal\n",
            "type": "Int -> Data.Decimal.Decimal"
          },
          {
            "name": "fromIntWithExponent",
            "comment": "\nConverts an Int to a Decimal, but specifying the exponent\n",
            "type": "Int -> Int -> Data.Decimal.Decimal"
          },
          {
            "name": "fromString",
            "comment": "\nConverts a String to a Maybe Decimal. The string shall be in the format [<sign>]<numbers>[.<numbers>][e<numbers>]\n",
            "type": "String -> Maybe.Maybe Data.Decimal.Decimal"
          },
          {
            "name": "getDigit",
            "comment": "\nGets the specified digit from a Decimal. The digits are:\n0 -> units\n1 -> tens\n2 -> hundreds\nand so on\n-1 -> tenths\n-2 -> hundredths\nand so on\n",
            "type": "Int -> Data.Decimal.Decimal -> Int"
          },
          {
            "name": "gt",
            "comment": "\nGreater than\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "gte",
            "comment": "\nGreater than or equals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "lt",
            "comment": "\nLess than\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "lte",
            "comment": "\nLess than or equals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "minusOne",
            "comment": "\nThe number -1\n",
            "type": "Data.Decimal.Decimal"
          },
          {
            "name": "mul",
            "comment": "\nMultiplication\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "negate",
            "comment": "\nChanges the sign of a Decimal\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "neq",
            "comment": "\nNot equals\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Bool"
          },
          {
            "name": "one",
            "comment": "\nThe number 1\n",
            "type": "Data.Decimal.Decimal"
          },
          {
            "name": "round",
            "comment": "\nRounds the Decimal to the specified decimal places\n",
            "type": "Int -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "sub",
            "comment": "\nSubstraction\n",
            "type": "Data.Decimal.Decimal -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "toFloat",
            "comment": "\nConverts a Decimal to a Float\n",
            "type": "Data.Decimal.Decimal -> Float"
          },
          {
            "name": "toString",
            "comment": "\nConverts a Decimal to a String\n",
            "type": "Data.Decimal.Decimal -> String"
          },
          {
            "name": "truncate",
            "comment": "\nTruncates the Decimal to the specified decimal places\n",
            "type": "Int -> Data.Decimal.Decimal -> Data.Decimal.Decimal"
          },
          {
            "name": "unsafeFromString",
            "comment": "\nConverts a String to a Decimal,\nbut if the string does not represent\na valid Decimal, it crashes.\nUseful for Decimal constants.\n",
            "type": "String -> Data.Decimal.Decimal"
          },
          {
            "name": "zero",
            "comment": "\nThe number 0\n",
            "type": "Data.Decimal.Decimal"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "javcasas/elm-integer",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Data.Integer",
        "comment": " Infinite digits integers\n# The datatype\n@docs Integer\n@docs Sign\n\n# From/To\n@docs fromInt\n@docs fromString\n@docs toString\n\n# Common operations\n@docs add\n@docs sub\n@docs negate\n@docs mul\n@docs divmod\n@docs unsafeDivmod\n@docs abs\n@docs sign\n\n# Comparison\n@docs compare\n@docs gt\n@docs gte\n@docs lt\n@docs lte\n@docs eq\n@docs neq\n@docs max\n@docs min\n\n# Common numbers\n@docs zero\n@docs one\n@docs minusOne\n\n# Internals\n@docs max_digit_value\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Integer",
            "comment": " Integer type ",
            "args": [],
            "cases": []
          },
          {
            "name": "Sign",
            "comment": " The sign of the integer ",
            "args": [],
            "cases": [
              [
                "Positive",
                []
              ],
              [
                "Negative",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "abs",
            "comment": " Absolute value ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "add",
            "comment": " Adds two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "compare",
            "comment": " Compares two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Basics.Order"
          },
          {
            "name": "divmod",
            "comment": " Division and modulus ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Maybe.Maybe ( Data.Integer.Integer, Data.Integer.Integer )"
          },
          {
            "name": "eq",
            "comment": " Equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "fromInt",
            "comment": " Makes an Integer from an Int ",
            "type": "Int -> Data.Integer.Integer"
          },
          {
            "name": "fromString",
            "comment": " Makes an Integer from a String ",
            "type": "String -> Maybe.Maybe Data.Integer.Integer"
          },
          {
            "name": "gt",
            "comment": " Greater than ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "gte",
            "comment": " Greater than or equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "lt",
            "comment": " Less than ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "lte",
            "comment": " Less than or equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "max",
            "comment": " Returns the largest of two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "max_digit_value",
            "comment": " Enough to hold digit * digit without overflowing to double ",
            "type": "Int"
          },
          {
            "name": "min",
            "comment": " Returns the smallest of two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "minusOne",
            "comment": " Number -1 ",
            "type": "Data.Integer.Integer"
          },
          {
            "name": "mul",
            "comment": " Multiplies two Integers ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "negate",
            "comment": " Changes the sign of an Integer ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "neq",
            "comment": " Not equals ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Bool"
          },
          {
            "name": "one",
            "comment": " Number 1 ",
            "type": "Data.Integer.Integer"
          },
          {
            "name": "sign",
            "comment": " Get the sign of the integer ",
            "type": "Data.Integer.Integer -> Data.Integer.Sign"
          },
          {
            "name": "sub",
            "comment": " Substracts the second Integer from the first ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> Data.Integer.Integer"
          },
          {
            "name": "toString",
            "comment": " Converts the Integer to a String ",
            "type": "Data.Integer.Integer -> String"
          },
          {
            "name": "unsafeDivmod",
            "comment": " divmod that returns the pair of values, or crashes if the divisor is zero ",
            "type": "Data.Integer.Integer -> Data.Integer.Integer -> ( Data.Integer.Integer, Data.Integer.Integer )"
          },
          {
            "name": "zero",
            "comment": " Number 0 ",
            "type": "Data.Integer.Integer"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "joeandaverde/flex-html",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Flex",
        "comment": " Companion library to elm-html. Helps with flexbox layout\n\n# Flex Types\n@docs Direction, Alignment, WrapValue\n\n# Flex Mixins\nMixins can be used alone or as a combinator to specify flex-related styles.\n@docs display, flow, direction, wrap, alignItems, justifyContent, grow, shrink, basis, flex, order, alignSelf\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Alignment",
            "comment": " The `Alignment` type specifies all the values possible for the `alignItems`\nand `justifyConteent` mixins.\n\n  - Start: Content is left-aligned.\n  - Center: Content is center-aligned.\n  - End: Content is right-aligned.\n  - Stretch: Content-width is stretched to fill up the space.\n  - Surround: Extra space is devided into equal spaces around the content.\n",
            "args": [],
            "cases": [
              [
                "Start",
                []
              ],
              [
                "Center",
                []
              ],
              [
                "End",
                []
              ],
              [
                "Stretch",
                []
              ],
              [
                "Surround",
                []
              ]
            ]
          },
          {
            "name": "Direction",
            "comment": " The `Direction` type specifies all the direction values possible for the\n`flexDirection` mixin.\n\n  - Horizontal: Default value. The flexible items are displayed horizontally, as a row.\n  - Vertical: The flexible items are displayed vertically, as a column.\n  - HorizontalReverse: Same as `Horizontal`, but in reverse order.\n  - verticalReverse: Same as `Vertical`, but in reverse order.\n",
            "args": [],
            "cases": [
              [
                "Horizontal",
                []
              ],
              [
                "Vertical",
                []
              ],
              [
                "HorizontalReverse",
                []
              ],
              [
                "VerticalReverse",
                []
              ]
            ]
          },
          {
            "name": "WrapValue",
            "comment": " The `WrapValue` type specifies all the wrapping values possible for the\n`wrap` mixin.\n\n  - Wrap: Specifies that the flexible items will wrap if necessary.\n  - NoWrap: Default value. Specifies that the flexible items will not wrap.\n  - WrapReverse: Specifies that the flexible items will wrap, if necessary, in reverse order.\n",
            "args": [],
            "cases": [
              [
                "Wrap",
                []
              ],
              [
                "NoWrap",
                []
              ],
              [
                "WrapReverse",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "alignItems",
            "comment": " The `alignItems` mixin specifies the default alignment for items inside\nthe flexible container.\n",
            "type": "Flex.Alignment -> List ( String, String )"
          },
          {
            "name": "alignSelf",
            "comment": " The `alignSelf` mixin specifies the alignment for the selected item inside\nthe flexible container.\n",
            "type": "Flex.Alignment -> List ( String, String )"
          },
          {
            "name": "basis",
            "comment": " The `basis` mixin specifies the initial length of a flexible item.\n",
            "type": "String -> List ( String, String )"
          },
          {
            "name": "direction",
            "comment": " The `direction` mixin specifies the direction of the flexible items.\n",
            "type": "Flex.Direction -> List ( String, String )"
          },
          {
            "name": "display",
            "comment": " Displays an element as an block-level flex container. ",
            "type": "List ( String, String )"
          },
          {
            "name": "flex",
            "comment": " The `flex` mixin specifies the length of the item, relative to the rest of\nthe flexible items inside the same container.\n\nIt's a style shorthand for flexGrow, flexShrink and flexBasis\n",
            "type": "Float -> Float -> String -> List ( String, String )"
          },
          {
            "name": "flow",
            "comment": " The `flow` mixin specifies how much the item will grow relative to the rest\nof the flexible items inside the same container.\n",
            "type": "Flex.Direction -> Flex.WrapValue -> List ( String, String )"
          },
          {
            "name": "grow",
            "comment": " The `grow` mixin specifies how much the item will grow relative to the rest\nof the flexible items inside the same container.\n",
            "type": "Float -> List ( String, String )"
          },
          {
            "name": "justifyContent",
            "comment": " The `justifyContent` mixin aligns the flexible container's items when the\nitems do not use all available space on the main-axis.\n",
            "type": "Flex.Alignment -> List ( String, String )"
          },
          {
            "name": "order",
            "comment": " The `order` mixin specifies the order of a flexible item relative to the\nrest of the flexible items inside the same container.\n",
            "type": "Int -> List ( String, String )"
          },
          {
            "name": "shrink",
            "comment": " The `shrink` mixin specifies how the item will shrink relative to the rest\nof the flexible items inside the same container.\n",
            "type": "Float -> List ( String, String )"
          },
          {
            "name": "wrap",
            "comment": " The `wrap` mixin specifies whether the flexible items should wrap or not.\n",
            "type": "Flex.WrapValue -> List ( String, String )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "johnpmayer/elm-opaque",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Opaque",
        "comment": "\n\n@docs Buffer\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Buffer",
            "comment": " Typically used for under-the-hood native buffers ",
            "args": [],
            "cases": []
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "joneshf/elm-",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Dashes",
        "comment": " Converts -- and --- to – and — respectively\n\n@docs em, en\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "em",
            "comment": " Converts --- to —\n",
            "type": "String -> String"
          },
          {
            "name": "en",
            "comment": " Converts -- to –\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jsanchesleao/elm-assert",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Assert",
        "comment": " this library is for unit testing code\n\n# Making HTML reports\n@docs report, suite, test\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "report",
            "comment": " Groups together test suites\n\n",
            "type": "String -> List Html.Html -> Html.Html"
          },
          {
            "name": "suite",
            "comment": " Groups together test cases\n",
            "type": "String -> List Html.Html -> Html.Html"
          },
          {
            "name": "test",
            "comment": " Defines a test case\n",
            "type": "String -> x -> x -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jvoigtlaender/elm-drag",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Drag",
        "comment": " A low- and high-level interface to mouse drag actions.\n\n# The high-level interface\n@docs Action, track, trackMany\n\n# The low-level interface\n@docs MouseEvent, mouseEvents\n\n# An automaton\n@docs Input, automaton\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " A type for actions performed on draggable items.\n",
            "args": [],
            "cases": [
              [
                "Lift",
                []
              ],
              [
                "MoveBy",
                [
                  "( Int, Int )"
                ]
              ],
              [
                "Release",
                []
              ]
            ]
          },
          {
            "name": "Input",
            "comment": " Input type for [`automaton`](#automaton).\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Mouse",
                [
                  "Drag.MouseEvent"
                ]
              ],
              [
                "Hover",
                [
                  "Maybe.Maybe a"
                ]
              ]
            ]
          },
          {
            "name": "MouseEvent",
            "comment": " A type for individual events in a drag sequence.\n",
            "args": [],
            "cases": [
              [
                "StartAt",
                [
                  "( Int, Int )"
                ]
              ],
              [
                "MoveFromTo",
                [
                  "( Int, Int )",
                  "( Int, Int )"
                ]
              ],
              [
                "EndAt",
                [
                  "( Int, Int )"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "automaton",
            "comment": " An [Automaton](http://package.elm-lang.org/packages/evancz/automaton/latest)\nthat can be used in specific situations where [`track`](#track)/[`trackMany`](#trackMany) are\nnot applicable. See\n[Example4.elm](https://github.com/jvoigtlaender/elm-drag/blob/master/Example4.elm)\n([demo](https://jvoigtlaender.github.io/elm-drag/Example4.html)).\nThe automaton is also used internally in the [`track`](#track) and [`trackMany`](#trackMany)\nfunctions.\n",
            "type": "Maybe.Maybe a -> Automaton.Automaton (Drag.Input a) (Maybe.Maybe ( a, Drag.Action ))"
          },
          {
            "name": "mouseEvents",
            "comment": " A signal of drag sequence events, fed by `Mouse.isDown`\nand `Mouse.position`. A possible history of this signal could be\n`StartAt (10,10)`, `MoveFromTo (10,10) (12,10)`, `MoveFromTo (12,10) (13,8)`,\n`EndAt (13,8)`, `StartAt (20,15)`, `MoveFromTo (20,15) (22,18)`,\n`EndAt (22,18)`, ...\n",
            "type": "Signal.Signal Drag.MouseEvent"
          },
          {
            "name": "track",
            "comment": " Track a single draggable item. The `Bool` and `Signal Bool`\narguments are the initial value and input signal which tell whether\nthe mouse is (currently) hovering over the draggable item. An example\nuse\n([Example1.elm](https://github.com/jvoigtlaender/elm-drag/blob/master/Example1.elm) -\n[demo](https://jvoigtlaender.github.io/elm-drag/Example1.html)):\n\n    hover =\n        Signal.mailbox False\n\n    box =\n        Graphics.Input.hoverable\n            (Signal.message hover.address)\n            (putInBox (leftAligned (fromString \"drag me around\")))\n\n    putInBox e =\n        let\n            ( sx, sy ) = sizeOf e\n        in\n            layers [ e, collage sx sy [ outlined (solid black) (rect (toFloat sx) (toFloat sy)) ] ]\n\n    moveBy ( dx, dy ) ( x, y ) =\n        ( x + toFloat dx, y - toFloat dy )\n\n    main =\n        let\n            update m =\n                case m of\n                    Just (MoveBy ( dx, dy )) ->\n                        moveBy ( dx, dy )\n                    _ ->\n                        identity\n        in\n            Signal.map\n                (\\p -> collage 200 200 [ Graphics.Collage.move p (toForm box) ])\n                (foldp update ( 0, 0 ) (track False hover.signal))\n",
            "type": "Bool -> Signal.Signal Bool -> Signal.Signal (Maybe.Maybe Drag.Action)"
          },
          {
            "name": "trackMany",
            "comment": " Track several draggable items. The `Maybe a` and `Signal (Maybe\na)` arguments are the initial value and input signal which tell\nwhether the mouse is (currently) hovering over a draggable item, and\nover which one. An example use\n([Example2.elm](https://github.com/jvoigtlaender/elm-drag/blob/master/Example2.elm) -\n[demo](https://jvoigtlaender.github.io/elm-drag/Example2.html),\nalso using `putInBox` and `moveBy` from above):\n\n    hover =\n        Signal.mailbox Nothing\n\n    box1 =\n        Graphics.Input.hoverable\n            (Signal.message hover.address\n                << \\h ->\n                    if h then\n                        Just 1\n                    else\n                        Nothing\n            )\n            (putInBox (leftAligned (fromString \"drag me around\")))\n\n    box2 =\n        Graphics.Input.hoverable\n            (Signal.message hover.address\n                << \\h ->\n                    if h then\n                        Just 2\n                    else\n                        Nothing\n            )\n            (putInBox (leftAligned (fromString \"and me too\")))\n\n    main =\n        let\n            update m =\n                case m of\n                    Just ( 1, MoveBy ( dx, dy ) ) ->\n                        \\( p1, p2 ) -> ( moveBy ( dx, dy ) p1, p2 )\n                    Just ( 2, MoveBy ( dx, dy ) ) ->\n                        \\( p1, p2 ) -> ( p1, moveBy ( dx, dy ) p2 )\n                    _ ->\n                        identity\n        in\n            Signal.map\n                (\\( p1, p2 ) ->\n                    collage\n                        200\n                        200\n                        [ Graphics.Collage.move p1 (toForm box1)\n                        , Graphics.Collage.move p2 (toForm box2)\n                        ]\n                )\n                (foldp update ( ( 0, 15 ), ( 0, -15 ) ) (trackMany Nothing hover.signal))\n\nA more dynamic example can be found in\n[Example3.elm](https://github.com/jvoigtlaender/elm-drag/blob/master/Example3.elm)\n([demo](https://jvoigtlaender.github.io/elm-drag/Example3.html)), or using\n[`start-app`](http://package.elm-lang.org/packages/evancz/start-app/latest), in\n[Example3b.elm](https://github.com/jvoigtlaender/elm-drag/blob/master/Example3b.elm)\n([demo](https://jvoigtlaender.github.io/elm-drag/Example3b.html)).\n",
            "type": "Maybe.Maybe a -> Signal.Signal (Maybe.Maybe a) -> Signal.Signal (Maybe.Maybe ( a, Drag.Action ))"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jvoigtlaender/elm-drag-and-drop",
    "version": "1.0.6",
    "docs": [
      {
        "name": "DragAndDrop",
        "comment": " A low- and high-level interface to mouse drag and drop actions.\n\n# The high-level interface\n@docs Action, track, trackMany\n\n# The low-level interface\n@docs MouseEvent, mouseEvents\n\n# An automaton\n@docs Input, automaton\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " A type for actions performed on draggable items.\n",
            "args": [],
            "cases": [
              [
                "Lift",
                []
              ],
              [
                "MoveBy",
                [
                  "( Int, Int )"
                ]
              ],
              [
                "Release",
                []
              ]
            ]
          },
          {
            "name": "Input",
            "comment": " Input type for [`automaton`](#automaton).\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Mouse",
                [
                  "DragAndDrop.MouseEvent"
                ]
              ],
              [
                "Hover",
                [
                  "Maybe.Maybe a"
                ]
              ]
            ]
          },
          {
            "name": "MouseEvent",
            "comment": " A type for individual events in a drag and drop sequence.\n",
            "args": [],
            "cases": [
              [
                "StartAt",
                [
                  "( Int, Int )"
                ]
              ],
              [
                "MoveFromTo",
                [
                  "( Int, Int )",
                  "( Int, Int )"
                ]
              ],
              [
                "EndAt",
                [
                  "( Int, Int )"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "automaton",
            "comment": " An [Automaton](http://package.elm-lang.org/packages/evancz/automaton/latest)\nthat can be used in specific situations where [`track`](#track)/[`trackMany`](#trackMany) are\nnot applicable. See\n[Example4.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example4.elm)\n([demo](https://jvoigtlaender.github.io/elm-drag-and-drop/Example4.html)).\nThe automaton is also used internally in the [`track`](#track) and [`trackMany`](#trackMany)\nfunctions.\n",
            "type": "Maybe.Maybe a -> Automaton.Automaton (DragAndDrop.Input a) (Maybe.Maybe ( a, DragAndDrop.Action ))"
          },
          {
            "name": "mouseEvents",
            "comment": " A signal of drag and drop sequence events, fed by `Mouse.isDown`\nand `Mouse.position`. A possible history of this signal could be\n`StartAt (10,10)`, `MoveFromTo (10,10) (12,10)`, `MoveFromTo (12,10) (13,8)`,\n`EndAt (13,8)`, `StartAt (20,15)`, `MoveFromTo (20,15) (22,18)`,\n`EndAt (22,18)`, ...\n",
            "type": "Signal.Signal DragAndDrop.MouseEvent"
          },
          {
            "name": "track",
            "comment": " Track a single draggable item. The `Bool` and `Signal Bool`\narguments are the initial value and input signal which tell whether\nthe mouse is (currently) hovering over the draggable item. An example\nuse\n([Example1.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example1.elm) -\n[demo](https://jvoigtlaender.github.io/elm-drag-and-drop/Example1.html)):\n\n    hover =\n        Signal.mailbox False\n\n    box =\n        Graphics.Input.hoverable\n            (Signal.message hover.address)\n            (putInBox (leftAligned (fromString \"drag-and-drop me\")))\n\n    putInBox e =\n        let\n            ( sx, sy ) = sizeOf e\n        in\n            layers [ e, collage sx sy [ outlined (solid black) (rect (toFloat sx) (toFloat sy)) ] ]\n\n    moveBy ( dx, dy ) ( x, y ) =\n        ( x + toFloat dx, y - toFloat dy )\n\n    main =\n        let\n            update m =\n                case m of\n                    Just (MoveBy ( dx, dy )) ->\n                        moveBy ( dx, dy )\n                    _ ->\n                        identity\n        in\n            Signal.map\n                (\\p -> collage 200 200 [ Graphics.Collage.move p (toForm box) ])\n                (foldp update ( 0, 0 ) (track False hover.signal))\n",
            "type": "Bool -> Signal.Signal Bool -> Signal.Signal (Maybe.Maybe DragAndDrop.Action)"
          },
          {
            "name": "trackMany",
            "comment": " Track several draggable items. The `Maybe a` and `Signal (Maybe\na)` arguments are the initial value and input signal which tell\nwhether the mouse is (currently) hovering over a draggable item, and\nover which one. An example use\n([Example2.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example2.elm) -\n[demo](https://jvoigtlaender.github.io/elm-drag-and-drop/Example2.html),\nalso using `putInBox` and `moveBy` from above):\n\n    hover =\n        Signal.mailbox Nothing\n\n    box1 =\n        Graphics.Input.hoverable\n            (Signal.message hover.address\n                << \\h ->\n                    if h then\n                        Just 1\n                    else\n                        Nothing\n            )\n            (putInBox (leftAligned (fromString \"drag-and-drop me\")))\n\n    box2 =\n        Graphics.Input.hoverable\n            (Signal.message hover.address\n                << \\h ->\n                    if h then\n                        Just 2\n                    else\n                        Nothing\n            )\n            (putInBox (leftAligned (fromString \"and me too\")))\n\n    main =\n        let\n            update m =\n                case m of\n                    Just ( 1, MoveBy ( dx, dy ) ) ->\n                        \\( p1, p2 ) -> ( moveBy ( dx, dy ) p1, p2 )\n                    Just ( 2, MoveBy ( dx, dy ) ) ->\n                        \\( p1, p2 ) -> ( p1, moveBy ( dx, dy ) p2 )\n                    _ ->\n                        identity\n        in\n            Signal.map\n                (\\( p1, p2 ) ->\n                    collage\n                        200\n                        200\n                        [ Graphics.Collage.move p1 (toForm box1)\n                        , Graphics.Collage.move p2 (toForm box2)\n                        ]\n                )\n                (foldp update ( ( 0, 15 ), ( 0, -15 ) ) (trackMany Nothing hover.signal))\n\nA more dynamic example can be found in\n[Example3.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example3.elm)\n([demo](https://jvoigtlaender.github.io/elm-drag-and-drop/Example3.html)), or using\n[`start-app`](http://package.elm-lang.org/packages/evancz/start-app/latest), in\n[Example3b.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example3b.elm)\n([demo](https://jvoigtlaender.github.io/elm-drag-and-drop/Example3b.html)).\n",
            "type": "Maybe.Maybe a -> Signal.Signal (Maybe.Maybe a) -> Signal.Signal (Maybe.Maybe ( a, DragAndDrop.Action ))"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jvoigtlaender/elm-memo",
    "version": "2.0.3",
    "docs": [
      {
        "name": "Memo",
        "comment": " Most basic memoization functionality.\n\nFor documentation, see the [README](.).\n\n@docs memo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "memo",
            "comment": "\n",
            "type": "(comparable -> b) -> List comparable -> comparable -> Maybe.Maybe b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jweir/elm-iso8601",
    "version": "2.0.0",
    "docs": [
      {
        "name": "ISO8601",
        "comment": " This package provides functionality for working with time and strings based\non the ISO 8601 standard i.e. `2016-03-31T12:13:14.22-04:00`\n\nIt is a \"pure\" Elm package – no Native bindings to Javascript's Date are used.\nThis does have a performance cost. This package is about 10x slower than the\nnative Date library. But there are advantages:\n\n* _Does not cast the time in the local timezone_\n* Preserves the timezone offset values\n* Detects invalid dates\n* Provides a record with easy access to the time's components\n\nIf you have worked with time in Javascript you may have come\nacross issues where the time is recast in the local timezone – not fun.\n\nFor example with Elm.Date (which uses Javascript)\n\n````elm\nDate.fromString \"2016-01-01T01:30:00-04:00\" \\\n  |> Result.map (\\d -> Date.year d)\n--Ok 2015 : Result.Result String Int\n````\n\nWhile the above is the correct time, it is looses its context – year is 2015!\n\nNow with ISO8601\n````elm\nimport ISO8601\n\nt = ISO8601.fromString \"2016-01-01T01:30:00-04:00\"\n-- Ok { year = 2016, month = 1, day = 1, hour = 1, minute = 30, second = 0, millisecond = 0, offset = (-4,0) }\n    : Result.Result String ISO8601.Time\n\nt |> Result.map .year\n-- Ok 2016 : Result.Result String Int\n\n````\n\nISO8601 strives to offer better error handling:\n````elm\nimport Date\nimport ISO8601\n\n-- The below is not a valid date...\nDate.fromString \"2014-02-30\"\n-- Ok {} : Result.Result String Date.Date\n\nISO8601.fromString \"2014-02-30\"\n--- Err (\"day is out of range\") : Result.Result String ISO8601.Time\n````\n\nError messages specify the first error found:\n````elm\n\nDate.fromString \"2014-04-02T13:01:61\"\n-- Err (\"unable to parse '2014-04-02T13:01:61' as a date\")\n\nISO8601.fromString \"2014-04-02T13:01:61\"\n-- Err (\"second is out of range\") : Result.Result String ISO8601.Time\n````\n\n# Time record\n@docs Time\n\n# Parsing\n@docs fromString, toString\n\n# Time conversion\n@docs toTime, fromTime\n",
        "aliases": [
          {
            "name": "Time",
            "comment": " Record representing the time. Offset is tuple representing the hour and minute ± from UTC.\n\n",
            "args": [],
            "type": "{ year : Int , month : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int , offset : ( Int, Int ) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "fromString",
            "comment": " Given an ISO 8601 compatible string, returns a Time record.\n\n````elm\nISO8601.fromString \"2016-01-01T01:30:00-04:00\"\n-- { year = 2016, month = 1, day = 1, hour = 1, minute = 30, second = 0, millisecond = 0, offset = (-4,0) }\n    : ISO8601.Time\nISO8601.fromString \"2016-11-07\"\n--{ year = 2016, month = 11, day = 7, hour = 0, minute = 0, second = 0, millisecond = 0, offset = (0,0) }\n    : ISO8601.Time\n```\n\n",
            "type": "String -> Result.Result String ISO8601.Time"
          },
          {
            "name": "fromTime",
            "comment": " Converts the milliseconds relative to the Unix epoch to a Time record.\n",
            "type": "Int -> ISO8601.Time"
          },
          {
            "name": "toString",
            "comment": " Converts a Time record to an ISO 8601 formated string.\n",
            "type": "ISO8601.Time -> String"
          },
          {
            "name": "toTime",
            "comment": " Converts the Time to milliseconds relative to the Unix epoch: `1970-01-01T00:00:00Z`\n",
            "type": "ISO8601.Time -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jwmerrill/elm-animation-frame",
    "version": "1.0.5",
    "docs": [
      {
        "name": "AnimationFrame",
        "comment": " This library is modeled after Elm's time module. It provides Signals that\nare synchronized with the monitor's frame rate by binding javascript's\nrequestAnimationFrame. `AnimationFrame.frame` and `AnimationFrame.frameWhen` are similar\nto `(Time.fps 60)` and `(Time.fpsWhen 60)` respectively, but they more reliably\nfire once per frame.\n\n#Tickers\n@docs frame, frameWhen\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "frame",
            "comment": " Signal that fires once per frame with the time delta since the last frame.\nNote that \"once per frame\" is an intent, not a guarantee.\n",
            "type": "Signal.Signal Time.Time"
          },
          {
            "name": "frameWhen",
            "comment": " Same as the frame function, but you can turn it on and off. Allows you\nto do brief animations based on user input without major inefficiencies.\nThe first time delta after a pause is always zero, no matter how long\nthe pause was. This way summing the deltas will actually give the amount\nof time that the output signal has been running.\n",
            "type": "Signal.Signal Bool -> Signal.Signal Time.Time"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "jystic/elm-font-awesome",
    "version": "1.1.0",
    "docs": [
      {
        "name": "FontAwesome",
        "comment": " This module exposes 694 scalable vector icons as Elm HTML\ncomponents. If you need to use them as Elements, try the 'toElement'\nfunction from 'elm-html'.\n\nAll icon functions expect a color and a size, which is used as both the width\nand the height.\n\n# Icons\n@docs fa_500px\n@docs adjust\n@docs adn\n@docs align_center\n@docs align_justify\n@docs align_left\n@docs align_right\n@docs amazon\n@docs ambulance\n@docs anchor\n@docs android\n@docs angellist\n@docs angle_double_down\n@docs angle_double_left\n@docs angle_double_right\n@docs angle_double_up\n@docs angle_down\n@docs angle_left\n@docs angle_right\n@docs angle_up\n@docs apple\n@docs archive\n@docs area_chart\n@docs arrow_circle_down\n@docs arrow_circle_left\n@docs arrow_circle_o_down\n@docs arrow_circle_o_left\n@docs arrow_circle_o_right\n@docs arrow_circle_o_up\n@docs arrow_circle_right\n@docs arrow_circle_up\n@docs arrow_down\n@docs arrow_left\n@docs arrow_right\n@docs arrow_up\n@docs arrows_alt\n@docs arrows_h\n@docs arrows_v\n@docs arrows\n@docs asterisk\n@docs at\n@docs automobile\n@docs backward\n@docs balance_scale\n@docs ban\n@docs bank\n@docs bar_chart_o\n@docs bar_chart\n@docs barcode\n@docs bars\n@docs battery_0\n@docs battery_1\n@docs battery_2\n@docs battery_3\n@docs battery_4\n@docs battery_empty\n@docs battery_full\n@docs battery_half\n@docs battery_quarter\n@docs battery_three_quarters\n@docs bed\n@docs beer\n@docs behance_square\n@docs behance\n@docs bell_o\n@docs bell_slash_o\n@docs bell_slash\n@docs bell\n@docs bicycle\n@docs binoculars\n@docs birthday_cake\n@docs bitbucket_square\n@docs bitbucket\n@docs bitcoin\n@docs black_tie\n@docs bluetooth_b\n@docs bluetooth\n@docs bold\n@docs bolt\n@docs bomb\n@docs book\n@docs bookmark_o\n@docs bookmark\n@docs briefcase\n@docs btc\n@docs bug\n@docs building_o\n@docs building\n@docs bullhorn\n@docs bullseye\n@docs bus\n@docs buysellads\n@docs cab\n@docs calculator\n@docs calendar_check_o\n@docs calendar_minus_o\n@docs calendar_o\n@docs calendar_plus_o\n@docs calendar_times_o\n@docs calendar\n@docs camera_retro\n@docs camera\n@docs car\n@docs caret_down\n@docs caret_left\n@docs caret_right\n@docs caret_square_o_down\n@docs caret_square_o_left\n@docs caret_square_o_right\n@docs caret_square_o_up\n@docs caret_up\n@docs cart_arrow_down\n@docs cart_plus\n@docs cc_amex\n@docs cc_diners_club\n@docs cc_discover\n@docs cc_jcb\n@docs cc_mastercard\n@docs cc_paypal\n@docs cc_stripe\n@docs cc_visa\n@docs cc\n@docs certificate\n@docs chain_broken\n@docs chain\n@docs check_circle_o\n@docs check_circle\n@docs check_square_o\n@docs check_square\n@docs check\n@docs chevron_circle_down\n@docs chevron_circle_left\n@docs chevron_circle_right\n@docs chevron_circle_up\n@docs chevron_down\n@docs chevron_left\n@docs chevron_right\n@docs chevron_up\n@docs child\n@docs chrome\n@docs circle_o_notch\n@docs circle_o\n@docs circle_thin\n@docs circle\n@docs clipboard\n@docs clock_o\n@docs clone\n@docs close\n@docs cloud_download\n@docs cloud_upload\n@docs cloud\n@docs cny\n@docs code_fork\n@docs code\n@docs codepen\n@docs codiepie\n@docs coffee\n@docs cog\n@docs cogs\n@docs columns\n@docs comment_o\n@docs comment\n@docs commenting_o\n@docs commenting\n@docs comments_o\n@docs comments\n@docs compass\n@docs compress\n@docs connectdevelop\n@docs contao\n@docs copy\n@docs copyright\n@docs creative_commons\n@docs credit_card_alt\n@docs credit_card\n@docs crop\n@docs crosshairs\n@docs css3\n@docs cube\n@docs cubes\n@docs cut\n@docs cutlery\n@docs dashboard\n@docs dashcube\n@docs database\n@docs dedent\n@docs delicious\n@docs desktop\n@docs deviantart\n@docs diamond\n@docs digg\n@docs dollar\n@docs dot_circle_o\n@docs download\n@docs dribbble\n@docs dropbox\n@docs drupal\n@docs edge\n@docs edit\n@docs eject\n@docs ellipsis_h\n@docs ellipsis_v\n@docs empire\n@docs envelope_o\n@docs envelope_square\n@docs envelope\n@docs eraser\n@docs eur\n@docs euro\n@docs exchange\n@docs exclamation_circle\n@docs exclamation_triangle\n@docs exclamation\n@docs expand\n@docs expeditedssl\n@docs external_link_square\n@docs external_link\n@docs eye_slash\n@docs eye\n@docs eyedropper\n@docs facebook_f\n@docs facebook_official\n@docs facebook_square\n@docs facebook\n@docs fast_backward\n@docs fast_forward\n@docs fax\n@docs feed\n@docs female\n@docs fighter_jet\n@docs file_archive_o\n@docs file_audio_o\n@docs file_code_o\n@docs file_excel_o\n@docs file_image_o\n@docs file_movie_o\n@docs file_o\n@docs file_pdf_o\n@docs file_photo_o\n@docs file_picture_o\n@docs file_powerpoint_o\n@docs file_sound_o\n@docs file_text_o\n@docs file_text\n@docs file_video_o\n@docs file_word_o\n@docs file_zip_o\n@docs file\n@docs files_o\n@docs film\n@docs filter\n@docs fire_extinguisher\n@docs fire\n@docs firefox\n@docs flag_checkered\n@docs flag_o\n@docs flag\n@docs flash\n@docs flask\n@docs flickr\n@docs floppy_o\n@docs folder_o\n@docs folder_open_o\n@docs folder_open\n@docs folder\n@docs font\n@docs fonticons\n@docs fort_awesome\n@docs forumbee\n@docs forward\n@docs foursquare\n@docs frown_o\n@docs futbol_o\n@docs gamepad\n@docs gavel\n@docs gbp\n@docs ge\n@docs gear\n@docs gears\n@docs genderless\n@docs get_pocket\n@docs gg_circle\n@docs gg\n@docs gift\n@docs git_square\n@docs git\n@docs github_alt\n@docs github_square\n@docs github\n@docs gittip\n@docs glass\n@docs globe\n@docs google_plus_square\n@docs google_plus\n@docs google_wallet\n@docs google\n@docs graduation_cap\n@docs gratipay\n@docs group\n@docs h_square\n@docs hacker_news\n@docs hand_grab_o\n@docs hand_lizard_o\n@docs hand_o_down\n@docs hand_o_left\n@docs hand_o_right\n@docs hand_o_up\n@docs hand_paper_o\n@docs hand_peace_o\n@docs hand_pointer_o\n@docs hand_rock_o\n@docs hand_scissors_o\n@docs hand_spock_o\n@docs hand_stop_o\n@docs hashtag\n@docs hdd_o\n@docs header\n@docs headphones\n@docs heart_o\n@docs heart\n@docs heartbeat\n@docs history\n@docs home\n@docs hospital_o\n@docs hotel\n@docs hourglass_1\n@docs hourglass_2\n@docs hourglass_3\n@docs hourglass_end\n@docs hourglass_half\n@docs hourglass_o\n@docs hourglass_start\n@docs hourglass\n@docs houzz\n@docs html5\n@docs i_cursor\n@docs ils\n@docs image\n@docs inbox\n@docs indent\n@docs industry\n@docs info_circle\n@docs info\n@docs inr\n@docs instagram\n@docs institution\n@docs internet_explorer\n@docs intersex\n@docs ioxhost\n@docs italic\n@docs joomla\n@docs jpy\n@docs jsfiddle\n@docs key\n@docs keyboard_o\n@docs krw\n@docs language\n@docs laptop\n@docs lastfm_square\n@docs lastfm\n@docs leaf\n@docs leanpub\n@docs legal\n@docs lemon_o\n@docs level_down\n@docs level_up\n@docs life_bouy\n@docs life_buoy\n@docs life_ring\n@docs life_saver\n@docs lightbulb_o\n@docs line_chart\n@docs link\n@docs linkedin_square\n@docs linkedin\n@docs linux\n@docs list_alt\n@docs list_ol\n@docs list_ul\n@docs list\n@docs location_arrow\n@docs lock\n@docs long_arrow_down\n@docs long_arrow_left\n@docs long_arrow_right\n@docs long_arrow_up\n@docs magic\n@docs magnet\n@docs mail_forward\n@docs mail_reply_all\n@docs mail_reply\n@docs male\n@docs map_marker\n@docs map_o\n@docs map_pin\n@docs map_signs\n@docs map\n@docs mars_double\n@docs mars_stroke_h\n@docs mars_stroke_v\n@docs mars_stroke\n@docs mars\n@docs maxcdn\n@docs meanpath\n@docs medium\n@docs medkit\n@docs meh_o\n@docs mercury\n@docs microphone_slash\n@docs microphone\n@docs minus_circle\n@docs minus_square_o\n@docs minus_square\n@docs minus\n@docs mixcloud\n@docs mobile_phone\n@docs mobile\n@docs modx\n@docs money\n@docs moon_o\n@docs mortar_board\n@docs motorcycle\n@docs mouse_pointer\n@docs music\n@docs navicon\n@docs neuter\n@docs newspaper_o\n@docs object_group\n@docs object_ungroup\n@docs odnoklassniki_square\n@docs odnoklassniki\n@docs opencart\n@docs openid\n@docs opera\n@docs optin_monster\n@docs outdent\n@docs pagelines\n@docs paint_brush\n@docs paper_plane_o\n@docs paper_plane\n@docs paperclip\n@docs paragraph\n@docs paste\n@docs pause_circle_o\n@docs pause_circle\n@docs pause\n@docs paw\n@docs paypal\n@docs pencil_square_o\n@docs pencil_square\n@docs pencil\n@docs percent\n@docs phone_square\n@docs phone\n@docs photo\n@docs picture_o\n@docs pie_chart\n@docs pied_piper_alt\n@docs pied_piper\n@docs pinterest_p\n@docs pinterest_square\n@docs pinterest\n@docs plane\n@docs play_circle_o\n@docs play_circle\n@docs play\n@docs plug\n@docs plus_circle\n@docs plus_square_o\n@docs plus_square\n@docs plus\n@docs power_off\n@docs print\n@docs product_hunt\n@docs puzzle_piece\n@docs qq\n@docs qrcode\n@docs question_circle\n@docs question\n@docs quote_left\n@docs quote_right\n@docs ra\n@docs random\n@docs rebel\n@docs recycle\n@docs reddit_alien\n@docs reddit_square\n@docs reddit\n@docs refresh\n@docs registered\n@docs remove\n@docs renren\n@docs reorder\n@docs repeat\n@docs reply_all\n@docs reply\n@docs retweet\n@docs rmb\n@docs road\n@docs rocket\n@docs rotate_left\n@docs rotate_right\n@docs rouble\n@docs rss_square\n@docs rss\n@docs rub\n@docs ruble\n@docs rupee\n@docs safari\n@docs save\n@docs scissors\n@docs scribd\n@docs search_minus\n@docs search_plus\n@docs search\n@docs sellsy\n@docs send_o\n@docs send\n@docs server\n@docs share_alt_square\n@docs share_alt\n@docs share_square_o\n@docs share_square\n@docs share\n@docs shekel\n@docs sheqel\n@docs shield\n@docs ship\n@docs shirtsinbulk\n@docs shopping_bag\n@docs shopping_basket\n@docs shopping_cart\n@docs sign_in\n@docs sign_out\n@docs signal\n@docs simplybuilt\n@docs sitemap\n@docs skyatlas\n@docs skype\n@docs slack\n@docs sliders\n@docs slideshare\n@docs smile_o\n@docs soccer_ball_o\n@docs sort_alpha_asc\n@docs sort_alpha_desc\n@docs sort_amount_asc\n@docs sort_amount_desc\n@docs sort_asc\n@docs sort_desc\n@docs sort_down\n@docs sort_numeric_asc\n@docs sort_numeric_desc\n@docs sort_up\n@docs sort\n@docs soundcloud\n@docs space_shuttle\n@docs spinner\n@docs spoon\n@docs spotify\n@docs square_o\n@docs square\n@docs stack_exchange\n@docs stack_overflow\n@docs star_half_empty\n@docs star_half_full\n@docs star_half_o\n@docs star_half\n@docs star_o\n@docs star\n@docs steam_square\n@docs steam\n@docs step_backward\n@docs step_forward\n@docs stethoscope\n@docs sticky_note_o\n@docs sticky_note\n@docs stop_circle_o\n@docs stop_circle\n@docs stop\n@docs street_view\n@docs strikethrough\n@docs stumbleupon_circle\n@docs stumbleupon\n@docs subscript\n@docs subway\n@docs suitcase\n@docs sun_o\n@docs superscript\n@docs support\n@docs table\n@docs tablet\n@docs tachometer\n@docs tag\n@docs tags\n@docs tasks\n@docs taxi\n@docs television\n@docs tencent_weibo\n@docs terminal\n@docs text_height\n@docs text_width\n@docs th_large\n@docs th_list\n@docs th\n@docs thumb_tack\n@docs thumbs_down\n@docs thumbs_o_down\n@docs thumbs_o_up\n@docs thumbs_up\n@docs ticket\n@docs times_circle_o\n@docs times_circle\n@docs times\n@docs tint\n@docs toggle_down\n@docs toggle_left\n@docs toggle_off\n@docs toggle_on\n@docs toggle_right\n@docs toggle_up\n@docs trademark\n@docs train\n@docs transgender_alt\n@docs transgender\n@docs trash_o\n@docs trash\n@docs tree\n@docs trello\n@docs tripadvisor\n@docs trophy\n@docs truck\n@docs try\n@docs tty\n@docs tumblr_square\n@docs tumblr\n@docs turkish_lira\n@docs tv\n@docs twitch\n@docs twitter_square\n@docs twitter\n@docs umbrella\n@docs underline\n@docs undo\n@docs university\n@docs unlink\n@docs unlock_alt\n@docs unlock\n@docs unsorted\n@docs upload\n@docs usb\n@docs usd\n@docs user_md\n@docs user_plus\n@docs user_secret\n@docs user_times\n@docs user\n@docs users\n@docs venus_double\n@docs venus_mars\n@docs venus\n@docs viacoin\n@docs video_camera\n@docs vimeo_square\n@docs vimeo\n@docs vine\n@docs vk\n@docs volume_down\n@docs volume_off\n@docs volume_up\n@docs warning\n@docs wechat\n@docs weibo\n@docs weixin\n@docs whatsapp\n@docs wheelchair\n@docs wifi\n@docs wikipedia_w\n@docs windows\n@docs won\n@docs wordpress\n@docs wrench\n@docs xing_square\n@docs xing\n@docs y_combinator_square\n@docs y_combinator\n@docs yahoo\n@docs yc_square\n@docs yc\n@docs yelp\n@docs yen\n@docs youtube_play\n@docs youtube_square\n@docs youtube\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "adjust",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "adn",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "align_center",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "align_justify",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "align_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "align_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "amazon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ambulance",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "anchor",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "android",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angellist",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_double_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_double_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_double_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_double_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "angle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "apple",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "archive",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "area_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_o_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_o_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_circle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrow_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrows",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrows_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrows_h",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "arrows_v",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "asterisk",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "at",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "automobile",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "backward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "balance_scale",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ban",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bank",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bar_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bar_chart_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "barcode",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_0",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_1",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_2",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_3",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_4",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_empty",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_full",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_half",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_quarter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "battery_three_quarters",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bed",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "beer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "behance",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "behance_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bell",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bell_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bell_slash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bell_slash_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bicycle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "binoculars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "birthday_cake",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bitbucket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bitbucket_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bitcoin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "black_tie",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bluetooth",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bluetooth_b",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bold",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bolt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bomb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "book",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bookmark",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bookmark_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "briefcase",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "btc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bug",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "building",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "building_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bullhorn",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bullseye",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "bus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "buysellads",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cab",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calculator",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calendar",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calendar_check_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calendar_minus_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calendar_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calendar_plus_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "calendar_times_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "camera",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "camera_retro",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "car",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_square_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_square_o_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_square_o_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_square_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "caret_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cart_arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cart_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_amex",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_diners_club",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_discover",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_jcb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_mastercard",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_paypal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_stripe",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cc_visa",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "certificate",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chain",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chain_broken",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "check",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "check_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "check_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "check_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "check_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_circle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_circle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_circle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_circle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chevron_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "child",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "chrome",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "circle_o_notch",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "circle_thin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "clipboard",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "clock_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "clone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "close",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cloud",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cloud_download",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cloud_upload",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cny",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "code",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "code_fork",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "codepen",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "codiepie",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "coffee",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cog",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cogs",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "columns",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "comment",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "comment_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "commenting",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "commenting_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "comments",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "comments_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "compass",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "compress",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "connectdevelop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "contao",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "copy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "copyright",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "creative_commons",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "credit_card",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "credit_card_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "crop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "crosshairs",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "css3",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cube",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cubes",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cut",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "cutlery",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dashboard",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dashcube",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "database",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dedent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "delicious",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "desktop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "deviantart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "diamond",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "digg",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dollar",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dot_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "download",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dribbble",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "dropbox",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "drupal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "edge",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "edit",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "eject",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ellipsis_h",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ellipsis_v",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "empire",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "envelope",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "envelope_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "envelope_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "eraser",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "eur",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "euro",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "exchange",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "exclamation",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "exclamation_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "exclamation_triangle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "expand",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "expeditedssl",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "external_link",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "external_link_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "eye",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "eye_slash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "eyedropper",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fa_500px",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "facebook",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "facebook_f",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "facebook_official",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "facebook_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fast_backward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fast_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fax",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "feed",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "female",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fighter_jet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_archive_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_audio_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_code_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_excel_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_image_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_movie_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_pdf_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_photo_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_picture_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_powerpoint_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_sound_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_text",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_text_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_video_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_word_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "file_zip_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "files_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "film",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "filter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fire",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fire_extinguisher",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "firefox",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "flag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "flag_checkered",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "flag_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "flash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "flask",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "flickr",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "floppy_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "folder",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "folder_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "folder_open",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "folder_open_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "font",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fonticons",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "fort_awesome",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "forumbee",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "foursquare",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "frown_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "futbol_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gamepad",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gavel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gbp",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ge",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gear",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gears",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "genderless",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "get_pocket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gg",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gg_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gift",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "git",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "git_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "github",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "github_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "github_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gittip",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "glass",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "globe",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "google",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "google_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "google_plus_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "google_wallet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "graduation_cap",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "gratipay",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "group",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "h_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hacker_news",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_grab_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_lizard_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_o_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_o_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_paper_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_peace_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_pointer_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_rock_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_scissors_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_spock_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hand_stop_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hashtag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hdd_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "header",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "headphones",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "heart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "heart_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "heartbeat",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "history",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "home",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hospital_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hotel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_1",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_2",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_3",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_end",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_half",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "hourglass_start",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "houzz",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "html5",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "i_cursor",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ils",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "image",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "inbox",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "indent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "industry",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "info",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "info_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "inr",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "instagram",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "institution",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "internet_explorer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "intersex",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ioxhost",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "italic",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "joomla",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "jpy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "jsfiddle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "key",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "keyboard_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "krw",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "language",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "laptop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "lastfm",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "lastfm_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "leaf",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "leanpub",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "legal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "lemon_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "level_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "level_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "life_bouy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "life_buoy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "life_ring",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "life_saver",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "lightbulb_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "line_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "link",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "linkedin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "linkedin_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "linux",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "list",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "list_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "list_ol",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "list_ul",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "location_arrow",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "lock",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "long_arrow_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "long_arrow_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "long_arrow_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "long_arrow_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "magic",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "magnet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mail_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mail_reply",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mail_reply_all",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "male",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "map",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "map_marker",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "map_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "map_pin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "map_signs",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mars_double",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mars_stroke",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mars_stroke_h",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mars_stroke_v",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "maxcdn",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "meanpath",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "medium",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "medkit",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "meh_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mercury",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "microphone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "microphone_slash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "minus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "minus_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "minus_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "minus_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mixcloud",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mobile",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mobile_phone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "modx",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "money",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "moon_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mortar_board",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "motorcycle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "mouse_pointer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "music",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "navicon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "neuter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "newspaper_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "object_group",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "object_ungroup",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "odnoklassniki",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "odnoklassniki_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "opencart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "openid",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "opera",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "optin_monster",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "outdent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pagelines",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paint_brush",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paper_plane",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paper_plane_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paperclip",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paragraph",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paste",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pause",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pause_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pause_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paw",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "paypal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pencil",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pencil_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pencil_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "percent",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "phone",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "phone_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "photo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "picture_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pie_chart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pied_piper",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pied_piper_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pinterest",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pinterest_p",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "pinterest_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "plane",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "play",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "play_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "play_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "plug",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "plus_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "plus_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "plus_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "power_off",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "print",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "product_hunt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "puzzle_piece",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "qq",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "qrcode",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "question",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "question_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "quote_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "quote_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ra",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "random",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rebel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "recycle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "reddit",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "reddit_alien",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "reddit_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "refresh",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "registered",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "remove",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "renren",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "reorder",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "repeat",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "reply",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "reply_all",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "retweet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rmb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "road",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rocket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rotate_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rotate_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rouble",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rss",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rss_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rub",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ruble",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "rupee",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "safari",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "save",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "scissors",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "scribd",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "search",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "search_minus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "search_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sellsy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "send",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "send_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "server",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "share",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "share_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "share_alt_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "share_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "share_square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "shekel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sheqel",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "shield",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ship",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "shirtsinbulk",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "shopping_bag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "shopping_basket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "shopping_cart",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sign_in",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sign_out",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "signal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "simplybuilt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sitemap",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "skyatlas",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "skype",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "slack",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sliders",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "slideshare",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "smile_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "soccer_ball_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_alpha_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_alpha_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_amount_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_amount_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_numeric_asc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_numeric_desc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sort_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "soundcloud",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "space_shuttle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "spinner",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "spoon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "spotify",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "square_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stack_exchange",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stack_overflow",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "star",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "star_half",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "star_half_empty",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "star_half_full",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "star_half_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "star_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "steam",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "steam_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "step_backward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "step_forward",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stethoscope",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sticky_note",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sticky_note_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stop",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stop_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stop_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "street_view",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "strikethrough",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stumbleupon",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "stumbleupon_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "subscript",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "subway",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "suitcase",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "sun_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "superscript",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "support",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "table",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tablet",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tachometer",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tag",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tags",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tasks",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "taxi",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "television",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tencent_weibo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "terminal",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "text_height",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "text_width",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "th",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "th_large",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "th_list",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "thumb_tack",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "thumbs_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "thumbs_o_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "thumbs_o_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "thumbs_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "ticket",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "times",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "times_circle",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "times_circle_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tint",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "toggle_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "toggle_left",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "toggle_off",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "toggle_on",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "toggle_right",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "toggle_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "trademark",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "train",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "transgender",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "transgender_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "trash",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "trash_o",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tree",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "trello",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tripadvisor",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "trophy",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "truck",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "try",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tty",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tumblr",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tumblr_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "turkish_lira",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "tv",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "twitch",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "twitter",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "twitter_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "umbrella",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "underline",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "undo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "university",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "unlink",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "unlock",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "unlock_alt",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "unsorted",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "upload",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "usb",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "usd",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "user",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "user_md",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "user_plus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "user_secret",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "user_times",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "users",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "venus",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "venus_double",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "venus_mars",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "viacoin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "video_camera",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "vimeo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "vimeo_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "vine",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "vk",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "volume_down",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "volume_off",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "volume_up",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "warning",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "wechat",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "weibo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "weixin",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "whatsapp",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "wheelchair",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "wifi",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "wikipedia_w",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "windows",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "won",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "wordpress",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "wrench",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "xing",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "xing_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "y_combinator",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "y_combinator_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "yahoo",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "yc",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "yc_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "yelp",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "yen",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "youtube",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "youtube_play",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          },
          {
            "name": "youtube_square",
            "comment": "",
            "type": "Color.Color -> Int -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "kennib/elm-swipe",
    "version": "3.0.0",
    "docs": [
      {
        "name": "Swipe",
        "comment": " The Swipe package allows you to access swipe gestures from the browser\n\n# Swipes\n\n@docs Swipe, Direction\n\n@docs swipes\n\n# Swipe States\n\n@docs SwipeState, SwipeStart, Swipe\n\n@docs swipeStates\n",
        "aliases": [
          {
            "name": "Swipe",
            "comment": " Every `Swipe` has start and end `xy` coordinates. It also has an identifier `id` to distinguish one touch from another.\n\nA swipe also has a `Direction` which indicates the direction the user made contact, moved, and then stopped making contact.\n\nSwipes also have a start time (`t0`) and an end time (`t1`).\n",
            "args": [],
            "type": "{ x0 : Float , y0 : Float , x1 : Float , y1 : Float , id : Int , direction : Swipe.Direction , t0 : Time.Time }"
          },
          {
            "name": "SwipeStart",
            "comment": " A `SwipeStart` is the initial touch for a swipe when the direction and end-time of the swipe is unknown. ",
            "args": [],
            "type": "{ x : Float, y : Float, id : Int, t0 : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": " A swipe can go up, down, left or right. ",
            "args": [],
            "cases": [
              [
                "Up",
                []
              ],
              [
                "Down",
                []
              ],
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ]
            ]
          },
          {
            "name": "SwipeState",
            "comment": " Swiping can be divided into threo states.\nThe initial touch of a swipe, currently swiping and end of the swipe. ",
            "args": [],
            "cases": [
              [
                "Start",
                [
                  "Swipe.SwipeStart"
                ]
              ],
              [
                "Swiping",
                [
                  "Swipe.Swipe"
                ]
              ],
              [
                "End",
                [
                  "Swipe.Swipe"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "swipeStates",
            "comment": " A list of the current state of swipes. ",
            "type": "Signal.Signal (List Swipe.SwipeState)"
          },
          {
            "name": "swipes",
            "comment": " A list of completed swipes. ",
            "type": "Signal.Signal (List Swipe.Swipe)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-dialog",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Dialog",
        "comment": " Elm Modal Dialogs.\n\n@docs view, Config\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration for the dialog you display. The `header`, `body`\nand `footer` are all `Maybe Html` blocks. Those `Html` blocks can\nbe as simple or as complex as any other view function.\n\nUse only the ones you want and set the others to `Nothing`.\n\nThe `closeMessage` is an optional `Signal.Message` we will send when the user\nclicks the 'X' in the top right. If you don't want that X displayed, use `Nothing`.\n",
            "args": [],
            "type": "{ closeMessage : Maybe.Maybe Signal.Message , header : Maybe.Maybe Html.Html , body : Maybe.Maybe Html.Html , footer : Maybe.Maybe Html.Html }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "view",
            "comment": " Renders a modal dialog whenever you supply a `Config`.\n\nTo use this, include this view in your *top-level* view function,\nright at the top of the DOM tree, like so:\n\n    type Action\n      = ...\n      | ...\n      | AcknowledgeDialog\n\n\n    view : Address Action -> Model -> Html\n    view address model =\n      div\n        []\n        [ ...\n        , ...your regular view code....\n        , ...\n        , Dialog.view\n            (if model.shouldShowDialog then\n              Just { closeMessage = Just (Signal.message address AcknowledgeDialog)\n                   , header = Just (text \"Alert!\"\n                   , body = Just (p [] [text \"Let me tell you something important...\"])\n                   , footer = Nothing\n                   }\n             else\n              Nothing\n            )\n        ]\n\n\nIt's then up to you to replace `model.shouldShowDialog` with whatever\nlogic should cause the dialog to be displayed, and to handle an\n`AcknowledgeDialog` action with whatever logic should occur when the user\ncloses the dialog.\n\nSee the `examples/` directory for examples of how this works for apps\nlarge and small.\n\n",
            "type": "Maybe.Maybe Dialog.Config -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "krisajenkins/elm-exts",
    "version": "19.3.0",
    "docs": [
      {
        "name": "Exts.Html",
        "comment": " Extensions to the `Html` library.\n\n@docs matchText\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "matchText",
            "comment": " Highlight regex matches in a given piece of text. This is most easily explained with an example:\n\n    import Regex exposing (regex)\n    import Html.Attributes exposing (class)\n\n    matchText\n      [class \"match\"]\n      (regex \"the\")\n      \"the quick brown fox jumped over the lazy dog\"\n\n    =>\n\n    [span [class \"match\"] [text \"the\"]\n    ,text \" quick brown fox jumped over \"\n    ,span [class \"match\"] [text \"the\"]\n    ,text \" lazy dog\"]\n\n    Now you can add a CSS rule like `.match {background-color: yellow;}` to highlight matches\n    for the user.\n\n    (Note that you can supply any attributes you like for the matched sections, or an empty list.)\n\n",
            "type": "List Html.Attribute -> Regex.Regex -> String -> List Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.RemoteData",
        "comment": " A datatype representing fetched data.\n\n@docs RemoteData, map, mapFailure, mapBoth, withDefault, fromResult, asEffect, mappend, isSuccess\n",
        "aliases": [],
        "types": [
          {
            "name": "RemoteData",
            "comment": " Frequently when you're fetching data from an API, you want to represent four different states:\n  * `NotAsked` - We haven't asked for the data yet.\n  * `Loading` - We've asked, but haven't got an answer yet.\n  * `Failure` - We asked, but something went wrong. Here's the error.\n  * `Success` - Everything worked, and here's the data.\n",
            "args": [
              "e",
              "a"
            ],
            "cases": [
              [
                "NotAsked",
                []
              ],
              [
                "Loading",
                []
              ],
              [
                "Failure",
                [
                  "e"
                ]
              ],
              [
                "Success",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "asEffect",
            "comment": " Convert a web `Task`, probably produced from elm-http, to a RemoteData Effect.\n",
            "type": "Task.Task e a -> Effects.Effects (Exts.RemoteData.RemoteData e a)"
          },
          {
            "name": "fromResult",
            "comment": " Convert a `Result Error`, probably produced from elm-http, to a RemoteData value.\n",
            "type": "Result.Result e a -> Exts.RemoteData.RemoteData e a"
          },
          {
            "name": "isSuccess",
            "comment": " State-checking predicate. Returns true if we've successfully loaded some data.\n",
            "type": "Exts.RemoteData.RemoteData e a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function into the `Success` value.\n",
            "type": "(a -> b) -> Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData e b"
          },
          {
            "name": "mapBoth",
            "comment": " Map function into both the `Success` and `Failure` value.\n",
            "type": "(a -> b) -> (e -> f) -> Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData f b"
          },
          {
            "name": "mapFailure",
            "comment": " Map a function into the `Failure` value.\n",
            "type": "(e -> f) -> Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData f a"
          },
          {
            "name": "mappend",
            "comment": " Monoidal append - join two `RemoteData` values together as though\nthey were one. If both values are Failure, the left one wins.\n",
            "type": "Exts.RemoteData.RemoteData e a -> Exts.RemoteData.RemoteData e b -> Exts.RemoteData.RemoteData e ( a, b )"
          },
          {
            "name": "withDefault",
            "comment": " Return the `Success` value, or the default.\n",
            "type": "a -> Exts.RemoteData.RemoteData e a -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Validation",
        "comment": " Simple tools for validation. See also [Richard Feldman's elm-validate](http://package.elm-lang.org/packages/rtfeldman/elm-validate/latest)\n\n@docs apply, (|:), required, notBlank, emailRegex\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "apply",
            "comment": " A validator is a function that takes a possibly-invalid form, and\neither returns an error message, or a form that is definitely valid. For example:\n\n    type alias Form =\n      { email : Maybe String\n      , age : Maybe Int\n      }\n\n    type alias ValidForm =\n      { email : String\n      , age : Int\n      }\n\n    validateForm : Form -> Result String ValidForm\n    validateForm form =\n      Ok ValidForm\n        |: (notBlank \"Email is required and may not be blank.\" form.email)\n        |: (required \"Age is required\" form.age)\n\nAn error message is typically a `String`, but may be any type you choose.\n\n(Hat tip to CircuitHub, who inspired the syntax and guided the code with their [elm-json-extra](http://package.elm-lang.org/packages/circuithub/elm-json-extra/latest) library.)\n",
            "type": "Result.Result e (a -> b) -> Result.Result e a -> Result.Result e b"
          },
          {
            "name": "emailRegex",
            "comment": " A basic email regex. This is incredibly simplistic, but is\nincluded for convenience.\n\nRemember that the only real way to validate an email address is to\nsend something to it and get a reply.\n",
            "type": "Regex.Regex"
          },
          {
            "name": "notBlank",
            "comment": " A field that might be `Nothing`, but is only valid if it is a non-empty `String`.\n",
            "type": "e -> Maybe.Maybe String -> Result.Result e String"
          },
          {
            "name": "required",
            "comment": " A field that might be `Nothing`, but is only valid if it is `Just a`.\n",
            "type": "e -> Maybe.Maybe a -> Result.Result e a"
          },
          {
            "name": "|:",
            "comment": " Convenient synonym for `apply`.\n",
            "type": "Result.Result e (a -> b) -> Result.Result e a -> Result.Result e b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Tuple",
        "comment": " Extensions for tuples.\n\n@docs indexedPair, first, second, both, pair, fork\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "both",
            "comment": " Update both components of a pair with a single function.\n",
            "type": "(a -> b) -> ( a, a ) -> ( b, b )"
          },
          {
            "name": "first",
            "comment": " Update the first component of a pair.\n",
            "type": "(a -> a') -> ( a, b ) -> ( a', b )"
          },
          {
            "name": "fork",
            "comment": " Generate a pair from a single value and a left & right function.\n",
            "type": "(a -> b) -> (a -> c) -> a -> ( b, c )"
          },
          {
            "name": "indexedPair",
            "comment": " Turn a items into a key-value pair.\n\n  See also `Exts.Dict.indexBy` and `Exts.Dict.groupBy`.\n",
            "type": "(a -> b) -> a -> ( b, a )"
          },
          {
            "name": "pair",
            "comment": " Update both components of a pair with two functions.\n",
            "type": "(a -> a') -> (b -> b') -> ( a, b ) -> ( a', b' )"
          },
          {
            "name": "second",
            "comment": " Update the second component of a pair.\n",
            "type": "(b -> b') -> ( a, b ) -> ( a, b' )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Task",
        "comment": " Extensions to the core `Delay` library.\n\n@docs delay\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "delay",
            "comment": " Delay running the `Task` for a given `Time`.\n\nThis is just the example given in `Task.sleep` wrapped up, because it's o useful.\n",
            "type": "Time.Time -> Task.Task e a -> Task.Task e a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.String",
        "comment": " Extensions to the core `String` library.\n\n@docs removePrefix\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "removePrefix",
            "comment": " Strip a leading string from a `String`.\n",
            "type": "String -> String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.State",
        "comment": " Extensions for managing State.\n\n@docs subUpdate\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "subUpdate",
            "comment": " Quite often in Elm we want to say:\n\n  - This `action` wraps a sub-module's `subaction`.\n  - Take that `subaction`, apply the sub-module's update function to get `(submodel,subeffects)`\n  - Merge the `submodel` our `model`.\n  - Merge the `subeffects` into our `effects`, using a wrapper.\n\nThat plumbing's pretty repetitive, and we can abstract it out if we\ncreate a Focus to package up the getting & setting.\n\nFor example, if you want to pass actions down the chain to a `DatePicker`:\n\n\n    -- Create a Focus. This may well be useful in other parts of your code.\n    datePickerFocus : Focus Model DatePicker.Model\n    datePickerFocus =\n      Focus.create\n        .datePicker\n        (\\f model -> { model | datePicker = f model.datePicker })\n\n    -- Handle the sub-update in one sweep.\n    update action model =\n      case action of\n        ...\n        DatePickerAction subaction ->\n          subUpdate\n            DatePicker.update\n            datePickerFocus\n            DatePickerAction\n            subaction\n            model\n        ...\n",
            "type": "(subaction -> submodel -> ( submodel, Effects.Effects subaction )) -> Focus.Focus model submodel -> (subaction -> action) -> subaction -> model -> ( model, Effects.Effects action )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.StartApp",
        "comment": " Extensions to StartApp.\n\n@docs updateSeparately\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "updateSeparately",
            "comment": " StartApp apps supply an update function of:\n\n    update : Action -> Model -> ( Model, Effects a)\n\nAs apps grow larger, and more nested, this complection of `Model` and\n`Effects` results becomes a real pain to manage. The wiring for\ncalling a sub-component's `update` function, upacking the result pair,\nand re-packing into your own result pair, is very tedious.\n\nThings become much cleaner if we split the effects out. First, we retype `update` as:\n\n    update : Action -> Model -> Model\n    update action model = ...\n\n...then we supply a separate `effects` function of:\n\n    effects : Action -> ( Model, Model ) -> Effects Action\n    effects action (oldModel, newModel) = ...\n\n(Often your `effects` function will just use `newModel`, but you may\nneed access to the model before `update` was called.)\n\nThis separation of concerns cleans up each function, reduces wiring\nand makes testing a bit easier too.\n\nTo use it, split your functions as above, then in your `StartApp.start` call use:\n\n    import Exts.StartApp exposing (updateSeparately)\n    app : App Model\n    app =\n      StartApp.start\n        { ...\n        , update = updateSeparately update effects\n        , ...\n        }\n",
            "type": "(a -> m -> m) -> (a -> ( m, m ) -> Effects.Effects a) -> a -> m -> ( m, Effects.Effects a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Set",
        "comment": " Extensions to the core `Set` library.\n\n@docs select, uniqueItems\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "select",
            "comment": " Pull any items from a list where (f x) is in the given set.\n",
            "type": "(a -> comparable) -> Set.Set comparable -> List a -> List a"
          },
          {
            "name": "uniqueItems",
            "comment": " Dive into a `List` to get a set of values.\n\n  For example, pulling a `Set` of countries from a `List` of users.\n",
            "type": "(a -> Maybe.Maybe comparable) -> List a -> Set.Set comparable"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Result",
        "comment": " Extensions to the core `Result` library.\n\n@docs mapBoth, isOk, isErr, fromOk, fromErr, mappend\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fromErr",
            "comment": " ",
            "type": "Result.Result e a -> Maybe.Maybe e"
          },
          {
            "name": "fromOk",
            "comment": " Convert a `Result` to a `Maybe`.\n",
            "type": "Result.Result e a -> Maybe.Maybe a"
          },
          {
            "name": "isErr",
            "comment": " ",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "isOk",
            "comment": " Boolean checks for success/failure.\n",
            "type": "Result.Result e a -> Bool"
          },
          {
            "name": "mapBoth",
            "comment": " Apply functions to both sides of a `Result`, transforming the error and ok types.\n",
            "type": "(e -> f) -> (a -> b) -> Result.Result e a -> Result.Result f b"
          },
          {
            "name": "mappend",
            "comment": " Monoidal append - join two Results together as though they were one.\n",
            "type": "Result.Result e a -> Result.Result e b -> Result.Result e ( a, b )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Maybe",
        "comment": " Extensions to the core `Maybe` library.\n\n@docs isJust, isNothing, maybe, mappend, catMaybes, join\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "catMaybes",
            "comment": " Extract all the `Just` values from a List of Maybes.\n",
            "type": "List (Maybe.Maybe a) -> List a"
          },
          {
            "name": "isJust",
            "comment": " Boolean checks.\n",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "isNothing",
            "comment": " ",
            "type": "Maybe.Maybe a -> Bool"
          },
          {
            "name": "join",
            "comment": " Join together two `Maybe` values using the supplied function. If\neither value is `Nothing`, the result is `Nothing`.\n",
            "type": "(a -> b -> c) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c"
          },
          {
            "name": "mappend",
            "comment": " Join two `Maybe`s together as though they were one.\n",
            "type": "Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe ( a, b )"
          },
          {
            "name": "maybe",
            "comment": " Apply a function to a value, returning the default if the value is `Nothing`.\n",
            "type": "b -> (a -> b) -> Maybe.Maybe a -> b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.List",
        "comment": " Extensions to the core `List` library.\n\n@docs chunk, mergeBy, singleton, maybeSingleton, firstMatch, rest\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chunk",
            "comment": " Split a list into chunks of length `n`.\n\n  Be aware that the last sub-list may be smaller than `n`-items long.\n\n  For example `chunk 3 [1..10] => [[1,2,3], [4,5,6], [7,8,9], [10]]`\n",
            "type": "Int -> List a -> List (List a)"
          },
          {
            "name": "firstMatch",
            "comment": " Find the first element in the `List` that matches the given predicate.\n",
            "type": "(a -> Bool) -> List a -> Maybe.Maybe a"
          },
          {
            "name": "maybeSingleton",
            "comment": " Wrap a maybe item into a `List`. If the item is `Nothing`, the `List` is empty.\n",
            "type": "Maybe.Maybe a -> List a"
          },
          {
            "name": "mergeBy",
            "comment": " Merge two lists. The first argument is a function which returns\nthe unique ID of each element. Where an element appears more than\nonce, the last won wins.\n",
            "type": "(a -> comparable) -> List a -> List a -> List a"
          },
          {
            "name": "rest",
            "comment": " Like List.tail, but if the list is empty it returns an empty list rather than `Nothing`.\n",
            "type": "List a -> List a"
          },
          {
            "name": "singleton",
            "comment": " Wrap a single item into a `List`.\n",
            "type": "a -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.LatLng",
        "comment": " Calculations between points on the earth.\n\n@docs distanceBetween, bearingTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bearingTo",
            "comment": " Calculate the heading you'd need to travel on to get from point a to point b.\n",
            "type": "{ a | latitude : Float, longitude : Float } -> { b | latitude : Float, longitude : Float } -> Float"
          },
          {
            "name": "distanceBetween",
            "comment": " Calculate the distance in kilometers between two points.\n\n  Note that this assumes the earth is spherical, which is not true, but may be true enough for your purposes.\n",
            "type": "{ a | latitude : Float, longitude : Float } -> { b | latitude : Float, longitude : Float } -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Json.Encode",
        "comment": " Extensions to the core `Json.Encode` library.\n\n@docs set, dict, tuple2\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dict",
            "comment": " Encode a `Dict` to a JSON array .\n",
            "type": "(comparable -> Json.Encode.Value) -> (v -> Json.Encode.Value) -> Dict.Dict comparable v -> Json.Encode.Value"
          },
          {
            "name": "set",
            "comment": " Encode a `Set` to a JSON array .\n",
            "type": "(comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value"
          },
          {
            "name": "tuple2",
            "comment": " Encode a pair to a JSON array .\n",
            "type": "(a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> ( a, b ) -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Http",
        "comment": " Extensions to the `Http` library.\n\n@docs handleError, put, postContent, postForm, postJson\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "handleError",
            "comment": " Lift a raw Http response into a `Task Error Response`, using the same rules `Http` uses internally.\n",
            "type": "Task.Task Http.RawError Http.Response -> Task.Task Http.Error Http.Response"
          },
          {
            "name": "postContent",
            "comment": " Send a `POST` request with the given content-type.\n",
            "type": "String -> Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "postForm",
            "comment": " Send a `POST` request with appropriate headers form-encoding.\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "postJson",
            "comment": " Send a `POST` request with appropriate headers form-encoding.\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          },
          {
            "name": "put",
            "comment": " Send a simple `PUT` request.\n",
            "type": "Json.Decode.Decoder value -> String -> Http.Body -> Task.Task Http.Error value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Html.Table",
        "comment": " Helpers for simple data tables. Define how a list of items can be\nrendered as a table. The definition is a `List` of `(column-title,\ncolumn-value-accessor)` pairs.\n\n  I find this approach works well for simple tables, but breaks down\n  as soon as you need much customisation. Use it to get you started\n  quickly, but be ready to rewrite when this 80% case no longer suits.\n\n@docs CellDef, TableDef, simpleTable, simpleTableRow, titleGroup, valueGroup\n",
        "aliases": [
          {
            "name": "CellDef",
            "comment": " A table definition looks something like:\n\n    [(text \"Name\", .name >> text)\n    ,(text \"Name\", .age >> toString >> text)]\n\n",
            "args": [
              "a"
            ],
            "type": "( Html.Html, a -> Html.Html )"
          },
          {
            "name": "TableDef",
            "comment": " ",
            "args": [
              "a"
            ],
            "type": "List (Exts.Html.Table.CellDef a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "simpleTable",
            "comment": " Given a table definition, render a list of elements as HTML.\n",
            "type": "Exts.Html.Table.TableDef a -> List a -> Html.Html"
          },
          {
            "name": "simpleTableRow",
            "comment": " Given a table definition, render an element to a <tr> tag. This is\nlower-level. Usually you will want `simpleTable` instead.\n",
            "type": "Exts.Html.Table.TableDef a -> a -> Html.Html"
          },
          {
            "name": "titleGroup",
            "comment": " titleGroup and valueGroup are used to create columns that stack multiple pairs. For example:\n\n    [(titleGroup [\"Latitude\", \"Longitude\"]\n     ,valueGroup [.location >> .lat >> toString >> text\n                 ,.location >> .lng >> toString >> text])\n\n",
            "type": "List String -> Html.Html"
          },
          {
            "name": "valueGroup",
            "comment": " ",
            "type": "List (a -> Html.Html) -> a -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Html.Events",
        "comment": " Extensions to the `Html.Events` library.\n\n@docs onEnter, onCheckbox, onSelect, onInput\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onCheckbox",
            "comment": " Send a message whenever a checkbox is clicked. You supply a\n`function` which takes a `Bool` and returns an appropriate message.\n",
            "type": "Signal.Address a -> (Bool -> a) -> Html.Attribute"
          },
          {
            "name": "onEnter",
            "comment": " Send a message when the user hits enter.\n",
            "type": "Signal.Message -> Html.Attribute"
          },
          {
            "name": "onInput",
            "comment": " Similar to onChange, but it fires as soon as the value has changed,\nwhereas onChange waits until the input loses focus.\n",
            "type": "Signal.Address a -> (String -> a) -> Html.Attribute"
          },
          {
            "name": "onSelect",
            "comment": " An event handler for `<select>` tags. Set the child `<option>` tag's value to \"\" to get a `Nothing`.\n",
            "type": "Signal.Address a -> (Maybe.Maybe String -> a) -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Html.Bootstrap.Glyphicons",
        "comment": " Type-safe glyphicons for Twitter Bootstrap 3 users.\n\n@docs glyphicon, Glyphicon\n",
        "aliases": [],
        "types": [
          {
            "name": "Glyphicon",
            "comment": " A type-safe list of all available glyphicons in Bootstrap. To fit\nElm's syntax we convert from kebab-case to CamelCase, so\n`\"glyphicon-star-empty\"` becomes the type constructor `StarEmpty`.\n",
            "args": [],
            "cases": [
              [
                "Asterisk",
                []
              ],
              [
                "Plus",
                []
              ],
              [
                "Euro",
                []
              ],
              [
                "Eur",
                []
              ],
              [
                "Minus",
                []
              ],
              [
                "Cloud",
                []
              ],
              [
                "Envelope",
                []
              ],
              [
                "Pencil",
                []
              ],
              [
                "Glass",
                []
              ],
              [
                "Music",
                []
              ],
              [
                "Search",
                []
              ],
              [
                "Heart",
                []
              ],
              [
                "Star",
                []
              ],
              [
                "StarEmpty",
                []
              ],
              [
                "User",
                []
              ],
              [
                "Film",
                []
              ],
              [
                "ThLarge",
                []
              ],
              [
                "Th",
                []
              ],
              [
                "ThList",
                []
              ],
              [
                "Ok",
                []
              ],
              [
                "Remove",
                []
              ],
              [
                "ZoomIn",
                []
              ],
              [
                "ZoomOut",
                []
              ],
              [
                "Off",
                []
              ],
              [
                "Signal",
                []
              ],
              [
                "Cog",
                []
              ],
              [
                "Trash",
                []
              ],
              [
                "Home",
                []
              ],
              [
                "File",
                []
              ],
              [
                "Time",
                []
              ],
              [
                "Road",
                []
              ],
              [
                "DownloadAlt",
                []
              ],
              [
                "Download",
                []
              ],
              [
                "Upload",
                []
              ],
              [
                "Inbox",
                []
              ],
              [
                "PlayCircle",
                []
              ],
              [
                "Repeat",
                []
              ],
              [
                "Refresh",
                []
              ],
              [
                "ListAlt",
                []
              ],
              [
                "Lock",
                []
              ],
              [
                "Flag",
                []
              ],
              [
                "Headphones",
                []
              ],
              [
                "VolumeOff",
                []
              ],
              [
                "VolumeDown",
                []
              ],
              [
                "VolumeUp",
                []
              ],
              [
                "Qrcode",
                []
              ],
              [
                "Barcode",
                []
              ],
              [
                "Tag",
                []
              ],
              [
                "Tags",
                []
              ],
              [
                "Book",
                []
              ],
              [
                "Bookmark",
                []
              ],
              [
                "Print",
                []
              ],
              [
                "Camera",
                []
              ],
              [
                "Font",
                []
              ],
              [
                "Bold",
                []
              ],
              [
                "Italic",
                []
              ],
              [
                "TextHeight",
                []
              ],
              [
                "TextWidth",
                []
              ],
              [
                "AlignLeft",
                []
              ],
              [
                "AlignCenter",
                []
              ],
              [
                "AlignRight",
                []
              ],
              [
                "AlignJustify",
                []
              ],
              [
                "List",
                []
              ],
              [
                "IndentLeft",
                []
              ],
              [
                "IndentRight",
                []
              ],
              [
                "FacetimeVideo",
                []
              ],
              [
                "Picture",
                []
              ],
              [
                "MapMarker",
                []
              ],
              [
                "Adjust",
                []
              ],
              [
                "Tint",
                []
              ],
              [
                "Edit",
                []
              ],
              [
                "Share",
                []
              ],
              [
                "Check",
                []
              ],
              [
                "Move",
                []
              ],
              [
                "StepBackward",
                []
              ],
              [
                "FastBackward",
                []
              ],
              [
                "Backward",
                []
              ],
              [
                "Play",
                []
              ],
              [
                "Pause",
                []
              ],
              [
                "Stop",
                []
              ],
              [
                "Forward",
                []
              ],
              [
                "FastForward",
                []
              ],
              [
                "StepForward",
                []
              ],
              [
                "Eject",
                []
              ],
              [
                "ChevronLeft",
                []
              ],
              [
                "ChevronRight",
                []
              ],
              [
                "PlusSign",
                []
              ],
              [
                "MinusSign",
                []
              ],
              [
                "RemoveSign",
                []
              ],
              [
                "OkSign",
                []
              ],
              [
                "QuestionSign",
                []
              ],
              [
                "InfoSign",
                []
              ],
              [
                "Screenshot",
                []
              ],
              [
                "RemoveCircle",
                []
              ],
              [
                "OkCircle",
                []
              ],
              [
                "BanCircle",
                []
              ],
              [
                "ArrowLeft",
                []
              ],
              [
                "ArrowRight",
                []
              ],
              [
                "ArrowUp",
                []
              ],
              [
                "ArrowDown",
                []
              ],
              [
                "ShareAlt",
                []
              ],
              [
                "ResizeFull",
                []
              ],
              [
                "ResizeSmall",
                []
              ],
              [
                "ExclamationSign",
                []
              ],
              [
                "Gift",
                []
              ],
              [
                "Leaf",
                []
              ],
              [
                "Fire",
                []
              ],
              [
                "EyeOpen",
                []
              ],
              [
                "EyeClose",
                []
              ],
              [
                "WarningSign",
                []
              ],
              [
                "Plane",
                []
              ],
              [
                "Calendar",
                []
              ],
              [
                "Random",
                []
              ],
              [
                "Comment",
                []
              ],
              [
                "Magnet",
                []
              ],
              [
                "ChevronUp",
                []
              ],
              [
                "ChevronDown",
                []
              ],
              [
                "Retweet",
                []
              ],
              [
                "ShoppingCart",
                []
              ],
              [
                "FolderClose",
                []
              ],
              [
                "FolderOpen",
                []
              ],
              [
                "ResizeVertical",
                []
              ],
              [
                "ResizeHorizontal",
                []
              ],
              [
                "Hdd",
                []
              ],
              [
                "Bullhorn",
                []
              ],
              [
                "Bell",
                []
              ],
              [
                "Certificate",
                []
              ],
              [
                "ThumbsUp",
                []
              ],
              [
                "ThumbsDown",
                []
              ],
              [
                "HandRight",
                []
              ],
              [
                "HandLeft",
                []
              ],
              [
                "HandUp",
                []
              ],
              [
                "HandDown",
                []
              ],
              [
                "CircleArrowRight",
                []
              ],
              [
                "CircleArrowLeft",
                []
              ],
              [
                "CircleArrowUp",
                []
              ],
              [
                "CircleArrowDown",
                []
              ],
              [
                "Globe",
                []
              ],
              [
                "Wrench",
                []
              ],
              [
                "Tasks",
                []
              ],
              [
                "Filter",
                []
              ],
              [
                "Briefcase",
                []
              ],
              [
                "Fullscreen",
                []
              ],
              [
                "Dashboard",
                []
              ],
              [
                "Paperclip",
                []
              ],
              [
                "HeartEmpty",
                []
              ],
              [
                "Link",
                []
              ],
              [
                "Phone",
                []
              ],
              [
                "Pushpin",
                []
              ],
              [
                "Usd",
                []
              ],
              [
                "Gbp",
                []
              ],
              [
                "Sort",
                []
              ],
              [
                "SortByAlphabet",
                []
              ],
              [
                "SortByAlphabetAlt",
                []
              ],
              [
                "SortByOrder",
                []
              ],
              [
                "SortByOrderAlt",
                []
              ],
              [
                "SortByAttributes",
                []
              ],
              [
                "SortByAttributesAlt",
                []
              ],
              [
                "Unchecked",
                []
              ],
              [
                "Expand",
                []
              ],
              [
                "CollapseDown",
                []
              ],
              [
                "CollapseUp",
                []
              ],
              [
                "LogIn",
                []
              ],
              [
                "Flash",
                []
              ],
              [
                "LogOut",
                []
              ],
              [
                "NewWindow",
                []
              ],
              [
                "Record",
                []
              ],
              [
                "Save",
                []
              ],
              [
                "Open",
                []
              ],
              [
                "Saved",
                []
              ],
              [
                "Import",
                []
              ],
              [
                "Export",
                []
              ],
              [
                "Send",
                []
              ],
              [
                "FloppyDisk",
                []
              ],
              [
                "FloppySaved",
                []
              ],
              [
                "FloppyRemove",
                []
              ],
              [
                "FloppySave",
                []
              ],
              [
                "FloppyOpen",
                []
              ],
              [
                "CreditCard",
                []
              ],
              [
                "Transfer",
                []
              ],
              [
                "Cutlery",
                []
              ],
              [
                "Header",
                []
              ],
              [
                "Compressed",
                []
              ],
              [
                "Earphone",
                []
              ],
              [
                "PhoneAlt",
                []
              ],
              [
                "Tower",
                []
              ],
              [
                "Stats",
                []
              ],
              [
                "SdVideo",
                []
              ],
              [
                "HdVideo",
                []
              ],
              [
                "Subtitles",
                []
              ],
              [
                "SoundStereo",
                []
              ],
              [
                "SoundDolby",
                []
              ],
              [
                "Sound51",
                []
              ],
              [
                "Sound61",
                []
              ],
              [
                "Sound71",
                []
              ],
              [
                "CopyrightMark",
                []
              ],
              [
                "RegistrationMark",
                []
              ],
              [
                "CloudDownload",
                []
              ],
              [
                "CloudUpload",
                []
              ],
              [
                "TreeConifer",
                []
              ],
              [
                "TreeDeciduous",
                []
              ],
              [
                "Cd",
                []
              ],
              [
                "SaveFile",
                []
              ],
              [
                "OpenFile",
                []
              ],
              [
                "LevelUp",
                []
              ],
              [
                "Copy",
                []
              ],
              [
                "Paste",
                []
              ],
              [
                "Alert",
                []
              ],
              [
                "Equalizer",
                []
              ],
              [
                "King",
                []
              ],
              [
                "Queen",
                []
              ],
              [
                "Pawn",
                []
              ],
              [
                "Bishop",
                []
              ],
              [
                "Knight",
                []
              ],
              [
                "BabyFormula",
                []
              ],
              [
                "Tent",
                []
              ],
              [
                "Blackboard",
                []
              ],
              [
                "Bed",
                []
              ],
              [
                "Apple",
                []
              ],
              [
                "Erase",
                []
              ],
              [
                "Hourglass",
                []
              ],
              [
                "Lamp",
                []
              ],
              [
                "Duplicate",
                []
              ],
              [
                "PiggyBank",
                []
              ],
              [
                "Scissors",
                []
              ],
              [
                "Bitcoin",
                []
              ],
              [
                "Btc",
                []
              ],
              [
                "Xbt",
                []
              ],
              [
                "Yen",
                []
              ],
              [
                "Jpy",
                []
              ],
              [
                "Ruble",
                []
              ],
              [
                "Rub",
                []
              ],
              [
                "Scale",
                []
              ],
              [
                "IceLolly",
                []
              ],
              [
                "IceLollyTasted",
                []
              ],
              [
                "Education",
                []
              ],
              [
                "OptionHorizontal",
                []
              ],
              [
                "OptionVertical",
                []
              ],
              [
                "MenuHamburger",
                []
              ],
              [
                "ModalWindow",
                []
              ],
              [
                "Oil",
                []
              ],
              [
                "Grain",
                []
              ],
              [
                "Sunglasses",
                []
              ],
              [
                "TextSize",
                []
              ],
              [
                "TextColor",
                []
              ],
              [
                "TextBackground",
                []
              ],
              [
                "ObjectAlignTop",
                []
              ],
              [
                "ObjectAlignBottom",
                []
              ],
              [
                "ObjectAlignHorizontal",
                []
              ],
              [
                "ObjectAlignLeft",
                []
              ],
              [
                "ObjectAlignVertical",
                []
              ],
              [
                "ObjectAlignRight",
                []
              ],
              [
                "TriangleRight",
                []
              ],
              [
                "TriangleLeft",
                []
              ],
              [
                "TriangleBottom",
                []
              ],
              [
                "TriangleTop",
                []
              ],
              [
                "Console",
                []
              ],
              [
                "Superscript",
                []
              ],
              [
                "Subscript",
                []
              ],
              [
                "MenuLeft",
                []
              ],
              [
                "MenuRight",
                []
              ],
              [
                "MenuDown",
                []
              ],
              [
                "MenuUp",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "glyphicon",
            "comment": " Type-checked Glyphicons.\n",
            "type": "Exts.Html.Bootstrap.Glyphicons.Glyphicon -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Html.Bootstrap",
        "comment": " Base classes for Twitter Bootstrap 3 users.\n\n@docs container, containerFluid, row, empty, twoColumns, Ratio, video, popover, PopoverDirection\n",
        "aliases": [],
        "types": [
          {
            "name": "PopoverDirection",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "Top",
                []
              ],
              [
                "Right",
                []
              ],
              [
                "Bottom",
                []
              ],
              [
                "Left",
                []
              ]
            ]
          },
          {
            "name": "Ratio",
            "comment": " Aspect ratios for responsive video embedding.\n",
            "args": [],
            "cases": [
              [
                "SixteenByNine",
                []
              ],
              [
                "FourByThree",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "container",
            "comment": " Bootstrap grid container.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "containerFluid",
            "comment": " Bootstrap grid fluid container.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "empty",
            "comment": " The minimum markup - an empty span.\n",
            "type": "Html.Html"
          },
          {
            "name": "popover",
            "comment": " Interface to the bootstrap popover that does not require bootstrap.js.\n",
            "type": "Exts.Html.Bootstrap.PopoverDirection -> Bool -> List ( String, String ) -> Maybe.Maybe String -> List Html.Html -> Html.Html"
          },
          {
            "name": "row",
            "comment": " Bootstrap grid row.\n",
            "type": "List Html.Html -> Html.Html"
          },
          {
            "name": "twoColumns",
            "comment": " Two evenly-sized columns. Must be used within a row.\n",
            "type": "List Html.Html -> List Html.Html -> Html.Html"
          },
          {
            "name": "video",
            "comment": " Embed a responsive video.\n",
            "type": "Exts.Html.Bootstrap.Ratio -> String -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Html.Attributes",
        "comment": " Extensions to the `Html.Attributes` library.\n\n@docs defaultValue, defaultString, defaultInt, defaultFloat, styleList\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "defaultFloat",
            "comment": " Convenience version of `defaultValue`, for `Float`s.\n",
            "type": "Float -> Html.Attribute"
          },
          {
            "name": "defaultInt",
            "comment": " Convenience version of `defaultValue`, for `Int`s.\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "defaultString",
            "comment": " Convenience version of `defaultValue`, for `String`s.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "defaultValue",
            "comment": " Set a default value for an input field.\n",
            "type": "Json.Encode.Value -> Html.Attribute"
          },
          {
            "name": "styleList",
            "comment": " This function makes it easier to specify a conditional set of styles.\n   This the style-equivalent of elm-html's classList.\n",
            "type": "List ( String, String, Bool ) -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Float",
        "comment": " Extensions to the core `Float` library.\n\n@docs roundTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "roundTo",
            "comment": " Round a `Float` to a given number of decimal places.\n",
            "type": "Int -> Float -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Effects",
        "comment": " Extensions for Effects.\n\n@docs fromTask, fromValue,addEffects\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addEffects",
            "comment": " Convenience function that's like `Effects.batch`, but just for two elements.\n\n",
            "type": "Effects.Effects a -> Effects.Effects a -> Effects.Effects a"
          },
          {
            "name": "fromTask",
            "comment": " Convert a `Task` to an `Effect` which conveys success or failure.\n\n",
            "type": "Task.Task e a -> Effects.Effects (Result.Result e a)"
          },
          {
            "name": "fromValue",
            "comment": " Convert a value to an `Effect`.\n\n",
            "type": "a -> Effects.Effects a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Date",
        "comment": " Extensions to the core `Date` library.\n\n@docs toISOString\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "toISOString",
            "comment": " Format a Date as an ISO-standard string.\n",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Array",
        "comment": " Extensions to the core `Array` library.\n\n@docs update\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "update",
            "comment": " 'Update' the entry at position `n`, by applying `f` to it. If the\nindex is out of range, the array is unaltered.\n",
            "type": "Int -> (a -> a) -> Array.Array a -> Array.Array a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Dict",
        "comment": " Extensions to the core `Dict` library.\n\n@docs indexBy, groupBy, frequency, getWithDefault, foldToList\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "foldToList",
            "comment": " Run a function over the dictionary entries, resulting in a list of the final results.\n",
            "type": "(comparable -> v -> b) -> Dict.Dict comparable v -> List b"
          },
          {
            "name": "frequency",
            "comment": " Create a frequency-map from the given list.\n",
            "type": "List comparable -> Dict.Dict comparable Int"
          },
          {
            "name": "getWithDefault",
            "comment": " Attempt to find a key, if it's not there, return a default value.\n",
            "type": "a -> comparable -> Dict.Dict comparable a -> a"
          },
          {
            "name": "groupBy",
            "comment": " Group a list of items by a key.\n\n  Supply an indexing function (eg. `.id`) and a list of\n  items. `groupBy` returns a dictionary of group-key/list-of-items.\n\n  If the indexing function returns a unique key for every item, consider `indexBy` instead.\n",
            "type": "(v -> comparable) -> List v -> Dict.Dict comparable (List v)"
          },
          {
            "name": "indexBy",
            "comment": " Turn a list of items into an indexed dictionary.\n\n  Supply an indexing function (eg. `.id`) and a list of\n  items. `indexBy` returns a dictionary with each item stored under\n  its index.\n\n  This code assumes each index is unique. If that is not the case, you\n  should use `groupBy` instead.\n",
            "type": "(v -> comparable) -> List v -> Dict.Dict comparable v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Exts.Delta",
        "comment": " A system for tracking players that enter and leave a stage, a-la D3.\n\nImplementation detail: This code is hampered by the lack of Elm's type classes. Note the following:\n1. Performance may degrade badly as the number of elements increases.\n2. It is up to you to ensure (a) implments Eq correctly.\n\n@docs Delta, empty, generation\n",
        "aliases": [
          {
            "name": "Delta",
            "comment": " A data-structure that maintains the difference list of entering, continuing and leaving players.\n",
            "args": [
              "a"
            ],
            "type": "{ entering : List a, continuing : List a, leaving : List a }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "empty",
            "comment": " A default starting state for Deltas.\n",
            "type": "Exts.Delta.Delta a"
          },
          {
            "name": "generation",
            "comment": " Update the delta by inspecting a list of players.\n",
            "type": "List a -> Exts.Delta.Delta a -> Exts.Delta.Delta a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "laszlopandy/elm-console",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Console",
        "comment": "\n\nA library for writing terminal-based scripts in elm.  The IO type\nprovides an interface for constructing \"computations\" that may perform\nIO effects. Something with type `IO a` is a lazy computation that when\nrun will produce an `a`, possibly IO side effects. See Console.Runner for\nhow to run such a computation.\n\n# IO Type\n@docs IO, run\n\n# Stdout\n@docs putChar, putStr, putStrLn\n\n# Stdin\n@docs getChar, getLine, readUntil\n\n# File Operations\n@docs writeFile\n\n# Exit code\n@docs exit\n\n# Plumbing\n@docs map, map2, mapIO, forEach, pure, apply,\n      (<*>), andThen, (>>=), seq, sequenceMany, (>>>), forever\n",
        "aliases": [
          {
            "name": "IO",
            "comment": " An `IO a` is a computation that does some I/O and eventually\n    returns an `a` ",
            "args": [
              "a"
            ],
            "type": "Console.Core.IO a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "<*>",
            "comment": " Convenient operator for apply, similar to ~ in the Signal module ",
            "type": "Console.Core.IO (a -> b) -> Console.Core.IO a -> Console.Core.IO b"
          },
          {
            "name": ">>=",
            "comment": " Operator version of andThen ",
            "type": "Console.Core.IO a -> (a -> Console.Core.IO b) -> Console.Core.IO b"
          },
          {
            "name": ">>>",
            "comment": " Operator version of seq ",
            "type": "Console.Core.IO a -> Console.Core.IO b -> Console.Core.IO b"
          },
          {
            "name": "andThen",
            "comment": " Chain together IO computations ",
            "type": "Console.Core.IO a -> (a -> Console.Core.IO b) -> Console.Core.IO b"
          },
          {
            "name": "apply",
            "comment": " Apply an IO function to an IO value ",
            "type": "Console.Core.IO (a -> b) -> Console.Core.IO a -> Console.Core.IO b"
          },
          {
            "name": "exit",
            "comment": " Exit the program with the given exit code. ",
            "type": "Int -> Console.Core.IO ()"
          },
          {
            "name": "forEach",
            "comment": " Run an IO computation for each element of a list ",
            "type": "List a -> (a -> Console.Core.IO ()) -> Console.Core.IO ()"
          },
          {
            "name": "forever",
            "comment": " Run the same computation over and over again forever. ",
            "type": "Console.Core.IO a -> Console.Core.IO ()"
          },
          {
            "name": "getChar",
            "comment": " Read a character from stdin ",
            "type": "Console.Core.IO Char"
          },
          {
            "name": "getLine",
            "comment": " Read a line from stdin ",
            "type": "Console.Core.IO String"
          },
          {
            "name": "map",
            "comment": " Apply a pure function to an IO value ",
            "type": "(a -> b) -> Console.Core.IO a -> Console.Core.IO b"
          },
          {
            "name": "map2",
            "comment": " Apply a pure function to two IO values. ",
            "type": "(a -> b -> result) -> Console.IO a -> Console.IO b -> Console.IO result"
          },
          {
            "name": "mapIO",
            "comment": " Alternative interface to forEach  ",
            "type": "(a -> Console.Core.IO ()) -> List a -> Console.Core.IO ()"
          },
          {
            "name": "pure",
            "comment": " Use a pure value where an IO computation is expected. ",
            "type": "a -> Console.Core.IO a"
          },
          {
            "name": "putChar",
            "comment": " Print a character to stdout ",
            "type": "Char -> Console.Core.IO ()"
          },
          {
            "name": "putStr",
            "comment": " Print a string to stdout. ",
            "type": "String -> Console.Core.IO ()"
          },
          {
            "name": "putStrLn",
            "comment": " Print a string to stdout, followed by a newline. ",
            "type": "String -> Console.Core.IO ()"
          },
          {
            "name": "readUntil",
            "comment": " Read characters from stdin until one matches the given character. ",
            "type": "Char -> Console.Core.IO String"
          },
          {
            "name": "run",
            "comment": " Run an IO computation as a Task ",
            "type": "Console.Core.IO () -> Signal.Signal (Task.Task x ())"
          },
          {
            "name": "seq",
            "comment": " Run one computation and then another, ignoring the first's output ",
            "type": "Console.Core.IO a -> Console.Core.IO b -> Console.Core.IO b"
          },
          {
            "name": "sequenceMany",
            "comment": " Run several computations in a sequence, combining all results into a list ",
            "type": "List (Console.IO a) -> Console.IO (List a)"
          },
          {
            "name": "writeFile",
            "comment": " Write content to a file ",
            "type": "{ file : String, content : String } -> Console.Core.IO ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "liamcurry/elm-media",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Media.Site",
        "comment": " This package includes representations of various social media sites.\n\n@docs all, image, video\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " All available sites.\n",
            "type": "List Media.Site"
          },
          {
            "name": "image",
            "comment": " Sites that are for image sharing. Includes:\n\n- [Gfycat](//gfycat.com)\n- [Imgur](//imgur.com)\n",
            "type": "List Media.Site"
          },
          {
            "name": "video",
            "comment": " Sites that are for watching videos/streams. Includes:\n\n- [LiveCap](//livecap.tv)\n- [Oddshot](//oddshot.tv)\n- [Twitch](//twitch.tv)\n- [YouTube](//youtube.com)\n",
            "type": "List Media.Site"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Media",
        "comment": " This package is for extracting social media references from text. The\nmost common use-case for this package is to embed social media widgets on\na webpage from user input.\n\nBasic example:\n\n    import Media\n    import Media.Site as Site\n\n    text = \"\"\"https://imgur.com/cjCGCNH\n    https://youtu.be/oYk8CKH7OhE\n    https://www.youtube.com/watch?v=DfLvDFxcAIA\n    \"\"\"\n\n    -- Find all the media references in some text\n    media = Media.find Site.all text\n\n    -- Generate URLs for media objects\n    urls = Media.urls media\n\n# Types\n@docs Kind, Id, Media, SiteId, Site, Url, Urls\n\n# Extracting media\n@docs find, urls\n\n",
        "aliases": [
          {
            "name": "Id",
            "comment": " Unique site-specific identifier for media.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "Media",
            "comment": " A slim reference to media on a site.\n",
            "args": [],
            "type": "{ id : Media.Id, kind : Media.Kind, siteId : Media.SiteId }"
          },
          {
            "name": "Site",
            "comment": " Represents a site.\n",
            "args": [],
            "type": "{ id : Media.SiteId , name : String , matchers : List ( Media.Kind, String ) , url : Media.Media -> Maybe.Maybe Media.Url , imgSmUrl : Maybe.Maybe (Media.Media -> Maybe.Maybe Media.Url) , imgMdUrl : Maybe.Maybe (Media.Media -> Maybe.Maybe Media.Url) , imgLgUrl : Maybe.Maybe (Media.Media -> Maybe.Maybe Media.Url) , iframeUrl : Maybe.Maybe (Media.Media -> Maybe.Maybe Media.Url) }"
          },
          {
            "name": "SiteId",
            "comment": " Unique identifier for a site.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "Url",
            "comment": " A basic representation of a URL.\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "Urls",
            "comment": " Represents all possible URLs for a given media object and site.\n",
            "args": [],
            "type": "{ media : Media.Media , url : Maybe.Maybe Media.Url , imgSmUrl : Maybe.Maybe Media.Url , imgMdUrl : Maybe.Maybe Media.Url , imgLgUrl : Maybe.Maybe Media.Url , iframeUrl : Maybe.Maybe Media.Url }"
          }
        ],
        "types": [
          {
            "name": "Kind",
            "comment": " Represents the general type of media.\n",
            "args": [],
            "cases": [
              [
                "Post",
                []
              ],
              [
                "Reply",
                []
              ],
              [
                "Stream",
                []
              ],
              [
                "Video",
                []
              ],
              [
                "Image",
                []
              ],
              [
                "Album",
                []
              ],
              [
                "Listing",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "find",
            "comment": " Find media links from input text based on a list of available sites.\n",
            "type": "List Media.Site -> String -> List ( Media.Site, Media.Media )"
          },
          {
            "name": "urls",
            "comment": " Generate URLs for given media.\n",
            "type": "List ( Media.Site, Media.Media ) -> List ( Media.Site, Media.Media, Media.Urls )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "lorenzo/elm-string-addons",
    "version": "2.0.0",
    "docs": [
      {
        "name": "String.Addons",
        "comment": " Additional functions for working with Strings\n\n## Modifying\n\n@docs toSentenceCase, toTitleCase\n\n## Replacing\n\n@docs replace, replaceSlice\n\n## Splitting\n\n@docs break, softBreak\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "break",
            "comment": " Breaks a string into a list of strings of maximum the provided size.\n\n    break 10 \"The quick brown fox\" == [\"The quick \", \"brown fox\"]\n    break 2 \"\" == [\"\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "replace",
            "comment": " Replace all occurrences of the search string with the substitution string.\n\n    replace \"Mary\" \"Sue\" \"Hello, Mary\" == \"Hello, Sue\"\n\n",
            "type": "String -> String -> String -> String"
          },
          {
            "name": "replaceSlice",
            "comment": " Replace text within a portion of a string given a substitution\nstring, a start index and an end index.\n\n    replaceSlice \"Sue\" 4 6 \"Hi, Bob\" == \"Hi, Sue\"\n    replaceSlice \"elephants\" 0  6 \"snakes on a plane!\" == \"elephants on a plane!\"\n    replaceSlice \"under\" 7  9 \"snakes on a plane!\" == \"snakes under a plane!\"\n\n",
            "type": "String -> Int -> Int -> String -> String"
          },
          {
            "name": "softBreak",
            "comment": " Breaks a string into a list of strings of maximum the provided size,\nwithout cutting words at the edge.\n\n    softBreak 6 \"The quick brown fox\" == [\"The quick\", \" brown\", \" fox\"]\n\n",
            "type": "Int -> String -> List String"
          },
          {
            "name": "toSentenceCase",
            "comment": " Make a string's first character uppercase\n\n    toSentenceCase \"this is a phrase\" == \"This is a phare\"\n    toSentenceCase \"hello, world\" == \"Hello, world\"\n\n",
            "type": "String -> String"
          },
          {
            "name": "toTitleCase",
            "comment": " Uppercase the first character of each word in a string\n\n    toTitleCase \"this is a phrase\" == \"This Is A Phrase\"\n    toTitleCase \"hello, world\" == \"Hello, World\"\n\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "lukewestby/elm-http-extra",
    "version": "5.2.0",
    "docs": [
      {
        "name": "Http.Extra",
        "comment": " Extra helpers for more easily building Http requests that require greater\nconfiguration than what is provided by `elm-http` out of the box.\n\n\n# Start a request\n@docs RequestBuilder, url, get, post, put, patch, delete\n\n# Configure request properties\n@docs withHeader, withHeaders, withBody, withStringBody, withJsonBody, withMultipartBody, withMultipartStringBody, withUrlEncodedBody\n\n# Configure settings\n@docs withTimeout, withStartHandler, withProgressHandler, withMimeType, withCredentials\n\n# Send the request\n@docs send\n\n# Parse the response\n@docs BodyReader, stringReader, jsonReader, Error, Response\n\n# Inspect the request\n@docs toRequest, toSettings, Request, Settings\n",
        "aliases": [
          {
            "name": "BodyReader",
            "comment": " A function for transforming raw response bodies into a useful value. Plain\nstring and JSON decoding readers are provided, and the string reader can be\nused as a basis for more custom readers. When future Http value types become\nsupported matching readers will be added to extract them.\n",
            "args": [
              "a"
            ],
            "type": "Http.Value -> Result.Result String a"
          },
          {
            "name": "Request",
            "comment": " Re-export `Http.Request`\n",
            "args": [],
            "type": "Http.Request"
          },
          {
            "name": "Response",
            "comment": " Represents a response from the server, including both a decoded JSON payload\nand basic network information.\n",
            "args": [
              "a"
            ],
            "type": "{ data : a , status : Int , statusText : String , headers : Dict.Dict String String , url : String }"
          },
          {
            "name": "Settings",
            "comment": " Re-export `Http.Settings`\n",
            "args": [],
            "type": "Http.Settings"
          }
        ],
        "types": [
          {
            "name": "Error",
            "comment": " Indicates that _some_ kind of failure occured along the path of making and\nreceiving the request. This includes a timeout or network issue, a failure to\nparse the response body, or a status code outside the 200 range. In the case\nthat the error is due to a non-2xx response code, the full response is provided\nand the data decoded as JSON using the decoder for errors passed to `send`.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "UnexpectedPayload",
                [
                  "String"
                ]
              ],
              [
                "NetworkError",
                []
              ],
              [
                "Timeout",
                []
              ],
              [
                "BadResponse",
                [
                  "Http.Extra.Response a"
                ]
              ]
            ]
          },
          {
            "name": "RequestBuilder",
            "comment": " A type for chaining request configuration\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "delete",
            "comment": " Start building a DELETE request with a given URL\n\n    delete \"https://example.com/api/items/1\"\n",
            "type": "String -> Http.Extra.RequestBuilder"
          },
          {
            "name": "get",
            "comment": " Start building a GET request with a given URL\n\n    get \"https://example.com/api/items/1\"\n",
            "type": "String -> Http.Extra.RequestBuilder"
          },
          {
            "name": "jsonReader",
            "comment": " Attempts to decode the raw response body with the given\n`Json.Decode.Decoder`, failing if the body is malformed or not readable as a\nstring.\n",
            "type": "Json.Decode.Decoder a -> Http.Extra.BodyReader a"
          },
          {
            "name": "patch",
            "comment": " Start building a PATCH request with a given URL\n\n    patch \"https://example.com/api/items/1\"\n",
            "type": "String -> Http.Extra.RequestBuilder"
          },
          {
            "name": "post",
            "comment": " Start building a POST request with a given URL\n\n    post \"https://example.com/api/items\"\n",
            "type": "String -> Http.Extra.RequestBuilder"
          },
          {
            "name": "put",
            "comment": " Start building a PUT request with a given URL\n\n    post \"https://example.com/api/items/1\"\n",
            "type": "String -> Http.Extra.RequestBuilder"
          },
          {
            "name": "send",
            "comment": " Once you're finished building up a request, send it with readers for the\nsuccessful response value as well as the server error response value.\n\n    -- In this example a succesful response from the server looks like\n    -- [\"string\", \"string\", \"string\"], and an error body might look like\n    -- \"Bad Request\" or something similar, such that it is a string that is\n    -- not valid JSON (it would need to look like \"\\\"Bad Request\\\"\" to be\n    -- decodable as JSON).\n\n    successDecoder : Json.Decode.Decoder (List String)\n    successDecoder =\n      Json.Decode.list Json.Decode.string\n\n    get \"https://example.com/api/items\"\n      |> withHeader \"Content-Type\" \"application/json\"\n      |> withTimeout (10 * Time.second)\n      |> send (jsonReader successDecoder) stringReader\n",
            "type": "Http.Extra.BodyReader a -> Http.Extra.BodyReader b -> Http.Extra.RequestBuilder -> Task.Task (Http.Extra.Error b) (Http.Extra.Response a)"
          },
          {
            "name": "stringReader",
            "comment": " Attempts to read a raw response body as a plain text string, failing if the\nbody is not readable as a string.\n",
            "type": "Http.Extra.BodyReader String"
          },
          {
            "name": "toRequest",
            "comment": " Extract the Http.Request component of the builder, for introspection and\ntesting\n",
            "type": "Http.Extra.RequestBuilder -> Http.Extra.Request"
          },
          {
            "name": "toSettings",
            "comment": " Extract the Http.Settings component of the builder, for introspection and\ntesting\n",
            "type": "Http.Extra.RequestBuilder -> Http.Extra.Settings"
          },
          {
            "name": "url",
            "comment": " Construct a url using String, String key value pairs for the query string.\nSee `Http.url`.\n\n    googleUrl =\n      url \"https://google.com\" [(\"q\", \"elm\")]\n",
            "type": "String -> List ( String, String ) -> String"
          },
          {
            "name": "withBody",
            "comment": " Add a body to a request for requests that allow bodies.\n\n    post \"https://example.com/api/items/1\"\n      |> withHeader \"Content-Type\" \"application/json\"\n      |> withBody (Http.string \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\")\n",
            "type": "Http.Body -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withCredentials",
            "comment": " Set the `withCredentials` flag on the request to True. Works via\n[`XMLHttpRequest#withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n\n    get \"https://example.com/api/items/1\"\n      |> withCredentials\n",
            "type": "Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withHeader",
            "comment": " Add a single header to a request\n\n    get \"https://example.com/api/items/1\"\n      |> withHeader \"Content-Type\" \"application/json\"\n",
            "type": "String -> String -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withHeaders",
            "comment": " Add many headers to a request\n\n    get \"https://example.com/api/items/1\"\n      |> withHeaders [(\"Content-Type\", \"application/json\"), (\"Accept\", \"application/json\")]\n",
            "type": "List ( String, String ) -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withJsonBody",
            "comment": " Convenience function for adding a JSON body to a request\n\n    params = Json.Encode.object\n      [ (\"sortBy\", Json.Encode.string \"coolness\")\n      , (\"take\", Json.Encode.int 10)\n      ]\n\n    post \"https://example.com/api/items/1\"\n      |> withHeader \"Content-Type\" \"application/json\"\n      |> withJsonBody params\n",
            "type": "Json.Encode.Value -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withMimeType",
            "comment": " Set the desired type of the response for the request, works via\n[`XMLHttpRequest#overrideMimeType()`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#overrideMimeType())\n\n    get \"https://example.com/api/items/1\"\n      |> withMimeType (onProgressHandler)\n",
            "type": "String -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withMultipartBody",
            "comment": " Convenience function for adding a multiplart body to a request\n\n    post \"https://example.com/api/items/1\"\n      |> withMultipartBody [Http.stringData \"user\" (JS.encode user)]\n",
            "type": "List Http.Data -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withMultipartStringBody",
            "comment": " Convience function for adding multipart bodies composed of String, String\nkey-value pairs. Since `Http.stringData` is currently the only `Http.Data`\ncreator having this function removes the need to use the `Http.Data` type in\nyour type signatures.\n\n    post \"https://example.com/api/items/1\"\n      |> withMultipartStringBody [(\"user\", JS.encode user)]\n",
            "type": "List ( String, String ) -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withProgressHandler",
            "comment": " Set the `onProgress` setting on the request\n\n    get \"https://example.com/api/items/1\"\n      |> withProgressHandler (onProgressHandler)\n",
            "type": "(Maybe.Maybe { loaded : Int, total : Int } -> Task.Task () ()) -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withStartHandler",
            "comment": " Set the `onStart` setting on the request\n\n    get \"https://example.com/api/items/1\"\n      |> withStartHandler (onStartTask)\n",
            "type": "Task.Task () () -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withStringBody",
            "comment": " Convenience function for adding a string body to a request\n\n    post \"https://example.com/api/items/1\"\n      |> withHeader \"Content-Type\" \"application/json\"\n      |> withStringBody \"\"\"{ \"sortBy\": \"coolness\", \"take\": 10 }\"\"\"\n",
            "type": "String -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withTimeout",
            "comment": " Set the `timeout` setting on the request\n\n    get \"https://example.com/api/items/1\"\n      |> withTimeout (10 * Time.second)\n",
            "type": "Time.Time -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          },
          {
            "name": "withUrlEncodedBody",
            "comment": " Convenience function for adding url encoded bodies\n\n    post \"https://example.com/api/whatever\"\n      |> withUrlEncodedBody [(\"user\", \"Evan\"), (\"pwd\", \"secret\")]\n",
            "type": "List ( String, String ) -> Http.Extra.RequestBuilder -> Http.Extra.RequestBuilder"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "lukewestby/elm-i18n",
    "version": "1.0.0",
    "docs": [
      {
        "name": "I18n",
        "comment": " I18n helps you generate a lookup function to easily internationalize your\napplications.\n\n@docs Language, withLanguage, createLookup\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Language",
            "comment": " Type representing a language identifier\n",
            "args": [],
            "cases": [
              [
                "Language",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "createLookup",
            "comment": " Creates a function that can be used to lookup and interpolate a key for a\ngiven language, returning the key as the value if the language or key cannot\nbe found in the configuration\n\n    french =\n        Language \"fr-fr\"\n\n    i18nText =\n        createLookup\n            [ withLanguage\n                french\n                [ ( \"good day\", \"bonjour\" )\n                , ( \"I am {0} years old.\", \"J'ai {0} ans.\" )\n                ]\n\n    result =\n        i18nText french \"I am {0} years old.\" [ \"24\" ]\n\n    {- result == \"J'ai 24 ans.\" -}\n",
            "type": "List ( I18n.Language, List ( String, String ) ) -> I18n.Language -> String -> List String -> String"
          },
          {
            "name": "withLanguage",
            "comment": " Combines a language and a list of entries for consumption by createLookup\n",
            "type": "I18n.Language -> List ( String, String ) -> ( I18n.Language, List ( String, String ) )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "lukewestby/elm-string-interpolate",
    "version": "1.0.0",
    "docs": [
      {
        "name": "String.Interpolate",
        "comment": " String.Interpolate provides a convenient method `interpolate` for injecting\nvalues into a string. This can be useful for i18n of apps and construction of\ncomplex strings in views.\n\n@docs interpolate\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "interpolate",
            "comment": " Inject other strings into a string in the order they appear in a List\n  interpolate \"{0} {2} {1}\" [\"hello\", \"!!\", \"world\"]\n  \"{0} {2} {1}\" `interpolate` [\"hello\", \"!!\", \"world\"]\n",
            "type": "String -> List String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "lukewestby/elm-template",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Template.Infix",
        "comment": " Infix operators for more concise template construction\n\n@docs (<%), (%>)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "%>",
            "comment": " Operator alias for andString\n\n    template \"my string \" <% .hello %> \" another string\"\n",
            "type": "Template.Template record -> String -> Template.Template record"
          },
          {
            "name": "<%",
            "comment": " Operator alias for andValue\n\n    template \"my string \" <% .hello\n",
            "type": "Template.Template record -> (record -> String) -> Template.Template record"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Template",
        "comment": " Type-safe string templating\n\n# types\n@docs Template\n\n# construction\n@docs template, withValue, withString, andValue, andString\n\n# rendering\n@docs render\n\n",
        "aliases": [
          {
            "name": "Template",
            "comment": " A list of the components of a template\n",
            "args": [
              "a"
            ],
            "type": "List (Template.Component a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "andString",
            "comment": " Attach a string to a template inline\n\n    template \"my string \" `andValue` .hello `andString` \" another string\"\n",
            "type": "Template.Template record -> String -> Template.Template record"
          },
          {
            "name": "andValue",
            "comment": " Attach a record accessor to a template inline\n\n    template \"my string \" `andValue` .hello\n",
            "type": "Template.Template record -> (record -> String) -> Template.Template record"
          },
          {
            "name": "render",
            "comment": " Walks through a template's components and renders them to a single string\n\n    render\n      (template \"my string \" `andValue` .hello)\n      ({ hello = \"world\" })\n",
            "type": "Template.Template record -> record -> String"
          },
          {
            "name": "template",
            "comment": " Create an initial template starting with the given string\n\n    template \"my string \"\n",
            "type": "String -> Template.Template record"
          },
          {
            "name": "withString",
            "comment": " Attach a string to a template\n\n    template \"my string \"\n        |> withValue .hello\n        |> withString \" another string\"\n",
            "type": "String -> Template.Template record -> Template.Template record"
          },
          {
            "name": "withValue",
            "comment": " Attach a record accessor to a template\n\n    template \"my string \"\n        |> withValue .hello\n",
            "type": "(record -> String) -> Template.Template record -> Template.Template record"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "lynn/elm-arithmetic",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Arithmetic",
        "comment": " A library that provides useful number-theoretical functions for dealing\nwith integers, primes, divisibility, et cetera.\n\n# Primes\n@docs isPrime, primesBelow, primeFactors, primeExponents\n\n# Parity\n@docs isEven, isOdd\n\n# Divisors\n@docs divides, isMultipleOf, divisors, properDivisors, divisorCount\n\n# GCD and LCM\n@docs gcd, lcm, isCoprimeTo, totient, extendedGcd\n\n# Base conversion\n@docs toBase, fromBase\n\n# Squares\n@docs squareRoot, safeSquareRoot, intSquareRoot, exactIntSquareRoot, isSquare\n\n# Cubes\n@docs cubeRoot, intCubeRoot, exactIntCubeRoot, isCube\n\n# Modular arithmetic\n@docs powerMod, modularInverse, chineseRemainder\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "chineseRemainder",
            "comment": " Given a list of residue-modulus pairs `[(r1, m1), (r2, m2), ...]`, solve\nthe system of linear congruences:\n\n    x = r1 (mod m1)\n    x = r2 (mod m2)\n    ...\n\nLet `M` be the product of all moduli in the list. The [Chinese remainder\ntheorem](https://en.wikipedia.org/wiki/Chinese_remainder_theorem) tells us that\n\n* if all of the moduli are pairwise coprime (their `gcd` is 1), there are\n  infinitely many solutions, all congruent `mod M`;\n* if there is a pair of non-coprime moduli in the list, there is no solution.\n\nThe result is a solution `Just x` with `0 <= x < M` in the first case; or\n`Nothing` if the system is unsolvable.\n\n    chineseRemainder [(10, 11), (4, 12), (12, 13)] == Just 1000\n        -- Solution to x = 10 (mod 11), x = 4 (mod 12), x = 12 (mod 13).\n\n    chineseRemainder [(2, 3), (4, 6)] == Nothing\n        -- 3 and 6 are not coprime, so there is no solution.\n\n    chineseRemainder [] == Just 0\n        -- The trivial solution, modulo M = 1.\n",
            "type": "List ( Int, Int ) -> Maybe.Maybe Int"
          },
          {
            "name": "cubeRoot",
            "comment": " Take the cube root of a number.\n\n    cubeRoot 15.625 == 2.5\n",
            "type": "Float -> Float"
          },
          {
            "name": "divides",
            "comment": " Test whether one number divides another.\n\n    10 `divides` 120 == True\n    10 `divides` 125 == False\n",
            "type": "Int -> Int -> Bool"
          },
          {
            "name": "divisorCount",
            "comment": " Get the number of divisors of a number (counting itself).\n",
            "type": "Int -> Int"
          },
          {
            "name": "divisors",
            "comment": " Get all divisors of a number, in ascending order.\n\n    divisors 20 == [1, 2, 4, 5, 10, 20]\n",
            "type": "Int -> List Int"
          },
          {
            "name": "exactIntCubeRoot",
            "comment": " Return `Just s` if the given integer is a cube, and `s` is its cube root;\notherwise, return `Nothing`.\n\n    exactIntCubeRoot 800 == Nothing\n    exactIntCubeRoot 1000 == Just 10\n",
            "type": "Int -> Maybe.Maybe Int"
          },
          {
            "name": "exactIntSquareRoot",
            "comment": " Return `Just s` if the given integer is a square, and `s` is its square\nroot; otherwise, return `Nothing`.\n\n    exactIntSquareRoot 20 == Nothing\n    exactIntSquareRoot 25 == Just 5\n",
            "type": "Int -> Maybe.Maybe Int"
          },
          {
            "name": "extendedGcd",
            "comment": " Given `a` and `b`, compute integers `(d, u, v)` so that `a * u + b * v ==\nd` where `d == gcd a b`. (These are known as [Bézout coefficients](\nhttps://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity). If the inputs are both\npositive, the solution returned satisfies `abs u < b // gcd a b` and\n`abs v < a // gcd a b`.)\n\n    extendedGcd 1215 465 == (15, -13, 34)\n        -- because gcd 1215 465 == 15 == -13 * 1215 + 34 * 465\n",
            "type": "Int -> Int -> ( Int, Int, Int )"
          },
          {
            "name": "fromBase",
            "comment": " Interpret a list of digits as a number in the given base. The input is \nexpected to consist of integers `d` for which `0 <= d < base`.\n\n    fromBase 2 [1, 0, 1, 0, 1, 0] = 42\n",
            "type": "Int -> List Int -> Int"
          },
          {
            "name": "gcd",
            "comment": " Calculate the greatest common divisor of two integers. `gcd x 0` and\n`gcd 0 x` both return `x`. Negative arguments are made positive first.\n\n    gcd 56 80 == 8\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "intCubeRoot",
            "comment": " Integer cube root, rounding down.\n\n    intCubeRoot 800 == 9\n    intCubeRoot 1000 == 10\n",
            "type": "Int -> Int"
          },
          {
            "name": "intSquareRoot",
            "comment": " Take the square root, rounding down. Return `NaN` (not a number) for\nnegative arguments.\n\n    intSquareRoot 20 == 4\n    intSquareRoot 25 == 5\n",
            "type": "Int -> Int"
          },
          {
            "name": "isCoprimeTo",
            "comment": " Test whether two integers are coprime.\n\n    56 `isCoprimeTo` 80 == False\n    5 `isCoprimeTo` 8 \n",
            "type": "Int -> Int -> Bool"
          },
          {
            "name": "isCube",
            "comment": " Test whether a number is a cube.\n\n    isCube 800 == False\n    isCube 1000 == True\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isEven",
            "comment": " Test whether an integer is even.\n\n    isEven 2 == True\n    isEven 3 == False\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isMultipleOf",
            "comment": " Test whether one number is a multiple of another.\n\n    120 `isMultipleOf` 10 == True\n    125 `isMultipleOf` 10 == False\n",
            "type": "Int -> Int -> Bool"
          },
          {
            "name": "isOdd",
            "comment": " Test whether an integer is odd.\n\n    isOdd 2 == False\n    isOdd 3 == True\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isPrime",
            "comment": " Test whether an integer is a positive prime.\n\n    isPrime 2357 == True\n    isPrime 500 == False\n",
            "type": "Int -> Bool"
          },
          {
            "name": "isSquare",
            "comment": " Test whether a number is a square.\n\n    isSquare 20 == False\n    isSquare 25 == True\n",
            "type": "Int -> Bool"
          },
          {
            "name": "lcm",
            "comment": " Calculate the least common multiple of two integers. `lcm x 0` and\n`lcm 0 x` both return `0`. Negative arguments are made positive first.\n\n    lcm 56 80 == 560\n",
            "type": "Int -> Int -> Int"
          },
          {
            "name": "modularInverse",
            "comment": " Given a number `a` and a modulus `n`, return the multiplicative inverse of\n`a` modulo `n`, if it exists. That is: try to return `Just b`, with\n`0 <= b < n`, so that `a * b == 1` modulo `n`, but return `Nothing` if no such\n`b` exists. (`b` exists precisely when `a` and the modulus `n` are coprime.)\n\n    modularInverse 3 11 == Just 4    -- 3 * 4 == 12 == 1 (mod 11)\n    modularInverse 3 15 == Nothing   -- 3 and 15 aren't coprime\n",
            "type": "Int -> Int -> Maybe.Maybe Int"
          },
          {
            "name": "powerMod",
            "comment": " `powerMod b e m` efficiently calculates `b ^ e` (modulo `m`). It assumes\n`b >= 0`, `e >= 0` and `m >= 1`.\n\nFor example, to compute `4147 ^ 8671 % 1000` efficiently:\n\n    powerMod 4147 8671 1000 == 803\n",
            "type": "Int -> Int -> Int -> Int"
          },
          {
            "name": "primeExponents",
            "comment": " Return a list of all prime-exponent pairs for a given positive integer's\nprime decomposition, with the primes in ascending order. If the input is less\nthan 2, the empty list is returned.\n\n    primeExponents 24 == [(2, 3), (5, 2)]                -- 2^3 * 5^2\n    primeExponents 531764 == [(2, 1), (11, 2), (13, 3)]  -- 2^1 * 11^2 * 13^3\n    primeExponents 1 == []                               -- empty product\n",
            "type": "Int -> List ( Int, Int )"
          },
          {
            "name": "primeFactors",
            "comment": " Return a list of all prime factors for a given positive integer, in\nascending order. If the input is less than 2, the empty list is returned.\n\n    primeFactors 24 == [2, 2, 2, 3]\n    primeFactors 767 == [13, 59]\n    primeFactors 1 == []\n",
            "type": "Int -> List Int"
          },
          {
            "name": "primesBelow",
            "comment": " Get all primes in the given range `[0..n-1]`, using the Sieve of\nEratosthenes.\n\n    primesBelow 4 == [2, 3]\n    primesBelow 17 == [2, 3, 5, 7, 11, 13]\n",
            "type": "Int -> List Int"
          },
          {
            "name": "properDivisors",
            "comment": " Get all proper divisors (i.e., divisors less than the input) of a number,\nin ascending order.\n\n    properDivisors 20 == [1, 2, 4, 5, 10]\n",
            "type": "Int -> List Int"
          },
          {
            "name": "safeSquareRoot",
            "comment": " Safely take the square root of a number: return `Just (squareRoot n)` if\nthe input `n` is nonnegative; otherwise, return `Nothing`.\n\n    squareRoot 5.76 == Just 2.4\n    squareRoot (-1) == Nothing\n",
            "type": "Float -> Maybe.Maybe Float"
          },
          {
            "name": "squareRoot",
            "comment": " Take the square root of a number. Return `NaN` (not a number) for negative\narguments.\n\n    squareRoot 5.76 == 2.4\n    squareRoot (-1) |> isNaN\n",
            "type": "Float -> Float"
          },
          {
            "name": "toBase",
            "comment": " Convert a number to a list of digits in the given base. The input number is\nmade positive first.\n\n    toBase 2 42 = [1, 0, 1, 0, 1, 0]  -- 42 in binary\n",
            "type": "Int -> Int -> List Int"
          },
          {
            "name": "totient",
            "comment": " Compute Euler's totient function `φ(n)`: the number of positive integers\n`1 <= k <= n` for which `gcd(n, k) == 1`. The input is made positive first.\n\n    totient 99 == 60\n    totient 1450 == 560\n",
            "type": "Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "marcosh/elm-html-to-unicode",
    "version": "1.0.0",
    "docs": [
      {
        "name": "ElmEscapeHtml",
        "comment": " This library allows to escape html string and unescape named and numeric\ncharacter references (e.g. &gt;, &#62;, &x3e;) to the corresponding unicode\ncharacters\n\n#Definition\n@docs escape, unescape\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "escape",
            "comment": " Escapes a string converting characters that could be used to inject XSS\nvectors (http://wonko.com/post/html-escaping). At the moment we escape &, <, >,\n\", ', `, , !, @, $, %, (, ), =, +, {, }, [ and ]\n\nfor example\n\nescape \"&<>\\\"\" == \"&amp;&lt;&gt;&quot;\"\n",
            "type": "String -> String"
          },
          {
            "name": "unescape",
            "comment": " Unescapes a string, converting all named and numeric character references\n(e.g. &gt;, &#62;, &x3e;) to their corresponding unicode characters.\n\nfor example\n\nunescape \"&quot;&amp;&lt;&gt;\" == \"\\\"&<>\"\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "martinsk/elm-datastructures",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Queue",
        "comment": " This Module implements a simple LIFO queue \n\n# Definition\n@docs Queue\n\nThis is based on the \n\n# Fundamentals \n@docs init, enqueue, dequeue, length\n\n# Usefull functions\n@docs foldr, foldl, map, fromList, toList\n\n",
        "aliases": [
          {
            "name": "Queue",
            "comment": " a simple queue.\n",
            "args": [
              "a"
            ],
            "type": "( List a, List a, Int )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "dequeue",
            "comment": "Dequeues an element of the end of a queue, and also returns thel\nelement in O(1) amortized ",
            "type": "Queue.Queue a -> ( Maybe.Maybe a, Queue.Queue a )"
          },
          {
            "name": "enqueue",
            "comment": "Enqueue an element on a queue in O(1)  ",
            "type": "a -> Queue.Queue a -> Queue.Queue a"
          },
          {
            "name": "foldl",
            "comment": " Fold across a queue back ot front ",
            "type": "(a -> b -> b) -> b -> Queue.Queue a -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold across a queue front ot back ",
            "type": "(a -> b -> b) -> b -> Queue.Queue a -> b"
          },
          {
            "name": "fromList",
            "comment": " converts a queue into a list  ",
            "type": "List a -> Queue.Queue a"
          },
          {
            "name": "init",
            "comment": " Creates an empty queue ",
            "type": "Queue.Queue a"
          },
          {
            "name": "length",
            "comment": " Get the length(number of elements) in the queue in O(1)  ",
            "type": "Queue.Queue a -> Int"
          },
          {
            "name": "map",
            "comment": " maps from a queue of type a to a queue containing elements of type\nb ",
            "type": "(a -> b) -> Queue.Queue a -> Queue.Queue b"
          },
          {
            "name": "toList",
            "comment": " converts a list into a queue  ",
            "type": "Queue.Queue a -> List a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "maxsnew/lazy",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Lazy",
        "comment": " This library lets you delay a computation until later.\n\n# Basics\n@docs Lazy, lazy, force\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs apply, andThen\n",
        "aliases": [],
        "types": [
          {
            "name": "Lazy",
            "comment": " A wrapper around a value that will be lazily evaluated. ",
            "args": [
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andThen",
            "comment": " Lazily chain together lazy computations, for when you have a series of\nsteps that all need to be performed lazily. This can be nice when you need to\npattern match on a value, for example, when appending lazy lists:\n\n    type List a = Empty | Node a (Lazy (List a))\n\n    cons : a -> Lazy (List a) -> Lazy (List a)\n    cons first rest =\n        Lazy.map (Node first) rest\n\n    append : Lazy (List a) -> Lazy (List a) -> Lazy (List a)\n    append lazyList1 lazyList2 =\n        lazyList1\n          `andThen` \\list1 ->\n              case list1 of\n                Empty ->\n                  lazyList2\n\n                Node first rest ->\n                  cons first (append rest list2))\n\nBy using `andThen` we ensure that neither `lazyList1` or `lazyList2` are forced\nbefore they are needed. So as written, the `append` function delays the pattern\nmatching until later.\n",
            "type": "Lazy.Lazy a -> (a -> Lazy.Lazy b) -> Lazy.Lazy b"
          },
          {
            "name": "apply",
            "comment": " Lazily apply a lazy function to a lazy value. This is pretty rare on its\nown, but it lets you map as high as you want.\n\n    map3 f a b == f `map` a `apply` b `apply` c\n\nIt is not the most beautiful, but it is equivalent and will let you create\n`map9` quite easily if you really need it.\n",
            "type": "Lazy.Lazy (a -> b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "force",
            "comment": " Force the evaluation of a lazy value. This means we only pay for the\ncomputation when we need it. Here is a rather contrived example.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> List.sum [1..1000000])\n\n    sums : (Int, Int, Int)\n    sums =\n        (force lazySum, force lazySum, force lazySum)\n\nWe are forcing this computation three times. The cool thing is that the first\ntime you `force` a value, the result is stored. This means you pay the cost on\nthe first one, but all the rest are very cheap, basically just looking up a\nvalue in memory.\n",
            "type": "Lazy.Lazy a -> a"
          },
          {
            "name": "lazy",
            "comment": " Delay the evaluation of a value until later. For example, maybe we will\nneed to generate a very long list and find its sum, but we do not want to do\nit unless it is absolutely necessary.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> sum [1..1000000])\n\nNow we only pay for `lazySum` if we actually need it.\n",
            "type": "(() -> a) -> Lazy.Lazy a"
          },
          {
            "name": "map",
            "comment": " Lazily apply a function to a lazy value.\n\n    lazySum : Lazy Int\n    lazySum =\n        map List.sum (lazy (\\() -> [1..1000000]))\n\nThe resulting lazy value will create a big list and sum it up when it is\nfinally forced.\n",
            "type": "(a -> b) -> Lazy.Lazy a -> Lazy.Lazy b"
          },
          {
            "name": "map2",
            "comment": " Lazily apply a function to two lazy values.\n\n    lazySum : Lazy Int\n    lazySum =\n        lazy (\\() -> List.sum [1..1000000])\n\n    lazySumPair : Lazy (Int, Int)\n    lazySumPair =\n        map2 (,) lazySum lazySum\n\n",
            "type": "(a -> b -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy result"
          },
          {
            "name": "map3",
            "comment": "",
            "type": "(a -> b -> c -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy result"
          },
          {
            "name": "map4",
            "comment": "",
            "type": "(a -> b -> c -> d -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy d -> Lazy.Lazy result"
          },
          {
            "name": "map5",
            "comment": "",
            "type": "(a -> b -> c -> d -> e -> result) -> Lazy.Lazy a -> Lazy.Lazy b -> Lazy.Lazy c -> Lazy.Lazy d -> Lazy.Lazy e -> Lazy.Lazy result"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mdgriffith/elm-color-mixing",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Color.Mixing",
        "comment": "\n\n@docs Factor, lighten, darken, saturate, desaturate, fade, fadeIn, fadeOut,  mix, spin, tint, shade\n\n@docs average, difference, exclusion, hardlight, multiply, negation, overlay, screen, softlight\n\n\n",
        "aliases": [
          {
            "name": "Factor",
            "comment": " A Float that should be between 0.0 and 1.0\n\n",
            "args": [],
            "type": "Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "average",
            "comment": " Compute the average of two colors on a per-channel (RGB) basis.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "darken",
            "comment": " Decrease the lightness of a color.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "desaturate",
            "comment": " Decrease the saturation of a color in the HSL color space by an absolute amount.\n\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "difference",
            "comment": " Subtracts the second color from the first color on a channel-by-channel basis. Negative values are inverted. Subtracting black results in no change; subtracting white results in color inversion.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "exclusion",
            "comment": " A similar effect to difference with lower contrast.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "fade",
            "comment": " Set the absolute transparency of a color.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeIn",
            "comment": " Decrease the transparency of a color, making it more opaque.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "fadeOut",
            "comment": " Increase the transparency of a color, making it less opaque.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "hardlight",
            "comment": " The same as overlay but with the color roles reversed.\n\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "lighten",
            "comment": " Increase the lightness of a color.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "mix",
            "comment": " Mix two colors together in variable proportion. Opacity is included in the calculations.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "multiply",
            "comment": " Multiply two colors. Corresponding RGB channels from each of the two colors are multiplied together then divided by 255. The result is a darker color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "negation",
            "comment": " Do the opposite effect to difference.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "overlay",
            "comment": " Combines the effects of both multiply and screen. Conditionally make light channels lighter and dark channels darker.\n\n__Note:__ The results of the conditions are determined by the first color parameter.\n\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "saturate",
            "comment": " Increase the saturation of a color in the HSL color space by an absolute amount.\n\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "screen",
            "comment": " Do the opposite of `multiply`. The result is a brighter color.\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "shade",
            "comment": " Mix color with black in variable proportion.  Same as calling `mix` with black.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "softlight",
            "comment": " Similar to overlay but avoids pure black resulting in pure black, and pure white resulting in pure white.\n\n",
            "type": "Color.Color -> Color.Color -> Color.Color"
          },
          {
            "name": "spin",
            "comment": " Rotate the hue angle of a color in either direction.\n\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          },
          {
            "name": "tint",
            "comment": " Mix color with white in variable proportion. Same as calling `mix` with white.\n",
            "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mdgriffith/elm-html-animation",
    "version": "3.0.4",
    "docs": [
      {
        "name": "Html.Animation",
        "comment": " This library is for animating css properties and is meant to work well with elm-html.\n\nThe easiest way to get started with this library is to check out the examples that are included with the [source code](https://github.com/mdgriffith/elm-html-animation).\n\nOnce you have the basic structure of how to use this library, you can refer to this documentation to fill any gaps.\n\n\n# Base Definitions\n@docs Animation, Action\n\n# Starting an animation\n@docs animate, queue, stagger\n\n# Creating animations\n@docs props, delay, spring, duration, easing, andThen, set\n\n# Animating Properties\n\nThese functions specify the value for a StyleProperty.\n\nAfter taking an argument, these functions have `Float -> Float -> Float` as their signature.\nThis can be understood as `ExistingStyleValue -> CurrentTime -> NewStyleValue`, where CurrentTime is between 0 and 1.\n\n@docs to, stay, add, minus\n\n# Spring Presets\n@docs noWobble, gentle, wobbly, stiff\n\n# Animating Colors\n@docs toColor, toRGB, toRGBA, toHSL, toHSLA\n\n# Render a Animation into CSS\n@docs render\n\n# Setting the starting style\n@docs init\n\n# Initial Color Formats\n@docs fromColor, rgb, rgba, hsl, hsla\n\n# Update a Style\n@docs update\n\n# Managing Effects\n@docs on, forwardTo, forwardToIndex, forwardToAll\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " Actions to be run on an animation.\nYou won't be constructing this type directly, though it may show up in your type signatures.\n\nTo start animations you'll be using the `animate`, `queue`, and `stagger` functions\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Animation",
            "comment": " An Animation of CSS properties.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Animate a StyleProperty by adding to its existing value\n",
            "type": "Float -> Html.Animation.Dynamic"
          },
          {
            "name": "andThen",
            "comment": " Append another keyframe.  This is used for multistage animations.  \n\nFor example, to cycle through colors, we'd use the following:\n\n      UI.animate\n              |> UI.props\n                  [ BackgroundColor\n                        UI.toRGBA 100 100 100 1.0\n                  ]\n          |> UI.andThen -- create a new keyframe\n              |> UI.duration (1*second)\n              |> UI.props\n                  [ BackgroundColor\n                        UI.toRGBA 178 201 14 1.0\n                  ]\n          |> UI.andThen\n              |> UI.props\n                  [ BackgroundColor\n                        UI.toRGBA 58 40 69 1.0\n                  ]\n          |> UI.on model.style\n",
            "type": "Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "animate",
            "comment": " Begin describing an animation.  This animation will cleanly interrupt any animation that is currently running.\n\n      UI.animate\n         |> UI.duration (0.4*second)\n         |> UI.props\n             [ Left (UI.to 0) Px\n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n\n",
            "type": "Html.Animation.Action"
          },
          {
            "name": "delay",
            "comment": " Specify a delay.  \nIf not specified, the default is 0.\n\n     UI.animate\n         |> UI.duration (0.4*second)\n         |> UI.delay (0.5*second)\n         |> UI.props\n             [ Left (UI.to 0) Px\n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n",
            "type": "Time.Time -> Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "duration",
            "comment": " Specify a duration.  This is ignored unless an easing is specified as well!  This is because spring functions (the default), have dynamically created durations.\n\nIf an easing is specified but no duration, the default duration is 350ms.\n\n     UI.animate\n         |> UI.easing (\\x -> x)  -- linear easing\n         |> UI.duration (0.4*second)\n         |> UI.props\n             [ Left (UI.to 0) Px\n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n",
            "type": "Time.Time -> Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "easing",
            "comment": " Specify an easing function.  It is expected that values should match up at the beginning and end.  So, f 0 == 0 and f 1 == 1.  The default easing is sinusoidal in-out.\n\n",
            "type": "(Float -> Float) -> Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "forwardTo",
            "comment": "  This function is used to handle the boilerplate of forwarding animation updates, and can be used in place of `on`.\n\nTo use this function, you'll need to supply a getter and a setter function for getting and setting the style model.\n\nSo, for a model like the following\n\n    type alias Model = { style : UI.Animation }\n\nAdd an action to your Action type to capture the UI.Actions.\n\n    type Action \n          = Hide\n          | Animate UI.Action\n\n\nCreate a specialized version of `forwardTo`.\n\n    onModel = \n      UI.forwardTo\n          Animate -- The action that captures UI.Action \n          .style -- style getter\n          (\\w style -> { w | style = style }) -- style setter\n\nThen, in your update function would look something like \n\n\n      Hide ->\n        UI.animate\n            |> UI.duration (5*second)\n            |> UI.props\n                [ Opacity (UI.to 0)\n                ]\n            |> onModel model\n\n      Animate uiAction ->\n        onModel model uiAction\n\n\n",
            "type": "(Html.Animation.Action -> b) -> (a -> Html.Animation.Animation) -> (a -> Html.Animation.Animation -> a) -> a -> Html.Animation.Action -> ( a, Effects.Effects b )"
          },
          {
            "name": "forwardToAll",
            "comment": " Like `forwardToIndex`, except it applies an update to every member of the list.\nIt has the same set up as `forwardToIndex`, except:\n\nYou'll need two helper functions\n\n  onWidget = \n    UI.forwardToIndex\n        Animate\n        .style -- widget style getter\n        (\\w style -> { w | style = style }) -- widget style setter\n                                      \n  onAllWidgets = \n      UI.forwardToAll \n          Animate\n          .style -- widget style getter\n          (\\w style -> { w | style = style }) -- widget style setter\n\n\n\nAnd your update function will look like the following\n\n    Hide ->\n      let \n        (widgets, fx) = \n            UI.animate\n               |> UI.delay ((i * 0.05) * second)\n               |> UI.spring UI.wobbly\n               |> UI.props \n                   [ Left (UI.to -70) Px\n                   ] \n              |> onAllWidgets model.widgets \n              -- apply an update to all widgets\n\n      in\n        ( { model | widgets = widgets }\n        , fx )\n\n    \n    -- But, in animate, you only need to forwad to a widget based on index\n    Animate i action ->\n      let\n        (widgets, fx) = \n            onWidget i model.widgets action\n      in\n        ( { model | widgets = widgets }\n        , fx )\n\n\n\n\n",
            "type": "(Int -> Html.Animation.Action -> b) -> (a -> Html.Animation.Animation) -> (a -> Html.Animation.Animation -> a) -> List a -> Html.Animation.Action -> ( List a, Effects.Effects b )"
          },
          {
            "name": "forwardToIndex",
            "comment": " Forward style updates to a specific element in a list that has a Animation model.\n\nFor a model like the following\n\n    type alias Model = { widgets : List Widget }\n\n    type alias Widget =\n              { style : UI.Animation\n              }\n  \n    type Action \n          = Hide\n          | Animate Int UI.Action -- where Int is the index of the widget we are animating\n\nCreate a specialized version of `forwardToIndex`.\n\n    onWidget = \n      UI.forwardToIndex\n          Animate\n          .style -- widget style getter\n          (\\w style -> { w | style = style }) -- widget style setter\n\nAnd in your update function:\n\n    Hide ->\n      let\n        (widgets, fx) =\n            UI.animate\n                |> UI.duration (5*second)\n                |> UI.props\n                    [ Opacity (UI.to 0)\n                    ]\n                |> onWidget i model.widgets\n                -- Where i is the index of the widget to update.\n      in\n        ( { model | widgets = widgets }\n        , fx ) -- FX has already been `Effects.map`ped to Animate\n\n    Animate i action ->\n      let\n        (widgets, fx) = \n            onWidget i model.widgets action\n      in\n        ( { model | widgets = widgets }\n        , fx )\n\n\n",
            "type": "(Int -> Html.Animation.Action -> b) -> (a -> Html.Animation.Animation) -> (a -> Html.Animation.Animation -> a) -> Int -> List a -> Html.Animation.Action -> ( List a, Effects.Effects b )"
          },
          {
            "name": "fromColor",
            "comment": " Specify an initial Color-based property using a Color from the elm core Color module.\n\n",
            "type": "Color.Color -> (Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static) -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static"
          },
          {
            "name": "gentle",
            "comment": " A spring preset.\n",
            "type": "Html.Animation.SpringProps"
          },
          {
            "name": "hsl",
            "comment": " Specify an initial Color-based property using hsl\n\n",
            "type": "Float -> Float -> Float -> (Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static) -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static"
          },
          {
            "name": "hsla",
            "comment": " Specify an initial Color-based property using hsla\n\n",
            "type": "Float -> Float -> Float -> Float -> (Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static) -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static"
          },
          {
            "name": "init",
            "comment": " Create an initial style for your init model.\n\n__Note__ All properties that you animate must be present in the init or else that property won't be animated.\n\n",
            "type": "Html.Animation.Core.Style -> Html.Animation.Animation"
          },
          {
            "name": "minus",
            "comment": " Animate a StyleProperty by subtracting to its existing value\n",
            "type": "Float -> Html.Animation.Dynamic"
          },
          {
            "name": "noWobble",
            "comment": " A spring preset.  Probably should be your initial goto for using springs.\n",
            "type": "Html.Animation.SpringProps"
          },
          {
            "name": "on",
            "comment": " Apply an update to a Animation model.  This is used at the end of constructing an animation.\nHowever, you'll have an overall cleaner syntax if you use `forwardTo` to prepare a custom version of `on`.\n\n     UI.animate\n         |> UI.duration (0.4*second)\n         |> UI.props\n             [ Left (UI.to 0) Px \n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n\n",
            "type": "Html.Animation.Animation -> Html.Animation.Action -> ( Html.Animation.Animation , Effects.Effects Html.Animation.Action )"
          },
          {
            "name": "props",
            "comment": " Specify the properties that should be animated\n\n     UI.animate\n         |> UI.duration (0.4*second)\n         |> UI.props\n             [ Left (UI.to 0) Px\n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n\n",
            "type": "List (Html.Animation.Properties.StyleProperty Html.Animation.Dynamic) -> Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "queue",
            "comment": " The same as `animate` but instead of interrupting the current animation, this will queue up after the current animation is finished.\n\n      UI.queue\n         |> UI.duration (0.4*second)\n         |> UI.props\n             [ Left (UI.to 0) Px\n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n\n",
            "type": "Html.Animation.Action"
          },
          {
            "name": "render",
            "comment": " Render into concrete css that can be directly applied to 'style' in elm-html\n\n    div [ style (UI.render widget.style) ] [ ]\n\n",
            "type": "Html.Animation.Animation -> List ( String, String )"
          },
          {
            "name": "rgb",
            "comment": " Specify an initial Color-based property using rgb\n\n",
            "type": "Float -> Float -> Float -> (Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static) -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static"
          },
          {
            "name": "rgba",
            "comment": " Specify an initial Color-based property using rgba\n\n",
            "type": "Float -> Float -> Float -> Float -> (Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Core.Static -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static) -> Html.Animation.Properties.StyleProperty Html.Animation.Core.Static"
          },
          {
            "name": "set",
            "comment": " Apply a style immediately.  This takes a list of static style properties, meaning the no `UI.to` functions, only concrete numbers and values.\n\n\n    UI.animate\n         |> UI.duration (0.4*second)\n         |> UI.props\n             [ Opacity (UI.to 1)\n             ]\n      |> UI.andThen\n         |> UI.set\n             [ Display None\n             ]\n         |> UI.on model.style\n\n",
            "type": "List (Html.Animation.Properties.StyleProperty Html.Animation.Core.Static) -> Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "spring",
            "comment": " Animate based on spring physics.  \n\nYou'll need to provide both a stiffness and a dampness to this function.\n\n__Note:__ This will cause both `duration` and `easing` to be ignored as they are now controlled by the spring.\n\n     UI.animate\n         -- |> UI.spring UI.noWobble -- set using a UI preset\n         |> UI.spring \n                { stiffness = 400\n                , damping = 28\n                }\n         |> UI.props\n             [ Left (UI.to 0) Px\n             , Opacity (UI.to 1)\n             ]\n         |> UI.on model.style\n",
            "type": "Html.Animation.SpringProps -> Html.Animation.Action -> Html.Animation.Action"
          },
          {
            "name": "stagger",
            "comment": " Can be used to stagger animations on a list of widgets.\n\n     UI.stagger\n        (\\i ->\n           UI.animate\n             -- The delay is staggered based on list index\n             |> UI.delay (i * 0.05 * second) \n             |> UI.duration (0.3 * second)\n             |> UI.props\n                 [ Left (UI.to 200) Px\n                 ]\n          |> UI.andThen\n             |> UI.delay (2.0 * second)\n             |> UI.duration (0.3 * second)\n             |> UI.props\n                 [ Left (UI.to -50) Px\n                 ]\n        )\n        |> forwardToAllWidgets model.widgets\n\n",
            "type": "(Float -> Float -> Html.Animation.Action) -> Html.Animation.Action"
          },
          {
            "name": "stay",
            "comment": " Keep an animation where it is!  This is useful for stacking transforms.\n",
            "type": "Html.Animation.Dynamic"
          },
          {
            "name": "stiff",
            "comment": " A spring preset.\n",
            "type": "Html.Animation.SpringProps"
          },
          {
            "name": "to",
            "comment": " Animate a StyleProperty to a value.\n",
            "type": "Float -> Html.Animation.Dynamic"
          },
          {
            "name": "toColor",
            "comment": " Animate a color-based property, given a color from the Color elm module.\n\n",
            "type": "Color.Color -> Html.Animation.ColorProperty -> Html.Animation.Properties.StyleProperty Html.Animation.Dynamic"
          },
          {
            "name": "toHSL",
            "comment": " Animate a color-based style property to an hsl color. Note: this leaves the alpha channel where it is.\n\n",
            "type": "Float -> Float -> Float -> Html.Animation.ColorProperty -> Html.Animation.Properties.StyleProperty Html.Animation.Dynamic"
          },
          {
            "name": "toHSLA",
            "comment": " Animate a color-based style property to an hsla color.\n\n",
            "type": "Float -> Float -> Float -> Float -> Html.Animation.ColorProperty -> Html.Animation.Properties.StyleProperty Html.Animation.Dynamic"
          },
          {
            "name": "toRGB",
            "comment": " Animate a color-based style property to an rgb color.  Note: this leaves the alpha channel where it is.\n\n     UI.animate\n            |> UI.props\n                [ BackgroundColor\n                      UI.toRGB 100 100 100\n                ]\n            |> UI.on model.style\n\n",
            "type": "Float -> Float -> Float -> Html.Animation.ColorProperty -> Html.Animation.Properties.StyleProperty Html.Animation.Dynamic"
          },
          {
            "name": "toRGBA",
            "comment": " Animate a color-based style property to an rgba color.\n\n       UI.animate\n            |> UI.props\n                [ BackgroundColor\n                    UI.toRGBA 100 100 100 1.0\n                ]\n            |> UI.on model.style\n\n\n",
            "type": "Float -> Float -> Float -> Float -> Html.Animation.ColorProperty -> Html.Animation.Properties.StyleProperty Html.Animation.Dynamic"
          },
          {
            "name": "update",
            "comment": " Update an animation.  This will probably only show up once in your code.\nSee any of the examples at [https://github.com/mdgriffith/elm-html-animation](https://github.com/mdgriffith/elm-html-animation)\n",
            "type": "Html.Animation.Action -> Html.Animation.Animation -> ( Html.Animation.Animation , Effects.Effects Html.Animation.Action )"
          },
          {
            "name": "wobbly",
            "comment": " A spring preset.\n",
            "type": "Html.Animation.SpringProps"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Animation.Properties",
        "comment": "\n\n# All Animatable Style Properties\n@docs StyleProperty, DisplayMode\n\n# Units\n@docs Length, Angle\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Angle",
            "comment": " Units representing angles.\n",
            "args": [],
            "cases": [
              [
                "Deg",
                []
              ],
              [
                "Grad",
                []
              ],
              [
                "Rad",
                []
              ],
              [
                "Turn",
                []
              ]
            ]
          },
          {
            "name": "DisplayMode",
            "comment": " A Display value used for the display property.\nA display mode is not animated but can be set using Html.Animation.set\n",
            "args": [],
            "cases": [
              [
                "None",
                []
              ],
              [
                "Inline",
                []
              ],
              [
                "InlineBlock",
                []
              ],
              [
                "Block",
                []
              ],
              [
                "Flex",
                []
              ],
              [
                "InlineFlex",
                []
              ],
              [
                "ListItem",
                []
              ]
            ]
          },
          {
            "name": "Length",
            "comment": " Units representing length.\n",
            "args": [],
            "cases": [
              [
                "Px",
                []
              ],
              [
                "Percent",
                []
              ],
              [
                "Rem",
                []
              ],
              [
                "Em",
                []
              ],
              [
                "Ex",
                []
              ],
              [
                "Ch",
                []
              ],
              [
                "Vh",
                []
              ],
              [
                "Vw",
                []
              ],
              [
                "Vmin",
                []
              ],
              [
                "Vmax",
                []
              ],
              [
                "Mm",
                []
              ],
              [
                "Cm",
                []
              ],
              [
                "In",
                []
              ],
              [
                "Pt",
                []
              ],
              [
                "Pc",
                []
              ]
            ]
          },
          {
            "name": "StyleProperty",
            "comment": " All currently animatable properties.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Prop",
                [
                  "String",
                  "a",
                  "String"
                ]
              ],
              [
                "Display",
                [
                  "Html.Animation.Properties.DisplayMode"
                ]
              ],
              [
                "Opacity",
                [
                  "a"
                ]
              ],
              [
                "Height",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Width",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Left",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Top",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Right",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Bottom",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MaxHeight",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MaxWidth",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MinHeight",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MinWidth",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Padding",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "PaddingLeft",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "PaddingRight",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "PaddingTop",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "PaddingBottom",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Margin",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MarginLeft",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MarginRight",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MarginTop",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "MarginBottom",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BorderWidth",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BorderRadius",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BorderTopLeftRadius",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BorderTopRightRadius",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BorderBottomLeftRadius",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BorderBottomRightRadius",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "LetterSpacing",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "LineHeight",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "BackgroundPosition",
                [
                  "a",
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Color",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "BackgroundColor",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "BorderColor",
                [
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "TransformOrigin",
                [
                  "a",
                  "a",
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Matrix",
                [
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "Matrix3d",
                [
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "Translate",
                [
                  "a",
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Translate3d",
                [
                  "a",
                  "a",
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "TranslateX",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "TranslateY",
                [
                  "a",
                  "Html.Animation.Properties.Length"
                ]
              ],
              [
                "Scale",
                [
                  "a"
                ]
              ],
              [
                "Scale3d",
                [
                  "a",
                  "a",
                  "a"
                ]
              ],
              [
                "ScaleX",
                [
                  "a"
                ]
              ],
              [
                "ScaleY",
                [
                  "a"
                ]
              ],
              [
                "ScaleZ",
                [
                  "a"
                ]
              ],
              [
                "Rotate",
                [
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "Rotate3d",
                [
                  "a",
                  "a",
                  "a",
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "RotateX",
                [
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "RotateY",
                [
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "Skew",
                [
                  "a",
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "SkewX",
                [
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "SkewY",
                [
                  "a",
                  "Html.Animation.Properties.Angle"
                ]
              ],
              [
                "Perspective",
                [
                  "a"
                ]
              ]
            ]
          }
        ],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/Elm-Multiset",
    "version": "1.0.5",
    "docs": [
      {
        "name": "Multiset",
        "comment": " A Multiset is a mapping from comparable keys to Int counts. What makes a\nMultiset special is that you never have to worry about Maybe values; instead\nyou'll get zero. This simplifies the insert and query functions.\n\nMultisets do not store counts of zero explicitly, so don't expect them in `map`,\n`filter`, `counts`, and the like. You should equate multisets with the given\n`equals` function and not the built-in `(==)`. Multisets support negative\ncounts.\n\n**NOTICE:** This package is being renamed `mgold/elm-multiset`, lowercase, for compatibility.\n\n# Definition\n@docs Multiset\n\n# Create\n@docs empty, singleton, fromList, fromAssocList\n\n# Update\n@docs add, remove, set, update\n\n# Query\n@docs get, equals, keys, counts, toList\n\n# Transform\n@docs map, map2, foldl, foldr, filter, partition\n\n",
        "aliases": [
          {
            "name": "Multiset",
            "comment": " A Multiset is a wrapper around\n[Dict](http://package.elm-lang.org/packages/elm-lang/core/latest/Dict), but you\nshould treat the type as opaque — except when you're trying to solve type\ninference errors. ",
            "args": [
              "comparable"
            ],
            "type": "Dict.Dict comparable Int"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add a key to the multiset, incrementing its count by one. ",
            "type": "comparable -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "counts",
            "comment": " Get all of the counts in a multiset. ",
            "type": "Multiset.Multiset comparable -> List Int"
          },
          {
            "name": "empty",
            "comment": " Create an empty multiset. ",
            "type": "Multiset.Multiset comparable"
          },
          {
            "name": "equals",
            "comment": " Equate two multisets. You should use this function instead of `(==)`, which\nequates the tree representation rather than the abstract container. You can also\nuse this function and `empty` for empty checking.\n\n    empty `equals` (fromAssocList [(\"foo\", 0)]) == True\n    empty `equals` singleton \"bar\" == False\n    (fromList [1,2,1]) `equals` (fromList [1,1,2]) == True\n\n",
            "type": "Multiset.Multiset comparable -> Multiset.Multiset comparable -> Bool"
          },
          {
            "name": "filter",
            "comment": " Keep a key-count pair when it satisfies a predicate. ",
            "type": "(comparable -> Int -> Bool) -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-count pairs in a dictionary, in order from lowest key to\nhighest key. ",
            "type": "(comparable -> Int -> b -> b) -> b -> Multiset.Multiset comparable -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-count pairs in a dictionary, in order from highest key to\nlowest key. ",
            "type": "(comparable -> Int -> b -> b) -> b -> Multiset.Multiset comparable -> b"
          },
          {
            "name": "fromAssocList",
            "comment": " Convert an association list of key-count pairs into a multiset. It is safe\nto have some counts be zero (but it's pointless to hard-code any zeroes).",
            "type": "List ( comparable, Int ) -> Multiset.Multiset comparable"
          },
          {
            "name": "fromList",
            "comment": " Convert a list of keys into a multiset, counting repeats. ",
            "type": "List comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "get",
            "comment": " Get the count of a key, which may be zero. ",
            "type": "comparable -> Multiset.Multiset comparable -> Int"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a multiset. ",
            "type": "Multiset.Multiset comparable -> List comparable"
          },
          {
            "name": "map",
            "comment": " Map over a multiset, changing the counts of the keys. It is safe to return\nzero. ",
            "type": "(comparable -> Int -> Int) -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "map2",
            "comment": " Map over two multisets, producing a new multiset. It is safe to return zero.\nYou can use this function to add two multisets: `map2 (always (+))`. Similar\napproaches will substract or find the max or min of multisets. ",
            "type": "(comparable -> Int -> Int -> Int) -> Multiset.Multiset comparable -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-count pairs which satisfy the predicate, and the second\ncontains the rest. ",
            "type": "(comparable -> Int -> Bool) -> Multiset.Multiset comparable -> ( Multiset.Multiset comparable, Multiset.Multiset comparable )"
          },
          {
            "name": "remove",
            "comment": " Remove a key from the multiset, decrementing its count by one. ",
            "type": "comparable -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "set",
            "comment": " Set the count of a key to a new integer, regardness of what it used to be. ",
            "type": "comparable -> Int -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "singleton",
            "comment": " Create a multiset containing the key once. ",
            "type": "comparable -> Multiset.Multiset comparable"
          },
          {
            "name": "toList",
            "comment": " Convert a multiset into an association list of key-count pairs. ",
            "type": "Multiset.Multiset comparable -> List ( comparable, Int )"
          },
          {
            "name": "update",
            "comment": " Update the count of a comparable using the given function. It is safe to\nreturn zero. ",
            "type": "comparable -> (Int -> Int) -> Multiset.Multiset comparable -> Multiset.Multiset comparable"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-animation",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Animation",
        "comment": " A library for animating between two `Float` values. For example, animate a panel's width from 100px to 300px over 2\nseconds, or make a button spin and grow on hover. Everything is a pure function (no signals or tasks), so you can use it\neasily within your architecture. You can also inspect animations to determine if they are still running and for how\nlong, and even smoothly retarget a different destination midflight.\n\nThe library encapsulates a 3-stage animation pipeline:\n\n* **Timekeeping:** You are expected to maintain a running clock. If you are using `elm-effects`, request `Effects.tick`\n    with an action to store the clock in the model. Otherwise, use `Time.fps` or `AnimationFrame.frame`, which provide\n    time *deltas* that you will have to sum either in your model or with using `Signal.foldp (+) 0`. However obtained,\n    this clock is used to create an animation and again to obtain the current value. You can also specify a delay and\n    the duration for your animation.\n\n* **Easing:** An easing function is what makes an animation come alive with acceleration and sometimes even elasticity.\n    When setting the easing function for your animation, I recommend [Dan's\n    library](http://package.elm-lang.org/packages/Dandandan/Easing/latest/Easing#easing-functions). (Dan also has your\n    back if you need to interpolate pairs or colors with the output of this library.)\n\n* **Interpolation:** It wouldn't be very useful is all animations went from 0 to 1 (the default), would it? You can\n    specify values to animate `from` and `to`. Furthermore, you can set the average speed (distance between these two\n    values per milisecond) instead of a duration.\n\nOnce you have your value at the current time, you can render it to any frontend you choose: Collage, Element, Html,\n[Turtles](http://package.elm-lang.org/packages/mgold/elm-turtle-graphics/latest)...\n\n## Basic Usage\n`animation` creates an animation starting at the given time (usually the current time). `animate` takes the current time\nand an animation, and produces the current value. Animations go through three phases (not related to the three stages of\nrendering): they are scheduled, they run, and then they are done.\n\n````elm\nimport Animation exposing (..)\nimport Time exposing (second)\n\nmyAnim = animation 0 |> from 100 |> to 300 |> duration (4*second) |> delay (1*second)\nList.map (\\t -> animate (t*second) myAnim) [0..6]\n-- [100, 100, 129.29, 200, 270.71, 300, 300]\n````\n\nNotice that the value remains constant during the delay and after the animation is done. You can also use `static` to\ncreate animations of constant value. By using these two degenerate cases, you ought to be able to keep animations in\nyour model without worrying about when they aren't actually animating.\n\n# Create\n@docs animation, static\n\n# Run\n@docs animate\n\n# Modify\n## Settings\nYou may set an animation's duration or speed but not both, since one determines the other.\n@docs duration, speed, delay, ease, from, to\n\n## Interruptions\n@docs undo, retarget\n\n# Inspect\n## Equality\n@docs equals\n\n## Lifecycle\n@docs isScheduled, isRunning, isDone\n\n## Physics\n@docs timeElapsed, timeRemaining, velocity\n\n## Settings\n@docs getStart, getDuration, getSpeed, getDelay, getEase, getFrom, getTo\n\n# The Animation Type\n@docs Animation\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Animation",
            "comment": " An Animation is an opaque type that represents a time-varying number (floating point value).\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "animate",
            "comment": " Produce the value of an animation at a given time.\n",
            "type": "Time.Time -> Animation.Animation -> Float"
          },
          {
            "name": "animation",
            "comment": " Create an animation that begins at the given time. By default, animations have no delay, last 750ms, and interpolate\nbetween 0 and 1 with a sinusoidal easing function. All of these can be changed.\n",
            "type": "Time.Time -> Animation.Animation"
          },
          {
            "name": "delay",
            "comment": " Set the delay of an animation to the time specified. An animation will not start until after the delay. The default\ndelay is 0. Note that the `Time` argument is _not_ the current running time but the delay to be set.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "duration",
            "comment": " Set the duration of an animation to the time specified. Note that the `Time` argument is _not_ the current running\ntime but the duration to be set.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "ease",
            "comment": " Set the easing function of an animation. It is expected that `f 0 == 0` and `f 1 == 1`. The default is a sinusoidal\nin-out.\n",
            "type": "(Float -> Float) -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "equals",
            "comment": " Equality on animations. Compared to `(==)` (which should not be used), this\nfunction handles the conversion of speed and duration, and start and delay. It\nalso samples the easing functions, which may produce false positives (but\nusually not in practice).\n\n    -- These are True\n    animation 0 `equals` animation 0\n    (animation 0 |> delay 10) `equals` animation 10\n    (animation 0 |> duration 1000) `equals` (animation 0 |> speed 0.001)\n\n    -- These are False\n    static 0 `equals` animation 0\n    (animation 0 |> from -1) `equals` animation 0\n    (animation 0 |> ease identity) `equals` animation 0\n",
            "type": "Animation.Animation -> Animation.Animation -> Bool"
          },
          {
            "name": "from",
            "comment": " Set the initial value of an animation. The default is 0.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "getDelay",
            "comment": " Get the delay of the animation.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getDuration",
            "comment": " Get the duration of the animation, not counting delay.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getEase",
            "comment": " Get the easing function of the animation.\n",
            "type": "Animation.Animation -> Float -> Float"
          },
          {
            "name": "getFrom",
            "comment": " Get the initial value of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "getSpeed",
            "comment": " Get the average speed of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "getStart",
            "comment": " Get the start time of the animation, not accounting for delay. For animations created with `animate`, this is the\nargument that was passed. For interrupted animations, this is when the interruption occured.\n",
            "type": "Animation.Animation -> Time.Time"
          },
          {
            "name": "getTo",
            "comment": " Get the final value of the animation.\n",
            "type": "Animation.Animation -> Float"
          },
          {
            "name": "isDone",
            "comment": " Determine if an animation is done, meaning that it has arrived at its final value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "isRunning",
            "comment": " Determine if an animation is running, meaning that it is currently changing value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "isScheduled",
            "comment": " Determine if an animation is scheduled, meaning that it has not yet changed value.\n",
            "type": "Time.Time -> Animation.Animation -> Bool"
          },
          {
            "name": "retarget",
            "comment": " Change the `to` value of a running animation, without an abrupt change in velocity. The easing function will be\nretained (but you can change it with `ease`). The animation will retain its average speed (but not necessarily\nduration). If you retarget multiple animations at once (e.g. x and y), you will need to sync their durations (perhaps to\nthe `timeRemaining` in the old animations).\n\nIf the retargeted animation is still scheduled, the `to` value is replaced. If it's already done, `from` becomes the\nold `to`, `to` and `start` are set to the values provided, and the delay is set to zero. If the old and new `to` values\nare the same, the animation is unchanged.\n",
            "type": "Time.Time -> Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "speed",
            "comment": " Set the _average_ speed of an animation. Speed is the rate at which the animation progresses between the `from` and\n`to` values per milisecond. Most easing functions will deviate from the average speed. You do not need to worry about\nthe sign. It is safe to alter the `from` and `to` values after setting speed.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "static",
            "comment": " Create a static animation that is always the given value.\n",
            "type": "Float -> Animation.Animation"
          },
          {
            "name": "timeElapsed",
            "comment": " Get the time elapsed since the animation started playing (after the end of delay). Will be zero for animations that\nare still scheduled, and is not bounded for animations that are already done.\n",
            "type": "Time.Time -> Animation.Animation -> Time.Time"
          },
          {
            "name": "timeRemaining",
            "comment": " Get the time that the animation has yet to play (or be delayed) before becoming done. Will be zero for animations\nthat are already done.\n",
            "type": "Time.Time -> Animation.Animation -> Time.Time"
          },
          {
            "name": "to",
            "comment": " Set the final value of an animation. The default is 1.\n\nFor animations that are already running, use `retarget`.\n",
            "type": "Float -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "undo",
            "comment": " Run an animation in reverse from its current state, beginning immediately (even if the animation was delayed or has\nbeen done for a while).\n\nUsually you don't want to undo an animation that has been retargeted; just retarget it again. Similarly, undoing an\nundone animation is frequently not what you want.\n",
            "type": "Time.Time -> Animation.Animation -> Animation.Animation"
          },
          {
            "name": "velocity",
            "comment": " Get the _current_ velocity of the animation, aproximated by looking 10ms forwards and backwards (the central\ndifference). The velocity may be negative.\n",
            "type": "Time.Time -> Animation.Animation -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-date-format",
    "version": "1.1.3",
    "docs": [
      {
        "name": "Date.Format",
        "comment": " Format strings for dates.\n\n@docs format, formatISO8601\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Use a format string to format a date. See the\n[README](https://github.com/mgold/elm-date-format/blob/master/README.md) for a\nlist of accepted formatters.\n",
            "type": "String -> Date.Date -> String"
          },
          {
            "name": "formatISO8601",
            "comment": " Formats a UTC date acording to\n[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601). This is commonly used to\nsend dates to a server. For example: `2016-01-06T09:22:00Z`.\n",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-nonempty-list",
    "version": "2.0.0",
    "docs": [
      {
        "name": "List.Nonempty",
        "comment": " A list that cannot be empty. The head and tail can be accessed without Maybes. Most other list functions are\navailable.\n\n# Definition\n@docs Nonempty\n\n# Create\n@docs fromElement, fromList\n\n# Access\n@docs head, tail, toList, get, sample\n\n# Inspect\nNonempty lists support equality with the usual `(==)` operator (provided their contents also support equality).\n@docs isSingleton, length, member, all, any\n\n# Convert\n@docs cons, (:::), append, pop, reverse, concat\n\n# Swap\n@docs replaceHead, replaceTail, dropTail\n\n# Map\n@docs map, indexedMap, map2, andMap, concatMap\n\n# Filter\n@docs filter\n\n# Fold\nTo fold or scan from the right, reverse the list first.\n@docs foldl, foldl1, scanl, scanl1\n\n# Sort\n@docs sort, sortBy, sortWith\n\n# Deduplicate\nThe nonempty list's elements must support equality (e.g. not functions or signals). Otherwise  you will get a runtime error.\n@docs dedup, uniq\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Nonempty",
            "comment": " The Nonempty type. If you have both a head and tail, you can construct a\nnonempty list directly. Otherwise use the helpers below instead.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Nonempty",
                [
                  "a",
                  "List a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": ":::",
            "comment": " Infix cons. Note that you cannot use this for pattern matching. Be sure to add `exposing ((:::))` to your import.\n\n    4 ::: Nonempty 3 [2,1] == Nonempty 4 [3,2,1]\n",
            "type": "a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a",
            "associativity": "right",
            "precedence": 5
          },
          {
            "name": "all",
            "comment": " Determine if all elements satisfy the predicate.\n",
            "type": "(a -> Bool) -> List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "andMap",
            "comment": " Map over an arbitrary number of nonempty lists.\n\n    map2 (,) xs ys == map (,) xs `andMap` ys\n    head (map (,,) xs `andMap` ys `andMap` zs) == (head xs, head ys, head zs)\n",
            "type": "List.Nonempty.Nonempty (a -> b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "any",
            "comment": " Determine if any elements satisfy the predicate.\n",
            "type": "(a -> Bool) -> List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "append",
            "comment": " Append two nonempty lists together. `(++)` is _not_ supported.\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "concat",
            "comment": " Flatten a nonempty list of nonempty lists into a single nonempty list.\n",
            "type": "List.Nonempty.Nonempty (List.Nonempty.Nonempty a) -> List.Nonempty.Nonempty a"
          },
          {
            "name": "concatMap",
            "comment": " Map a given function onto a nonempty list and flatten the resulting nonempty lists. If you're chaining, you can\ndefine `andThen = flip concatMap`.\n",
            "type": "(a -> List.Nonempty.Nonempty b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "cons",
            "comment": " Add another element as the head of the list, pushing the previous head to the tail.\n",
            "type": "a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "dedup",
            "comment": " Remove _adjacent_ duplicate elements from the nonempty list.\n\n    dedup (Nonempty 1 [2, 2, 1]) == Nonempty 1 [2, 1]\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "dropTail",
            "comment": " Replace the tail with the empty list while leaving the head alone.\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "filter",
            "comment": " Filter a nonempty list. If all values are filtered out, return the singleton list containing the default value\nprovided. If any value is retained, the default value is not used. If you want to deal with a Maybe instead, use\n`toList >> List.filter yourPredicate >> fromList`.\n\n    filter isEven 0 (Nonempty 7 [2, 5]) == fromElement 2\n    filter isEven 0 (Nonempty 7 []) == fromElement 0\n\n",
            "type": "(a -> Bool) -> a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "foldl",
            "comment": " Reduce a nonempty list from the left with a base case.\n\n    foldl (++) \"\" (Nonempty \"a\" [\"b\", \"c\"]) == \"cba\"\n",
            "type": "(a -> b -> b) -> b -> List.Nonempty.Nonempty a -> b"
          },
          {
            "name": "foldl1",
            "comment": " Reduce a nonempty list from the left _without_ a base case. As per Elm convention, the first argument is the current\nelement and the second argument is the accumulated value. The function is first invoked on the _second_ element, using\nthe first element as the accumulated value, except for singleton lists in which has the head is returned.\n\n    foldl1 (++) (Nonempty \"a\" [\"b\", \"c\"]) == \"cba\"\n    foldl1 (++) (fromElement \"a\") == \"a\"\n\n    findMe = 42\n    minimizeMe n = abs (n-findMe)\n    nearest = foldl1 (\\a b -> if minimizeMe a < minimizeMe b then a else b) (Nonempty 10 [20,30,40,50,60])\n    nearest == 40\n",
            "type": "(a -> a -> a) -> List.Nonempty.Nonempty a -> a"
          },
          {
            "name": "fromElement",
            "comment": " Create a singleton list with the given element.\n",
            "type": "a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "fromList",
            "comment": " Create a nonempty list from an ordinary list, failing on the empty list.\n",
            "type": "List a -> Maybe.Maybe (List.Nonempty.Nonempty a)"
          },
          {
            "name": "get",
            "comment": " Get the item at the specified index. The head has index 0. Indices are modulused by the length so out-of-range\nerrors can't happen. This means that negative indices are supported, e.g. -1 to get the last element.\n",
            "type": "Int -> List.Nonempty.Nonempty a -> a"
          },
          {
            "name": "head",
            "comment": " Return the head of the list.\n",
            "type": "List.Nonempty.Nonempty a -> a"
          },
          {
            "name": "indexedMap",
            "comment": " Same as `map` but the function is also applied to the index of each element (starting at zero).\n",
            "type": "(Int -> a -> b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "isSingleton",
            "comment": " Determine if the nonempty list has exactly one element.\n",
            "type": "List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "length",
            "comment": " Find the length of the nonempty list.\n",
            "type": "List.Nonempty.Nonempty a -> Int"
          },
          {
            "name": "map",
            "comment": " Map a function over a nonempty list.\n",
            "type": "(a -> b) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "map2",
            "comment": " Map a function over two nonempty lists.\n",
            "type": "(a -> b -> c) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b -> List.Nonempty.Nonempty c"
          },
          {
            "name": "member",
            "comment": " Determine if an element is present in the nonempty list.\n",
            "type": "a -> List.Nonempty.Nonempty a -> Bool"
          },
          {
            "name": "pop",
            "comment": " Pop and discard the head, or do nothing for a singleton list. Useful if you\nwant to exhaust a list but hang on to the last item indefinitely.\n\n    pop (Nonempty 3 [2,1]) == Nonempty 2 [1]\n    pop (Nonempty 1 []) == Nonempty 1 []\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "replaceHead",
            "comment": " Exchange the head element while leaving the tail alone.\n",
            "type": "a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "replaceTail",
            "comment": " Exchange the tail for another while leaving the head alone.\n",
            "type": "List a -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "reverse",
            "comment": " Reverse a nonempty list.\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "sample",
            "comment": " Create a random generator that returns a value of the nonempty list chosen uniformly at random.\n",
            "type": "List.Nonempty.Nonempty a -> Random.Generator a"
          },
          {
            "name": "scanl",
            "comment": " Like `foldl`, but keep each intermediate value. For example, scan addition to create the cumulative sum up to each\nelement. The head of the new nonempty list is always the base case provided, and the length increases by 1.\n\n    scanl (++) \"\" (Nonempty \"a\" [\"b\", \"c\"]) == Nonempty \"\" [\"a\",\"ba\",\"cba\"]\n",
            "type": "(a -> b -> b) -> b -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty b"
          },
          {
            "name": "scanl1",
            "comment": " Like `foldl1`, but keep each intermediate value. The head and length are not changed.\n\nThis example starts with the number of ways to roll exactly index _i_ on two six-sided dice (the probability density\nfunction), and turns it into the number of ways to roll at least _i_ (the cumulative density function).\n\n    dicePDF = Nonempty 0 [0,1,2,3,4,5,6,5,4,3,2,1]\n    diceCDF = scanl1 (+) dicePDF\n    diceCDF == Nonempty 0 [0,1,3,6,10,15,21,26,30,33,35,36]\n",
            "type": "(a -> a -> a) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "sort",
            "comment": " Sort a nonempty list of comparable things, lowest to highest.\n",
            "type": "List.Nonempty.Nonempty comparable -> List.Nonempty.Nonempty comparable"
          },
          {
            "name": "sortBy",
            "comment": " Sort a nonempty list of things by a derived property.\n",
            "type": "(a -> comparable) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "sortWith",
            "comment": " Sort a nonempty list of things by a custom comparison function.\n",
            "type": "(a -> a -> Basics.Order) -> List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          },
          {
            "name": "tail",
            "comment": " Return the tail of the list.\n",
            "type": "List.Nonempty.Nonempty a -> List a"
          },
          {
            "name": "toList",
            "comment": " Convert to an ordinary list.\n",
            "type": "List.Nonempty.Nonempty a -> List a"
          },
          {
            "name": "uniq",
            "comment": " Remove _all_ duplicate elements from the nonempty list, with the remaining elements ordered by first occurrence.\n\n    uniq (Nonempty 1 [2, 2, 1]) == Nonempty 1 [2]\n",
            "type": "List.Nonempty.Nonempty a -> List.Nonempty.Nonempty a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-random-pcg",
    "version": "1.4.0",
    "docs": [
      {
        "name": "Random.PCG.Interop",
        "comment": " Provides a function to create a PCG seed from a seed in the core library.\nThis is useful for library writers who need a splittable or most robust PRNG but\ndon't want to require client code to use the PCG implementation.\n\n```elm\nimport Random\nimport Random.PCG\nimport Random.PCG.Interop as Random.PCG\n```\n\n@docs fission\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fission",
            "comment": " Use the core library's random seed to produce a PCG random seed.\n\nIt seems that the package website doesn't show modules in type annotations, so here it is in full:\n\n    fission : Random.Seed -> (Random.PCG.Seed, Random.Seed)\n\n",
            "type": "Random.Seed -> ( Random.PCG.Seed, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Random.PCG",
        "comment": " Generate psuedo-random numbers and values, by constructing\n[generators](#Generator) for them. There are a bunch of basic generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier generators\nwith functions like [`list`](#list) and [`map`](#map).\n\nYou run a `Generator` by calling the [`generate`](#generate) function, which\nalso takes a random [`Seed`](#Seed), and passes back a new seed. You should\nnever use the same seed twice because you will get the same result! If you need\nrandom values over time, you should store the most recent seed in your model. If\nyou have many separate models, you can give them all [independent\nseeds](#independentSeed).\n\nThis is an implementation of [PCG](http://www.pcg-random.org/) by M. E. O'Neil,\nand is not cryptographically secure.\n\n# Getting Started\n@docs initialSeed2, generate\n\n# Basic Generators\n@docs Generator, bool, int, float, oneIn\n\n# Combining Generators\n@docs pair, list, maybe, choice\n\n# Custom Generators\n@docs constant, map, map2, map3, map4, map5, andMap, andThen, filter\n\n# Working With Seeds\n@docs Seed, initialSeed, independentSeed, fastForward, toJson, fromJson, split\n\n# Constants\n@docs maxInt, minInt\n",
        "aliases": [],
        "types": [
          {
            "name": "Generator",
            "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n",
            "args": [
              "a"
            ],
            "cases": []
          },
          {
            "name": "Seed",
            "comment": " A `Seed` is the source of randomness in the whole system. It hides the\ncurrent state of the random number generator.\n\nGenerators, not seeds, are the primary data structure for generating random\nvalues. Generators are much easier to chain and combine than functions that take\nand return seeds. Creating and managing seeds should happen \"high up\" in your\nprogram.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "andMap",
            "comment": " Map over any number of generators.\n\n    randomPerson : Generator Person\n    randomPerson =\n      person `map` genFirstName\n          `andMap` genLastName\n          `andMap` genBirthday\n          `andMap` genPhoneNumber\n          `andMap` genAddress\n          `andMap` genEmail\n",
            "type": "Random.PCG.Generator (a -> b) -> Random.PCG.Generator a -> Random.PCG.Generator b"
          },
          {
            "name": "andThen",
            "comment": " Chain random operations by providing a callback that accepts a\nrandomly-generated value. The random value can be used to drive more randomness.\n\nThe argument order matches `andThen`s from core, but requires the use of `flip`\nto match `map` or work with `|>` chains.\n\nThis example shows how we can use `andThen` to generate a list of random values\n*and* random length. Then we use `map` to apply a stateless function to that\nlist. Assume we already have `genName : Generator String` defined.\n\n    authors : Generator String\n    authors =\n      int 1 5 -- number of authors\n      |> (flip andThen) (\\i -> list i genName)\n      |> map (\\ns ->\n        case ns of\n          [n] ->\n            \"Author: \" ++ n\n          n::ns ->\n            \"Authors: \" ++ String.join \", \" ns ++ \" and \" ++ n\n          [] ->\n            \"This can't happen\"\n        )\n\nIf you find yourself calling `constant` in every branch of the callback, you can\nprobably use `map` instead.\n",
            "type": "Random.PCG.Generator a -> (a -> Random.PCG.Generator b) -> Random.PCG.Generator b"
          },
          {
            "name": "bool",
            "comment": " Create a generator that produces boolean values with equal probability. This\nexample simulates flipping three coins and checking if they're all heads.\n\n    threeHeads : Generator Bool\n    threeHeads =\n      map3 (\\a b c -> a && b && c) bool bool bool\n",
            "type": "Random.PCG.Generator Bool"
          },
          {
            "name": "choice",
            "comment": " Choose between two values with equal probability.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n      choice Heads Tails\n",
            "type": "a -> a -> Random.PCG.Generator a"
          },
          {
            "name": "constant",
            "comment": " Create a generator that always produces the value provided. This is useful\nwhen creating complicated chained generators and you need to handle a simple\ncase. It's also useful for the base case of recursive generators.\n",
            "type": "a -> Random.PCG.Generator a"
          },
          {
            "name": "fastForward",
            "comment": " Fast forward a seed the given number of steps, which may be negative (the\nseed will be \"rewound\"). This allows a single seed to serve as a random-access\nlookup table of random numbers. (To be sure no one else uses the seed, use\n`generate independentSeed` to split off your own.)\n\n    diceRollTable : Int -> Int\n    diceRollTable i =\n      fastForward i mySeed |> generate (int 1 6) |> fst\n",
            "type": "Int -> Random.PCG.Seed -> Random.PCG.Seed"
          },
          {
            "name": "filter",
            "comment": " Filter a generator so that all generated values satisfy the given predicate.\n\n    evens : Generator Int\n    evens =\n      filter (\\i -> i % 2 == 0) (int minInt maxInt)\n\nIf the predicate is unsatisfiable, the generator will not terminate, your\napplication will crash with a stack overflow, and you will be sad. You should\nalso avoid predicates that are merely very difficult to satisfy.\n\n    badCrashingGenerator =\n      filter (\\_ -> False) anotherGenerator\n\n    likelyCrashingGenerator =\n      filter (\\i -> i % 2000 == 0) (int minInt maxInt)\n",
            "type": "(a -> Bool) -> Random.PCG.Generator a -> Random.PCG.Generator a"
          },
          {
            "name": "float",
            "comment": " Generate floats in a given range. The following example is a generator\nthat produces numbers between 0 and 1.\n\n    probability : Generator Float\n    probability =\n        float 0 1\n",
            "type": "Float -> Float -> Random.PCG.Generator Float"
          },
          {
            "name": "fromJson",
            "comment": " A JSON decoder that can recover seeds encoded using `toJson`.\n\n    Json.Decode.decodeValue fromJson (toJson mySeed) == Ok mySeed\n\nIf the JSON is an array of one or two integers, or just an integer, these will\nbe used to initialize a new seed. This can be useful when you sometimes have an\nold seed and sometimes need a new one. The integers should be 32 random bits.\n",
            "type": "Json.Decode.Decoder Random.PCG.Seed"
          },
          {
            "name": "generate",
            "comment": " Generate a random value as specified by a given `Generator`, using a `Seed`\nand returning a new one.\n\nIn the following example, we are trying to generate numbers between 0 and 100\nwith the `int 0 100` generator. Each time we call `generate` we need to provide\na seed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\n    (x, seed1) = generate (int 0 100) seed0\n    (y, seed2) = generate (int 0 100) seed1\n    (z, seed3) = generate (int 0 100) seed2\n    [x, y, z] -- [85, 0, 38]\n\nNotice that we use different seeds on each line. This is important! If you reuse\nthe same seed, you get the same results.\n\n    (x, _) = generate (int 0 100) seed0\n    (y, _) = generate (int 0 100) seed0\n    (z, _) = generate (int 0 100) seed0\n    [x,y,z] -- [85, 85, 85]\n\nAs you can see, threading seeds through many calls to `generate` is tedious and\nerror-prone. That's why this library includes many functions to build more\ncomplicated generators, allowing you to call `generate` only a small number of\ntimes.\n\nOur example is best written as:\n\n    (xs, newSeed) = generate (list 3 <| int 0 100) seed0\n    xs -- [85, 0, 38]\n\n",
            "type": "Random.PCG.Generator a -> Random.PCG.Seed -> ( a, Random.PCG.Seed )"
          },
          {
            "name": "independentSeed",
            "comment": " A generator that produces a seed that is independent of any other seed in\nthe program. These seeds will generate their own unqiue sequences of random\nvalues. They are useful when you need an unknown amount of randomness *later*\nbut can request only a fixed amount of randomness *now*.\n\nLet's say you write a component that uses some randomness to initialize itself\nand then never needs randomness again. You can easily write a `Generator\nComponent` by mapping over the generators it needs. But if component requires\nrandomness after initialization, it should keep its own independent seed, which\nit can get by mapping over *this* generator.\n\n    type alias Component = { seed : Seed }\n\n    genComponent : Generator Component\n    genComponent = map Component independentSeed\n\nIf you have a lot of components, you can initialize them like so:\n\n    genComponents : List (Seed -> a) -> Generator (List a)\n    genComponents constructors =\n      list (List.length constructors) independentSeed\n          |> map (List.map2 (<|) constructors)\n\nThe independent seeds are extremely likely to be distinct for all practical\npurposes. However, it is not proven that there are no pathological cases.\n",
            "type": "Random.PCG.Generator Random.PCG.Seed"
          },
          {
            "name": "initialSeed",
            "comment": " Like `initialSeed2`, but takes only one integer. Mostly for compatibility\nwith core.\n",
            "type": "Int -> Random.PCG.Seed"
          },
          {
            "name": "initialSeed2",
            "comment": " Take two integers to fully initialize the 64-bit state of the random\nnumber generator. Only the least significant 32 bits of each integer matter, and\nthose bits should be as random as possible.\n\nYou can generate and copy random integers to create a reproducible psuedo-random\ngenerator.\n\n    $ node\n    > Math.floor(Math.random()*0xFFFFFFFF)\n    227852860\n    > Math.floor(Math.random()*0xFFFFFFFF)\n    1498709020\n\n    -- Elm\n    seed0 : Seed\n    seed0 = initialSeed2 227852860 1498709020\n\nAlternatively, you can generate the random integers on page load and pass them\nthrough a port. The program will be different every time.\n\n    -- Elm\n    port randomSeed : (Int, Int)\n\n    seed0 : Seed\n    seed0 = (uncurry initialSeed2) randomSeed\n\n    -- JS\n    Elm.fullscreen(Elm.ModuleName,\n      {randomSeed: [Math.floor(Math.random()*0xFFFFFFFF),\n                    Math.floor(Math.random()*0xFFFFFFFF)] })\n\nEither way, you should initialize a random seed only once. After that, whenever\nyou use a seed, you'll get another one back.\n",
            "type": "Int -> Int -> Random.PCG.Seed"
          },
          {
            "name": "int",
            "comment": " Generate 32-bit integers in a given range, inclusive.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n\n*Performance note:* This function will be ~1.5x faster if the range (i.e. `max - min + 1`) is a power of two. The\neffect will only be noticable if you are generating tens of thousands of random integers.\n\n",
            "type": "Int -> Int -> Random.PCG.Generator Int"
          },
          {
            "name": "list",
            "comment": " Create a list of random values of a given length.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n",
            "type": "Int -> Random.PCG.Generator a -> Random.PCG.Generator (List a)"
          },
          {
            "name": "map",
            "comment": " Transform the values produced by a generator using a stateless function as a\ncallback.\n\nThese examples show how to generate letters based on a basic integer generator.\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n",
            "type": "(a -> b) -> Random.PCG.Generator a -> Random.PCG.Generator b"
          },
          {
            "name": "map2",
            "comment": " Combine two generators. This is useful when you have a function with two\narguments that both need to be given random inputs.\n\n    pointInCircle : Float -> Generator (Float, Float)\n    pointInCircle radius =\n      let\n        r = float 0 radius\n        theta = map degrees (float 0 360)\n      in\n        map2 (curry fromPolar) r theta\n\n",
            "type": "(a -> b -> c) -> Random.PCG.Generator a -> Random.PCG.Generator b -> Random.PCG.Generator c"
          },
          {
            "name": "map3",
            "comment": " Combine three generators. This could be used to produce random colors.\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (float 0 360)) (float 0 1) (float 0 1)\n",
            "type": "(a -> b -> c -> d) -> Random.PCG.Generator a -> Random.PCG.Generator b -> Random.PCG.Generator c -> Random.PCG.Generator d"
          },
          {
            "name": "map4",
            "comment": " Combine four generators. This could be used to produce random transparent\ncolors.\n\n    rgba : Generator Color.Color\n    rgba =\n      map4 Color.rgba (int 0 255) (int 0 255) (int 0 255) (float 0 1)\n",
            "type": "(a -> b -> c -> d -> e) -> Random.PCG.Generator a -> Random.PCG.Generator b -> Random.PCG.Generator c -> Random.PCG.Generator d -> Random.PCG.Generator e"
          },
          {
            "name": "map5",
            "comment": " Combine five generators.\n",
            "type": "(a -> b -> c -> d -> e -> f) -> Random.PCG.Generator a -> Random.PCG.Generator b -> Random.PCG.Generator c -> Random.PCG.Generator d -> Random.PCG.Generator e -> Random.PCG.Generator f"
          },
          {
            "name": "maxInt",
            "comment": " The maximum value for randomly generated 32-bit ints. ",
            "type": "Int"
          },
          {
            "name": "maybe",
            "comment": " Produce `Just` a value on `True`, and `Nothing` on `False`.\n\nYou can use `bool` or `oneIn n` for the first argument.\n",
            "type": "Random.PCG.Generator Bool -> Random.PCG.Generator a -> Random.PCG.Generator (Maybe.Maybe a)"
          },
          {
            "name": "minInt",
            "comment": " The minimum value for randomly generated 32-bit ints. ",
            "type": "Int"
          },
          {
            "name": "oneIn",
            "comment": " Produce `True` one-in-n times on average.\n\nDo not pass a value less then one to this function.\n\n    flippedHeads = oneIn 2\n    rolled6 = oneIn 6\n",
            "type": "Int -> Random.PCG.Generator Bool"
          },
          {
            "name": "pair",
            "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n",
            "type": "Random.PCG.Generator a -> Random.PCG.Generator b -> Random.PCG.Generator ( a, b )"
          },
          {
            "name": "split",
            "comment": " Split a seed into two new seeds. Each seed will generate different random\nnumbers.\n\n**This function is deprecated** in favor of `independentSeed`. If you absolutely\nneed two seeds, use `generate independentSeed` instead.\n\nSplitting is a reproducible operation; just like generating numbers, it\nwill be the same every time. Similarly, once you split a seed, you must not\nreuse it.\n",
            "type": "Random.PCG.Seed -> ( Random.PCG.Seed, Random.PCG.Seed )"
          },
          {
            "name": "toJson",
            "comment": " Serialize a seed as a [JSON value](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode#Value)\nto be sent out a port, stored in local storage, and so on. The seed can be\nrecovered using `fromJson`.\n\nDo not inspect or change the resulting JSON value.\n",
            "type": "Random.PCG.Seed -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-random-sample",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Random.Array",
        "comment": "\n\n# Random Sampling of Arrays\n\nThese implementations are thought to be correct as validated by non-rigorous\ntests, and should be fine for games and simulations. Please do not trust them\nwhen statisical or especially cryptographic randomness is required.\n\nFor best results, invoke `Random.initialSeed` only once in your program, and\nthread the returned new seeds through. For a good random seed, evaluate\n`Math.floor(Math.random()*0xFFFFFFFF)` either once and hard-code the result, or\nas the value of `port initialSeed : Int`.\n\n\n@docs sample, choose, shuffle\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "choose",
            "comment": " Sample without replacement: produce a randomly selected element of the\narray, the new seed, and the array with that element omitted (shifting all later\nelements down). ",
            "type": "Random.Seed -> Array.Array a -> ( Maybe.Maybe a, Random.Seed, Array.Array a )"
          },
          {
            "name": "sample",
            "comment": " Sample with replacement: produce a randomly selected element of the\narray and the new seed. Takes O(1) time. ",
            "type": "Random.Seed -> Array.Array a -> ( Maybe.Maybe a, Random.Seed )"
          },
          {
            "name": "shuffle",
            "comment": " Shuffle the array using the Fisher-Yates algorithm. Takes O(_n_ log _n_)\ntime and O(_n_) additional space. ",
            "type": "Random.Seed -> Array.Array a -> ( Array.Array a, Random.Seed )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-socketio",
    "version": "2.0.4",
    "docs": [
      {
        "name": "SocketIO",
        "comment": " A module for working with [Socket.io](http://socket.io/) servers. This\nmodule uses Socket.io 1.4.4.\n\nCompared to native JavaScript socket.io, this library is limited in its ability\nto dynamically change hosts, handle errors, and data must be encoded as a\nstring.\n\nSee the README for information on examples, including one for The Elm Architecture.\n\n# Creating a Socket\nAvoid creating signals of sockets.\n@docs io, Options, defaultOptions\n\n# Sending and Receiving\nThese functions should be used with `Task.andThen` to provide them with a socket\nobtained with `io`.\n@docs emit, on, connected\n\n# The Socket Type\n@docs Socket\n",
        "aliases": [
          {
            "name": "Options",
            "comment": " A type for options on a socket. See the [Socket.io docs](http://socket.io/docs/client-api/)\nfor further explanation.\n",
            "args": [],
            "type": "{ multiplex : Bool , reconnection : Bool , reconnectionDelay : Time.Time , reconnectionDelayMax : Time.Time , timeout : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Socket",
            "comment": " An opaque type representing a socket. You cannot access anything directly,\nonly through the API provided above.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "connected",
            "comment": " Set up a signal of bools indicating whether or not the socket is connected.\nYou should initialize the mailbox to `False`; if the server is available a\n`True` event will be sent almost immediately. If the server is not available,\n`io` will not complete and therefore this task will not run. If the socket\ndisconnects (and then reconnects later), the address's mailbox's signal will\nhave events indicating that.\n",
            "type": "Signal.Address Bool -> SocketIO.Socket -> Task.Task x ()"
          },
          {
            "name": "defaultOptions",
            "comment": " Default options for a new socket and manager. These are the same as\nSocket.io itself.\n",
            "type": "SocketIO.Options"
          },
          {
            "name": "emit",
            "comment": " Send a string on the socket using the given event name. To serialize your\nElm values, use `toString` or `Json.Encode`.\n\n    port outgoing = socket `Task.andThen` emit \"myEvent\" \"Testing 1 2 3\"\n",
            "type": "String -> String -> SocketIO.Socket -> Task.Task x ()"
          },
          {
            "name": "io",
            "comment": " Create a socket, given a hostname and options.\n\n    socket = io \"http://localhost:8001\" defaultOptions\n\nIt's possible to run the Elm Reactor and your Socket.io node server\nsimultaneously on different ports.\n\nThe task never fails; if the server is unreachable it will never succeed.\n",
            "type": "String -> SocketIO.Options -> Task.Task x SocketIO.Socket"
          },
          {
            "name": "on",
            "comment": " Receive data of the given event name at a mailbox as a string. If data\nreceived is not already a string, it will be JSON-encoded. Unserializable JS\nvalues become `\"null\"`; this is a good initial value when you set up the\nmailbox.\n\n    mailbox = Signal.mailbox \"null\"\n    port incoming = socket `Task.andThen` on \"myEvent\" mailbox.address\n",
            "type": "String -> Signal.Address String -> SocketIO.Socket -> Task.Task x ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mgold/elm-turtle-graphics",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Turtle.Advanced",
        "comment": " Advanced turtle drawing functions for those comfortable programming in Elm. This module is meant to be combined with\nthe simple one, so either import both `exposing (..)` or:\n\n````elm\nimport Turtle exposing (Step)\nimport Turtle.Advanced as Turtle\n````\n\nYes, this will work and place all the functions into the `Turtle` namespace.\n\n# Basics\n@docs back, stay\n\n# Shapes\n@docs ngon, circle, star\n\n# Functional Modifiers\nThese functions wrap steps with transformations that are undone afterwards, rather than leaving state with the turtle.\nThey still leak state a little, so be careful. Also, they may be made to leak less in a MINOR release.\n@docs scaled, rotated, invisibly\n\n# Atomicity\n@docs atomically\n\n# Randomness\n@docs randomly\n\n# Absolute Positioning\n@docs teleport, rotateTo\n\n# Working with Steps\n## Drawing\n@docs DrawOptions, defaultDrawOptions, drawWith\n\n## Animating\n@docs AnimateOptions, defaultAnimateOptions, animateWith\n\n## Inspecting\n@docs length, depth\n\n",
        "aliases": [
          {
            "name": "AnimateOptions",
            "comment": " Customize the `animateWith` function by supplying the initial random seed, the dimensions of the drawing, and the\nclock on which the animation progresses.\n",
            "args": [],
            "type": "{ seed : Random.Seed , dims : Signal.Signal ( Int, Int ) , clock : Signal.Signal () }"
          },
          {
            "name": "DrawOptions",
            "comment": " Customize the `drawWith` function by supplying the initial random seed and the dimensions of the drawing.\n",
            "args": [],
            "type": "{ seed : Random.Seed, dims : ( Int, Int ) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "animateWith",
            "comment": " Animate the steps running sequentially, using the options given. Useful if `animate` isn't quite meeting your needs.\n",
            "type": "Turtle.Advanced.AnimateOptions -> List Turtle.Step -> Signal.Signal Graphics.Element.Element"
          },
          {
            "name": "atomically",
            "comment": " The same as `make`, except when using `animate` the steps are all run together (atomically). Also considered to be a\nsingle step by `depth` and `length`. Used by the geometry helpers in this library to draw shapes immediately rather than\nwatch the turtle trace them out.\n",
            "type": "List Turtle.Step -> Turtle.Step"
          },
          {
            "name": "back",
            "comment": " Move the turtle back a distance, without affecting the rotation. The turtle will still draw the path if the pen is\ndown.\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "circle",
            "comment": " Create a circle of the given radius, centered at the current location.\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "defaultAnimateOptions",
            "comment": " The options used for `animate`. Uses the same seed as the draw options, `Window.dimensions`, and a 5fps timer. You\ncan use a faster timer, or `Mouse.clicks`, among other things.\n",
            "type": "Turtle.Advanced.AnimateOptions"
          },
          {
            "name": "defaultDrawOptions",
            "comment": " The options used for `draw`. Uses an arbitrary seed and the arbitrary dimensions of 1000x1000.\n",
            "type": "Turtle.Advanced.DrawOptions"
          },
          {
            "name": "depth",
            "comment": " Determine the recursive depth of a list of Steps.\n",
            "type": "List Turtle.Step -> Int"
          },
          {
            "name": "drawWith",
            "comment": " Draw the steps immediately, using the options given. You will usually use this with `Signal.map` to rapidly iterate\na design, change a drawing based on user input, or create a custom animation.\n",
            "type": "Turtle.Advanced.DrawOptions -> List Turtle.Step -> Graphics.Element.Element"
          },
          {
            "name": "invisibly",
            "comment": " Run a step with the pen up, and then put it down to start drawing. Useful for moving the a new location.\n",
            "type": "Turtle.Step -> Turtle.Step"
          },
          {
            "name": "length",
            "comment": " Determine the number of steps in a list of Steps, accounting for recursion.\n",
            "type": "List Turtle.Step -> Int"
          },
          {
            "name": "ngon",
            "comment": " Create a regular n-gon with sides of length 50. Use `scale` or `scaled` to increase the size. The turtle begins the\nfirst edge immediately; you may want to position and rotate the turtle first.\n",
            "type": "Int -> Turtle.Step"
          },
          {
            "name": "randomly",
            "comment": " Provide access to a random seed, and therefore, the Random library. This is much more powerful than `withRandom`\ntaking a random float, but carries with it the responsibility to pass back an unused seed. To use with a Generator, call\n`Random.generate theGenerator`.\n",
            "type": "(Random.Seed -> ( Turtle.Step, Random.Seed )) -> Turtle.Step"
          },
          {
            "name": "rotateTo",
            "comment": " Rotate to a given angle in degrees, regardless of the old rotation.\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "rotated",
            "comment": " Rotate a step left (counterclockwise) by a given angle in degrees, and then rotate back (assuming the step itself does not change the angle.)\n",
            "type": "Float -> Turtle.Step -> Turtle.Step"
          },
          {
            "name": "scaled",
            "comment": " Scale a step by a given factor without affecting later actions (assuming the step itself does not change the scale).\n",
            "type": "Float -> Turtle.Step -> Turtle.Step"
          },
          {
            "name": "star",
            "comment": " Create a star polygon. The first argument specifies the number of points. The second argument specifies the ratio of\nthe exterior angle to the interior angle. A pentagram is `star 5 3` and a Star of David is `star 6 2`. This can take\nsome experimentation to get the effect you need; sometimes a star comes out as a convex polygon.\n\nEach side has length 50. Use `scale` or `scaled` to increase the size. The turtle begins the\nfirst edge immediately; you may want to position and rotate the turtle first.\n",
            "type": "Int -> Float -> Turtle.Step"
          },
          {
            "name": "stay",
            "comment": " Tell the turtle to do nothing.\n",
            "type": "Turtle.Step"
          },
          {
            "name": "teleport",
            "comment": " Move to a given location, regardless of the old location.\n",
            "type": "( Float, Float ) -> Turtle.Step"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Turtle",
        "comment": " A tiny language for teaching a virtual turtle to draw. The turtle carries a pen and draws lines as it moves.\n\nMove the turtle around by making a list of steps. Then give it to the turtle with `animate`. Like this:\n\n````elm\nimport Turtle exposing (..)\n\nsteps = [forward 20, left 90, forward 10]\nmain = animate steps\n````\n\nThe turtle starts in the middle of the page facing up (90 degrees), with the pen down using black ink.\n\n# Moving\n@docs left, right, forward\n\n# Drawing\n@docs penUp, penDown, penColor\n\n# Special\n@docs make, withRandom, scale\n\n# Running Steps\nOnce you've made a list of steps, use one of these functions to see it happen.\n@docs animate, draw\n\n# What is a Step?\n@docs Step\n\n",
        "aliases": [
          {
            "name": "Step",
            "comment": " A Step is an action that a turtle can do.\n",
            "args": [],
            "type": "Turtle.Core.Step"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "animate",
            "comment": " Animate the turtle drawing, showing the each step as it moves.\n",
            "type": "List Turtle.Step -> Signal.Signal Graphics.Element.Element"
          },
          {
            "name": "draw",
            "comment": " Run the turtle and immediately show the result. It is useful when you are\nchanging your code quickly and don't want to wait for the turtle to move.\n",
            "type": "List Turtle.Step -> Graphics.Element.Element"
          },
          {
            "name": "forward",
            "comment": " Move the turtle forward by a certain amount. How can you make the turtle move backwards?\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "left",
            "comment": " Turn the turtle left by a certain number of degrees.\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "make",
            "comment": " Do every step in the list. Really useful for giving names to small jobs. Think about `make star`, or making a\nfive-pointed star with `make (star 5)`.\n",
            "type": "List Turtle.Step -> Turtle.Step"
          },
          {
            "name": "penColor",
            "comment": " Change the color of the drawing.\n",
            "type": "Color.Color -> Turtle.Step"
          },
          {
            "name": "penDown",
            "comment": " Put the pen back down so that the turtle starts drawing again.\n",
            "type": "Turtle.Step"
          },
          {
            "name": "penUp",
            "comment": " Lift the pen from the paper so that nothing is drawn.\n",
            "type": "Turtle.Step"
          },
          {
            "name": "right",
            "comment": " Turn the turtle right by a certain number of degrees.\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "scale",
            "comment": " Make moving forward bigger or smaller. The numbers multiply, so doing `scale 3` and then `scale 5` is the same as\ndoing `scale 15`.\n",
            "type": "Float -> Turtle.Step"
          },
          {
            "name": "withRandom",
            "comment": " Give a step-making function a random number between 0 and 1.\n",
            "type": "(Float -> Turtle.Step) -> Turtle.Step"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "mmetcalfe/elm-random-distributions",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Random.Distributions",
        "comment": " This library provides non-uniform distributions for the core Random library.\n\n# Generators\n@docs normal\n\n# Distribution functions\n@docs normalCumulative\n@docs normalDensity\n@docs normalDensityInverse\n@docs normalQuantile\n@docs erf\n@docs erfc\n@docs erfinv\n@docs probit\n\n# Other functions\n@docs quantile\n\n## Ziggurat algorithm\n\nHelper functions implementing the [Ziggurat\nalgorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm).\n\n@docs ziggurat\n@docs zigguratTables\n@docs zigguratX1\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "erf",
            "comment": " The error function\nApproximation with a maximal error of 1.2*10^-7.\n\nDirectly from wikipedia:\nhttps://en.wikipedia.org/wiki/Error_function#Numerical_approximation\n\n    \\begin{align}\n    \\tau = {} & t\\cdot\\exp\\left(-x^2-1.26551223+1.00002368 t+0.37409196 t^2+0.09678418 t^3\\right.\\\\\n    & \\left.{}-0.18628806 t^4+0.27886807 t^5-1.13520398 t^6+1.48851587\\cdot t^7\\right. \\\\\n    & \\left.{}-0.82215223 t^8+0.17087277 t^9\\right)\n    \\end{align}\n",
            "type": "Float -> Float"
          },
          {
            "name": "erfc",
            "comment": " The complimentary error function.\nApproximation with a maximal error of 1.2*10^-7.\n",
            "type": "Float -> Float"
          },
          {
            "name": "erfinv",
            "comment": " The inverse of the error function.\n\nImplementation [from wikipedia](https://en.wikipedia.org/wiki/Error_function#Approximation_with_elementary_functions)\n",
            "type": "Float -> Float"
          },
          {
            "name": "normal",
            "comment": " Generate samples from a standard normal distribution.\n",
            "type": "Random.Generator Float"
          },
          {
            "name": "normalCumulative",
            "comment": " The cumulative distribution function of a normal distribution.\n\nImplemented using [the error function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function).\n\n    y = normalCumulative mu sigma x\n\n",
            "type": "Float -> Float -> Float -> Float"
          },
          {
            "name": "normalDensity",
            "comment": " The probability density function for a normal distribution.\n\n    y = normalDensity mu sigma x\n\n",
            "type": "Float -> Float -> Float -> Float"
          },
          {
            "name": "normalDensityInverse",
            "comment": " The inverse of the density function for a normal distribution.\n\n    x = normalDensityInverse mu sigma y\n\n",
            "type": "Float -> Float -> Float -> Float"
          },
          {
            "name": "normalQuantile",
            "comment": " The quantile function for a normal distribution with the given mean and standard deviation\n\ni.e. the inverse of the cumulative distribution function of the normal\ndistribution.\n\n    q = normalQuantile mu sigma p\n\nImplementation using the probit function [from Wikipedia](https://en.wikipedia.org/wiki/Normal_distribution#Quantile_function).\n",
            "type": "Float -> Float -> Float -> Float"
          },
          {
            "name": "probit",
            "comment": " The probit function.\n\nThe quantile function for the standard normal distribution (i.e. the inverse of\nthe cumulative distribution function of the standard normal distribution).\n\nImplemented using the inverse error function [as described on Wikipedia](https://en.wikipedia.org/wiki/Probit#Computation)\n",
            "type": "Float -> Float"
          },
          {
            "name": "quantile",
            "comment": " Produces sample quantiles of the xs corresponding to the given probabilities.\n\n    quantile samples probs\n\nBased on the [corresponding R function](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/quantile.html).\n\n`probs` is assumed to be a sorted list of probabilities.\n",
            "type": "List Float -> List Float -> List Float"
          },
          {
            "name": "ziggurat",
            "comment": " Implement the [Ziggurat algorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm) for one-sided distributions.\n\n    oneSidedNormalGenerator =\n      let\n        n = numLayers\n        pdfFunc = normalDensity 0 1\n        invPdfFunc = normalDensityInverse 0 1\n        cdfFunc = standardNormalCumulative\n        x1 = zigguratX1 n pdfFunc invPdfFunc cdfFunc\n        y1 = pdfFunc x1\n        listTables = zigguratTables n y1 layerArea pdfFunc invPdfFunc\n        tables = Array.fromList listTables\n        tailGen = zigguratNormalTail x1\n      in\n        ziggurat tables pdfFunc tailGen\n\n",
            "type": "Array.Array ( Float, Float ) -> (Float -> Float) -> Random.Generator Float -> Random.Generator Float"
          },
          {
            "name": "zigguratTables",
            "comment": " Generate the ziggurat tables.\n\nhttps://en.wikipedia.org/wiki/Ziggurat_algorithm#Generating_the_tables\n\n    tables = zigguratTables numLayers y1 layerArea pFunc invPFunc\n    (xs, ys) = List.unzip tables\n\n",
            "type": "Int -> Float -> Float -> (Float -> Float) -> (Float -> Float) -> List ( Float, Float )"
          },
          {
            "name": "zigguratX1",
            "comment": " Find x1 and A for a given table size, density function, and inverse density\nfunction.\n\nhttps://en.wikipedia.org/wiki/Ziggurat_algorithm#Finding_x1_and_A\n\n    x1 = zigguratX1 n pdfFunc invPdfFunc cdfFunc\n\n",
            "type": "Int -> (Float -> Float) -> (Float -> Float) -> (Float -> Float) -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "ndr-qef/microkanren.elm",
    "version": "1.0.0",
    "docs": [
      {
        "name": "MicroKanren.Operators",
        "comment": " Infix operators for μKanren\n\n@docs (++), (>>=), (===), (≡)\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "++",
            "comment": " Infix alias of `mplus`. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Stream a -> MicroKanren.Stream a"
          },
          {
            "name": "===",
            "comment": " Infix alias of `identical`. ",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Goal a"
          },
          {
            "name": ">>=",
            "comment": " Infix alias of `bind`. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Goal a -> MicroKanren.Stream a"
          },
          {
            "name": "≡",
            "comment": " Unicode alias of `identical`. ",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Goal a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "MicroKanren",
        "comment": " μKanren provides a minimal, independent core for relational programming in Elm,\nas described by Hemann and Friedmann in [µKanren: A Minimal Functional Core\nfor Relational Programming](http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf).\n\nThis module only provides a barebones typed foundation upon which it is possible\nto build larger languages in the [miniKanren family](http://www.minikanren.org),\nand lacks much of the convenience user-facing libraries rightfully require.\n\n## Terms of a μKanren Program\n@docs Var, Term, Substitution\n\n### Traversing and Manipulating Substitutions\n@docs walk, extend, unify\n\n## Creating and Manipulating Streams\n@docs State\n@docs Stream, mzero\n@docs Goal, unit\n@docs mplus, bind\n\n## Goal Constructors\n@docs callFresh, identical, conjoin, disjoin\n",
        "aliases": [
          {
            "name": "Goal",
            "comment": " A goal to be pursued within the received state.\nA successful goal returns a non-empty stream, containing the states which satisfied it. ",
            "args": [
              "a"
            ],
            "type": "MicroKanren.State a -> MicroKanren.Stream a"
          },
          {
            "name": "State",
            "comment": " A state encapsulates the substitution `s`, which encompasses current variable-term bindings,\nand the counter `c`, which represents the index of the next unbound (“fresh”) logic variable. ",
            "args": [
              "a"
            ],
            "type": "{ s : MicroKanren.Substitution a, c : MicroKanren.Var }"
          },
          {
            "name": "Substitution",
            "comment": " A dictionary of variable-term bindings. ",
            "args": [
              "a"
            ],
            "type": "Dict.Dict MicroKanren.Var (MicroKanren.Term a)"
          },
          {
            "name": "Var",
            "comment": " The `Var` type is an index (or counter),\nused to track the results of logic operations. ",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [
          {
            "name": "Stream",
            "comment": " A potentially infinite sequence of states.\n\nA stream may be:\n  - empty;\n  - mature, when the head is a state that has already been computed;\n  - immature, when the head is a thunk containing a delayed computation.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Empty",
                []
              ],
              [
                "Immature",
                [
                  "() -> MicroKanren.Stream a"
                ]
              ],
              [
                "Mature",
                [
                  "MicroKanren.State a",
                  "MicroKanren.Stream a"
                ]
              ]
            ]
          },
          {
            "name": "Term",
            "comment": " The terms on which a μKanren program operates.\n\nThree variants are established:\n  - `LVar`, the identifier of a logic variable; effectively a term-level `Var`\n    acting as a reference.\n  - `LVal`, which wraps some value of type `a` for use by logic operations.\n  - `Pair`, two terms of the same type `a`.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "LVar",
                [
                  "MicroKanren.Var"
                ]
              ],
              [
                "LVal",
                [
                  "a"
                ]
              ],
              [
                "Pair",
                [
                  "MicroKanren.Term a",
                  "MicroKanren.Term a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "bind",
            "comment": " Invoke a goal on each element of the given stream,\nand interleave the resulting streams. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Goal a -> MicroKanren.Stream a"
          },
          {
            "name": "callFresh",
            "comment": " Create a goal which introduces a new logic variable for use by another goal. ",
            "type": "(MicroKanren.Term a -> MicroKanren.Goal a) -> MicroKanren.Goal a"
          },
          {
            "name": "conjoin",
            "comment": " Create a goal which succeeds if the second goal is achievable within the stream\ngenerated by the first goal.\n\nEffectively a binary conjunction of goals. ",
            "type": "MicroKanren.Goal a -> MicroKanren.Goal a -> MicroKanren.Goal a"
          },
          {
            "name": "disjoin",
            "comment": " Create a goal which succeeds if either of the received goals are achieved.\n\nEffectively a binary disjunction of goals. ",
            "type": "MicroKanren.Goal a -> MicroKanren.Goal a -> MicroKanren.Goal a"
          },
          {
            "name": "extend",
            "comment": " Extend the substitution with a new variable-term binding. ",
            "type": "MicroKanren.Var -> MicroKanren.Term a -> MicroKanren.Substitution a -> MicroKanren.Substitution a"
          },
          {
            "name": "identical",
            "comment": " Create a goal which succeeds if the two terms unify in the received state. ",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Goal a"
          },
          {
            "name": "mplus",
            "comment": " Merge two streams by interleaving their states, so that infinite streams\nwill not prevent finite streams from yielding their state. ",
            "type": "MicroKanren.Stream a -> MicroKanren.Stream a -> MicroKanren.Stream a"
          },
          {
            "name": "mzero",
            "comment": " An alias for the empty stream. ",
            "type": "MicroKanren.Stream a"
          },
          {
            "name": "unify",
            "comment": " Unify two terms in the received substitution `s`,\npotentially extending it.\n\n- `LVar` variables unify when they refer to the same index,\n  i.e. they are the same variable. `s` is returned unchanged..\n- `LVal` values unify when they are equivalent under Elm's native `(==)`.\n  `s` is returned unchanged.\n- Pairs unify when their terms unify pairwise.\n- Finally, an `LVar` variable and an `LVal` value unify under an extended substitution `s'`,\n  where they form a new binding.\n\nIf unification fails, `Nothing` is returned.\n",
            "type": "MicroKanren.Term a -> MicroKanren.Term a -> MicroKanren.Substitution a -> Maybe.Maybe (MicroKanren.Substitution a)"
          },
          {
            "name": "unit",
            "comment": " The trivial goal, which lifts the state into a mature stream\nwhose only element is that state. ",
            "type": "MicroKanren.Goal a"
          },
          {
            "name": "walk",
            "comment": " Given a `LVar`, traverse the substitution and return its value.\nIf the given term cannot be found, or is not a variable, the term itself is returned. ",
            "type": "MicroKanren.Term a -> MicroKanren.Substitution a -> MicroKanren.Term a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "newlandsvalley/elm-comidi",
    "version": "1.0.1",
    "docs": [
      {
        "name": "CoMidi",
        "comment": "  Library for parsing MIDI file contents using parser combinators,\n\n# Definition\n\n# Data Types\n@docs Header, Track, MidiEvent, MidiMessage,  MidiRecording\n\n# Functions\n@docs normalise, parse, translateRunningStatus\n\n",
        "aliases": [
          {
            "name": "Header",
            "comment": " Midi Header ",
            "args": [],
            "type": "{ formatType : Int, trackCount : Int, ticksPerBeat : Int }"
          },
          {
            "name": "MidiMessage",
            "comment": " Midi Message ",
            "args": [],
            "type": "( CoMidi.Ticks, CoMidi.MidiEvent )"
          },
          {
            "name": "MidiRecording",
            "comment": " Midi Recording ",
            "args": [],
            "type": "( CoMidi.Header, List CoMidi.Track )"
          },
          {
            "name": "Track",
            "comment": " Midi Track ",
            "args": [],
            "type": "List CoMidi.MidiMessage"
          }
        ],
        "types": [
          {
            "name": "MidiEvent",
            "comment": " Midi Event ",
            "args": [],
            "cases": [
              [
                "SequenceNumber",
                [
                  "Int"
                ]
              ],
              [
                "Text",
                [
                  "String"
                ]
              ],
              [
                "Copyright",
                [
                  "String"
                ]
              ],
              [
                "TrackName",
                [
                  "String"
                ]
              ],
              [
                "InstrumentName",
                [
                  "String"
                ]
              ],
              [
                "Lyrics",
                [
                  "String"
                ]
              ],
              [
                "Marker",
                [
                  "String"
                ]
              ],
              [
                "CuePoint",
                [
                  "String"
                ]
              ],
              [
                "ChannelPrefix",
                [
                  "Int"
                ]
              ],
              [
                "Tempo",
                [
                  "Int"
                ]
              ],
              [
                "SMPTEOffset",
                [
                  "Int",
                  "Int",
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "TimeSignature",
                [
                  "Int",
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "KeySignature",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "SequencerSpecific",
                [
                  "String"
                ]
              ],
              [
                "SysEx",
                [
                  "String"
                ]
              ],
              [
                "Unspecified",
                [
                  "Int",
                  "List Int"
                ]
              ],
              [
                "NoteOn",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "NoteOff",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "NoteAfterTouch",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "ControlChange",
                [
                  "Int",
                  "Int",
                  "Int"
                ]
              ],
              [
                "ProgramChange",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "ChannelAfterTouch",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "PitchBend",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "RunningStatus",
                [
                  "Int",
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "normalise",
            "comment": " normalise the input before we parse by masking off all but the least significant 8 bits ",
            "type": "String -> String"
          },
          {
            "name": "parse",
            "comment": " entry point - Parse a normalised MIDI file image ",
            "type": "String -> Result.Result String CoMidi.MidiRecording"
          },
          {
            "name": "translateRunningStatus",
            "comment": " translate the Running Status messages in each track to the expanded form (NoteOn/NoteOff etc) ",
            "type": "Result.Result String CoMidi.MidiRecording -> Result.Result String CoMidi.MidiRecording"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "nphollon/collisions",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Collision3D",
        "comment": " Collision detection in three dimensions\n\n# Building a Hull\n@docs Vec3, Hull, vec3, fromTriangles\n\n# Collision Detection\n@docs isInside, isOutside\n",
        "aliases": [
          {
            "name": "Vec3",
            "comment": " A vector with x, y, and z components\n",
            "args": [],
            "type": "Vec3.Vec3"
          }
        ],
        "types": [
          {
            "name": "Hull",
            "comment": " A collection of faces that together represent a shape. This library interprets\nthe faces as forming the smallest possible convex polyhedron.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromTriangles",
            "comment": " Given a list of triangles, compute a hull. For a triangle of points (a,b,c),\nthe resulting normal will be the normalized cross product `(a to b) x (b to c)`. In\nother words, if the triangle vertexes are going counter-clockwise from your point\nof view, the normal will be pointing towards from you.\n\nThe triangles passed to this function should form a polyhedron that is\n* convex (no dents)\n* closed (no holes)\n",
            "type": "List ( Collision3D.Vec3, Collision3D.Vec3, Collision3D.Vec3 ) -> Collision3D.Hull"
          },
          {
            "name": "isInside",
            "comment": " Returns `True` if the given position is on or in the given hull.\nDefaults to `False` if the hull has no sides.\n\n    hull =\n      fromTriangles\n        [ (vec3 0 0 0, vec3 0 0 5, vec3 10 0 0)\n        , (vec3 0 0 0, vec3 0 5 0, vec3 0 0 5)\n        , (vec3 0 0 0, vec3 10 0 0, vec3 0 5 0)\n        , (vec3 10 0 0, vec3 0 0 5, vec3 0 5 0)\n        ]\n\n    isInside hull (vec3 5 1 1) == True\n\n    isInside hull (vec3 -1 2 -1) == False\n\n    isInside hull (vec3 0 0 0) == True\n",
            "type": "Collision3D.Vec3 -> Collision3D.Hull -> Bool"
          },
          {
            "name": "isOutside",
            "comment": " Returns `True` if the given position is outside the given hull.\nThe logical inverse of `isInside`.\n",
            "type": "Collision3D.Vec3 -> Collision3D.Hull -> Bool"
          },
          {
            "name": "vec3",
            "comment": " Build a Vec3 given x, y, and z\n\n    vec3 1 2 3 -- x = 1, y = 2, z = 3\n",
            "type": "Float -> Float -> Float -> Collision3D.Vec3"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Collision2D",
        "comment": " Collision detection in two dimensions\n\n# Building a Hull\n@docs Vec2, Hull, vec2, fromVectors\n\n# Collision Detection\n@docs isInside, isOutside\n",
        "aliases": [
          {
            "name": "Vec2",
            "comment": " A vector with x and y components\n",
            "args": [],
            "type": "Vec2.Vec2"
          }
        ],
        "types": [
          {
            "name": "Hull",
            "comment": " A collection of sides that together represent a hull. This library\ninterprets the sides as forming the smallest possible convex polygon.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "fromVectors",
            "comment": " Given the vertexes of a polygon, compute a hull. Vertexes must be ordered\ncounter-clockwise around the center of the shape. Only works for convex polygons.\n\nReturns an empty hull if given less than three vertexes.\n",
            "type": "List Collision2D.Vec2 -> Collision2D.Hull"
          },
          {
            "name": "isInside",
            "comment": " Returns `True` if the given position is on or in the given hull.\nDefaults to `False` if the hull has no sides.\n\n    hull =\n      fromVertexes\n        [ vec2 0 1\n        , vec2 3 4\n        , vec2 1 0\n        ]\n\n    isInside hull (vec2 1 1) == True\n\n    isInside hull (vec2 -1 2) == False\n\n    isInside hull (vec2 0 0) == True\n\n",
            "type": "Collision2D.Vec2 -> Collision2D.Hull -> Bool"
          },
          {
            "name": "isOutside",
            "comment": " Returns `True` if the given position is outside the given hull.\nThe logical inverse of `isInside`.\n",
            "type": "Collision2D.Vec2 -> Collision2D.Hull -> Bool"
          },
          {
            "name": "vec2",
            "comment": " Build a Vec2 given x and y\n\n    vec2 1 2 -- x = 1, y = 2\n",
            "type": "Float -> Float -> Collision2D.Vec2"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "nphollon/interpolate",
    "version": "3.0.2",
    "docs": [
      {
        "name": "Interpolate.Bicubic",
        "comment": " This module uses [bicubic splines](https://en.wikipedia.org/wiki/Bicubic_interpolation)\nto interpolate surfaces. Bicubic interpolation is the 2D equivalent\nof cubic interpolation.\n\nFor example, if we have the following data:\n\n    y=|\n    9 | 1.9  2.1  5.5\n    6 | 2.2  3.1  5.4\n    3 | 3.8  4.0  4.3\n    0 | 1.1  2.3  3.8\n    -----------------\n     x=  2    4    6\n\nWe could construct a 2D spline this way:\n\n    data = rows [ [ 1.1, 2.3, 3.8 ]\n                , [ 3.8, 4.0, 4.3 ]\n                , [ 2.2, 3.1, 5.4 ]\n                , [ 1.9, 2.1, 5.5 ]\n                ]\n             |> Maybe.withDefault emptyData\n\n    start = { x = 2, y = 0 }\n    end = { x = 6, y = 9 }\n    delta = { x = 2, y = 3 }\n\n    -- These two splines are equivalent\n    splineOne = withRange start end data\n    splineTwo = withDelta start delta data\n\n\n# Creating data sets\n@docs rows, emptyData, Data\n\n# Creating splines\n@docs withRange, withDelta, Vector, Spline\n\n# Interpolating\n@docs valueAt, gradientAt, laplacianAt, surfaceAt, LocalSurface\n",
        "aliases": [
          {
            "name": "LocalSurface",
            "comment": "",
            "args": [],
            "type": "{ value : Float , gradient : Interpolate.Bicubic.Vector , laplacian : Float }"
          },
          {
            "name": "Vector",
            "comment": " Stores data with an x and a y component.\n",
            "args": [],
            "type": "{ x : Float, y : Float }"
          }
        ],
        "types": [
          {
            "name": "Data",
            "comment": "",
            "args": [],
            "cases": []
          },
          {
            "name": "Spline",
            "comment": "",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "emptyData",
            "comment": " An empty data set. Useful as a default value when working \nwith the `rows` function. If you create a spline from it, the\nspline will be zero everywhere.\n",
            "type": "Interpolate.Bicubic.Data"
          },
          {
            "name": "gradientAt",
            "comment": " Compute the [gradient](https://en.wikipedia.org/wiki/Gradient)\nof the spline at the given point. The gradient is the x and y\npartial derivatives of the spline.\n",
            "type": "Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Spline -> Interpolate.Bicubic.Vector"
          },
          {
            "name": "laplacianAt",
            "comment": " Compute the [Laplacian](https://en.wikipedia.org/wiki/Laplace_operator)\nof the spline at the given point. The Laplacian is the divergence\nof the gradient. It is computed by adding the x and y second partial\nderivatives. ",
            "type": "Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Spline -> Float"
          },
          {
            "name": "rows",
            "comment": " Construct a two-dimensional data set. The input is given in x-major order,\nso a grid of values like this:\n\n    f(0,0) = 1\n    f(1,0) = 2\n    f(0,1) = 3\n    f(1,1) = 4\n\nShould be passed to the function in this format:\n\n    rows [ [1,2], [3,4] ] -- returns Just Data\n\nIf every row has the same length, the function returns a `Data` object that\ncan be used to build a spline. If the rows are uneven (or empty), it returns\n`Nothing`.\n\n    rows [ [1,1,1], [1,1,1] ] -- returns Just Data\n\n    rows [ [1], [1], [1] ] -- returns Just Data\n\n    rows [ [1,1,1], [1] ] -- returns Nothing\n\n    rows [ [], [] ] -- returns Nothing\n\n    rows [ ] -- returns Nothing\n",
            "type": "List (List Float) -> Maybe.Maybe Interpolate.Bicubic.Data"
          },
          {
            "name": "surfaceAt",
            "comment": " Returns `valueAt`, `gradientAt`, and `laplacianAt` results in\na single record.\n",
            "type": "Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Spline -> Interpolate.Bicubic.LocalSurface"
          },
          {
            "name": "valueAt",
            "comment": " Evaluate the spline at the given point ",
            "type": "Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Spline -> Float"
          },
          {
            "name": "withDelta",
            "comment": " Construct a spline, given the position of the lower left data sample\nand the dimensions of a grid cell.\n",
            "type": "Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Data -> Interpolate.Bicubic.Spline"
          },
          {
            "name": "withRange",
            "comment": " Construct a spline, given the positions of the lower left (min-x, min-y)\nand upper right (max-x, max-y) data samples, and a data set.\n",
            "type": "Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Vector -> Interpolate.Bicubic.Data -> Interpolate.Bicubic.Spline"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Interpolate.Cubic",
        "comment": " This library interpolates cubic splines for one-dimensional sets of data.\n\nIt computes \"natural splines\", which means the second derivative at the endpoints\nis set to zero.\n\nFor more information on the mathematics used, check out\n[this paper.](http://web.archive.org/web/20090408054627/http://online.redwoods.cc.ca.us/instruct/darnold/laproj/Fall98/SkyMeg/Proj.PDF)\n\n# Creating splines\n@docs withRange, withDelta, Spline\n\n# Interpolating\n@docs valueAt, slopeAt, concavityAt, curveAt, LocalCurve\n",
        "aliases": [
          {
            "name": "LocalCurve",
            "comment": "",
            "args": [],
            "type": "{ value : Float, slope : Float, concavity : Float }"
          }
        ],
        "types": [
          {
            "name": "Spline",
            "comment": "",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "concavityAt",
            "comment": " Return the second derivative of the curve at the given point\n",
            "type": "Float -> Interpolate.Cubic.Spline -> Float"
          },
          {
            "name": "curveAt",
            "comment": " Return a record containing the value, slope, and concavity of the curve\nat the given point\n",
            "type": "Float -> Interpolate.Cubic.Spline -> Interpolate.Cubic.LocalCurve"
          },
          {
            "name": "slopeAt",
            "comment": " Return the first derivative of the curve at the given point\n",
            "type": "Float -> Interpolate.Cubic.Spline -> Float"
          },
          {
            "name": "valueAt",
            "comment": " Given `x1` and a spline `f(x)`, return `f(x1)`\n",
            "type": "Float -> Interpolate.Cubic.Spline -> Float"
          },
          {
            "name": "withDelta",
            "comment": " Same as `withRange`, except instead of passing the endpoint as the\nsecond argument, you pass the x-distance between data points.\n\n    fSpline = withDelta 2 1 [ 1, 5.2, 3.2, 0.8 ]\n    -- equivalent to withRange 2 6 [ 1, 5.2, 3.2, 0.8 ]\n",
            "type": "Float -> Float -> List Float -> Interpolate.Cubic.Spline"
          },
          {
            "name": "withRange",
            "comment": " Compute a spline, given the minimum and maximum values of `x` and a\nlist of data for `f(x)`. The data should be evenly spaced and in order of\nincreasing `x`. \n\nFor example, if we have the data\n\n    f(2) = 1\n    f(3) = 5.2\n    f(4) = 3.2\n    f(5) = 0.8\n\nThen we would generate a spline by calling\n\n    fSpline = withRange 2 6 [ 1, 5.2, 3.2, 0.8 ]\n\nIf there is only one data point, then the spline will be a horizontal line\npassing through that point. If the data is empty, the spline will be zero\neverywhere.\n",
            "type": "Float -> Float -> List Float -> Interpolate.Cubic.Spline"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "nphollon/mechanics",
    "version": "3.1.0",
    "docs": [
      {
        "name": "Lagrangian",
        "comment": "\nWe can compute the behavior of a system if we start with special equation called\na Lagrangian.\n\n    Lagrangian = KineticEnergy - PotentialEnergy\n\n@docs solve, toAcceleration\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "solve",
            "comment": " Given a Lagrangian, try to compute the acceleration of the system. The result\nis a list of expressions describing the acceleration of each coordinate.\n\n    import Expression exposing (..)\n\n    -- An object in freefall. Coordinate 0 is horizontal, coordinate 1 is vertical.\n\n    kineticEnergy =\n            ((num 0.5) `times` ((square (velocity 0)) `plus` (square (velocity 1))))\n\n    potentialEnergy =\n            ((num 10) `times` (coordinate 1))\n\n    freefallLagrangian = kineticEnergy `minus` potentialEnergy\n\n    solve freefallLagrangian\n    -- equals Just [ num 0, num -10 ]\n\n\nThis function will return `Nothing` if the Lagrangian does not have a diagonal\n[Hessian matrix](https://en.wikipedia.org/wiki/Hessian_matrix).\nIn other words, the Lagrangian should obey the following rules:\n\n* Every coordinate index must have a velocity-squared term.\n* Velocities with different indexes can be added but not combined in other ways.\n\nBelow are examples of good and bad inputs:\n\n    -- Good\n    sum [ square (velocity 0), square (velocity 1), square (velocity 2) ]\n\n    -- Good: It is OK to multiply coordinates and velocities\n    (square (velocity 0)) `plus` ((coordinate 0) `times` (square (velocity 1)))\n\n    -- Bad: The expression has (coordinate 1) but no (square (velocity 1))\n    (square (velocity 0)) `plus` (coordinate 0) `plus` (coordinate 1)\n\n    -- Bad: velocities 1 and 2 are missing\n    sum [ square (velocity 0), square (velocity 3) ]\n\n    -- Bad: (velocity 0) and (velocity 1) are multiplied\n    (square (velocity 0)) `times` (square (velocity 1))\n",
            "type": "Expression.Expression -> Maybe.Maybe (List Expression.Expression)"
          },
          {
            "name": "toAcceleration",
            "comment": " The same as `solve`, but returns the solution as a `Mechanics.Acceleration`.\nThe result can be plugged directly into `Mechanics.evolve`.\n\n    freefallAcceleration =\n        toAcceleration freefallLagrangian\n            |> Maybe.withDefault (Mechanics.acceleration (always []))\n\n    startState = Mechanics.state2 (0, 6) (0, 0)\n\n    dt = 0.5\n\n    Mechanics.evolve freefallAcceleration dt startState\n    -- equals Mechanics.state 0.5 [ (3, 6) ( -1.25, -5 ) ]\n",
            "type": "Expression.Expression -> Maybe.Maybe Mechanics.Acceleration"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Expression",
        "comment": " Create symbolic mathematic expressions. For use with the `Lagrangian` module. The variable names are designed to correspond with the fields in `Mechanics.State`.\n\n# Using expressions\n@docs Expression, eval\n\n# Expression primitives\n@docs num, time, coordinate, velocity\n\n# Expression arithmetic\n@docs sum, plus, minus, product, times, over, negative, inverse, square, expt, sine, cosine, ln\n\n# Inspecting expressions\n@docs dimension, getFloat, print\n\n# Taking derivatives\n@docs partial\n",
        "aliases": [
          {
            "name": "Expression",
            "comment": " ",
            "args": [],
            "type": "Types.Expression"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "coordinate",
            "comment": " A variable representing the coordinate with the given index.\n\n    print (coordinate 0) == \"x_0\"\n",
            "type": "Int -> Expression.Expression"
          },
          {
            "name": "cosine",
            "comment": " Take the cosine of an expression.\n\n    print (cosine time) == \"(cos t)\"\n",
            "type": "Expression.Expression -> Expression.Expression"
          },
          {
            "name": "dimension",
            "comment": " Return the size of the coordinate/velocity vector used by the expression.\nThis is one plus the highest index used.\n\n    dimension (num 8) == 0\n    dimension (sine (time)) == 0\n    dimension (((num 2) `times` time) `plus` (coordinate 0)) == 1\n    dimension ((coordinate 0) `times` (coordinate 1)) == 2\n    dimension (square (velocity 2)) == 3\n",
            "type": "Expression.Expression -> Int"
          },
          {
            "name": "eval",
            "comment": " Evaluate an expression, replacing the variables in the expression with the\ndata in the state.\n\n    data = Mechanics.state1 (3, 5)\n\n    expression = (square (velocity 0)) `minus` (coordinate 0)\n\n    eval expression data == 22\n\nIf the expression has a greater dimension than the state, the extra coordinate/velocity\ncomponents are assumed to be zero.\n\n    Mechanics.state1 (3, 5)\n        |> eval (velocity 1) == 0\n",
            "type": "Expression.Expression -> Mechanics.State -> Float"
          },
          {
            "name": "expt",
            "comment": " Raise the first expression to the power of the second expression.\n\n    print (expt (num 2) (num 3)) == \"8\"\n    print (expt (num 2) time) == \"(2 ^ t)\"\n    print (expt (expt (coordinate 0) time) (num 2)) == \"(x_0 ^ (2 t))\"\n    print (expt time (num 0)) == \"1\"\n    print (expt time (num 1)) == \"t\"\n",
            "type": "Expression.Expression -> Expression.Expression -> Expression.Expression"
          },
          {
            "name": "getFloat",
            "comment": " If the expression equals a constant, return the constant. Otherwise, return `Nothing`.\n\n    getFloat (num 3) == Just 3\n    getFloat ((num 3) `times` (coordinate 0)) == Nothing\n    getFloat ((num 0) `times` (coordinate 0)) == Just 0\n",
            "type": "Expression.Expression -> Maybe.Maybe Float"
          },
          {
            "name": "inverse",
            "comment": " Raise an expression to the power of -1.\n\n    print (inverse time) == \"(t ^ -1)\"\n",
            "type": "Expression.Expression -> Expression.Expression"
          },
          {
            "name": "ln",
            "comment": " Take the natural logarithm of an expression.\n\n    print (ln (num e)) == \"1\"\n    print (ln (coordinate 1)) == \"(ln x_1)\"\n",
            "type": "Expression.Expression -> Expression.Expression"
          },
          {
            "name": "minus",
            "comment": " Subtract two expressions.\n\n    print ((num 3) `minus` time) == \"(3 + (-1 t))\"\n",
            "type": "Expression.Expression -> Expression.Expression -> Expression.Expression"
          },
          {
            "name": "negative",
            "comment": " Multiply an expression by -1.\n\n    print (negative (num 2)) == \"-2\"\n    print (negative time) == \"(-1 t)\"\n",
            "type": "Expression.Expression -> Expression.Expression"
          },
          {
            "name": "num",
            "comment": " Encode a number as an expression.\n\n    print (num 3.14) == \"3.14\"\n",
            "type": "Float -> Expression.Expression"
          },
          {
            "name": "over",
            "comment": " Divide two expressions.\n\n    print ((num 2) `over` time) == \"(2 (t ^ -1))\"\n",
            "type": "Expression.Expression -> Expression.Expression -> Expression.Expression"
          },
          {
            "name": "partial",
            "comment": " Take the partial derivative of the second expression with respect to the first.\n\n    print (partial time (expt time (num 3))) == \"(3 (t ^ 2))\"\n    print (partial (coordinate 0) (sine (coordinate 0))) == \"(cos x_0)\"\n    print (partial time ((velocity 0) `times` (coordinate 0))) == \"0\"\n",
            "type": "Expression.Expression -> Expression.Expression -> Expression.Expression"
          },
          {
            "name": "plus",
            "comment": " Add two expressions.\n\n    print ((num 3) `plus` (num 4)) == \"7\"\n    print ((num 3) `plus` (velocity 2)) == \"(3 + v_2)\"\n    print ((coordinate 1) `plus` (num 0)) == \"x_1\"\n",
            "type": "Expression.Expression -> Expression.Expression -> Expression.Expression"
          },
          {
            "name": "print",
            "comment": " Convert the expression to a string. Examples are all over this page.\n",
            "type": "Expression.Expression -> String"
          },
          {
            "name": "product",
            "comment": " Multiply a list of factors.\n\n    print (product [ num -5, time, coordinate 0, num 8 ]) == \"(-40 t x_0)\"\n",
            "type": "List Expression.Expression -> Expression.Expression"
          },
          {
            "name": "sine",
            "comment": " Take the sine of an expression.\n\n    print (sine time) == \"(sin t)\"\n",
            "type": "Expression.Expression -> Expression.Expression"
          },
          {
            "name": "square",
            "comment": " Raise an expression to the power of 2.\n\n    print (square (velocity 0)) == \"(v_0 ^ 2)\"\n",
            "type": "Expression.Expression -> Expression.Expression"
          },
          {
            "name": "sum",
            "comment": " Add a list of expressions\n\n    print (sum [ num -5, time, coordinate 0, num 8 ]) == \"(-3 + t + x_0)\"\n",
            "type": "List Expression.Expression -> Expression.Expression"
          },
          {
            "name": "time",
            "comment": " A variable representing time.\n\n    print time == \"t\"\n",
            "type": "Expression.Expression"
          },
          {
            "name": "times",
            "comment": " Multiply two expressions.\n\n    print ((num 14) `times` (num 0.5)) == \"7\"\n    print ((num 2) `times` time) == \"(2 t)\"\n    print ((num 0) `times` time) == \"0\"\n    print ((num 1) `times` time) == \"t\"\n",
            "type": "Expression.Expression -> Expression.Expression -> Expression.Expression"
          },
          {
            "name": "velocity",
            "comment": " A variable representing the velocity with the given index.\n\n    print (velocity 0) == \"v_0\"\n",
            "type": "Int -> Expression.Expression"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Mechanics",
        "comment": "\n# Building states\n@docs State, state, state1, state2, state3\n\n# Inspecting states\n@docs aboutEqual, dimension, time, coordinate, velocity\n\n# Changing states\n@docs Acceleration, acceleration, evolve\n",
        "aliases": [],
        "types": [
          {
            "name": "Acceleration",
            "comment": " An acceleration describes how the velocities of a state change with time.\n",
            "args": [],
            "cases": []
          },
          {
            "name": "State",
            "comment": " A state describes a physical system at a moment in time. It contains three types of numbers:\n\n* Time.\n* Coordinates describing the position of the system. If you took a snapshot of the system, what would it look like?\n* Velocities describing the rates of change for each coordinate. If you took another snapshot a split-second later, how much would it have changed?\n\nCoordinates and velocities do not need to be rectangular (in X-Y-Z space). For example, a satellite orbiting the Earth could be described by spherical coordinates (altitude, latitude, and longitude).\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "aboutEqual",
            "comment": "\n    aboutEqual tolerance a b\n\nCompares all numbers in state A and state B. Returns `True` if they differ by\nless than the given tolerance. States with different dimensions are never equal.\n\n    aboutEqual 1e-3 (state1 (0, 0)) (state1 (0, 1e-4)) -- returns True\n\n    aboutEqual 1e-6 (state1 (0, 0)) (state1 (0, 1e-4)) -- returns False\n\n    aboutEqual 1e-6 (state1 (0, 0)) (state2 (0, 0) (0, 0)) -- returns False\n",
            "type": "Float -> Mechanics.State -> Mechanics.State -> Bool"
          },
          {
            "name": "acceleration",
            "comment": " Create an acceleration from a function. The function takes a state and\nreturns a list of changes to the velocities.\n\nExample 1: An object in freefall. The state has 2 dimensions, X and Y.\n\n    gravity = -10\n    fallingAccel = acceleration (always [0, gravity])\n\nExample 2: A weight attached to a spring. The weight is pushed/pulled towards\nthe resting position of the spring. The state has 1 dimension, X.\n\n    springStrength = 2.0\n    restPosition = 5.0\n    mass = 1.0\n\n    hookesLaw position =\n      mass * springStrength * (restPosition - position)\n\n    springAccel = acceleration (\\s -> [ hookesLaw (coordinate 0 s) ])\n",
            "type": "(Mechanics.State -> List Float) -> Mechanics.Acceleration"
          },
          {
            "name": "coordinate",
            "comment": " For a given index `n`, returns the `n`th coordinate of a state. This works\nsimilarly to `Array.get`. The index is zero-based. An out-of-bounds index returns\nzero.\n\n    theState = state3 (1, 2) (3, 4) (5, 6)\n\n    coordinate 0 theState -- returns 1\n    coordinate 2 theState -- returns 5\n    coordinate 3 theState -- returns 0\n    coordinate -1 theState -- returns 0\n",
            "type": "Int -> Mechanics.State -> Float"
          },
          {
            "name": "dimension",
            "comment": " Returns the number of coordinates in a state.\n\n    dimension (state1 (0, 0)) -- returns 1\n    dimension (state3 (0, 0) (0, 0) (0, 0)) -- returns 3\n",
            "type": "Mechanics.State -> Int"
          },
          {
            "name": "evolve",
            "comment": " Given an acceleration, a change in time, and a state, evolve the state\nforward in time. (Under the hood, `evolve` uses the\n[Runge-Kutta method](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods).)\n\n    start = state2 (0, 1) (10, 0)\n\n    oneSecondLater = evolve fallingAccel 1.0 start\n    -- returns state 0.5 [ (1, 1) (5, -10) ]\n\nToss this sucker into a `foldp`, and watch the Universe come to life before\nyour eyes!\n\n    model = Signal.foldp (evolve fallingAccel) start (Time.fps 30)\n",
            "type": "Mechanics.Acceleration -> Float -> Mechanics.State -> Mechanics.State"
          },
          {
            "name": "state",
            "comment": " Create a state with the given time, coordinates, and velocities. Because coordinates and velocities correspond, they are given as a list of pairs.\n\n    t = 10.0 -- seconds\n    x = 0.0 -- meters\n    y = 10.0 -- meters\n    xSpeed = 0.0 -- meters per second\n    ySpeed = -1.0 -- meters per second\n\n    state = t [ (x, xSpeed), (y, ySpeed) ]\n",
            "type": "Float -> List ( Float, Float ) -> Mechanics.State"
          },
          {
            "name": "state1",
            "comment": " Create a 1-dimensional state. The time is set to zero.\n\n    state1 (x, v) -- equals state 0 [ (x, v) ]\n",
            "type": "( Float, Float ) -> Mechanics.State"
          },
          {
            "name": "state2",
            "comment": " Create a 2-dimensional state. The time is set to zero.\n\n    state2 (x, vx) (y, vy)\n    -- equals state 0 [ (x, vx), (y, vy) ]\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> Mechanics.State"
          },
          {
            "name": "state3",
            "comment": " Create a 3-dimensional state. The time is set to zero.\n\n    state2 (x, vx) (y, vy) (z, vz)\n    -- equals state 0 [ (x, vx), (y, vy), (z, vz) ]\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> ( Float, Float ) -> Mechanics.State"
          },
          {
            "name": "time",
            "comment": " Returns the time of a state.\n\n    time (state1 (1, 5)) -- returns 0\n    time (state 3.5 [ (0, 0) ]) -- returns 3.5\n",
            "type": "Mechanics.State -> Float"
          },
          {
            "name": "velocity",
            "comment": " Returns the `n`th velocity of a state.\n\n    theState = state3 (1, 2) (3, 4) (5, 6)\n\n    velocity 0 theState -- returns 2\n    velocity 2 theState -- returns 6\n    velocity 3 theState -- returns 0\n\n",
            "type": "Int -> Mechanics.State -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "pdamoc/elm-hashids",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Hashids",
        "comment": " This is an Elm port of the Hashids library by Ivan Akimov.\n   This is *not* a cryptographic hashing algorithm. Hashids is typically\n   used to encode numbers to a format suitable for appearance in places\n   like urls.\n\nSee the official Hashids home page: [http://hashids.org](http://hashids.org)\n\nHashids is a small open-source library that generates short, unique,\nnon-sequential ids from numbers. It converts numbers like 347 into\nstrings like @yr8@, or a list of numbers like [27, 986] into @3kTMd@.\nYou can also decode those ids back. This is useful in bundling several\nparameters into one or simply using them as short UIDs.\n\n# Types\n\n@docs Context\n\n# Context object constructors \n@docs createHashidsContext, hashidsSimple, hashidsMinimum\n\n\n# Encoding and decoding\n@docs encodeHex, decodeHex, encode, encodeList, decode\n\n# Convenience wrappers\n@docs encodeUsingSalt, encodeListUsingSalt, decodeUsingSalt, encodeHexUsingSalt, decodeHexUsingSalt\n\n",
        "aliases": [
          {
            "name": "Context",
            "comment": " A record with various internals required for encoding and decoding.\n",
            "args": [],
            "type": "{ guards : String , seps : String , salt : String , minHashLength : Int , alphabet : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "createHashidsContext",
            "comment": " Create a context object using the given salt, a minimum hash length, and\na custom alphabet. If you only need to supply the salt, or the first two\narguments, use 'hashidsSimple' or 'hashidsMinimum' instead.\n\nChanging the alphabet is useful if you want to make your hashes unique,\ni.e., create hashes different from those generated by other applications\nrelying on the same algorithm.\n",
            "type": "String -> Int -> String -> Hashids.Context"
          },
          {
            "name": "decode",
            "comment": " Decode a hash.\n\n  Example use:\n\n    hash = \n      let \n        context = hashidsSimple \"this is my salt\"\n      in \n        decode context \"rD\"        -- == [5]\n",
            "type": "Hashids.Context -> String -> List Int"
          },
          {
            "name": "decodeHex",
            "comment": " Decode a hash generated with 'encodeHex'.\n\n  Example use: \n\n    decodeHex context \"yzgwD\"\n",
            "type": "Hashids.Context -> String -> String"
          },
          {
            "name": "decodeHexUsingSalt",
            "comment": " Shortcut for 'decodeHex'.\n",
            "type": "String -> String -> String"
          },
          {
            "name": "decodeUsingSalt",
            "comment": " Decode a hash using the provided salt.\n\nThis convenience function creates a context with the default alphabet.\nIf the same context is used repeatedly, use 'decode' with one of the\nconstructors instead.\n",
            "type": "String -> String -> List Int"
          },
          {
            "name": "encode",
            "comment": " Encode a single number.\n\n  Example use:\n\n    hash = \n      let \n        context = hashidsSimple \"this is my salt\"\n      in \n        encode context 5          -- == \"rD\"\n",
            "type": "Hashids.Context -> Int -> String"
          },
          {
            "name": "encodeHex",
            "comment": " Encode a hexadecimal number.\n\n  Example use: \n\n    encodeHex context \"ff83\"\n",
            "type": "Hashids.Context -> String -> String"
          },
          {
            "name": "encodeHexUsingSalt",
            "comment": " Shortcut for 'encodeHex'.\n",
            "type": "String -> String -> String"
          },
          {
            "name": "encodeList",
            "comment": " Encode a list of numbers.\n\n  Example use:\n\n    hash = \n      let \n        context = hashidsSimple \"this is my salt\"\n      in \n        encodeList context [2, 3, 5, 7, 11]          -- == \"EOurh6cbTD\"\n",
            "type": "Hashids.Context -> List Int -> String"
          },
          {
            "name": "encodeListUsingSalt",
            "comment": " Encode a list of numbers using the provided salt.\n\nThis function wrapper creates a context with the default alphabet.\nIf the same context is used repeatedly, use 'encodeList' with one of the\nconstructors instead.\n",
            "type": "String -> List Int -> String"
          },
          {
            "name": "encodeUsingSalt",
            "comment": " Encode a number using the provided salt.\n\nThis convenience function creates a context with the default alphabet.\nIf the same context is used repeatedly, use 'encode' with one of the\nconstructors instead.\n",
            "type": "String -> Int -> String"
          },
          {
            "name": "hashidsMinimum",
            "comment": " Create a context object using the default alphabet and the provided salt.\nThe generated hashes will have a minimum length as specified by the second\nargument.\n",
            "type": "String -> Int -> Hashids.Context"
          },
          {
            "name": "hashidsSimple",
            "comment": " Create a context object using the default alphabet and the provided salt,\nwithout any minimum required length.\n",
            "type": "String -> Hashids.Context"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "poying/elm-router",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Router",
        "comment": " Elm module for single page app routing\n\n```elm\nmodule Main where\n\n\nimport Result\nimport String\nimport Dict exposing (Dict)\nimport Router exposing ((:~>), (:=>))\nimport Router.Parameter exposing ((/:), int, string)\nimport Graphics.Element exposing (show)\n\n\ntype Page\n  = Home\n  | Article String Int\n  | AdminHome\n  | NotFound\n\n\nmatch =\n  Router.match router NotFound\n\n\nrouter =\n  [ \"/\" :~> always Home\n  , \"/user/:uid/article/:aid\" :~> always Article /: string \"uid\" /: int \"aid\"\n  -- nested router\n  , \"/admin\" :=> adminRouter\n  ]\n\n\nadminRouter =\n  [ \"/\" :~> always AdminHome\n  ]\n\n\nmain =\n  show <|\n    case match \"/user/poying/article/123\" of\n      Home -> \"Home\"\n      AdminHome -> \"AdminHome\"\n      Article uid aid -> \"Article \" ++ uid  ++ \" \" ++ toString aid\n      NotFound -> \"NotFound\"\n```\n\n@docs match\n\n# Types\n@docs Router\n\n# Operators\n@docs (:~>), (:=>)\n",
        "aliases": [
          {
            "name": "Router",
            "comment": " ",
            "args": [
              "a"
            ],
            "type": "List (Router.Route a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": ":=>",
            "comment": "\n```elm\n\"/admin\" :=> adminRouter\n```\n",
            "type": "String -> Router.Router a -> Router.Route a",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": ":~>",
            "comment": "\n```elm\n\"/article/:id\" :~> \\params -> Article << String.toInt << (Dict.get \"id\" params)\n```\n",
            "type": "String -> (Router.Parameters -> a) -> Router.Route a",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "match",
            "comment": "\n```elm\ncase match router NotFound \"/article/3\" of\n  Article id -> show id\n  NotFound -> show \"NotFound\"\n```\n",
            "type": "Router.Router a -> a -> String -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Router.Parameter",
        "comment": "\n@docs (/:)\n\n@docs int, float, string\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "/:",
            "comment": " ",
            "type": "(Router.Parameter.Parameters -> b -> a) -> Router.Parameter.Decoder b -> Router.Parameter.Decoder a",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "float",
            "comment": " ",
            "type": "String -> Router.Parameter.Parameters -> Float"
          },
          {
            "name": "int",
            "comment": " ",
            "type": "String -> Router.Parameter.Parameters -> Int"
          },
          {
            "name": "string",
            "comment": " ",
            "type": "String -> Router.Parameter.Parameters -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "poying/elm-style",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Style",
        "comment": " A tiny library for generating CSS.\n@docs rules\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "rules",
            "comment": "\n    style : String\n    style =\n      Style.rules\n        [ ( \"body,html\", [(\"color\", \"#333\")]) ]\n",
            "type": "List Style.RuleSet -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "poying/sloth.elm",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Sloth",
        "comment": " Sloth is a testing framework for Elm. It is inspired from the Node.js module [Mocha](https://github.com/mochajs/mocha).\n\n#Types\n@docs Data\n\n# Creating Tests\n@docs start, describe, it, end\n\n# Operators\n@docs (=>)\n",
        "aliases": [
          {
            "name": "Data",
            "comment": " ",
            "args": [],
            "type": "Sloth.Data.Data"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "=>",
            "comment": " ",
            "type": "String -> Sloth.Suite.TestStatus -> ( String, Sloth.Suite.TestStatus )",
            "associativity": "left",
            "precedence": 9
          },
          {
            "name": "describe",
            "comment": " Open a describe block. ",
            "type": "Sloth.Data -> String -> Sloth.Data",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "end",
            "comment": " Close describe block(s). ",
            "type": "Sloth.Data -> Int -> Sloth.Data",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "it",
            "comment": " Create a test case. ",
            "type": "Sloth.Data -> ( String, Sloth.Suite.TestStatus ) -> Sloth.Data",
            "associativity": "left",
            "precedence": 8
          },
          {
            "name": "start",
            "comment": " Create a `Data` which conatins all test cases and suites. ",
            "type": "Sloth.Data"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Sloth.Reporters",
        "comment": " Sloth.Reporters provides some method to render test results.\n\n@docs RenderResult\n\n@docs json, ansi\n",
        "aliases": [],
        "types": [
          {
            "name": "RenderResult",
            "comment": " ",
            "args": [],
            "cases": [
              [
                "Pass",
                [
                  "String"
                ]
              ],
              [
                "Fail",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "ansi",
            "comment": " Render result as ANSI. ",
            "type": "List ( String, Sloth.Data.Data ) -> Sloth.Reporters.RenderResult"
          },
          {
            "name": "json",
            "comment": " Render result as JSON. ",
            "type": "List ( String, Sloth.Data.Data ) -> Sloth.Reporters.RenderResult"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Sloth.Assertion",
        "comment": " Sloth.Assertion provides some assertion helpers.\n\n@docs shouldBe, shouldNotBe\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "shouldBe",
            "comment": " ",
            "type": "a -> a -> Sloth.Suite.TestStatus"
          },
          {
            "name": "shouldNotBe",
            "comment": " ",
            "type": "a -> a -> Sloth.Suite.TestStatus"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "prozacchiwawa/effmodel",
    "version": "1.0.1",
    "docs": [
      {
        "name": "EffModel",
        "comment": "\n\nEffModel embodies a single value that carries both the model and accumulated\neffects for a world step in the elm architecture.\n\nThe elm architecture is nice, but a tuple of model and effect is troublesome\nto compose.  Consider the standard update function:\n\nupdate : Action -> Model -> (Model, Effects Action)\n\nIn order to compose it, you need to destructure the result, use Effects.batch\non the snd, and map on the first, then combine a new tuple.  EffModel replaces\nthis process and has functions that construct an effmodel either from a model\nor an update result tuple, and that produce an update result tuple from an\nEffModel.\n\nI use it extensively like this:\n\n    import EffModel as EF\n\n    handleUpdateForOneLogicalThing : Action -> EffModel Model Action -> EffModel Model Action\n    handleUpdateForOneLogicalThing action effmodel =\n        case action of\n            Increment -> effmodel |> EF.map (\\m -> { m | count = m.count + 1 })\n            Decrement ->\n                effmodel\n                -- Compose model update and an effect conveniently\n                    |> EF.map (\\m -> { m | count = m.count - 1 })\n                    |> EF.eff (Effects.task (Task.sleep (5 * Time.second) `Task.andThen` (\\_ -> Task.succeed Increment)))\n            _ -> effmodel -- Note that you can just pass it through easily\n\n    handleUpdateForAnotherLogicalThing : Action -> EffModel Model Action -> EffModel Model Action\n\n    update : Action -> Model -> (Model, Effects Action)\n    update action model =\n        model\n            |> wrap\n            |> handleUpdateForOneLogicalThing action\n            |> handleUpdateForAnotherLogicalThing action\n            |> unwrap\n\n# Definition\n\n@docs EffModel\n\n# Creation functions\n\n@docs wrap, wrap2\n\n# Termination\n\n@docs unwrap\n\n# Accessor\n\n@docs get\n\n# Operations\n\n@docs map, eff, effMap, effMessage\n\n",
        "aliases": [
          {
            "name": "EffModel",
            "comment": "\n\nA type representing the combination of a model value and the accumulated\neffects of a chain of composed actions on a model along with emitted\neffects.\n\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ model : model, eff : Effects.Effects action }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "eff",
            "comment": "\n\nAdd an effect to the EffModel's accumulated effects.\n\n",
            "type": "Effects.Effects action -> EffModel.EffModel model action -> EffModel.EffModel model action"
          },
          {
            "name": "effMap",
            "comment": "\n\nApply Effects.map to the accumulated effects.\n\n",
            "type": "(actionA -> actionB) -> EffModel.EffModel model actionA -> EffModel.EffModel model actionB"
          },
          {
            "name": "effMessage",
            "comment": "\n\nConvenience replacement for (Effects.task (Task.succeed action)) that can be used\nplace another message on the app's input queue.\n\n",
            "type": "action -> EffModel.EffModel model action -> EffModel.EffModel model action"
          },
          {
            "name": "get",
            "comment": "\n\nGet the model from an EffModel:\n\n    case action of\n        IncrementAndNotify ->\n            effmodel\n                |> (\\effmodel -> EF.effMessage (Notify (EF.get m).count) effmodel)\n\n",
            "type": "EffModel.EffModel model action -> model"
          },
          {
            "name": "map",
            "comment": "\n\nUpdate the model in the EffModel.\n\n",
            "type": "(modelA -> modelB) -> EffModel.EffModel modelA action -> EffModel.EffModel modelB action"
          },
          {
            "name": "unwrap",
            "comment": "\n\nTerminate a chain of EffModel updates to yield Tuple of model, effects.\n\n",
            "type": "EffModel.EffModel model action -> ( model, Effects.Effects action )"
          },
          {
            "name": "wrap",
            "comment": "\n\nWrap a model to start an EffModel chain.\n\n",
            "type": "model -> EffModel.EffModel model action"
          },
          {
            "name": "wrap2",
            "comment": "\n\nWrap a model and previous effects (such as the result from an update) in an\nEffModel.\n\n",
            "type": "( model, Effects.Effects action ) -> EffModel.EffModel model action"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "pukkamustard/elm-identicon",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Identicon",
        "comment": " Generate an identicon from a string.\n\n# Functions\n@docs identicon\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "identicon",
            "comment": " Generate a identicon from a string\n\n    main =\n      identicon \"Hello identicon!\"\n",
            "type": "String -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "remoteradio/elm-widgets",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Html.Widgets",
        "comment": " Svg Widgets using Elm-html\n\n\n# Seven Segment Widget\n@docs sevenSegment,defaultSevenSegmentProperties,defaultSevenSegmentStyle, SevenSegmentProperties, SevenSegmentStyle\n\n# Segmented Bar Graph Widget\n@docs segmentedBarGraph, defaultSegmentedBarGraphProperties, defaultSegmentBarGraphStyle, SegmentedBarGraphProperties, SegmentedBarGraphStyle\n\n# Simulated Analog Meter Widget\n@docs simulatedAnalogMeter,defaultSimulatedAnalogMeterProperties,defaultSimulatedAnalogMeterStyle,SimulatedAnalogMeterProperties,SimulatedAnalogMeterStyle\n\n# Knob Widget\n@docs knob,defaultKnobProperties,defaultKnobStyle,KnobProperties,KnobStyle\n\n# Widget Variables\n@docs MeterRange, defaultMeterRangeOk, defaultMeterRangeAlert\n",
        "aliases": [
          {
            "name": "KnobProperties",
            "comment": " Properties alias for Knob\n",
            "args": [],
            "type": "{ value : Int , maxValue : Int , segments : Int , smallSegments : Int , rangeAngleMin : Float , rangeAngleMax : Float }"
          },
          {
            "name": "KnobStyle",
            "comment": " Style alias for Knob\n",
            "args": [],
            "type": "{ segmentColor : String , knobColor : String , knobPointerColor : String }"
          },
          {
            "name": "MeterRange",
            "comment": " Range alias for widgets\n",
            "args": [],
            "type": "{ color : String, minValue : Float, maxValue : Float }"
          },
          {
            "name": "SegmentedBarGraphProperties",
            "comment": " Property alias for Segmented Bar Graph Widget\n",
            "args": [],
            "type": "{ currentValue : Int , maxValue : Int , segments : Int , ranges : List Html.Widgets.MeterRange }"
          },
          {
            "name": "SegmentedBarGraphStyle",
            "comment": " Style alias for Segmented Bar Graph Widget\n",
            "args": [],
            "type": "{ emptyColor : String, backgroundColor : String }"
          },
          {
            "name": "SevenSegmentProperties",
            "comment": " Properties alias for Seven Segment Widget\n",
            "args": [],
            "type": "{ digits : String , pointIndexes : List Int , colonIndexes : List Int , isSlant : Bool , isDimmedWhenOff : Bool }"
          },
          {
            "name": "SevenSegmentStyle",
            "comment": " Style alias for Seven Segment Widget\n",
            "args": [],
            "type": "{ backgroundColor : String, textColor : String }"
          },
          {
            "name": "SimulatedAnalogMeterProperties",
            "comment": " Property alias for Simulated Analog Meter\n",
            "args": [],
            "type": "{ currentValue : Int , maxValue : Int , ranges : List Html.Widgets.MeterRange }"
          },
          {
            "name": "SimulatedAnalogMeterStyle",
            "comment": " Style alias for Simulated Analog Meter\n",
            "args": [],
            "type": "{ foreColor : String, backgroundColor : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultKnobProperties",
            "comment": " Default properties for Knob\n",
            "type": "Html.Widgets.KnobProperties"
          },
          {
            "name": "defaultKnobStyle",
            "comment": " Default style for Knob\n",
            "type": "Html.Widgets.KnobStyle"
          },
          {
            "name": "defaultMeterRangeAlert",
            "comment": " Default meter range 'alert'\n",
            "type": "Html.Widgets.MeterRange"
          },
          {
            "name": "defaultMeterRangeOk",
            "comment": " Default meter range 'Ok'\n",
            "type": "Html.Widgets.MeterRange"
          },
          {
            "name": "defaultSegmentBarGraphStyle",
            "comment": " Default style for SegmentedBarGraph\n",
            "type": "Html.Widgets.SegmentedBarGraphStyle"
          },
          {
            "name": "defaultSegmentedBarGraphProperties",
            "comment": " Default properties for SegmentedBarGraph\n",
            "type": "Html.Widgets.SegmentedBarGraphProperties"
          },
          {
            "name": "defaultSevenSegmentProperties",
            "comment": " Default properties for SevenSegmentProperties\n",
            "type": "Html.Widgets.SevenSegmentProperties"
          },
          {
            "name": "defaultSevenSegmentStyle",
            "comment": " Default style for SevenSegmentStyle\n",
            "type": "Html.Widgets.SevenSegmentStyle"
          },
          {
            "name": "defaultSimulatedAnalogMeterProperties",
            "comment": " Default properties for SimulatedAnalogMeter\n",
            "type": "Html.Widgets.SimulatedAnalogMeterProperties"
          },
          {
            "name": "defaultSimulatedAnalogMeterStyle",
            "comment": " Default style for SimulatedAnalogMeter\n",
            "type": "Html.Widgets.SimulatedAnalogMeterStyle"
          },
          {
            "name": "knob",
            "comment": " Creates knob widget\n",
            "type": "Html.Widgets.KnobProperties -> Html.Widgets.KnobStyle -> Svg.Svg"
          },
          {
            "name": "segmentedBarGraph",
            "comment": " Creates Segmented Bar Graph\n",
            "type": "Html.Widgets.SegmentedBarGraphProperties -> Html.Widgets.SegmentedBarGraphStyle -> Svg.Svg"
          },
          {
            "name": "sevenSegment",
            "comment": " Creates Seven Segment Widget\n",
            "type": "Html.Widgets.SevenSegmentProperties -> Html.Widgets.SevenSegmentStyle -> Svg.Svg"
          },
          {
            "name": "simulatedAnalogMeter",
            "comment": " Creates Simulated Analog Meter Widget\n",
            "type": "Html.Widgets.SimulatedAnalogMeterProperties -> Html.Widgets.SimulatedAnalogMeterStyle -> Svg.Svg"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rgrempel/elm-http-decorators",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Http.Decorators",
        "comment": " This module supplies several functions which you can use to decorate\n`Http.send` in order to create a function with additional behaviour. You can\napply the decorators to individual uses of `Http.send` -- for example:\n\n    addCacheBuster Http.send Http.defaultSettings\n        { verb = \"GET\"\n        , headers = []\n        , url = Http.url \"/api/account\" []\n        , body = Http.empty\n        }\n\nAlternatively, you can compose a decorated function and use it repeatedly, e.g.\n\n    specialSend : Settings -> Request -> Task RawError Response\n    specialSend = addCacheBuster Http.send\n\nThe definition of something like `specialSend` is left for client code, so that\nyou can mix and match whichever decorators you need. You could conceivably also\nwant to partially apply `Http.defaultSettings` (or your own defaultSettings).\nThus, one combination which can be useful is as follows:\n\n    verySpecialSend : Request -> Task Error Response\n    verySpecialSend = interpretStatus << addCacheBuster Http.send Http.defaultSettings\n\nYou could then call `verySpecialSend` like this:\n\n    verySpecialSend\n        { verb = \"GET\"\n        , headers = []\n        , url = Http.url \"/api/account\" []\n        , body = Http.empty\n        }\n\n... and, of course, you could still provide an `andThen`, `map`, `mapError`, `onError` etc.\nto do any further work that might be needed with the `Http.Error` or `Http.Result`.\n\nAlternatively, if the `Settings` need to vary at each call-site, you can do something\nlike this:\n\n    lessSpecialSend : Settings -> Request -> Task Error Response\n    lessSpecialSend settings = interpretStatus << addCacheBuster Http.send settings\n\nNote that some of this is redundant if you are using `Http.fromJson` anyway, since\n`Http.fromJson` already does the equivalent of `promoteError` and `interpretStatus`.\n\n@docs addCacheBuster, promoteError, interpretStatus\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addCacheBuster",
            "comment": " Decorates `Http.send` so that a 'cache busting' parameter will always be\nadded to the URL -- e.g. '?cacheBuster=219384729384', where the number is\nderived from the current time.  The purpose of doing this would be to help\ndefeat any caching that might otherwise take place at some point between the\nclient and server.\n",
            "type": "(Http.Settings -> Http.Request -> Task.Task Http.RawError Http.Response) -> Http.Settings -> Http.Request -> Task.Task Http.RawError Http.Response"
          },
          {
            "name": "interpretStatus",
            "comment": " Decorates the result of `Http.send` so that responses with a status code\nwhich is outside of the 2XX range are processed as `BadResponse` errors (to be\nfurther handled via `Task.onError` or `Task.mapError` etc.), rather than as\nsuccessful responses (to be further handled by `Task.andThen` or `Task.map`\netc.).  This may be useful in cases where you are not using `Http.fromJson` and\nyou do not need to distinguish amongst different types of successful status\ncode.\n\nNote that this automatically also applies `promoteError`, so you do not need to\napply that decorator as well.\n",
            "type": "Task.Task Http.RawError Http.Response -> Task.Task Http.Error Http.Response"
          },
          {
            "name": "promoteError",
            "comment": " Decorates the result of `Http.send` so that the error type is `Http.Error`\nrather than `Http.RawError`. This may be useful in cases where you are not\nusing `Http.fromJson`, and your API prefers to deal with `Http.Error` rather\nthan `Http.RawError`.\n\nPay attention to return types when composing this decorator with other\ndecorators.  For intance, if used in conjunction with `addCacheBuster`, you\nwould need to apply `addCacheBuster` first.  E.g.\n\n    -- Good\n    promoteError << addCacheBuster Http.send Http.defaultSettings\n\n    -- Bad\n    addCacheBuster promoteError << Http.send Http.defaultSettings\n",
            "type": "Task.Task Http.RawError Http.Response -> Task.Task Http.Error Http.Response"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rgrempel/elm-route-hash",
    "version": "1.0.5",
    "docs": [
      {
        "name": "RouteHash",
        "comment": " This module provides routing for single-page apps based on changes to the\nhash portion of the browser's location. The routing happens in both directions\n-- that is, changes to the browser's location hash are translated to actions\nyour app performs, and changes to your model are translated to changes in the\nbrowser's location hash. The net effect is to make it possible for the 'back'\nand 'forward' buttons in the browser to do useful things, and for the state of\nyour app to be partially bookmark-able.\n\nTo use this module, you will need to configure it using the [`start`](#start)\nfunction, as described below.\n\nThere is [additional documentation](https://github.com/rgrempel/elm-route-hash)\navailable in the README in the Github repository.\n\n# Configuration\n\n@docs start, Config, defaultPrefix\n\n# Helpers for `HashUpdate`\n\n@docs HashUpdate, set, replace, apply, map, extract\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Represents the configuration necessary to use this module.\n\n*  `prefix` is the initial characters that should be stripped from the hash (if\n    present) when reacting to location changes, and added to the hash when\n    generating location changes. Normally, you'll likely want to use\n    [`defaultPrefix`](#defaultPrefix), which is \"#!/\".\n\n*   `models` is your signal of models. This is required so that we can react to\n    changes in the model, possibly updating the location.\n\n*   `delta2update` is a function which takes two arguments and possibly\n    returns a [`HashUpdate`](#HashUpdate). The first argument is the previous\n    model.  The second argument is the current model.\n\n    The reason you are provided with both the previous and current models is\n    that sometimes the nature of the location update depends on the difference\n    between the two, not just on the latest model. For instance, if the user is\n    typing in a form, you might want to use [`replace`](#replace) rather than\n    [`set`](#set). Of course, in cases where you only need to consult the\n    current model, you can ignore the first parameter.\n\n    This module will normalize the `List String` in the update in the following\n    way before setting the actual location. It will:\n\n    * uriEncode the strings\n    * join them with \"/\"\n    * add the `prefix` to the beginning\n\n    In a modular application, you may well want to use [`map`](#map) after dispatching\n    to a lower level -- see the example in the [`map` documentation](#map).\n\n    Note that this module will automatically detect cases where you return\n    a [`HashUpdate`](#HashUpdate) which would set the same location that is\n    already set, and do nothing. Thus, you don't need to try to detect that\n    yourself.\n\n    The content of the individual strings is up to you ... essentially it\n    should be something that your `location2action` function can deal with.\n\n*   `location2action` is a function which takes a `List String` and returns\n    a list of actions your app can perform.\n\n    The argument is a normalized version of the hash portion of the location.\n    First, the `prefix` is stripped from the hash, and then the result is\n    converted to a `List String` by using '/' as a delimiter. Then, each\n    `String` value is uriDecoded.\n\n    Essentially, your `location2action` should return actions that are the\n    reverse of what your `delta2update` function produced. That is, the\n    `List String` you get back in `location2action` is the `List String` that\n    your `delta2update` used to create a [`HashUpdate`](#HashUpdate). So,\n    however you encoded your state in `delta2update`, you now need to interpret\n    that in `location2action` in order to return actions which will produce the\n    desired state.\n\n    Note that the list of actions you return will often be a single action. It\n    is a `List action` so that you can return multiple actions, if your app is\n    modular in a way that requires multiple actions to produce the desired\n    state.\n\n*   `address` is a `Signal.Address` to which the actions returned by\n    `location2action` can be sent.\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ prefix : String , models : Signal.Signal model , delta2update : model -> model -> Maybe.Maybe RouteHash.HashUpdate , location2action : List String -> List action , address : Signal.Address action }"
          }
        ],
        "types": [
          {
            "name": "HashUpdate",
            "comment": " An opaque type which represents an update to the hash portion of the\nbrowser's location.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "apply",
            "comment": " Applies the supplied function to the [`HashUpdate`](#HashUpdate). ",
            "type": "(List String -> List String) -> RouteHash.HashUpdate -> RouteHash.HashUpdate"
          },
          {
            "name": "defaultPrefix",
            "comment": " The value that you will most often want to supply as the\n`prefix` in your [`Config`](#Config). It is equal to \"#!/\".\n",
            "type": "String"
          },
          {
            "name": "extract",
            "comment": " Extracts the `List String` from the [`HashUpdate`](#HashUpdate). ",
            "type": "RouteHash.HashUpdate -> List String"
          },
          {
            "name": "map",
            "comment": " Applies the supplied function to the [`HashUpdate`](#HashUpdate).\n\nYou might use this function when dispatching in a modular application.\nFor instance, your [`delta2update`](#Config) function might look something like this:\n\n    delta2update : Model -> Model -> Maybe HashUpdate\n    delta2update old new =\n        case new.virtualPage of\n            PageTag1 ->\n                RouteHash.map ((::) \"page-tag-1\") PageModule1.delta2update old new\n\n            PageTag2 ->\n                RouteHash.map ((::) \"page-tag-2\") PageModule2.delta2update old new\n\nOf course, your model and modules may be set up differently. However you do it,\nthe `map` function allows you to dispatch `delta2update` to a lower-level module,\nand then modify the `Maybe HashUpdate` which it returns.\n",
            "type": "(List String -> List String) -> Maybe.Maybe RouteHash.HashUpdate -> Maybe.Maybe RouteHash.HashUpdate"
          },
          {
            "name": "replace",
            "comment": " Returns a HashUpdate that will update the browser's location, replacing\nthe current history entry.\n\nThe `List String` represents the hash portion of the location. Each element of\nthe list will be uriEncoded, and then the list will be joined using slashes\n(\"/\"). Finally, a prefix will be applied (by [default](#defaultPrefix), \"#!/\",\nbut it is configurable).\n",
            "type": "List String -> RouteHash.HashUpdate"
          },
          {
            "name": "set",
            "comment": " Returns a [`HashUpdate`](#HashUpdate) that will update the browser's\nlocation, creating a new history entry.\n\nThe `List String` represents the hash portion of the location. Each element of\nthe list will be uriEncoded, and then the list will be joined using slashes\n(\"/\"). Finally, a prefix will be applied (by [default](#defaultPrefix), \"#!/\",\nbut it is configurable).\n",
            "type": "List String -> RouteHash.HashUpdate"
          },
          {
            "name": "start",
            "comment": " Call this function once with your [configuration](#Config).\n\nThe signal of tasks returned by this function needs to be sent to a port\nto be executed. So, you might call it in your main module something\nlike this:\n\n    port routeTasks : Signal (Task () ())\n    port routeTasks =\n        RouteHash.start\n            { prefix = RouteHash.defaultPrefix\n            , models = models\n            , delta2update = delta2update \n            , address = address\n            , location2action = location2action\n            }\n\nSee [`Config`](#Config) for the documentation of the parameter you need to supply.\n",
            "type": "RouteHash.Config model action -> Signal.Signal (Task.Task () ())"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rhofour/elm-pairing-heap",
    "version": "1.0.0",
    "docs": [
      {
        "name": "PairingHeap",
        "comment": " This is a simple pairing heap implementation written in Elm usable as a priority queue. This code is\nbased heavily on the pseudocode available at [the Wikipedia page](https://en.wikipedia.org/wiki/Pairing_heap).\n\n# Type and Constructor\n@docs PairingHeap, empty\n\n# Operations\n@docs insert, merge, findMin, deleteMin\n\n# Convenience functions\n@docs fromList, toSortedList\n",
        "aliases": [],
        "types": [
          {
            "name": "PairingHeap",
            "comment": " A `PairingHeap` has comparable keys and values of an arbitrary type.\n",
            "args": [
              "comparable",
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "deleteMin",
            "comment": " Removes the minimum element from a `PairingHeap` returning a new heap without that element.\nThis will return an empty heap if given an empty heap as input.\n\nComplexity: O(log n)\n",
            "type": "PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "empty",
            "comment": " Create an empty PairingHeap.\n",
            "type": "PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "findMin",
            "comment": " Find the minimum value in a heap returning Nothing if the heap is empty.\n\nComplexity: O(1)\n\n    findMin (fromList [(10, ()), (3, ()), (8, ())]) == Just 3\n",
            "type": "PairingHeap.PairingHeap comparable a -> Maybe.Maybe ( comparable, a )"
          },
          {
            "name": "fromList",
            "comment": " This function turns a list of key-value pairs into a `PairingHeap`.\n\nComplexity: O(n)\n",
            "type": "List ( comparable, a ) -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "insert",
            "comment": " Inserts a new element into a `PairingHeap`.\n\nComplexity: O(1)\n",
            "type": "( comparable, a ) -> PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "merge",
            "comment": " Merges two `PairingHeap`s together into one new heap containing all of the key-value pairs from both inputs.\n\nComplexity: O(1)\n",
            "type": "PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a -> PairingHeap.PairingHeap comparable a"
          },
          {
            "name": "toSortedList",
            "comment": " This function turns a `PairingHeap` into a sorted list of key-value pairs.\n\nComplexity: O(n log n)\n",
            "type": "PairingHeap.PairingHeap comparable a -> List ( comparable, a )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rizafahmi/elm-semantic-ui",
    "version": "1.0.0",
    "docs": [
      {
        "name": "SemanticUi",
        "comment": " Elm bindings for Semantic UI using a declarative API and useful\nabstractions.\n\n# Rendering\n\n@docs Element, render\n\n# Styling\n\n@docs Size, size\n\n# Elements\n\n## Button\n\n@docs Button, button, button'\n\n",
        "aliases": [
          {
            "name": "Button",
            "comment": " The button state driving the visual appearance. ",
            "args": [],
            "type": "{ text : String, size : SemanticUi.Size }"
          },
          {
            "name": "Element",
            "comment": " An element defines a control. A control has a `state` and a function to\nturn this state into an `Html` object. ",
            "args": [
              "a"
            ],
            "type": "{ state : a, render : a -> Html.Html }"
          }
        ],
        "types": [
          {
            "name": "Size",
            "comment": " Some elements might have different sizes. ",
            "args": [],
            "cases": [
              [
                "Mini",
                []
              ],
              [
                "Tiny",
                []
              ],
              [
                "Small",
                []
              ],
              [
                "Medium",
                []
              ],
              [
                "Large",
                []
              ],
              [
                "Big",
                []
              ],
              [
                "Huge",
                []
              ],
              [
                "Massive",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "button",
            "comment": " A button with a text. ",
            "type": "String -> SemanticUi.Element SemanticUi.Button"
          },
          {
            "name": "button'",
            "comment": " A button with an empty text. ",
            "type": "SemanticUi.Element SemanticUi.Button"
          },
          {
            "name": "render",
            "comment": " Create the `Html` for a Semantic UI `Element`.\n\n    button \"click\" |> render\n",
            "type": "SemanticUi.Element a -> Html.Html"
          },
          {
            "name": "size",
            "comment": " Adjust the size of an element.\n\n    button \"click\" |> size Huge\n ",
            "type": "SemanticUi.Size -> SemanticUi.Element (SemanticUi.Sized a) -> SemanticUi.Element (SemanticUi.Sized a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/elm-date-extra",
    "version": "5.0.0",
    "docs": [
      {
        "name": "Date.Extra.Utils",
        "comment": " Date Utils.\n\n2016/14/23 `fromString` was removed as its extra date validity checking had problems in\nmany timezones so it became the same as `Date.fromString`.\n\n## Date parsing\n**Be careful with unsafeFromString it will Debug.crash() if it cant parse date.**\n@docs unsafeFromString\n\n## Utility\n@docs dayList\n@docs isoWeek\n@docs isoWeekOne\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayList",
            "comment": " Return a list of days dayLength long for successive days\nstarting from startDate.\n",
            "type": "Int -> Date.Date -> List Date.Date"
          },
          {
            "name": "isoWeek",
            "comment": " Return iso week values year, week, isoDayOfWeek.\nInput date is expected to be in local time zone of vm.\n",
            "type": "Date.Date -> ( Int, Int, Int )"
          },
          {
            "name": "isoWeekOne",
            "comment": " Return date of start of ISO week one for given year. ",
            "type": "Int -> Date.Date"
          },
          {
            "name": "unsafeFromString",
            "comment": " Utility for known input string date creation cases.\nChecks for a fail just in case and calls Debug.crash().\n",
            "type": "String -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Floor",
        "comment": " Reduce a date to a given granularity this is similar in concept\nto floor on Float so was named the same.\n\nThis allows you to modify a date to reset to minimum values\nall values below a given granularity.\n\nThis operates in local time zone so if you are not in UTC time zone\nand you output date in UTC time zone the datefields will not be floored.\n\nExample `Floor.floor Hour date` will return a modified date with\n* Minutes to 0\n* Seconds to 0\n* Milliseconds to 0\n\n@docs floor\n@docs Floor\n\nThis modules implementation became much simpler when Field module was introduced.\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "Floor",
            "comment": " Date granularity of operations. ",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "floor",
            "comment": " Floor date by reducing to minimum value all values below given granularity.\n\nThis floors in local time zone values, as the date element parts\nare pulled straight from the local time zone date values.\n",
            "type": "Date.Extra.Floor.Floor -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Field",
        "comment": " Setting a date field on a date.\n\n@docs fieldToDate\n@docs fieldToDateClamp\n@docs Field\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Field",
            "comment": " Configured Field and Value to set on date.\n\nAll field values are applied Modulus there maximum value.\n\n\n* DayOfWeek\n * The week keeps the same start of week day as passed in and changes day.\n* Month\n * Will not change year only the month of year.\n\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                [
                  "Int"
                ]
              ],
              [
                "Second",
                [
                  "Int"
                ]
              ],
              [
                "Minute",
                [
                  "Int"
                ]
              ],
              [
                "Hour",
                [
                  "Int"
                ]
              ],
              [
                "DayOfWeek",
                [
                  "( Date.Day, Date.Day )"
                ]
              ],
              [
                "DayOfMonth",
                [
                  "Int"
                ]
              ],
              [
                "Month",
                [
                  "Date.Month"
                ]
              ],
              [
                "Year",
                [
                  "Int"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "fieldToDate",
            "comment": " Set a field on a date to a specific value.\n\nIf your value in field is out side of valid range for\nthe date field this function will return Nothing.\n\n* DayOfWeek cannot be invalid input range\n* Month cannot be invalid\n\nValid ranges\n* Millisecond 0 to 999\n* Second 0 to 59\n* Minute 0 to 59\n* Hour 0 to 23\n* DayOfMonth 1 to max day of month for year\n* Year >= 0\n\n",
            "type": "Date.Extra.Field.Field -> Date.Date -> Maybe.Maybe Date.Date"
          },
          {
            "name": "fieldToDateClamp",
            "comment": "  Set a field on a date to a specific value.\n\nThis version clamps any input Field values to valid ranges as\ndescribed in the doc for fieldToDate function.\n",
            "type": "Date.Extra.Field.Field -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Duration",
        "comment": " A Duration is a length of time that may vary with with calendar date\nand time. It can be used to modify a date.\n\nWhen modify dates using Durations (Day | Month | Week | Year) this module\ncompensates for day light saving hour variations to minimise the scenarios\nthat cause the Hour field in the result to be different to the input date.\nIt can't completely avoid the hour changing as some hours are not a real\nworld date and hence will modify the hour more than the Duration modified.\n\nThis behaviour is modelled on momentjs so any observed behaviour that is\nnot the same as momentjs should be raised as in issue.\n\nNote adding or subtracting 24 * Hour units from a date may produce a\ndifferent answer to adding or subtracting a Day if day light saving\ntransitions occur as part of the date change.\n\n@docs add\n@docs Duration\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "Duration",
            "comment": " A Duration is time period that may vary with with calendar and time.\n\nUsing `Duration` adding 24 hours can produce different result to adding 1 day.\n\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Month",
                []
              ],
              [
                "Year",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add duration * count to date. ",
            "type": "Date.Extra.Duration.Duration -> Int -> Date.Date -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Format",
        "comment": " Date Format, turning dates into strings.\n\nThe format code originally came from and was modified and extended from.\nhttps://github.com/mgold/elm-date-format/blob/1.0.4/src/Date/Format.elm\n\n## Date presentation\n@docs format\n@docs formatUtc\n@docs formatOffset\n\n## Extra presentation convenience\n@docs isoString\n@docs isoStringNoOffset\n@docs utcIsoString\n\n## Low level formats used in specific places in library.\n@docs isoDateString\n@docs utcIsoDateString\n\n## Useful strings for format\n@docs isoFormat\n@docs isoMsecFormat\n@docs isoOffsetFormat\n@docs isoMsecOffsetFormat\n@docs isoDateFormat\n@docs isoTimeFormat\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "format",
            "comment": " Use a format string to format a date.\nThis gets time zone offset from provided date.\n",
            "type": "Date.Extra.Config.Config -> String -> Date.Date -> String"
          },
          {
            "name": "formatOffset",
            "comment": " This adjusts date for offset, and renders with the offset ",
            "type": "Date.Extra.Config.Config -> Int -> String -> Date.Date -> String"
          },
          {
            "name": "formatUtc",
            "comment": " Convert date to utc then format it with offset set to 0 if rendered. ",
            "type": "Date.Extra.Config.Config -> String -> Date.Date -> String"
          },
          {
            "name": "isoDateFormat",
            "comment": " ISO Date. ",
            "type": "String"
          },
          {
            "name": "isoDateString",
            "comment": " Return date as string.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoFormat",
            "comment": " ISO date time, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoMsecFormat",
            "comment": " ISO Date time with milliseconds, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoMsecOffsetFormat",
            "comment": " ISO Date time with milliseconds and timezone, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoOffsetFormat",
            "comment": " ISO Date time with timezone, 24hr. ",
            "type": "String"
          },
          {
            "name": "isoString",
            "comment": " Return date and time as string in local zone. ",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoStringNoOffset",
            "comment": " Return date and time as string in local zone, without\na timezone offset as otuput by `Format.isoString`.\nIntroduced to deal with dates assuming local time zone.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "isoTimeFormat",
            "comment": " ISO Time 24hr. ",
            "type": "String"
          },
          {
            "name": "utcIsoDateString",
            "comment": " Utc variant of isoDateString.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
            "type": "Date.Date -> String"
          },
          {
            "name": "utcIsoString",
            "comment": " Return date and time as string in ISO form with Z for UTC offset. ",
            "type": "Date.Date -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Create",
        "comment": " Create dates and offsets.\n\n@docs getTimezoneOffset\n@docs dateFromFields\n@docs timeFromFields\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dateFromFields",
            "comment": " Create a date in current time zone from given fields.\nAll field values are clamped to there allowed range values.\nHours are input in 24 hour time range 0 to 23 valid.\nReturns dates in current time zone.\n\nUsing algorithm from http://howardhinnant.github.io/date_algorithms.html\nSpecifically days_from_civil function.\n\nThe two `<*>Compensate` values adjust for the zone offset time\nintroduced by `epochDate` as starting point.\n",
            "type": "Int -> Date.Month -> Int -> Int -> Int -> Int -> Int -> Date.Date"
          },
          {
            "name": "getTimezoneOffset",
            "comment": " Return the time zone offset of current javascript environment underneath\nElm in Minutes. This should produce the same result getTimezoneOffset()\nfor a given date in the same javascript VM.\n\nTime zone offset is always for a given date and time so an input date is required.\n\nGiven that timezones change (though slowly) this is not strictly pure, but\nI suspect it is sufficiently pure to be useful. Is is dependent on the timezone\nmechanics of the javascript VM.\n\n### Example zone stuff.\nFor an offset of -600 minutes, in +10:00 time zone offset.\n",
            "type": "Date.Date -> Int"
          },
          {
            "name": "timeFromFields",
            "comment": " Create a time in current time zone from given fields, for\nwhen you dont care about the date part but need time part anyway.\n\nAll field values are clamped to there allowed range values.\nThis can only return dates in current time zone.\n\nHours are input in 24 hour time range 0 to 23 valid.\n\nThis defaults to year 1970, month Jan, day of month 1 for date part.\n",
            "type": "Int -> Int -> Int -> Int -> Date.Date"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Config.Configs",
        "comment": " Get a Date Extra Config based up on a locale code.\n\n@docs getConfig\n@docs configs\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "configs",
            "comment": " Built in configurations. ",
            "type": "Dict.Dict String Date.Extra.Config.Config"
          },
          {
            "name": "getConfig",
            "comment": " Get a Date Extra Config for a locale id.\n\nLower case matches strings and accepts \"-\" or \"_\" to seperate\nthe characters in code.\n\nReturns \"en_us\" config if it can't find a match in configs.\n",
            "type": "String -> Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_us",
        "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-us. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Config.Config_en_au",
        "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "config",
            "comment": " Config for en-au. ",
            "type": "Date.Extra.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Period",
        "comment": " Period is a fixed length of time.\n\nName of type concept copied from NodaTime.\n\nThis module has no concept of Months or Years which have variable lenghts of time.\nFor that see Duration.\n\n@docs add\n@docs diff\n@docs Period\n@docs DeltaRecord\n@docs zeroDelta\n@docs toTicks\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "DeltaRecord",
            "comment": " A multi granularity period delta. ",
            "args": [],
            "type": "{ week : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int }"
          }
        ],
        "types": [
          {
            "name": "Period",
            "comment": " A Period.\n\nWeek is a convenience for users if they want to use it, it does\njust scale Day in functionality so is not strictly required.\n\nDELTARECORD values are multiplied addend on application.\n",
            "args": [],
            "cases": [
              [
                "Millisecond",
                []
              ],
              [
                "Second",
                []
              ],
              [
                "Minute",
                []
              ],
              [
                "Hour",
                []
              ],
              [
                "Day",
                []
              ],
              [
                "Week",
                []
              ],
              [
                "Delta",
                [
                  "Date.Extra.Period.DeltaRecord"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "add",
            "comment": " Add Period count to date. ",
            "type": "Date.Extra.Period.Period -> Int -> Date.Date -> Date.Date"
          },
          {
            "name": "diff",
            "comment": " Return a Period representing date difference. date1 - date2.\n\nIf  you add the result of this function to date2 with addend of 1\nwill return date1.\n ",
            "type": "Date.Date -> Date.Date -> Date.Extra.Period.DeltaRecord"
          },
          {
            "name": "toTicks",
            "comment": " Return tick counts for periods.\nUseful to get total ticks in a Delta.\n",
            "type": "Date.Extra.Period.Period -> Int"
          },
          {
            "name": "zeroDelta",
            "comment": " All zero delta.\nUseful as a starting point if you want to set a few fields only.\n",
            "type": "Date.Extra.Period.DeltaRecord"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Compare",
        "comment": " Compare dates.\n\n@docs is\n@docs is3\n@docs Compare2\n@docs Compare3\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [
          {
            "name": "Compare2",
            "comment": " Date comparison type for 2 dates.\n\n* After\n * Return True if date1 is after date2.\n* Before\n * Return True if date1 is before date2.\n* Same\n * Return True if date1 is same as date2.\n* SameOrAfter\n * Return True if date1 is same or after date2.\n* SameOrBefore\n * Return True if date1 is same or before date2.\n",
            "args": [],
            "cases": [
              [
                "After",
                []
              ],
              [
                "Before",
                []
              ],
              [
                "Same",
                []
              ],
              [
                "SameOrAfter",
                []
              ],
              [
                "SameOrBefore",
                []
              ]
            ]
          },
          {
            "name": "Compare3",
            "comment": " Date comparison type for 3 dates.\n\nBetween does not care if date2 > date3 or date2 < date3.\n\n* Between\n * Return True if date1 is After date2 and Before date3\n * Return True if date1 is After date3 and Before date2\n* BetweenOpenStart\n * Return True if date1 is SameOrAfter date2 and Before date3\n* BetweenOpenEnd\n * Return True if date1 is After date2 and SameOrBefore date3\n* BetweenOpen\n * Return True if date1 is SameOrAfter date2 and SameOrBefore date3\n",
            "args": [],
            "cases": [
              [
                "Between",
                []
              ],
              [
                "BetweenOpenStart",
                []
              ],
              [
                "BetweenOpenEnd",
                []
              ],
              [
                "BetweenOpen",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "is",
            "comment": " Compare two dates.\n",
            "type": "Date.Extra.Compare.Compare2 -> Date.Date -> Date.Date -> Bool"
          },
          {
            "name": "is3",
            "comment": " Compare three dates.\n\nThis figures out the low and high bounds from date2\nand date3 using minimum and maximum of them respectively.\n",
            "type": "Date.Extra.Compare.Compare3 -> Date.Date -> Date.Date -> Date.Date -> Bool"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.I18n.I_en_us",
        "comment": " English values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "dayName",
            "comment": " Day full name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "dayShort",
            "comment": " Day short name. ",
            "type": "Date.Day -> String"
          },
          {
            "name": "monthName",
            "comment": " Month full name. ",
            "type": "Date.Month -> String"
          },
          {
            "name": "monthShort",
            "comment": " Month short name. ",
            "type": "Date.Month -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Config",
        "comment": " Date configuration.\n\nFor i18n for day and month names.\nParameter to Format.format* functions.\n\nThere is scope to put in some default format strings here.\n\n@docs Config\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Configuration for formatting dates. ",
            "args": [],
            "type": "{ i18n : { dayShort : Date.Day -> String , dayName : Date.Day -> String , monthShort : Date.Month -> String , monthName : Date.Month -> String } , format : { date : String , longDate : String , time : String , longTime : String , dateTime : String , firstDayOfWeek : Date.Day } }"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Date.Extra.Core",
        "comment": " Date core.\n\n## Info\n@docs monthToInt\n@docs intToMonth\n@docs daysInMonth\n@docs monthList\n@docs daysInNextMonth\n@docs daysInPrevMonth\n@docs daysInMonthDate\n@docs isLeapYear\n@docs isLeapYearDate\n@docs yearToDayLength\n@docs isoDayOfWeek\n\n## Utility\n@docs toFirstOfMonth\n@docs firstOfNextMonthDate\n@docs lastOfMonthDate\n@docs lastOfPrevMonthDate\n@docs daysBackToStartOfWeek\n\n## Conversion\n@docs fromTime\n@docs toTime\n\n## Iteration Utility\n@docs nextDay\n@docs prevDay\n@docs nextMonth\n@docs prevMonth\n\n## Date constants\n@docs epochDateStr\n\n## Date constants\n@docs ticksAMillisecond\n@docs ticksASecond\n@docs ticksAMinute\n@docs ticksAnHour\n@docs ticksADay\n@docs ticksAWeek\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "daysBackToStartOfWeek",
            "comment": " Days back to start of week day. ",
            "type": "Date.Day -> Date.Day -> Int"
          },
          {
            "name": "daysInMonth",
            "comment": " Return days in month for year month. ",
            "type": "Int -> Date.Month -> Int"
          },
          {
            "name": "daysInMonthDate",
            "comment": " Days in month for given date. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "daysInNextMonth",
            "comment": " Return days in next calendar month. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "daysInPrevMonth",
            "comment": " Return days in previous calendar month. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "epochDateStr",
            "comment": " Epoch starting point for tick 0. ",
            "type": "String"
          },
          {
            "name": "firstOfNextMonthDate",
            "comment": " Return first of next month date. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "fromTime",
            "comment": " Convenience fromTime as time ticks are Elm Ints in this library. ",
            "type": "Int -> Date.Date"
          },
          {
            "name": "intToMonth",
            "comment": " Return integer as month. Jan <= 1 Feb == 2 up to Dec > 11. ",
            "type": "Int -> Date.Month"
          },
          {
            "name": "isLeapYear",
            "comment": " Return True if Year is a leap year. ",
            "type": "Int -> Bool"
          },
          {
            "name": "isLeapYearDate",
            "comment": " Return True if Year of Date is a leap year. ",
            "type": "Date.Date -> Bool"
          },
          {
            "name": "isoDayOfWeek",
            "comment": " Return the Iso DayOfWeek Monday 1, to Sunday 7. ",
            "type": "Date.Day -> Int"
          },
          {
            "name": "lastOfMonthDate",
            "comment": " Resturn date of last day of month. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "lastOfPrevMonthDate",
            "comment": " Return last of previous month date. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "monthList",
            "comment": " List of months in order from Jan to Dec. ",
            "type": "List Date.Month"
          },
          {
            "name": "monthToInt",
            "comment": " Return month as integer. Jan = 1 to Dec = 12. ",
            "type": "Date.Month -> Int"
          },
          {
            "name": "nextDay",
            "comment": " Return next day in calendar sequence. ",
            "type": "Date.Day -> Date.Day"
          },
          {
            "name": "nextMonth",
            "comment": " Return next month in calendar sequence. ",
            "type": "Date.Month -> Date.Month"
          },
          {
            "name": "prevDay",
            "comment": " Return previous day in calendar sequence. ",
            "type": "Date.Day -> Date.Day"
          },
          {
            "name": "prevMonth",
            "comment": " Return previous month in calendar sequence. ",
            "type": "Date.Month -> Date.Month"
          },
          {
            "name": "ticksADay",
            "comment": " Ticks in a day. ",
            "type": "Int"
          },
          {
            "name": "ticksAMillisecond",
            "comment": " Ticks in a millisecond. (this is 1 on Win 7 in Chrome) ",
            "type": "Int"
          },
          {
            "name": "ticksAMinute",
            "comment": " Ticks in a minute. ",
            "type": "Int"
          },
          {
            "name": "ticksASecond",
            "comment": " Ticks in a second. ",
            "type": "Int"
          },
          {
            "name": "ticksAWeek",
            "comment": " Ticks in a week. ",
            "type": "Int"
          },
          {
            "name": "ticksAnHour",
            "comment": " Ticks in an hour. ",
            "type": "Int"
          },
          {
            "name": "toFirstOfMonth",
            "comment": " Return date of first of month. ",
            "type": "Date.Date -> Date.Date"
          },
          {
            "name": "toTime",
            "comment": " Convenience toTime as time ticks are Elm Ints in this library. ",
            "type": "Date.Date -> Int"
          },
          {
            "name": "yearToDayLength",
            "comment": " Return number of days in a year. ",
            "type": "Int -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/elm-text-search",
    "version": "2.1.1",
    "docs": [
      {
        "name": "ElmTextSearch",
        "comment": " A full text indexer written in Elm language inspired by lunr.js.\n\nA useful article about lunr.js\nhttps://www.new-bamboo.co.uk/blog/2013/02/26/full-text-search-in-your-browser/\n\n## Create Index\n@docs new\n@docs newWith\n\n## Modify Index\n@docs add\n@docs addDocs\n@docs remove\n@docs update\n\n## Query Index\n@docs search\n\n## Types\n@docs Index\n@docs Config\n@docs SimpleConfig\n\n## Save and Load an Index\n\n* You can save an index using [`ElmTextSearch.Json.Encoder.encoder`](ElmTextSearch.Json.Encoder#encoder)\n* You can load a saved index using\n  [`ElmTextSearch.Json.Decoder.decoder`](ElmTextSearch.Json.Decoder#decoder)\n  to produce a [`Index.Model.CodecIndexRecord`](Index.Model#CodecIndexRecord).\n* You can save a [`Index.Model.CodecIndexRecord`](Index.Model#CodecIndexRecord)\n  using [`ElmTextSearch.Json.Encoder.codecIndexRecordEncoder`](ElmTextSearch.Json.Encoder#codecIndexRecordEncoder)\n* ** Modifying an index outside of ElmTextSearch using the Decoder and Encoder directly\nmay cause it to not work correctly loaded into ElmTextSearch. **\n\n@docs storeToValue\n@docs storeToString\n@docs fromString\n@docs fromValue\n@docs fromStringWith\n@docs fromValueWith\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " A Config is required to create an Index. ",
            "args": [
              "doc"
            ],
            "type": "Index.Model.Config doc"
          },
          {
            "name": "Index",
            "comment": " An Index holds the data to be able search for added documents.\n",
            "args": [
              "doc"
            ],
            "type": "Index.Index doc"
          },
          {
            "name": "SimpleConfig",
            "comment": " A SimpleConfig is the least amount of configuration data\nrequired to create an Index.\n",
            "args": [
              "doc"
            ],
            "type": "{ ref : doc -> String, fields : List ( doc -> String, Float ) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add a document to an index.\n\nStarting with the ElmTextSearch.new example above this adds a document.\n```\naddDocToIndexExample =\n    ElmTextSearch.add\n      { cid = \"id1\"\n      , title = \"First Title\"\n      , author = \"Some Author\"\n      , body = \"Words in this example document with explanations.\"\n      }\n      createNewWithIndexExample\n```\n\nConditions that cause a result Err with message.\n* Error document ref is empty.\n* Error after tokenisation there are no terms to index.\n* Error adding document that allready exists.\n",
            "type": "doc -> ElmTextSearch.Index doc -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "addDocs",
            "comment": " Add multiple documents. Tries to add all docs and collects errors..\nIt does not stop adding at first error encountered.\n\nThe result part List (Int, String) is the list of document index\nand the error string message result of adding.\nReturns the index unchanged if all documents error when added.\nReturns the updated index after adding the documents.\n",
            "type": "List doc -> ElmTextSearch.Index doc -> ( ElmTextSearch.Index doc, List ( Int, String ) )"
          },
          {
            "name": "fromString",
            "comment": " Create an Index from a String which has a stored Index in it and the\nsupplied basic configurations.\n\nSee [`ElmTextSearch.fromStringWith`](ElmTextSearch#fromStringWith) for possible Err results.\n",
            "type": "ElmTextSearch.SimpleConfig doc -> String -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "fromStringWith",
            "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of Config match the index\ntype being loaded it will return an Err.\n\nThe list of configurations wil be searched for a matching indexType\nso you should provide configs for all types you may be trying to load.\nNo more than the config that matches is required though.\n\nIf the none of the supplied Config match the loaded Index then it\nwill try if the index being loaded matches the default version if so\nit will still load the index.\n\nThe following Err results may be returned.\n* \"Error cannot load Index. Tried to load index of type \\\"__IndexTest Type -\\\". It is not in supported index configurations.\"\n * It contains the loaded version index type which comes from input.\n* \"Error cannot load Index. Version supported is 1.0.0. Version tried to load is 1.0.1.\"\n * It includes both expected and loaded versions which may vary.\n",
            "type": "List (ElmTextSearch.Config doc) -> String -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "fromValue",
            "comment": " Create an Index from a Value which has a stored Index in it.\n\nSee [`ElmTextSearch.fromStringWith`](ElmTextSearch#fromStringWith) for possible Err results.\n",
            "type": "ElmTextSearch.SimpleConfig doc -> Json.Decode.Value -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "fromValueWith",
            "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of SimpleConfig match the index\nbeing decoded it will return an Err.\n\nSee [`ElmTextSearch.fromStringWith`](ElmTextSearch#fromStringWith) for possible Err results.\n",
            "type": "List (ElmTextSearch.Config doc) -> Json.Decode.Value -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "new",
            "comment": " Create new index.\n\nExample\n```\nimport ElmTextSearch\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateNewIndexExample : ElmTextSearch.Index ExampleDocType\ncreateNewIndexExample =\n  ElmTextSearch.new\n    { ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    }\n```\n\nThe `SimpleConfig` parameter to new is\n* ref\n * The unique document reference will be extracted from each\n   document using `.cid`.\n* fields\n * The following fields will be indexed from each document\n  * `.title`\n  * `.body`\n * When searching the index any word matches found in the\n   `.title` field (boost value 5.0) raise the document match score\n   more than if found in the `.body` field (boost value 1.0).\n  * The document match score determines the order of the list\n    of matching documents returned.\n",
            "type": "ElmTextSearch.SimpleConfig doc -> ElmTextSearch.Index doc"
          },
          {
            "name": "newWith",
            "comment": " Create new index with additional configuration.\n\nExample.\n```\nimport ElmTextSearch\nimport Index.Defaults\nimport StopWordFilter\n\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateMyStopWordFilter =\n    StopWordFilter.createFilterFuncWith\n      [ \"explanations\" ]\n\n\ncreateNewWithIndexExample : ElmTextSearch.Index ExampleDocType\ncreateNewWithIndexExample =\n  ElmTextSearch.newWith\n    { indexType = \"ElmTextSearch - Customized Stop Words v1\"\n    , ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    , transformFactories = Index.Defaults.defaultTransformFactories\n    , filterFactories = [ createMyStopWordFilter ]\n    }\n```\n",
            "type": "ElmTextSearch.Config doc -> ElmTextSearch.Index doc"
          },
          {
            "name": "remove",
            "comment": " Remove a document from an index.\n\nStarting with the ElmTextSearch.new example above this removes a document.\n```\nremoveDocFromIndexExample =\n    ElmTextSearch.remove\n      { cid = \"123\"\n      , title = \"Examples of a Banana\"\n      , author = \"Sally Apples\"\n      , body = \"Sally writes words about a banana.\"\n      }\n      createNewIndexExample\n```\n\nConditions that cause a result Err with message.\n* Error document has an empty unique id (ref).\n* Error document is not in index.\n",
            "type": "doc -> ElmTextSearch.Index doc -> Result.Result String (ElmTextSearch.Index doc)"
          },
          {
            "name": "search",
            "comment": " Search an index with query.\n\nTokens are extracted from the query string and passed through the\nsame processing used when indexing documents.\n\nEach token is expanded, so that the term \"he\" might be expanded to \"hello\"\nand \"help\" if those terms were already included in the document index.\n\nMultiple tokens are allowed and will lead to an AND based query.\n\nThe following example runs a search for documents containing both \"apple\" and \"banana\".\n\n```\nsearchResult =\n    Index.search \"Apple banana\" createNewIndexExample\n```\n\nResults are a list of matching document reference identifiers with\nthere similarity to query score, ordered by score descending, so the\nbest matches are earliest in the list.\n\nAn index is returned from search as well. This is because the data model may\nbe updated to improve performance for later searches.\n\nAdding or removing a new document will cause some of the internal caching\nto be reset.\n\nConditions that cause a result Err with message.\n* Error there are no documents in index to search.\n* Error query is empty.\n* Error after tokenisation there are no terms to search for.\n\n",
            "type": "String -> ElmTextSearch.Index doc -> Result.Result String ( ElmTextSearch.Index doc, List ( String, Float ) )"
          },
          {
            "name": "storeToString",
            "comment": " Store an index to a String.\n\nYou can also use [`ElmTextSearch.Json.Encoder`](ElmTextSearch.Json.Encoder).\n",
            "type": "ElmTextSearch.Index doc -> String"
          },
          {
            "name": "storeToValue",
            "comment": " Store an index to a Value.\n\nYou can also use [`ElmTextSearch.Json.Encoder`](ElmTextSearch.Json.Encoder).\n",
            "type": "ElmTextSearch.Index doc -> Json.Encode.Value"
          },
          {
            "name": "update",
            "comment": " Update a document in an index.\n\nStarting with the ElmTextSearch.new example above this updates a document.\n```\n    updatedIndex =\n      ElmTextSearch.update\n        { cid = \"123\"\n        , title = \"Examples of a Bananas in every day life.\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes more words about a banana.\"\n        }\n        createNewIndexExample\n```\n\nConditions that cause an error result are those for\n[`ElmTextSearch.remove`](ElmTextSearch#remove) and\n[`ElmTextSearch.add`](ElmTextSearch#add).\n",
            "type": "doc -> ElmTextSearch.Index doc -> Result.Result String (ElmTextSearch.Index doc)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "ElmTextSearch.Json.Encoder",
        "comment": " Encoder for Index.\n\n@docs encoder\n@docs codecIndexRecordEncoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "codecIndexRecordEncoder",
            "comment": " Encode CodecIndexRecord. ",
            "type": "Index.Model.CodecIndexRecord -> Json.Encode.Value"
          },
          {
            "name": "encoder",
            "comment": " Encoder for Index a.\n\nOnly encoding fields required to recreate a working index.\n\nThe following fields are not saved as they are restored via\nthe provided Config on fromString.\n* ref\n* fields\n* transformFactories\n* filterFactories\n\nThe following fields are not saved because they are an\nacceleration model, decoder needs to set it on fromString.\n* corpusTokensIndex\n\nThe following fields are not saved because they are caches\nand are cached as operationg requires\n* transforms\n* filters\n* idfCache\n\nDo not need an (a -> Encode.Value) because a is a document\ntype and that is never encoded from an Index.\n",
            "type": "Index.Model.Index doc -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Index.Defaults",
        "comment": " Defaults for indexes and configurations.\n\n## Index Storage Engine Version and Type\n@docs indexVersion\n@docs elmTextSearchIndexType\n\n\n## Built in Transforms and Filters\n@docs defaultTransformFactories\n@docs defaultFilterFactories\n@docs defaultTokenTrimmerFuncCreator\n@docs defaultStemmerFuncCreator\n@docs defaultStopWordFilterFuncCreator\n\n\n## Config type adapters\n@docs getDefaultIndexConfig\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "defaultFilterFactories",
            "comment": " Index default filter factories. ",
            "type": "List (Index.Model.FilterFactory doc)"
          },
          {
            "name": "defaultStemmerFuncCreator",
            "comment": " The default token stemmer transform function creator. ",
            "type": "Index.Model.TransformFactory doc"
          },
          {
            "name": "defaultStopWordFilterFuncCreator",
            "comment": " The default stop word filter function creator. ",
            "type": "Index.Model.FilterFactory doc"
          },
          {
            "name": "defaultTokenTrimmerFuncCreator",
            "comment": " The default token trimmer transform function creator.\nNormally applied first in transform functions.\n",
            "type": "Index.Model.TransformFactory doc"
          },
          {
            "name": "defaultTransformFactories",
            "comment": " Index default transform factories. ",
            "type": "List (Index.Model.TransformFactory doc)"
          },
          {
            "name": "elmTextSearchIndexType",
            "comment": " The type of index defaults to using.\n\nIt defines the default token transforms and filters.\n",
            "type": "String"
          },
          {
            "name": "getDefaultIndexConfig",
            "comment": " Convert Index.Model.SimpleConfig to Index.Model.Config\n\nFilling in default values for fields not in SimpleConfig\n\nThis is the definition of the default index configuration.\n",
            "type": "Index.Model.SimpleConfig doc -> Index.Model.Config doc"
          },
          {
            "name": "indexVersion",
            "comment": " The version of index, for loading a saved index.\n\nThis is not the same as package version.\n\nThis needs to change if the encoded format changes. Be careful of updates to\nTrie package, if Trie encoding format changes this version needs to change as\nwell.\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "StopWordFilter",
        "comment": " StopWordFilter is an English language stop word list filter, any words\ncontained in the list are not stored in the index.\n\nThis is intended to be used in the ElmTextSearch token processing pipeline.\n\n### Things to know about stop word lists.\n* Input tokens to create stop word filters should be full words, if you\ndont know the transform steps for index or if you use the list with different\nsets of transforms.\n* If you know the exact transform process of your Index you can prerun the\ntransform process to generate your word list, which in theory might\nmake it a little more efficient.\n* It is more efficient to merge all your stop words into a single\nstop word filter.\n\n## create default stop word filter func\n@docs createDefaultFilterFunc\n\n## A default stop word english filter list\n@docs stopEnglishWordList\n\n## Create a custom stop word filter list\n@docs createFilterFuncWith\n@docs createFilterFunc\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "createDefaultFilterFunc",
            "comment": " Default english stop word filter suitable for ElmTextSearch.\n",
            "type": "Index.Model.FilterFactory doc"
          },
          {
            "name": "createFilterFunc",
            "comment": " Create stop word filter for provided list of tokens suitable for ElmTextSearch.\n\n** This creates a stop world filter purely from your own word list, understand\nwhat you are doing and consequences if you use this. **\n\nThe FilterFunc created returns True to allow words into index.\nSo words found in the stopWordList return False\n",
            "type": "List String -> Index.Model.FilterFactory doc"
          },
          {
            "name": "createFilterFuncWith",
            "comment": " Create stop word list filter suitable for ElmTextSearch, this versions\nextends the default word list with the extra words provided.\n",
            "type": "List String -> Index.Model.FilterFactory doc"
          },
          {
            "name": "stopEnglishWordList",
            "comment": " Default english stop word list to create filter.\n",
            "type": "List String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "ElmTextSearch.Json.Decoder",
        "comment": " Decoder for Index.\n\nIt decodes to a CodecIndexRecord.\n\n@docs decoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " CodecIndexRecord decoder. ",
            "type": "Json.Decode.Decoder Index.Model.CodecIndexRecord"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/lunrelm",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Examples.LunrelmNewWith",
        "comment": " Create an index with customized\nstop word filter using Lunrelm.newWith\n\n@docs codeForLunrelmNewWithExample\n@docs ExampleDocType\n@docs createNewWithIndexExample\n@docs addDocToIndexExample\n@docs searchIndexExample\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "ExampleDocType",
            "comment": " Example document type. ",
            "args": [],
            "type": "{ cid : String, title : String, author : String, body : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addDocToIndexExample",
            "comment": " Adding a document to the index. ",
            "type": "Result.Result String (Lunrelm.Index Examples.LunrelmNewWith.ExampleDocType)"
          },
          {
            "name": "codeForLunrelmNewWithExample",
            "comment": " Code for this example.\n```\n\nimport Lunrelm\nimport IndexDefaults\nimport StopWordFilter\n\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateMyStopWordFilter =\n    StopWordFilter.createFilterFuncWith\n      [ \"electronic\" ]\n\n\ncreateNewWithIndexExample : Lunrelm.Index ExampleDocType\ncreateNewWithIndexExample =\n  Lunrelm.newWith\n    { indexType = \"Lunrelm - For paw paw automation index v1\"\n    , ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    , transformFactories = IndexDefaults.defaultTransformFactories\n    , filterFactories = [ createMyStopWordFilter ]\n    }\n\n\naddDocToIndexExample : Result String (Lunrelm.Index ExampleDocType)\naddDocToIndexExample =\n    Lunrelm.add\n      createNewWithIndexExample\n      { cid = \"id1\"\n      , title = \"The Pawpaw Harvester Model G45\"\n      , author = \"Pawpaw Fan\"\n      , body = \"It can help you harvest pawpaws. It also does avocado.\"\n      }\n\n\nsearchIndexExample :\n    Result\n      String\n      ( Result\n          String\n          ( Lunrelm.Index ExampleDocType, List (String, Float) )\n      )\nsearchIndexExample =\n    Result.map\n      (\\index ->\n        Lunrelm.search\n          index\n          \"avocado\"\n      )\n      addDocToIndexExample\n\n\n```\n",
            "type": "String"
          },
          {
            "name": "createNewWithIndexExample",
            "comment": " Create a Lunrelm index with extra options.\n\nIn this case a customized stop word filter is provided.\n\nThis example is replacing the stop word filter only.\n\nIt is still supplying the default transform factories.\n\nSupply an index type for your customized index config. This\nbecomes important when loading back saved index.\n\nIt is a good idea to include a version in your index type string\nin case you update things and might still have old versions\naround that you need to work with.\n\nSee Examples.LunrelmNew for informatoin about the `ref` and `fields` fields.\n",
            "type": "Lunrelm.Index Examples.LunrelmNewWith.ExampleDocType"
          },
          {
            "name": "searchIndexExample",
            "comment": " Search the index.\n\nThe result includes an updated Index because a search causes internal\ncaches to be updated to improve overall performance.\n",
            "type": "Result.Result String (Result.Result String ( Lunrelm.Index Examples.LunrelmNewWith.ExampleDocType , List ( String, Float ) ))"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Examples.LunrelmNew",
        "comment": " Create an index and add a document.\n\n@docs codeForLunrelmNewExample\n@docs ExampleDocType\n@docs createNewIndexExample\n@docs updatedMyIndexAfterAdd\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "ExampleDocType",
            "comment": " Example document type. ",
            "args": [],
            "type": "{ cid : String, title : String, author : String, body : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "codeForLunrelmNewExample",
            "comment": " Code for this example.\n\n```\nimport Lunrelm\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateNewIndexExample : Lunrelm.Index ExampleDocType\ncreateNewIndexExample =\n  Lunrelm.new\n    { ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    }\n\n{-| Add a document to an index. -}\nupdatedMyIndexAfterAdd : Result String (Lunrelm.Index ExampleDocType)\nupdatedMyIndexAfterAdd =\n    Lunrelm.add\n      createNewIndexExample\n      { cid = \"id1\"\n      , title = \"First Title\"\n      , author = \"Some Author\"\n      , body = \"Words in this document.\"\n      }\n```\n\n",
            "type": "String"
          },
          {
            "name": "createNewIndexExample",
            "comment": " Create a Lunrelm index with default configuration.\n\nThe provided configuration has the following meaning\n* ref\n * The unique document reference will be extracted from each\n   document using the `.cid` function.\n* fields\n * The following fields will be indexed from each document\n  * `.title`\n  * `.body`\n * When searching the index any word matches found in the\n   `.title` field (boost value 5) raise the document match score\n   more than if found in the `.body` field (boost value 1).\n  * The document match score determines the order of the list\n    of matching documents returned.\n\n\n",
            "type": "Lunrelm.Index Examples.LunrelmNew.ExampleDocType"
          },
          {
            "name": "updatedMyIndexAfterAdd",
            "comment": " Add a document to an index. ",
            "type": "Result.Result String (Lunrelm.Index Examples.LunrelmNew.ExampleDocType)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Lunrelm",
        "comment": " Lunrelm a full text indexer written in Elm language inspired by lunr.js.\n\nA useful article about lunr.js\nhttps://www.new-bamboo.co.uk/blog/2013/02/26/full-text-search-in-your-browser/\n\n## Create Index\n@docs new\n@docs newWith\n\n## Modify Index\n@docs add\n@docs remove\n@docs update\n\n## Query Index\n@docs search\n\n## Types\n@docs Index\n@docs Config\n@docs LunrelmSimpleConfig\n\n## Save and Load a Lunerlm Index\n\n* You can save an index using [`Lunrelm.Json.Encoder.encoder`](Lunrelm.Json.Encoder#encoder)\n* You can load a saved index using\n  [`Lunrelm.Json.Decoder.decoder`](Lunrelm.Json.Decoder#decoder)\n  to produce a `CodecIndexRecord`.\n* You can save a CodecIndexRecord using [`Lunrelm.Json.Encoder.encoder`](Lunrelm.Json.Encoder#encoder)\n* ** Modifying an index outside of Lunrelm using the Decoder and Encoder directly\nmay cause it to not work correctly loaded into Lurelm. **\n\n@docs storeToValue\n@docs storeToString\n@docs fromString\n@docs fromValue\n@docs fromStringWith\n@docs fromValueWith\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Lunrelm configuration. ",
            "args": [
              "doc"
            ],
            "type": "IndexModel.Config doc"
          },
          {
            "name": "Index",
            "comment": " Lunrelm Index\n",
            "args": [
              "doc"
            ],
            "type": "Index.Index doc"
          },
          {
            "name": "LunrelmSimpleConfig",
            "comment": " Lunrelm SimpleConfig. ",
            "args": [
              "doc"
            ],
            "type": "{ ref : doc -> String, fields : List ( doc -> String, Float ) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add a document to Lunrelm index.\n\nStarting with the Lunrelm.new example above this adds a document.\n```\n    updatedIndex =\n      Lunrelm.add\n        indexMyDocs\n        { cid = \"123\"\n        , title = \"Examples of a Banana\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes words about a banana.\"\n        }\n```\n\nConditions that cause a result Err with message.\n* Error document ref is empty.\n* Error after tokenisation there are no terms to index.\n* Error adding document that allready exists.\n",
            "type": "Lunrelm.Index doc -> doc -> Result.Result String (Lunrelm.Index doc)"
          },
          {
            "name": "fromString",
            "comment": " Create an Index from a String which has a stored Index in it and the\nsupplied basic configurations.\n\nSee [`Lunrelm.fromStringWith`](Lunrelm#fromStringWith) for possible Err results.\n",
            "type": "Lunrelm.LunrelmSimpleConfig doc -> String -> Result.Result String (Lunrelm.Index doc)"
          },
          {
            "name": "fromStringWith",
            "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of Config match the index\ntype being loaded it will return an Err.\n\nThe list of configurations wil be searched for a matching indexType\nso you should provide configs for all types you may be trying to load.\nNo more than the config that matches is required though.\n\nIf the none of the supplied Config match the loaded Index then it\nwill try if the index being loaded matches the default version if so\nit will still load the index.\n\nThe following Err results may be returned.\n* \"Error cannot load Lunrelm Index. Tried to load index of type \\\"__IndexTest Type -\\\". It is not in supported index configurations.\"\n * It contains the loaded version index type which comes from input.\n* \"Error cannot load Lunrelm Index. Version supported is 1.0.0. Version tried to load is 1.0.1.\"\n * It includes both expected and loaded versions which may vary.\n\n",
            "type": "List (Lunrelm.Config doc) -> String -> Result.Result String (Lunrelm.Index doc)"
          },
          {
            "name": "fromValue",
            "comment": " Create an Index from a Value which has a stored Index in it.\n\nSee [`Lunrelm.fromStringWith`](Lunrelm#fromStringWith) for possible Err results.\n",
            "type": "Lunrelm.LunrelmSimpleConfig doc -> Json.Decode.Value -> Result.Result String (Lunrelm.Index doc)"
          },
          {
            "name": "fromValueWith",
            "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of SimpleConfig match the index\nbeing decoded it will return an Err.\n\nSee [`Lunrelm.fromStringWith`](Lunrelm#fromStringWith) for possible Err results.\n",
            "type": "List (Lunrelm.Config doc) -> Json.Decode.Value -> Result.Result String (Lunrelm.Index doc)"
          },
          {
            "name": "new",
            "comment": " Create new Lunrelm index.\n\nExample\n\n```\nimport Lunrelm\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateNewIndexExample : Lunrelm.Index ExampleDocType\ncreateNewIndexExample =\n  Lunrelm.new\n    { ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    }\n```\n\n### The default Lunrelm transform factories.\n\n```\n    IndexDefaults.defaultTransformFactories\n```\n\n\n### The default Lunrelm filter factories.\n\n```\n    IndexDefaults.defaultFilterFactories\n```\n\n",
            "type": "Lunrelm.LunrelmSimpleConfig doc -> Lunrelm.Index doc"
          },
          {
            "name": "newWith",
            "comment": " Create new Lunrelm index with additional configuration.\n\n```\nimport Lunrelm\nimport IndexDefaults\nimport StopWordFilter\n\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateMyStopWordFilter =\n    StopWordFilter.createFilterFuncWith\n      [ \"electronic\" ]\n\n\ncreateNewWithIndexExample : Lunrelm.Index ExampleDocType\ncreateNewWithIndexExample =\n  Lunrelm.newWith\n    { indexType = \"Lunrelm - For paw paw automation index v1\"\n    , ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    , transformFactories = IndexDefaults.defaultTransformFactories\n    , filterFactories = [ createMyStopWordFilter ]\n    }\n```\n\n",
            "type": "Lunrelm.Config doc -> Lunrelm.Index doc"
          },
          {
            "name": "remove",
            "comment": " Remove a document from Lunrelm index.\n\nStarting with the Lunrelm.new example above this removes a document.\n```\n    updatedIndex =\n      Lunrelm.remove\n        createNewIndexExample\n        { cid = \"123\"\n        , title = \"Examples of a Banana\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes words about a banana.\"\n        }\n```\n\nConditions that cause a result Err with message.\n* Error document has an empty unique id (ref).\n* Error document is not in index.\n",
            "type": "Lunrelm.Index doc -> doc -> Result.Result String (Lunrelm.Index doc)"
          },
          {
            "name": "search",
            "comment": " Search Lunrelm index with query.\n\n\nQueries are a string.\n\nTokens are extracted from the query string and passed through the\nsame processing used when indexing documents.\n\nEach token is expanded, so that the term \"he\" might be expanded to \"hello\"\nand \"help\" if those terms were already included in the document index.\n\nMultiple tokens are allowed and will lead to an AND based query.\n\nThe following example runs a search for documents containing both \"apple\" and \"banana\".\n\n```\n    (updatedMyIndex, results) =\n      Index.search createNewIndexExample \"Apple banana\"\n```\n\nResults are a list of matching document reference identifiers with\nthere similarity to query score, ordered by score ascending.\n\nA possibly updated index is returned from search as well `updatedMyIndex`.\nThis is because the data model is updated with searches to cache information\nto improve overall perfromance, it is expected after sufficient searches the\nindex will no longer update due to searches.\n\nAdding or removing a new document will cause some of the internal caching to be reset.\n\nConditions that cause a result Err with message.\n* Error there are no documents in index to search.\n* Error query is empty.\n* Error after tokenisation there are no terms to search for.\n\n",
            "type": "Lunrelm.Index doc -> String -> Result.Result String ( Lunrelm.Index doc, List ( String, Float ) )"
          },
          {
            "name": "storeToString",
            "comment": " Store a Lunrelm index to a String.\n\nYou can also use [`Lunrelm.Json.Encoder`](Lunrelm.Json.Encoder).\n",
            "type": "Lunrelm.Index doc -> String"
          },
          {
            "name": "storeToValue",
            "comment": " Store a Lunrelm index to a Value.\n\nYou can also use [`Lunrelm.Json.Encoder`](Lunrelm.Json.Encoder).\n",
            "type": "Lunrelm.Index doc -> Json.Encode.Value"
          },
          {
            "name": "update",
            "comment": " Update a doc in Lunrelm index.\n\nStarting with the Lunrelm.new example above this updates a document.\n```\n    updatedIndex =\n      Lunrelm.remove\n        createNewIndexExample\n        { cid = \"123\"\n        , title = \"Examples of a Bananas in every day life.\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes more words about a banana.\"\n        }\n```\n\nConditions that cause an error result are those for\n[`Lunrelm.remove`](Lunrelm#remove) and then\n[`Lunrelm.add`](Lunrelm#add).\n\n",
            "type": "Lunrelm.Index doc -> doc -> Result.Result String (Lunrelm.Index doc)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Lunrelm.Json.Encoder",
        "comment": " Encoder for Lunrelm Index.\n\n@docs encoder\n@docs codecIndexRecordEncoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "codecIndexRecordEncoder",
            "comment": " Encode CodecIndexRecord. ",
            "type": "IndexModel.CodecIndexRecord -> Json.Encode.Value"
          },
          {
            "name": "encoder",
            "comment": " Encoder for Index a.\n\nOnly encoding fields required to recreate a working index.\n\nThe following fields are not saved as they are restored via\nthe provided Config on fromString.\n* ref\n* fields\n* transformFactories\n* filterFactories\n\nThe following fields are not saved because they are an\nacceleration model, decoder needs to set it on fromString.\n* corpusTokensIndex\n\nThe following fields are not saved because they are caches\nand are cached as operationg requires\n* transforms\n* filters\n* idfCache\n\nDo not need an (a -> Encode.Value) because a is a document\ntype and that is never encoded from an Index.\n",
            "type": "IndexModel.Index doc -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "IndexDefaults",
        "comment": " Where to get defaults for Lunrelm Index options.\n\n## Lunrelm Index Storage Engine Version and Type\n@docs indexVersion\n@docs lunrelmIndexType\n\n\n## Built in Transforms and Filters\n@docs defaultTransformFactories\n@docs defaultFilterFactories\n@docs defaultTokenTrimmerFuncCreator\n@docs defaultStemmerFuncCreator\n@docs defaultStopWordFilterFuncCreator\n\n\n## Config type adapters\n@docs getDefaultIndexConfig\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "defaultFilterFactories",
            "comment": " Lunrelm index default filter factories. ",
            "type": "List (IndexModel.FilterFactory doc)"
          },
          {
            "name": "defaultStemmerFuncCreator",
            "comment": " The default token stemmer transform function creator. ",
            "type": "IndexModel.TransformFactory doc"
          },
          {
            "name": "defaultStopWordFilterFuncCreator",
            "comment": " The default stop word filter function creator. ",
            "type": "IndexModel.FilterFactory doc"
          },
          {
            "name": "defaultTokenTrimmerFuncCreator",
            "comment": " The default token trimmer transform function creator.\nNormally applied first in transform functions.\n",
            "type": "IndexModel.TransformFactory doc"
          },
          {
            "name": "defaultTransformFactories",
            "comment": " Lunrelm index default transform factories. ",
            "type": "List (IndexModel.TransformFactory doc)"
          },
          {
            "name": "getDefaultIndexConfig",
            "comment": " Convert IndexModel.SimpleConfig to IndexModel.Config\n\nFilling in default values for fields not in SimpleConfig\n\nThis is the definition of the default index configuration.\n",
            "type": "IndexModel.SimpleConfig doc -> IndexModel.Config doc"
          },
          {
            "name": "indexVersion",
            "comment": " The version of index, for loading a saved index.\n\nThis is not the same as Lunrelm package version.\n\nThis needs to change if the encoded format changes.\n",
            "type": "String"
          },
          {
            "name": "lunrelmIndexType",
            "comment": " The type of index Lunrelm defaults to using.\n\nIt defines the default token transforms and filters.\n",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "StopWordFilter",
        "comment": " StopWordFilter is an English language stop word list filter, any words\ncontained in the list are not stored in the index.\n\nThis is intended to be used in the Lunrelm token processing pipeline.\n\n### Things to know about stop word lists.\n* Input tokens to create stop word filters should be full words, if you\ndont know the transform steps for index or if you use the list with different\nsets of transforms.\n* If you know the exact transform process of your Index you can prerun the\ntransform process to generate your word list, which in theory might\nmake it a little more efficient.\n* It is more efficient to merge all your stop words into a single\nstop word filter.\n\n## create default stop word filter func\n@docs createDefaultFilterFunc\n\n## A default stop word english filter list\n@docs stopEnglishWordList\n\n## Create a custom stop word filter list\n@docs createFilterFuncWith\n@docs createFilterFunc\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "createDefaultFilterFunc",
            "comment": " Default english stop word filter suitable for Lunrelm.\n",
            "type": "IndexModel.FilterFactory doc"
          },
          {
            "name": "createFilterFunc",
            "comment": " Create stop word filter for provided list of tokens suitable for Lunrelm.\n\n** This creates a stop world filter purely from your own word list, understand\nwhat you are doing and consequences if you use this. **\n\nThe FilterFunc created returns True to allow words into index.\nSo words found in the stopWordList return False\n",
            "type": "List String -> IndexModel.FilterFactory doc"
          },
          {
            "name": "createFilterFuncWith",
            "comment": " Create stop word list filter suitable for Lunrelm, this versions\nextends the default word list with the extra words provided.\n",
            "type": "List String -> IndexModel.FilterFactory doc"
          },
          {
            "name": "stopEnglishWordList",
            "comment": " Default english stop word list to create filter.\n",
            "type": "List String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Lunrelm.Json.Decoder",
        "comment": " Decoder for Lunrelm Index.\n\nIt decodes to a CodecIndexRecord.\n\n@docs decoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " CodecIndexRecord decoder. ",
            "type": "Json.Decode.Decoder IndexModel.CodecIndexRecord"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/mailcheck",
    "version": "4.1.0",
    "docs": [
      {
        "name": "Mailcheck",
        "comment": " A library that suggests a correct domain when a user miss spells an email address.\nThis is a port of this javascript library https://github.com/mailcheck/mailcheck\n\n## Basic Usage\n\n```elm\n    Mailcheck.suggest 'test@gnail.com'\n      == Just (\"test\", \"gmail.com\", \"test@gmail.com\")\n```\n\n```elm\n    Mailcheck.suggest 'test@gsnail.com'\n      == Nothing\n```\n\n# Create\n@docs suggest\n@docs suggestWith\n\n# Utility\n@docs encodeEmail\n@docs splitEmail\n@docs mailParts\n@docs MailParts\n@docs findClosestDomain\n\n# Default domain lists used by suggest\n@docs defaultDomains\n@docs defaultTopLevelDomains\n@docs defaultSecondLevelDomains\n\n",
        "aliases": [
          {
            "name": "MailParts",
            "comment": " Record type alias for mailparts. ",
            "args": [],
            "type": "{ topLevelDomain : String , secondLevelDomain : String , domain : String , address : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultDomains",
            "comment": " default list of domains used in suggest ",
            "type": "List String"
          },
          {
            "name": "defaultSecondLevelDomains",
            "comment": " default list of second level domains used in suggest ",
            "type": "List String"
          },
          {
            "name": "defaultTopLevelDomains",
            "comment": " default list of top level domains used in suggest ",
            "type": "List String"
          },
          {
            "name": "encodeEmail",
            "comment": " Encode the email address to prevent XSS but leave in valid\ncharacters, following this official spec:\nhttp://en.wikipedia.org/wiki/Email_address#Syntax\n\nThis is exported to test it.\n\nencodeURI() will not encode: ~!@#$&*()=:/,;?+'\nElm's Http.uriEncode actually calls encodeURIComponent\n\nencodeURIComponent() escapes all characters except the\nfollowing: alphabetic, decimal digits, - _ . ! ~ * ' ( )\n\nExtra rules were added since Elm provides encodeURIComponent() functionality.\n\n```elm\n    (encodeEmail \"<hello>@domain.com\") == \"%3Chello%3E@domain.com\"\n```\n\n",
            "type": "String -> String"
          },
          {
            "name": "findClosestDomain",
            "comment": " Find closest domain in given list of domains and threshold using default distance.\n\n```elm\n    findClosestDomain \"test@gmail.co\" slds tlds\n```\n\nis equivalent to\n\n```elm\n    findClosestDomainWith sift3Distance topLevelThreshold \"test@gmail.co\" slds tlds\n```\n",
            "type": "String -> List String -> Maybe.Maybe String"
          },
          {
            "name": "mailParts",
            "comment": " Split an email address up into components.\n\n```elm\n    (mailParts \"user\") == Nothing\n    (mailParts \"user@\") == Nothing\n    (mailParts \"user@moo.com\") ==\n      Just\n      ( { topLevelDomain = \"user\"\n        , secondLevelDomain = \"moo.com\"\n        , domain = \"moo\"\n        , address = \"com\"\n        }\n      )\n    (mailParts \"user@moo.co.uk\") ==\n      Just\n      ( { topLevelDomain = \"user\"\n        , secondLevelDomain = \"moo.com.uk\"\n        , domain = \"moo\"\n        , address = \"co.uk\"\n        }\n      )\n```\n",
            "type": "String -> Maybe.Maybe Mailcheck.MailParts"
          },
          {
            "name": "splitEmail",
            "comment": " Split an email address up into components.\n\nThis function has been retained to make it a Minor version change not a Major\nand now converts the output of mailparts to this form.\n\n```elm\n    (spitEmail \"user\") == Nothing\n    (mailParts \"user\") == Nothing\n    (spitEmail \"user@\") == Nothing\n    (mailParts \"user@\") == Nothing\n    (spitEmail \"user@moo.com\") == Just(\"user\", \"moo.com\", \"moo\", \"com\")\n    (spitEmail \"user@moo.co.uk\") == Just(\"user\", \"moo.com.uk\", \"moo\", \"co.uk\")\n```\n",
            "type": "String -> Maybe.Maybe ( String, String, String, String )"
          },
          {
            "name": "suggest",
            "comment": " Suggest a domain which may assist a user with a possible error\nin a candidate email address. This version uses the default internal lists\nof domains.\n\n```elm\n    suggest 'test@gmail.co'\n```\n\nis equivalent to\n\n```elm\n    suggestWith defaultDomains defaultSecondLevelDomains defaultTopLevelDomains 'test@gmail.co'\n```\n\nexample\n\n```elm\n    (suggest \"user@gmil.com\")\n      == Just (\"user\", \"gmail.com\", \"user@gmail.com\")\n```\n\nResult is Maybe (address, domain, secondLevelDomain, topLevelDomain)\n\n",
            "type": "String -> Maybe.Maybe ( String, String, String )"
          },
          {
            "name": "suggestWith",
            "comment": " Suggest with passed in domain lists.\n\n* domains is list of known valid domains\n* top level domains is allowed to be empty\n* second level domains is allowed to be empty\n\n",
            "type": "List String -> List String -> List String -> String -> Maybe.Maybe ( String, String, String )"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/sparsevector",
    "version": "1.0.0",
    "docs": [
      {
        "name": "SparseVector",
        "comment": " SparseVector is an n-dimension sparse vector.\n\nVery simple implementation with just the functions I needed at the time for Lunrelm.\n\nModel stored in Dict with index as key.\n\nDimension of vector is not held, so there is no way to check that dot or\ncosineSimilarity are both using the same dimension vector.\n\n@docs SparseVector\n@docs empty\n@docs isEmpty\n@docs insert\n@docs insertList\n\n@docs magnitude\n@docs dot\n@docs cosineSimilarity\n\nCopyright (c) 2016 Robin Luiten\n\n",
        "aliases": [
          {
            "name": "SparseVector",
            "comment": " SparseVector type alias ",
            "args": [],
            "type": "Dict.Dict Int Float"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "cosineSimilarity",
            "comment": " Calculates the cosine similarity between vectors.\n",
            "type": "SparseVector.SparseVector -> SparseVector.SparseVector -> Float"
          },
          {
            "name": "dot",
            "comment": " Calculates the dot product between vectors.\n",
            "type": "SparseVector.SparseVector -> SparseVector.SparseVector -> Float"
          },
          {
            "name": "empty",
            "comment": " Empty SparseVector ",
            "type": "SparseVector.SparseVector"
          },
          {
            "name": "insert",
            "comment": " Insert value in vector.\n",
            "type": "Int -> Float -> SparseVector.SparseVector -> SparseVector.SparseVector"
          },
          {
            "name": "insertList",
            "comment": " Insert list of values in vector.\n",
            "type": "List ( Int, Float ) -> SparseVector.SparseVector -> SparseVector.SparseVector"
          },
          {
            "name": "isEmpty",
            "comment": " Return true if vector is empty ",
            "type": "SparseVector.SparseVector -> Bool"
          },
          {
            "name": "magnitude",
            "comment": " Calculates magnitude of vector.\n\nSqrt of Sum of Squares of each dimension value.\n",
            "type": "SparseVector.SparseVector -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/stemmer",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Stemmer",
        "comment": " Stemmer is an english language stemmer, this is an Elm\nimplementation of the PorterStemmer taken from http://tartarus.org/~martin.\n\nCopyright (c) 2016 Robin Luiten\n\nInspired by Erlang implementation on http://tartarus.org/~martin/PorterStemmer/index.html.\n\n## Usage\n@docs stem\n\n## Implementation Details\n\nStep numbers follow general implementation in porter stemmer implementations.\n\nIdentifier names were adopted from elrang implementation.\n\n* **drow** stands for reverse of word\n* **mets** stands for reverse of stem\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "stem",
            "comment": " Get the porter stem of a word.\n\nSome examples and what running them produces\n```\n  Stemmer.stem \"fullness\" -- produces \"full\"\n  Stemmer.stem \"consign\" -- produces \"consign\"\n  Stemmer.stem \"consigned\" -- produces \"consign\"\n  Stemmer.stem \"consigning\" -- produces \"consign\"\n  Stemmer.stem \"consignment\" -- produces \"consign\"\n  Stemmer.stem \"knot\" -- produces \"knot\"\n  Stemmer.stem \"knots\" -- produces \"knot\"\n```\n\n",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/stringdistance",
    "version": "1.0.1",
    "docs": [
      {
        "name": "StringDistance",
        "comment": " A library to calculate a metric indicating the string distance between two strings.\n\nThis library was extracted from the Elm implementation of mailcheck http://package.elm-lang.org/packages/rluiten/mailcheck/latest.\n\nThe `lcs` and `lcsLimit` functions are more general and support more than just\nChar as list elements.\n\n\n## Functions\n\n@docs sift3Distance\n@docs lcs\n@docs lcsLimit\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "lcs",
            "comment": " Longest Common Subsequence\n\nThis is a simple implementation and would benefit from memoization if\nperformance is a problem. It does not limit look ahead\nwhich can be very costly see lcsLimit for a limited look ahead version.\n\nWarning this gets very slow very quickly with increases in list lengths even\n17 character lists can cause things to bog down.\n\nThis implementation is based on http://rosettacode.org/wiki/Longest_common_subsequence#Haskell\n\n```elm\n    lcs [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n ",
            "type": "List a -> List a -> List a"
          },
          {
            "name": "lcsLimit",
            "comment": " Return function which returns lcs with limited look ahead.\n\nWarning maxLookAhead quickly makes the returned function costly stay\nbelow 8 if you want responsiveness.\n\n```elm\n    lcsLimit 5 [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n",
            "type": "Int -> List a -> List a -> List a"
          },
          {
            "name": "sift3Distance",
            "comment": " Calculate sift3 string distance between candidate strings.\n\n```elm\n    sift3Distance \"\" \"abc\" == 3.0\n    sift3Distance \"ab\" \"\" == 2.0\n    sift3Distance \"abc\" \"abc\" == 0\n    sift3Distance \"abc\" \"ab\"  == 0.5\n```\n\n",
            "type": "String -> String -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rluiten/trie",
    "version": "2.0.0",
    "docs": [
      {
        "name": "Trie.Json.Encoder",
        "comment": " Json Encoder for Trie\n\n@docs encoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "encoder",
            "comment": " Encoder for Trie. ",
            "type": "(f -> Json.Encode.Value) -> TrieModel.Trie f -> Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Trie",
        "comment": " A Trie data structure.\n\nA trie is an ordered tree data structure that is used to store a dynamic\nset or associative array where the keys are usually strings.\n\nIn this implementation they key is a String.\n\nIn this implementation unique reference stored in the value\ndictionary for a given key is a String.\n\n## Data Model\n@docs Trie\n\n## Create\n@docs empty\n\n## Modify\n@docs add\n@docs remove\n\n## Query\n@docs has\n@docs get\n@docs getNode\n@docs valueCount\n@docs expand\n\n## Get data values from node\n@docs getValues\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [
          {
            "name": "Trie",
            "comment": " Trie data model. ",
            "args": [
              "a"
            ],
            "type": "TrieModel.Trie a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "add",
            "comment": " Add reference and values with key to Trie.\n\n```\nupdatedTrie = Trie.add (\"refid123\", (\"ValueStored\", 42.34)) \"someword\" Trie.empty\n```\n",
            "type": "( String, a ) -> String -> Trie.Trie a -> Trie.Trie a"
          },
          {
            "name": "empty",
            "comment": " An empty Trie ",
            "type": "Trie.Trie a"
          },
          {
            "name": "expand",
            "comment": " Find all the possible suffixes of the passed key using keys\ncurrently in the store.\n\nThis returns a List of all keys from starting key down.\nThe definition of a key that exists is one that has documents defined for it.\n\nGiven this setup\n```\n    trie1 = Trie.add (\"refid121\", 1) \"ab\" Trie.empty\n    trie2 = Trie.add (\"refid122\", 2) \"ac\" trie1\n    trie3 = Trie.add (\"refid123\", 3) \"acd\" trie2\n```\n\nThis\n```\n    Trie.expand \"a\" trie3\n```\nReturns\n```\n[\"ab\",\"acd\",\"ac\"]\n```\n\n\nThis\n```\n    Trie.expand \"ac\" trie3\n```\nReturns\n```\n[\"acd\",\"ac\"]\n```\n\n",
            "type": "String -> Trie.Trie a -> List String"
          },
          {
            "name": "get",
            "comment": " Return values for a key if found.\n",
            "type": "String -> Trie.Trie a -> Maybe.Maybe (Dict.Dict String a)"
          },
          {
            "name": "getNode",
            "comment": " Return Trie node if found.\n\nThis will return Nothing.\n```\nmaybeNode = Trie.getNode \"for\" Trie.empty\n```\n\nThis will the node containing the values for the word \"someword\".\nIt will contains \"refid123\" in the dictionary point at  (\"ValueStored\", 42.34).\n```\ntrie1 = Trie.add (\"refid123\", (\"ValueStored\", 42.34)) \"someword\" Trie.empty\n\nmaybeNode = Trie.getNode \"someword\" trie1\n```\n\n",
            "type": "String -> Trie.Trie a -> Maybe.Maybe (Trie.Trie a)"
          },
          {
            "name": "getValues",
            "comment": " Return the values stored if there are any\n",
            "type": "Trie.Trie a -> Maybe.Maybe (Dict.Dict String a)"
          },
          {
            "name": "has",
            "comment": " Checks whether key is contained within a Trie.\n\nA key must have values for it be considered present in Trie.\n",
            "type": "String -> Trie.Trie a -> Bool"
          },
          {
            "name": "remove",
            "comment": " Remove values for key and reference from Trie.\n\nThis removes the reference from the correct values list.\nIf the key does not exist nothing changes.\nIf the ref is not found in the values for the key nothing changes.\n\nAn example but does not do anything.\n```\nupdatedTrie = Trie.remove \"for\" \"refid125\" Trie.empty\n```\n\n\nAdd something then remove it.\n```\ntrie1 = Trie.add (\"refid123\", (\"ValueStored\", 42.34)) \"someword\" Trie.empty\n\ntrie2 = Trie.remove \"someword\" \"refid123\" Trie.trie1\n```\n\n",
            "type": "String -> String -> Trie.Trie a -> Trie.Trie a"
          },
          {
            "name": "valueCount",
            "comment": " Return number of values stored at Trie location.\n",
            "type": "String -> Trie.Trie a -> Int"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Trie.Json.Decoder",
        "comment": " Json Decoder for Trie\n\n@docs decoder\n\nCopyright (c) 2016 Robin Luiten\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decoder",
            "comment": " A Trie Decoder ",
            "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (TrieModel.Trie a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "robertjlooby/elm-generic-dict",
    "version": "1.0.0",
    "docs": [
      {
        "name": "GenericSet",
        "comment": " A set of unique values. The values can be any type. The builder functions\ntake a comparer function that takes two values and returns an Order.\n\nInsert, remove, and query operations all take *O(log n)* time. GenericSet equality with\n`(==)` is unreliable and should not be used.\n\n# Sets\n@docs GenericSet\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "GenericSet",
            "comment": " Represents a set of unique values. So `(GenericSet Int)` is a set of integers and\n`(GenericSet String)` is a set of strings.\n",
            "args": [
              "t"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set. Keeps the comparer from the first set.\n",
            "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "empty",
            "comment": " Create an empty set using the given comparer.\n",
            "type": "(a -> a -> Basics.Order) -> GenericSet.GenericSet a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(a -> Bool) -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest (by the\ncomparer).\n",
            "type": "(a -> b -> b) -> b -> GenericSet.GenericSet a -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest (by the\ncomparer).\n",
            "type": "(a -> b -> b) -> b -> GenericSet.GenericSet a -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates, using the given\ncomparer.\n",
            "type": "(a -> a -> Basics.Order) -> List a -> GenericSet.GenericSet a"
          },
          {
            "name": "insert",
            "comment": " Insert a value into a set.\n",
            "type": "a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\nKeeps the comparer from the first set.\n",
            "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty.\n",
            "type": "GenericSet.GenericSet a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates and a new\ncomparer.\n",
            "type": "(b -> b -> Basics.Order) -> (a -> b) -> GenericSet.GenericSet a -> GenericSet.GenericSet b"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set.\n",
            "type": "a -> GenericSet.GenericSet a -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
            "type": "(a -> Bool) -> GenericSet.GenericSet a -> ( GenericSet.GenericSet a, GenericSet.GenericSet a )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
            "type": "a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value using the given comparer.\n",
            "type": "(a -> a -> Basics.Order) -> a -> GenericSet.GenericSet a"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set.\n",
            "type": "GenericSet.GenericSet a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list, sorted by the comparer.\n",
            "type": "GenericSet.GenericSet a -> List a"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values. Keep the comparer from the\nfirst set.\n",
            "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "GenericDict",
        "comment": " A dictionary mapping unique keys to values. The keys can be any type. The\nbuilder functions take a comparer function that takes two keys and returns an\nOrder.\n\nInsert, remove, and query operations all take *O(log n)* time. Dictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Dictionaries\n@docs GenericDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [],
        "types": [
          {
            "name": "GenericDict",
            "comment": " A dictionary of keys and values. So a `(GenericDict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
            "args": [
              "k",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second\ndictionary. Keep the comparer from the first dictionary.\n",
            "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary using the given comparer.\n",
            "type": "(k -> k -> Basics.Order) -> GenericDict.GenericDict k v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate.\n",
            "type": "(k -> v -> Bool) -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key (by the comparer).\n",
            "type": "(k -> v -> b -> b) -> b -> GenericDict.GenericDict k v -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key (by the comparer).\n",
            "type": "(k -> v -> b -> b) -> b -> GenericDict.GenericDict k v -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary using the given comparer.\n",
            "type": "(k -> k -> Basics.Order) -> List ( k, v ) -> GenericDict.GenericDict k v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList compare [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
            "type": "k -> GenericDict.GenericDict k v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n",
            "type": "k -> v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. Keep the comparer from\nthe first dictionary.\n",
            "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a dictionary is empty.\n\n    isEmpty (empty compare) == True\n",
            "type": "GenericDict.GenericDict k v -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
            "type": "GenericDict.GenericDict k v -> List k"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary.\n",
            "type": "(k -> a -> b) -> GenericDict.GenericDict k a -> GenericDict.GenericDict k b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary.\n",
            "type": "k -> GenericDict.GenericDict k v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
            "type": "(k -> v -> Bool) -> GenericDict.GenericDict k v -> ( GenericDict.GenericDict k v, GenericDict.GenericDict k v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n",
            "type": "k -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair, using the given comparer.\n",
            "type": "(k -> k -> Basics.Order) -> k -> v -> GenericDict.GenericDict k v"
          },
          {
            "name": "size",
            "comment": " Determine the number of key-value pairs in the dictionary.\n",
            "type": "GenericDict.GenericDict k v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys.\n",
            "type": "GenericDict.GenericDict k v -> List ( k, v )"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. Keep the comparer from the first dictionary.\n",
            "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function.\n",
            "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
            "type": "GenericDict.GenericDict k v -> List v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rogeriochaves/elm-test-bdd-style",
    "version": "3.0.0",
    "docs": [
      {
        "name": "ElmTestBDDStyle",
        "comment": " BDD style functions for ElmTest\n\n# Tests\n@docs Test, Assertion, describe, it\n\n# Matchers\n@docs expect, toBe, notToBe, toBeTruthy\n\n# Property-based testing\n@docs itAlways, expectThat, isTheSameAs, forEvery\n\n",
        "aliases": [
          {
            "name": "Assertion",
            "comment": " Assertion type, use that for building custom matchers ",
            "args": [],
            "type": "ElmTest.Assertion"
          },
          {
            "name": "Test",
            "comment": " The basic unit of testability. ",
            "args": [],
            "type": "ElmTest.Test"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "describe",
            "comment": " A group of related behaviours specs ",
            "type": "String -> List ElmTestBDDStyle.Test -> ElmTestBDDStyle.Test"
          },
          {
            "name": "expect",
            "comment": " Expectation to actually run the test, it receives\ntwo values and try to match then with a matcher ",
            "type": "a -> (a -> b) -> b"
          },
          {
            "name": "expectThat",
            "comment": " Generates a hundred tests with random input beginning with the initial seed 1 ",
            "type": "(a -> b) -> ElmTestBDDStyle.Conjunction -> (a -> b) -> ElmTestBDDStyle.Conjunction -> Check.Investigator.Investigator a -> String -> ElmTestBDDStyle.Test"
          },
          {
            "name": "forEvery",
            "comment": " Idiomatic word helper ",
            "type": "ElmTestBDDStyle.Conjunction"
          },
          {
            "name": "isTheSameAs",
            "comment": " Idiomatic word helper ",
            "type": "ElmTestBDDStyle.Conjunction"
          },
          {
            "name": "it",
            "comment": " Describes a behaviour you expect from your code ",
            "type": "String -> ElmTestBDDStyle.Assertion -> ElmTestBDDStyle.Test"
          },
          {
            "name": "itAlways",
            "comment": " Adds a description to the random generated tests ",
            "type": "String -> (String -> ElmTestBDDStyle.Test) -> ElmTestBDDStyle.Test"
          },
          {
            "name": "notToBe",
            "comment": " Expect something not to be equals something else ",
            "type": "a -> a -> ElmTestBDDStyle.Assertion"
          },
          {
            "name": "toBe",
            "comment": " Expect something to be equals something else ",
            "type": "a -> a -> ElmTestBDDStyle.Assertion"
          },
          {
            "name": "toBeTruthy",
            "comment": " Expect something to be true ",
            "type": "Bool -> ElmTestBDDStyle.Assertion"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css",
    "version": "2.2.0",
    "docs": [
      {
        "name": "Css.File",
        "comment": " Functions for writing CSS files from elm-css.\n\n@docs compile, toFileStructure, CssFileStructure\n",
        "aliases": [
          {
            "name": "CssFileStructure",
            "comment": " A description of CSS files that will be created by elm-css.\n",
            "args": [],
            "type": "List { filename : String, content : String, success : Bool }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "compile",
            "comment": " Convenience re-export of Css.compile\n",
            "type": "Css.Stylesheet -> { css : String, warnings : List String }"
          },
          {
            "name": "toFileStructure",
            "comment": " Translate a list of filenames and [`prettyPrint`](#prettyPrint) results\nto a list of tuples suitable for being sent to a port in a Stylesheets.elm file.\n",
            "type": "List ( String, { css : String, warnings : List String } ) -> Css.File.CssFileStructure"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css",
        "comment": " Functions for building stylesheets.\n\n# Misc\n@docs Stylesheet, asPairs, absolute, all, allPetiteCaps, allSmallCaps, withClass, auto, baseline, block, bold, bolder, border, border2, border3, borderBlockEnd, borderBlockEnd2, borderBlockEnd3, borderBlockEndColor, borderBlockEndStyle, borderBlockStart, borderBlockStart2, borderBlockStart3, borderBlockStartColor, borderBlockStartStyle, borderBottom, borderBottom2, borderBottom3, borderBottomColor, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderBottomStyle, borderBottomWidth, borderBox, borderColor, borderColor2, borderColor3, borderColor4, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, borderInlineEnd, borderInlineEnd2, borderInlineEnd3, borderInlineEndColor, borderInlineEndStyle, borderInlineEndWidth, borderInlineStart, borderInlineStart2, borderInlineStart3, borderInlineStartColor, borderInlineStartStyle, borderLeft, borderLeft2, borderLeft3, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderRight, borderRight2, borderRight3, borderRightColor, borderRightStyle, borderRightWidth, borderStyle, borderTop, borderTop2, borderTop3, borderTopColor, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderTopStyle, borderTopWidth, bottom, column, columnReverse, commonLigatures, content, contentBox, contextual, cursive, dashed, diagonalFractions, discretionaryLigatures, dotted, double, fantasy, fillBox, fixed, flat, displayFlex, flexEnd, flexStart, groove, hex, hidden, historicalLigatures, hsl, hsla, important, inherit, initial, inline, inlineBlock, inset, italic, large, larger, lighter, liningNums, matrix, matrix3d, middle, monospace, noCommonLigatures, noContextual, noDiscretionaryLigatures, noHistoricalLigatures, noWrap, none, normal, oblique, oldstyleNums, ordinal, outset, perspective, petiteCaps, position, preserve3d, proportionalNums, relative, rgb, rgba, ridge, rotate, rotate3d, rotateX, rotateY, rotateZ, row, rowReverse, sansSerif, scale, scale2, scale3d, scaleX, scaleY, scroll, serif, skew, skew2, skewX, skewY, slashedZero, small, smallCaps, smaller, solid, stackedFractions, static, sticky, stretch, sub, super, tabularNums, textBottom, textTop, titlingCaps, top, translate, translate2, translate3d, translateX, translateY, translateZ, transparent, unicase, unset, viewBox, visible, wavy, wrap, wrapReverse, xLarge, xSmall, xxLarge, xxSmall\n\n# Style\n@docs Snippet, Mixin, mixin, stylesheet, compile\n\n# Statements\n@docs (#), (.), selector, everything\n\n# Combinators\n@docs children, descendants, adjacentSiblings, generalSiblings\n\n# Media Queries\n@docs screen, tv, projection, print\n\n# Properties\n@docs property, flex, flex2, flex3, medium, alignSelf, alignItems, order, flexDirection, flexFlow1, flexFlow2, flexWrap, flexBasis, flexGrow, flexShrink, transformStyle, transformBox, transform, transforms, currentColor, underline, overline, lineThrough, textDecoration, textDecoration2, textDecoration3, textDecorationLine, textDecorations, textDecorations2, textDecorations3, textDecorationLine, textDecorationLines, textDecorationStyle, capitalize, uppercase, lowercase, fullWidth, hanging, eachLine, textIndent, textIndent2, textIndent3, clip, ellipsis, textOverflow, optimizeSpeed, optimizeLegibility, geometricPrecision, textRendering, textTransform, textAlign, textAlignLast, left, right, center, textJustify, justifyAll, start, end, matchParent, true, verticalAlign, display, opacity, minContent, maxContent, fitContent, fillAvailable, width, minWidth, maxWidth, height, minHeight, maxHeight, padding, padding2, padding3, padding4, paddingTop, paddingBottom, paddingRight, paddingLeft, paddingBlockStart, paddingBlockEnd, paddingInlineStart, paddingInlineEnd, margin, margin2, margin3, margin4, marginTop, marginBottom, marginRight, marginLeft, marginBlockStart, marginBlockEnd, marginInlineStart, marginInlineEnd, boxSizing, overflow, overflowX, overflowY, whiteSpace, backgroundColor, color, withMedia, each, media, mediaQuery, textShadow, textShadow2, textShadow3, textShadow4, lineHeight, fontFace, fontFamily, fontSize, fontStyle, fontWeight, fontVariant, fontVariant2, fontVariant3, fontVariantLigatures, fontVariantCaps, fontVariantNumeric, fontVariantNumeric2, fontVariantNumeric3, fontFamilies, fontVariantNumerics, fontFeatureSettings, fontFeatureSettingsList\n\n# Values\n\n## Color values\n@docs Color all, important, custom, solid, transparent, rgb, rgba, hsl, hsla, hex\n\n## Font values\n@docs featureTag, featureTag2, featureOn, featureOff\n\n## Other values\n@docs borderColor, borderColor2, borderColor3, borderColor4, borderBottomLeftRadius, borderBottomLeftRadius2, borderBottomRightRadius, borderBottomRightRadius2, borderTopLeftRadius, borderTopLeftRadius2, borderTopRightRadius, borderTopRightRadius2, borderRadius, borderRadius2, borderRadius3, borderRadius4, borderBottomWidth, borderInlineEndWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderBlockEndStyle, borderBlockStartStyle, borderInlineEndStyle, borderBottomStyle, borderInlineStartStyle, borderLeftStyle, borderRightStyle, borderTopStyle, borderStyle, borderBlockStartColor, borderBlockEndColor, borderBottomColor, borderInlineStartColor, borderInlineEndColor, borderLeftColor, borderRightColor, borderTopColor, borderBox, contentBox, border, border2, border3, borderTop, borderTop2, borderTop3, borderBottom, borderBottom2, borderBottom3, borderLeft, borderLeft2, borderLeft3, borderRight, borderRight2, borderRight3, borderBlockEnd, borderBlockEnd2, borderBlockEnd3, borderBlockStart, borderBlockStart2, borderBlockStart3, borderInlineEnd, borderInlineEnd2, borderInlineEnd3, borderInlineStart, borderInlineStart2, borderInlineStart3, borderImageOutset, borderImageOutset2, borderImageOutset3, borderImageOutset4, borderImageWidth, borderImageWidth2, borderImageWidth3, borderImageWidth4, scroll, visible, block, inlineBlock, inline, none, auto, inherit, unset, initial, noWrap, top, static, fixed, sticky, relative, absolute, position, bottom, middle, baseline, sub, super, textTop, textBottom, hidden, wavy, dotted, dashed, solid, double, groove, ridge, inset, outset, matrix, matrix3d, perspective, rotate3d, rotateX, rotateY, rotateZ, scale, scale2, scale3d, scaleX, scaleY, skew, skew2, skewX, skewY, translate, translate2, translate3d, translateX, translateY, translateZ, rotate, fillBox, viewBox, flat, preserve3d, content, wrapReverse, wrap, flexStart, flexEnd, stretch, row, rowReverse, column, columnReverse, serif, sansSerif, monospace, cursive, fantasy, xxSmall, xSmall, small, large, xLarge, xxLarge, smaller, larger, normal, italic, oblique, bold, lighter, bolder, smallCaps, allSmallCaps, petiteCaps, allPetiteCaps, unicase, titlingCaps, commonLigatures, noCommonLigatures, discretionaryLigatures, noDiscretionaryLigatures, historicalLigatures, noHistoricalLigatures, contextual, noContextual, liningNums, oldstyleNums, proportionalNums, tabularNums, diagonalFractions, stackedFractions, ordinal, slashedZero\n\n# Length\n@docs pct, px, em, pt, ex, ch, rem, vh, vw, vmin, vmax, mm, cm, inches, pc, int, float, zero, (|+|), (|-|), (|*|), (|/|)\n\n# Angle\n@docs deg, rad, grad, turn\n\n# Pseudo-Classes\n@docs active, any, checked, dir, disabled, empty, enabled, first, firstChild, firstOfType, fullscreen, focus, hover, indeterminate, invalid, lang, lastChild, lastOfType, link, nthChild, nthLastChild, nthLastOfType, nthOfType, onlyChild, onlyOfType, optional, outOfRange, readWrite, required, root, scope, target, valid\n\n# Pseudo-Elements\n@docs after, before, firstLetter, firstLine, selection\n\n# Media Queries\n@docs screen, print, tv, projection\n\n# Source\n@docs src\n\n# Quoting\n@docs qt\n\n# Types\n\n@docs FontSize, ColorValue\n\n# Intentionally Unsupported\n\nThese are features you might expect to be in elm-css (because they are in the\nCSS specification) but which have been omitted because their use is either\ndeprecated or discouraged.\n\n@docs thin, medium, thick, blink\n",
        "aliases": [
          {
            "name": "Color",
            "comment": " ",
            "args": [],
            "type": "Css.ColorValue { red : Int, green : Int, blue : Int, alpha : Float }"
          },
          {
            "name": "ColorValue",
            "comment": " https://developer.mozilla.org/en-US/docs/Web/CSS/color#Values\n",
            "args": [
              "compatible"
            ],
            "type": "{ compatible | value : String, color : Css.Compatible, warnings : List String }"
          },
          {
            "name": "FontSize",
            "comment": " A font size\n",
            "args": [
              "compatible"
            ],
            "type": "{ compatible | value : String, fontSize : Css.Compatible }"
          },
          {
            "name": "Mixin",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Mixin"
          },
          {
            "name": "Snippet",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Snippet"
          },
          {
            "name": "Stylesheet",
            "comment": " ",
            "args": [],
            "type": "Css.Preprocess.Stylesheet"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "#",
            "comment": " An [id selector](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors).\n\n    stylesheet\n        [ (#) NavBar\n            [ width 960 px\n            , backgroundColor (rgb 123 42 208)\n            ]\n        ]\n",
            "type": "id -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": ".",
            "comment": " A [class selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors).\n\n    stylesheet\n        [ (.) LoginFormButton\n            [ fontWeight normal\n            , color (rgb 128 64 32)\n            ]\n        ]\n",
            "type": "class -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "absolute",
            "comment": " An `absolute` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position absolute\n",
            "type": "Css.Position {}"
          },
          {
            "name": "active",
            "comment": " An [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aactive)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "adjacentSiblings",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "after",
            "comment": " An [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aafter)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "alignItems",
            "comment": " Sets [`align-items`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items).\n\n  **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n  use this workaround:\n\n  property \"align-items\" \"auto\"\n\n  If this is annoying, please file an issue, so adding support for \"auto\"\n  can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "alignSelf",
            "comment": " Sets [`align-self`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self).\n\n  **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n  use this workaround:\n\n  property \"align-self\" \"auto\"\n\n  If this is annoying, please file an issue, so adding support for \"auto\"\n  can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "all",
            "comment": " An [`all`](https://developer.mozilla.org/en-US/docs/Web/CSS/all) property.\n",
            "type": "Css.All compatible -> Css.Mixin"
          },
          {
            "name": "allPetiteCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "allSmallCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "any",
            "comment": " An [`:any`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aany)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "asPairs",
            "comment": " Take a list of mixins and return a list of key-value pairs that\ncan then be passed to a `style` attribute.\n\n    styles = asPairs >> Html.Attributes.style\n\n    button\n      [ styles [ position absolute, left (px 5) ] ]\n      [ text \"Whee!\" ]\n",
            "type": "List Css.Mixin -> List ( String, String )"
          },
          {
            "name": "auto",
            "comment": " ",
            "type": "{ lengthOrAuto : Css.Compatible , overflow : Css.Compatible , textRendering : Css.Compatible , flexBasis : Css.Compatible , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible , alignItemsOrAuto : Css.Compatible , value : String }"
          },
          {
            "name": "backgroundColor",
            "comment": " ",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "baseline",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign baseline\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "before",
            "comment": " A [`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Abefore)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "blink",
            "comment": " [`blink`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\nis ~~totally rad~~ deprecated, and as such has been ~~reluctantly~~ omitted\nfrom elm-css.\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "block",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "bold",
            "comment": " ",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent {}"
          },
          {
            "name": "bolder",
            "comment": " ",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent {}"
          },
          {
            "name": "border",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "border2",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "border3",
            "comment": " Sets [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n\n    border  (px 10)\n    border2 (px 10) dashed\n    border3 (px 10) dashed (rgb 11 14 17)\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd2",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBlockEnd3",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderBlockEnd  (px 5)\n    borderBlockEnd2 (px 5) dashed\n    borderBlockEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockEndColor",
            "comment": " Sets [`border-block-end-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-color)\n\n    borderBlockEndColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockEndStyle",
            "comment": " Sets [`border-block-end-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-style)\n\n    borderBlockEndStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockStart",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBlockStart2",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBlockStart3",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderBlockStart  (px 5)\n    borderBlockStart2 (px 5) dashed\n    borderBlockStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA units -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBlockStartColor",
            "comment": " Sets [`border-block-start-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-color)\n\n    borderBlockStartColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBlockStartStyle",
            "comment": " Sets [`border-block-start-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-style)\n\n    borderBlockStartStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBottom",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottom2",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderBottom3",
            "comment": " Sets [`border-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n\n    borderBottom  (px 5)\n    borderBottom2 (px 5) dashed\n    borderBottom3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderBottomColor",
            "comment": " Sets [`border-bottom-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color)\n\n    borderBottomColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderBottomLeftRadius",
            "comment": " Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n\n    borderBottomLeftRadius  (em 4)\n    borderBottomLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottomLeftRadius2",
            "comment": " Sets [`border-bottom-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n\n    borderBottomLeftRadius  (em 4)\n    borderBottomLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderBottomRightRadius",
            "comment": " Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n\n    borderBottomRightRadius  (em 4)\n    borderBottomRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBottomRightRadius2",
            "comment": " Sets [`border-bottom-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n\n    borderBottomRightRadius  (em 4)\n    borderBottomRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderBottomStyle",
            "comment": " Sets [`border-bottom-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style)\n\n    borderBottomStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderBottomWidth",
            "comment": " Sets [`border-bottom-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width)\n\n    borderBottomWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderBox",
            "comment": " The `border-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.\n",
            "type": "Css.BoxSizing {}"
          },
          {
            "name": "borderColor",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderColor2",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.Mixin"
          },
          {
            "name": "borderColor3",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderColor4",
            "comment": " Sets [`border-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n\n    borderColor  (rgb 12 11 10)\n    borderColor2 (rgb 12 11 10) (hex \"FFBBCC\")\n    borderColor3 (rgb 12 11 10) (hex \"FFBBCC\") inherit\n    borderColor4 (rgb 12 11 10) (hex \"FFBBCC\") inherit (rgb 1 2 3)\n",
            "type": "Css.ColorValue compatibleA -> Css.ColorValue compatibleB -> Css.ColorValue compatibleC -> Css.ColorValue compatibleD -> Css.Mixin"
          },
          {
            "name": "borderImageOutset",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (n 2)\n    borderImageOutset2 (n 2) (px 15)\n    borderImageOutset3 (n 2) (px 15) (n 1.5)\n    borderImageOutset4 (n 2) (px 15) (n 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "borderImageOutset2",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (n 2)\n    borderImageOutset2 (n 2) (px 15)\n    borderImageOutset3 (n 2) (px 15) (n 1.5)\n    borderImageOutset4 (n 2) (px 15) (n 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "borderImageOutset3",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (n 2)\n    borderImageOutset2 (n 2) (px 15)\n    borderImageOutset3 (n 2) (px 15) (n 1.5)\n    borderImageOutset4 (n 2) (px 15) (n 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.Mixin"
          },
          {
            "name": "borderImageOutset4",
            "comment": " Sets [`border-image-outset`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outset)\n\n    borderImageOutset  (n 2)\n    borderImageOutset2 (n 2) (px 15)\n    borderImageOutset3 (n 2) (px 15) (n 1.5)\n    borderImageOutset4 (n 2) (px 15) (n 14) (em 3)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.LengthOrNumber compatibleD -> Css.Mixin"
          },
          {
            "name": "borderImageWidth",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (n 3)\n    borderImageWidth2 (n 3) (px 15)\n    borderImageWidth3 (n 3) (px 15) auto\n    borderImageWidth4 (n 3) (px 15) auto (n 2)\n\n",
            "type": "Css.LengthOrNumber compatible -> Css.Mixin"
          },
          {
            "name": "borderImageWidth2",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (n 3)\n    borderImageWidth2 (n 3) (px 15)\n    borderImageWidth3 (n 3) (px 15) auto\n    borderImageWidth4 (n 3) (px 15) auto (n 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "borderImageWidth3",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (n 3)\n    borderImageWidth2 (n 3) (px 15)\n    borderImageWidth3 (n 3) (px 15) auto\n    borderImageWidth4 (n 3) (px 15) auto (n 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.Mixin"
          },
          {
            "name": "borderImageWidth4",
            "comment": " Sets [`border-image-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width)\n\n    borderImageWidth  (n 3)\n    borderImageWidth2 (n 3) (px 15)\n    borderImageWidth3 (n 3) (px 15) auto\n    borderImageWidth4 (n 3) (px 15) auto (n 2)\n\n",
            "type": "Css.LengthOrNumber compatibleA -> Css.LengthOrNumber compatibleB -> Css.LengthOrNumber compatibleC -> Css.LengthOrNumber compatibleD -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd2",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderInlineEnd3",
            "comment": " Sets [`border-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end)\n\n    borderInlineEnd  (px 5)\n    borderInlineEnd2 (px 5) dashed\n    borderInlineEnd3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderInlineEndColor",
            "comment": " Sets [`border-inline-end-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-color)\n\n    borderInlineEndColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineEndStyle",
            "comment": " Sets [`border-inline-end-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-style)\n\n    borderInlineEndStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineEndWidth",
            "comment": " Sets [`border-inline-end-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width)\n\n    borderInlineEndWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineStart",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderInlineStart2",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderInlineStart3",
            "comment": " Sets [`border-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start)\n\n    borderInlineStart  (px 5)\n    borderInlineStart2 (px 5) dashed\n    borderInlineStart3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderInlineStartColor",
            "comment": " Sets [`border-inline-start-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-color)\n\n    borderInlineStartColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderInlineStartStyle",
            "comment": " Sets [`border-inline-start-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-style)\n\n    borderInlineStartStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderLeft",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderLeft2",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderLeft3",
            "comment": " Sets [`border-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n\n    borderLeft  (px 5)\n    borderLeft2 (px 5) dashed\n    borderLeft3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderLeftColor",
            "comment": " Sets [`border-left-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color)\n\n    borderLeftColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderLeftStyle",
            "comment": " Sets [`border-left-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style)\n\n    borderLeftStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderLeftWidth",
            "comment": " Sets [`border-left-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width)\n\n    borderLeftWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRadius",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRadius2",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderRadius3",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Mixin"
          },
          {
            "name": "borderRadius4",
            "comment": " Sets [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n\n    borderRadius  (em 4)\n    borderRadius2 (em 4) (px 2)\n    borderRadius3 (em 4) (px 2) (pct 5)\n    borderRadius4 (em 4) (px 2) (pct 5) (px 3)\n",
            "type": "Css.Length compatibleB unitsB -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatibleD unitsD -> Css.Mixin"
          },
          {
            "name": "borderRight",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderRight2",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderRight3",
            "comment": " Sets [`border-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n\n    borderRight  (px 5)\n    borderRight2 (px 5) dashed\n    borderRight3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderRightColor",
            "comment": " Sets [`border-right-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color)\n\n    borderRightColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderRightStyle",
            "comment": " Sets [`border-right-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style)\n\n    borderRightStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderRightWidth",
            "comment": " Sets [`border-right-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width)\n\n    borderRightWidth (em 4)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderStyle",
            "comment": " Sets [`border-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)\n\n    borderStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderTop",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTop2",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "borderTop3",
            "comment": " Sets [`border-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n\n    borderTop  (px 5)\n    borderTop2 (px 5) dashed\n    borderTop3 (px 5) dashed (rgb 11 14 17)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.BorderStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "borderTopColor",
            "comment": " Sets [`border-top-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color)\n\n    borderTopColor (rgb 101 202 0)\n",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "borderTopLeftRadius",
            "comment": " Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n\n    borderTopLeftRadius  (em 4)\n    borderTopLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTopLeftRadius2",
            "comment": " Sets [`border-top-left-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n\n    borderTopLeftRadius  (em 4)\n    borderTopLeftRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderTopRightRadius",
            "comment": " Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n\n    borderTopRightRadius  (em 4)\n    borderTopRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "borderTopRightRadius2",
            "comment": " Sets [`border-top-right-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n\n    borderTopRightRadius  (em 4)\n    borderTopRightRadius2 (em 4) (px 2)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "borderTopStyle",
            "comment": " Sets [`border-top-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style)\n\n    borderTopStyle dashed\n",
            "type": "Css.BorderStyle compatible -> Css.Mixin"
          },
          {
            "name": "borderTopWidth",
            "comment": " Sets [`border-top-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width)\n\n    borderTopWidth  (em 4)\n    borderTopWidth2 (em 4) (px 2)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "bottom",
            "comment": " The [`bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/bottom) property.\n\n    position absolute\n    bottom (px 5)\n\nThis can also be used as a `bottom` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:\n\n    verticalAlign bottom\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "boxSizing",
            "comment": " Sets [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)\n\n    boxSizing borderBox\n",
            "type": "Css.BoxSizing compatible -> Css.Mixin"
          },
          {
            "name": "capitalize",
            "comment": " `capitalize` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "center",
            "comment": " `center` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\nCan also be used with flex-box's align-items property to apply the value of center\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "ch",
            "comment": " [`ch`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ch) units.\n",
            "type": "Float -> Css.ExplicitLength Css.ChUnits"
          },
          {
            "name": "checked",
            "comment": " A [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Achecked)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "children",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "clip",
            "comment": " `clip` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value\n",
            "type": "Css.TextOverflow {}"
          },
          {
            "name": "cm",
            "comment": " [`cm`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#cm) units.\n",
            "type": "Float -> Css.ExplicitLength Css.CMUnits"
          },
          {
            "name": "color",
            "comment": " ",
            "type": "Css.ColorValue compatible -> Css.Mixin"
          },
          {
            "name": "column",
            "comment": " The[`column`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "columnReverse",
            "comment": " The[`column-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "commonLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "compile",
            "comment": " Compile the given stylesheet to a CSS string, or to an error\nmessage if it could not be compiled.\n",
            "type": "Css.Stylesheet -> { css : String, warnings : List String }"
          },
          {
            "name": "content",
            "comment": " The [`content`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis#Values) value for the\n  flex-basis property.\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent (Css.FlexBasis {})"
          },
          {
            "name": "contentBox",
            "comment": " The `content-box` value for the [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing) property.\n",
            "type": "Css.BoxSizing {}"
          },
          {
            "name": "contextual",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "currentColor",
            "comment": " The [`currentColor`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword)\n    value.\n",
            "type": "Css.ColorValue Css.NonMixable"
          },
          {
            "name": "cursive",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "dashed",
            "comment": " A `dashed` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "deg",
            "comment": " [`deg`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#deg) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "descendants",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "diagonalFractions",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "dir",
            "comment": " A [`:dir`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adir)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "Css.Directionality -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "disabled",
            "comment": " A [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Adisabled)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "discretionaryLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "display",
            "comment": " For `display: flex`, use [`displayFlex`](#displayFlex).\n",
            "type": "Css.Display compatible -> Css.Mixin"
          },
          {
            "name": "displayFlex",
            "comment": " `display: flex`. This works around the fact that\n[`flex` is already taken](#flex).\n",
            "type": "Css.Mixin"
          },
          {
            "name": "dotted",
            "comment": " A `dotted` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "double",
            "comment": " A `double` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "each",
            "comment": " ",
            "type": "List (List Css.Mixin -> Css.Snippet) -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "eachLine",
            "comment": " `each-line` [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent#Values) value\n",
            "type": "Css.TextIndent {}"
          },
          {
            "name": "ellipsis",
            "comment": " `ellipsis` [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow#Values) value\n",
            "type": "Css.TextOverflow {}"
          },
          {
            "name": "em",
            "comment": " [`em`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#em) units.\n",
            "type": "Float -> Css.ExplicitLength Css.EmUnits"
          },
          {
            "name": "empty",
            "comment": " An [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aempty)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "enabled",
            "comment": " An [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aenabled)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "end",
            "comment": " `end` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "everything",
            "comment": " A [`*` selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors).\n\n    (.) Foo\n      [ children\n          [ everything\n              [ color (rgb 14 15 16)\n              , borderRadius (px 5)\n              ]\n          ]\n      ]\n\n...compiles to:\n\n    .Foo > * {\n      color: rgb(14, 15, 16);\n      border-radius: 5px;\n    }\n\n",
            "type": "List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "ex",
            "comment": " [`ex`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ex) units.\n",
            "type": "Float -> Css.ExplicitLength Css.ExUnits"
          },
          {
            "name": "fantasy",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "featureOff",
            "comment": " Alias for `off` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)\n",
            "type": "Int"
          },
          {
            "name": "featureOn",
            "comment": " Alias for `on` value of [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#Formal_syntax)\n",
            "type": "Int"
          },
          {
            "name": "featureTag",
            "comment": " Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)\nwith the default value of `1`\n\n    fontFeatureSettings (featureTag \"hist\")\n",
            "type": "String -> Css.FeatureTagValue {}"
          },
          {
            "name": "featureTag2",
            "comment": " Creates a [`feature-tag-value`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings#feature-tag-value)\nwith a particular integer value\n\n    fontFeatureSettings (featureTag2 \"smcp\" on)\n    fontFeatureSettings (featureTag2 \"swsh\" 2)\n",
            "type": "String -> Int -> Css.FeatureTagValue {}"
          },
          {
            "name": "fillAvailable",
            "comment": " The `fill-available` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "fillBox",
            "comment": " The `fill-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox {}"
          },
          {
            "name": "first",
            "comment": " A [`:first`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstChild",
            "comment": " A [`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstLetter",
            "comment": " A [`::first-letter`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-letter)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstLine",
            "comment": " A [`::first-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Afirst-line)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "firstOfType",
            "comment": " A [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afirst-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "fitContent",
            "comment": " The `fit-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "fixed",
            "comment": " A `fixed` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position fixed\n",
            "type": "Css.Position {}"
          },
          {
            "name": "flat",
            "comment": " The `flat` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle {}"
          },
          {
            "name": "flex",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (n 1) | (px 10))\nflex2 (n 1) ((n 1) | (px 10 ))\nflex3 (n 1) (n 1) ((n 1) | (px 10))\n\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent compatible -> Css.Mixin"
          },
          {
            "name": "flex2",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (n 1) | (px 10))\nflex2 (n 1) ((n 1) | (px 10 ))\nflex3 (n 1) (n 1) ((n 1) | (px 10))\n\n",
            "type": "Css.Number compatibleA -> Css.LengthOrNumber compatibleB -> Css.Mixin"
          },
          {
            "name": "flex3",
            "comment": " Sets [`flex`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) property.}\n\nflex (none | content | auto | (n 1) | (px 10))\nflex2 (n 1) ((n 1) | (px 10 ))\nflex3 (n 1) (n 1) ((n 1) | (px 10))\n\n",
            "type": "Css.Number compatibleA -> Css.Number compatibleB -> Css.LengthOrNumber compatbileC -> Css.Mixin"
          },
          {
            "name": "flexBasis",
            "comment": " Sets [`flex-basis`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis) property.}\n\nflex (none | content | auto | (n 1) | (px 10))\nflex2 (n 1) ((n 1) | (px 10 ))\nflex3 (n 1) (n 1) ((n 1) | (px 10))\n\n",
            "type": "Css.FlexBasis compatible -> Css.Mixin"
          },
          {
            "name": "flexDirection",
            "comment": " Sets [`flex-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) property.}\n",
            "type": "Css.FlexDirection compatible -> Css.Mixin"
          },
          {
            "name": "flexEnd",
            "comment": " The[`flex-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "flexFlow1",
            "comment": " Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.}\n\nflexFlow1 (wrap | wrapReverse | noWrap)\nflexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)\n\nOr vice versa, order is not important for flex-flow\n",
            "type": "Css.FlexDirectionOrWrap compatible -> Css.Mixin"
          },
          {
            "name": "flexFlow2",
            "comment": " Sets [`flex-flow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow) property.}\n\nflexFlow1 (wrap | wrapReverse | noWrap)\nflexFlow2 (wrap | wrapReverse | noWrap) (row | column | rowReverse | columnReverse)\n\nOr vice versa, order is not important for flex-flow\n",
            "type": "Css.FlexDirectionOrWrap compatibleA -> Css.FlexDirectionOrWrap compatibleB -> Css.Mixin"
          },
          {
            "name": "flexGrow",
            "comment": " Sets [`flex-grow`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "flexShrink",
            "comment": " Sets [`flex-shrink`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "flexStart",
            "comment": " The[`flex-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "flexWrap",
            "comment": " Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.}\n",
            "type": "Css.FlexWrap compatible -> Css.Mixin"
          },
          {
            "name": "float",
            "comment": " A unitless number. Useful with properties like [`flexGrow`](#flexGrow)\nwhich accept unitless numbers.\n",
            "type": "Float -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.Number { numericValue : Float , unitLabel : String , units : Css.UnitlessFloat }))"
          },
          {
            "name": "focus",
            "comment": " A [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afocus)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "fontFace",
            "comment": " ",
            "type": "String -> String"
          },
          {
            "name": "fontFamilies",
            "comment": " ",
            "type": "List String -> Css.Mixin"
          },
          {
            "name": "fontFamily",
            "comment": " ",
            "type": "Css.FontFamily a -> Css.Mixin"
          },
          {
            "name": "fontFeatureSettings",
            "comment": " Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n    fontFeatureSettings (featureTag \"hist\")\n    fontFeatureSettings (featureTag2 \"smcp\" on)\n    fontFeatureSettings (featureTag2 \"swsh\" 2)\n",
            "type": "Css.FeatureTagValue a -> Css.Mixin"
          },
          {
            "name": "fontFeatureSettingsList",
            "comment": " Sets [`font-feature-settings`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings)\n\n    fontFeatureSettingsList [featureTag \"c2sc\", featureTag \"smcp\"]\n",
            "type": "List (Css.FeatureTagValue a) -> Css.Mixin"
          },
          {
            "name": "fontSize",
            "comment": " Sets [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)\n\n    fontSize  xxSmall\n    fontSize  (px 12)\n",
            "type": "Css.FontSize a -> Css.Mixin"
          },
          {
            "name": "fontStyle",
            "comment": " Sets [`font-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\n\n    fontStyle  italic\n",
            "type": "Css.FontStyle a -> Css.Mixin"
          },
          {
            "name": "fontVariant",
            "comment": " Sets [`font-variant`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant)\n\n    fontVariant   smallCaps\n    fontVariant2  commonLigatures smallCaps\n    fontVariant3  commonLigatures smallCaps slashedZero\n    fontVariants  [ oldstyleNums tabularNums stackedFractions ordinal slashedZero ]\n",
            "type": "Css.FontVariant a -> Css.Mixin"
          },
          {
            "name": "fontVariant2",
            "comment": " ",
            "type": "Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.Mixin"
          },
          {
            "name": "fontVariant3",
            "comment": " ",
            "type": "Css.FontVariant compatibleA -> Css.FontVariant compatibleB -> Css.FontVariant compatibleC -> Css.Mixin"
          },
          {
            "name": "fontVariantCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps a -> Css.Mixin"
          },
          {
            "name": "fontVariantLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures a -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric",
            "comment": " ",
            "type": "Css.FontVariantNumeric a -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric2",
            "comment": " ",
            "type": "Css.FontVariantNumeric compatibleA -> Css.FontVariantNumeric compatibleB -> Css.Mixin"
          },
          {
            "name": "fontVariantNumeric3",
            "comment": " ",
            "type": "Css.FontVariantNumeric compatibleA -> Css.FontVariantNumeric compatibleB -> Css.FontVariantNumeric compatibleC -> Css.Mixin"
          },
          {
            "name": "fontVariantNumerics",
            "comment": " ",
            "type": "List (Css.FontVariantNumeric compatible) -> Css.Mixin"
          },
          {
            "name": "fontWeight",
            "comment": " Sets [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)\n\n    fontWeight  bold\n    fontWeight  (n 300)\n",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent a -> Css.Mixin"
          },
          {
            "name": "fullWidth",
            "comment": " `full-width` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "fullscreen",
            "comment": " A [`:fullscreen`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Afullscreen)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "generalSiblings",
            "comment": " ",
            "type": "List Css.Snippet -> Css.Mixin"
          },
          {
            "name": "geometricPrecision",
            "comment": " `geometricPrecision` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "grad",
            "comment": " [`grad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#grad) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "groove",
            "comment": " A `groove` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "hanging",
            "comment": " `hanging` [`hanging`](https://developer.mozilla.org/en-US/docs/Web/CSS/hanging#Values) value\n",
            "type": "Css.TextIndent {}"
          },
          {
            "name": "height",
            "comment": " Sets [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n\n    height (px 800)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "hex",
            "comment": " [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())\nin hexadecimal notation. You can optionally include `#` as the first character,\nfor benefits like syntax highlighting in editors, ease of copy/pasting from\ntools which express these as e.g. `#abcdef0`, etc.\n",
            "type": "String -> Css.Color"
          },
          {
            "name": "hidden",
            "comment": " `hidden` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.\n\nThis can also represent a `hidden` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.Overflow (Css.BorderStyle {})"
          },
          {
            "name": "historicalLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "hover",
            "comment": " An [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ahover)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "hsl",
            "comment": " [HSL color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl())\n`s` and `l` values are expressed as a number between 0 and 1 and are converted\nto the appropriate percentage at compile-time\n",
            "type": "number -> number -> number -> Css.Color"
          },
          {
            "name": "hsla",
            "comment": " [HSLA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsla())\n`s` and `l` values are expressed as a number between 0 and 1 and are converted\nto the appropriate percentage at compile-time\n",
            "type": "number -> number -> number -> number -> Css.Color"
          },
          {
            "name": "important",
            "comment": " Transforms the given property by adding !important to the end of its\ndeclaration.\n",
            "type": "Css.Mixin -> Css.Mixin"
          },
          {
            "name": "inches",
            "comment": " [`in`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#in) units.\n\n(This is `inches` instead of `in` because `in` is a reserved keyword in Elm.)\n",
            "type": "Float -> Css.ExplicitLength Css.InchUnits"
          },
          {
            "name": "indeterminate",
            "comment": " An [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aindeterminate)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "inherit",
            "comment": " The [`inherit`](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "initial",
            "comment": " The [`initial`](https://developer.mozilla.org/en-US/docs/Web/CSS/initial) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "inline",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inlineBlock",
            "comment": " ",
            "type": "Css.Display {}"
          },
          {
            "name": "inset",
            "comment": " An `inset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "int",
            "comment": " A unitless integer. Useful with properties like [`borderImageOutset`](#borderImageOutset)\nwhich accept either length units or unitless numbers for some properties.\n",
            "type": "Int -> Css.LengthOrNumberOrAutoOrNoneOrContent (Css.LengthOrNumber (Css.Number { numericValue : Float , unitLabel : String , units : Css.UnitlessInteger }))"
          },
          {
            "name": "invalid",
            "comment": " An [`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ainvalid)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "italic",
            "comment": " ",
            "type": "Css.FontStyle {}"
          },
          {
            "name": "justifyAll",
            "comment": " `justify-all` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "lang",
            "comment": " A [`:lang`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alang)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "large",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "larger",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "lastChild",
            "comment": " A [`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "lastOfType",
            "comment": " A [`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alast-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "left",
            "comment": " The [`left`](https://developer.mozilla.org/en-US/docs/Web/CSS/left) property.\n\n    position absolute\n    left (px 5)\n\nThis can also be used as a `left` [text alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:\n\n    textAlign left\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "lighter",
            "comment": " ",
            "type": "Css.LengthOrNumberOrAutoOrNoneOrContent {}"
          },
          {
            "name": "lineHeight",
            "comment": " Sets [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\n\n    lineHeight (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "lineThrough",
            "comment": " A [`line-through`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "liningNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "link",
            "comment": " A [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Alink)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "lowercase",
            "comment": " `lowercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "margin",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "margin2",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.Mixin"
          },
          {
            "name": "margin3",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.LengthOrAuto compatibleC -> Css.Mixin"
          },
          {
            "name": "margin4",
            "comment": " Sets [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n\n    margin  (px 10)\n    margin2 (px 10) (px 10)\n    margin3 (px 10) (px 10) (px 10)\n    margin4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.LengthOrAuto compatibleA -> Css.LengthOrAuto compatibleB -> Css.LengthOrAuto compatibleC -> Css.LengthOrAuto compatibleD -> Css.Mixin"
          },
          {
            "name": "marginBlockEnd",
            "comment": " Sets [`margin-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end)\n\n    marginBlockEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginBlockStart",
            "comment": " Sets [`margin-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start)\n\n    marginBlockStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginBottom",
            "comment": " Sets [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom)\n\n    marginBottom (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginInlineEnd",
            "comment": " Sets [`margin-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end)\n\n    marginInlineEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginInlineStart",
            "comment": " Sets [`margin-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start)\n\n    marginInlineStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginLeft",
            "comment": " Sets [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left)\n\n    marginLeft (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginRight",
            "comment": " Sets [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right)\n\n    marginRight (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "marginTop",
            "comment": " Sets [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top)\n\n    marginTop (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "matchParent",
            "comment": " `match-parent` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "matrix",
            "comment": " The [`matrix()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix()) transform-function.\n\n    transform (matrix 0.5 1 1.5 2 2.5 3)\n",
            "type": "number -> number -> number -> number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "matrix3d",
            "comment": " The [`matrix3d()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#matrix3d()) transform-function.\n\n    transform (matrix3d 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3 0.5 1 1.5 2 2.5 3)\n",
            "type": "number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "maxContent",
            "comment": " The `max-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "maxHeight",
            "comment": " Sets [`max-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\n\n    maxHeight (px 1024)\n\n",
            "type": "Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "maxWidth",
            "comment": " Sets [`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\n\n    maxWidth (px 960)\n",
            "type": "Css.LengthOrNoneOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "media",
            "comment": " ",
            "type": "List Css.Structure.MediaQuery -> List Css.Snippet -> Css.Snippet"
          },
          {
            "name": "mediaQuery",
            "comment": " ",
            "type": "String -> List Css.Snippet -> Css.Snippet"
          },
          {
            "name": "medium",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "middle",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign middle\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "minContent",
            "comment": " The `min-content` value for\n[`min-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#Values),\n[`max-width`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#Values),\n[`min-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#Values), and\n[`max-height`]https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#Values)\n",
            "type": "Css.MinMaxDimension {}"
          },
          {
            "name": "minHeight",
            "comment": " Sets [`min-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)\n\n    minHeight (px 100)\n\n",
            "type": "Css.LengthOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "minWidth",
            "comment": " Sets [`min-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)\n\n    minWidth (px 100)\n",
            "type": "Css.LengthOrMinMaxDimension compatible -> Css.Mixin"
          },
          {
            "name": "mixin",
            "comment": " A Mixin allowing you to modularly reuse common styles in other styles.\nThe return value of `mixin` can be used like any other property, since all\nproperties in elm-css are implemented as mixins.\n\n    underlineOnHover =\n        mixin \"underlineOnHover\"\n            [ textDecoration none\n\n            , hover\n                [ textDecoration underline ]\n            ]\n\n    stylesheet\n      [ (.) FancyLink\n          [ color (rgb 128 64 32)\n          , underlineOnHover\n          ]\n      ]\n\n...has the same result as:\n\n    stylesheet\n      [ (.) FancyLink\n          [ color (rgb 128 64 32)\n          , textDecoration none\n          , hover\n            [ textDecoration underline ]\n          ]\n      ]\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "mm",
            "comment": " [``](https://developer.mozilla.org/en-US/docs/Web/CSS/length#mm) units.\n",
            "type": "Float -> Css.ExplicitLength Css.MMUnits"
          },
          {
            "name": "monospace",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "noCommonLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noContextual",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noDiscretionaryLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noHistoricalLigatures",
            "comment": " ",
            "type": "Css.FontVariantLigatures {}"
          },
          {
            "name": "noWrap",
            "comment": " ",
            "type": "Css.WhiteSpace (Css.FlexDirectionOrWrap (Css.FlexWrap {}))"
          },
          {
            "name": "none",
            "comment": " ",
            "type": "{ borderStyle : Css.Compatible , display : Css.Compatible , lengthOrNumberOrAutoOrNoneOrContent : Css.Compatible , none : Css.Compatible , lengthOrNone : Css.Compatible , lengthOrNoneOrMinMaxDimension : Css.Compatible , textDecorationLine : Css.Compatible , transform : Css.Compatible , value : String }"
          },
          {
            "name": "normal",
            "comment": " ",
            "type": "Css.FontStyleOrFeatureTagValue {}"
          },
          {
            "name": "nthChild",
            "comment": " An [`:nth-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthLastChild",
            "comment": " An [`:nth-last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthLastOfType",
            "comment": " An [`:nth-last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-last-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "nthOfType",
            "comment": " An [`:nth`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Anth-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "String -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "oblique",
            "comment": " ",
            "type": "Css.FontStyle {}"
          },
          {
            "name": "oldstyleNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "onlyChild",
            "comment": " An [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-child)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "onlyOfType",
            "comment": " An [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aonly-of-type)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "opacity",
            "comment": " ",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "optimizeLegibility",
            "comment": " `optimizeLegibility` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "optimizeSpeed",
            "comment": " `optimizeSpeed` [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering#Values) value\n",
            "type": "Css.TextRendering {}"
          },
          {
            "name": "optional",
            "comment": " An [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aoptional)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "order",
            "comment": " Sets [`flex-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) property.}\n",
            "type": "Css.Number compatible -> Css.Mixin"
          },
          {
            "name": "ordinal",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "outOfRange",
            "comment": " An [`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aout-of-range)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "outset",
            "comment": " An `outset` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "overflow",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overflowX",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overflowY",
            "comment": " ",
            "type": "Css.Overflow compatible -> Css.Mixin"
          },
          {
            "name": "overline",
            "comment": " An [`overline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "padding",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "padding2",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "padding3",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Mixin"
          },
          {
            "name": "padding4",
            "comment": " Sets [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n\n    padding  (px 10)\n    padding2 (px 10) (px 10)\n    padding3 (px 10) (px 10) (px 10)\n    padding4 (px 10) (px 10) (px 10) (px 10)\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingBlockEnd",
            "comment": " Sets [`padding-block-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end)\n\n    paddingBlockEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingBlockStart",
            "comment": " Sets [`padding-block-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start)\n\n    paddingBlockStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingBottom",
            "comment": " Sets [`padding-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom)\n\n    paddingBottom (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingInlineEnd",
            "comment": " Sets [`padding-inline-end`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end)\n\n    paddingInlineEnd (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingInlineStart",
            "comment": " Sets [`padding-inline-start`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start)\n\n    paddingInlineStart (px 10)\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "paddingLeft",
            "comment": " Sets [`padding-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left)\n\n    paddingLeft (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingRight",
            "comment": " Sets [`padding-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right)\n\n    paddingRight (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "paddingTop",
            "comment": " Sets [`padding-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top)\n\n    paddingTop (px 10)\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "pc",
            "comment": " [`pc`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pc) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PcUnits"
          },
          {
            "name": "pct",
            "comment": " [`pct`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pct) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PercentageUnits"
          },
          {
            "name": "perspective",
            "comment": " The [`perspective()`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#perspective()) transform-function.\n\n     transform (perspective 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "petiteCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "position",
            "comment": " The [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property.\n",
            "type": "Css.Position compatible -> Css.Mixin"
          },
          {
            "name": "preserve3d",
            "comment": " The `preserve-3d` value for the [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle {}"
          },
          {
            "name": "print",
            "comment": " ",
            "type": "Css.Structure.MediaQuery"
          },
          {
            "name": "projection",
            "comment": " ",
            "type": "Css.Structure.MediaQuery"
          },
          {
            "name": "property",
            "comment": " Define a custom property.\n\n    stylesheet\n      [ body\n          [ property \"-webkit-font-smoothing\" \"none\" ]\n      ]\n\n...outputs\n\n    body {\n        -webkit-font-smoothing: none;\n    }\n",
            "type": "String -> String -> Css.Mixin"
          },
          {
            "name": "proportionalNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "pt",
            "comment": " [`pt`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#pt) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PtUnits"
          },
          {
            "name": "px",
            "comment": " [`px`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#px) units.\n",
            "type": "Float -> Css.ExplicitLength Css.PxUnits"
          },
          {
            "name": "qt",
            "comment": " For use with [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)\n\n    fontFamily    serif\n    fontFamilies  [(qt \"Gill Sans Extrabold\"), \"Helvetica\", .value sansSerif]\n",
            "type": "String -> String"
          },
          {
            "name": "rad",
            "comment": " [`rad`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#rad) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "readWrite",
            "comment": " A [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aread-write)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "relative",
            "comment": " A `relative` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position relative\n",
            "type": "Css.Position {}"
          },
          {
            "name": "rem",
            "comment": " [`rem`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#rem) units.\n",
            "type": "Float -> Css.ExplicitLength Css.RemUnits"
          },
          {
            "name": "required",
            "comment": " A [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Arequired)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "rgb",
            "comment": " [RGB color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb())\n    in functional notation.\n",
            "type": "Int -> Int -> Int -> Css.Color"
          },
          {
            "name": "rgba",
            "comment": " [RGBA color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgba()).\n",
            "type": "Int -> Int -> Int -> Float -> Css.Color"
          },
          {
            "name": "ridge",
            "comment": " A `ridge` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle {}"
          },
          {
            "name": "right",
            "comment": " Sets [`right`](https://developer.mozilla.org/en-US/docs/Web/CSS/right).\n\n    position absolute\n    right (px 5)\n\nThis can also be used as a `right` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) value:\n\n    textAlign right\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "root",
            "comment": " A [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Aroot)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "rotate",
            "comment": " The [`rotate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()) transform-function.\n\n     transform (rotate (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotate3d",
            "comment": " The [`rotate3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate3d()) transform-function.\n\n     transform (rotate3d 1 1 1 (deg 90))\n",
            "type": "number -> number -> number -> Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateX",
            "comment": " The [`rotateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateX()) transform-function.\n\n     transform (rotateX (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateY",
            "comment": " The [`rotateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateY()) transform-function.\n\n     transform (rotateY (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "rotateZ",
            "comment": " The [`rotateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotateZ()) transform-function.\n\n     transform (rotateZ (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "row",
            "comment": " The[`row`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "rowReverse",
            "comment": " The[`row-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction #Values) value for the\n  flex-direction property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexDirection {})"
          },
          {
            "name": "sansSerif",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "scale",
            "comment": " The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.\n\n     transform (scale 0.5)\n     transform (scale2 0.5 0.7)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scale2",
            "comment": " The [`scale`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()) transform-function.\n\n     transform (scale 0.5)\n     transform (scale2 0.5 0.7)\n",
            "type": "number -> number -> Css.Transform {}"
          },
          {
            "name": "scale3d",
            "comment": " The [`scale3d`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale3d()) transform-function.\n\n     transform (scale3d 0.5 0.5 1)\n",
            "type": "number -> number -> number -> Css.Transform {}"
          },
          {
            "name": "scaleX",
            "comment": " The [`scaleX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleX()) transform-function.\n\n     transform (scaleX 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scaleY",
            "comment": " The [`scaleY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scaleY()) transform-function.\n\n     transform (scaleY 0.5)\n",
            "type": "number -> Css.Transform {}"
          },
          {
            "name": "scope",
            "comment": " A [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Ascope)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "screen",
            "comment": " ",
            "type": "Css.Structure.MediaQuery"
          },
          {
            "name": "scroll",
            "comment": " The `scroll` [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) value.\n",
            "type": "Css.Overflow {}"
          },
          {
            "name": "selection",
            "comment": " A [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Aselection)\n[pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "selector",
            "comment": " A custom selector. Use this for things like\n[attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)\nand [universal selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors).\n\n    stylesheet \"homepage\"\n        [ selector \"* [lang^=en]\"\n            [ textDecoration underline\n            , color (rgb 7 7 7)\n            ]\n        ]\n",
            "type": "String -> List Css.Mixin -> Css.Snippet"
          },
          {
            "name": "serif",
            "comment": " ",
            "type": "Css.FontFamily {}"
          },
          {
            "name": "skew",
            "comment": " The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.\n\n     transform (skew (deg 90))\n     transform (skew2 (deg 90) (deg 45))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "skew2",
            "comment": " The [`skew`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skew()) transform-function.\n\n     transform (skew (deg 90))\n     transform (skew2 (deg 90) (deg 45))\n",
            "type": "Css.Angle compatibleA -> Css.Angle compatibleB -> Css.Transform {}"
          },
          {
            "name": "skewX",
            "comment": " The [`skewX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewX()) transform-function.\n\n     transform (skewX (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "skewY",
            "comment": " The [`skewY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#skewY()) transform-function.\n\n    transform (skewY (deg 90))\n",
            "type": "Css.Angle compatible -> Css.Transform {}"
          },
          {
            "name": "slashedZero",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "small",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "smallCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "smaller",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "solid",
            "comment": " A `solid` [border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values).\n",
            "type": "Css.BorderStyle (Css.TextDecorationStyle {})"
          },
          {
            "name": "src",
            "comment": " ",
            "type": "Css.ImportType compatible -> String"
          },
          {
            "name": "stackedFractions",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "start",
            "comment": " `start` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "static",
            "comment": " A `static` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position static\n",
            "type": "Css.Position {}"
          },
          {
            "name": "sticky",
            "comment": " A `sticky` [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) value.\n\n    position sticky\n",
            "type": "Css.Position {}"
          },
          {
            "name": "stretch",
            "comment": " The[`stretch`](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values) value for the\n  align-items property.\n",
            "type": "Css.AlignItems a b"
          },
          {
            "name": "stylesheet",
            "comment": " A stylesheet.\n\n    stylesheet\n        [ body\n            [ width (px 960)\n            , color (rgb 7 7 7)\n            ]\n        ]\n",
            "type": "List Css.Snippet -> Css.Stylesheet"
          },
          {
            "name": "sub",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign sub\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "super",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign super\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "tabularNums",
            "comment": " ",
            "type": "Css.FontVariantNumeric {}"
          },
          {
            "name": "target",
            "comment": " A [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Atarget)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "textAlign",
            "comment": " Sets [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "textAlignLast",
            "comment": " Sets [`text-align-last`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last).\n    **Note:** `auto` is not currently supported here. If you need to set this property to `auto`,\n    use this workaround:\n\n    property \"text-align-last\" \"auto\"\n\n    If this is annoying, please file an issue, so adding support for \"auto\"\n    can be prioritized!\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "textBottom",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign textBottom\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "textDecoration",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine a -> Css.Mixin"
          },
          {
            "name": "textDecoration2",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine compatibleA -> Css.TextDecorationStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "textDecoration3",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecoration  underline\n    textDecoration2 underline wavy\n    textDecoration3 underline wavy (rgb 128 64 32)\n\nYou can specify multiple line decorations with `textDecorations`.\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "Css.TextDecorationLine compatibleA -> Css.TextDecorationStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textDecorationLine",
            "comment": " Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n\n    textDecorationLine underline\n\nYou can specify multiple line decorations with `textDecorationLines`.\n\n    textDecorationLines  [ underline, overline ]\n",
            "type": "Css.TextDecorationLine compatible -> Css.Mixin"
          },
          {
            "name": "textDecorationLines",
            "comment": " Sets [`text-decoration-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)\n\n    textDecorationLines  [ underline, overline ]\n",
            "type": "List (Css.TextDecorationLine compatible) -> Css.Mixin"
          },
          {
            "name": "textDecorationStyle",
            "comment": " Sets [`text-decoration-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)\n\n    textDecorationStyle dotted\n",
            "type": "Css.TextDecorationStyle compatible -> Css.Mixin"
          },
          {
            "name": "textDecorations",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatible) -> Css.Mixin"
          },
          {
            "name": "textDecorations2",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatibleA) -> Css.TextDecorationStyle compatibleB -> Css.Mixin"
          },
          {
            "name": "textDecorations3",
            "comment": " Sets [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\n\n    textDecorations  [ underline, overline ]\n    textDecorations2 [ underline, overline ] wavy\n    textDecorations3 [ underline, overline ] wavy (rgb 128 64 32)\n",
            "type": "List (Css.TextDecorationLine compatibleA) -> Css.TextDecorationStyle compatibleB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textIndent",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatible units -> Css.Mixin"
          },
          {
            "name": "textIndent2",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.Mixin"
          },
          {
            "name": "textIndent3",
            "comment": " Sets [`text-indent`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent).\n\n    textIndent  (px 40)\n    textIndent2 (px 40) hanging\n    textIndent3 (px 40) hanging eachLine\n",
            "type": "Css.Length compatibleA unitsA -> Css.TextIndent compatibleB -> Css.TextIndent compatibleC -> Css.Mixin"
          },
          {
            "name": "textJustify",
            "comment": " `text-justify` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "textOverflow",
            "comment": " Sets [`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow).\n\n    textOverflow ellipsis\n",
            "type": "Css.TextOverflow compatible -> Css.Mixin"
          },
          {
            "name": "textRendering",
            "comment": " Sets [`text-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering).\n",
            "type": "Css.TextRendering a -> Css.Mixin"
          },
          {
            "name": "textShadow",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.None compatible -> Css.Mixin"
          },
          {
            "name": "textShadow2",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Mixin"
          },
          {
            "name": "textShadow3",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.ColorValue compatibleC -> Css.Mixin"
          },
          {
            "name": "textShadow4",
            "comment": " Sets [`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow).\n\n    textShadow  none\n    textShadow2 (px 1) (px 2)\n    textShadow3 (px 1) (px 2) (rgb 211 121 112)\n    textShadow4 (px 1) (px 2) (px 3) (rgb 211 121 112)\n\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.ColorValue compatibleD -> Css.Mixin"
          },
          {
            "name": "textTop",
            "comment": " The `middle` [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value.\n\n    verticalAlign textTop\n",
            "type": "Css.VerticalAlign a b"
          },
          {
            "name": "textTransform",
            "comment": " Sets [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform).\n",
            "type": "Css.TextTransform compatible -> Css.Mixin"
          },
          {
            "name": "thick",
            "comment": " The\n[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\nof `thin`, `medium`, and `thick` have unspecified behavior according to the\nCSS specification, and as such are intentionally unsupported.\n\nUsing them is a bad idea, but if the fate of the world depends on it, you can\nfall back on something like this:\n\n    stylesheet\n        [ button\n            [ property \"border-left\" \"thick\" ]\n        ]\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "thin",
            "comment": " The\n[border width values](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\nof `thin`, `medium`, and `thick` have unspecified behavior according to the\nCSS specification, and as such are intentionally unsupported.\n\nUsing them is a bad idea, but if the fate of the world depends on it, you can\nfall back on something like this:\n\n    stylesheet\n        [ button\n            [ property \"border-left\" \"thin\" ]\n        ]\n",
            "type": "Css.IntentionallyUnsupportedPleaseSeeDocs"
          },
          {
            "name": "titlingCaps",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "top",
            "comment": " The [`top`](https://developer.mozilla.org/en-US/docs/Web/CSS/top) property.\n\n    position absolute\n    top (px 5)\n\nThis can also be used as a `top` [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) value:\n\n    verticalAlign top\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "transform",
            "comment": " Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\nwith a single explicit transform value. If you need to set the transform\nproperty to `none`, use the `transforms` function with an empty list. See\n`transforms` for more details.\n\n    transform (scaleX 1.4)\n",
            "type": "Css.Transform compatible -> Css.Mixin"
          },
          {
            "name": "transformBox",
            "comment": " The [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox compatible -> Css.Mixin"
          },
          {
            "name": "transformStyle",
            "comment": " The [`transform-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style) property.\n",
            "type": "Css.TransformStyle compatible -> Css.Mixin"
          },
          {
            "name": "transforms",
            "comment": " Sets [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\nwith a series of transform-functions. If an empty list is provided, the CSS\noutput will be `none`, as if to state directly that the set of transforms\napplied to the current selector is empty:\n\n    transforms [] -- transform: none;\n\nIn the case that only one transform is needed, the `transform` function may be\nused instead for convenience. `transform` expects exactly one transform-function\nand cannot be passed `none`:\n\n    transform (matrix 1 2 3 4 5 6) -- transform: matrix(1, 2, 3, 4, 5, 6);\n\nIf a collection of transforms is needed, use the `transforms` function with a\npopulated list:\n\n    transforms [ perspective 1, scale2 1 1.4 ]\n",
            "type": "List (Css.Transform compatible) -> Css.Mixin"
          },
          {
            "name": "translate",
            "comment": " The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.\n\n    transform (translate (px 100))\n    transform (translate2 (px 100) (pct -45))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translate2",
            "comment": " The [`translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translate()) transform-function.\n\n    transform (translate (px 100))\n    transform (translate2 (px 100) (pct -45))\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Transform {}"
          },
          {
            "name": "translate3d",
            "comment": " The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.\n\n    transform (translate3d (px 100) (px 100) (px 100))\n",
            "type": "Css.Length compatibleA unitsA -> Css.Length compatibleB unitsB -> Css.Length compatibleC unitsC -> Css.Transform {}"
          },
          {
            "name": "translateX",
            "comment": " The [`translateX`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateX()) transform-function.\n\n    transform (translateX (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translateY",
            "comment": " The [`translateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateY()) transform-function.\n\n    transform (translateY (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "translateZ",
            "comment": " The [`translateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#translateZ()) transform-function.\n\n    transform (translateZ (px 100))\n",
            "type": "Css.Length compatible units -> Css.Transform {}"
          },
          {
            "name": "transparent",
            "comment": " A [`transparent`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#transparent_keyword) color.\n",
            "type": "Css.ColorValue Css.NonMixable"
          },
          {
            "name": "true",
            "comment": " `true` [alignment](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).\n",
            "type": "Css.TextAlign a b"
          },
          {
            "name": "turn",
            "comment": " [`turn`](https://developer.mozilla.org/en-US/docs/Web/CSS/angle#tr) units.\n",
            "type": "number -> Css.Angle {}"
          },
          {
            "name": "tv",
            "comment": " ",
            "type": "Css.Structure.MediaQuery"
          },
          {
            "name": "underline",
            "comment": " An [`underline`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line#Value)\ntext decoration line.\n",
            "type": "Css.TextDecorationLine {}"
          },
          {
            "name": "unicase",
            "comment": " ",
            "type": "Css.FontVariantCaps {}"
          },
          {
            "name": "unset",
            "comment": " The [`unset`](https://developer.mozilla.org/en-US/docs/Web/CSS/unset) value.\nAny CSS property can be set to this value.\n",
            "type": "Css.BasicProperty"
          },
          {
            "name": "uppercase",
            "comment": " `uppercase` [`text-transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform#Values) value\n",
            "type": "Css.TextTransform {}"
          },
          {
            "name": "valid",
            "comment": " A [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avalid)\n[pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes).\n",
            "type": "List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "verticalAlign",
            "comment": " Sets [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align).\n",
            "type": "(Css.ExplicitLength Css.IncompatibleUnits -> Css.Mixin) -> Css.Mixin"
          },
          {
            "name": "vh",
            "comment": " [`vh`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vh) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VhUnits"
          },
          {
            "name": "viewBox",
            "comment": " The `view-box` value for the [`transform-box`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box) property.\n",
            "type": "Css.TransformBox {}"
          },
          {
            "name": "visible",
            "comment": " The `visible` value for the [`overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#Values) property.\n",
            "type": "Css.Overflow {}"
          },
          {
            "name": "vmax",
            "comment": " [`vmax`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmax) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VMaxUnits"
          },
          {
            "name": "vmin",
            "comment": " [`vmin`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vmin) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VMinUnits"
          },
          {
            "name": "vw",
            "comment": " [`vw`](https://developer.mozilla.org/en-US/docs/Web/CSS/length#vw) units.\n",
            "type": "Float -> Css.ExplicitLength Css.VwUnits"
          },
          {
            "name": "wavy",
            "comment": " A `wavy` [text decoration style](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style#Values).\n",
            "type": "Css.TextDecorationStyle {}"
          },
          {
            "name": "whiteSpace",
            "comment": " ",
            "type": "Css.WhiteSpace compatible -> Css.Mixin"
          },
          {
            "name": "width",
            "comment": " Sets [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width)\n\n    width (px 960)\n\n",
            "type": "Css.LengthOrAuto compatible -> Css.Mixin"
          },
          {
            "name": "withClass",
            "comment": " ",
            "type": "class -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "withMedia",
            "comment": " ",
            "type": "List Css.Structure.MediaQuery -> List Css.Mixin -> Css.Mixin"
          },
          {
            "name": "wrap",
            "comment": " The[`wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the\n  flex-wrap property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexWrap {})"
          },
          {
            "name": "wrapReverse",
            "comment": " The[`wrap-reverse`](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap#Values) value for the\n  flex-wrap property.\n",
            "type": "Css.FlexDirectionOrWrap (Css.FlexWrap {})"
          },
          {
            "name": "xLarge",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xSmall",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xxLarge",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "xxSmall",
            "comment": " ",
            "type": "Css.FontSize {}"
          },
          {
            "name": "zero",
            "comment": " Convenience length value that compiles to 0 with no units.\n\n    stylesheet\n      [ ul\n          [ padding zero ]\n      ]\n\n...compiles to:\n\n    ul {\n        padding: 0;\n    }\n",
            "type": "{ value : String , length : Css.Compatible , lengthOrNumber : Css.Compatible , lengthOrNone : Css.Compatible , lengthOrAuto : Css.Compatible , lengthOrMinMaxDimension : Css.Compatible , lengthOrNoneOrMinMaxDimension : Css.Compatible , number : Css.Compatible , units : Css.UnitlessInteger , unitLabel : String , numericValue : Float }"
          },
          {
            "name": "|*|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|+|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|-|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          },
          {
            "name": "|/|",
            "comment": " ",
            "type": "Css.Length compatible units -> Css.Length compatible units -> Css.Length compatible units"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Namespace",
        "comment": " Namespacing\n@docs namespace\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "namespace",
            "comment": "\ntakes an identifier, namespaces the list of snippets given with that identifier\n",
            "type": "a -> List Css.Preprocess.Snippet -> List Css.Preprocess.Snippet"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Css.Elements",
        "comment": " Selectors for HTML elements.\n\n# Basic elements\n@docs html, body\n\n# Content sectioning\n@docs article, header, footer, h1, h2, h3, h4, nav, section\n\n# Text content\n@docs div, hr, li, main', ol, p, ul, pre\n\n# Inline text semantics\n@docs a, code, small, span, strong\n\n# Image and multimedia\n@docs img, audio, video, canvas\n\n# Table content\n@docs caption, col, colgroup, table, tbody, td, tfoot, th, thead, tr\n\n# Forms\n@docs button, fieldset, form, input, label, legend, optgroup, option, progress, select\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": " Selector for an `<a>` element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "article",
            "comment": " Selector for an article element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "audio",
            "comment": " Selector for an audio element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "body",
            "comment": " Selector for a body element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "button",
            "comment": " Selector for a button element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "canvas",
            "comment": " Selector for a canvas element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "caption",
            "comment": " Selector for a caption element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "code",
            "comment": " Selector for a code element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "col",
            "comment": " Selector for a col element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "colgroup",
            "comment": " Selector for a colgroup element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "div",
            "comment": " Selector for a div element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "fieldset",
            "comment": " Selector for a fieldset element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "footer",
            "comment": " Selector for a footer element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "form",
            "comment": " Selector for a form element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h1",
            "comment": " Selector for an h1 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h2",
            "comment": " Selector for an h2 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h3",
            "comment": " Selector for an h3 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "h4",
            "comment": " Selector for an h4 element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "header",
            "comment": " Selector for a header element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "hr",
            "comment": " Selector for an hr element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "html",
            "comment": " Selector for a html element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "img",
            "comment": " Selector for a img element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "input",
            "comment": " Selector for an input element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "label",
            "comment": " Selector for a label element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "legend",
            "comment": " Selector for a legend element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "li",
            "comment": " Selector for an li element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "main'",
            "comment": " Selector for a main element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "nav",
            "comment": " Selector for a nav element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "ol",
            "comment": " Selector for an ol element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "optgroup",
            "comment": " Selector for an optgroup element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "option",
            "comment": " Selector for an option element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "p",
            "comment": " Selector for a p element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "pre",
            "comment": " Selector for a pre element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "progress",
            "comment": " Selector for a progress element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "section",
            "comment": " Selector for a section element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "select",
            "comment": " Selector for a select element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "small",
            "comment": " Selector for a small element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "span",
            "comment": " Selector for a span element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "strong",
            "comment": " Selector for a strong element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "table",
            "comment": " Selector for a table element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tbody",
            "comment": " Selector for a tbody element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "td",
            "comment": " Selector for a td element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tfoot",
            "comment": " Selector for a tfoot element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "th",
            "comment": " Selector for a th element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "thead",
            "comment": " Selector for a thead element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "tr",
            "comment": " Selector for a thead element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "ul",
            "comment": " Selector for a ul element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          },
          {
            "name": "video",
            "comment": " Selector for a video element.\n",
            "type": "List Css.Preprocess.Mixin -> Css.Preprocess.Snippet"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css-helpers",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Html.CssHelpers",
        "comment": " Helper functions for using elm-css with elm-html.\n\n@docs withNamespace, style, stylesheetLink\n\n@docs Helpers, Namespace\n",
        "aliases": [
          {
            "name": "Helpers",
            "comment": " Helpers for working on a given class/id\n",
            "args": [
              "class",
              "id"
            ],
            "type": "{ class : List class -> Html.Attribute , classList : List ( class, Bool ) -> Html.Attribute , id : id -> Html.Attribute }"
          },
          {
            "name": "Namespace",
            "comment": " namespaced helpers for working on a given class/id\n",
            "args": [
              "name",
              "class",
              "id"
            ],
            "type": "{ class : List class -> Html.Attribute , classList : List ( class, Bool ) -> Html.Attribute , id : id -> Html.Attribute , name : name }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "style",
            "comment": " Create an inline style from CSS\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "stylesheetLink",
            "comment": " Link in a stylesheet from a url\n",
            "type": "String -> Html.Html"
          },
          {
            "name": "withNamespace",
            "comment": " Takes a namespace and returns helper functions for `id`, `class`, and\n`classList` which work just like their equivalents in `elm-html` except that\nthey accept union types and automatically incorporate the given namespace. Also\nnote that `class` accepts a `List` instead of a single element; this is so you\ncan specify multiple classes without having to call `classList` passing tuples\nthat all end in `True`.\n\n    -- Put this before your view code to specify a namespace.\n    { id, class, classList } = withNamespace \"homepage\"\n\n    view =\n        h1 [ id Hero, class [ Fancy ] ] [ text \"Hello, World!\" ]\n\n    type HomepageIds = Hero | SomethingElse | AnotherId\n    type HomepageClasses = Fancy | AnotherClass | SomeOtherClass\n\nThe above would generate this DOM element:\n\n    <h1 id=\"Hero\" class=\"homepage_Fancy\">Hello, World!</h1>\n",
            "type": "name -> Html.CssHelpers.Namespace name class id"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-css-util",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Css.Helpers",
        "comment": " Utility functions for elm-css.\n\n@docs toCssIdentifier, identifierToString\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "identifierToString",
            "comment": " Converts an arbitrary identifier to a valid CSS identifier, then prepends\nthe given namespace.\n",
            "type": "a -> b -> String"
          },
          {
            "name": "toCssIdentifier",
            "comment": " Converts an arbitrary value to a valid CSS identifier by calling\n`toString` on it, trimming it, replacing chunks of whitespace with `-`,\nand stripping out invalid characters.\n",
            "type": "a -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "rtfeldman/elm-validate",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Validate",
        "comment": " Convenience functions for validating data.\n\n# Validating a subject\n@docs Validator, ifBlank, ifNotInt, ifEmptyDict, ifEmptySet, ifInvalid, ifNothing, ifInvalidEmail\n\n\n# Combining validators\n@docs all, any, eager\n",
        "aliases": [
          {
            "name": "Validator",
            "comment": " A `Validator` is a function which takes a subject and returns a list of errors\ndescribing anything invalid about that subject.\n\nAn empty error list means the subject was valid.\n",
            "args": [
              "error",
              "subject"
            ],
            "type": "subject -> List error"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "all",
            "comment": " Run each of the given validators, in order, and return their concatenated\nerror lists.\n",
            "type": "List (Validate.Validator error subject) -> Validate.Validator error subject"
          },
          {
            "name": "any",
            "comment": " Return `True` if none of the given validators returns any errors for the given\nsubject, and `False` if any validator returns one or more errors.\n",
            "type": "List (Validate.Validator error subject) -> subject -> Bool"
          },
          {
            "name": "eager",
            "comment": " Run each of the given validators, in order, stopping after the first error\nand returning it. If no errors are encountered, return `Nothing`.\n",
            "type": "List (Validate.Validator error subject) -> subject -> Maybe.Maybe error"
          },
          {
            "name": "ifBlank",
            "comment": " Return an error if the given `String` is empty, or if it contains only\nwhitespace characters. ",
            "type": "error -> Validate.Validator error String"
          },
          {
            "name": "ifEmptyDict",
            "comment": " Return an error if the given `Dict` is empty. ",
            "type": "error -> Validate.Validator error (Dict.Dict comparable v)"
          },
          {
            "name": "ifEmptySet",
            "comment": " Return an error if the given `Set` is empty. ",
            "type": "error -> Validate.Validator error (Set.Set comparable)"
          },
          {
            "name": "ifInvalid",
            "comment": " Return an error if the given predicate returns `True` for the given\nsubject. ",
            "type": "(subject -> Bool) -> error -> Validate.Validator error subject"
          },
          {
            "name": "ifInvalidEmail",
            "comment": " Return an error if the given email string is malformed. ",
            "type": "error -> Validate.Validator error String"
          },
          {
            "name": "ifNotInt",
            "comment": " Return an error if the given `String` cannot be parsed as an `Int`. ",
            "type": "error -> Validate.Validator error String"
          },
          {
            "name": "ifNothing",
            "comment": " Return an error if given a `Maybe` that is `Nothing`. ",
            "type": "error -> Validate.Validator error (Maybe.Maybe a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "seanhess/elm-style",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Style",
        "comment": " Functions to combine and compose for reusable inline styles\n\n# Style\n@docs Style\n\n# Background\n@docs background, backgroundColor, backgroundImage, backgroundPosition, backgroundSize, backgroundRepeat, backgroundAttachment, linearGradient, radialGradient, noRepeat, repeat, repeatX, repeatY\n\n# Values\n@docs px, pc, em, color', deg, rad, url\n\n# Border\n@docs border, borderColor, borderBottomColor, borderLeftColor, borderRightColor, borderTopColor, borderStyle, borderBottomStyle, borderLeftStyle, borderRightStyle, borderTopStyle, borderWidth, borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderRadius, borderBottomRadius, borderLeftRadius, borderRightRadius, borderTopRadius, dashed, dotted, double, groove, ridge, solid\n\n# Outline\n@docs outline, outlineColor, outlineStyle, outlineWidth\n\n# Cursor\n@docs cursor\n\n# Dimensions\n@docs height, width, maxHeight, maxWidth, minHeight, minWidth, dimensions\n\n# Display\n@docs display, block, inlineBlock, table, tableCell, fixed, flex', inlineTable, runIn, hidden, visible, inlineFlex, listItem, tableCaption, tableColumn, tableColumnGroup, tableFooterGroup, tableHeaderGroup, tableRow, tableRowGroup\n\n# Positioning\n@docs position, bottom, left, right, top, clip, overflow, zIndex, absolute, relative, static, inline, block, scroll\n\n# Align\n@docs verticalAlign, baseline, center, textAlign, left', right'\n\n# Flex\n@docs flex, flexDirection, flexWrap, flexFlow, justifyContent, alignItems, alignContent, order, flexGrow, flexShrink, flexBasis, alignSelf, column, columnReverse, flexEnd, flexStart, justify, row, rowReverse, spaceAround, spaceBetween, wrap, wrapReverse\n\n# Float\n@docs float, clear, both, left', right'\n\n# Margin\n@docs margin, marginBottom, marginTop, marginLeft, marginRight\n\n# Padding\n@docs padding, paddingBottom, paddingTop, paddingLeft, paddingRight\n\n# Font\n@docs fontFamily, fontSize, fontStyle, fontVariant, fontWeight, italic, smallCaps\n\n# Text\n@docs color, direction, letterSpacing, lineHeight, textAlign, textDecoration, textIndent, unicodeBidi, whiteSpace, wordSpacing, bidiOverride, embed, justify, direction, rtl, ltr, nowrap, oblique, pre, preLine, preWrap, overline, underline, lineThrough\n\n# List Style\n@docs listStyleImage, listStylePosition, listStyleType, inside, outside, lineThrough\n\n# Shadow\n@docs boxShadow, textShadow, inset, outset\n\n# Transform\n@docs transform, translate, translate3d, perspective, rotate, rotate3d, scale, scale3d, skew, matrix\n\n# Generic\n@docs auto, none, normal\n\n# Prefixing\n@docs PrefixSet, prefixSet, prefixName, prefixValue\n\n",
        "aliases": [
          {
            "name": "PrefixSet",
            "comment": " Prefixes for the various browsers. This is handled by the property functions for you ",
            "args": [],
            "type": "{ ms : String , moz : String , o : String , webkit : String , default : String }"
          },
          {
            "name": "Style",
            "comment": " Alias for inline styles\n\n    myContainer : List Style\n    myContainer =\n      [ width (pc 100)\n      , height (pc 100)\n      , fontFamily \"sans-serif\"\n      ]\n",
            "args": [],
            "type": "( String, String )"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "absolute",
            "comment": " absolute ",
            "type": "String"
          },
          {
            "name": "alignContent",
            "comment": " align-content ",
            "type": "String -> Style.Style"
          },
          {
            "name": "alignItems",
            "comment": " align-items ",
            "type": "String -> Style.Style"
          },
          {
            "name": "alignSelf",
            "comment": " align-self ",
            "type": "String -> Style.Style"
          },
          {
            "name": "auto",
            "comment": " auto ",
            "type": "String"
          },
          {
            "name": "background",
            "comment": " background ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundAttachment",
            "comment": " background-attachment ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundColor",
            "comment": " background-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundImage",
            "comment": " background-image ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundPosition",
            "comment": " background-position ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundRepeat",
            "comment": " background-repeat ",
            "type": "String -> Style.Style"
          },
          {
            "name": "backgroundSize",
            "comment": " background-size ",
            "type": "String -> Style.Style"
          },
          {
            "name": "baseline",
            "comment": " baseline ",
            "type": "String"
          },
          {
            "name": "bidiOverride",
            "comment": " bidi-override ",
            "type": "String"
          },
          {
            "name": "block",
            "comment": " block ",
            "type": "String"
          },
          {
            "name": "border",
            "comment": " border ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomColor",
            "comment": " border-bottom-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomRadius",
            "comment": " border-bottom-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomStyle",
            "comment": " border-bottom-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderBottomWidth",
            "comment": " border-bottom-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderColor",
            "comment": " border-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftColor",
            "comment": " border-left-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftRadius",
            "comment": " border-left-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftStyle",
            "comment": " border-left-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderLeftWidth",
            "comment": " border-left-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRadius",
            "comment": " border-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightColor",
            "comment": " border-right-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightRadius",
            "comment": " border-right-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightStyle",
            "comment": " border-right-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderRightWidth",
            "comment": " border-right-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderStyle",
            "comment": " border-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopColor",
            "comment": " border-top-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopRadius",
            "comment": " border-top-radius ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopStyle",
            "comment": " border-top-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderTopWidth",
            "comment": " border-top-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "borderWidth",
            "comment": " border-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "both",
            "comment": " both ",
            "type": "String"
          },
          {
            "name": "bottom",
            "comment": " bottom ",
            "type": "String -> Style.Style"
          },
          {
            "name": "boxShadow",
            "comment": " box-shadow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "center",
            "comment": " center ",
            "type": "String"
          },
          {
            "name": "clear",
            "comment": " clear ",
            "type": "String -> Style.Style"
          },
          {
            "name": "clip",
            "comment": " clip ",
            "type": "String -> Style.Style"
          },
          {
            "name": "color",
            "comment": " color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "color'",
            "comment": " color' ",
            "type": "Color.Color -> String"
          },
          {
            "name": "column",
            "comment": " column ",
            "type": "String"
          },
          {
            "name": "columnReverse",
            "comment": " column-reverse ",
            "type": "String"
          },
          {
            "name": "cursor",
            "comment": " cursor ",
            "type": "String -> Style.Style"
          },
          {
            "name": "dashed",
            "comment": " dashed ",
            "type": "String"
          },
          {
            "name": "deg",
            "comment": " deg ",
            "type": "number -> String"
          },
          {
            "name": "dimensions",
            "comment": " deminsions ",
            "type": "(number -> String) -> List number -> String"
          },
          {
            "name": "direction",
            "comment": " direction ",
            "type": "String -> Style.Style"
          },
          {
            "name": "display",
            "comment": " display ",
            "type": "String -> Style.Style"
          },
          {
            "name": "dotted",
            "comment": " dotted ",
            "type": "String"
          },
          {
            "name": "double",
            "comment": " double ",
            "type": "String"
          },
          {
            "name": "em",
            "comment": " em ",
            "type": "number -> String"
          },
          {
            "name": "embed",
            "comment": " embed ",
            "type": "String"
          },
          {
            "name": "fixed",
            "comment": " fixed ",
            "type": "String"
          },
          {
            "name": "flex",
            "comment": " flex ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flex'",
            "comment": " flex ",
            "type": "String"
          },
          {
            "name": "flexBasis",
            "comment": " flex-basis ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexDirection",
            "comment": " flex-direction ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexEnd",
            "comment": " flex-end ",
            "type": "String"
          },
          {
            "name": "flexFlow",
            "comment": " flex-flow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexGrow",
            "comment": " flex-grow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexShrink",
            "comment": " flex-shrink ",
            "type": "String -> Style.Style"
          },
          {
            "name": "flexStart",
            "comment": " flex-start ",
            "type": "String"
          },
          {
            "name": "flexWrap",
            "comment": " flex-wrap ",
            "type": "String -> Style.Style"
          },
          {
            "name": "float",
            "comment": " float ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontFamily",
            "comment": " font-family ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontSize",
            "comment": " font-size ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontStyle",
            "comment": " font-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontVariant",
            "comment": " font-variant ",
            "type": "String -> Style.Style"
          },
          {
            "name": "fontWeight",
            "comment": " font-weight ",
            "type": "String -> Style.Style"
          },
          {
            "name": "groove",
            "comment": " groove ",
            "type": "String"
          },
          {
            "name": "height",
            "comment": " height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "hidden",
            "comment": " hidden ",
            "type": "String"
          },
          {
            "name": "inline",
            "comment": " inline ",
            "type": "String"
          },
          {
            "name": "inlineBlock",
            "comment": " inline-block ",
            "type": "String"
          },
          {
            "name": "inlineFlex",
            "comment": " inline-flex ",
            "type": "String"
          },
          {
            "name": "inlineTable",
            "comment": " inline-table ",
            "type": "String"
          },
          {
            "name": "inset",
            "comment": " inset ",
            "type": "String"
          },
          {
            "name": "inside",
            "comment": " inside ",
            "type": "String"
          },
          {
            "name": "italic",
            "comment": " italic ",
            "type": "String"
          },
          {
            "name": "justify",
            "comment": " justify ",
            "type": "String"
          },
          {
            "name": "justifyContent",
            "comment": " justify-content ",
            "type": "String -> Style.Style"
          },
          {
            "name": "left",
            "comment": " left ",
            "type": "String -> Style.Style"
          },
          {
            "name": "left'",
            "comment": " left' ",
            "type": "String"
          },
          {
            "name": "letterSpacing",
            "comment": " letter-spacing ",
            "type": "String -> Style.Style"
          },
          {
            "name": "lineHeight",
            "comment": " line-height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "lineThrough",
            "comment": " line-through ",
            "type": "String"
          },
          {
            "name": "linearGradient",
            "comment": " linear-gradient(45deg, #FFF, #000) ",
            "type": "number -> List Color.Color -> String"
          },
          {
            "name": "listItem",
            "comment": " list-item ",
            "type": "String"
          },
          {
            "name": "listStyleImage",
            "comment": " list-style-image ",
            "type": "String -> Style.Style"
          },
          {
            "name": "listStylePosition",
            "comment": " list-style-position ",
            "type": "String -> Style.Style"
          },
          {
            "name": "listStyleType",
            "comment": " list-style-type ",
            "type": "String -> Style.Style"
          },
          {
            "name": "ltr",
            "comment": " ltr ",
            "type": "String"
          },
          {
            "name": "margin",
            "comment": " margin ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginBottom",
            "comment": " margin-bottom ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginLeft",
            "comment": " margin-left ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginRight",
            "comment": " margin-right ",
            "type": "String -> Style.Style"
          },
          {
            "name": "marginTop",
            "comment": " margin-top ",
            "type": "String -> Style.Style"
          },
          {
            "name": "matrix",
            "comment": " matrix ",
            "type": "String -> Style.Style"
          },
          {
            "name": "maxHeight",
            "comment": " max-height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "maxWidth",
            "comment": " max-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "minHeight",
            "comment": " min-height ",
            "type": "String -> Style.Style"
          },
          {
            "name": "minWidth",
            "comment": " min-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "noRepeat",
            "comment": " no-repeat ",
            "type": "String"
          },
          {
            "name": "none",
            "comment": " none ",
            "type": "String"
          },
          {
            "name": "normal",
            "comment": " normal ",
            "type": "String"
          },
          {
            "name": "nowrap",
            "comment": " nowrap ",
            "type": "String"
          },
          {
            "name": "oblique",
            "comment": " oblique ",
            "type": "String"
          },
          {
            "name": "order",
            "comment": " order ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outline",
            "comment": " outline ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outlineColor",
            "comment": " outline-color ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outlineStyle",
            "comment": " outline-style ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outlineWidth",
            "comment": " outline-width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "outset",
            "comment": " outset ",
            "type": "String"
          },
          {
            "name": "outside",
            "comment": " outside ",
            "type": "String"
          },
          {
            "name": "overflow",
            "comment": " overflow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "overline",
            "comment": " overline ",
            "type": "String"
          },
          {
            "name": "padding",
            "comment": " padding ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingBottom",
            "comment": " padding-bottom ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingLeft",
            "comment": " padding-left ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingRight",
            "comment": " padding-right ",
            "type": "String -> Style.Style"
          },
          {
            "name": "paddingTop",
            "comment": " padding-top ",
            "type": "String -> Style.Style"
          },
          {
            "name": "pc",
            "comment": " pc ",
            "type": "number -> String"
          },
          {
            "name": "perspective",
            "comment": " perspective ",
            "type": "String -> Style.Style"
          },
          {
            "name": "position",
            "comment": " position ",
            "type": "String -> Style.Style"
          },
          {
            "name": "pre",
            "comment": " pre ",
            "type": "String"
          },
          {
            "name": "preLine",
            "comment": " pre-line ",
            "type": "String"
          },
          {
            "name": "preWrap",
            "comment": " pre-wrap ",
            "type": "String"
          },
          {
            "name": "prefixName",
            "comment": " generate the correct style with prefix ",
            "type": "Style.PrefixSet -> String -> Style.Style"
          },
          {
            "name": "prefixSet",
            "comment": " construct a prefix set for the given browser ",
            "type": "String -> Style.PrefixSet"
          },
          {
            "name": "prefixValue",
            "comment": " get the prefix for the browser  ",
            "type": "Style.PrefixSet -> String"
          },
          {
            "name": "px",
            "comment": " px ",
            "type": "number -> String"
          },
          {
            "name": "rad",
            "comment": " rad ",
            "type": "number -> String"
          },
          {
            "name": "radialGradient",
            "comment": " radial-gradient(#FFF, #000) ",
            "type": "List Color.Color -> String"
          },
          {
            "name": "relative",
            "comment": " relative ",
            "type": "String"
          },
          {
            "name": "repeat",
            "comment": " repeat ",
            "type": "String"
          },
          {
            "name": "repeatX",
            "comment": " repeat-x ",
            "type": "String"
          },
          {
            "name": "repeatY",
            "comment": " repeat-y ",
            "type": "String"
          },
          {
            "name": "ridge",
            "comment": " ridge ",
            "type": "String"
          },
          {
            "name": "right",
            "comment": " right ",
            "type": "String -> Style.Style"
          },
          {
            "name": "right'",
            "comment": " right' ",
            "type": "String"
          },
          {
            "name": "rotate",
            "comment": " rotate ",
            "type": "String -> Style.Style"
          },
          {
            "name": "rotate3d",
            "comment": " rotate3d ",
            "type": "String -> Style.Style"
          },
          {
            "name": "row",
            "comment": " row ",
            "type": "String"
          },
          {
            "name": "rowReverse",
            "comment": " row-reverse ",
            "type": "String"
          },
          {
            "name": "rtl",
            "comment": " rtl ",
            "type": "String"
          },
          {
            "name": "runIn",
            "comment": " run-in ",
            "type": "String"
          },
          {
            "name": "scale",
            "comment": " scale ",
            "type": "String -> Style.Style"
          },
          {
            "name": "scale3d",
            "comment": " scale3d ",
            "type": "String -> Style.Style"
          },
          {
            "name": "scroll",
            "comment": " scroll ",
            "type": "String"
          },
          {
            "name": "skew",
            "comment": " skew ",
            "type": "String -> Style.Style"
          },
          {
            "name": "smallCaps",
            "comment": " small-caps ",
            "type": "String"
          },
          {
            "name": "solid",
            "comment": " solid ",
            "type": "String"
          },
          {
            "name": "spaceAround",
            "comment": " space-around ",
            "type": "String"
          },
          {
            "name": "spaceBetween",
            "comment": " space-between ",
            "type": "String"
          },
          {
            "name": "static",
            "comment": " static ",
            "type": "String"
          },
          {
            "name": "table",
            "comment": " table ",
            "type": "String"
          },
          {
            "name": "tableCaption",
            "comment": " table-caption ",
            "type": "String"
          },
          {
            "name": "tableCell",
            "comment": " table-cell ",
            "type": "String"
          },
          {
            "name": "tableColumn",
            "comment": " table-column ",
            "type": "String"
          },
          {
            "name": "tableColumnGroup",
            "comment": " table-column-group ",
            "type": "String"
          },
          {
            "name": "tableFooterGroup",
            "comment": " table-footer-group ",
            "type": "String"
          },
          {
            "name": "tableHeaderGroup",
            "comment": " table-header-group ",
            "type": "String"
          },
          {
            "name": "tableRow",
            "comment": " table-row ",
            "type": "String"
          },
          {
            "name": "tableRowGroup",
            "comment": " table-row-group ",
            "type": "String"
          },
          {
            "name": "textAlign",
            "comment": " text-align ",
            "type": "String -> Style.Style"
          },
          {
            "name": "textDecoration",
            "comment": " text-decoration ",
            "type": "String -> Style.Style"
          },
          {
            "name": "textIndent",
            "comment": " text-indent ",
            "type": "String -> Style.Style"
          },
          {
            "name": "textShadow",
            "comment": " text-shadow ",
            "type": "String -> Style.Style"
          },
          {
            "name": "top",
            "comment": " top ",
            "type": "String -> Style.Style"
          },
          {
            "name": "transform",
            "comment": " transform ",
            "type": "String -> Style.Style"
          },
          {
            "name": "translate",
            "comment": " translate ",
            "type": "String -> Style.Style"
          },
          {
            "name": "translate3d",
            "comment": " translate3d ",
            "type": "String -> Style.Style"
          },
          {
            "name": "underline",
            "comment": " underline ",
            "type": "String"
          },
          {
            "name": "unicodeBidi",
            "comment": " unicode-bidi ",
            "type": "String -> Style.Style"
          },
          {
            "name": "url",
            "comment": " url(path) ",
            "type": "String -> String"
          },
          {
            "name": "verticalAlign",
            "comment": " vertical-align ",
            "type": "String -> Style.Style"
          },
          {
            "name": "visible",
            "comment": " visible ",
            "type": "String"
          },
          {
            "name": "whiteSpace",
            "comment": " white-space ",
            "type": "String -> Style.Style"
          },
          {
            "name": "width",
            "comment": " width ",
            "type": "String -> Style.Style"
          },
          {
            "name": "wordSpacing",
            "comment": " word-spacing ",
            "type": "String -> Style.Style"
          },
          {
            "name": "wrap",
            "comment": " wrap ",
            "type": "String"
          },
          {
            "name": "wrapReverse",
            "comment": " wrap-reverse ",
            "type": "String"
          },
          {
            "name": "zIndex",
            "comment": " z-index ",
            "type": "String -> Style.Style"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "sgraf812/elm-graph",
    "version": "1.1.1",
    "docs": [
      {
        "name": "Graph",
        "comment": " This module contains the primitives to build, update and traverse graphs.\nIf you find that this module is hard to use or the documentation\nis insufficient, consider opening an issue for that (and possibly even a\npull request :)).\n\nInternally, we use the `elm-intdict` package for efficient dynamic graph\nrepresentation.\n\n# Data\n@docs NodeId, Node, Edge, Adjacency, NodeContext, Graph\n\n# Building\n@docs empty, update, insert, remove, inducedSubgraph\n\n# Query\n@docs isEmpty, size, member, get, nodeIdRange\n\n# List representations\n@docs nodeIds, nodes, edges, fromNodesAndEdges, fromNodeLabelsAndEdgePairs\n\n# Foci\n@docs id, label, from, to, node, incoming, outgoing, nodeById, anyNode\n\n# Transforms\n@docs fold, mapContexts, mapNodes, mapEdges, reverseEdges, symmetricClosure\n\n# Characterization\n\n# Traversals\n## Neighbor selectors and node visitors\n@docs NeighborSelector, alongOutgoingEdges, alongIncomingEdges, SimpleNodeVisitor\n## Depth-first\n@docs DfsNodeVisitor, onDiscovery, onFinish, dfs, dfsTree, dfsForest, guidedDfs\n## Bread-first\n@docs BfsNodeVisitor, ignorePath, bfs, guidedBfs\n\n# Topological Sort\n@docs topologicalSort, heightLevels\n\n# Strongly Connected Components\n@docs stronglyConnectedComponents\n\n# String representation\n@docs toString'\n\n",
        "aliases": [
          {
            "name": "Adjacency",
            "comment": " Adjacency is represented as an ordered dictionary\nrather than as an ordered list. This enables more dynamic\ngraphs with efficient edge removal and insertion on the run.\n",
            "args": [
              "e"
            ],
            "type": "IntDict.IntDict e"
          },
          {
            "name": "BfsNodeVisitor",
            "comment": " A specialized node visitor for breadth-first traversal. Compared to a\n`SimpleNodeVisitor`, the path of contexts from the root to the current\nnode is passed instead of just the current node's context. Additionally, the\ndistance from the root is passed as an `Int` (the root has distance 0 and it\nholds always that `length path == distance - 1`).\n\nIf you don't need the additional information, you can turn a `SimpleNodeVisitor`\ninto a `BfsNodeVisitor` by calling `ignorePath`.\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "List (Graph.NodeContext n e) -> Int -> acc -> acc"
          },
          {
            "name": "DfsNodeVisitor",
            "comment": " A node visitor specialized for depth-first traversal. Along with the node\ncontext of the currently visited node, the current accumulated value is passed.\nThe visitor then has the chance to both modify the value at discovery of the\nnode through the first return value and also provide a finishing\ntransformation which is called with the value after all children were processed\nand the node is about to be finished.\n\nIn the cases where you don't need access to the value both at dicovery and at\nfinish, look into `onDiscovery` and `onFinish`.\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "Graph.NodeContext n e -> acc -> ( acc, acc -> acc )"
          },
          {
            "name": "Edge",
            "comment": " Represents a directd edge in the graph. In addition\nto start and end node identifiers, a label value can\nbe attached to an edge.\n",
            "args": [
              "e"
            ],
            "type": "{ from : Graph.NodeId, to : Graph.NodeId, label : e }"
          },
          {
            "name": "NeighborSelector",
            "comment": " Selects the next neighbors for the currently visited node in the traversal.\n",
            "args": [
              "n",
              "e"
            ],
            "type": "Graph.NodeContext n e -> List Graph.NodeId"
          },
          {
            "name": "Node",
            "comment": " The type representing a node: An identifier with\na label.\n",
            "args": [
              "n"
            ],
            "type": "{ id : Graph.NodeId, label : n }"
          },
          {
            "name": "NodeContext",
            "comment": " Represents a node with its incoming and outgoing edges\n(predecessors and successors).\n",
            "args": [
              "n",
              "e"
            ],
            "type": "{ node : Graph.Node n , incoming : Graph.Adjacency e , outgoing : Graph.Adjacency e }"
          },
          {
            "name": "NodeId",
            "comment": " The type used for identifying nodes, an integer.\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "SimpleNodeVisitor",
            "comment": " A generic node visitor just like that in the ordinary `fold` function.\nThere are combinators that make these usable for both depth-first traversal\n(`onDiscovery`, `onFinish`) and breadth-first traversal (`ignorePath`).\n",
            "args": [
              "n",
              "e",
              "acc"
            ],
            "type": "Graph.NodeContext n e -> acc -> acc"
          }
        ],
        "types": [
          {
            "name": "Graph",
            "comment": " The central graph type. It is parameterized both over the node label type `n`\nand the edge label type `e`.\n\nOne can build such a graph with the primitives under *Build*. Most of the time\n`fromNodesAndEdges` works fairly well.\n\nFor simplicity, this library just uses a patricia trie based graph representation, which means\nit is just an efficient version of `Dict NodeId (NodeContext n e)`. This allows efficient insertion and\nremoval of nodes of the graph after building.\n",
            "args": [
              "n",
              "e"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "alongIncomingEdges",
            "comment": " A less common way for selecting neighbors is to follow incoming edges:\n\n    alongIncomingEdges ctx =\n      IntDict.keys (ctx.incoming)\n",
            "type": "Graph.NeighborSelector n e"
          },
          {
            "name": "alongOutgoingEdges",
            "comment": " A good default for selecting neighbors is to just go along outgoing edges:\n\n    alongOutgoingEdges ctx =\n      IntDict.keys (ctx.outgoing)\n\n`dfs`/`bfs` use this as their selecting strategy.\n",
            "type": "Graph.NeighborSelector n e"
          },
          {
            "name": "anyNode",
            "comment": " Focuses on an arbitrary `NodeContext` of a `Graph`.\nThis exists for the same purposes as `nodeById`, but this focuses on an\narbitrary node rather than on a node with a specific id.\n",
            "type": "Focus.Focus (Graph.Graph n e) (Maybe.Maybe (Graph.NodeContext n e))"
          },
          {
            "name": "bfs",
            "comment": " An off-the-shelf breadth-first traversal. It will visit all components of the\ngraph in no guaranteed order, discovering nodes `alongOutgoingEdges`.\nSee the docs of `BfsNodeVisitor` on how to supply such a beast. There are also\nexamples on how to use `bfs`.\n",
            "type": "Graph.BfsNodeVisitor n e acc -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "dfs",
            "comment": " An off-the-shelf depth-first traversal. It will visit all components of the\ngraph in no guaranteed order, discovering nodes `alongOutgoingEdges`.\nSee the docs of `DfsNodeVisitor` on how to supply such a beast. There are also\nexamples on how to use `dfs`.\n",
            "type": "Graph.DfsNodeVisitor n e acc -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "dfsForest",
            "comment": " `dfsForest seeds graph` computes a depth-first spanning `Forest` of the\ncomponents in `graph` spanned by `seeds` `alongOutgoingEdges`.\n\nA traversal over this forest would be equivalent to a depth-first traversal\nover the original graph.\n",
            "type": "List Graph.NodeId -> Graph.Graph n e -> Graph.Tree.Forest (Graph.NodeContext n e)"
          },
          {
            "name": "dfsTree",
            "comment": " `dfsTree seed graph` computes a depth-first [spanning tree](https://en.wikipedia.org/wiki/Spanning_tree) of the component\nin `graph` starting from `seed` `alongOutgoingEdges`. This function is exemplary for needing to\nutilize the whole power of `DfsNodeVisitor`.\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Graph.Tree.Tree (Graph.NodeContext n e)"
          },
          {
            "name": "edges",
            "comment": " `edges graph` returns a list of all `Edge`s (e.g. a record of `from` and `to` ids\nand a `label`) in `graph`.\n\n    edges empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    edges graph == [Edge 1 2 \"->\"]\n",
            "type": "Graph.Graph n e -> List (Graph.Edge e)"
          },
          {
            "name": "empty",
            "comment": " An empty graph.\n\n    size empty == 0\n",
            "type": "Graph.Graph n e"
          },
          {
            "name": "fold",
            "comment": " A fold over all node contexts. The accumulated value is computed lazily,\nso that the fold can exit early when the suspended accumulator is not forced.\n\n    hasLoop ctx = IntDict.member ctx.node.id ctx.incoming\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    -- The graph should not have any loop.\n    fold (\\ctx acc -> acc || hasLoop ctx) False graph == False\n",
            "type": "(Graph.NodeContext n e -> acc -> acc) -> acc -> Graph.Graph n e -> acc"
          },
          {
            "name": "from",
            "comment": " Focus for the `from` field of `Edge`.\n",
            "type": "Focus.Focus { record | from : field } field"
          },
          {
            "name": "fromNodeLabelsAndEdgePairs",
            "comment": " A more convenient version of `fromNodesAndEdges`, when edges are unlabeled\nand there are no special requirements on node ids.\n\n`fromNodeLabelsAndEdgePairs labels edges` implicitly assigns node ids according\nto the label's index in `labels` and the list of edge pairs is converted to\nunlabeled `Edge`s.\n\n    graph = fromNodeLabelsAndEdgePairs ['a', 'b'] [(0, 1)]\n",
            "type": "List n -> List ( Graph.NodeId, Graph.NodeId ) -> Graph.Graph n ()"
          },
          {
            "name": "fromNodesAndEdges",
            "comment": " `fromNodesAndEdges nodes edges` constructs a graph from the supplied `nodes`\nand `edges`. This is the most comfortable way to construct a graph as a whole.\nOftentimes it is even more convenient to use `fromNodeLabelsAndEdgePairs` when\nedges are unlabeled anyway and auto incremented node ids are OK.\n\nThe following constructs a graph with 2 nodes with a string label, connected\nby an edge labeled \"->\".\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n",
            "type": "List (Graph.Node n) -> List (Graph.Edge e) -> Graph.Graph n e"
          },
          {
            "name": "get",
            "comment": " Analogous to `Dict.get`, `get nodeId graph` returns the `Just` the node\ncontext with id `nodeId` in `graph` if there is one and `Nothing` otherwise.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    get 42 graph == Nothing\n    get 1 graph == Just <node context of node 1>\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Maybe.Maybe (Graph.NodeContext n e)"
          },
          {
            "name": "guidedBfs",
            "comment": " The `bfs` function is not powerful enough? Go for this beast.\n\n`guidedBfs selectNeighbors visitNode seeds acc graph` will perform a breadth-first\ntraversal on `graph` starting with a queue of `seeds`. The children of each node\nwill be selected with `selectNeighbors` (see `NeighborSelector`), the visiting\nof nodes is handled by `visitNode` (c.f. `BfsNodeVisitor`), folding `acc` over\nthe graph.\n\nWhen there are not any more nodes to be visited, the function will return the\naccumulated value together with the unvisited rest of `graph`.\n\n    bfsLevelOrder graph =\n      -- NodeId 1 is just a wild guess here\n      guidedBfs alongOutgoingEdges (ignorePath (::)) [1] [] graph\n",
            "type": "Graph.NeighborSelector n e -> Graph.BfsNodeVisitor n e acc -> List Graph.NodeId -> acc -> Graph.Graph n e -> ( acc, Graph.Graph n e )"
          },
          {
            "name": "guidedDfs",
            "comment": " The `dfs*` functions are not powerful enough? Go for this beast.\n\n`guidedDfs selectNeighbors visitNode seeds acc graph` will perform a depth-first\ntraversal on `graph` starting with a stack of `seeds`. The children of each node\nwill be selected with `selectNeighbors` (see `NeighborSelector`), the visiting\nof nodes is handled by `visitNode` (c.f. `DfsNodeVisitor`), folding `acc` over\nthe graph.\n\nWhen there are not any more nodes to be visited, the function will return the\naccumulated value together with the unvisited rest of `graph`.\n\n    dfsPreOrder graph =\n      -- NodeId 1 is just a wild guess here\n      guidedDfs alongOutgoingEdges (onDiscovery (::)) [1] [] graph\n",
            "type": "Graph.NeighborSelector n e -> Graph.DfsNodeVisitor n e acc -> List Graph.NodeId -> acc -> Graph.Graph n e -> ( acc, Graph.Graph n e )"
          },
          {
            "name": "heightLevels",
            "comment": " Computes the height function of a given graph. This is a more general\n[topological sort](https://en.wikipedia.org/wiki/Topological_sorting),\nwhere independent nodes are in the same height level (e.g. the same list\nindex). A valid topological sort is trivially obtained by flattening the\nresult of this function.\n\nThe height function is useful for solving the maximal clique problem for\ncertain [perfect graphs](https://en.wikipedia.org/wiki/Perfect_graph)\n([comparability graphs](https://en.wikipedia.org/wiki/Comparability_graph)).\nThere is the excellent reference\n[Algorithmic Graph Theory and Perfect Graphs](http://dl.acm.org/citation.cfm?id=984029).\n",
            "type": "Graph.Graph n e -> List (List (Graph.NodeContext n e))"
          },
          {
            "name": "id",
            "comment": " Focus for the `id` field of `Node`.\n",
            "type": "Focus.Focus { record | id : field } field"
          },
          {
            "name": "ignorePath",
            "comment": " Turns a `SimpleNodeVisitor` into a `BfsNodeVisitor` by ignoring the path\nand distance parameters.\nThis is useful for when the visitor should be agnostic of the\ntraversal (breadth-first or depth-first or even just `fold`).\n\n    bfsLevelOrder : List (NodeContext n e)\n    bfsLevelOrder graph =\n      graph\n        |> bfs (ignorePath (::)) []\n        |> List.reverse\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.BfsNodeVisitor n e acc"
          },
          {
            "name": "incoming",
            "comment": " Focus for the `incoming` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | incoming : field } field"
          },
          {
            "name": "inducedSubgraph",
            "comment": " The [induced subgraph](http://mathworld.wolfram.com/Edge-InducedSubgraph.html)\nof a number of node ids.\n",
            "type": "List Graph.NodeId -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "insert",
            "comment": " Analogous to `Dict.insert`, `insert nodeContext graph` inserts a fresh node\nwith its context (label, id and edges) into `graph`. If there was already a node\nwith the same id, it will be replaced by the new node context.\n\n    graph1 = fromNodesAndEdges [Node 1 \"1\"] []\n    newNode =\n      { node = Node 2 \"2\"\n      , incoming = IntDict.singleton 1 () -- so there will be an edge from 1 to 2\n      , outgoing = IntDict.empty\n      }\n    graph2 = insert newNode graph1\n    size graph2 == 2\n\nIt's possible to build up whole graphs this way, but a lot less tedious way would\nbe simply to use `fromNodesAndEdges`.\n",
            "type": "Graph.NodeContext n e -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "isEmpty",
            "comment": " `isEmpty graph` is true if and only if there are no nodes in the graph.\nSome properties to reason about in code, which hold for any `graph`:\n\n    isEmpty graph =\n      graph == empty\n    isEmpty graph =\n      size graph == 0\n",
            "type": "Graph.Graph n e -> Bool"
          },
          {
            "name": "label",
            "comment": " Focus for the `label` field of `Node` and `Edge`.\n",
            "type": "Focus.Focus { record | label : field } field"
          },
          {
            "name": "mapContexts",
            "comment": " Maps each node context to another one. This may change edge and node labels\n(including their types), possibly the node ids and also add or remove edges\nentirely through modifying the adjacency lists.\n\nThe following is a specification for reverseEdges:\n\n    flipEdges ctx = { ctx | incoming = ctx.outgoing, outgoing = ctx.incoming }\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    reverseEdges graph == mapContexts flipEdges graph\n",
            "type": "(Graph.NodeContext n1 e1 -> Graph.NodeContext n2 e2) -> Graph.Graph n1 e1 -> Graph.Graph n2 e2"
          },
          {
            "name": "mapEdges",
            "comment": " Maps over edge labels, possibly chaing their types. Leaves the graph\ntopology intact.\n",
            "type": "(e1 -> e2) -> Graph.Graph n e1 -> Graph.Graph n e2"
          },
          {
            "name": "mapNodes",
            "comment": " Maps over node labels, possibly changing their types. Leaves the graph\ntopology intact.\n",
            "type": "(n1 -> n2) -> Graph.Graph n1 e -> Graph.Graph n2 e"
          },
          {
            "name": "member",
            "comment": " Analogous to `Dict.member`, `member nodeId graph` is true, if and only if\nthere is a node with id `nodeId` in `graph`.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    member 42 graph == False\n    member 1 graph == True\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Bool"
          },
          {
            "name": "node",
            "comment": " Focus for the `node` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | node : field } field"
          },
          {
            "name": "nodeById",
            "comment": "  `nodeById nodeId` focuses on the node with id `nodeId` with a `Graph`.\nSince the node might or might not exist, the small part on which we focus wraps\nthe `NodeContext` in a `Maybe`.\n\nThis is a combination of the `get` and `update` functions which is handy for\ncomposition of foci deep into a graph. Unfortunately, we need a combinator which\nwould get rid of the `Maybe` wrapping (that would be the task of a prism I think),\nbut suppose we have something like `Focus.withDefault : a -> Focus (Maybe a) a`,\nthen we could define\n\n    ctx = NodeContext (Node 2 \"2\") IntDict.empty IntDict.empty\n    focus = nodeById 2 => Focus.withDefault ctx => node => label\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    graph1 = Focus.set focus graph \"=\"\n    Focus.get focus graph1 == \"=\"\n\nWell, I hope I could bring over the point.\n",
            "type": "Graph.NodeId -> Focus.Focus (Graph.Graph n e) (Maybe.Maybe (Graph.NodeContext n e))"
          },
          {
            "name": "nodeIdRange",
            "comment": " `nodeIdRange graph` returns `Just (minNodeId, maxNodeId)` if `graph` is not empty and `Nothing`\notherwise.\n\nThis is useful for finding unoccupied node ids without trial and error.\n\n    nodeIdRange empty == Nothing\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodeIdRange graph == Just (1, 2)\n",
            "type": "Graph.Graph n e -> Maybe.Maybe ( Graph.NodeId, Graph.NodeId )"
          },
          {
            "name": "nodeIds",
            "comment": " `nodeIds graph` returns a list of all nodes' ids in `graph`.\n\n    nodeIds empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodeIds graph == [1, 2]\n",
            "type": "Graph.Graph n e -> List Graph.NodeId"
          },
          {
            "name": "nodes",
            "comment": " `nodes graph` returns a list of all `Node`s (e.g. `id` and `label`) in\n`graph`.\n\n    nodes empty == []\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    nodes graph == [Node 1 \"1\", Node 2 \"2\"]\n",
            "type": "Graph.Graph n e -> List (Graph.Node n)"
          },
          {
            "name": "onDiscovery",
            "comment": " Transform a `SimpleNodeVisitor` into an equivalent `DfsNodeVisitor`, which\nwill be called upon node discovery. This eases providing `DfsNodeVisitor`s in\nthe default case:\n\n    dfsPostOrder : Graph n e  -> List (NodeContext n e)\n    dfsPostOrder graph =\n      dfs (onDiscovery (::)) [] graph\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.DfsNodeVisitor n e acc"
          },
          {
            "name": "onFinish",
            "comment": " Transform a `SimpleNodeVisitor` into an equivalent `DfsNodeVisitor`, which\nwill be called upon node finish. This eases providing `DfsNodeVisitor`s in\nthe default case:\n\n    dfsPreOrder : Graph n e  -> List (NodeContext n e)\n    dfsPreOrder graph =\n      dfs (onFinish (::)) [] graph\n",
            "type": "Graph.SimpleNodeVisitor n e acc -> Graph.DfsNodeVisitor n e acc"
          },
          {
            "name": "outgoing",
            "comment": " Focus for the `outgoing` field of `NodeContext`.\n",
            "type": "Focus.Focus { record | outgoing : field } field"
          },
          {
            "name": "remove",
            "comment": " Analogous to `Dict.remove`, `remove nodeId graph` returns a version of `graph`\nwithout a node with id `nodeId`. If there was no node with that id, then remove\nis a no-op:\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 ()]\n    graph == remove 42 graph\n    graph |> remove 2 |> size == 1\n",
            "type": "Graph.NodeId -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "reverseEdges",
            "comment": " Reverses the direction of every edge in the graph.\n",
            "type": "Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "size",
            "comment": " `size graph` returns the number of nodes in `graph`.\n\n    size empty == 0\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] []\n    size graph == 2\n",
            "type": "Graph.Graph n e -> Int"
          },
          {
            "name": "stronglyConnectedComponents",
            "comment": " Decomposes a graph into its strongly connected components. The resulting\nlist is a topological ordering of the component graph.\n",
            "type": "Graph.Graph n e -> List (Graph.Graph n e)"
          },
          {
            "name": "symmetricClosure",
            "comment": " `symmetricClosure edgeMerger graph` is the\n[symmetric closure](https://en.wikipedia.org/wiki/Symmetric_closure) of `graph`,\ne.g. the undirected equivalent, where for every edge in `graph` there is also\na corresponding reverse edge. This implies that `ctx.incoming` == `ctx.outgoing`\nfor each node context `ctx`.\n\n`edgeMerger` resolves conflicts for when there are already edges in both\ndirections, e.g. the graph isn't truly directed. It is guaranteed that\n`edgeMerger` will only be called with the smaller node id passed in first\nto enforce consitency of merging decisions.\n\n    graph = fromNodesAndEdges [Node 1 \"1\", Node 2 \"2\"] [Edge 1 2 \"->\"]\n    onlyUndirectedEdges ctx =\n      ctx.incoming == ctx.outgoing\n    merger from to outgoingLabel incomingLabel =\n      outgoingLabel -- quite arbitrary, will not be called for the above graph\n    fold\n      (\\ctx acc -> acc && onlyUndirectedEdges ctx)\n      True\n      (symmetricClosure merger graph)\n      == True\n",
            "type": "(Graph.NodeId -> Graph.NodeId -> e -> e -> e) -> Graph.Graph n e -> Graph.Graph n e"
          },
          {
            "name": "to",
            "comment": " Focus for the `to` field of `Edge`.\n",
            "type": "Focus.Focus { record | to : field } field"
          },
          {
            "name": "toString'",
            "comment": " Returns a string representation of the graph in the format of\n`Graph.fromNodesAndEdges [<nodes>] [<edges>]`.\n",
            "type": "Graph.Graph n e -> String"
          },
          {
            "name": "topologicalSort",
            "comment": " Computes a\n[topological ordering](https://en.wikipedia.org/wiki/Topological_sorting) of the\ngiven graph.\n",
            "type": "Graph.Graph n e -> List (Graph.NodeContext n e)"
          },
          {
            "name": "update",
            "comment": " Analogous to `Dict.update`, `update nodeId updater graph` will find\nthe node context of the node with id `nodeId` in `graph`. It will then call `updater`\nwith `Just` that node context if that node was found and `Nothing`\notherwise. `updater` can then return `Just` an updated node context\n(modifying edges is also permitted!) or delete the node by returning\n`Nothing`. The updated `graph` is returned.\n\nThis is the most powerful building function since all possible per-node\noperations are possible (node removal, insertion and updating of context\nproperties).\n\nThe other operations can be implemented in terms of `update` like this:\n\n    remove nodeId graph =\n      update nodeId (always Nothing) graph\n    insert nodeContext graph =\n      update nodeContext.node.id (always (Just nodeContext)) graph\n",
            "type": "Graph.NodeId -> (Maybe.Maybe (Graph.NodeContext n e) -> Maybe.Maybe (Graph.NodeContext n e)) -> Graph.Graph n e -> Graph.Graph n e"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Graph.Tree",
        "comment": " This module provides a simple tree data type of arbitrary arity (a rose tree).\nThere are primitives for building and traversing such a tree.\n\n# Data\n@docs Tree, Forest\n\n# Building\n@docs empty, leaf, inner, unfoldTree, unfoldForest\n\n# Query\n@docs isEmpty, root, size, height\n\n# Traversal\n\nIt is instructory to read the article on [tree traversals on Wikipedia](https://en.wikipedia.org/wiki/Tree_traversal) first if you are not familiar with the concept.\n\n@docs levelOrder, levelOrderList, preOrder, preOrderList, postOrder, postOrderList\n\n",
        "aliases": [
          {
            "name": "Forest",
            "comment": " This is just an alias for a list of trees, called a forest in the\nliterature.\n",
            "args": [
              "label"
            ],
            "type": "List (Graph.Tree.Tree label)"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " Data type representing an n-ary tree with node labels of type `a`\nBuilding such a tree is done with the `empty`, `leaf` and `inner` smart\nconstructors. An example for a tree with three leafs and a root node:\n\n    tree = inner 1 [leaf 2, leaf 3, leaf 4]\n",
            "args": [
              "label"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "empty",
            "comment": " Construct an empty tree with no nodes. ",
            "type": "Graph.Tree.Tree label"
          },
          {
            "name": "height",
            "comment": " Computes the height of the tree in O(n) time.\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    height tree == 3\n",
            "type": "Graph.Tree.Tree label -> Int"
          },
          {
            "name": "inner",
            "comment": " Construct a new tree by `inner label children`, combining a number of\nsubtrees `children` with a `label` for the new inner node which will be\nthe root of the tree. Empty subtrees are filtered out. An example:\n\n    tree1 = inner 1 [leaf 2, leaf 3, leaf 4]\n    tree2 = inner 1 [leaf 2, leaf 3, leaf 4, empty]\n    tree1 == tree2\n",
            "type": "label -> List (Graph.Tree.Tree label) -> Graph.Tree.Tree label"
          },
          {
            "name": "isEmpty",
            "comment": " `isEmpty tree` returns true if and only if `tree` is `empty`.\n\n    isEmpty empty == True\n    isEmpty (leaf 42) == False\n",
            "type": "Graph.Tree.Tree label -> Bool"
          },
          {
            "name": "leaf",
            "comment": " Construct a tree with a single node from a value for the node's label.\n\n    tree : Tree Int\n    tree = leaf 42\n ",
            "type": "label -> Graph.Tree.Tree label"
          },
          {
            "name": "levelOrder",
            "comment": " `levelOrder visit acc tree` is a breadth-first fold over `tree`,\nvisiting each node and accumulating results with `visit`. Nodes are visited\nin level-order, e.g. for a tree like\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n\nnodes would be visited in order `[0, 1, 4, 2, 3, 5, 6]`. This is in fact the\nlist produced by `levelOrderList`, but through `levelOrder` you also get access\nto the children of the current node via the second parameter of visit.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "levelOrderList",
            "comment": " See the documentation on `levelOrder`. `levelOrderList tree` produces\na list of the nodes of the tree visited in level-order, e.g. breadth-first.\nSo:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    levelOrderList tree == [0, 1, 4, 2, 3, 5, 6]\n\nIf you also need information on child trees instead of just the node labels,\nuse `levelOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "postOrder",
            "comment": " `postOrder visit acc tree` is a (depth-first) post-order traversal (fold)\nover `tree` where `visit` is called with the label and the child sub-forest of\nthe current node in addition to a supplied accumulator value.\n\nWhen `visit` is called for some node, `acc` already contains the value of all\nsub-trees, so post-order traversal is a kind of bottom-up traversal, where\nall children are visited prior to their parent.\nSee `postOrderList` for an example on the order in which nodes are visited.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "postOrderList",
            "comment": " See `postOrder` for an explanation of how post-order traversals work.\nHere is an example on visit order:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    postOrderList tree == [2, 3, 1, 5, 6, 4, 0]\n\nIf you also need information on child trees instead of just the node labels,\nuse `postOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "preOrder",
            "comment": " `preOrder visit acc tree` is a (depth-first) pre-order traversal (fold)\nover `tree` where `visit` is called with the label and the child sub-forest of\nthe current node in addition to a supplied accumulator value.\n\nPost-order traversals work top-down: When `visit` is called for some node,\n`acc` already contains the value of all ancestral nodes.\nSee `preOrderList` for an example on the order in which nodes are visited.\n",
            "type": "(label -> Graph.Tree.Forest label -> acc -> acc) -> acc -> Graph.Tree.Tree label -> acc"
          },
          {
            "name": "preOrderList",
            "comment": " See `preOrder` for an explanation of how post-order traversals work.\nHere is an example on visit order:\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    preOrderList tree == [0, 1, 2, 3, 4, 5, 6]\n\nIf you also need information on child trees instead of just the node labels,\nuse `preOrder`.\n",
            "type": "Graph.Tree.Tree label -> List label"
          },
          {
            "name": "root",
            "comment": " `root tree` returns `Nothing` if `tree` is `empty`, otherwise\nit returns `Just (label, childForest)` of the root node.\n\n    tree = inner 1 [leaf 2, leaf 3, leaf 4]\n    root tree == Just (1, [leaf 2, leaf 3, leaf 4])\n    root empty == Nothing\n",
            "type": "Graph.Tree.Tree label -> Maybe.Maybe ( label, Graph.Tree.Forest label )"
          },
          {
            "name": "size",
            "comment": " The size of the tree, e.g. the number of nodes.\n\n    tree = inner 0 [inner 1 [leaf 2, leaf 3], inner 4 [leaf 5, leaf 6]]\n    size tree == 7\n",
            "type": "Graph.Tree.Tree label -> Int"
          },
          {
            "name": "unfoldForest",
            "comment": " Construct a new forest with `unfoldForest next seeds` by `unfoldTree next seed`\nfor each `seed` in `seeds`. A simple specification would be\n\n    unfoldForest next seeds = List.map (unfoldTree next) seeds\n",
            "type": "(seed -> ( label, List seed )) -> List seed -> Graph.Tree.Forest label"
          },
          {
            "name": "unfoldTree",
            "comment": " Construct a new tree with `unfoldTree next seed`, top to bottom. `next` will be\ncalled repeatedly with seeds, from which it should construct a label for\nthe current tree node but also a list of seeds from which to unfold\nchild nodes. This sort of works top to bottom compared to creating a\ntree bottom up by using the other primitives.\n\n    tree1 = inner 1 [leaf 2, leaf 3, leaf 4]\n    next seed = (seed, if seed == 1 then [2, 3, 4] else [])\n    tree2 = unfoldTree next 1\n    tree1 == tree2\n",
            "type": "(seed -> ( label, List seed )) -> seed -> Graph.Tree.Tree label"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "sgraf812/elm-intdict",
    "version": "1.4.2",
    "docs": [
      {
        "name": "IntDict.Safe",
        "comment": " Safe API wrappers for `IntDict`s build and query operators \nto prevent integer overflows with JavaScripts number type.\n\nPrior to delegating to their 'unsafe' equivalent, these functions verify\nthe validity of the key via `IntDict.isValidKey`.\n\n# Return type\n@docs InvalidKey, SafeKeyResult\n# Build\n@docs safeInsert, safeUpdate, safeRemove\n# Query\n@docs safeMember, safeGet\n\n",
        "aliases": [
          {
            "name": "SafeKeyResult",
            "comment": " A value of this type is returned by all functions in this module. \nSee the core libraries' `Result` documentation for how to cope with it. ",
            "args": [
              "a"
            ],
            "type": "Result.Result IntDict.Safe.InvalidKey a"
          }
        ],
        "types": [
          {
            "name": "InvalidKey",
            "comment": " An error type signaling an invalid key. ",
            "args": [],
            "cases": [
              [
                "InvalidKey",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "safeGet",
            "comment": " Version of `IntDict.get` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (Maybe.Maybe v)"
          },
          {
            "name": "safeInsert",
            "comment": " Version of `IntDict.insert` that validates the key. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeMember",
            "comment": " Version of `IntDict.member` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult Bool"
          },
          {
            "name": "safeRemove",
            "comment": " Version of `IntDict.remove` that validates the key. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          },
          {
            "name": "safeUpdate",
            "comment": " Version of `IntDict.update` that validates the key. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.Safe.SafeKeyResult (IntDict.IntDict v)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "IntDict",
        "comment": " # IntDict\n\nThis module exposes the same API as `Dict`.\n\n# Technicalities\n\nSince JavaScript's number type is kind of messed up, Elm's `Int` is not particularly\nwell-behaved wrt. bitwise operations. Currently, JS supports 32 bit integers, so there is\nprobably enough room for key picks. **However, when sanitizing user input, it is mandatory\nthat a prior `isValidKey` or one of the safe versions in `IntDict.Safe` is used!** This is\nto prevent the overflow behavior.\n\nThis library is inspired by Haskells [IntMap](http://hackage.haskell.org/package/containers-0.2.0.1/docs/Data-IntMap.html),\nwhich in turn implements Okasaki and Gill's [Fast mergable integer maps](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf).\n\nAs noted in the [references](http://ittc.ku.edu/~andygill/papers/IntMap98.pdf), here are some runtimes:\n\n*O(min(n, W))*: `insert`, `update`, `remove`, `get`, `member`\n\n*O(n + m)*: `uniteWith`, `union`, `intersection`, `diff`\n\nwhere *n* and *m* are the sizes of the first and second dictionary respectively and *W*\nis the number of bits in `Int` (so a constant with current value 32).\n\n# Data\n@docs IntDict, isValidKey\n# Build\n@docs empty, singleton, insert, update, remove\n# Query\n@docs isEmpty, size, member, get, findMin, findMax\n# Combine\n@docs uniteWith, union, intersect, diff\n# Lists\n@docs keys, values, toList, fromList\n# Transform\n@docs map, foldl, foldr, filter, partition\n# String representation\n@docs toString'\n\n",
        "aliases": [],
        "types": [
          {
            "name": "IntDict",
            "comment": " A dictionary mapping `Int`s to values of a type `v`. Analogous to\n`Dict Int v`.\n",
            "args": [
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "diff",
            "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\nPreference is given to the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "empty",
            "comment": " Create an empty dictionary. ",
            "type": "IntDict.IntDict v"
          },
          {
            "name": "filter",
            "comment": " Keep a key-value pair when it satisfies a predicate. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "findMax",
            "comment": " Find the maximum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "findMin",
            "comment": " Find the minimum key and value in the dictionary. ",
            "type": "IntDict.IntDict v -> Maybe.Maybe ( Int, v )"
          },
          {
            "name": "foldl",
            "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "foldr",
            "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key. ",
            "type": "(Int -> v -> a -> a) -> a -> IntDict.IntDict v -> a"
          },
          {
            "name": "fromList",
            "comment": " Convert an association list into a dictionary. ",
            "type": "List ( Int, v ) -> IntDict.IntDict v"
          },
          {
            "name": "get",
            "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary. ",
            "type": "Int -> IntDict.IntDict v -> Maybe.Maybe v"
          },
          {
            "name": "insert",
            "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ",
            "type": "Int -> v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "intersect",
            "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "isEmpty",
            "comment": " Check if the dictionary contains no items. ",
            "type": "IntDict.IntDict v -> Bool"
          },
          {
            "name": "isValidKey",
            "comment": " Validates that a given integer is usable as a key.\nThis is necessary due to JavaScript's weird number type.\nBasically this assures that we can use the functions\nfrom `Bitwise` without risking integer overflow.\n\n**This function is a necessity for sanitizing user input!** Alternatively,\nuse the safe functions from `IntDict.Safe` which perform the check for you.\n\nAs with the current version of JavaScript (2015), only 32 bit signed integers are supported.\nIf this ever changes, contact me! Certain parts of the implementation depend on this! ",
            "type": "Int -> Bool"
          },
          {
            "name": "keys",
            "comment": " Get all of the keys in a dictionary. ",
            "type": "IntDict.IntDict v -> List Int"
          },
          {
            "name": "map",
            "comment": " Apply a function to all values in a dictionary. ",
            "type": "(Int -> a -> b) -> IntDict.IntDict a -> IntDict.IntDict b"
          },
          {
            "name": "member",
            "comment": " Determine if a key is in a dictionary. ",
            "type": "Int -> IntDict.IntDict v -> Bool"
          },
          {
            "name": "partition",
            "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest. ",
            "type": "(Int -> v -> Bool) -> IntDict.IntDict v -> ( IntDict.IntDict v, IntDict.IntDict v )"
          },
          {
            "name": "remove",
            "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ",
            "type": "Int -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "singleton",
            "comment": " Create a dictionary with one key-value pair. ",
            "type": "Int -> v -> IntDict.IntDict v"
          },
          {
            "name": "size",
            "comment": " The number of items in the dictionary. `O(1)`.",
            "type": "IntDict.IntDict v -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a dictionary into an association list of key-value pairs. ",
            "type": "IntDict.IntDict v -> List ( Int, v )"
          },
          {
            "name": "toString'",
            "comment": " Generates a string representation similar to what `toString`\ngenerates for `Dict`. ",
            "type": "IntDict.IntDict v -> String"
          },
          {
            "name": "union",
            "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. ",
            "type": "IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "uniteWith",
            "comment": " `uniteWith merger d1 d2` combines two dictionaries. If there is a collision, `merger`\nis called with the conflicting key, the value from `d1` and that from `d2`. ",
            "type": "(Int -> v -> v -> v) -> IntDict.IntDict v -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "update",
            "comment": " Update the value of a dictionary for a specific key with a given function. ",
            "type": "Int -> (Maybe.Maybe v -> Maybe.Maybe v) -> IntDict.IntDict v -> IntDict.IntDict v"
          },
          {
            "name": "values",
            "comment": " Get all of the values in a dictionary. ",
            "type": "IntDict.IntDict v -> List v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "simonewebdesign/elm-timer",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Timer",
        "comment": " This module provides a simple timer that you can easily integrate in your Elm app.\nIt's even easier if you are following the [the Elm Architecture][arch] and using\n[start-app][].\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial\n[start-app]: http://package.elm-lang.org/packages/evancz/start-app/latest/\n\n# Types\n@docs Model, Action\n\n# Functions\n@docs init, init', view, update\n\n# Signals\n@docs tick, countdown\n\n# Extras\n@docs addLeadingZero, clock\n",
        "aliases": [
          {
            "name": "Model",
            "comment": " Type alias that represents the internal value of a timer.\nIt's basically just a simple counter.\n",
            "args": [],
            "type": "Int"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " A type that you can use to update the timer.\nA `Tick` moves forward, a `Tock` goes backwards.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "addLeadingZero",
            "comment": " Adds a leading zero to a number *only if* it's a single digit.\n\n    addLeadingZero 0 == \"0\"\n    addLeadingZero 1 == \"01\"\n    addLeadingZero 12 == \"12\"\n",
            "type": "number -> String"
          },
          {
            "name": "clock",
            "comment": " A counter that increments every second.\n",
            "type": "Signal.Signal Timer.Model"
          },
          {
            "name": "countdown",
            "comment": " A `Signal` that tells a `Timer` to step backwards.\nUse this if you want a timer that goes to the past.\nThis will have no effect if the time is already expired (00:00).\n",
            "type": "Signal.Signal Timer.Action"
          },
          {
            "name": "init",
            "comment": " Initialize a timer.\n",
            "type": "Timer.Model"
          },
          {
            "name": "init'",
            "comment": " Initialize a timer with a starting value, in seconds.\n\n    Timer.init' (round Time.hour)\n\n    -- or, if you like magic numbers\n    Timer.init' 3600\n",
            "type": "Timer.Model -> Timer.Model"
          },
          {
            "name": "tick",
            "comment": " A `Signal` that tells a `Timer` to step forward.\nUse this if you want a timer that goes to the future.\n",
            "type": "Signal.Signal Timer.Action"
          },
          {
            "name": "update",
            "comment": " Updates the model.\nThis is how you can forward actions to a timer using the Elm Architecture:\n\n    TimerAction subAction ->\n      ( { model | timer = Timer.update subAction model.timer }\n      , Effects.none\n      )\n",
            "type": "Timer.Action -> Timer.Model -> Timer.Model"
          },
          {
            "name": "view",
            "comment": " Provides a way to display the timer, in a format that\nlooks like 01:30 (always with leading zeros).\n\n    Timer.view (Timer.init 30) -- will return \"00:30\"\n",
            "type": "Timer.Model -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "simonh1000/elm-charts",
    "version": "1.0.4",
    "docs": [
      {
        "name": "Chart",
        "comment": " This module comprises tools to create and modify a model of the data, labels and styling, and then the function `toHtml` renders the model using one of the provided views.\n\n# Chart constructors\n@docs hBar, vBar, pie\n\n# Customisers\n@docs title, colours, colors, addValueToLabel, updateStyles\n\n# Rendering\n@docs toHtml\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addValueToLabel",
            "comment": " addValueToLabel adds the data value of each item to the data label. This is applied by default in hBar.\n\n    vBar vs ls \"Title\"\n        |> addValueToLabel\n        |> toHtml\n",
            "type": "Chart.Model -> Chart.Model"
          },
          {
            "name": "colors",
            "comment": " colors supports alternative spelling of colours\n",
            "type": "List String -> Chart.Model -> Chart.Model"
          },
          {
            "name": "colours",
            "comment": " colours replaces the default colours. Bar charts use just one colour, which will be the head of the list provided.\n\n    vChart vs ls\n        |> colours [\"steelblue\"]\n        |> toHtml\n\n    pie vs ls\n        |> colours [\"steelblue\", \"#96A65B\", \"#D9A679\", \"#593F27\", \"#A63D33\"]\n        |> toHtml\n",
            "type": "List String -> Chart.Model -> Chart.Model"
          },
          {
            "name": "hBar",
            "comment": " The horizontal bar chart results in a set of bars, one above the other, of lengths in proportion to the value. A label with the data value is printed in each bar.\n\n    hBar vals labels\n        |> title \"My Chart\"\n        |> toHtml\n",
            "type": "List Float -> List String -> Chart.Model"
          },
          {
            "name": "pie",
            "comment": " The pie chart results in a circle cut into coloured segments of size proportional to the data value.\n\n    pie vals labels\n        |> toHtml\n",
            "type": "List Float -> List String -> Chart.Model"
          },
          {
            "name": "title",
            "comment": " title adds a title to the model.\n\n    -- e.g. build a chart from scratch\n    chartInit vs ls BarHorizontal\n        |> title \"This will be the title\"\n        |> toHtml\n",
            "type": "String -> Chart.Model -> Chart.Model"
          },
          {
            "name": "toHtml",
            "comment": " toHtml is called last, and causes the chart data to be rendered to html.\n\n    hBar vs ls\n        |> toHtml\n",
            "type": "Chart.Model -> Html.Html"
          },
          {
            "name": "updateStyles",
            "comment": " updateStyles replaces styles for a specified part of the chart. Charts have the following div structure\n\n    .container\n        .title\n        .chart-container\n            .chart      (container for the bars or pie segments)\n                .chart-elements\n            .legend     (also for the label container in a vertical bar chart)\n                .legend-labels\n\n    vChart vs ls\n        |> updateStyles \"chart\" [ ( \"color\", \"black\" ) ]\n        |> toHtml\n",
            "type": "String -> List Chart.Style -> Chart.Model -> Chart.Model"
          },
          {
            "name": "vBar",
            "comment": " The vertical bar chart results in a set of bars of lengths in proportion to the value. A label is printed below each bar.\n\n    vBar vals labels\n        |> title \"My Chart\"\n        |> toHtml\n",
            "type": "List Float -> List String -> Chart.Model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "simonh1000/elm-jwt",
    "version": "1.0.2",
    "docs": [
      {
        "name": "Jwt",
        "comment": " Helper functions for Jwt token authentication.\n\nA Jwt Token comprises 3 elements: a header and footer and the content. This package\nincludes a function to send an authentication request, a function to read the content of a token;\nand a function to send GET requests with the token attached.\n\n# API functions\n@docs authenticate, decodeToken, getWithJwt\n\n# Errors\n@docs JwtError\n",
        "aliases": [],
        "types": [
          {
            "name": "JwtError",
            "comment": " The three errors that can emerge are:\n - network errors,\n - issues with processing (e.g. base 64 decoding) the token, and\n - problems decoding the json data within the content of the token\n\n",
            "args": [],
            "cases": [
              [
                "HttpError",
                [
                  "String"
                ]
              ],
              [
                "TokenProcessingError",
                [
                  "String"
                ]
              ],
              [
                "TokenDecodeError",
                [
                  "String"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "authenticate",
            "comment": " `authenticate` is a custom Http POST method that sends a stringified\nJson object containing the login credentials. It then extracts the token from the\njson response from the server and returns it.\n\n    authenticate\n        (\"token\" := Json.string)\n        \"http://localhost:5000/auth\"\n        (\"{\\\"username\\\":\\\"\" ++ model.uname ++ \"\\\",\\\"password\\\":\\\"\"++ model.pword ++ \"\\\"}\")\n            |> Task.map Token\n            |> Effects.task\n",
            "type": "Json.Decode.Decoder String -> String -> String -> Task.Task never (Result.Result Jwt.JwtError String)"
          },
          {
            "name": "decodeToken",
            "comment": " decodeToken converts the token content to an Elm record structure.\n\n    decoderToken dec token\n\nIn the event of success, `decodeToken` returns an Elm record structure using the JSON Decoder.\n\n",
            "type": "Json.Decode.Decoder a -> String -> Result.Result Jwt.JwtError a"
          },
          {
            "name": "getWithJwt",
            "comment": " getWithJwt is a replacement for `Http.get` that attaches a provided Jwt token\nto the headers of the GET request.\n\n    getWithJwt model.token \"http://localhost:5000/api/restos/test\"\n        |> Task.toResult\n        |> Task.map AuthData\n        |> Effects.tasks\n",
            "type": "String -> Json.Decode.Decoder a -> String -> Task.Task Http.Error a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "sindikat/elm-array-experimental",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Array.Experimental",
        "comment": " Array.Experimental is a testing playground for various Array related functions. It contains functions that are experimental, unidiomatic, controversial or downright silly. This is specifically to not clutter Array and Array.Extra, and also have an isolated place to test crazy ideas.\n\n*Do not* use this module in production code. Try your best to come up with equivalent functionality or solve your problem in a different way, and if you fail, consider contributing to Array and Array.Extra packages.\n\n*Do not* import functions from this module unqualified if you do use it.\n\nThis package has the lowest possible bar for inclusion of Array related functions. If you have some code that you want to publish somewhere, but not necessarily contribute to core libraries, feel absolutely free to contribute here. Treat this package as a safe sandbox. The GitHub page for ideas, suggestions, discussions, and pull requests is:\n\nhttps://github.com/sindikat/elm-maybe-experimental\n\n# Array functions\n@docs get, set, update, take, drop\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "drop",
            "comment": " Drop *n* first elements from an array. In other words, slice an array from an index until the very end.\n\n    drop 5 (fromList [0..9]) == fromList [5,6,7,8,9]\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "get",
            "comment": " Return `Just` the element at the index. Given negative argument, counts the element from end. Returns `Nothing` if the index ≥ abs (length array).\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Just 2\n\n`Array.get` from core libraries do not support negative arguments, but it might in the future.\n",
            "type": "Int -> Array.Array a -> Maybe.Maybe a"
          },
          {
            "name": "set",
            "comment": " Sets the element at the index. Given negative argument, counts the element from end. Returns the array unchanged if the index ≥ abs (length array).\n\n    set  1 7 (fromList [1,2,3]) == fromList [1,7,3]\n    set -1 7 (fromList [1,2,3]) == fromList [1,2,7]\n\n`Array.set` from core libraries do not support negative arguments, but it might in the future.\n",
            "type": "Int -> a -> Array.Array a -> Array.Array a"
          },
          {
            "name": "take",
            "comment": " Take *n* first elements from an array. In other words, slice an array from the very beginning until index not including.\n\n    take 5 (fromList [0..9]) == fromList [0,1,2,3,4]\n",
            "type": "Int -> Array.Array a -> Array.Array a"
          },
          {
            "name": "update",
            "comment": " Update the element at the index using a function. Given negative argument, counts the element from end. Returns the array unchanged if the index ≥ abs (length array).\n\n    update  1 ((+)10) (fromList [1,2,3]) == fromList [1,12,3]\n    update -1 ((+)10) (fromList [1,2,3]) == fromList [1,2,13]\n\nThere is no `Array.update` in the core libraries.\n",
            "type": "Int -> (a -> a) -> Array.Array a -> Array.Array a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "splodingsocks/elm-easy-events",
    "version": "1.2.0",
    "docs": [
      {
        "name": "EasyEvents",
        "comment": "\n# Event helpers\n@docs onInput, onInputInt, onInputFloat, onSpecificKeyPress, onEnterPress, onChange\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "onChange",
            "comment": " Takes an address of a type, and a function that produces a value of that\ntype from a string. That value will be send to the address in a message\nwhen a \"change\" event is fired.\n\nYou'll probably use this to send an action to your update function when\nan HTML `select` is changed.\n",
            "type": "Signal.Address a -> (String -> a) -> Html.Attribute"
          },
          {
            "name": "onEnterPress",
            "comment": " Takes an address, and an action, and sends the action to the address only\nwhen the enter key is pressed on the parent element.\n",
            "type": "Signal.Address action -> action -> Html.Attribute"
          },
          {
            "name": "onInput",
            "comment": " Accepts an action, and a function that turns a string into an action.\n\nExample:\n\n```\ntype Action = UpdateName String\n\nfoo address model =\n    input\n        [ type' \"text\"\n        , onInput address UpdateName\n        , value model\n        ]\n```\n\nThe code above would send an UpdateName action to `adress` whenever an input\nevent is fired on the input element.\n",
            "type": "Signal.Address action -> (String -> action) -> Html.Attribute"
          },
          {
            "name": "onInputFloat",
            "comment": " Like `onInput`, but for Floats instead of Strings\n",
            "type": "Signal.Address action -> (Float -> action) -> Html.Attribute"
          },
          {
            "name": "onInputInt",
            "comment": " Like `onInput`, but for Ints instead of Strings\n",
            "type": "Signal.Address action -> (Int -> action) -> Html.Attribute"
          },
          {
            "name": "onSpecificKeyPress",
            "comment": " Takes an address, a key code, and an action. Sends the action to the address\nwhenever that specific key code is pressed with the parent element focused.\n\nThis is useful for reacting only to specific key-presses (like submitting a\nform when the enter key is pressed, for example).\n",
            "type": "Signal.Address action -> Int -> action -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "splodingsocks/elm-html-table",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Table",
        "comment": "\n# Table\n![A screenshot of the table in-action](https://cloud.githubusercontent.com/assets/1227109/13919585/f838f042-ef33-11e5-9a9e-7f75d6e266db.png)\n@docs table, Props\n",
        "aliases": [
          {
            "name": "Props",
            "comment": "\n- Use the caption to describe the purpose of the table (it helps out visually impaired people)\n- Pass in HTML for the headers (accepting HTML lets you do fancy things like use buttons)\n- In the same way, pass in lists of HTML for rows\n",
            "args": [],
            "type": "{ caption : String , headers : List Html.Html , rows : List (List Html.Html) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "table",
            "comment": " Simple enough, just pass in props and you'll get back a semantic, accessible table!\n",
            "type": "Table.Props -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "splodingsocks/elm-type-extractor",
    "version": "1.0.0",
    "docs": [
      {
        "name": "TypeExtractor",
        "comment": " This small module will take a string of Elm source, and extract all top-level type declarations.\n\n# Types\n@docs TypeDef\n\n# Functions\n@docs extractTypes\n",
        "aliases": [
          {
            "name": "TypeDef",
            "comment": " ",
            "args": [],
            "type": "{ identifier : String, type' : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "extractTypes",
            "comment": " Will turn a string of Elm source into either an error message, or an Ast.\n",
            "type": "String -> Result.Result String (List TypeExtractor.TypeDef)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "sporto/erl",
    "version": "9.0.0",
    "docs": [
      {
        "name": "Erl",
        "comment": " Library for parsing and constructing URLs\n\n# Types\n@docs Url, Query\n\n# Parse\n@docs parse\n\n# Parse helpers\n@docs extractHash, extractHost, extractPath, extractProtocol, extractPort, extractQuery\n\n# Construct\n@docs new\n\n# Mutation helpers\n@docs addQuery, setQuery, removeQuery, clearQuery, appendPathSegments\n\n# Serialize\n@docs toString\n\n# Serialization helpers\n@docs queryToString\n\n",
        "aliases": [
          {
            "name": "Query",
            "comment": " A Dict that holds keys and values for the query string\n",
            "args": [],
            "type": "Dict.Dict String String"
          },
          {
            "name": "Url",
            "comment": " Record that holds url attributes\n",
            "args": [],
            "type": "{ protocol : String , username : String , password : String , host : List String , port' : Int , path : List String , hasTrailingSlash : Bool , hash : String , query : Erl.Query }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addQuery",
            "comment": " Set key/value in query string\n\n    Erl.addQuery key value url\n",
            "type": "String -> String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "appendPathSegments",
            "comment": " Append some path segments to a url\n\n    Erl.appendPathSegments [\"hello\", \"world\"] url\n",
            "type": "List String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "clearQuery",
            "comment": " Clears the current query string\n\n    Erl.clearQuery url\n",
            "type": "Erl.Url -> Erl.Url"
          },
          {
            "name": "extractHash",
            "comment": " Extract the hash (hash) from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractHost",
            "comment": " Extract the host from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractPath",
            "comment": " Extract the path from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractPort",
            "comment": " Extract the port from the url\n\n",
            "type": "String -> Int"
          },
          {
            "name": "extractProtocol",
            "comment": " Extract the protocol from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "extractQuery",
            "comment": " Extract the query string from the url\n\n",
            "type": "String -> String"
          },
          {
            "name": "new",
            "comment": " Generate an empty Erl.Url record\n\n    Erl.new ==\n\n    { protocol = \"\"\n    , username = \"\"\n    , password = \"\"\n    , host = []\n    , path = []\n    , hasTrailingSlash = False\n    , port' = 0\n    , hash = \"\"\n    , query = Dict.empty\n    }\n\n",
            "type": "Erl.Url"
          },
          {
            "name": "parse",
            "comment": " Parse a url string, returns an Erl.Url record\n\n    Erl.parse \"http://api.example.com/users/1#x/1?a=1\" == Erl.Url{...}\n",
            "type": "String -> Erl.Url"
          },
          {
            "name": "queryToString",
            "comment": " Convert to a string only the query component of an url, this includes '?'\n\n    Erl.queryToString url == \"?a=1&b=2\"\n",
            "type": "Erl.Url -> String"
          },
          {
            "name": "removeQuery",
            "comment": " Removes key from query string\n\n    Erl.removeQuery key url\n",
            "type": "String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "setQuery",
            "comment": " Set key/value in query string, removes any existing ones\n\n    Erl.setQuery key value url\n",
            "type": "String -> String -> Erl.Url -> Erl.Url"
          },
          {
            "name": "toString",
            "comment": " Generate url string from an Erl.Url record\n\n    url = { protocol = \"http\",\n          , username = \"\",\n          , password = \"\",\n          , host = [\"www\", \"foo\", \"com\"],\n          , path = [\"users\", \"1\"],\n          , hasTrailingSlash = False\n          , port' = 2000,\n          , hash = \"a/b\",\n          , query = Dict.empty |> Dict.insert \"q\" \"1\" |> Dict.insert \"k\" \"2\"\n          }\n\n    Erl.toString url == \"http://www.foo.com:2000/users/1?k=2&q=1#a/b\"\n\n",
            "type": "Erl.Url -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "sporto/hop",
    "version": "4.0.3",
    "docs": [
      {
        "name": "Hop",
        "comment": " A router for single page applications. See [readme](https://github.com/sporto/hop) for usage.\n\n# Setup\n@docs new\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "new",
            "comment": "\nCreate a Router\n\n    config =\n      { basePath = \"/app\"\n      , hash = False\n      , matchers = matchers\n      , notFound = NotFound\n      }\n\n    router =\n      Hop.new config\n",
            "type": "Hop.Types.Config routeTag -> Hop.Types.Router routeTag"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Hop.Navigate",
        "comment": " Functions for changing the browser location\n\n@docs navigateTo, addQuery, removeQuery, setQuery, clearQuery\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "addQuery",
            "comment": " Add query string values (patches any existing values)\n\n    addQuery config query location\n\n- config is the router Config record\n- query is a dictionary with keys to add\n- location is a record representing the current location\n\nExample use in update:\n\n    update action model =\n      case action of\n        ...\n        AddQuery query ->\n          (model, Effects.map HopAction (addQuery config query model.location))\n\nTo remove a value set the value to \"\"\n",
            "type": "Hop.Types.Config route -> Hop.Types.Query -> Hop.Types.Location -> Effects.Effects ()"
          },
          {
            "name": "clearQuery",
            "comment": " Clear all query string values\n\n    clearQuery config location\n\nExample use in update:\n\n    update action model =\n      case action of\n        ...\n        ClearQuery ->\n          (model, Effects.map HopAction (clearQuery config model.location))\n",
            "type": "Hop.Types.Config route -> Hop.Types.Location -> Effects.Effects ()"
          },
          {
            "name": "navigateTo",
            "comment": " Changes the location (hash and query)\n\n  navigateTo will append \"#/\" if necessary\n\n    navigateTo config \"/users\"\n\n  Example use in update:\n\n    update action model =\n      case action of\n        ...\n        NavigateTo path ->\n          (model, Effects.map HopAction (navigateTo config path))\n",
            "type": "Hop.Types.Config route -> String -> Effects.Effects ()"
          },
          {
            "name": "removeQuery",
            "comment": " Remove one query string value\n\n    removeQuery config query location\n\nExample use in update:\n\n    update action model =\n      case action of\n        ...\n        RemoveQuery query ->\n          (model, Effects.map HopAction (removeQuery config key model.location))\n",
            "type": "Hop.Types.Config route -> String -> Hop.Types.Location -> Effects.Effects ()"
          },
          {
            "name": "setQuery",
            "comment": " Set query string values (removes existing values)\n\n    setQuery config query location\n\nExample use in update:\n\n    update action model =\n      case action of\n        ...\n        SetQuery query ->\n          (model, Effects.map HopAction (setQuery config query model.location))\n",
            "type": "Hop.Types.Config route -> Hop.Types.Query -> Hop.Types.Location -> Effects.Effects ()"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Hop.Matchers",
        "comment": "\nFunctions for building matchers and matching paths\n\n# Building matchers\n@docs match1, match2, match3, match4, nested1, nested2, int, str\n\n# Using matchers\n@docs matchPath, matchLocation, matcherToPath\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "int",
            "comment": " Parameter matcher that matches an integer\n\n    match2 User \"/users/\" int\n",
            "type": "Combine.Parser Int"
          },
          {
            "name": "match1",
            "comment": "\nCreate a matcher with one static segment.\n\n    type Route = Books\n\n    match1 Books \"/books\"\n\nThis will match exactly\n\n    \"/books\"\n",
            "type": "route -> String -> Hop.Types.PathMatcher route"
          },
          {
            "name": "match2",
            "comment": "\nCreate a matcher with one static segment and one dynamic parameter.\n\n    type Route = Book Str\n\n    match2 Book \"/books/\" str\n\nThis will match a path like\n\n    \"/books/abc\"\n",
            "type": "(param1 -> route) -> String -> Combine.Parser param1 -> Hop.Types.PathMatcher route"
          },
          {
            "name": "match3",
            "comment": " Create a matcher with three segments.\n\n    type Route = BookReviews Int\n\n    match3 BookReviews \"/books/\" int \"/reviews\"\n\nThis will match a path like\n\n    \"/books/1/reviews\"\n",
            "type": "(param1 -> route) -> String -> Combine.Parser param1 -> String -> Hop.Types.PathMatcher route"
          },
          {
            "name": "match4",
            "comment": " Create a matcher with four segments.\n\n    type Route = BookChapter Int String\n\n    match4 BookChapter \"/books/\" int \"/chapters/\" str\n\nThis will match a path like\n\n    \"/books/1/chapters/abc\"\n\n",
            "type": "(param1 -> param2 -> route) -> String -> Combine.Parser param1 -> String -> Combine.Parser param2 -> Hop.Types.PathMatcher route"
          },
          {
            "name": "matchLocation",
            "comment": "\nMatches a location record.\nReturns the matched route.\n\n    matchLocation config { path = [\"users\", \"1\"], query = [] }\n\n    ==\n\n    (User 1)\n",
            "type": "Hop.Types.Config route -> Hop.Types.Location -> route"
          },
          {
            "name": "matchPath",
            "comment": "\nMatches a path.\nBasePath should already be removed.\ne.g. \"/users/1/comments/2\".\n\nReturns the matched route.\n\n    matchPath config \"/users/1/comments/2\"\n\n    ==\n\n    User 1 (Comment 2)\n",
            "type": "Hop.Types.Config route -> String -> route"
          },
          {
            "name": "matcherToPath",
            "comment": "\nGenerates a path from a matcher. Use this for reverse routing.\n\nThe last parameters is a list of strings. You need to pass one string for each dynamic parameter that this route takes.\n\n    matcherToPath bookReviewMatcher [\"1\", \"2\"]\n\n    ==\n\n    \"/books/1/reviews/2\"\n",
            "type": "Hop.Types.PathMatcher a -> List String -> String"
          },
          {
            "name": "nested1",
            "comment": " Create a matcher with two segments and nested routes\n\n    type CategoriesRoute = Games | Business | Product Int\n    type Route = ShopCategories CategoriesRoute\n\n    nested1 ShopCategories \"/shop\" categoriesRoutes\n\nThis could match paths like (depending on the nested routes)\n\n    \"/shop/games\"\n    \"/shop/business\"\n    \"/shop/product/1\"\n\n",
            "type": "(subRoute -> route) -> String -> List (Hop.Types.PathMatcher subRoute) -> Hop.Types.PathMatcher route"
          },
          {
            "name": "nested2",
            "comment": " Create a matcher with two segments and nested routes\n\n    type ReviewsRoutes = Reviews | Review Int\n    type Route = BookReviews ReviewsRoutes\n\n    nested2 BookReviews \"/books/\" int reviewsRoutes\n\nThis could match paths like (depending on the nested routes)\n\n    \"/books/1/reviews\"\n    \"/books/1/reviews/3\"\n\n",
            "type": "(param1 -> subRoute -> route) -> String -> Combine.Parser param1 -> List (Hop.Types.PathMatcher subRoute) -> Hop.Types.PathMatcher route"
          },
          {
            "name": "str",
            "comment": " Parameter matcher that matches a string, except /\n\n    match2 Token \"/token/\" str\n",
            "type": "Combine.Parser String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Hop.Types",
        "comment": "\n\n# Types\n@docs Config, Router, PathMatcher, Query, Location\n\n# Create\n@docs newLocation, newQuery\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Configuration input for Hop.new\n\n- basePath: Only for pushState routing (not hash). e.g. \"/app\". All routing and matching is done after this basepath.\n- hash: True for hash routing, False for pushState routing.\n- matchers: A List of route matchers.\n- notFound: Route that will match when a location is not found.\n\n",
            "args": [
              "route"
            ],
            "type": "{ basePath : String , hash : Bool , matchers : List (Hop.Types.PathMatcher route) , notFound : route }"
          },
          {
            "name": "Location",
            "comment": " A Record that represents the current location\nIncludes a `path` and a `query`\n\n    {\n      path: String,\n      query: Query\n    }\n",
            "args": [],
            "type": "{ path : List String, query : Hop.Types.Query }"
          },
          {
            "name": "PathMatcher",
            "comment": " A path matcher\n",
            "args": [
              "action"
            ],
            "type": "{ parser : Combine.Parser action, segments : List String }"
          },
          {
            "name": "Query",
            "comment": " A Dict that holds query parameters\n\n    Dict.Dict String String\n",
            "args": [],
            "type": "Dict.Dict String String"
          },
          {
            "name": "Router",
            "comment": " Router record created by Hop.new\n",
            "args": [
              "route"
            ],
            "type": "{ run : Task.Task () () , signal : Signal.Signal ( route, Hop.Types.Location ) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "newLocation",
            "comment": "\nCreate a empty Location record\n",
            "type": "Hop.Types.Location"
          },
          {
            "name": "newQuery",
            "comment": "\nCreate an empty Query record\n",
            "type": "Hop.Types.Query"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "teocollin1995/complex",
    "version": "1.0.0",
    "docs": [
      {
        "name": "Complex",
        "comment": " The complex module allows you to work with complex numbers. There is not much else to say. We have basic constructors, basic operations, trig, exponentials, and logarithms. More may be added in the future. \n\n# Basics\n@docs complex,i,one,zero,fromReal\n\n# Basic Unary Operations\n@docs real, imaginary, abs, conjugate, negation, sgn, arg, sqrt\n\n# Basic Binary Operations\n@docs  add, sub, mult, div\n\n# Trig\n@docs sin,cos,tan,asin,acos,atan, euler\n\n# Exponents and Logarithms \n@docs ln, exp, pow\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "abs",
            "comment": " Takes the absolute value of a complex number.\n\n    abs 2+2i == sqrt 8\n    abs -2-2i == sqrt 8\n    abs 0+0i == 0\n",
            "type": "Complex.Complex -> Float"
          },
          {
            "name": "acos",
            "comment": " Complex inverse cosine.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "add",
            "comment": " Adds two complex numbers by adding the real and imaginary parts.\n\n",
            "type": "Complex.Complex -> Complex.Complex -> Complex.Complex"
          },
          {
            "name": "arg",
            "comment": " The argument of a complex number. It is in radians. This is also known as the phase or angle.\n\n    arg 0+0i == 0\n    arg 0+i == pi/2\n\n",
            "type": "Complex.Complex -> Float"
          },
          {
            "name": "asin",
            "comment": " Complex inverse sine.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "atan",
            "comment": " Complex inverse tan.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "complex",
            "comment": " Generates a complex number. \n\n    complex 1 2 == 1+2i\n\n",
            "type": "Float -> Float -> Complex.Complex"
          },
          {
            "name": "conjugate",
            "comment": " Returns the conjugate of a complex number \n\n    conjugate 2+3i == 2 - 3i\n    conjugate 2-3i == 2+3i\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "cos",
            "comment": " Complex cosine.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "div",
            "comment": " Divides two complex numbers.\n\n    div 2+2i 1+1i == 2+0\n    div 2+2i 0+0i == NaN + NaNi\n\n",
            "type": "Complex.Complex -> Complex.Complex -> Complex.Complex"
          },
          {
            "name": "euler",
            "comment": "Euler's formula. \n           \n           euler 2 == e^{i*2} == cos 2 + i*sin 2\n",
            "type": "Float -> Complex.Complex"
          },
          {
            "name": "exp",
            "comment": " The exponent of a complex number.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "fromReal",
            "comment": " Creates a complex number from one real numer. \n\n    fromReal 5 == 5 + 0i\n\n",
            "type": "Float -> Complex.Complex"
          },
          {
            "name": "i",
            "comment": " The number i \n    \n    i == complex 0 1\n\n",
            "type": "Complex.Complex"
          },
          {
            "name": "imaginary",
            "comment": " Provides the imaginary part of a complex number.\n\n    imaginary 2+3i == 3\n\n",
            "type": "Complex.Complex -> Float"
          },
          {
            "name": "ln",
            "comment": " The natrual log of a complex number.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "mult",
            "comment": " Multiplies two complex numbers so that\n\n    mult (a+bi) (c+di) == (ac-bd) + (ad+bc)\n\n",
            "type": "Complex.Complex -> Complex.Complex -> Complex.Complex"
          },
          {
            "name": "negation",
            "comment": " Negates a complex number.\n\n    negation 1+2i == -1-2i\n    negation -1-2i == 1 + 2i\n    negation -1+2i == 1 - 2i\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "one",
            "comment": " The number 1.\n\n    complex 1 0 == one\n\n",
            "type": "Complex.Complex"
          },
          {
            "name": "pow",
            "comment": " Take a complex number to a complex power.\n    \n    pow 1+0i 2+2i == (1)^{2+2i} == 1\n\n",
            "type": "Complex.Complex -> Complex.Complex -> Complex.Complex"
          },
          {
            "name": "real",
            "comment": " Provides the real part of a complex number. \n\n    real 2+3i == 2\n\n",
            "type": "Complex.Complex -> Float"
          },
          {
            "name": "sgn",
            "comment": " Returns the sign of a complex number. \n\n    sgn 0 + 0i == 0\n    sgn 0 + 2i == 0\n    sgn 1 + (-10)i == 1\n    sgn (-1) + (10)i == (-1)\n    sgn (-1) + (-10)i == (-1)\n\n",
            "type": "Complex.Complex -> Float"
          },
          {
            "name": "sin",
            "comment": " Complex sine.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "sqrt",
            "comment": " Square root of a complex number. Returns only one of two possibilites.\n\n    sqrt (2+2i) == (1.55...) + i0.6435..\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "sub",
            "comment": " Subtacts two complex numbers by negating and adding.\n\n",
            "type": "Complex.Complex -> Complex.Complex -> Complex.Complex"
          },
          {
            "name": "tan",
            "comment": " Complex tangent.\n\n",
            "type": "Complex.Complex -> Complex.Complex"
          },
          {
            "name": "zero",
            "comment": " The number 0.\n\n    complex 0 0 == zero\n\n",
            "type": "Complex.Complex"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "thSoft/key-constants",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Keyboard.Keys",
        "comment": " Standard keyboard constants.\n\n# Data types\n@docs Key\n\n## Equality\n@docs equals\n\n# Functions\n@docs directionKeys, isKeyDown\n\n# Constants\n## Function keys\nNote: undefined function keys have a conflict with the default keybindings of a well-known browser.\n\n@docs f2, f4, f8, f9, f10\n\n## Modifiers\n@docs ctrl, shift, super, meta, windows, commandLeft, commandRight\n\n## Movement\n@docs arrowRight, arrowLeft, arrowUp, arrowDown, end, home, pageUp, pageDown\n\n## Editing keys\n@docs tab, space, backspace, delete, insert, enter\n\n## Special keys\n@docs escape\n\n## Numbers\n@docs one, two, three, four, five, six, seven, eight, nine, zero\n\n## Letters\n@docs a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n\n\n",
        "aliases": [
          {
            "name": "Key",
            "comment": " Type alias to make it clearer what integers are supposed to represent.\n",
            "args": [],
            "type": "{ keyCode : Char.KeyCode, name : String }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "a",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "arrowDown",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "arrowLeft",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "arrowRight",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "arrowUp",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "b",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "backspace",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "c",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "commandLeft",
            "comment": " A key on mac keyboards. The same keycode as the windows/super/meta keys. ",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "commandRight",
            "comment": " A key on mac keyboards. ",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "ctrl",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "d",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "delete",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "directionKeys",
            "comment": "",
            "type": "Keyboard.Keys.Key -> Keyboard.Keys.Key -> Keyboard.Keys.Key -> Keyboard.Keys.Key -> Signal.Signal { x : Int, y : Int }"
          },
          {
            "name": "e",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "eight",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "end",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "enter",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "equals",
            "comment": " Two Keys are equal if their keyCodes are equal ",
            "type": "Keyboard.Keys.Key -> Keyboard.Keys.Key -> Bool"
          },
          {
            "name": "escape",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "f",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "f10",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "f2",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "f4",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "f8",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "f9",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "five",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "four",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "g",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "h",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "home",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "i",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "insert",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "isKeyDown",
            "comment": "",
            "type": "Keyboard.Keys.Key -> Signal.Signal Bool"
          },
          {
            "name": "j",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "k",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "l",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "m",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "meta",
            "comment": " The super, meta & windows keys are all the same. ",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "n",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "nine",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "o",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "one",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "p",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "pageDown",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "pageUp",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "q",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "r",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "s",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "seven",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "shift",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "six",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "space",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "super",
            "comment": " The super, meta & windows keys are all the same. ",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "t",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "tab",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "three",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "two",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "u",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "v",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "w",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "windows",
            "comment": " The super, meta & windows keys are all the same. ",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "x",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "y",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "z",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          },
          {
            "name": "zero",
            "comment": "",
            "type": "Keyboard.Keys.Key"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "thebritican/elm-autocomplete",
    "version": "2.0.1",
    "docs": [
      {
        "name": "Autocomplete.Simple",
        "comment": " A customizable Autocomplete component.\n\nThis Autocomplete has a static list of items. See the Autocomplete module for maintaining a dynamic list of items.\n\nThe Autocomplete consists of a menu, a list, the list's many items, and an input.\nAll of these views are styleable via css classes.\nSee the Styling module.\n\nThe currently selected item is preserved and styled with the aforementioned module.\n\nThis selection is modified by keyboard arrow input, mouse clicks, and API consumer defined keyCodes.\n\nCheck out how easy it is to plug into `StartApp`:\n```\nmain : Signal Html.Html\nmain =\n  StartApp.Simple.start\n    { model = Autocomplete.init [ \"elm\", \"makes\", \"coding\", \"life\", \"easy\" ]\n    , update = Autocomplete.update\n    , view = Autocomplete.view\n    }\n```\n\n# Definition\n@docs Autocomplete\n\n# Initialize\n@docs init, initWithConfig\n\n# Update\n@docs Action, update\n\n# Views\n@docs view\n\n# Helpers\n@docs getSelectedItemText, getCurrentValue\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " A description of a state change\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Autocomplete",
            "comment": " The Autocomplete model.\n    It assumes filtering is based upon strings.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "getCurrentValue",
            "comment": " Get the string currently entered by the user in the Autocomplete\n",
            "type": "Autocomplete.Simple.Autocomplete -> String"
          },
          {
            "name": "getSelectedItemText",
            "comment": " Get the text of the currently selected item\n",
            "type": "Autocomplete.Simple.Autocomplete -> Autocomplete.Config.Text"
          },
          {
            "name": "init",
            "comment": " Creates an Autocomplete from a list of items with a default `String.startsWith` filter\n",
            "type": "List String -> Autocomplete.Simple.Autocomplete"
          },
          {
            "name": "initWithConfig",
            "comment": " Creates an Autocomplete with a custom configuration\n",
            "type": "List String -> Autocomplete.Config.Config -> Autocomplete.Simple.Autocomplete"
          },
          {
            "name": "update",
            "comment": " The quintessential Elm Architecture reducer.\n",
            "type": "Autocomplete.Simple.Action -> Autocomplete.Simple.Autocomplete -> Autocomplete.Simple.Autocomplete"
          },
          {
            "name": "view",
            "comment": " The full Autocomplete view, with menu and input.\n    Needs a Signal.Address and Autocomplete (typical of the Elm Architecture).\n",
            "type": "Signal.Address Autocomplete.Simple.Action -> Autocomplete.Simple.Autocomplete -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Autocomplete",
        "comment": " A customizable Autocomplete component.\n\nThis Autocomplete has a dynamic list of items.\nSee the `Autocomplete.Simple` module for using a simple, static list of items.\n\nThe Autocomplete consists of a menu, a list, the list's many items, and an input.\nAll of these views are styleable via css classes.\nSee the `Autocomplete.Styling` module.\n\nThe currently selected item is preserved and styled with the aforementioned module.\n\nThis selection is modified by keyboard arrow input, mouse clicks, and API consumer defined keyCodes.\n\nThis Autocomplete calls a API consumer-defined function that returns a refreshed list\nof items upon every input or selection change.\n\nAn example of plugging this into `StartApp`:\n```\nfetchMoreItems : String -> Task Effects.Never (List String)\nfetchMoreItems url =\n  Http.url url []\n    |> Http.getString\n    |> Task.toMaybe\n    |> Task.map responseToItems\n\n\nresponseToItems : Maybe String -> List String\nresponseToItems maybeString =\n  case maybeString of\n    Just string ->\n      String.lines string\n\n    Nothing ->\n      []\n\n\ngetItemsTask : String -> Int -> Task Effects.Never (List String)\ngetItemsTask value index =\n  fetchMoreItems \"https://raw.githubusercontent.com/first20hours/google-10000-english/master/20k.txt\"\n\n\napp =\n  let\n    config =\n      Autocomplete.Config.defaultConfig\n        |> Autocomplete.Config.setLoadingDisplay (img [ src \"assets/loading.svg\" ] [])\n  in\n    StartApp.start\n      { init = Autocomplete.initWithConfig [] getItemsTask config\n      , update = Autocomplete.update\n      , view = Autocomplete.view\n      , inputs = []\n      }\n\n\nmain =\n  app.html\n\n\nport tasks : Signal (Task.Task Never ())\nport tasks =\n  app.tasks\n```\n\nThe above example can be found in `example/src/RemoteExample.elm`.\n\n# Definition\n@docs Autocomplete, GetItemsTask\n\n# Initialize\n@docs init, initWithConfig\n\n# Update\n@docs Action, update\n\n# Views\n@docs view\n\n# Helpers\n@docs getSelectedItemText, getCurrentValue\n\n",
        "aliases": [
          {
            "name": "GetItemsTask",
            "comment": " Consumer defined function that is used to retrieve more items. Called when either\nthe input's value or selection index is changed.\n",
            "args": [],
            "type": "Autocomplete.Config.InputValue -> Autocomplete.Config.Index -> Task.Task Effects.Never (List String)"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " A description of a state change\n",
            "args": [],
            "cases": []
          },
          {
            "name": "Autocomplete",
            "comment": " The Autocomplete model.\n    It assumes filtering is based upon strings.\n",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "getCurrentValue",
            "comment": " Get the string currently entered by the user in the Autocomplete\n",
            "type": "Autocomplete.Autocomplete -> String"
          },
          {
            "name": "getSelectedItemText",
            "comment": " Get the text of the currently selected item\n",
            "type": "Autocomplete.Autocomplete -> Autocomplete.Config.Text"
          },
          {
            "name": "init",
            "comment": " Creates an Autocomplete from a list of items with a default `String.startsWith` filter\n",
            "type": "List String -> Autocomplete.GetItemsTask -> ( Autocomplete.Autocomplete, Effects.Effects Autocomplete.Action )"
          },
          {
            "name": "initWithConfig",
            "comment": " Creates an Autocomplete with a custom configuration\n",
            "type": "List String -> Autocomplete.GetItemsTask -> Autocomplete.Config.Config -> ( Autocomplete.Autocomplete, Effects.Effects Autocomplete.Action )"
          },
          {
            "name": "update",
            "comment": " The quintessential Elm Architecture reducer.\n",
            "type": "Autocomplete.Action -> Autocomplete.Autocomplete -> ( Autocomplete.Autocomplete, Effects.Effects Autocomplete.Action )"
          },
          {
            "name": "view",
            "comment": " The full Autocomplete view, with menu and input.\n    Needs a Signal.Address and Autocomplete (typical of the Elm Architecture).\n",
            "type": "Signal.Address Autocomplete.Action -> Autocomplete.Autocomplete -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Autocomplete.Config",
        "comment": " Configuration module for the Autocomplete component.\n\n# Definition\n@docs Config, ItemHtmlFn, Text, InputValue, Index\n\n# Defaults\n@docs defaultConfig\n\n# Modifiers\n@docs setStyleViewFn, setCompletionKeyCodes, setItemHtml, setMaxListSize, setFilterFn, setCompareFn, setNoMatchesDisplay, setLoadingDisplay\n\n\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration record for an Autocomplete component.\n",
            "args": [],
            "type": "Autocomplete.Config.Model"
          },
          {
            "name": "Index",
            "comment": " Positive integer index of selected item in list\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "InputValue",
            "comment": " The value of the input\n",
            "args": [],
            "type": "String"
          },
          {
            "name": "ItemHtmlFn",
            "comment": " Given the text of an item, produce some HTML\n",
            "args": [],
            "type": "Autocomplete.Config.Text -> Html.Html"
          },
          {
            "name": "Text",
            "comment": " The text of an item\n",
            "args": [],
            "type": "String"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "defaultConfig",
            "comment": " A simple Autocomplete configuration\n",
            "type": "Autocomplete.Config.Config"
          },
          {
            "name": "setCompareFn",
            "comment": " Provide a custom comparison function to order the Autocomplete matches.\n",
            "type": "(Autocomplete.Config.Text -> Autocomplete.Config.Text -> Basics.Order) -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setCompletionKeyCodes",
            "comment": " Provide keycodes for autocompletion. By default, completion happens on tab press.\n",
            "type": "List Char.KeyCode -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setFilterFn",
            "comment": " Provide a custom filter function used to filter Autocomplete items.\n",
            "type": "(Autocomplete.Config.Text -> Autocomplete.Config.InputValue -> Bool) -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setItemHtml",
            "comment": " Provide a custom HTML view for an Autocomplete item's text\n",
            "type": "Autocomplete.Config.ItemHtmlFn -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setLoadingDisplay",
            "comment": " Provide a custom loading display for the case when more items are being fetched\n",
            "type": "Html.Html -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setMaxListSize",
            "comment": " Provide a maximum list size for the Autocomplete menu\n",
            "type": "Int -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setNoMatchesDisplay",
            "comment": " Provide a custom HTML display for the case that nothing matches.\n",
            "type": "Html.Html -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          },
          {
            "name": "setStyleViewFn",
            "comment": " Provide a function that produces an attribute to style a particular View\n",
            "type": "(Autocomplete.Styling.View -> Html.Attribute) -> Autocomplete.Config.Config -> Autocomplete.Config.Config"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Autocomplete.Styling",
        "comment": " Styling module for the Autocomplete component.\n\nThe autocomplete consists of a menu, a list, list items, and an input.\nThis module includes functions to provide css class names for styling those\nchild views.\n\nStyling is easy as:\n```\ntestData : List String\ntestData =\n  [ \"elm\"\n  , \"makes\"\n  , \"coding\"\n  , \"life\"\n  , \"easy\"\n  ]\n\nstyleView : Styling.View -> Html.Attribute\nstyleView view =\n  case view of\n    Styling.Menu ->\n      class \"autocomplete-menu-default\"\n\n    Styling.List ->\n      class \"autocomplete-list-default\"\n\n    Styling.Item ->\n      class \"autocomplete-item-default\"\n\n    Styling.SelectedItem ->\n      class \"autocomplete-selected-item-default\"\n\n    Styling.Input ->\n      class \"autocomplete-input-default\"\n\nmain =\n  let\n    config =\n      Autocomplete.Config.defaultConfig\n        |> Autocomplete.Config.setStyleViewFn styleView\n  in\n    StartApp.Simple.start\n      { model = initWithConfig testData config\n      , update = update\n      , view = view\n      }\n```\n\n# Child Views\n@docs View\n\n# Defaults\n@docs defaultStyles\n\n",
        "aliases": [],
        "types": [
          {
            "name": "View",
            "comment": " The stylable views of the Autocomplete component.\n",
            "args": [],
            "cases": [
              [
                "Menu",
                []
              ],
              [
                "List",
                []
              ],
              [
                "Item",
                []
              ],
              [
                "SelectedItem",
                []
              ],
              [
                "Input",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultStyles",
            "comment": " Produces a style attribute for a View. Uses some pretty defaults.\n",
            "type": "Autocomplete.Styling.View -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "tomjkidd/elm-multiway-tree-zipper",
    "version": "1.1.0",
    "docs": [
      {
        "name": "MultiwayTreeZipper",
        "comment": " A library for navigating and updating immutable trees. The elements in\nthe tree must have the same type. The trees are implemented in a Huet\nZipper fashion.\n\n# Types\n@docs Context, Breadcrumbs, Zipper\n\n# Navigation API\n@docs goToChild, goUp, goToRoot\n\n# Update API\n@docs updateDatum, replaceDatum\n\n# Access API\n@docs datum, maybeDatum\n\n\n# References\n[The Zipper, Gerard Huet](https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf)\n[Learn You A Haskell, Zippers, Miran Lipovaca](http://learnyouahaskell.com/zippers)\n\n# Future work\nMight be able to integrate existing [Rose Tree](http://package.elm-lang.org/packages/TheSeamau5/elm-rosetree) to work with the Zipper.\nWanted the first version to be self contained.\n\n",
        "aliases": [
          {
            "name": "Breadcrumbs",
            "comment": " A list of Contexts that is contructed as a MultiwayTree is navigated.\nBreadcrumbs are used to retain information about parts of the tree that move out\nof focus. As the tree is navigated, the needed Context is pushed onto the list\nBreadcrumbs, and they are maintained in the reverse order in which they are\nvisited ",
            "args": [
              "a"
            ],
            "type": "List (MultiwayTreeZipper.Context a)"
          },
          {
            "name": "Zipper",
            "comment": " A structure to keep track of the current Tree, as well as the Breadcrumbs to\nallow us to continue navigation through the rest of the tree.\n",
            "args": [
              "a"
            ],
            "type": "( MultiwayTree.Tree a, MultiwayTreeZipper.Breadcrumbs a )"
          }
        ],
        "types": [
          {
            "name": "Context",
            "comment": " The necessary information needed to reconstruct a MultiwayTree as it is\nnavigated with a Zipper. This context includes the datum that was at the\nprevious node, a list of children that came before the node, and a list of\nchildren that came after the node.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Context",
                [
                  "a",
                  "List (MultiwayTree.Tree a)",
                  "List (MultiwayTree.Tree a)"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "datum",
            "comment": " Access the datum at the current Zipper focus.\n",
            "type": "MultiwayTreeZipper.Zipper a -> a"
          },
          {
            "name": "goToChild",
            "comment": " Move down relative to the current Zipper focus. This allows navigation from\na parent to it's children.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 1\n",
            "type": "Int -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goToRoot",
            "comment": " Move to the root of the current Zipper focus. This allows navigation from\nany part of the tree back to the root.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> goToChild 1\n        &> goToRoot\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "goUp",
            "comment": " Move up relative to the current Zipper focus. This allows navigation from a\nchild to it's parent.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\" []\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> goUp\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "maybeDatum",
            "comment": " Access the datum at the current Zipper focus as a Maybe.\n",
            "type": "MultiwayTreeZipper.Zipper a -> Maybe.Maybe a"
          },
          {
            "name": "replaceDatum",
            "comment": " Replace the datum at the current Zipper focus. This allows complete\nreplacement of a node's datum information, ignoring the previous state of the\nnode.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> replaceDatum \"X\" -- Replaces \"b\" with \"X\"\n        &> goToRoot\n",
            "type": "a -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          },
          {
            "name": "updateDatum",
            "comment": " Update the datum at the current Zipper focus. This allows changes to be made\nto a part of a node's datum information, given the previous state of the node.\n\n    (&>) = Maybe.andThen\n\n    simpleTree =\n        Tree \"a\"\n            [ Tree \"b\"\n                [ Tree \"e\" [] ]\n            , Tree \"c\" []\n            , Tree \"d\" []\n            ]\n\n    Just (simpleTree, [])\n        &> goToChild 0\n        &> updateDatum (\\old -> old ++ \"X\") -- Appends an X to \"b\"\n        &> goToRoot\n",
            "type": "(a -> a) -> MultiwayTreeZipper.Zipper a -> Maybe.Maybe (MultiwayTreeZipper.Zipper a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "MultiwayTree",
        "comment": " A library for constructing multi-way trees. Each Tree carries two pieces of\ninformation, it's datum and children.\n\n\n# Types\n@docs Tree, Forest\n\n# Operations\n@docs datum, children\n\n# Mapping\n@docs map\n",
        "aliases": [
          {
            "name": "Forest",
            "comment": " A list of Trees. Convenient for describing children.\n",
            "args": [
              "a"
            ],
            "type": "List (MultiwayTree.Tree a)"
          }
        ],
        "types": [
          {
            "name": "Tree",
            "comment": " A type to keep track of datum and children.\n",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Tree",
                [
                  "a",
                  "MultiwayTree.Forest a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "children",
            "comment": " Access the children of the current tree\n",
            "type": "MultiwayTree.Tree a -> MultiwayTree.Forest a"
          },
          {
            "name": "datum",
            "comment": " Access the datum of the current tree\n",
            "type": "MultiwayTree.Tree a -> a"
          },
          {
            "name": "map",
            "comment": " Map over the MultiwayTree\n",
            "type": "(a -> b) -> MultiwayTree.Tree a -> MultiwayTree.Tree b"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "tripokey/elm-fuzzy",
    "version": "5.0.0",
    "docs": [
      {
        "name": "Fuzzy",
        "comment": " This is library for performing fuzzy string matching.\n\n#Customization\n@docs addPenalty, removePenalty, movePenalty\n\n# Matching\n@docs match, Result, Match, Key\n\n",
        "aliases": [
          {
            "name": "Key",
            "comment": " Represents a matching character in a Match.\n",
            "args": [],
            "type": "Int"
          },
          {
            "name": "Match",
            "comment": " Represents a matching word in hay.\nscore is the score that this Match contributes to the total score in a Result.\noffset is the index where this match starts in the hay.\nlength is the length of the match.\nkeys is a list of matching indexes within the word. The keys are relative to the offset.\n",
            "args": [],
            "type": "{ score : Int, offset : Int, length : Int, keys : List Fuzzy.Key }"
          },
          {
            "name": "Result",
            "comment": " Represents the result of a match.\nscore is the total score of the result.\nmatches is a list of matching words within the hay.\n",
            "args": [],
            "type": "{ score : Int, matches : List Fuzzy.Match }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "addPenalty",
            "comment": " Create a penalty configuration that is applied to each additional character in hay.\n",
            "type": "Int -> Fuzzy.Config"
          },
          {
            "name": "match",
            "comment": " Perform fuzzy matching between a query String (needle) and a target String (hay).\nThe order of the arguments are significant. Lower score is better. Specifying some\nseparators will allow for partial matching within a sentence. The default configuration is\nmovePenalty = 100, addPenalty = 1, removePenalty = 1000.\n\n    let\n        simpleMatch config separators needle hay =\n          match config separators needle hay |> .score\n    in\n        simpleMatch [] [] \"test\" \"test\" == 0\n        simpleMatch [] [] \"tst\" \"test\" == 1\n        simpleMatch [addPenalty 10000] [] \"tst\" \"test\" == 10000\n        simpleMatch [] [] \"test\" \"tste\" == 100\n        simpleMatch [] [] \"test\" \"tst\" == 1000\n        simpleMatch [] [\"/\"] \"/u/b/s\" \"/usr/local/bin/sh\" == 5\n        simpleMatch [] [] \"/u/b/s\" \"/usr/local/bin/sh\" == 211\n        List.sortBy (simpleMatch [] [] \"hrdevi\") [\"screen\", \"disk\", \"harddrive\", \"keyboard\", \"mouse\", \"computer\"] == [\"harddrive\",\"keyboard\",\"disk\",\"screen\",\"computer\",\"mouse\"]\n",
            "type": "List Fuzzy.Config -> List String -> String -> String -> Fuzzy.Result"
          },
          {
            "name": "movePenalty",
            "comment": " Create a penalty configuration that is applied to each out of order character in hay.\n",
            "type": "Int -> Fuzzy.Config"
          },
          {
            "name": "removePenalty",
            "comment": " Create a penalty configuration that is applied to each additional character in needle.\n",
            "type": "Int -> Fuzzy.Config"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "truqu/elm-base64",
    "version": "1.0.3",
    "docs": [
      {
        "name": "Base64",
        "comment": " Library for base64 encoding and decoding of Ascii strings.\nFor the moment only works with the characters :\n\n\" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"\n\n# Method\n@docs encode, decode\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decode",
            "comment": " base64 decodes an ascii string. If the input is not a valid base64 string returns a Result.Err,\notherwise a Result.Ok String\n    decode(\"RWxtIGlzIENvb2w=\") == Result.Ok \"Elm is Cool\"\n",
            "type": "String -> Result.Result String String"
          },
          {
            "name": "encode",
            "comment": " base64 encodes an ascii string. If the input is not valid returns a Result.Err,\notherwise a Result.Ok String\n    encode(\"Elm is Cool\") == Result.Ok \"RWxtIGlzIENvb2w=\"\n",
            "type": "String -> Result.Result String String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "truqu/elm-dictset",
    "version": "1.0.2",
    "docs": [
      {
        "name": "DictSet",
        "comment": " A set of unique values. The values can be any type, and the comparison is\ndone using a function `compare : value -> comparable`.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Sets\n@docs DictSet\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
        "aliases": [
          {
            "name": "DictSet",
            "comment": " Represents a set of unique values together with the compare function\n",
            "args": [
              "comparable",
              "a"
            ],
            "type": "DictSet.Internal.DictSet comparable a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "diff",
            "comment": " Get the difference between the first set and the second. Keeps values that do not appear in the second set.\n",
            "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "empty",
            "comment": " Create an empty set\n",
            "type": "(a -> comparable) -> DictSet.DictSet comparable a"
          },
          {
            "name": "filter",
            "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
            "type": "(a -> Bool) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "foldl",
            "comment": " Fold over the values in a set, in order from lowest to highest.\n",
            "type": "(a -> b -> b) -> b -> DictSet.DictSet comparable a -> b"
          },
          {
            "name": "foldr",
            "comment": " Fold over the values in a set, in order from highest to lowest.\n",
            "type": "(a -> b -> b) -> b -> DictSet.DictSet comparable a -> b"
          },
          {
            "name": "fromList",
            "comment": " Convert a list into a set, removing any duplicates.\n",
            "type": "(a -> comparable) -> List a -> DictSet.DictSet comparable a"
          },
          {
            "name": "insert",
            "comment": " Insert a new value into a set\n",
            "type": "a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "intersect",
            "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
            "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "isEmpty",
            "comment": " Determine if a set is empty\n",
            "type": "DictSet.DictSet comparable a -> Bool"
          },
          {
            "name": "map",
            "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
            "type": "(b -> comparable) -> (a -> b) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable b"
          },
          {
            "name": "member",
            "comment": " Determine if a value is in a set\n",
            "type": "a -> DictSet.DictSet comparable a -> Bool"
          },
          {
            "name": "partition",
            "comment": " Create two new sets; the first consisting of elements which satisfy a\n",
            "type": "(a -> Bool) -> DictSet.DictSet comparable a -> ( DictSet.DictSet comparable a, DictSet.DictSet comparable a )"
          },
          {
            "name": "remove",
            "comment": " Remove a value from a set\n",
            "type": "a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          },
          {
            "name": "singleton",
            "comment": " Create a set with one value\n",
            "type": "(a -> comparable) -> a -> DictSet.DictSet comparable a"
          },
          {
            "name": "size",
            "comment": " Determine the number of elements in a set\n",
            "type": "DictSet.DictSet comparable a -> Int"
          },
          {
            "name": "toList",
            "comment": " Convert a set into a list.\n",
            "type": "DictSet.DictSet comparable a -> List a"
          },
          {
            "name": "union",
            "comment": " Get the union of two sets. Keep all values.\n",
            "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "typed-wire/elm-typed-wire-utils",
    "version": "2.0.1",
    "docs": [
      {
        "name": "TypedWire",
        "comment": " Helper functions for defining typed-wire json representations\n\n# Maybe\n@docs encMaybe\n\n# Bytes\n@docs AsBase64, decAsBase64, encAsBase64\n\n# Date\n@docs Date, toStdDate, fromStdDate, decDate, encDate\n\n# Time\n@docs Time, toStdTime, fromStdTime, decTime, encTime\n\n# DateTime\n@docs DateTime, toStdDateTime, fromStdDateTime, decDateTime, encDateTime\n",
        "aliases": [],
        "types": [
          {
            "name": "AsBase64",
            "comment": " bytes represented as base64 ",
            "args": [],
            "cases": [
              [
                "AsBase64",
                [
                  "String"
                ]
              ]
            ]
          },
          {
            "name": "Date",
            "comment": " typed wire date primitive ",
            "args": [],
            "cases": []
          },
          {
            "name": "DateTime",
            "comment": " typed wire datetime primitive ",
            "args": [],
            "cases": []
          },
          {
            "name": "Time",
            "comment": " typed wire time primitive ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "decAsBase64",
            "comment": " json base64 string decoder ",
            "type": "Json.Decode.Decoder TypedWire.AsBase64"
          },
          {
            "name": "decDate",
            "comment": " json date decoder ",
            "type": "Json.Decode.Decoder TypedWire.Date"
          },
          {
            "name": "decDateTime",
            "comment": " json datetime decoder ",
            "type": "Json.Decode.Decoder TypedWire.DateTime"
          },
          {
            "name": "decTime",
            "comment": " json time decoder ",
            "type": "Json.Decode.Decoder TypedWire.Time"
          },
          {
            "name": "encAsBase64",
            "comment": " json base64 string encoder ",
            "type": "TypedWire.AsBase64 -> Json.Encode.Value"
          },
          {
            "name": "encDate",
            "comment": " json date encoder ",
            "type": "TypedWire.Date -> Json.Encode.Value"
          },
          {
            "name": "encDateTime",
            "comment": " json datetime encoder ",
            "type": "TypedWire.DateTime -> Json.Encode.Value"
          },
          {
            "name": "encMaybe",
            "comment": " json encoder for maybes ",
            "type": "(a -> Json.Encode.Value) -> Maybe.Maybe a -> Json.Encode.Value"
          },
          {
            "name": "encTime",
            "comment": " json time encoder ",
            "type": "TypedWire.Time -> Json.Encode.Value"
          },
          {
            "name": "fromStdDate",
            "comment": " convert elm date to typed wire date ",
            "type": "Date.Date -> TypedWire.Date"
          },
          {
            "name": "fromStdDateTime",
            "comment": " convert elm date to typed wire datetime ",
            "type": "Date.Date -> TypedWire.Date"
          },
          {
            "name": "fromStdTime",
            "comment": " convert elm time to typed wire time ",
            "type": "Time.Time -> TypedWire.Time"
          },
          {
            "name": "toStdDate",
            "comment": " convert typed wire date to elm date ",
            "type": "TypedWire.Date -> Maybe.Maybe Date.Date"
          },
          {
            "name": "toStdDateTime",
            "comment": " convert typed wire datetime to elm date ",
            "type": "TypedWire.DateTime -> Maybe.Maybe Date.Date"
          },
          {
            "name": "toStdTime",
            "comment": " convert typed wire time to elm time ",
            "type": "TypedWire.Time -> Maybe.Maybe Time.Time"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "vilterp/elm-diagrams",
    "version": "7.2.0",
    "docs": [
      {
        "name": "Diagrams.Layout",
        "comment": " A utility for laying out variable-width diagrams.\n\nTODO: generalize to vertical\n\n# Types\n@docs FlexDiagram, Width, LayoutRow\n\n# Layout\n@docs layout\n\n# Primitives\n@docs spring, block, expando, strut\n\n# Helpers\n@docs centered, flexLeft, flexRight, flexCenter, flexAll, hrule\n\n",
        "aliases": [
          {
            "name": "LayoutRow",
            "comment": "",
            "args": [
              "t",
              "a"
            ],
            "type": "List (Diagrams.Layout.FlexDiagram t a)"
          },
          {
            "name": "Width",
            "comment": "",
            "args": [],
            "type": "Float"
          }
        ],
        "types": [
          {
            "name": "FlexDiagram",
            "comment": " A diagram which can vary its width -- e.g. a spacer or a video\nplayer timeline. ",
            "args": [
              "t",
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "block",
            "comment": " A fixed-size diagram. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Layout.FlexDiagram t a"
          },
          {
            "name": "centered",
            "comment": " A row in which the given diagram will stay centered. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Layout.LayoutRow t a"
          },
          {
            "name": "expando",
            "comment": " A diagram which has a minimum width, but can be drawn at any width >= that. ",
            "type": "Diagrams.Layout.Width -> (Diagrams.Layout.Width -> Diagrams.Type.Diagram t a) -> Diagrams.Layout.FlexDiagram t a"
          },
          {
            "name": "flexAll",
            "comment": " A row containing a diagram which fills the full width of the row. ",
            "type": "(Diagrams.Layout.Width -> Diagrams.Type.Diagram t a) -> Diagrams.Layout.LayoutRow t a"
          },
          {
            "name": "flexCenter",
            "comment": " A row in which the given diagrams will stay glued to the left and right:\nthe center is flexible. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a -> Diagrams.Layout.LayoutRow t a"
          },
          {
            "name": "flexLeft",
            "comment": " A row in which the given diagram will stay glued to the right:\nthe left side is flexible. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Layout.LayoutRow t a"
          },
          {
            "name": "flexRight",
            "comment": " A row in which the given diagram will stay glued to the left:\nthe right side is flexible. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Layout.LayoutRow t a"
          },
          {
            "name": "hrule",
            "comment": " Horizontal rule, with given vertical padding on top and bottom.\n(Kind of like the `<hr/>` element in HTML) ",
            "type": "Graphics.Collage.LineStyle -> Float -> Diagrams.Layout.LayoutRow t a"
          },
          {
            "name": "layout",
            "comment": " Given a list of rows of where some of the diagrams in each row\ncan have variable width, stack the rows vertically and decide the width of each\ndiagram such that the width of the whole thing is minimized. ",
            "type": "List (Diagrams.Layout.LayoutRow t a) -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "spring",
            "comment": " An invisible spacer which will expand horizontally as far as possible. ",
            "type": "Diagrams.Layout.FlexDiagram t a"
          },
          {
            "name": "strut",
            "comment": " A fixed-width spacer. ",
            "type": "Diagrams.Layout.Width -> Diagrams.Layout.FlexDiagram t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Debug",
        "comment": " Utilities for debugging alignment issues, etc.\n\n@docs showBBox, showOrigin\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "showBBox",
            "comment": " Draw a red dot box around a diagram. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "showOrigin",
            "comment": " Draw a red dot at `(0, 0)` in the diagram's local vector space. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Pad",
        "comment": " Surround diagrams with padding.\n\n@docs padSpecific, pad, background, outlineBox\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "background",
            "comment": " Put a rectangle behind the given diagram, matching its bounding box. ",
            "type": "Diagrams.FillStroke.FillStroke -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "outlineBox",
            "comment": " Draw a box around the given diagram ",
            "type": "Graphics.Collage.LineStyle -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "pad",
            "comment": " Return given diagram surrounded by given padding on all sides. ",
            "type": "Float -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "padSpecific",
            "comment": " Given four numbers up, down, left, and right, put an invisible spacer\nbehind the given diagram, changing its envelope. ",
            "type": "Float -> Float -> Float -> Float -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Interact",
        "comment": " An abstraction for making diagrams which change as a function of the mouse.\n\nAttach `ActionSet`s (see `Diagrams.Actions`) to diagrams with `Core.tagWithActions`;\nthen use `interactFold` or `update` to process mouse interaction. Mouse state (what \nis being clicked on, etc) is wrapped up inside an `InteractionState` value.\n\n`updateModel` can be used to push in updates from external sources.\n\nLook at GraphEditor for an example. (TODO: better docs / tutorial; explore using\nMailboxes to push out updates)\n\n# Function Types\n@docs RenderFunc, UpdateFunc\n\n# Interaction\n@docs InteractionState, MouseState, initInteractState\n@docs initMouseState, interactFold, update, updateModel\n@docs processMouseEvent\n\n",
        "aliases": [
          {
            "name": "InteractionState",
            "comment": "",
            "args": [
              "m",
              "t",
              "a"
            ],
            "type": "{ mouseState : Diagrams.Interact.MouseState t a , diagram : Diagrams.Type.Diagram t a , modelState : m , renderFunc : Diagrams.Interact.RenderFunc m t a , updateFunc : Diagrams.Interact.UpdateFunc m a }"
          },
          {
            "name": "MouseState",
            "comment": "",
            "args": [
              "t",
              "a"
            ],
            "type": "{ isDown : Bool , overPickedTags : List (Diagrams.Interact.PickedTag t a) , overPathsOnMouseDown : Maybe.Maybe (List (List t)) }"
          },
          {
            "name": "RenderFunc",
            "comment": "",
            "args": [
              "m",
              "t",
              "a"
            ],
            "type": "m -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "UpdateFunc",
            "comment": "",
            "args": [
              "m",
              "a"
            ],
            "type": "a -> m -> m"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "initInteractState",
            "comment": "",
            "type": "Diagrams.Interact.UpdateFunc m a -> Diagrams.Interact.RenderFunc m t a -> m -> Diagrams.Interact.InteractionState m t a"
          },
          {
            "name": "initMouseState",
            "comment": "",
            "type": "Diagrams.Interact.MouseState t a"
          },
          {
            "name": "interactFold",
            "comment": " One top-level interface to this module. Given\n- how to update the state (type `m`) given an action (type `a`),\n- how to render a diagram given the state,\n- and how to compute the location of the collage on screen from the window dimensions,\nReturn a signal of diagrams.\n\nSince it returns a signal, you should only use it if this is the top-level interaction of your app; i.e.\nyou aren't making a component that's nestable inside others as in the Elm Architecture. To make a component,\nuse `update` to build an update function.\n",
            "type": "Diagrams.Interact.UpdateFunc m a -> Diagrams.Interact.RenderFunc m t a -> Diagrams.Wiring.CollageLocFunc -> m -> Signal.Signal (Diagrams.Type.Diagram t a)"
          },
          {
            "name": "processMouseEvent",
            "comment": " Given diagram with mouse state (`MouseDiagram`), mouse event, and dimensions of collage, return\nnew `MouseDiagram` with list of actions triggered by this mouse event. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Interact.MouseState t a -> Diagrams.Wiring.PrimMouseEvent -> ( Diagrams.Interact.MouseState t a, List a )"
          },
          {
            "name": "update",
            "comment": " Function to update the interaction state, given an event (probably from `Diagrams.Wiring`'s `makeUpdateStream`)\n-- the other top-level interface. ",
            "type": "( Diagrams.Wiring.CollageLocation, Diagrams.Wiring.PrimMouseEvent ) -> Diagrams.Interact.InteractionState m t a -> Diagrams.Interact.InteractionState m t a"
          },
          {
            "name": "updateModel",
            "comment": "",
            "type": "(m -> m) -> Diagrams.Interact.InteractionState m t a -> Diagrams.Interact.InteractionState m t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Align",
        "comment": "\n# Relative Positioning\n@docs beside, above, atop, hcat, vcat, zcat\n\n# Moving the origin\n@docs alignLeft, alignRight, alignTop, alignBottom, alignCenter, hAlign, vAlign\n\n# Aligning lists of diagrams\n@docs HAlign, VAlign, hcatA, vcatA\n",
        "aliases": [],
        "types": [
          {
            "name": "HAlign",
            "comment": "",
            "args": [],
            "cases": [
              [
                "LeftA",
                []
              ],
              [
                "RightA",
                []
              ]
            ]
          },
          {
            "name": "VAlign",
            "comment": "",
            "args": [],
            "cases": [
              [
                "TopA",
                []
              ],
              [
                "BottomA",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "above",
            "comment": " Given two diagrams a and b, place b to the right of a, such that their origins\nare on a horizontal line and their envelopes touch. The origin of the new diagram\nis the origin of a. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "alignBottom",
            "comment": " Translate a diagram such that the origin is on the bottom edge of the bounding box ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "alignCenter",
            "comment": " Translate a diagram such that the envelope in all directions is equal ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "alignLeft",
            "comment": " Translate a diagram such that the origin is on the left edge of the bounding box ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "alignRight",
            "comment": " Translate a diagram such that the origin is on the right edge of the bounding box ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "alignTop",
            "comment": " Translate a diagram such that the origin is on the top edge of the bounding box ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "atop",
            "comment": " Given two diagrams a and b, stack a on top of b in the \"out of page\" axis,\nso a occludes b. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "beside",
            "comment": " Given two diagrams a and b, place b to the right of a, such that their origins\nare on a horizontal line and their envelopes touch. The origin of the new diagram\nis the origin of a. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "hAlign",
            "comment": " Choose alignLeft or alignRight based on the given `HAlign`. ",
            "type": "Diagrams.Align.HAlign -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "hcat",
            "comment": " Place a list of Diagrams next to each other, such that\ntheir origins are along a horizontal line. The first element in the list will\nbe on the left; the last on the right. ",
            "type": "List (Diagrams.Type.Diagram t a) -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "hcatA",
            "comment": " Align a list of diagrams along a horizontal line according to the\ngiven `VAlign`. ",
            "type": "Diagrams.Align.VAlign -> List (Diagrams.Type.Diagram t a) -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "vAlign",
            "comment": " Choose alignTop or alignBottom based on the given `VAlign`. ",
            "type": "Diagrams.Align.VAlign -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "vcat",
            "comment": " Place a list of Diagrams next to each other, such that\ntheir origins are along a vertical line. The first element in the list will\nbe on the top; the last on the bottom. ",
            "type": "List (Diagrams.Type.Diagram t a) -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "vcatA",
            "comment": " Align a list of diagrams along a vertical line according to the\ngiven `HAlign`. ",
            "type": "Diagrams.Align.HAlign -> List (Diagrams.Type.Diagram t a) -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "zcat",
            "comment": " Place a list of diagrams on top of each other, with their origin points\nstacked on the \"out of page\" axis. The first diagram in the list is on top.\nThis is the same as the `group`. ",
            "type": "List (Diagrams.Type.Diagram t a) -> Diagrams.Type.Diagram t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Bezier",
        "comment": " Generate bezier paths as lists of points.\nAdapted from [this gist](https://gist.github.com/irrwitz/968b9762819974c92c9f).\n\n@docs bezier\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bezier",
            "comment": " Given four points a, cp1, cp2, b, return path diagram which is a bezier\ncurve from a to b, using cp1 and cp2 as control points. ",
            "type": "Diagrams.Geom.Point -> Diagrams.Geom.Point -> Diagrams.Geom.Point -> Diagrams.Geom.Point -> Graphics.Collage.LineStyle -> Diagrams.Type.Diagram t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Query",
        "comment": " Retreive information about laid-out diagrams.\n\n# Pick\n@docs pick, PickTree\n\n# Get Coordinates\n@docs getCoords, TagPath\n",
        "aliases": [
          {
            "name": "TagPath",
            "comment": "",
            "args": [
              "a"
            ],
            "type": "List a"
          }
        ],
        "types": [
          {
            "name": "PickTree",
            "comment": " Result of `pick`: tree representing the subtree of the Diagram the\ngiven point is over.\n\n- Leaf nodes mean the mouse is over a primitive shape (rect, text, etc)\n- Tag nodes mean the child of this pickTree is under that tag.\n- Layers mean that the mouse is over two overlapping diagrams. The\n  pick trees for these diagrams are given in a list starting with the\n  one on top. ",
            "args": [
              "t",
              "a"
            ],
            "cases": [
              [
                "PickLayers",
                [
                  "List (Diagrams.Query.PickTree t a)"
                ]
              ],
              [
                "PickLeaf",
                []
              ],
              [
                "PickTag",
                [
                  "{ tag : t , offset : Diagrams.Geom.Point , actionSet : Diagrams.Actions.ActionSet t a , child : Diagrams.Query.PickTree t a }"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "getCoords",
            "comment": " Try to find a subDiagram t at the given tag path. If it is found,\nreturn `Just` the coordinates of its origin relative to the origin of this diagram.\nIf it isn't found, return `Nothing`. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Query.TagPath t -> Maybe.Maybe Diagrams.Geom.Point"
          },
          {
            "name": "pick",
            "comment": " Given a diagram and a point (e.g. of the mouse), return a `PickTree`, which represents\nwhat subtree of the diagram that point is currently over. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Geom.Point -> Maybe.Maybe (Diagrams.Query.PickTree t a)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Envelope",
        "comment": "\n@docs envelope, width, height, boundingBox\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "boundingBox",
            "comment": " Box formed by taking the envelope in all directions. ",
            "type": "Diagrams.Type.Diagram t a -> Diagrams.Geom.BBox"
          },
          {
            "name": "envelope",
            "comment": " Given a diagram and a Direction, return the distance in that direction from the origin\nto the closest line perpendicular to that direction which doesn't intersect the content of\nthe diagram. See the [Haskell diagrams docs][hd] for a visual explanation.\n\n [hd]: http://projects.haskell.org/diagrams/doc/manual.html#envelopes-and-local-vector-spaces\n",
            "type": "Diagrams.Geom.Direction -> Diagrams.Type.Diagram t a -> Float"
          },
          {
            "name": "height",
            "comment": "",
            "type": "Diagrams.Type.Diagram t a -> Float"
          },
          {
            "name": "width",
            "comment": "",
            "type": "Diagrams.Type.Diagram t a -> Float"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.FullWindow",
        "comment": " Utilities for when you just want to get a diagram on the whole screen.\n\nSee `Diagrams.Wiring` docs for more info on `CollageLocation`s.\n\n@docs fullWindowCollageLocFunc, fullWindowCollageLoc, fullWindowUpdates, fullWindowMain, fullWindowView\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "fullWindowCollageLoc",
            "comment": " Signal of full-window collage locations, updating as the window size changes. ",
            "type": "Signal.Signal Diagrams.Wiring.CollageLocation"
          },
          {
            "name": "fullWindowCollageLocFunc",
            "comment": " A location function which always returns a `CollageLocation` in the middle of the window,\nfilling the whole window. ",
            "type": "Diagrams.Wiring.CollageLocFunc"
          },
          {
            "name": "fullWindowMain",
            "comment": " The easiest way to get a diagram on the screen:\n\n    main = fullWindowMain (rect 10 10 (justFill <| Solid Color.orange))\n",
            "type": "Diagrams.Type.Diagram t a -> Signal.Signal Graphics.Element.Element"
          },
          {
            "name": "fullWindowUpdates",
            "comment": " Signal of location and mouse updates for when diagram is filling the whole screen. ",
            "type": "Signal.Signal ( Diagrams.Wiring.CollageLocation, Diagrams.Wiring.PrimMouseEvent )"
          },
          {
            "name": "fullWindowView",
            "comment": "",
            "type": "( Int, Int ) -> Diagrams.Type.Diagram t a -> Graphics.Element.Element"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Core",
        "comment": " Diagrams is a library built on top of `Graphics.Collage` which allows you to\nconstruct graphics by laying out elements relative to each other.\n\nA Diagram is represented as a tree of elements, where the leaves are primitive\nshapes like rectangles, circles, paths and text and the nodes are transformations\nlike translation, rotation, and scaling.\n\nThere are also `Group` nodes. These have multiple children which are transformed\nsimultaneously by the transformations above them.\n\n[Sierpinski triangle example](https://gist.github.com/vilterp/9966fd18de8d9b282ade)\n\nLastly, there are `Tag` nodes which just hold a child Diagram t and a value of type a;\nthese exist solely to identify a subdiagram, for the purposes of (a) specifying a tag\npath and getting the coordinates it was positioned at (the `getCoords` function) or\n(b) given a point, find what subtree it is over (the `pick` function).\n\nUsing signals to compose `pick` with mouse clicks, you can create a signal of\nclicked-on elements. Folding this with the application state and re-rendering, you\ncan make an interface which is responsive to the mouse without channels.\n\nThe library is based on the excellent [Diagrams][hd] library for Haskell, which\nhas a nice [visual tutorial][hd-tut]. Things are named slightly differently, and this\nversion is missing a lot of features and generality.\n\nWith v5.0 the functionality has been split into many modules to make it more manageable;\nthis [graph of their dependencies][mod-graph] may be helpful. Not sure if a `Prelude` module\nwhich exports everything is a good idea.\n\n [hd]: http://projects.haskell.org/diagrams/\n [hd-tut]: http://projects.haskell.org/diagrams/doc/quickstart.html\n [mod-graph]: https://docs.google.com/drawings/d/1_321XRPhfP8t0u747QhNwR_PiibVHroxcioLq-vHdq8/edit\n\n# Constructors\n@docs circle, rect, path, polygon, text, spacer, transform, group, tag, tagWithActions, ngon, eqTriangle\n\n# Basic Transforms\n@docs move, moveX, moveY, scale, rotate\n\n# Rendering\n@docs render\n\n# Composition Utilities\n@docs empty, vspace, hspace, vline, hline\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "circle",
            "comment": " Circle with a given radius and fill, centered on the local origin. ",
            "type": "Float -> Diagrams.FillStroke.FillStroke -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "empty",
            "comment": "",
            "type": "Diagrams.Type.Diagram t a"
          },
          {
            "name": "eqTriangle",
            "comment": " equilateral triangle with given side length & fill/stroke style ",
            "type": "Float -> Diagrams.FillStroke.FillStroke -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "group",
            "comment": " Group a list of Diagrams in to one. Elements will be stacked with local origins\non top of one another. This is the same as `zcat`. The first diagram in the list is on top. ",
            "type": "List (Diagrams.Type.Diagram t a) -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "hline",
            "comment": " Horizontal line of given width and line style ",
            "type": "Float -> Graphics.Collage.LineStyle -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "hspace",
            "comment": " Horizontal spacer of width w ",
            "type": "Float -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "move",
            "comment": " Translate given diagram by (x, y). Origin of resulting diagram is the same. ",
            "type": "( Float, Float ) -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "moveX",
            "comment": "",
            "type": "Float -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "moveY",
            "comment": "",
            "type": "Float -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "ngon",
            "comment": " regular polygon with number of sides, side length, & fill/stroke style ",
            "type": "Int -> Float -> Diagrams.FillStroke.FillStroke -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "path",
            "comment": " Unclosed path made of this list of points, laid out relative to the local origin. ",
            "type": "List Diagrams.Geom.Point -> Graphics.Collage.LineStyle -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "polygon",
            "comment": "",
            "type": "List Diagrams.Geom.Point -> Diagrams.FillStroke.FillStroke -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "rect",
            "comment": " Rectangle with given width, height, and fill, centered on the local origin. ",
            "type": "Float -> Float -> Diagrams.FillStroke.FillStroke -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "render",
            "comment": "",
            "type": "Diagrams.Type.Diagram t a -> Graphics.Collage.Form"
          },
          {
            "name": "rotate",
            "comment": " Rotate the given diagram counterclockwise. Angle specified in radians. ",
            "type": "Float -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "scale",
            "comment": "",
            "type": "Float -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "spacer",
            "comment": " Spacer with given width and height; renders as transparent. ",
            "type": "Float -> Float -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "tag",
            "comment": " Return a Tag node with the given Diagram as its sole child. Adding this to the \ndiagram tree is useful for picking and getting coordinates. ",
            "type": "t -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "tagWithActions",
            "comment": " Return a Tag node with the given Diagram as its sole child, holding both\na tag and an action set. ",
            "type": "t -> Diagrams.Actions.ActionSet t a -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "text",
            "comment": " Text with given style, centered vertically and horizontally on the local origin. ",
            "type": "Text.Style -> String -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "transform",
            "comment": " Translate, rotate, or scale a given diagram. The transformed diagram has the\nsame origin. ",
            "type": "Diagrams.Geom.Transform -> Diagrams.Type.Diagram t a -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "vline",
            "comment": " Vertical line of given height and line style ",
            "type": "Float -> Graphics.Collage.LineStyle -> Diagrams.Type.Diagram t a"
          },
          {
            "name": "vspace",
            "comment": " Vertical spacer of height h ",
            "type": "Float -> Diagrams.Type.Diagram t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Type",
        "comment": "\n@docs Diagram\n",
        "aliases": [
          {
            "name": "Diagram",
            "comment": " A diagram. See `Diagrams.Core` for constructor functions. ",
            "args": [
              "t",
              "a"
            ],
            "type": "Diagrams.RealType.Diagram t a"
          }
        ],
        "types": [],
        "values": [],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Actions",
        "comment": " ActionSets can be attached to diagrams with `Core.tagWithActions`, and used\nwith module `Diagrams.Interact`. Build them with e.g.\n    \n    { emptyActionSet | click = Just <| keepBubbling <| \\(MouseEvent evt) -> SomeAction evt.offset }\n\n(Will probably think of helpers to make this more concise later). See the `Diagrams.Interact` docs\nand the GraphEditor example for more info on how to use actions, including how bubbling works.\n\n# Types\n@docs ActionSet, MouseEvent, PickPath, PickPathElem, EventToAction\n\n# Helpers\n@docs emptyActionSet, keepBubbling, stopBubbling, mousePosAtPath\n",
        "aliases": [
          {
            "name": "ActionSet",
            "comment": "",
            "args": [
              "t",
              "a"
            ],
            "type": "{ click : Maybe.Maybe (Diagrams.Actions.EventToAction t a) , mouseEnter : Maybe.Maybe (Diagrams.Actions.EventToAction t a) , mouseLeave : Maybe.Maybe (Diagrams.Actions.EventToAction t a) , mouseMove : Maybe.Maybe (Diagrams.Actions.EventToAction t a) , mouseDown : Maybe.Maybe (Diagrams.Actions.EventToAction t a) , mouseUp : Maybe.Maybe (Diagrams.Actions.EventToAction t a) }"
          },
          {
            "name": "EventToAction",
            "comment": " Given an event, return (a) an action resulting from that event, and (b) whether to stop this\nmouse event from \"bubbling up\" to handlers higher up the tree. ",
            "args": [
              "t",
              "a"
            ],
            "type": "Diagrams.Actions.MouseEvent t a -> ( List a, Bool )"
          },
          {
            "name": "PickPath",
            "comment": "",
            "args": [
              "t"
            ],
            "type": "List (Diagrams.Actions.PickPathElem t)"
          },
          {
            "name": "PickPathElem",
            "comment": "",
            "args": [
              "t"
            ],
            "type": "{ tag : t, offset : Diagrams.Geom.Point }"
          }
        ],
        "types": [
          {
            "name": "MouseEvent",
            "comment": " Path: list of (tag, offset) from bottom of tree to top.\nOffset: offset at lowest level in tree. ",
            "args": [
              "t",
              "a"
            ],
            "cases": [
              [
                "MouseEvent",
                [
                  "{ offset : Diagrams.Geom.Point, path : Diagrams.Actions.PickPath t }"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "emptyActionSet",
            "comment": "",
            "type": "Diagrams.Actions.ActionSet t a"
          },
          {
            "name": "keepBubbling",
            "comment": "",
            "type": "(Diagrams.Actions.MouseEvent t a -> List a) -> Diagrams.Actions.EventToAction t a"
          },
          {
            "name": "mousePosAtPath",
            "comment": "",
            "type": "Diagrams.Actions.MouseEvent t a -> List t -> Maybe.Maybe Diagrams.Geom.Point"
          },
          {
            "name": "stopBubbling",
            "comment": "",
            "type": "(Diagrams.Actions.MouseEvent t a -> List a) -> Diagrams.Actions.EventToAction t a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Wiring",
        "comment": " Functions and types for getting a (possibly interactive) diagram onto the screen.\n\n# Types\n@docs CollageLocation, PrimMouseEvent, PrimMouseEvtType, CollageLocFunc\n\n# Functions\n@docs makeUpdateStream, mouseEvents, offsetMousePos\n\n# Input Signals\n@docs floatMousePos, floatWindowDims, toPoint\n",
        "aliases": [
          {
            "name": "CollageLocFunc",
            "comment": " Given window size, where on screen and how big is your collage? ",
            "args": [],
            "type": "Diagrams.Geom.Dims -> Diagrams.Wiring.CollageLocation"
          },
          {
            "name": "CollageLocation",
            "comment": " Position of a rectangle on the screen in which a diagram will be drawn (as a `Graphics.Collage`).\nOffset is difference between top left of screen and top left of collage, increasing right and down. ",
            "args": [],
            "type": "Diagrams.Geom.OffsetDimsBox"
          },
          {
            "name": "PrimMouseEvent",
            "comment": "",
            "args": [],
            "type": "( Diagrams.Wiring.PrimMouseEvtType, Diagrams.Geom.Point )"
          }
        ],
        "types": [
          {
            "name": "PrimMouseEvtType",
            "comment": "",
            "args": [],
            "cases": [
              [
                "MouseUpEvt",
                []
              ],
              [
                "MouseDownEvt",
                []
              ],
              [
                "MouseMoveEvt",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "floatMousePos",
            "comment": "",
            "type": "Signal.Signal Diagrams.Geom.Point"
          },
          {
            "name": "floatWindowDims",
            "comment": "",
            "type": "Signal.Signal Diagrams.Geom.Dims"
          },
          {
            "name": "makeUpdateStream",
            "comment": " Given collage location function, return stream of (collage location, mouse event)\npairs, where mouse coordinates are relative to the center of the collage at its present\nlocation, and increasing up and to the right. ",
            "type": "Diagrams.Wiring.CollageLocFunc -> Signal.Signal ( Diagrams.Wiring.CollageLocation, Diagrams.Wiring.PrimMouseEvent )"
          },
          {
            "name": "mouseEvents",
            "comment": " Given a signal of collage locations, return a signal of mouse events offset from the\ncenter of that location. ",
            "type": "Signal.Signal Diagrams.Wiring.CollageLocation -> Signal.Signal Diagrams.Wiring.PrimMouseEvent"
          },
          {
            "name": "offsetMousePos",
            "comment": " Given the position of the top-left of a collage (from the top-left of the screen; coords increasing right and down)\nand the dimensions of the collage, return a signal of the mouse position relative to the center of that collage,\nand increasing up and to the right instead of down and to the right. ",
            "type": "Diagrams.Wiring.CollageLocation -> Diagrams.Geom.Point -> Diagrams.Geom.Point"
          },
          {
            "name": "toPoint",
            "comment": "",
            "type": "( Int, Int ) -> Diagrams.Geom.Point"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.Geom",
        "comment": " Geometry utilities used by the rest of the library.\n\n# Transforms\n@docs Transform, applyTrans, invertTrans\n\n# Points\n@docs Point, magnitude, pointAdd, pointNegate, pointSubtract\n\n# Boxes\n@docs BBox, OffsetDimsBox, Dims, bbox2offsetDims, pointInside\n\n# Other\n@docs lerp, Direction, directionAngle\n",
        "aliases": [
          {
            "name": "BBox",
            "comment": " Bounding box ",
            "args": [],
            "type": "{ up : Float, down : Float, left : Float, right : Float }"
          },
          {
            "name": "Dims",
            "comment": " Dimensions ",
            "args": [],
            "type": "{ width : Float, height : Float }"
          },
          {
            "name": "OffsetDimsBox",
            "comment": " A box defined by its offset and dimensions ",
            "args": [],
            "type": "{ offset : ( Float, Float ), dims : Diagrams.Geom.Dims }"
          },
          {
            "name": "Point",
            "comment": "",
            "args": [],
            "type": "( Float, Float )"
          }
        ],
        "types": [
          {
            "name": "Direction",
            "comment": "",
            "args": [],
            "cases": [
              [
                "Up",
                []
              ],
              [
                "Down",
                []
              ],
              [
                "Left",
                []
              ],
              [
                "Right",
                []
              ]
            ]
          },
          {
            "name": "Transform",
            "comment": "",
            "args": [],
            "cases": [
              [
                "Translate",
                [
                  "Float",
                  "Float"
                ]
              ],
              [
                "Rotate",
                [
                  "Float"
                ]
              ],
              [
                "Scale",
                [
                  "Float"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "applyTrans",
            "comment": "",
            "type": "Diagrams.Geom.Transform -> Diagrams.Geom.Point -> Diagrams.Geom.Point"
          },
          {
            "name": "bbox2offsetDims",
            "comment": "",
            "type": "Diagrams.Geom.BBox -> Diagrams.Geom.OffsetDimsBox"
          },
          {
            "name": "directionAngle",
            "comment": " Given a direction, return an angle in radians. ",
            "type": "Diagrams.Geom.Direction -> Float"
          },
          {
            "name": "invertTrans",
            "comment": "",
            "type": "Diagrams.Geom.Transform -> Diagrams.Geom.Transform"
          },
          {
            "name": "lerp",
            "comment": " linear interpolation. To map x from interval (imin, imax) to (omin, omax), use:\n\n    lerp (omin, omax) (imin, imax) x\n\n",
            "type": "( Float, Float ) -> ( Float, Float ) -> Float -> Float"
          },
          {
            "name": "magnitude",
            "comment": "",
            "type": "Diagrams.Geom.Point -> Float"
          },
          {
            "name": "pointAdd",
            "comment": "",
            "type": "Diagrams.Geom.Point -> Diagrams.Geom.Point -> Diagrams.Geom.Point"
          },
          {
            "name": "pointInside",
            "comment": "",
            "type": "Diagrams.Geom.Point -> Diagrams.Geom.OffsetDimsBox -> Bool"
          },
          {
            "name": "pointNegate",
            "comment": "",
            "type": "Diagrams.Geom.Point -> Diagrams.Geom.Point"
          },
          {
            "name": "pointSubtract",
            "comment": "",
            "type": "Diagrams.Geom.Point -> Diagrams.Geom.Point -> Diagrams.Geom.Point"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Diagrams.FillStroke",
        "comment": " Construct fills and strokes for diagrams.\n\n# Types\n@docs FillStroke, FillStyle\n\n# Constructors\n@docs justFill, justStroke, fillAndStroke, invisible, justSolidFill, withAlpha, defaultStroke, halfStrokeWidth\n",
        "aliases": [
          {
            "name": "FillStroke",
            "comment": "",
            "args": [],
            "type": "{ fill : Maybe.Maybe Diagrams.FillStroke.FillStyle , stroke : Maybe.Maybe Graphics.Collage.LineStyle }"
          }
        ],
        "types": [
          {
            "name": "FillStyle",
            "comment": " literally a copy of Graphics.Collage.FillStyle, cuz it's no longer exported ",
            "args": [],
            "cases": [
              [
                "Solid",
                [
                  "Color.Color"
                ]
              ],
              [
                "Texture",
                [
                  "String"
                ]
              ],
              [
                "Grad",
                [
                  "Color.Gradient"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "defaultStroke",
            "comment": "",
            "type": "Graphics.Collage.LineStyle"
          },
          {
            "name": "fillAndStroke",
            "comment": "",
            "type": "Diagrams.FillStroke.FillStyle -> Graphics.Collage.LineStyle -> Diagrams.FillStroke.FillStroke"
          },
          {
            "name": "halfStrokeWidth",
            "comment": "",
            "type": "Diagrams.FillStroke.FillStroke -> Float"
          },
          {
            "name": "invisible",
            "comment": "",
            "type": "Diagrams.FillStroke.FillStroke"
          },
          {
            "name": "justFill",
            "comment": "",
            "type": "Diagrams.FillStroke.FillStyle -> Diagrams.FillStroke.FillStroke"
          },
          {
            "name": "justSolidFill",
            "comment": "",
            "type": "Color.Color -> Diagrams.FillStroke.FillStroke"
          },
          {
            "name": "justStroke",
            "comment": "",
            "type": "Graphics.Collage.LineStyle -> Diagrams.FillStroke.FillStroke"
          },
          {
            "name": "withAlpha",
            "comment": "",
            "type": "Float -> Color.Color -> Color.Color"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "vilterp/elm-html-extra",
    "version": "1.0.1",
    "docs": [
      {
        "name": "Html.Events.Extra",
        "comment": " Additional event handlers for html.\n\n# Text Input helpers\n@docs onInput\n\n# Event decoders\n* TODO: `key`\n* TODO: `code`\n* TODO: `KeyEvent`, `keyEvent`\n@docs charCode\n\n# Typed event decoders\n@docs targetValueFloat, targetValueInt, targetValueMaybe, targetValueMaybeFloat, targetValueMaybeInt\n@docs targetValueFloatParse, targetValueIntParse, targetValueMaybeFloatParse, targetValueMaybeIntParse\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "charCode",
            "comment": " Character code for key board events.\nThis is being deprecated, but support for DOM3 Keyboard events is not yet present in most browsers.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Char)"
          },
          {
            "name": "onInput",
            "comment": " Return an [`input`](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevent handler which passes along that event's `event.target.value` string.\n",
            "type": "Signal.Address a -> (String -> a) -> Html.Attribute"
          },
          {
            "name": "targetValueFloat",
            "comment": " Floating-point target value.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "targetValueFloatParse",
            "comment": " Parse a floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder Float"
          },
          {
            "name": "targetValueInt",
            "comment": " Integer target value.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "targetValueIntParse",
            "comment": " Parse an integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder Int"
          },
          {
            "name": "targetValueMaybe",
            "comment": " String or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe String)"
          },
          {
            "name": "targetValueMaybeFloat",
            "comment": " Floating-point or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
          },
          {
            "name": "targetValueMaybeFloatParse",
            "comment": " Parse an optional floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
          },
          {
            "name": "targetValueMaybeInt",
            "comment": " Integer or empty target value.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          },
          {
            "name": "targetValueMaybeIntParse",
            "comment": " Parse an optional integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.\n",
            "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Html.Attributes.Extra",
        "comment": " Additional attributes for html\n\n# Inputs\n@docs valueAsFloat, valueAsInt\n\n# Semantic web\n@docs role\n\n# Meter element\n@docs low, high, optimum\n\n# Media element\n@docs volume\n\n# Custom Attributes\n@docs stringProperty\n@docs boolProperty\n@docs floatProperty\n@docs intProperty\n\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "boolProperty",
            "comment": " Create arbitrary bool *properties*.\n",
            "type": "String -> Bool -> Html.Attribute"
          },
          {
            "name": "floatProperty",
            "comment": " Create arbitrary floating-point *properties*.\n",
            "type": "String -> Float -> Html.Attribute"
          },
          {
            "name": "high",
            "comment": " The lower numeric bound of the high end of the measured range, used with the meter element.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "intProperty",
            "comment": " Create arbitrary integer *properties*.\n",
            "type": "String -> Int -> Html.Attribute"
          },
          {
            "name": "low",
            "comment": " The upper numeric bound of the low end of the measured range, used with the meter element.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "optimum",
            "comment": " This attribute indicates the optimal numeric value, used with the meter element.\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "role",
            "comment": " Used to annotate markup languages with machine-extractable semantic information about the purpose of an element.\nSee the [official specs](http://www.w3.org/TR/role-attribute/).\n",
            "type": "String -> Html.Attribute"
          },
          {
            "name": "stringProperty",
            "comment": " Create arbitrary string *properties*.\n",
            "type": "String -> String -> Html.Attribute"
          },
          {
            "name": "valueAsFloat",
            "comment": " Uses `valueAsNumber` to update an input with a floating-point value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that a floating point value will not necessarily overwrite the contents on an input element.\n\n    valueAsFloat 2.5 -- e.g. will not change the displayed value for input showing \"2.5000\"\n    valueAsFloat 0.4 -- e.g. will not change the displayed value for input showing \".4\"\n\n",
            "type": "Float -> Html.Attribute"
          },
          {
            "name": "valueAsInt",
            "comment": " Uses `valueAsNumber` to update an input with an integer value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that an integer value will not necessarily overwrite the contents on an input element.\n\n    valueAsInt 18 -- e.g. will not change the displayed value for input showing \"00018\"\n\n",
            "type": "Int -> Html.Attribute"
          },
          {
            "name": "volume",
            "comment": " Audio volume, starting from 0.0 (silent) up to 1.0 (loudest).\n",
            "type": "Float -> Html.Attribute"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "vilterp/elm-pretty-print",
    "version": "1.0.1",
    "docs": [
      {
        "name": "PrettyPrint.Util",
        "comment": "\n@docs bracket\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bracket",
            "comment": " For when you want an open marker, an indented portion (by the given indent),\nand a close marker ",
            "type": "Int -> ( List Html.Attribute, String ) -> PrettyPrint.Doc -> ( List Html.Attribute, String ) -> PrettyPrint.Doc"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "PrettyPrint",
        "comment": " Based on [Wadler's paper][wadler]\n\nPerhaps some of the primitives and combinators from\n[Daan Leijen's Haskell library][leijen] which builds on it could be added.\n\n[wadler]: http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf\n[leijen]: https://hackage.haskell.org/package/wl-pprint-1.2/docs/Text-PrettyPrint-Leijen.html\n\n# Constructors\n@docs Doc, empty, concat, nest, text, line\n\n# Combinators\n@docs group\n\n# Render\n@docs prettyHtml, prettyString\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Doc",
            "comment": "",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "concat",
            "comment": "",
            "type": "PrettyPrint.Doc -> PrettyPrint.Doc -> PrettyPrint.Doc"
          },
          {
            "name": "empty",
            "comment": "",
            "type": "PrettyPrint.Doc"
          },
          {
            "name": "group",
            "comment": " Specify that the Doc should be printed without newlines if it fits in the\navailable space, or without them if it doesn't ",
            "type": "PrettyPrint.Doc -> PrettyPrint.Doc"
          },
          {
            "name": "line",
            "comment": " Line break ",
            "type": "PrettyPrint.Doc"
          },
          {
            "name": "nest",
            "comment": " Indent the given doc by the given number of spaces. ",
            "type": "Int -> PrettyPrint.Doc -> PrettyPrint.Doc"
          },
          {
            "name": "prettyHtml",
            "comment": " Pretty print the document to HTML which fits within the\nmax width (in characters; font size up to you) ",
            "type": "Int -> PrettyPrint.Doc -> Html.Html"
          },
          {
            "name": "prettyString",
            "comment": " Pretty print the document to string which fits within the\nmax width (in characters) ",
            "type": "Int -> PrettyPrint.Doc -> String"
          },
          {
            "name": "text",
            "comment": "",
            "type": "List Html.Attribute -> String -> PrettyPrint.Doc"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "vito/elm-ansi",
    "version": "7.0.1",
    "docs": [
      {
        "name": "Ansi.Log",
        "comment": " Log interprets a stream of text and ANSI escape codes.\n\n@docs init, update, view\n\n@docs Model, LineDiscipline, Line, Chunk, CursorPosition, Style\n",
        "aliases": [
          {
            "name": "Chunk",
            "comment": " A blob of text paired with the style that was configured at the time.\n",
            "args": [],
            "type": "{ text : String, style : Ansi.Log.Style }"
          },
          {
            "name": "CursorPosition",
            "comment": " The coordinate in the window where text will be printed.\n",
            "args": [],
            "type": "{ row : Int, column : Int }"
          },
          {
            "name": "Line",
            "comment": " A list of arbitrarily-sized chunks of output.\n",
            "args": [],
            "type": "( List Ansi.Log.Chunk, Int )"
          },
          {
            "name": "Model",
            "comment": " Model is populated by parsing ANSI character sequences and escape codes\nvia `update`.\n\n* `lines` contains all of the output that's been parsed\n* `position` is the current position of the cursor\n* `style` is the style to be applied to any text that's printed\n* `remainder` is a partial ANSI escape sequence left around from an incomplete\n  segment from the stream\n",
            "args": [],
            "type": "{ lineDiscipline : Ansi.Log.LineDiscipline , lines : Array.Array Ansi.Log.Line , position : Ansi.Log.CursorPosition , savedPosition : Maybe.Maybe Ansi.Log.CursorPosition , style : Ansi.Log.Style , remainder : String }"
          },
          {
            "name": "Style",
            "comment": " The current presentation state for any text that's printed.\n",
            "args": [],
            "type": "{ foreground : Maybe.Maybe Ansi.Color , background : Maybe.Maybe Ansi.Color , bold : Bool , faint : Bool , italic : Bool , underline : Bool , blink : Bool , inverted : Bool }"
          }
        ],
        "types": [
          {
            "name": "LineDiscipline",
            "comment": " How to interpret linebreaks.\n\n* `Raw`: interpret `\\n` as just `\\n`, i.e. move down a line, retaining the\n  cursor column\n* `Cooked`: interpret `\\n` as `\\r\\n`, i.e. move down a line and go to the first\n  column\n",
            "args": [],
            "cases": [
              [
                "Raw",
                []
              ],
              [
                "Cooked",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "init",
            "comment": " Construct an empty model.\n",
            "type": "Ansi.Log.LineDiscipline -> Ansi.Log.Model"
          },
          {
            "name": "update",
            "comment": " Parse and interpret a chunk of ANSI output.\n\nTrailing partial ANSI escape codes will be prepended to the chunk in the next\ncall to `update`.\n",
            "type": "String -> Ansi.Log.Model -> Ansi.Log.Model"
          },
          {
            "name": "view",
            "comment": " Render the model's logs as HTML.\n\nWraps everything in <pre>, with a <div> for each Line, and <span> with styling\nand classes for each Chunk.\n\nThe `span` elements will have the following attributes:\n\n* `style=\"font-weight: bold|normal\"`\n* `class=\"ansi-COLOR-fg ansi-COLOR-bg ansi-bold\"`\n\n...where each class is optional, and `COLOR` is one of:\n\n* `black`\n* `red`\n* `green`\n* `yellow`\n* `blue`\n* `magenta`\n* `cyan`\n* `white`\n* `bright-black`\n* `bright-red`\n* `bright-green`\n* `bright-yellow`\n* `bright-blue`\n* `bright-magenta`\n* `bright-cyan`\n* `bright-white`\n\nIf the chunk is inverted, the `-fg` and `-bg` classes will have their colors\nswapped. If the chunk is bold, the `ansi-bold` class will be present.\n",
            "type": "Ansi.Log.Model -> Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Ansi",
        "comment": " This library primarily exposes the `parse` function and the types that it\nwill yield.\n\n@docs parse, parseInto\n\n@docs Action, Color, EraseMode\n",
        "aliases": [],
        "types": [
          {
            "name": "Action",
            "comment": " The events relevant to interpreting the stream.\n\n* `Print` is a chunk of text which should be interpreted with the style implied\n  by the preceding actions (i.e. `[SetBold True, Print \"foo\"]`) should yield a\n  bold `foo`\n* `Remainder` is a partial ANSI escape sequence, returned at the end of the\n  actions if it was cut off. The next string passed to `parse` should have this\n  prepended to it.\n* The rest are derived from their respective ANSI escape sequences.\n",
            "args": [],
            "cases": [
              [
                "Print",
                [
                  "String"
                ]
              ],
              [
                "Remainder",
                [
                  "String"
                ]
              ],
              [
                "SetForeground",
                [
                  "Maybe.Maybe Ansi.Color"
                ]
              ],
              [
                "SetBackground",
                [
                  "Maybe.Maybe Ansi.Color"
                ]
              ],
              [
                "SetBold",
                [
                  "Bool"
                ]
              ],
              [
                "SetFaint",
                [
                  "Bool"
                ]
              ],
              [
                "SetItalic",
                [
                  "Bool"
                ]
              ],
              [
                "SetUnderline",
                [
                  "Bool"
                ]
              ],
              [
                "SetBlink",
                [
                  "Bool"
                ]
              ],
              [
                "SetInverted",
                [
                  "Bool"
                ]
              ],
              [
                "Linebreak",
                []
              ],
              [
                "CarriageReturn",
                []
              ],
              [
                "CursorUp",
                [
                  "Int"
                ]
              ],
              [
                "CursorDown",
                [
                  "Int"
                ]
              ],
              [
                "CursorForward",
                [
                  "Int"
                ]
              ],
              [
                "CursorBack",
                [
                  "Int"
                ]
              ],
              [
                "CursorPosition",
                [
                  "Int",
                  "Int"
                ]
              ],
              [
                "CursorColumn",
                [
                  "Int"
                ]
              ],
              [
                "EraseDisplay",
                [
                  "Ansi.EraseMode"
                ]
              ],
              [
                "EraseLine",
                [
                  "Ansi.EraseMode"
                ]
              ],
              [
                "SaveCursorPosition",
                []
              ],
              [
                "RestoreCursorPosition",
                []
              ]
            ]
          },
          {
            "name": "Color",
            "comment": " The colors applied to the foreground/background.\n",
            "args": [],
            "cases": [
              [
                "Black",
                []
              ],
              [
                "Red",
                []
              ],
              [
                "Green",
                []
              ],
              [
                "Yellow",
                []
              ],
              [
                "Blue",
                []
              ],
              [
                "Magenta",
                []
              ],
              [
                "Cyan",
                []
              ],
              [
                "White",
                []
              ],
              [
                "BrightBlack",
                []
              ],
              [
                "BrightRed",
                []
              ],
              [
                "BrightGreen",
                []
              ],
              [
                "BrightYellow",
                []
              ],
              [
                "BrightBlue",
                []
              ],
              [
                "BrightMagenta",
                []
              ],
              [
                "BrightCyan",
                []
              ],
              [
                "BrightWhite",
                []
              ]
            ]
          },
          {
            "name": "EraseMode",
            "comment": " Method to erase the display or line.\n",
            "args": [],
            "cases": [
              [
                "EraseToBeginning",
                []
              ],
              [
                "EraseToEnd",
                []
              ],
              [
                "EraseAll",
                []
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "parse",
            "comment": " Convert an arbitrary String of text into a sequence of actions.\n\nIf the input string ends with a partial ANSI escape sequence, it will be\nyielded as a `Remainder` action, which should then be prepended to the next\ncall to `parse`.\n",
            "type": "String -> List Ansi.Action"
          },
          {
            "name": "parseInto",
            "comment": " Update a structure with actions parsed out of the given string.\n",
            "type": "a -> (Ansi.Action -> a -> a) -> String -> a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "w0rm/elm-slice-show",
    "version": "2.0.0",
    "docs": [
      {
        "name": "SliceShow",
        "comment": " This module helps you start your SliceShow application.\n# Start your Application\n@docs SliceShow, Config, init, show, setDimensions, setHash, setView, setUpdate, setInputs\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Slideshow Config type ",
            "args": [
              "a",
              "b"
            ],
            "type": "SliceShow.Protected.Protected (SliceShow.PrivateConfig a b)"
          },
          {
            "name": "SliceShow",
            "comment": " SliceShow app, exposes html signal and tasks signal ",
            "args": [],
            "type": "{ html : Signal.Signal Html.Html , tasks : Signal.Signal (Task.Task Effects.Never ()) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "init",
            "comment": " Init Model from the list of slides ",
            "type": "List (SliceShow.Slide.Slide a) -> SliceShow.Config a b"
          },
          {
            "name": "setDimensions",
            "comment": " Set initial dimensions taken from port ",
            "type": "( Int, Int ) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "setHash",
            "comment": " Set initial hash taken from port ",
            "type": "String -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "setInputs",
            "comment": " Set inputs for the custom content ",
            "type": "List (Signal.Signal b) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "setUpdate",
            "comment": " Set update for the custom content ",
            "type": "(b -> a -> ( a, Effects.Effects b )) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "setView",
            "comment": " Set view for the custom content ",
            "type": "(Signal.Address b -> a -> Html.Html) -> SliceShow.Config a b -> SliceShow.Config a b"
          },
          {
            "name": "show",
            "comment": " Start the SliceShow with your `slides`:\n    app = show (init slides)\n    main = app.html\n    port tasks : Signal (Task.Task Never ())\n    port tasks = app.tasks\n",
            "type": "SliceShow.Config a b -> SliceShow.SliceShow"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "SliceShow.Slide",
        "comment": " This module helps you define a slide\n@docs Slide, slide\n",
        "aliases": [
          {
            "name": "Slide",
            "comment": " Slide type ",
            "args": [
              "a"
            ],
            "type": "SliceShow.Protected.Protected (SliceShow.SlideData.SlideData a)"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "slide",
            "comment": " Create new slide from a list of content items ",
            "type": "List (SliceShow.Content.Content a) -> SliceShow.Slide.Slide a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "SliceShow.Content",
        "comment": " This module helps you define Slide content\n@docs Content, item, container, custom, hide\n",
        "aliases": [
          {
            "name": "Content",
            "comment": " Content type ",
            "args": [
              "a"
            ],
            "type": "SliceShow.ContentData.ContentData a"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "container",
            "comment": " A group of content items ",
            "type": "(List Html.Html -> Html.Html) -> List (SliceShow.Content.Content a) -> SliceShow.Content.Content a"
          },
          {
            "name": "custom",
            "comment": " Custom content item ",
            "type": "a -> SliceShow.Content.Content a"
          },
          {
            "name": "hide",
            "comment": " Hide content ",
            "type": "SliceShow.Content.Content a -> SliceShow.Content.Content a"
          },
          {
            "name": "item",
            "comment": " Single content item ",
            "type": "Html.Html -> SliceShow.Content.Content a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "wernerdegroot/listzipper",
    "version": "1.0.1",
    "docs": [
      {
        "name": "List.Zipper",
        "comment": " A zipper for `List`.\n\n# The `Zipper` type\n@docs Zipper\n\n# Constructing a `Zipper`\n@docs fromList\n\n# Accessors\n@docs before, get, after, toList\n\n# Updating\n@docs updateBefore, update, updateAfter\n\n# Moving around\n@docs first, previous, next, last, find\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Zipper",
            "comment": " The `Zipper` type. ",
            "args": [
              "a"
            ],
            "cases": [
              [
                "Zipper",
                [
                  "List a",
                  "a",
                  "List a"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "after",
            "comment": " Returns all elements after the element the `Zipper` is focussed on ",
            "type": "List.Zipper.Zipper a -> List a"
          },
          {
            "name": "before",
            "comment": " Returns all elements before the element the `Zipper` is focussed on. ",
            "type": "List.Zipper.Zipper a -> List a"
          },
          {
            "name": "find",
            "comment": " Returns a `Zipper` focussed on the first element for which the predicate returns `True` (starting from a given `Zipper`). ",
            "type": "(a -> Bool) -> List.Zipper.Zipper a -> Maybe.Maybe (List.Zipper.Zipper a)"
          },
          {
            "name": "first",
            "comment": " Move the focus to the first element of the list. ",
            "type": "List.Zipper.Zipper a -> List.Zipper.Zipper a"
          },
          {
            "name": "fromList",
            "comment": " Construct a `Zipper` from a list. The `Zipper` will focus on the first element (if there is a first element). ",
            "type": "List a -> Maybe.Maybe (List.Zipper.Zipper a)"
          },
          {
            "name": "get",
            "comment": " Returns the element the `Zipper` is focussed on. ",
            "type": "List.Zipper.Zipper a -> a"
          },
          {
            "name": "last",
            "comment": " Move the focus to the last element of the list. ",
            "type": "List.Zipper.Zipper a -> List.Zipper.Zipper a"
          },
          {
            "name": "next",
            "comment": " Move the focus to the element after the element the `Zipper` is currently focussed on (if there is such an element). ",
            "type": "List.Zipper.Zipper a -> Maybe.Maybe (List.Zipper.Zipper a)"
          },
          {
            "name": "previous",
            "comment": " Move the focus to the element before the element the `Zipper` is currently focussed on (if there is such an element). ",
            "type": "List.Zipper.Zipper a -> Maybe.Maybe (List.Zipper.Zipper a)"
          },
          {
            "name": "toList",
            "comment": " Reconstruct the list. ",
            "type": "List.Zipper.Zipper a -> List a"
          },
          {
            "name": "update",
            "comment": " Updat the element the `Zipper` is focussed on. ",
            "type": "(a -> a) -> List.Zipper.Zipper a -> List.Zipper.Zipper a"
          },
          {
            "name": "updateAfter",
            "comment": " Update all elements after the element the `Zipper` is focussed on. ",
            "type": "(List a -> List a) -> List.Zipper.Zipper a -> List.Zipper.Zipper a"
          },
          {
            "name": "updateBefore",
            "comment": " Update all elements before the element the `Zipper` is focussed on. ",
            "type": "(List a -> List a) -> List.Zipper.Zipper a -> List.Zipper.Zipper a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "williamwhitacre/elm-encoding",
    "version": "1.1.0",
    "docs": [
      {
        "name": "Encoding.URL",
        "comment": " Support for URL encoding and decoding.\n\n# Standard URL Encoding\n@docs encode, decode\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "decode",
            "comment": " Proper URL decoding. ",
            "type": "String -> String"
          },
          {
            "name": "encode",
            "comment": " Proper URL encoding. ",
            "type": "String -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Encoding.Integral",
        "comment": " Encoding and decoding facilities for integral integrals. This is mostly intended for machine\nencodings, so there are no frills in place for pretty printing and the like. This is used by the\nEncoding.URL module.\n\n# Digits configurations.\n@docs hexDigits, octDigits, binDigits, decDigits\n\n# Arbitrary Encoding\n@docs encodeBasePadded, encodeBase\n\n# Encode With Padding\n@docs encodeHexPadded, encodeOctPadded, encodeBinPadded, encodeDecPadded\n\n# Encode\n@docs encodeHex, encodeOct, encodeBin, encodeDec\n\n# Arbitrary Decoding\n@docs decodeBase\n\n# Decode\n@docs decodeHex, decodeOct, decodeBin, decodeDec\n\n# Character Groups\n@docs digitChars, hexChars, octChars, binChars, decChars\n\n# Regex\n@docs regexSourceBase, regexSourceHex, regexSourceOct, regexSourceBin, regexSourceDec, regexBase, regexHex, regexOct, regexBin, regexDec\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "binChars",
            "comment": " List of characters appearing in binary numbers. ",
            "type": "List Char"
          },
          {
            "name": "binDigits",
            "comment": " Digits configuration for binary integrals. ",
            "type": "List String"
          },
          {
            "name": "decChars",
            "comment": " List of characters appearing in decimal numbers. ",
            "type": "List Char"
          },
          {
            "name": "decDigits",
            "comment": " Digits configuration for decimal integrals. ",
            "type": "List String"
          },
          {
            "name": "decodeBase",
            "comment": " Decode a integral using a given digits configuration. ",
            "type": "List String -> String -> Maybe.Maybe Int"
          },
          {
            "name": "decodeBin",
            "comment": " Decode a binary encoded integral using the default `binDigits` configuration. ",
            "type": "String -> Maybe.Maybe Int"
          },
          {
            "name": "decodeDec",
            "comment": " Decode a decimal encoded integral using the default `decDigits` configuration. ",
            "type": "String -> Maybe.Maybe Int"
          },
          {
            "name": "decodeHex",
            "comment": " Decode a hexadecimal encoded integral using the default `hexDigits` configuration. ",
            "type": "String -> Maybe.Maybe Int"
          },
          {
            "name": "decodeOct",
            "comment": " Decode an octal encoded integral using the default `octDigits` configuration. ",
            "type": "String -> Maybe.Maybe Int"
          },
          {
            "name": "digitChars",
            "comment": " A list of the unique digit characters possible in an integral with the given digits configuration. ",
            "type": "List String -> List Char"
          },
          {
            "name": "encodeBase",
            "comment": " Encode using a given digits configuration without padding. ",
            "type": "List String -> number -> String"
          },
          {
            "name": "encodeBasePadded",
            "comment": " Encode using a given digits configuration and minimum length padding. The remaining digits will\nbe taken up by zeroes. ",
            "type": "List String -> Int -> number -> String"
          },
          {
            "name": "encodeBin",
            "comment": " Encode a binary integral without padding using a the default `binDigits` configuration. ",
            "type": "number -> String"
          },
          {
            "name": "encodeBinPadded",
            "comment": " Encode a binary integral with padding using a the default `binDigits` configuration. ",
            "type": "Int -> number -> String"
          },
          {
            "name": "encodeDec",
            "comment": " Encode a decimal integral without padding using a the default `decDigits` configuration. ",
            "type": "number -> String"
          },
          {
            "name": "encodeDecPadded",
            "comment": " Encode a decimal integral with padding using a the default `decDigits` configuration. ",
            "type": "Int -> number -> String"
          },
          {
            "name": "encodeHex",
            "comment": " Encode a hexadecimal integral without padding using a the default `hexDigits` configuration. ",
            "type": "number -> String"
          },
          {
            "name": "encodeHexPadded",
            "comment": " Encode a hexadecimal integral with padding using a the default `hexDigits` configuration. ",
            "type": "Int -> number -> String"
          },
          {
            "name": "encodeOct",
            "comment": " Encode an octal integral without padding using a the default `octDigits` configuration. ",
            "type": "number -> String"
          },
          {
            "name": "encodeOctPadded",
            "comment": " Encode an octal integral with padding using a the default `octDigits` configuration. ",
            "type": "Int -> number -> String"
          },
          {
            "name": "hexChars",
            "comment": " List of characters appearing in hexadecimal numbers. ",
            "type": "List Char"
          },
          {
            "name": "hexDigits",
            "comment": " Digits configuration for hexadecimal integrals. ",
            "type": "List String"
          },
          {
            "name": "octChars",
            "comment": " List of characters appearing in octal numbers. ",
            "type": "List Char"
          },
          {
            "name": "octDigits",
            "comment": " Digits configuration for octal integrals. ",
            "type": "List String"
          },
          {
            "name": "regexBase",
            "comment": " Match an encoded integral using the given digits configuration. ",
            "type": "List String -> Regex.Regex"
          },
          {
            "name": "regexBin",
            "comment": " Match an encoded binary integral. ",
            "type": "Regex.Regex"
          },
          {
            "name": "regexDec",
            "comment": " Match an encoded decimal integral. ",
            "type": "Regex.Regex"
          },
          {
            "name": "regexHex",
            "comment": " Match an encoded hexadecimal integral. ",
            "type": "Regex.Regex"
          },
          {
            "name": "regexOct",
            "comment": " Match an encoded octal integral. ",
            "type": "Regex.Regex"
          },
          {
            "name": "regexSourceBase",
            "comment": " Regex that matches an encoded integral using the given digits configuration. ",
            "type": "List String -> String"
          },
          {
            "name": "regexSourceBin",
            "comment": " MRegex that matches an encoded binary integral. ",
            "type": "String"
          },
          {
            "name": "regexSourceDec",
            "comment": " MRegex that matches an encoded decimal integral. ",
            "type": "String"
          },
          {
            "name": "regexSourceHex",
            "comment": " MRegex that matches an encoded hexadecimal integral. ",
            "type": "String"
          },
          {
            "name": "regexSourceOct",
            "comment": " MRegex that matches an encoded octal integral. ",
            "type": "String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "williamwhitacre/elm-lexer",
    "version": "1.2.0",
    "docs": [
      {
        "name": "Lexer",
        "comment": " An easy to use lexer written using `Bogdanp/elm-combine` that provides a sufficient backbone for use\nwith LR(k) combinator generators, or as a standalone for simpler higher order pattern matching.\n\n# Types\n@docs Lexer, Lexeme, Class\n\n# Construction\n@docs lexer, class, parserClass, combinatorClass\n\n# Lexing\n@docs lex\n\n# Primitive\n@docs pattern, interpret\n\n",
        "aliases": [
          {
            "name": "Lexeme",
            "comment": " A lexeme, including the original string token, the interpreted lexeme, the index of\noccurrence, and the length. ",
            "args": [
              "lex"
            ],
            "type": "{ token : String, lexeme : lex, index : Int, length : Int }"
          }
        ],
        "types": [
          {
            "name": "Class",
            "comment": " A lexeme class, consisting of a regex pattern and a transducer that will interpret the token\nand spit out an associated lexeme. ",
            "args": [
              "lex"
            ],
            "cases": []
          },
          {
            "name": "Lexer",
            "comment": " A lexer. ",
            "args": [
              "lex"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "class",
            "comment": " Create a new lexeme class from a Javascript style regex and an function to interpret a lexeme\nfrom the matched token. ",
            "type": "String -> (String -> Result.Result (List String) lex) -> Lexer.Class lex"
          },
          {
            "name": "combinatorClass",
            "comment": " In the case that you wish to use a more advanced combinator in place of a pattern, you may do that\nwith this class. You can use this to create more powerful abstractions in your lexeme output.\n\n_DEPRECIATED_\n",
            "type": "Combine.Parser String -> (String -> Result.Result (List String) lex) -> Lexer.Class lex"
          },
          {
            "name": "interpret",
            "comment": " Interpret a token. ",
            "type": "Lexer.Class lex -> String -> Result.Result (List String) lex"
          },
          {
            "name": "lex",
            "comment": " Lex a string, producing a list of errors (if any) and a list of lexemes. ",
            "type": "Lexer.Lexer lex -> String -> ( List String, List (Lexer.Lexeme lex) )"
          },
          {
            "name": "lexer",
            "comment": " Create a lexer from a list of lexeme classes. ",
            "type": "List (Lexer.Class lex) -> Lexer.Lexer lex"
          },
          {
            "name": "parserClass",
            "comment": " Use a combinator parser directly. The form of the lexeme itself may be turing recognizable in\nthis case. In this sense you are no longer strictly \"lexing\", but the output still provides the\ntypical useful token metadata for Lexeme record list produced the top level alternation. ",
            "type": "Combine.Parser lex -> Lexer.Class lex"
          },
          {
            "name": "pattern",
            "comment": " Get the pattern of a class. Note that this will return the empty string in the case that a\ncombinator is used instead. ",
            "type": "Lexer.Class lex -> String"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "williamwhitacre/gigan",
    "version": "4.0.6",
    "docs": [
      {
        "name": "Gigan.Knowledge",
        "comment": " This module contains the \"Knowledge Base\" system, which is in essence a unique compromise between data binding\nand explicit fetching and writing.\n\nA Knowledge is datum whose state is concretely fuzzy because it must be retrieved from\nor synchronized with one or more remote services. The bulk of these functions are intended to be used together as a DSL\nthat provides very concise reductions and conditionally executed contingencies for bad data, as well as very\nsuccinct mapping from fuzzy knowledge states on to concrete views.\n\nIt is also possble to compose transformations and mapping\non to pending remote operation results, so that longer running asynchronous transformations (including fetching and manipulation)\ncan be composed as deeply as desired. The documentation is underway.\n\n# Definitions\n@docs Knowledge, KnowledgeBase, KnowledgeRecord, KnowledgeRecordStub, KnowledgeBaseDelta\n\n# Aliases for Knowledge of a KnowledgeBase or a KnowledgeRecord\n@docs BaseKnowledge, RecordKnowledge\n\n# Remote Synchronization\n@docs Remote, RemoteMap, RemoteConfig, RemoteMapConfig, QueryTask\n\n# Knowledge constructors\n@docs knowledgeOf, forbiddenKnowledge, pendingKnowledge, undecidedKnowledge, unknownKnowledge, voidKnowledge, knowledgeDo\n\n# Knowledge from Existing non-determinant Types\n@docs maybeOr, resultOr\n\n# Make Conditional Assumptions about Knowledge\n@docs assumeIf, assumeIfNot, assumeIfNow, assumeInCase, assumeInCaseNow, decideBy, doOperation, maybeKnownNow, reduceNotKnownNowTo, otherwise\n\n# Transforming Knowledge\n@docs therefore, within\n\n# Conditionally Dispatch Operations on Knowledge\n@docs dispatchIf, dispatchIfNot, dispatchInCase, dispatchInCaseNow\n\n# Basic Knowledge Predicates\n@docs isUnknown, isNotUnknown, isPending, isNotPending, isUndecided, isNotUndecided, isForbidden, isNotForbidden, isVoid, isNotVoid, isNil, isNotNil, isKnown, isNotKnown, isOperation, isNotOperation\n\n# Integrate Knowledge\n@docs knowledgeIntegrate, knowledgeQuery, knowledgeUpdate\n\n# Transforming Knowledge Base Deltas\n@docs baseDeltaMap, baseDeltaTherefore\n\n# Knowledge Base Operations\n@docs base, baseAt, baseDo, baseErrorHandler, baseIntegrate, baseMember, baseQuery, baseUpdate\n\n# Knowledge Record Operations\n@docs record, recordSet, recordAt, recordAtKey, recordBinding, recordContent, recordDo, recordErrorHandler, recordField, recordIntegrate, recordQuery, recordUpdate\n\n# Configuration\n@docs remoteConfig, remoteErrorConfig\n\n",
        "aliases": [
          {
            "name": "BaseKnowledge",
            "comment": " Knowledge of a KnowledgeBase. This adds basic support for nesting KnowledgeBase and KnowledgeBase\noperations using `within`, which approximates the active record pattern as well as I can in Elm so\nfar. ",
            "args": [
              "euser",
              "comparable",
              "v"
            ],
            "type": "Gigan.Knowledge.Knowledge (Gigan.Knowledge.KnowledgeBase euser comparable v)"
          },
          {
            "name": "KnowledgeBase",
            "comment": " A knowledge base has a dictionary of Knowledge. Use this to represent arbitrary collections of\nremote data with a uniform schema. You can support schemaless data with JSON, but that should really\nonly be done if you absolutely must, since it adds quite a bit of encoder/decoder overhead. ",
            "args": [
              "euser",
              "comparable",
              "v"
            ],
            "type": "{ base : Gigan.Knowledge.BaseImpl euser comparable v , deltas : Gigan.Knowledge.BaseImpl euser comparable v , deltaSink : Signal.Address (Gigan.Knowledge.BaseDeltaImpl euser comparable v) , config : Gigan.Knowledge.RemoteMapConfig euser comparable v }"
          },
          {
            "name": "KnowledgeBaseDelta",
            "comment": " This represents a change in Knowledge, a KnowledgeBase, or a KnowledgeRecord. ",
            "args": [
              "euser",
              "comparable",
              "v"
            ],
            "type": "Gigan.Knowledge.BaseDeltaImpl euser comparable v"
          },
          {
            "name": "KnowledgeRecord",
            "comment": " This is a wrapper for knowledge bases that are finite in size, and have a collection of\ndifferently typed fields. It is best for records which may only be partially known. A concrete\nexample of this would be a user's personal information, where everything they have hidden should\ncome back as `forbiddenKnowledge`. ",
            "args": [
              "euser",
              "userrecord",
              "comparable",
              "v"
            ],
            "type": "{ kbase : Gigan.Knowledge.KnowledgeBase euser comparable v , writes : Dict.Dict comparable (Gigan.Knowledge.Knowledge euser v -> userrecord -> userrecord) , reads : Dict.Dict comparable (userrecord -> Gigan.Knowledge.Knowledge euser v) , record : userrecord }"
          },
          {
            "name": "KnowledgeRecordStub",
            "comment": " A knowledge record stub represents how to manage a knowledge record, with the record itself\nomitted. This type is outputted by the `record` function. Setting this for the first time using\n`recordSet` will result in a proper KnowledgeRecord.  ",
            "args": [
              "euser",
              "userrecord",
              "comparable",
              "v"
            ],
            "type": "{ kbase : Gigan.Knowledge.KnowledgeBase euser comparable v , writes : Dict.Dict comparable (Gigan.Knowledge.Knowledge euser v -> userrecord -> userrecord) , reads : Dict.Dict comparable (userrecord -> Gigan.Knowledge.Knowledge euser v) }"
          },
          {
            "name": "QueryTask",
            "comment": " QueryTask is an opaque task that executes a Remote or a RemoteMap and sends the resulting deltas\nto the configured address for the Knowledge, KnowledgeBase, or KnowledgeRecord. ",
            "args": [
              "never"
            ],
            "type": "Task.Task never ()"
          },
          {
            "name": "RecordKnowledge",
            "comment": " Knowledge of a KnowledgeRecord. This adds support for nesting KnowledgeRecord and KnowledgeRecord\noperations using `within`, which approximates the active record pattern as well as I can in Elm so\nfar. ",
            "args": [
              "euser",
              "userrecord",
              "comparable",
              "v"
            ],
            "type": "Gigan.Knowledge.Knowledge (Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v)"
          },
          {
            "name": "Remote",
            "comment": " This is a Task which represents some kind of synchronization with remote data. It can also easily\nbe used for long running arbitrary computations, too. It produces a Gigan Error or a Knowledge. ",
            "args": [
              "euser",
              "v"
            ],
            "type": "Task.Task (Gigan.Error.Error euser) (Gigan.Knowledge.Knowledge euser v)"
          },
          {
            "name": "RemoteConfig",
            "comment": " Configures address to send remote results to, and an error handler for promoting Errors in to\nKnowledge. The default error handler simply promotes errors to Undecided. ",
            "args": [
              "euser",
              "v"
            ],
            "type": "{ address : Signal.Address (Gigan.Knowledge.Knowledge euser v) , errorHandler : Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v }"
          },
          {
            "name": "RemoteMap",
            "comment": " This is a dictionary which represents a collection of Remote tasks which will be executed against\na KnowledgeBase or a KnowledgeRecord. ",
            "args": [
              "euser",
              "comparable",
              "v"
            ],
            "type": "Dict.Dict comparable (Gigan.Knowledge.Remote euser v)"
          },
          {
            "name": "RemoteMapConfig",
            "comment": " Configures an address per key to send remote results to, and an error handler per key for\npromoting Errors in to Knowledge. The default error handler simply promotes errors to Undecided.\nThe default configuration proxies a single address which accepts a KnowledgeBaseDelta. ",
            "args": [
              "euser",
              "comparable",
              "v"
            ],
            "type": "{ addressOf : comparable -> Signal.Address (Gigan.Knowledge.Knowledge euser v) , errorHandlerOf : comparable -> Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v }"
          }
        ],
        "types": [
          {
            "name": "Knowledge",
            "comment": " A knowledge item. ",
            "args": [
              "euser",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "assumeIf",
            "comment": " If some predicate `satisfies` is satisfied by the knowledge `kb`, then we make the following\nassumption. If this knowledge is an operation, then the assumption will be applied to\nthe result of that operation. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Bool) -> v -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "assumeIfNot",
            "comment": " Negation of assumeIf. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Bool) -> v -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "assumeIfNow",
            "comment": " If the predicate is satisfied, replace the knowledge with some known value. ",
            "type": "(Gigan.Knowledge.Knowledge euser v' -> Bool) -> v' -> Gigan.Knowledge.Knowledge euser v' -> Gigan.Knowledge.Knowledge euser v'"
          },
          {
            "name": "assumeInCase",
            "comment": " If `possibleAssumption` yields some value `value'` when a Knowledge is applied, then\nthat value is used to overwrite the knowledge with an assumption `Known value'`, otherwise the\nKnowledge is unaffected. If this knowledge is an operation, then the assumption will be applied\nconditionally to the result of that operation. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Maybe.Maybe v) -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "assumeInCaseNow",
            "comment": " This is the counterpart to assumeInCase which does _not_ abstract away whether or not this is\nsome pending remote operation. Concretely, we want this in the case that we are doing model to view\nreductions because a pending operation should still have some concrete visible representation, such\nas an ajax loader symbol. Of course, one should still correctly call *Integrate so that an operation\nis always a `pendingKnowledge` by the time it gets past the `stage` step. ",
            "type": "(Gigan.Knowledge.Knowledge euser v' -> Maybe.Maybe v') -> Gigan.Knowledge.Knowledge euser v' -> Gigan.Knowledge.Knowledge euser v'"
          },
          {
            "name": "base",
            "comment": " Create a new knowledge base. This takes an address which accepts knowledge base deltas in sequence.\nCurrently, you are responsible for dropping irrelevant deltas. ",
            "type": "Signal.Address (Gigan.Knowledge.KnowledgeBaseDelta euser comparable v) -> Gigan.Knowledge.KnowledgeBase euser comparable v"
          },
          {
            "name": "baseAt",
            "comment": " Get the knowledge at a given key from the knowledge base. ",
            "type": "comparable -> Gigan.Knowledge.KnowledgeBase euser comparable v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "baseDeltaMap",
            "comment": " Transform a knowledge base delta using any knowledge primitive that does not change the knowledge\ntype. This is the meat and potatoes of KnowledgeBase. This can be used for operations and any of the\nreductions. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v) -> Gigan.Knowledge.KnowledgeBaseDelta euser comparable v -> Gigan.Knowledge.KnowledgeBaseDelta euser comparable v"
          },
          {
            "name": "baseDeltaTherefore",
            "comment": " Transform a knowledge base delta using `therefore`. This is very useful for mapping a signal of\ndeltas on to multiple knowledge types, then maintaining several synchronized knowledge bases very\nefficiently. ",
            "type": "(v -> v') -> Gigan.Knowledge.KnowledgeBaseDelta euser comparable v -> Gigan.Knowledge.KnowledgeBaseDelta euser comparable v'"
          },
          {
            "name": "baseDo",
            "comment": " Use one of the many knowledge manipulation primitives on the knowledge at a particular location in a knowledge base. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v) -> comparable -> Gigan.Knowledge.KnowledgeBase euser comparable v -> Gigan.Knowledge.KnowledgeBase euser comparable v"
          },
          {
            "name": "baseErrorHandler",
            "comment": " Add an error handler to a knowledge base to replace the default error handler. The default error\nhandler simply promotes errors to undecidedKnowledge. You may way to give a definition in your own\nerror handler that distinguishes between undecidedKnowledge and forbiddenKnowledge. No promotion to\nforbiddenKnowledge is given by default because there is not sane default behavior that covers\nthe general case. ",
            "type": "(Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v) -> Gigan.Knowledge.KnowledgeBase euser comparable v -> Gigan.Knowledge.KnowledgeBase euser comparable v"
          },
          {
            "name": "baseIntegrate",
            "comment": " Transform all new operations in to `pendingKnowledge` across the knowledge base. Note that this\nwill only traverse the knowledge which has changed since the last call to `baseIntegrate`, so this\nscales quite well to large knowledge bases. ",
            "type": "Gigan.Knowledge.KnowledgeBase euser comparable v -> Gigan.Knowledge.KnowledgeBase euser comparable v"
          },
          {
            "name": "baseMember",
            "comment": " Determine if there is some knowledge at a given key that is not unknown. ",
            "type": "comparable -> Gigan.Knowledge.KnowledgeBase euser comparable v -> Bool"
          },
          {
            "name": "baseQuery",
            "comment": " For every new operation in the knowledge base, get and aggregate the remote tasks, producing\nJust an opaque query task or Nothing in the case that no operations need to be done. Note that this\nwill only traverse the knowledge which has changed since the last call to `baseIntegrate`, so this\nscales quite well to large knowledge bases. ",
            "type": "Gigan.Knowledge.KnowledgeBase euser comparable v -> Maybe.Maybe (Gigan.Knowledge.QueryTask never)"
          },
          {
            "name": "baseUpdate",
            "comment": " Apply a knowledge base delta to the knowledge base. You are responsible for determining the order\nof the updates. ",
            "type": "Gigan.Knowledge.KnowledgeBaseDelta euser comparable v -> Gigan.Knowledge.KnowledgeBase euser comparable v -> Gigan.Knowledge.KnowledgeBase euser comparable v"
          },
          {
            "name": "decideBy",
            "comment": " Offer a decision on some `undecidedKnowledge kb`. Undecided knowledge is the result of some\nproblem which may or may not be in control of the client. Such knowledge may be the result of\nanything that can result in an error in your application. If this knowledge is an operation, then\nthe assumption will be applied to the result of that operation.\n",
            "type": "(Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v) -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "dispatchIf",
            "comment": " If some predicate `satisfies` is satisfied by the knowledge `kb`, then we make the following\nremote operation. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Bool) -> Gigan.Knowledge.Remote euser v -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "dispatchIfNot",
            "comment": " Negation of dispatchIf ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Bool) -> Gigan.Knowledge.Remote euser v -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "dispatchInCase",
            "comment": " If `possibleOperation` yields some Remote task `remote` when a Knowledge is applied, then\nthe knowledge is replaced by the knowledge `doOperation remote`, otherwise the knowledge is\nunaffected. If this knowledge is an operation, then the result of that operation will be used as\nthe input to the provided function. In this way, operations can be chained arbitrarily deep,\nbut in a manner that helpfully abstracts away whether we are still waiting or already have the\nresult in the composition. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Maybe.Maybe (Gigan.Knowledge.Remote euser v)) -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "dispatchInCaseNow",
            "comment": " This is the counterpart to dispatchInCase which does _not_ abstract away whether or not this is\nsome pending remote operation. This is useful in the case that we don't care what's going on right\nnow. We'd rather issue some operation, regardless. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Maybe.Maybe (Gigan.Knowledge.Remote euser v)) -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "doOperation",
            "comment": " Define knowledge contingent on the future completion of some arbitrary operation. This is how\nwe hook up knowledge bases to sources of content. ",
            "type": "Gigan.Knowledge.Remote euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "forbiddenKnowledge",
            "comment": " The knowledge could not be obtained because the user of your program should not be allowed to\naccess it. This carries an error. To resolve `undecidedKnowledge`, one should use assumptions and or\noperations to map it back in to sensible knowledge. ",
            "type": "Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "isForbidden",
            "comment": " True if the knowledge is forbiddenKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isKnown",
            "comment": " True if the knowledge is known. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNil",
            "comment": " True if the knowledge is unknownKnowledge or voidKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotForbidden",
            "comment": " False if the knowledge is forbiddenKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotKnown",
            "comment": " False if the knowledge is known. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotNil",
            "comment": " False if the knowledge is unknownKnowledge or voidKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotOperation",
            "comment": " False if the knowledge is a pending operation. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotPending",
            "comment": " False if the knowledge is pendingKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotUndecided",
            "comment": " False if the knowledge is undecidedKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotUnknown",
            "comment": " False if the knowledge is unknownKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isNotVoid",
            "comment": " False if the knowledge is voidKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isOperation",
            "comment": " True if the knowledge is a pending operation. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isPending",
            "comment": " True if the knowledge is pendingKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isUndecided",
            "comment": " True if the knowledge is undecidedKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isUnknown",
            "comment": " True if the knowledge is unknownKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "isVoid",
            "comment": " True if the knowledge is voidKnowledge. ",
            "type": "Gigan.Knowledge.Knowledge euser v -> Bool"
          },
          {
            "name": "knowledgeDo",
            "comment": " Do something to a knowledge. There is an ignored comparable argument here. This merely exists so\nthat the form of `knowledgeDo` is isomorphic to the form of `baseDo` and `recordDo`. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v) -> comparable -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "knowledgeIntegrate",
            "comment": " Given some configuration and a knowledge, produce a pendingKnowledge in the case that the\nknowledge is an operation, otherwise give the same knowledge. ",
            "type": "Gigan.Knowledge.RemoteConfig euser v -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "knowledgeOf",
            "comment": " A known thing. Carries a value of type `v` for `Knowledge euser v`. `knowledgeOf` anything can be\ninterpreted using `therefore` contingent upon it being a concrete `knowledgeOf` something. As described\nelsewhere, `therefore` has no effect on knowledge that satisfies `isNotKnown`. ",
            "type": "v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "knowledgeQuery",
            "comment": " Given some configuration and a knowledge, produce Just an opaque query task or Nothing\nwhen the knowledge is an operation or the knowledge is not an operation respectively. ",
            "type": "Gigan.Knowledge.RemoteConfig euser v -> Gigan.Knowledge.Knowledge euser v -> Maybe.Maybe (Gigan.Knowledge.QueryTask never)"
          },
          {
            "name": "knowledgeUpdate",
            "comment": " Update knowledge with an incoming delta. Again, we ignore the comparable component of the\nknowledge base delta, but accept it to simplify the types. ",
            "type": "Gigan.Knowledge.KnowledgeBaseDelta euser comparable v -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "maybeKnownNow",
            "comment": " If a knowledge is known, then give Just it's value, otherwise Nothing. ",
            "type": "Gigan.Knowledge.Knowledge euser v' -> Maybe.Maybe v'"
          },
          {
            "name": "maybeOr",
            "comment": " Map Maybe in to Knowledge. Since Maybe doesn't carry errors, semantically Nothing means\n\"definitely nothing\". For this reason, you may want to use it something like this:\n\n    maybeOr voidKnowledge myPossibleThing\n\nIf you implement an operation that uses some existing code that returns a Maybe, that would be a\ngood place to use this. Just be mindful that this _does not give you the power to handle errors_.\nResult should always be preferred in the case that there is any chance of things going wrong, and\n`resultOr` should definitely see a lot more mileage in a production app that deals with lots of\nunpredictable data.\n",
            "type": "Gigan.Knowledge.Knowledge euser v -> Maybe.Maybe v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "otherwise",
            "comment": " Preferred shorthand for `reduceNotKnownNowTo`. ",
            "type": "v' -> Gigan.Knowledge.Knowledge euser v' -> v'"
          },
          {
            "name": "pendingKnowledge",
            "comment": " Something on which knowledge is still pending. The most conforming way to use this is to not\nuse it directly. Calling *Integrate should be done after every update sequence during staging, which\nresults in all operations in a knowledge base being replaced with pendingKnowledge. If you stick to\nthis, the presence of pendingKnowledge is a guarantee you'll be getting a delta back about it\nassuming your wiring's not broken. ",
            "type": "Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "record",
            "comment": " Create a knowledge record stub. The content of the knowledge base will be bound to the content\nof the record according to the `recordField` definitions you give. A knowledge record stub is not\nyet completed with a concrete userrecord. Use this in your definitions. Create instances of your\nknowledge record type by using `recordSet` on the result of `record`. ",
            "type": "Signal.Address (Gigan.Knowledge.KnowledgeBaseDelta euser comparable v) -> Gigan.Knowledge.KnowledgeRecordStub euser userrecord comparable v"
          },
          {
            "name": "recordAt",
            "comment": " Retrieve a knowledge from the knowledge record using some getter. Avoiding stringly-typed nonsense that you can't protect from\nruntime errors is generally a good idea. Since records have an enumerable set of contant field names, it makes more sense to use\nthis method to get from records. This won't compile if it's wrong. For example:\n\n    recordAt .myFieldThatWillNotCompileIfItDoesntExist myRecord\n\n",
            "type": "(userrecord -> Gigan.Knowledge.Knowledge euser v) -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "recordAtKey",
            "comment": " Retrieve a knowledge at the given key. If you do this, you may as well be using knowledge base.\nHowever, you will get the benefit of console debug messages in the case that you try to access a\nfield that doesn't exist. ",
            "type": "comparable -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "recordBinding",
            "comment": " Get the underlying knowledge base of a knowledge record. ",
            "type": "Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.KnowledgeBase euser comparable v"
          },
          {
            "name": "recordContent",
            "comment": " Get the current userrecord content of a knowledge record. ",
            "type": "Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> userrecord"
          },
          {
            "name": "recordDo",
            "comment": " This is the knowledge record equivalent to baseDo for knowledge bases, using the same\nsemantics. ",
            "type": "(Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v) -> comparable -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v"
          },
          {
            "name": "recordErrorHandler",
            "comment": " Add an error handler to a `KnowledgeRecord` or a `KnowledgeRecordStub`. Refer to\n`baseErrorHandler` for a more detailed description of how adding error handlers works. ",
            "type": "(Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v) -> { k | kbase : Gigan.Knowledge.KnowledgeBase euser comparable v } -> { k | kbase : Gigan.Knowledge.KnowledgeBase euser comparable v }"
          },
          {
            "name": "recordField",
            "comment": " Map a record field to a key in the knowledge base. The types in the record can be any odd combination\ngiven that the userrecord type can be anything. However, all fields in the record must have a mapping to\nand from some knowledge type which can represent any of the fields. This is not as tricky as one might\ninitially surmise. Your userrecord type should have a corresponding tag union type with a tag for each\nrecord field. To make this clean, you should have a bijection between the record fields and the tags. Here's\nan example:\n\n    type Fields = FooField Int | BarField String\n\n    type alias MyRecord =\n      { foo : Int\n      , bar : String\n      }\n\n    myRecordFields =\n      recordField (\\k r -> { r | foo = k }) (.foo >> FooField) \"foo\"\n      >> recordField (\\k r -> { r | bar = k }) (.bar >> BarField) \"bar\"\n\n    .....\n\n    myKnowledgeRecord =\n      record address { foo = 42, bar = \"answer\" } |> myRecordFields\n\n",
            "type": "(Gigan.Knowledge.Knowledge euser v -> userrecord -> userrecord) -> (userrecord -> Gigan.Knowledge.Knowledge euser v) -> comparable -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v"
          },
          {
            "name": "recordIntegrate",
            "comment": " This is the knowledge record equivalent to baseIntegrate for knowledge bases, using the same\nsemantics. ",
            "type": "Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v"
          },
          {
            "name": "recordQuery",
            "comment": " This is the knowledge record equivalent to baseQuery for knowledge bases, using the same\nsemantics. ",
            "type": "Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Maybe.Maybe (Gigan.Knowledge.QueryTask never)"
          },
          {
            "name": "recordSet",
            "comment": " Completely replace the userrecord instance contained in a knowledge record or fill out a\nknowledge record stub for the first time. The second usage is likely to be more common. ",
            "type": "userrecord -> { k | kbase : Gigan.Knowledge.KnowledgeBase euser comparable v, writes : Dict.Dict comparable (Gigan.Knowledge.Knowledge euser v -> userrecord -> userrecord), reads : Dict.Dict comparable (userrecord -> Gigan.Knowledge.Knowledge euser v) } -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v"
          },
          {
            "name": "recordUpdate",
            "comment": " This is the knowledge record equivalent to baseUpdate for knowledge bases, using the same\nsemantics. ",
            "type": "Gigan.Knowledge.KnowledgeBaseDelta euser comparable v -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v -> Gigan.Knowledge.KnowledgeRecord euser userrecord comparable v"
          },
          {
            "name": "reduceNotKnownNowTo",
            "comment": " This is the special reduction we use to collapse away the Knowledge type, determining a final\nvalue to work with. While more pedantically named, I find it leaves something to be desired\naesthetically, so I use `otherwise` for the same task. ",
            "type": "v' -> Gigan.Knowledge.Knowledge euser v' -> v'"
          },
          {
            "name": "remoteConfig",
            "comment": " Specifies a RemoteConfig with which to close off a remote operation by sending it's results or an\nerror describing it's failure to the given address. ",
            "type": "Signal.Address (Gigan.Knowledge.Knowledge euser v) -> Gigan.Knowledge.RemoteConfig euser v"
          },
          {
            "name": "remoteErrorConfig",
            "comment": " Adds an optional special error handler for resolving totally unexpected errors. A final error\nhandler should be provided such that any errors not trapped by a decideBy application still\ngracefully recover. By default, a valid knowledge is produced from any error by promoting that\nError to Undecided. ",
            "type": "(Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v) -> Gigan.Knowledge.RemoteConfig euser v -> Gigan.Knowledge.RemoteConfig euser v"
          },
          {
            "name": "resultOr",
            "comment": " Map Result in to Knowledge. You'll need this if you want to roll your own knowledge base remotes,\nwhich is quite easy to do due to the pluggability of the knowledge module. The function specifies how\nto interpret errors. This is important in the case that you have to deal with permissions systems.\nSome of your errors might be due to access denial, others might be due to unintentional errors. Use\nforbiddenKnowledge and undecidedKnowledge respectively for these cases. ",
            "type": "(Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v) -> Result.Result (Gigan.Error.Error euser) v -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "therefore",
            "comment": " transform the value itself, if known, producing a knowledge of some new value type value'.\ntherefores are composed on to the results of remote operations if they represent known knowledge or\nfurther operations to attempt. This allows us to compose async processing stages before knowledge\nis finally reduced to a displayed or usable result as deeply and interchangably as we want to,\nprovided that we always use \"therefore\" _first_ to lift the knowledge type out before listing\na sequence of simple or contingent reductions. ",
            "type": "(v -> v') -> Gigan.Knowledge.Knowledge euser v -> Gigan.Knowledge.Knowledge euser v'"
          },
          {
            "name": "undecidedKnowledge",
            "comment": " The knowledge could not be obtained because something went wrong. This carries an error. To\nresolve `undecidedKnowledge`, one should use assumptions and or operations to map it back in to\nsensible knowledge. ",
            "type": "Gigan.Error.Error euser -> Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "unknownKnowledge",
            "comment": " Somthing that's totally unknown. This is the default result of retrieving an element that has\nno representation in a knowledge base, but also has obvious other uses as a placeholder that is\ntypely more powerful than Result or Maybe for production data management. ",
            "type": "Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "voidKnowledge",
            "comment": " Something that is _known not to exist_. This is not the same as unknownKnowledge or\nundecidedKnowledge. Void knowledge should arise from a remote operation which verified that there\nis definitely nothing there, so it is not an assumption. ",
            "type": "Gigan.Knowledge.Knowledge euser v"
          },
          {
            "name": "within",
            "comment": " This is for nesting operations on knowledge bases. For example:\n\n    -- this'll write something at the patch foo.bar if \"bar\" is void.\n    baseDo (within <| baseDo (inquireIf isVoid myBarWriter) \"bar\") \"foo\" myBase\n\nThis code will work on a knowledge base of base knowledges, so that's a nested record. The active\nrecord pattern can be approximated like this, and I've found it extremely handy.\n\n",
            "type": "(sub -> sub) -> Gigan.Knowledge.Knowledge euser sub -> Gigan.Knowledge.Knowledge euser sub"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Gigan.Stem",
        "comment": " This module builds a more usable state machine snapshot with the Elm Architecture in mind on\ntop of the Gigan Core.\n\n# Definition\n@docs Stem\n\n# Constructor\n@docs stem\n\n# Get and Set the Model\n@docs stemModel, stemReplaceModel\n\n# Using Stems\n@docs stemDispatch, stemDispatchAs, stemDispatchment, stemDispatchmentAs, stemPresent, stemPresentAs, stemStage, stemStageAs, stemUpdate, stemIntegrate\n\n# Get and Set the Model of Maybe Stems\n@docs maybeStemModel, maybeStemReplaceModel\n\n# Using Maybe Stems\n@docs maybeStemDispatch, maybeStemDispatchAs, maybeStemDispatchment, maybeStemDispatchmentAs, maybeStemPresent, maybeStemPresentAs, maybeStemStage, maybeStemStageAs, maybeStemUpdate, maybeStemIntegrate\n\n",
        "aliases": [
          {
            "name": "Stem",
            "comment": " A Stem is an instantaneous description of some model associated with an OrbiterInput (see Core)\nthat specifies how it should be updated, staged and presented. ",
            "args": [
              "a",
              "b",
              "c",
              "bad"
            ],
            "type": "{ input : Gigan.Core.OrbiterInput a b c bad , state : Gigan.Core.OrbiterSnapshot a b bad }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "maybeStemDispatch",
            "comment": " ",
            "type": "Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe ( Gigan.Stem.Stem a b c bad, Gigan.Core.TaskDispatchment bad a )"
          },
          {
            "name": "maybeStemDispatchAs",
            "comment": " ",
            "type": "(List a -> List a') -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe ( Gigan.Stem.Stem a b c bad, Gigan.Core.TaskDispatchment bad a' )"
          },
          {
            "name": "maybeStemDispatchment",
            "comment": " ",
            "type": "Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Gigan.Core.TaskDispatchment bad a"
          },
          {
            "name": "maybeStemDispatchmentAs",
            "comment": " ",
            "type": "(List a -> List a') -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Gigan.Core.TaskDispatchment bad a'"
          },
          {
            "name": "maybeStemIntegrate",
            "comment": " ",
            "type": "Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Stem.Stem a b c bad)"
          },
          {
            "name": "maybeStemModel",
            "comment": " ",
            "type": "Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe b"
          },
          {
            "name": "maybeStemPresent",
            "comment": " ",
            "type": "Signal.Address (List a) -> Time.Time -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Core.ViewOutput a c bad)"
          },
          {
            "name": "maybeStemPresentAs",
            "comment": " ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Core.ViewOutput a' c bad)"
          },
          {
            "name": "maybeStemReplaceModel",
            "comment": " ",
            "type": "b -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Stem.Stem a b c bad)"
          },
          {
            "name": "maybeStemStage",
            "comment": " ",
            "type": "Signal.Address (List a) -> Time.Time -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Stem.Stem a b c bad)"
          },
          {
            "name": "maybeStemStageAs",
            "comment": " ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Stem.Stem a b c bad)"
          },
          {
            "name": "maybeStemUpdate",
            "comment": " ",
            "type": "List a -> Time.Time -> Maybe.Maybe (Gigan.Stem.Stem a b c bad) -> Maybe.Maybe (Gigan.Stem.Stem a b c bad)"
          },
          {
            "name": "stem",
            "comment": " Create a stem from an OrbiterInput ",
            "type": "Gigan.Core.OrbiterInput a b c bad -> Gigan.Stem.Stem a b c bad"
          },
          {
            "name": "stemDispatch",
            "comment": " Dispatch the tasks of a Stem. This function is in the depreciated family of `stemDispatch*`\nfunctions. Use `stemDispatchment*` and `stemIntegrate` instead. ",
            "type": "Gigan.Stem.Stem a b c bad -> ( Gigan.Stem.Stem a b c bad, Gigan.Core.TaskDispatchment bad a )"
          },
          {
            "name": "stemDispatchAs",
            "comment": " Dispatch the tasks of a Stem using some transducer to translate the action list. This function\nis in the depreciated family of `stemDispatch*` functions. Use `stemDispatchment*` and\n`stemIntegrate` instead. ",
            "type": "(List a -> List a') -> Gigan.Stem.Stem a b c bad -> ( Gigan.Stem.Stem a b c bad, Gigan.Core.TaskDispatchment bad a' )"
          },
          {
            "name": "stemDispatchment",
            "comment": " Get the currently waiting dispatchment. ",
            "type": "Gigan.Stem.Stem a b c bad -> Gigan.Core.TaskDispatchment bad a"
          },
          {
            "name": "stemDispatchmentAs",
            "comment": " Get the currently waiting task dispatchment, but apply some action type transformation. ",
            "type": "(List a -> List a') -> Gigan.Stem.Stem a b c bad -> Gigan.Core.TaskDispatchment bad a'"
          },
          {
            "name": "stemIntegrate",
            "comment": " Remove the currently waiting task dispatchment. This should be done only after retrieving any\npossibly waiting dispatchment. ",
            "type": "Gigan.Stem.Stem a b c bad -> Gigan.Stem.Stem a b c bad"
          },
          {
            "name": "stemModel",
            "comment": " Get the model of a stem. ",
            "type": "Gigan.Stem.Stem a b c bad -> b"
          },
          {
            "name": "stemPresent",
            "comment": " Run the present function from the configured OrbiterInput of the Stem on the Stem's current model to produce a ViewOutput, which includes the an element of the Stem's view type, and a TaskDispatchment for any desired asynchronous tasks.\nThis takes an address for actions to be sent to, the current time, and the Stem. ",
            "type": "Signal.Address (List a) -> Time.Time -> Gigan.Stem.Stem a b c bad -> Gigan.Core.ViewOutput a c bad"
          },
          {
            "name": "stemPresentAs",
            "comment": " Same as stemPresent, but with a transformation to apply to action lists before they are sent to the address. ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Gigan.Stem.Stem a b c bad -> Gigan.Core.ViewOutput a' c bad"
          },
          {
            "name": "stemReplaceModel",
            "comment": " Create a stem with a different model from a replacement model and an original stem. ",
            "type": "b -> Gigan.Stem.Stem a b c bad -> Gigan.Stem.Stem a b c bad"
          },
          {
            "name": "stemStage",
            "comment": " Run the update function from the configured OrbiterInput of the Stem on the Stem's current model to produce a new model and dispatch any asynchronous tasks desired.\nThis takes an address for actions to be sent to, the current time, and the Stem. ",
            "type": "Signal.Address (List a) -> Time.Time -> Gigan.Stem.Stem a b c bad -> Gigan.Stem.Stem a b c bad"
          },
          {
            "name": "stemStageAs",
            "comment": " Same as stemStage, but with a transformation to apply to action lists before they are sent to the address. ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Gigan.Stem.Stem a b c bad -> Gigan.Stem.Stem a b c bad"
          },
          {
            "name": "stemUpdate",
            "comment": " Run the update function from the configured OrbiterInput of the Stem on the Stem's current model to produce a new model and dispatch any asynchronous tasks desired.\nThis takes a list of actions, the current time, and the Stem. ",
            "type": "List a -> Time.Time -> Gigan.Stem.Stem a b c bad -> Gigan.Stem.Stem a b c bad"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Gigan.Error",
        "comment": " This module contains the internal error type for Gigan and some helper functions for\nconstructing errors.\n\n# Definitions\n@docs DecodingFailure, Error, ErrorType\n\n# Constructors\n@docs reportError, reportErrorAndLog, unknownError, unknownErrorAndLog, decoderError, decoderErrorAndLog, userError, userErrorAndLog, decodingFailure\n\n",
        "aliases": [
          {
            "name": "DecodingFailure",
            "comment": " Represents a decoding task which failed. ",
            "args": [],
            "type": "{ source : String, reason : String }"
          },
          {
            "name": "Error",
            "comment": " Error record. ",
            "args": [
              "euser"
            ],
            "type": "{ error : Gigan.Error.ErrorType euser, desc : String }"
          }
        ],
        "types": [
          {
            "name": "ErrorType",
            "comment": " Type of error that occurred in Gigan. ",
            "args": [
              "euser"
            ],
            "cases": [
              [
                "UnknownError",
                []
              ],
              [
                "DecoderError",
                [
                  "Gigan.Error.DecodingFailure"
                ]
              ],
              [
                "UserError",
                [
                  "euser"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "decoderError",
            "comment": " Report a problem decoding something. ",
            "type": "String -> Gigan.Error.DecodingFailure -> Gigan.Error.Error euser"
          },
          {
            "name": "decoderErrorAndLog",
            "comment": " decoderError and log to console. ",
            "type": "String -> Gigan.Error.DecodingFailure -> Gigan.Error.Error euser"
          },
          {
            "name": "decodingFailure",
            "comment": " Given the source string on which decoding was attempted and the reason for the failure,\ngive a DecodingFailure ",
            "type": "String -> String -> Gigan.Error.DecodingFailure"
          },
          {
            "name": "reportError",
            "comment": " Report an error. Given an ErrorType and a String describing what went wrong humanly, create\nan error record.  ",
            "type": "String -> Gigan.Error.ErrorType euser -> Gigan.Error.Error euser"
          },
          {
            "name": "reportErrorAndLog",
            "comment": " reportError and log to console.  ",
            "type": "String -> Gigan.Error.ErrorType euser -> Gigan.Error.Error euser"
          },
          {
            "name": "unknownError",
            "comment": " Report an error, the nature of which is not known. ",
            "type": "String -> Gigan.Error.Error euser"
          },
          {
            "name": "unknownErrorAndLog",
            "comment": " unknownError and log to console. ",
            "type": "String -> Gigan.Error.Error euser"
          },
          {
            "name": "userError",
            "comment": " Report a user defined error. ",
            "type": "String -> euser -> Gigan.Error.Error euser"
          },
          {
            "name": "userErrorAndLog",
            "comment": " userError and log to console. ",
            "type": "String -> euser -> Gigan.Error.Error euser"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Gigan.Core",
        "comment": " The main application scaffolding. You can write a really pretty top level like this:\n\n    myOrbiter : OrbiterOutput MyAction MyModel Layout.Item Error\n    myOrbiter =\n      myProgram\n        `withSequenceInputs`\n          [ someVeryImportantBrowserEnvironmentInput\n          , someOtherOutsideSignal\n          ]\n        `orbitsWithWork`\n          (computeTask doMyComplicatedStartupWork withThisData)\n      +--> (it'sErrorTap myErrorHandler)\n      +--> itself\n\n\n    main : Signal Graphics.Element.Element\n    main = Layout.fromItem <~ myOrbiter.view'\n\n\n    port sink : Signal (Task z ())\n    port sink = sieve myOrbiter\n\n\n# Definitions\n@docs AgentStatus, ComputedResult, ComputedSuccess, OrbiterInput, OrbiterOutput, OrbiterSnapshot, OrbiterTap, OrbiterTask, TaskDispatchment, UpdatedModel, ViewOutput\n\n# Define Orbiter Programs\n@docs defProgram, defProgram'\n\n# Run Orbiter Programs\n@docs orbits, orbitsWithWork, withInputs, withLazySequenceInputs, withSequenceInputs, sieve, (+-->)\n\n# UpdatedModel and ViewOutput Manipulation\n@docs updated, presented, withTasks, withDispatchment, withChildren, viewOutputTask\n\n# Dispatch Actions and Errors\n@docs actionTask, actionTaskAsync, errorTask, computeTask, computedSuccess, computedSuccessAsync, noActions, nilTask\n\n# Intercept and Route Action and Error Outputs\n@docs itself, itselfAsync, it'sErrorTap, thisAddress, thisAddressAsync, thisForwardAddress, thisForwardAddressAsync, thisErrorTap, thisForwardTap, thisTap\n\n# Handling Tasks and TaskDispatchment\n@docs combineDispatchments, collapseTasks, dispatchTasks, dispatchmentHasWork, dispatchmentTask, promoteDispatchment\n\n# Manipulate Orbiter Snapshots\n@docs orbiterSnapshot, orbiterSnapshotAddDispatchment, orbiterSnapshotDispatch, orbiterSnapshotPresent, orbiterSnapshotStage, orbiterSnapshotUpdate, performCycle\n\n# Orbiter Task Agents\n@docs orbiterAgentSuccess, orbiterAgentFailure, orbiterAgent, orbiterSuccessAgent, orbiterFailureAgent, orbiterBinaryAgent, orbiterBlindAgent, orbiterNilAgent, orbiterResultAgent, ignoreError\n\n",
        "aliases": [
          {
            "name": "ComputedResult",
            "comment": " A ComputedResult is a Result which may be a ComputedSuccess or some error type on failure. This\nis used as the output type of the function passed to a `computeTask`. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "Result.Result bad (Gigan.Core.ComputedSuccess a)"
          },
          {
            "name": "ComputedSuccess",
            "comment": " This is the success type of an OrbiterTask. It consists of a sequence of actions to execute, and\na tag saying whether we want the actions executed all at once, or spread out asynchronously. This\nshould be treated as opaque; use the constructors `computedSuccess` and `computedSuccessAsync`. ",
            "args": [
              "a"
            ],
            "type": "{ sequence : List a, method : Gigan.Core.FeedbackMethod }"
          },
          {
            "name": "OrbiterInput",
            "comment": " This is the input type for Orbiter. It can be seen as roughly analogous to StartApp's Config\ntype, but carries the full configuration and input in one. This should be considered opaque. ",
            "args": [
              "a",
              "b",
              "c",
              "bad"
            ],
            "type": "{ inputs : Lazy.List.LazyList (Signal.Signal (Lazy.List.LazyList a)) , model0 : b , present : Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.ViewOutput a c bad , stage : Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad , update : a -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad }"
          },
          {
            "name": "OrbiterOutput",
            "comment": " This is the output of an Orbiter program. This is not intended to be opaque. Any part of the\noutput structure is up for grabs. I do not reccomend usage of the lazyAddress externally.\n\n    view'     Signal with the current view.\n    model'    Signal with the current model.\n    now       Signal with the most recent execution time.\n    actions   Signal with the most recently atomically executed action list.\n    tasks     Signal with the most recent OrbiterTask output.\n    address   The address of the Orbiter program's Mailbox.\n\n",
            "args": [
              "a",
              "b",
              "c",
              "bad"
            ],
            "type": "{ view' : Signal.Signal c , model' : Signal.Signal b , now : Signal.Signal Time.Time , actions : Signal.Signal (List a) , tasks : Signal.Signal (Gigan.Core.OrbiterTask bad a) , address : Signal.Address (List a) , lazyAddress : Signal.Address (Lazy.List.LazyList a) }"
          },
          {
            "name": "OrbiterSnapshot",
            "comment": " This represents an instantaneous description of an Orbiter program. It consists of the current\nmodel and a possible TaskDispatchment. This should be treated as opaque. ",
            "args": [
              "a",
              "b",
              "bad"
            ],
            "type": "{ model' : b, dispatchment : Gigan.Core.TaskDispatchment bad a }"
          },
          {
            "name": "OrbiterTap",
            "comment": " OrbiterTap is an alias for functions that transform OrbiterTasks by routing their actions to\nan address. You will probably not need to directly provide an OrbiterTap function, as the built in\nfamily of taps should be sufficient for just about any application. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "Signal.Address (List a) -> Gigan.Core.OrbiterTask bad a -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "OrbiterTask",
            "comment": " A task with a ComputedSuccess result. These are used as the output task type of the Orbiter. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "Task.Task bad (Gigan.Core.ComputedSuccess a)"
          },
          {
            "name": "TaskDispatchment",
            "comment": " This is an opaque type representing an ordered list of tasks to execute. This is quite similar\nto Effects batching. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "{ taskExec : Lazy.List.LazyList (Gigan.Core.OrbiterTask bad a) }"
          },
          {
            "name": "UpdatedModel",
            "comment": " Represents the output of the `update` and `stage` functions configured in the OrbiterInput.\nThis type exists so that TaskDispatchments and OrbiterTasks can be cleanly included in the output\nof `stage` and `update` without the need to return an ugly pair or embed anything in the model. ",
            "args": [
              "a",
              "b",
              "bad"
            ],
            "type": "{ dispatchment : Gigan.Core.TaskDispatchment bad a, model' : b }"
          },
          {
            "name": "ViewOutput",
            "comment": " Represents the output of the `present` function configured in the OrbiterInput.\nThis type exists so that TaskDispatchments and OrbiterTasks can be cleanly included in the output\nof `present` without the need to return an ugly pair or embed anything in the model. ",
            "args": [
              "a",
              "c",
              "bad"
            ],
            "type": "{ dispatchment : Gigan.Core.TaskDispatchment bad a, view' : c }"
          }
        ],
        "types": [
          {
            "name": "AgentStatus",
            "comment": " Represents the status of a given OrbiterAgent. Orbiter agents are a way of transforming the\nresults of arbitrary tasks in to actions and errors for the program to consume. ",
            "args": [
              "bad",
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "+-->",
            "comment": " While it may be a case of \"your stupid infix operator\", I think it makes writing taps nicer\nsimply because I see `+---> itself` and I think \"oh, it has an edge going to itself\". This is one\nof those instances where the abstraction can actually help with comprehension because it acually looks\nlike a directed graph edge. See the main example for usage. _NOTE: you can use (|>) to be more\nstandard._ ",
            "type": "Gigan.Core.OrbiterOutput a b c bad -> (Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad) -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "actionTask",
            "comment": " An OrbiterTask that carries a list of actions to execute atomically.\n\nNote that a tap which is explicitly from the `*Async` family of taps will override this behavior,\ninstead producing the same behavior as actionTaskAsync. For that reason, asynchronous taps should\nmainly be used for one-way data flows that are not dependent on ordering. ",
            "type": "List a -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "actionTaskAsync",
            "comment": " An OrbiterTask that carries a list of actions to execute asynchronously, meaning they may be\ninterspersed with other feedback and inputs. ",
            "type": "List a -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "collapseTasks",
            "comment": " Collapse two action tasks by executing them sequentially and appending their resulting action\noutputs. ",
            "type": "Gigan.Core.OrbiterTask bad a -> Gigan.Core.OrbiterTask bad a -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "combineDispatchments",
            "comment": " Combine two TaskDispatchment instances. This appends the task list of the second to the task\nlist of the first. ",
            "type": "Gigan.Core.TaskDispatchment bad a -> Gigan.Core.TaskDispatchment bad a -> Gigan.Core.TaskDispatchment bad a"
          },
          {
            "name": "computeTask",
            "comment": " An OrbiterTask that obtains some ComputedResult from user provided data and a user provided\nfunction, which is invoked during execution of the task. This just gives us basic support for\ndeferred computations. ",
            "type": "(data -> Gigan.Core.ComputedResult bad a) -> data -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "computedSuccess",
            "comment": " Produce a normal ComputedSuccess from a list of actions. These actions will be sent all at once,\nand thus will be executed atomically. ",
            "type": "List a -> Gigan.Core.ComputedSuccess a"
          },
          {
            "name": "computedSuccessAsync",
            "comment": " Produce an asynchronous ComputedSuccess from a list of actions. These actions will be sent\none by one from sequential tasks, and thus their execution will be spread out with no guarantee that\nthe sequence of actions will be executed atomically.\n\nIf you need to run a list of a few thousand actions,\nand it is safe for those actions to be interspersed with other actions, you may be looking at a very\ngood use case for this function. Note also that this will never preempt an action list that is sent\nat once using `computeSuccess`, which is a product of how the Elm runtime works. ",
            "type": "List a -> Gigan.Core.ComputedSuccess a"
          },
          {
            "name": "defProgram",
            "comment": " defProgram is the old declaration form for defining OrbiterInput. It is simpler, and does not\nsupport the `stage` function. Internally this uses the new form, but it has been left in for\ntwo reasons. One is of course backwards compatibility, but sometimes you just don't need that\nextra firepower, in which case it is mere clutter. ",
            "type": "(Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.ViewOutput a c bad) -> (a -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad) -> b -> Gigan.Core.OrbiterInput a b c bad"
          },
          {
            "name": "defProgram'",
            "comment": " defProgram' is the complete way to define an OrbiterInput. OrbiterInput is configured with\nthree functions. `update` and `present` should be familiar to users of StartApp, except for the\nfact that they always have the current time. `stage` is a special addition which allows one to\nuse the program Mailbox address from a context in which the model can be updated.\n\nThe use case for `stage` which inspired it's existence is as follows: suppose you have a really\nbig model with a really, really big view. There is enough data that keen algorithms and data\nstructures, as well as avoiding redundant computations during presentation becomes a neccessity.\n\nYou can then structure your application as follows. Represent all these components as instances of\nStem. From inside `stage`, you can present _only the ones that will or should actually be seen_,\nand cache the results in the model. Since you can create an updated model from here, you can save\nanything that may be later needed during presentation.\n\n`stage` is called only once after an entire list of actions is executed. If you get a list of 1000\nactions, you can still guarantee the work in stage will be done only once, before presentation.\n_The primary reason stage has access to the address is because it enables you to call present on\nany sub components ahead of time for caching purposes._ ",
            "type": "(Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.ViewOutput a c bad) -> (Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad) -> (a -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad) -> b -> Gigan.Core.OrbiterInput a b c bad"
          },
          {
            "name": "dispatchTasks",
            "comment": " Turn a list of OrbiterTasks in to a TaskDispatchment. ",
            "type": "List (Gigan.Core.OrbiterTask bad a) -> Gigan.Core.TaskDispatchment bad a"
          },
          {
            "name": "dispatchmentHasWork",
            "comment": " True iff the TaskDispatchment has at least one OrbiterTask. ",
            "type": "Gigan.Core.TaskDispatchment bad a -> Bool"
          },
          {
            "name": "dispatchmentTask",
            "comment": " Turn a TaskDispatchment in to an OrbiterTask. Doing this will make things a lot more opaque,\nso ask yourself if it is absolutely neccessary first. Mainly this is included for completeness. ",
            "type": "Gigan.Core.TaskDispatchment bad a -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "errorTask",
            "comment": " An OrbiterTask that carries an error. ",
            "type": "bad -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "ignoreError",
            "comment": " This makes any error in to noActions. ",
            "type": "bad -> List a"
          },
          {
            "name": "it'sErrorTap",
            "comment": " Same semantics as `itself`, but for errors. Error taps do not have an asynchronous alternative. ",
            "type": "(bad -> List a) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "itself",
            "comment": " This is the most essential tap for almost any application. It routes the actions resulting from your TaskDispatchment output back to the program's main address. ",
            "type": "Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "itselfAsync",
            "comment": " Same as itself, but execute action lists asynchronously, such that they may be interspersed with other action lists. ",
            "type": "Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "nilTask",
            "comment": " An OrbiterTask that does nothing and produces noActions. ",
            "type": "Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "noActions",
            "comment": " A list of no actions. ",
            "type": "List a"
          },
          {
            "name": "orbiterAgent",
            "comment": " The basic orbiter agent. Takes two functions, one of which transforms a successful result in to\nan AgentStatus, and one which does the same for task failure results. This transforms an arbitrary\ntask in to an OrbiterTask. Notice that we can easily succeed anyway even if the task failed, or vice\nversa, because we get an AgentStatus which may be successful or failing either way. This means you\ncan skip error handling altogether if you already know what to do with the failure from the scope\nyou're in; you can simply map the failure on to some actions that perform an appropriate\ncontingency. ",
            "type": "(x -> Gigan.Core.AgentStatus bad a) -> (y -> Gigan.Core.AgentStatus bad a) -> Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbiterAgentFailure",
            "comment": " Failed OrbiterAgent output. ",
            "type": "bad -> Gigan.Core.AgentStatus bad a"
          },
          {
            "name": "orbiterAgentSuccess",
            "comment": " Successful OrbiterAgent output. ",
            "type": "List a -> Gigan.Core.AgentStatus bad a"
          },
          {
            "name": "orbiterBinaryAgent",
            "comment": " A binary orbiter agent. This does not process any of the results, but simply always gives the\nsuccesful AgentStatus (the first one) on task success, otherwise it gives the failed AgentStatus. ",
            "type": "Gigan.Core.AgentStatus bad a -> Gigan.Core.AgentStatus bad a -> Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbiterBlindAgent",
            "comment": " If we don't care about the outcome of a task because it can't fail or produce a meaningful\nresult, we can just queue up something to do after it's done. This is perfect for using delay tasks. ",
            "type": "Gigan.Core.AgentStatus bad a -> Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbiterFailureAgent",
            "comment": " This is a combination of orbiterAgent and orbiterBinary agent which gives the successful agent\nstatus in the case of success, and processes failed results to get an AgentStatus otherwise . ",
            "type": "Gigan.Core.AgentStatus bad a -> (y -> Gigan.Core.AgentStatus bad a) -> Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbiterNilAgent",
            "comment": " No matter what, do nothing. This will get your task to run, but no kind of action or error\nfeedback will be produced. ",
            "type": "Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbiterResultAgent",
            "comment": " The other orbiter agents defined so far are less succinct because they take two arguments, one\nwhich applies to the success case and one which applies to the failure case. This one takes a single\nfunction which processes the task's outcome as a Result, and so is generally a bit shorter to write. ",
            "type": "(Result.Result y x -> Gigan.Core.AgentStatus bad a) -> Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbiterSnapshot",
            "comment": " Constructor for an OrbiterSnapshot. I reccomend using the Stem module instead of these functions. ",
            "type": "b -> Gigan.Core.TaskDispatchment bad a -> Gigan.Core.OrbiterSnapshot a b bad"
          },
          {
            "name": "orbiterSnapshotAddDispatchment",
            "comment": " Add a dispatchment to an OrbiterSnapshot. ",
            "type": "Gigan.Core.TaskDispatchment bad a -> Gigan.Core.OrbiterSnapshot a b bad -> Gigan.Core.OrbiterSnapshot a b bad"
          },
          {
            "name": "orbiterSnapshotDispatch",
            "comment": " Get the pending TaskDispatchment out of an OrbiterSnapshot and clear it from the snapshot in\none go. This gives an _ugly pair_. See the newer interface for this in Stem, and also see the way\nKnowledge works. It seems much better to separate this in to two stages. It leaves room for a mistake,\nwhich I was trying to avoid, but it's so much cleaner than way that it's worth it and actually\nleads to fewer mistakes as a result. ",
            "type": "Gigan.Core.OrbiterSnapshot a b bad -> ( Gigan.Core.OrbiterSnapshot a b bad , Gigan.Core.TaskDispatchment bad a )"
          },
          {
            "name": "orbiterSnapshotPresent",
            "comment": " Run the `present` phase on an OrbiterSnapshot, yielding a ViewOutput. ",
            "type": "{ k | present : Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.ViewOutput a c bad } -> Signal.Address (List a) -> Time.Time -> Gigan.Core.OrbiterSnapshot a b bad -> Gigan.Core.ViewOutput a c bad"
          },
          {
            "name": "orbiterSnapshotStage",
            "comment": " Run the `stage` phase on an OrbiterSnapshot. ",
            "type": "{ k | stage : Signal.Address (List a) -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad } -> Signal.Address (List a) -> Time.Time -> Gigan.Core.OrbiterSnapshot a b bad -> Gigan.Core.OrbiterSnapshot a b bad"
          },
          {
            "name": "orbiterSnapshotUpdate",
            "comment": " Run the `update` phase on an OrbiterSnapshot. ",
            "type": "{ k | update : a -> Time.Time -> b -> Gigan.Core.UpdatedModel a b bad } -> List a -> Time.Time -> Gigan.Core.OrbiterSnapshot a b bad -> Gigan.Core.OrbiterSnapshot a b bad"
          },
          {
            "name": "orbiterSuccessAgent",
            "comment": " This is a combination of orbiterAgent and orbiterBinary agent which processes successful results\nto get an AgentStatus, otherwise giving the failed agent status. ",
            "type": "(x -> Gigan.Core.AgentStatus bad a) -> Gigan.Core.AgentStatus bad a -> Task.Task y x -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "orbits",
            "comment": " Run an orbiter without any startup task.\n\n    orbits (myProgram `withSequenceInputs` [myInput, myInput2])\n\n",
            "type": "Gigan.Core.OrbiterInput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "orbitsWithWork",
            "comment": " This is the workhorse of Gigan.Core. Given an OrbiterInput and some starting OrbiterTask,\nrun the Orbiter program described by the input to give an OrbiterOutput. ",
            "type": "Gigan.Core.OrbiterInput a b c bad -> Gigan.Core.OrbiterTask bad a -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "performCycle",
            "comment": " Perform a full cycle on an OrbiterSnapshot. This looks like:\n\n      state\n      |> orbiterSnapshotUpdate input actions now\n      |> orbiterSnapshotStage input address now\n      |> orbiterSnapshotDispatch\n\ninternally. The point of performCycle is to be used in foldp, which it is inside orbitsWithWork\nand orbits (which really just calls orbitsWithWork with nilTask).\n",
            "type": "Gigan.Core.OrbiterInput a b c bad -> Signal.Address (List a) -> ( Time.Time, List a ) -> ( Gigan.Core.OrbiterSnapshot a b bad , Gigan.Core.TaskDispatchment bad a ) -> ( Gigan.Core.OrbiterSnapshot a b bad , Gigan.Core.TaskDispatchment bad a )"
          },
          {
            "name": "presented",
            "comment": " Give a ViewOutput from your view type, carrying an empty TaskDispatchment. ",
            "type": "c -> Gigan.Core.ViewOutput a c bad"
          },
          {
            "name": "promoteDispatchment",
            "comment": " Using some transformation function, create a TaskDispatchment with a different action type. ",
            "type": "(List a -> List a') -> Gigan.Core.TaskDispatchment bad a -> Gigan.Core.TaskDispatchment bad a'"
          },
          {
            "name": "sieve",
            "comment": " The sieve is the final stop for OrbiterOutput. This should be attached at a port to get your\ntasks running. ",
            "type": "Gigan.Core.OrbiterOutput a b c bad -> Signal.Signal (Task.Task z ())"
          },
          {
            "name": "thisAddress",
            "comment": " Route the resulting actions from your TaskDispatchments to some action list address. ",
            "type": "Signal.Address (List a) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "thisAddressAsync",
            "comment": " Same as thisAddress, but asynchronously as described above. ",
            "type": "Signal.Address (List a) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "thisErrorTap",
            "comment": " Transform any errors in to lists of actions, then route them to the address. ",
            "type": "Signal.Address (List a) -> (bad -> List a) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "thisForwardAddress",
            "comment": " Same as thisAddress, but with forwarding. ",
            "type": "Signal.Address target -> (List a -> target) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "thisForwardAddressAsync",
            "comment": " Same as thisForwardAddress, but asynchronously as described above. ",
            "type": "Signal.Address target -> (List a -> target) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "thisForwardTap",
            "comment": " Same as thisTap but uses Address forwarding to transform action lists in to some other target type\nfor your address. ",
            "type": "Gigan.Core.OrbiterTap bad a -> Signal.Address target -> (List a -> target) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "thisTap",
            "comment": " A tap defined using an OrbiterTap and some address. The OrbiterTasks that pass through this tap will be\nrouted to the given address. This is a bit lower level than is needed in most cases. ",
            "type": "Gigan.Core.OrbiterTap bad a -> Signal.Address (List a) -> Gigan.Core.OrbiterOutput a b c bad -> Gigan.Core.OrbiterOutput a b c bad"
          },
          {
            "name": "updated",
            "comment": " Give an UpdatedModel from a model, carrying an empty TaskDispatchment. ",
            "type": "b -> Gigan.Core.UpdatedModel a b bad"
          },
          {
            "name": "viewOutputTask",
            "comment": " Get an OrbiterTask from a ViewOutput. This is DEPRECIATED. Use TaskDispatchment wherever\npossible. ",
            "type": "Gigan.Core.ViewOutput a c bad -> Gigan.Core.OrbiterTask bad a"
          },
          {
            "name": "withChildren",
            "comment": " This takes a list of UpdatedModel or ViewOutput instances, and appends each one to the\nTaskDispatchment of the current output. This is preferred when doing model composition with Stem.\nFor example:\n\n    staged { collectionModel | memberViews = memberOutputs } `withChildren` memberOutputs\n\nwhere memberOutputs is a list of stemPresent or stemPresentAs outputs in the example.\n",
            "type": "List { anything | dispatchment : Gigan.Core.TaskDispatchment bad a } -> { anything | dispatchment : Gigan.Core.TaskDispatchment bad a } -> { anything | dispatchment : Gigan.Core.TaskDispatchment bad a }"
          },
          {
            "name": "withDispatchment",
            "comment": " This is the same as `withTasks`, but it takes an already existing TaskDispatchment. ",
            "type": "Gigan.Core.TaskDispatchment bad a -> { anything | dispatchment : Gigan.Core.TaskDispatchment bad a } -> { anything | dispatchment : Gigan.Core.TaskDispatchment bad a }"
          },
          {
            "name": "withInputs",
            "comment": " withInputs is the oldest way in Gigan of using action inputs, from before we started using\nlists of actions. Lists of actions are much more powerful because not only can they be used to\nmake sure sequences of actions run atomically, but it also gives us an obvious and tagless way to\nrepresent noop. Here's how it looked:\n\n    defProgram myPresent myUpdate myModel0 `withInputs` [actionSignal0, actionSignal1]\n\nThis is DEPRECIATED.\n",
            "type": "Gigan.Core.OrbiterInput a b c bad -> List (Signal.Signal a) -> Gigan.Core.OrbiterInput a b c bad"
          },
          {
            "name": "withLazySequenceInputs",
            "comment": " Since action lists are internally combined using lazy lists, one may want to just hand over their\nLazyList without converting it to a list. This may sometimes be appropriate, but beware of unbounded\nlaziness. Profiling is your friend here. ",
            "type": "Gigan.Core.OrbiterInput a b c bad -> List (Signal.Signal (Lazy.List.LazyList a)) -> Gigan.Core.OrbiterInput a b c bad"
          },
          {
            "name": "withSequenceInputs",
            "comment": " withSequenceInputs is the preferred way of piping outside sources of actions in to an orbiter\nprogram. You'll notice from the way this is used that OrbiterInput definitions made by defProgram'\nor defProgram refrain from including any inputs right away. The reason for this is that a program\nand the _source_ of it's input are two distinctly separate concerns, though the _content_ of it's\ninput is not. In Stem, the inputs of an OrbiterInput are not used. This way, OrbiterInput is also\nusable for defining Stem state machines as well as Orbiter programs.\n\n    defProgram' myPresent myStage myUpdate myModel0 `withSequenceInputs` [actionListSignal0, actionListSignal1]\n\n",
            "type": "Gigan.Core.OrbiterInput a b c bad -> List (Signal.Signal (List a)) -> Gigan.Core.OrbiterInput a b c bad"
          },
          {
            "name": "withTasks",
            "comment": " Add some tasks to the output of any of the three Orbiter functions.\n\n    updated model `withTasks` [actionTask [Jump, Run]]\n    presented viewstuff `withTasks` [errorTask [reportError \"You done goofed.\"]]\n\nThis is definitely the most elegant way to build a TaskDispatchment as well, especially in the\ncontext of declaring causality.\n",
            "type": "List (Gigan.Core.OrbiterTask bad a) -> { anything | dispatchment : Gigan.Core.TaskDispatchment bad a } -> { anything | dispatchment : Gigan.Core.TaskDispatchment bad a }"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Gigan.Layout",
        "comment": " A very nice ruler snapping system for layouts. Actual documentation underway.\n\n# Definitions\n@docs Axis, Bounds, Group, Item, Rule\n\n# Ruler Guide Manipulation\n@docs adjustedRule, horizontalRule, horizontalRuleBetween, horizontalRuleCentered, itemHorizontalRule, itemRule, itemVerticalRule, ruleBetween, ruleCenter, snapToRule, towardsRule, towardsRuleRelative, verticalRule, verticalRuleBetween, verticalRuleCentered\n\n# Grouping and Group Operations\n@docs appendGroup, group, groupAt, groupAtBefore, groupElements, groupFromArray, groupFromDict, groupSize, prependGroup, computed, butBefore, butBeforeAt, butBeforeSlice, thenDo, thenDoAt, thenDoSlice, flatten, flattenOutTo, flattenTo, flattenWithin, flattenWithinOutTo\n\n# Group Spacing and Distribution.\n@docs spacedBetween, spacedBy, regularly, vertically, horizontally\n\n# Bounds Definitions\n@docs defBounds, autoBounds, boundsHeight, boundsLower, boundsSize, boundsUpper, boundsWidth, clampedBounds, clampedInnerBounds, clampedOuterBounds\n\n# Item Grabs\n@docs grabItem, grabItemRelative, grabItemRelativeX, grabItemRelativeY, grabItemX, grabItemY\n\n# Item Metrics\n@docs itemBounds, itemWidth, itemHeight, itemSize\n\n# Item Placement\n@docs lerpOf, move, moveX, moveY, place, placeX, placeY\n\n# Create and Display Items\n@docs emptyItem, toItem, fromItem\n\n",
        "aliases": [
          {
            "name": "Item",
            "comment": " An item, which represents an Elm Element with a position and a handle. ",
            "args": [],
            "type": "{ elem : Graphics.Element.Element , x : Int , u : Int , y : Int , v : Int }"
          }
        ],
        "types": [
          {
            "name": "Axis",
            "comment": " An axis along which to evenly distribute by spacing or handle position. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Bounds",
            "comment": " A bounding box, given as a minimum and a maximum. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Group",
            "comment": " Group is an opaque type that represents a grouped set of items with a pending set of transformations. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Rule",
            "comment": " A guide ruler defined as either a vertical or a horizontal axis aligned line. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "adjustedRule",
            "comment": " Adjust a horizontal or vertical ruler. ",
            "type": "(Int -> Gigan.Layout.Rule) -> Int -> Gigan.Layout.Rule -> Gigan.Layout.Rule"
          },
          {
            "name": "appendGroup",
            "comment": " Append two groups, resulting a group containing the elements from `grp` first and the\nelements of `grp'` second. ",
            "type": "Gigan.Layout.Group -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "autoBounds",
            "comment": " Automatic bounds. ",
            "type": "Gigan.Layout.Bounds"
          },
          {
            "name": "boundsHeight",
            "comment": " Get the width of a bounding box, defined as boundsSize >> snd ",
            "type": "Gigan.Layout.Bounds -> Int"
          },
          {
            "name": "boundsLower",
            "comment": " Get the minimum bound if a minimum bound is defined. ",
            "type": "Gigan.Layout.Bounds -> Maybe.Maybe ( Int, Int )"
          },
          {
            "name": "boundsSize",
            "comment": " Get the size of a bounding box if both maximum and minimum bounds are defined, otherwise (0, 0). ",
            "type": "Gigan.Layout.Bounds -> ( Int, Int )"
          },
          {
            "name": "boundsUpper",
            "comment": " Get the maximum bound if a maximum bound is defined. ",
            "type": "Gigan.Layout.Bounds -> Maybe.Maybe ( Int, Int )"
          },
          {
            "name": "boundsWidth",
            "comment": " Get the width of a bounding box, defined as boundsSize >> fst ",
            "type": "Gigan.Layout.Bounds -> Int"
          },
          {
            "name": "butBefore",
            "comment": " Apply some transformation to every item in the group before the pending transformations. ",
            "type": "(Gigan.Layout.Item -> Gigan.Layout.Item) -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "butBeforeAt",
            "comment": " Apply some transformation to the item at a particular index in the group before the pending transformations. ",
            "type": "Int -> (Gigan.Layout.Item -> Gigan.Layout.Item) -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "butBeforeSlice",
            "comment": " Apply some transformation to the items in a particular slice of the group before the pending transformations. ",
            "type": "Int -> Int -> (Gigan.Layout.Item -> Gigan.Layout.Item) -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "clampedBounds",
            "comment": " Clamp a bounding box to some inner bounding box and some outer bounding box. Either the inner\nor the outer bounding box may be autoBounds, so this may also only clamp an inner or an outer limit,\nor neither. ",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Bounds -> Gigan.Layout.Bounds -> Gigan.Layout.Bounds"
          },
          {
            "name": "clampedInnerBounds",
            "comment": " clampedInnerBounds myBounds = clampedBounds myBounds autoBounds ",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Bounds -> Gigan.Layout.Bounds"
          },
          {
            "name": "clampedOuterBounds",
            "comment": " clampedOuterBounds myBounds = clampedBounds autoBounds myBounds ",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Bounds -> Gigan.Layout.Bounds"
          },
          {
            "name": "computed",
            "comment": " Run any pending transformations on all group items. For the most part, this can be avoided, but it should be\ndone if you are planning to get a lot of items back from the group transformed, or else the work of applying the\npending group transforms will be done at least twice, once when you retrieve the item using groupAt and once when\nyou flatten the group to produce an item. ",
            "type": "Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "defBounds",
            "comment": " Define a definite bounding box. ",
            "type": "Int -> Int -> Int -> Int -> Gigan.Layout.Bounds"
          },
          {
            "name": "emptyItem",
            "comment": " An empty layout item. ",
            "type": "Gigan.Layout.Item"
          },
          {
            "name": "flatten",
            "comment": " Flatten a group using automatic bounds for the inner and outer bounds. This will produce the\ntightest bounding box possible around the target, and place the handle at (0, 0) relative to the resulting\nbounding box. This can result in the handle being placed outside of the group, but this can be desirable for\npositioning. For example, I may want to grab something at (-5, -5), so I can position it's top left\ncorner relative to some outer box with (5, 5) padding. ",
            "type": "Gigan.Layout.Group -> Gigan.Layout.Item"
          },
          {
            "name": "flattenOutTo",
            "comment": " Flatten a group using only an inner bound, which is equivalent to\n\n    flattenWithinOutTo outer autoBounds\n",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Group -> Gigan.Layout.Item"
          },
          {
            "name": "flattenTo",
            "comment": " Flatten a group using an exact bound. If this is specified to be autoBounds, then the following\nequivalency holds:\n\n    flattenTo autoBounds group == flatten group\n\nOtherwise, the items in the group are positioned in the resulting item relative to the top left corner of the bounds and\nthe resulting item shall have the exact size of the given bounds. ",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Group -> Gigan.Layout.Item"
          },
          {
            "name": "flattenWithin",
            "comment": " Flatten a group using only an outer bound, which is equivalent to\n\n    flattenWithinOutTo autoBounds outer\n",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Group -> Gigan.Layout.Item"
          },
          {
            "name": "flattenWithinOutTo",
            "comment": " Flatten a group using an inner and an outer bound to clamp the size of the resulting item.\n",
            "type": "Gigan.Layout.Bounds -> Gigan.Layout.Bounds -> Gigan.Layout.Group -> Gigan.Layout.Item"
          },
          {
            "name": "fromItem",
            "comment": " Get the Graphics Element from an Item. Note that this will get the original Element back,\nunaffected by any positioning done using placement and group operations. To produce Graphics\nElements with finished layouts, refer to the flatten functions. ",
            "type": "Gigan.Layout.Item -> Graphics.Element.Element"
          },
          {
            "name": "grabItem",
            "comment": " Grab an item, producing a handle. This defines a point on the item called the \"handle\" that is\nplaced exactly at item's coordinates. If I say\n\n  grabItem 0 0\n\nthen that would grab the top left corner. u and v and given as window coordinates relative to the\ntop left corner of the item. ",
            "type": "Int -> Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "grabItemRelative",
            "comment": " Grab an item in normalized coordinates relative to it's size. This means that (1, 1) is the\nbottom right corner, and (0, 0) is the top left corner. ",
            "type": "Float -> Float -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "grabItemRelativeX",
            "comment": " Grab an item by it's x coordinate relative to the item's size. ",
            "type": "Float -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "grabItemRelativeY",
            "comment": " Grab an item by it's y coordinate relative to the item's size. ",
            "type": "Float -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "grabItemX",
            "comment": " Grab an item by it's x coordinate. ",
            "type": "Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "grabItemY",
            "comment": " Grab an item by it's y coordinate. ",
            "type": "Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "group",
            "comment": " Create an item group from a list. ",
            "type": "List Gigan.Layout.Item -> Gigan.Layout.Group"
          },
          {
            "name": "groupAt",
            "comment": " Retrieve the item at a given index in the group, or Nothing if the index is out of bounds. If\nthere are waiting transformations, a copy of the item with those transformations applied will be\ngiven. ",
            "type": "Int -> Gigan.Layout.Group -> Maybe.Maybe Gigan.Layout.Item"
          },
          {
            "name": "groupAtBefore",
            "comment": " Retrieve the item at a given index in the group, or Nothing if the index is out of bounds. The\nitem will be retrieved in it's original state without any pending group transformations applied. ",
            "type": "Int -> Gigan.Layout.Group -> Maybe.Maybe Gigan.Layout.Item"
          },
          {
            "name": "groupElements",
            "comment": " This is a shortcut for grouping graphics elements, which is very useful for compositing graphics\nelements such as images directly for layering effects. ",
            "type": "List Graphics.Element.Element -> Gigan.Layout.Group"
          },
          {
            "name": "groupFromArray",
            "comment": " Create an item group from an array. ",
            "type": "Array.Array Gigan.Layout.Item -> Gigan.Layout.Group"
          },
          {
            "name": "groupFromDict",
            "comment": " Create an item group from a dictionary. ",
            "type": "Dict.Dict comparable Gigan.Layout.Item -> Gigan.Layout.Group"
          },
          {
            "name": "groupSize",
            "comment": " Get the size of the group. ",
            "type": "Gigan.Layout.Group -> Int"
          },
          {
            "name": "horizontalRule",
            "comment": " Create a new horizontal ruler at the given y coordinate. ",
            "type": "Int -> Gigan.Layout.Rule"
          },
          {
            "name": "horizontalRuleBetween",
            "comment": " Shorthand for ruleBetween horizontalRule ",
            "type": "Int -> Int -> Float -> Gigan.Layout.Rule"
          },
          {
            "name": "horizontalRuleCentered",
            "comment": " Shorthand for ruleCenter horizontalRule ",
            "type": "Int -> Int -> Gigan.Layout.Rule"
          },
          {
            "name": "horizontally",
            "comment": " Do a distribution horizontally. ",
            "type": "Gigan.Layout.Axis"
          },
          {
            "name": "itemBounds",
            "comment": " Get the resultant bounding box of an item, given it's placement and handle. ",
            "type": "Gigan.Layout.Item -> Gigan.Layout.Bounds"
          },
          {
            "name": "itemHeight",
            "comment": " Get the height of an item. ",
            "type": "Gigan.Layout.Item -> Int"
          },
          {
            "name": "itemHorizontalRule",
            "comment": " Create a horizontal ruler aligned with an item. ",
            "type": "Gigan.Layout.Item -> Gigan.Layout.Rule"
          },
          {
            "name": "itemRule",
            "comment": " Create a vertical or a horizontal ruler aligned with an item. ",
            "type": "(Int -> Gigan.Layout.Rule) -> Gigan.Layout.Item -> Gigan.Layout.Rule"
          },
          {
            "name": "itemSize",
            "comment": " Get the size of an Item. ",
            "type": "Gigan.Layout.Item -> ( Int, Int )"
          },
          {
            "name": "itemVerticalRule",
            "comment": " Create a vertical ruler aligned with an item. ",
            "type": "Gigan.Layout.Item -> Gigan.Layout.Rule"
          },
          {
            "name": "itemWidth",
            "comment": " Get the width of an item. ",
            "type": "Gigan.Layout.Item -> Int"
          },
          {
            "name": "lerpOf",
            "comment": " Modify any of the item manipulation primitives by linearly interpolating the handle and coordinates\nbetween the current and output values. This provides the basic building block for transitional animations.\nEasing functions could quite easily be implemented on top of this. ",
            "type": "(Gigan.Layout.Item -> Gigan.Layout.Item) -> Float -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "move",
            "comment": " Move an item. ",
            "type": "Int -> Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "moveX",
            "comment": " Move an item horizontally. ",
            "type": "Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "moveY",
            "comment": " Move an item vertically. ",
            "type": "Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "place",
            "comment": " Place the handle of an item at these coordinates. ",
            "type": "Int -> Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "placeX",
            "comment": " Place the handle of an item at this x coordinate. ",
            "type": "Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "placeY",
            "comment": " Place the handle of an item at this y coordinate. ",
            "type": "Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "prependGroup",
            "comment": " Prepend a group before another, resulting a group containing the elements from `grp` second and\nthe elements of `grp'` first. ",
            "type": "Gigan.Layout.Group -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "regularly",
            "comment": " Distribute the items in the group along some Axis given a starting coordinate and an ending\ncoordinate, such that the handles of the items are evenly distributed between the starting and the\nending coordinates. The height or width of this vertical or horizontal distribution is dependent on\nthe positioning of the handles on the items, and the coordinate not effected by the distribution is\nleft in place. ",
            "type": "Gigan.Layout.Axis -> Int -> Int -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "ruleBetween",
            "comment": " Given a ruler direction (verticalRule or horizontalRule), a lower and an upper bound, and some\nfloat t between 0 and 1, linearly interpolate between the lower and upper bound by t. ",
            "type": "(Int -> Gigan.Layout.Rule) -> Int -> Int -> Float -> Gigan.Layout.Rule"
          },
          {
            "name": "ruleCenter",
            "comment": " Given a ruler direction (verticalRule or horizontalRule), a lower bound, and an upper bound,\ncenter a ruler between the lower and the upper bound. The following equivalencies hold:\n\n    ruleCenter verticalRule x0 x1 == ruleBetween verticalRule x0 x1 0.5\n    ruleCenter horizontalRule y0 y1 == ruleBetween horizontalRule y0 y1 0.5\n\n",
            "type": "(Int -> Gigan.Layout.Rule) -> Int -> Int -> Gigan.Layout.Rule"
          },
          {
            "name": "snapToRule",
            "comment": " Snap an item's handle to a vertical or horizontal ruler. ",
            "type": "Gigan.Layout.Rule -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "spacedBetween",
            "comment": " Distribute the items in the group along some Axis given a starting coordinate and an ending\ncoordinate, such that the spaces between all of the items are even, resulting in a justified layout.\nVertical distribution is done top to bottom, horizontal distribution is done left to right.\n\nThe height or width of this vertical or horizontal distribution is\n\n    to - from\n\nand the coordinate not effected by the distribution is left in place.\n",
            "type": "Gigan.Layout.Axis -> Int -> Int -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "spacedBy",
            "comment": " Distribute the items in the group along some Axis given a starting coordinate and spacing given\nin window coordinates, resulting in an evenly spaced horizontal or vertical distribution. Vertical\ndistribution is done top to bottom, horizontal distribution is done left to right.\n\nThe height or width of this vertical or horizontal distribution is\n\n    from + siz * (n - 1) + (sum itemHeight items)\n\nand the coordinate not effected by the distribution is left in place.\n\n",
            "type": "Gigan.Layout.Axis -> Int -> Int -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "thenDo",
            "comment": " Apply some transformation to every item in the group after the pending transformations. ",
            "type": "(Gigan.Layout.Item -> Gigan.Layout.Item) -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "thenDoAt",
            "comment": " Apply some transformation to the item at a particular index in the group after the pending transformations. ",
            "type": "Int -> (Gigan.Layout.Item -> Gigan.Layout.Item) -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "thenDoSlice",
            "comment": " Apply some transformation to the items in a particular slice of the group after the pending transformations. ",
            "type": "Int -> Int -> (Gigan.Layout.Item -> Gigan.Layout.Item) -> Gigan.Layout.Group -> Gigan.Layout.Group"
          },
          {
            "name": "toItem",
            "comment": " Convert a Graphics Element to an Item ",
            "type": "Graphics.Element.Element -> Gigan.Layout.Item"
          },
          {
            "name": "towardsRule",
            "comment": " Move an item's handle toward a vertical or horizontal ruler by some constant amount. ",
            "type": "Gigan.Layout.Rule -> Int -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "towardsRuleRelative",
            "comment": " Move an item's handle toward a vertical or horizontal ruler by some factor t  ",
            "type": "Gigan.Layout.Rule -> Float -> Gigan.Layout.Item -> Gigan.Layout.Item"
          },
          {
            "name": "verticalRule",
            "comment": " Create a new vertical ruler at the given x coordinate. ",
            "type": "Int -> Gigan.Layout.Rule"
          },
          {
            "name": "verticalRuleBetween",
            "comment": " Shorthand for ruleBetween verticalRule ",
            "type": "Int -> Int -> Float -> Gigan.Layout.Rule"
          },
          {
            "name": "verticalRuleCentered",
            "comment": " Shorthand for ruleCenter verticalRule ",
            "type": "Int -> Int -> Gigan.Layout.Rule"
          },
          {
            "name": "vertically",
            "comment": " Do a distribution vertically. ",
            "type": "Gigan.Layout.Axis"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "williamwhitacre/pylon",
    "version": "9.0.0",
    "docs": [
      {
        "name": "Pylon.DB.Filter",
        "comment": " A binding for ElmTextSearch and Pylon.DB.Group.\n\n# Types\n@docs Filter, FilterFeedback, Document\n\n# Construction\n@docs filter\n\n# Query\n@docs filterQuery, filterQueryIf\n\n# Getters\n@docs getFilterQuery, getFilterResults, getLastFilterResults\n\n# Group Mirroring\n@docs filterMirror, filterMirror'\n\n# Update\n@docs filterInputOne\n\n# Dispatch\n@docs filterSync, filterAsyncAs, filterAsync\n",
        "aliases": [
          {
            "name": "Document",
            "comment": " Represents the getters for a document type used by a filter. ",
            "args": [
              "doctype"
            ],
            "type": "{ ref : doctype -> String , fields : List ( doctype -> String, Float ) }"
          }
        ],
        "types": [
          {
            "name": "Filter",
            "comment": " A document filter. ",
            "args": [
              "doctype"
            ],
            "cases": []
          },
          {
            "name": "FilterFeedback",
            "comment": " FilterFeedback for a filter containing results. These will be matched to the current state by\nsequence number, so old search results will not overwrite a newer query. ",
            "args": [
              "doctype"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "filter",
            "comment": " Create a new filter from a document description. ",
            "type": "Pylon.DB.Filter.Document doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "filterAsync",
            "comment": " Filter asynchronously. When executed, the resulting task will send update(s) to the provided filter feedback address. ",
            "type": "Signal.Address (List (Pylon.DB.Filter.FilterFeedback doctype)) -> Pylon.DB.Filter.Filter doctype -> ( Pylon.DB.Filter.Filter doctype , List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "filterAsyncAs",
            "comment": " Filter asynchronously with a forwarding address. ",
            "type": "(List (Pylon.DB.Filter.FilterFeedback doctype) -> List action) -> Signal.Address (List action) -> Pylon.DB.Filter.Filter doctype -> ( Pylon.DB.Filter.Filter doctype , List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "filterInputOne",
            "comment": " Handle a filter result. This may update the latest field to reflect the latest results\ncontinuously, even if the sequence numbers do not match. If they do, the existing filter will be\nentirely replaced by the result one since the index cannot have changed since then. ",
            "type": "Pylon.DB.Filter.FilterFeedback doctype -> Pylon.DB.Filter.Filter doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "filterMirror",
            "comment": " Synchronize the document store with the contents of a DB group. ",
            "type": "(String -> rectype -> doctype) -> Pylon.DB.Group.Group (Pylon.DB.Data rectype) -> Pylon.DB.Filter.Filter doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "filterMirror'",
            "comment": " Synchronize the document store with the contents of a mirror. ",
            "type": "(String -> rectype -> doctype) -> Pylon.DB.Mirror.Mirror rectype -> Pylon.DB.Filter.Filter doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "filterQuery",
            "comment": " Set a new query string. ",
            "type": "String -> Pylon.DB.Filter.Filter doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "filterQueryIf",
            "comment": " Set a new query conditionally. ",
            "type": "(String -> Bool) -> String -> Pylon.DB.Filter.Filter doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "filterSync",
            "comment": " Filter synchronously. The results are immediately available in the resulting Filter. ",
            "type": "Pylon.DB.Filter.Filter doctype -> Pylon.DB.Filter.Filter doctype"
          },
          {
            "name": "getFilterQuery",
            "comment": " Get the latest filter query. ",
            "type": "Pylon.DB.Filter.Filter doctype -> String"
          },
          {
            "name": "getFilterResults",
            "comment": " Get the current filter results. ",
            "type": "Pylon.DB.Filter.Filter doctype -> Pylon.Resource.Resource String (List ( doctype, Float ))"
          },
          {
            "name": "getLastFilterResults",
            "comment": " Get the latest filter results. ",
            "type": "Pylon.DB.Filter.Filter doctype -> Maybe.Maybe (List ( doctype, Float ))"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.DB.Mirror",
        "comment": " A binding for ElmTextSearch and Pylon.DB.Group.\n\n# Types\n@docs Mirror\n\n# Construction\n@docs mirror\n\n# Getters\n@docs getRef, getChangedRef, refs, changedRefs, deltas, isEmpty, isChangedEmpty\n\n# Mirroring\n@docs each, eachDelta, refresh, resynch, attach, attachSynch, attachDelta, attachFilterSynch, attachFilterDelta\n\n# Dataflow\n@docs forward, forwardPast, filterForward, sort, filterSort, multiSort, flatten\n\n# Control\n@docs inject, commit, commitSorted\n\n# Group Binding\n@docs bindMirror, bindMirrorRaw, groupMirror, groupMirror, groupMirrorSynch, dataGroupMirror, dataGroupMirrorSynch\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Mirror",
            "comment": " A document mirror. ",
            "args": [
              "doctype"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "attach",
            "comment": " Mirror a DB group. Depreciated alias for attachDelta. ",
            "type": "(String -> rectype -> doctype) -> Pylon.DB.Group.Group (Pylon.DB.Data rectype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "attachDelta",
            "comment": " Apply the currently pending set of group deltas to a mirror. ",
            "type": "(String -> rectype -> doctype) -> Pylon.DB.Group.Group (Pylon.DB.Data rectype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "attachFilterDelta",
            "comment": " Apply the currently pending set of group deltas to a mirror, excluding any key-record pairs that produce Nothing instead of Just a document. ",
            "type": "(String -> rectype -> Maybe.Maybe doctype) -> Pylon.DB.Group.Group (Pylon.DB.Data rectype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "attachFilterSynch",
            "comment": " Reflect the entire group working set in a mirror, excluding any key-record pairs that produce Nothing instead of Just a document. ",
            "type": "(String -> rectype -> Maybe.Maybe doctype) -> Pylon.DB.Group.Group (Pylon.DB.Data rectype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "attachSynch",
            "comment": " Reflect the entire group working set in a mirror. ",
            "type": "(String -> rectype -> doctype) -> Pylon.DB.Group.Group (Pylon.DB.Data rectype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "bindMirror",
            "comment": "  ",
            "type": "(Signal.Address (List subfeedback) -> Maybe.Maybe ElmFire.Location -> String -> doctype -> subbinding) -> Pylon.DB.Mirror.Mirror doctype -> Signal.Address (List subfeedback) -> Maybe.Maybe ElmFire.Location -> String -> subbinding"
          },
          {
            "name": "bindMirrorRaw",
            "comment": "  ",
            "type": "(Pylon.DB.Group.GroupConfig subfeedback subbinding -> String -> doctype -> subbinding) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> String -> subbinding"
          },
          {
            "name": "changedRefs",
            "comment": " Get the pending reference dictionary. ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Dict.Dict String doctype"
          },
          {
            "name": "commit",
            "comment": " Accept the current changes. ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "commitSorted",
            "comment": " Accept the current changes recursively in a mirror of type `Mirror (Mirror doctype)`. ",
            "type": "Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype) -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype)"
          },
          {
            "name": "dataGroupMirror",
            "comment": " ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Group.GroupConfig (Pylon.DB.Feedback v) (Pylon.DB.Binding v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "dataGroupMirrorSynch",
            "comment": " ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Group.GroupConfig (Pylon.DB.Feedback v) (Pylon.DB.Binding v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "deltas",
            "comment": " Get the deltas used to change the reference dictionary. ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Dict.Dict String (List ( Pylon.Resource.Resource Pylon.DB.DBError doctype , Pylon.Resource.Resource Pylon.DB.DBError doctype ))"
          },
          {
            "name": "each",
            "comment": " Do something to each member of a mirror. Useful for acting on nested mirrors, for example, deep resynch. ",
            "type": "(doctype -> doctype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "eachDelta",
            "comment": " Do something to each member of a mirror that has changed. Useful for acting on nested mirrors, for example, commiting a sorted mirror. ",
            "type": "(doctype -> doctype) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "filterForward",
            "comment": " Forward deltas from one mirror to another selectively by using a filter. ",
            "type": "(String -> doctype -> Maybe.Maybe doctype') -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype' -> Pylon.DB.Mirror.Mirror doctype'"
          },
          {
            "name": "filterSort",
            "comment": " Sort the documents in a mirror in to buckets, ignoring the items whose key/document pairs yield\nNothing. If fsort produces `Just key'`, then the document will be placed in to the mirror represeting\nthe bucket at `key'`. ",
            "type": "(String -> doctype -> Maybe.Maybe String) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype) -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype)"
          },
          {
            "name": "flatten",
            "comment": " Flatten a sorted mirror `Mirror (Mirror doctype)`. This takes a policy function\n\n    fDeltaFlatten bucketKey subKey maybeItem maybeTarget =\n\nwhere fDeltaFlatten specifies how to modify the flattened item when a key is removed or added and\nfEmpty initializes an item corresponding to a new key in the output mirror.\n",
            "type": "(String -> String -> Maybe.Maybe doctype -> Maybe.Maybe doctype' -> Maybe.Maybe doctype') -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype) -> Pylon.DB.Mirror.Mirror doctype' -> Pylon.DB.Mirror.Mirror doctype'"
          },
          {
            "name": "forward",
            "comment": " Forward deltas from one mirror to another. ",
            "type": "(String -> doctype -> doctype') -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype' -> Pylon.DB.Mirror.Mirror doctype'"
          },
          {
            "name": "forwardPast",
            "comment": " Forward deltas, accounting for the previous output for the same key. This allows something\nconceptually similar to folding in to the past of the output mirror, so unlike forward and sort, it\nrepresents a user defined stateful update of the output mirror. ",
            "type": "(String -> doctype -> Maybe.Maybe doctype' -> Maybe.Maybe doctype') -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype' -> Pylon.DB.Mirror.Mirror doctype'"
          },
          {
            "name": "getChangedRef",
            "comment": " Get the pending reference at a particular key. ",
            "type": "String -> Pylon.DB.Mirror.Mirror doctype -> Pylon.Resource.Resource Pylon.DB.DBError doctype"
          },
          {
            "name": "getRef",
            "comment": " Get the current working reference at a particular key. ",
            "type": "String -> Pylon.DB.Mirror.Mirror doctype -> Pylon.Resource.Resource Pylon.DB.DBError doctype"
          },
          {
            "name": "groupMirror",
            "comment": " Use this in place of groupSubscription to synchronize the group's keys to a mirror. ",
            "type": "subtype -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupMirrorSynch",
            "comment": " Use this in place of groupSubscription to synchronize the group's keys to a mirror. ",
            "type": "subtype -> (subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "inject",
            "comment": " Inject a change. This can be used to manually control mirror sources in the case that they\nare not derived from some DB.Group. ",
            "type": "String -> Pylon.Resource.Resource Pylon.DB.DBError doctype -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "isChangedEmpty",
            "comment": " ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Bool"
          },
          {
            "name": "isEmpty",
            "comment": " ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Bool"
          },
          {
            "name": "mirror",
            "comment": " Create a new mirror from a document description. ",
            "type": "Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "multiSort",
            "comment": " Sort the documents in a mirror in to any arbitrary number of buckets per document. The sorting\nfunction will result in a list of strings. If the list is empty the document is ignored. If the list\nis not empty, then the given document will be mirrored in the bucket mirrors at the given keys. ",
            "type": "(String -> doctype -> List String) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype) -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype)"
          },
          {
            "name": "refresh",
            "comment": " Forcibly refresh the mirrored data for a particular key. ",
            "type": "List String -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "refs",
            "comment": " Get the current working reference dictionary. ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Dict.Dict String doctype"
          },
          {
            "name": "resynch",
            "comment": " Emit all known values as deltas. This will cause any that forwards from this mirror and any\ngroup that uses this mirror as a controller by deltas will be brought up to date. ",
            "type": "Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror doctype"
          },
          {
            "name": "sort",
            "comment": " Sort the documents in a mirror in to buckets. ",
            "type": "(String -> doctype -> String) -> Pylon.DB.Mirror.Mirror doctype -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype) -> Pylon.DB.Mirror.Mirror (Pylon.DB.Mirror.Mirror doctype)"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.DB.Legacy.Group",
        "comment": " This is being kept in a seperate legacy module where it will not clutter things. Since a lot\nof code is based on it for now, it is being kept intact. Do not use this module if you are not already\nheavily invested in an existing project that uses these.\n\n@docs bindingGroupTo, dataRebasedBinding, dataSubBinding, forwardingGroupTo, groupDataSubscriber, groupRebasedBinding, groupRebasedDataSubscriber, groupSubBinding, groupSubscriber, orderGroupBy, sendingGroupTo\n",
        "aliases": [],
        "types": [],
        "values": [
          {
            "name": "bindingGroupTo",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nConstruct a new incomplete group binding from a ElmFire Firebase location. ",
            "type": "ElmFire.Location -> Pylon.DB.Legacy.Group.GroupBinding subfeedback"
          },
          {
            "name": "dataRebasedBinding",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nRebased binding uses the key of the discovered item to get a child at a diffeent location than\nthat of the group binding. A good example would be a subscription that tracks a group of users,\nbut actually pulls data from a global profiles list. ",
            "type": "ElmFire.Location -> Pylon.DB.Config v -> Pylon.DB.Legacy.Group.GroupBinding (Pylon.DB.Feedback v) -> String -> Pylon.DB.Binding v"
          },
          {
            "name": "dataSubBinding",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nA convenience function which makes it a little bit easier to declare a sub-binding function for\nconcrete data. Note that if you are using the `groupDataSubscriber` convenience function, then this\nis already invoked internally, making the task of bindin a group of concrete records even easier. ",
            "type": "Pylon.DB.Config v -> Pylon.DB.Legacy.Group.GroupBinding (Pylon.DB.Feedback v) -> String -> Pylon.DB.Binding v"
          },
          {
            "name": "forwardingGroupTo",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nProvide an address for group feedback actions with a transformation function for forwarding. If\nthis is not applied to the binding, no feedback will be recieved. ",
            "type": "(List (Pylon.DB.Group.GroupFeedback subfeedback) -> List action) -> Signal.Address (List action) -> Pylon.DB.Legacy.Group.GroupBinding subfeedback -> Pylon.DB.Legacy.Group.GroupBinding subfeedback"
          },
          {
            "name": "groupDataSubscriber",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nConvenience function that makes it easier to bind a `Group (DB.Data v)`. ",
            "type": "Pylon.DB.Config v -> Pylon.DB.Legacy.Group.GroupBinding (Pylon.DB.Feedback v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupRebasedBinding",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nRebased binding for nested groups. ",
            "type": "ElmFire.Location -> ElmFire.OrderOptions -> Pylon.DB.Legacy.Group.GroupBinding (Pylon.DB.Group.GroupFeedback subfeedback') -> String -> Pylon.DB.Legacy.Group.GroupBinding subfeedback'"
          },
          {
            "name": "groupRebasedDataSubscriber",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nConvenience function that makes it easier to bind a `Group (DB.Data v)`. ",
            "type": "ElmFire.Location -> Pylon.DB.Config v -> Pylon.DB.Legacy.Group.GroupBinding (Pylon.DB.Feedback v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupSubBinding",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nA convenience function which makes it a little bit easier to declare a sub-binding function for\nnested groups. ",
            "type": "ElmFire.OrderOptions -> Pylon.DB.Legacy.Group.GroupBinding (Pylon.DB.Group.GroupFeedback subfeedback') -> String -> Pylon.DB.Legacy.Group.GroupBinding subfeedback'"
          },
          {
            "name": "groupSubscriber",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nThis is the old subscription primitive, and is quite a bit more limited. For testing purposes,\nit has been implemented in terms of `groupIntegrate` and `groupSubscription`. `groupIntegrate` is\nmuch more powerful, and takes a list of \"sourcing\" functions like `groupSubscription`. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> (subbinding -> subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> (Pylon.DB.Legacy.Group.GroupBinding subfeedback -> String -> subbinding) -> Pylon.DB.Legacy.Group.GroupBinding subfeedback -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "orderGroupBy",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nGive an ordering for the group subscription's internal query. Note that this _will not order the\nresulting key-value dictionary_, but it is still useful because it will have an effect on which\nresults are produced by the Firebase API in the event that limiting is used, which is the case for\nmost practical applications. ",
            "type": "ElmFire.OrderOptions -> Pylon.DB.Legacy.Group.GroupBinding subfeedback -> Pylon.DB.Legacy.Group.GroupBinding subfeedback"
          },
          {
            "name": "sendingGroupTo",
            "comment": " DEPRECIATED, removed in 6.0.0\n\nProvide an address for group feedback actions. If this is not applied to the binding, no feedback\nwill be recieved. ",
            "type": "Signal.Address (List (Pylon.DB.Group.GroupFeedback subfeedback)) -> Pylon.DB.Legacy.Group.GroupBinding subfeedback -> Pylon.DB.Legacy.Group.GroupBinding subfeedback"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.DB.Meta",
        "comment": " Subscribe to metadata about connectivity, timestamp offset, and authentication using the\nsame easy to understand pattern set forth in `Pylon.DB`.\n\n# Types\n@docs MetaFeedback, MetaBinding, MetaData\n\n# Special Server Metadata Binding\n@docs nilMetaData, metaBindingTo, metaSendingTo, metaForwardingTo, metaInputOne, metaInput, metaSubscribe\n\n# Getters\n@docs getTimestampOffset, getConnectionStatus, getAuthenticationStatus\n\n# Etc.\n@docs serverTimestampPlaceholder\n\n",
        "aliases": [
          {
            "name": "MetaBinding",
            "comment": " Server metadata binding. ",
            "args": [],
            "type": "{ address : Signal.Address (List Pylon.DB.Meta.MetaFeedback) , location : ElmFire.Location }"
          },
          {
            "name": "MetaData",
            "comment": " Server metadata record. ",
            "args": [],
            "type": "{ timeStampOffset : Pylon.Resource.Resource Pylon.DB.DBError Time.Time , isConnected : Pylon.Resource.Resource Pylon.DB.DBError Bool , authentication : Pylon.Resource.Resource Pylon.DB.DBError ElmFire.Auth.Authentication , subscriptions : Pylon.DB.Meta.MetaSubscriptions }"
          }
        ],
        "types": [
          {
            "name": "MetaFeedback",
            "comment": " Feedback for the the server metadata subscription. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "getAuthenticationStatus",
            "comment": " Get the resource representing the current authentication status to the server. ",
            "type": "Pylon.DB.Meta.MetaData -> Pylon.Resource.Resource Pylon.DB.DBError ElmFire.Auth.Authentication"
          },
          {
            "name": "getConnectionStatus",
            "comment": " Get the resource representing the current connection status to the server. ",
            "type": "Pylon.DB.Meta.MetaData -> Pylon.Resource.Resource Pylon.DB.DBError Bool"
          },
          {
            "name": "getTimestampOffset",
            "comment": " Get the resource representing the current timestamp offset to the server. ",
            "type": "Pylon.DB.Meta.MetaData -> Pylon.Resource.Resource Pylon.DB.DBError Time.Time"
          },
          {
            "name": "metaBindingTo",
            "comment": " Create a metadata binding for a firebase location. Should be the root location. ",
            "type": "ElmFire.Location -> Pylon.DB.Meta.MetaBinding"
          },
          {
            "name": "metaForwardingTo",
            "comment": " Add an address to a metadata binding with a forwarding function. ",
            "type": "(List Pylon.DB.Meta.MetaFeedback -> List action) -> Signal.Address (List action) -> Pylon.DB.Meta.MetaBinding -> Pylon.DB.Meta.MetaBinding"
          },
          {
            "name": "metaInput",
            "comment": " Server metadata list update function. ",
            "type": "List Pylon.DB.Meta.MetaFeedback -> Pylon.DB.Meta.MetaData -> Pylon.DB.Meta.MetaData"
          },
          {
            "name": "metaInputOne",
            "comment": " Server metadata single update function. ",
            "type": "Pylon.DB.Meta.MetaFeedback -> Pylon.DB.Meta.MetaData -> Pylon.DB.Meta.MetaData"
          },
          {
            "name": "metaSendingTo",
            "comment": " Add an address to a metadata binding. Unless you do this, feedback will go to a hidden internal\ndrain. ",
            "type": "Signal.Address (List Pylon.DB.Meta.MetaFeedback) -> Pylon.DB.Meta.MetaBinding -> Pylon.DB.Meta.MetaBinding"
          },
          {
            "name": "metaSubscribe",
            "comment": " Subscribe to the server metadata at your root Firebase location. ",
            "type": "Pylon.DB.Meta.MetaBinding -> Pylon.DB.Meta.MetaData -> ( Pylon.DB.Meta.MetaData, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "nilMetaData",
            "comment": " Empty metadata record. A metadata record should always be initialized to this. ",
            "type": "Pylon.DB.Meta.MetaData"
          },
          {
            "name": "serverTimestampPlaceholder",
            "comment": " A placeholder for encoding the server timestamp. ",
            "type": "Json.Encode.Value"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.DB.Group",
        "comment": " Nested data. The typing is done such that one can arbitrarily nest groups, trivial data records,\nor even a compatible API fitting the same pattern such that this system is easily extensible.\n\n# Core Types\n@docs GroupFeedback, GroupConfig, Group\n\n# Nesting Convenience Types\n@docs GroupFeedback2, GroupFeedback3, GroupFeedback4, GroupConfig2, GroupConfig3, GroupConfig4, Group2, Group3, Group4\n\n# Configuration\n@docs groupConfigBinding, groupConfig, groupConfigForward, groupConfigSelf, groupConfigSelfForward, groupConfigRebind, groupConfigRebindSelf, groupConfigGetAddress, groupConfigGetSubAddress, groupConfigLocation, groupConfigDefaultLocation, groupConfigMaybeLocation, groupConfigPathLocation, groupConfigInputKey, groupConfigPopKey, groupConfigTopKey, groupConfigGetPath, groupConfigSetPath, groupConfigNoLocation, groupConfigParentLocation, groupConfigSubLocation, groupConfigRootLocation, groupConfigHasLocation, groupConfigGetLocation, groupConfigLocationOr\n\n# Inspect Subfeedback\n@docs getGroupSubFeedbackKey, extractGroupSubFeedbackKeys, getGroupSubFeedback, getGroupSubFeedbackPair, extractGroupSubFeedbackPairs\n\n# Direct Group Inquiry\n@docs getGroupCurrentData, getGroupDeltaData, getGroupNextData, getGroupResDeltas, getGroupResDeltaList, getGroupDataResDeltas, getGroupDataResDeltaList, groupResDeltaFoldL, groupResDeltaFoldR, groupDataResDeltaFoldL, groupDataResDeltaFoldR, groupDeriveDeltaFoldL, groupDeriveDeltaFoldR, groupDeriveSub, getGroupSub, getGroupSubData\n\n\n# Direct Group Manipulation\n\nYou can use these functions to perform nested operations on groups directly. You will need this\nfunctionality to write new items in to a group. Take care, however, that you _do not try to remove\nitems form the group by using `groupRemoveSub` directly._ To effect the remote data, you must\ninvoke the operations provided by `Pylon.DB`.\n\n@docs groupUpdateSub, groupDoSub, groupDoEachSub, groupAddSub, groupSetSub, groupRemoveSub\n\n# Group Constructors\n@docs newGroup, voidGroup\n\n# Raw Group Operations\n\nThese expose the raw group interface, and all it's power. Nesting them is painstaking, though\nvery robust, so one might wish to use the `groupNested*` family of operations for nested groups up\nup to four levels deep. For the possibility of arbitrary depth tries, please wait for Pylon 8. The\ngroup resource tag from `Scaffold` (old version) proved to function exactly like this, with a\nworking public example. The tradeoff would of course be a weaker type flexibility in exchange for\nmuch stronger structural flexibility. Expect `DynamicGroup` as part of Pylon 8. Pylon 7 will be\nthoroughly documented and examples made before we get around to this.\n\n@docs groupInputOne, groupInput, cancelGroup, resetGroup, cancelAndResetGroup, groupIntegrate\n\n# Group Transforms\n\nWhen dealing with a nested group, it can be quite a boilerplate mess to get things out dynamically.\nIt is much easier to do what you want with a flat group. For example. If I have a nested group\n`Group (Group (Data MyRecord))` representing collections of records from a selection of different\nsources in the database, I can flatten that nested group in to a regular data group `Group (Data MyRecord)`\nusing the `pathMerge` function to control the ordering of the results as well. I could then use a\nMirror to generate a meaningful representation and display it to the user. This can handle a LOT of\ndata because everything is a stream of deltas.\n\n@docs flatten, commitGroupDeltas\n\n# Data Group Operations\n@docs groupDataInputOne, groupDataInput, cancelDataGroup, cancelAndResetDataGroup, groupDataIntegrate\n\n# Nested Group Operations\n\nSometimes a plain group of data is not deep enough. This family of functions operates on nested\ngroup records up to four levels deep, which should be good enough for most ordinary use cases. In\nthe case that you want (a) to account for a variable depth trie or (b) more levels in general,\nplease wait for the release of DynamicGroup with Pylon 8.\n\n@docs groupInputOne2, groupInput2, cancelGroup2, cancelAndResetGroup2, groupIntegrate2, groupInputOne3, groupInput3, cancelGroup3, cancelAndResetGroup3, groupIntegrate3, groupInputOne4, groupInput4, cancelGroup4, cancelAndResetGroup4, groupIntegrate4\n\n# Builtin Group Controllers\n\nSee also the `Pylon.DB.Mirror` module for a controller that manages subscriptions of sub data or\nsub groups by synchronizing to a mirror.\n\n@docs groupSubscription\n\n",
        "aliases": [
          {
            "name": "Group",
            "comment": " Nestable group record. ",
            "args": [
              "subtype"
            ],
            "type": "{ dataDelta : Dict.Dict String ( subtype, Pylon.DB.Group.GroupDelta ) , data : Pylon.Resource.Resource Pylon.DB.DBError (Dict.Dict String subtype) , addSubscription : Pylon.Resource.Resource Pylon.DB.DBError ElmFire.Subscription , removeSubscription : Pylon.Resource.Resource Pylon.DB.DBError ElmFire.Subscription , currentLocation : Maybe.Maybe ElmFire.Location }"
          },
          {
            "name": "Group2",
            "comment": " Nested group record, depth 2. ",
            "args": [
              "subtype"
            ],
            "type": "Pylon.DB.Group.Group (Pylon.DB.Group.Group subtype)"
          },
          {
            "name": "Group3",
            "comment": " Nested group record, depth 3. ",
            "args": [
              "subtype"
            ],
            "type": "Pylon.DB.Group.Group (Pylon.DB.Group.Group2 subtype)"
          },
          {
            "name": "Group4",
            "comment": " Nested group record, depth 4. ",
            "args": [
              "subtype"
            ],
            "type": "Pylon.DB.Group.Group (Pylon.DB.Group.Group3 subtype)"
          },
          {
            "name": "GroupConfig2",
            "comment": " Nested group configuration, depth 2. ",
            "args": [
              "subfeedback",
              "subbinding"
            ],
            "type": "Pylon.DB.Group.GroupConfig (Pylon.DB.Group.GroupFeedback subfeedback) (Pylon.DB.Group.GroupConfig subfeedback subbinding)"
          },
          {
            "name": "GroupConfig3",
            "comment": " Nested group configuration, depth 3. ",
            "args": [
              "subfeedback",
              "subbinding"
            ],
            "type": "Pylon.DB.Group.GroupConfig (Pylon.DB.Group.GroupFeedback2 subfeedback) (Pylon.DB.Group.GroupConfig2 subfeedback subbinding)"
          },
          {
            "name": "GroupConfig4",
            "comment": " Nested group configuration, depth 4. ",
            "args": [
              "subfeedback",
              "subbinding"
            ],
            "type": "Pylon.DB.Group.GroupConfig (Pylon.DB.Group.GroupFeedback3 subfeedback) (Pylon.DB.Group.GroupConfig3 subfeedback subbinding)"
          },
          {
            "name": "GroupFeedback2",
            "comment": " Nested group feedback, depth 2. ",
            "args": [
              "subfeedback"
            ],
            "type": "Pylon.DB.Group.GroupFeedback (Pylon.DB.Group.GroupFeedback subfeedback)"
          },
          {
            "name": "GroupFeedback3",
            "comment": " Nested group feedback, depth 3. ",
            "args": [
              "subfeedback"
            ],
            "type": "Pylon.DB.Group.GroupFeedback (Pylon.DB.Group.GroupFeedback2 subfeedback)"
          },
          {
            "name": "GroupFeedback4",
            "comment": " Nested group feedback, depth 4. ",
            "args": [
              "subfeedback"
            ],
            "type": "Pylon.DB.Group.GroupFeedback (Pylon.DB.Group.GroupFeedback3 subfeedback)"
          }
        ],
        "types": [
          {
            "name": "GroupConfig",
            "comment": " Specifies the binding behavior and mailbox address for a groupIntegrate ",
            "args": [
              "subfeedback",
              "subbinding"
            ],
            "cases": []
          },
          {
            "name": "GroupFeedback",
            "comment": " Feedback for nested group subscriptions. ",
            "args": [
              "subfeedback"
            ],
            "cases": [
              [
                "GroupSubscribedAdd",
                [
                  "ElmFire.Subscription"
                ]
              ],
              [
                "GroupSubscribedRemove",
                [
                  "ElmFire.Subscription"
                ]
              ],
              [
                "GroupAdd",
                [
                  "String"
                ]
              ],
              [
                "GroupRemove",
                [
                  "String"
                ]
              ],
              [
                "GroupRefresh",
                [
                  "String"
                ]
              ],
              [
                "GroupSub",
                [
                  "String",
                  "subfeedback"
                ]
              ],
              [
                "GroupCancelledAdd",
                []
              ],
              [
                "GroupCancelledRemove",
                []
              ],
              [
                "GroupAddSubscriptionError",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "GroupRemoveSubscriptionError",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "GroupReserved",
                [
                  "Pylon.DB.Group.GroupFeedbackReserved_"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "cancelAndResetDataGroup",
            "comment": " Convenience function for cancelling and resetting a `Group (DB.Data v)` at once, such that the next\ntime a `group*Subscriber` is reached, it will be immediately rebound. ",
            "type": "Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelAndResetGroup",
            "comment": " Convenience function for cancelling and resetting a group at once, such that the next time\na `group*Subscriber` is reached, it will be immediately rebound. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelAndResetGroup2",
            "comment": " cancelAndResetGroup for depth 2. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group2 subtype -> ( Pylon.DB.Group.Group2 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelAndResetGroup3",
            "comment": " cancelAndResetGroup for depth 3. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group3 subtype -> ( Pylon.DB.Group.Group3 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelAndResetGroup4",
            "comment": " cancelAndResetGroup for depth 4. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group4 subtype -> ( Pylon.DB.Group.Group4 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelDataGroup",
            "comment": " Convenience function for cancelling a `Group (DB.Data v)`. ",
            "type": "Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelGroup",
            "comment": " Cancel a `Group`'s active subscription if any, resulting in a `Group` that is not effected by\nsubscriptions until a call to `groupReset`. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelGroup2",
            "comment": " cancelGroup for depth 2. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group2 subtype -> ( Pylon.DB.Group.Group2 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelGroup3",
            "comment": " cancelGroup for depth 3. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group3 subtype -> ( Pylon.DB.Group.Group3 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelGroup4",
            "comment": " cancelGroup for depth 4. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group4 subtype -> ( Pylon.DB.Group.Group4 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "commitGroupDeltas",
            "comment": " Commit the deltas of a group without using any controller. ",
            "type": "Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "extractGroupSubFeedbackKeys",
            "comment": " Extract all unique keys from a list of GroupFeedbacks. ",
            "type": "List (Pylon.DB.Group.GroupFeedback subfeedback) -> List String"
          },
          {
            "name": "extractGroupSubFeedbackPairs",
            "comment": " Extract all `(key, feedback')` pairs from a list of GroupFeedbacks. ",
            "type": "List (Pylon.DB.Group.GroupFeedback subfeedback) -> List ( String, subfeedback )"
          },
          {
            "name": "flatten",
            "comment": " Flatten a nested group `Group (Group subtype)` to a group `Group subtype` using a path\nreduction. For example if pathMerge were\n\n    \\outer inner -> outer ++ \"/\" ++ inner\n\nthen the resulting keys would be path fragments such as `foo/bar` where `foo` is the key of the\nouter group and `bar` is the key of the inner group.\n\n",
            "type": "(String -> String -> String) -> Pylon.DB.Group.Group (Pylon.DB.Group.Group subtype) -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "getGroupCurrentData",
            "comment": " Get the current dictionary representing the group's sub-record mapping, without the most recent\ndeltas factored in. ",
            "type": "Pylon.DB.Group.Group subtype -> Dict.Dict String subtype"
          },
          {
            "name": "getGroupDataResDeltaList",
            "comment": " Get the current change in the group's data as a list of (key, (prior, current)) structures. ",
            "type": "Pylon.DB.Group.Group (Pylon.DB.Data v) -> List ( String , ( Pylon.Resource.Resource Pylon.DB.DBError v , Pylon.Resource.Resource Pylon.DB.DBError v ) )"
          },
          {
            "name": "getGroupDataResDeltas",
            "comment": " Get the current change in the group's data as a dictionary of resource pairs, each representing\nthe prior and current values of the data respectively. ",
            "type": "Pylon.DB.Group.Group (Pylon.DB.Data v) -> Dict.Dict String ( Pylon.Resource.Resource Pylon.DB.DBError v , Pylon.Resource.Resource Pylon.DB.DBError v )"
          },
          {
            "name": "getGroupDeltaData",
            "comment": " Get the current change in the group's data. ",
            "type": "Pylon.DB.Group.Group subtype -> Dict.Dict String (Maybe.Maybe subtype)"
          },
          {
            "name": "getGroupNextData",
            "comment": " Get what the group's data will be after the deltas are applied. Note that this result does not\naccount for cancellation and integration actions that will be applied by groupIntegrate. ",
            "type": "Pylon.DB.Group.Group subtype -> Dict.Dict String subtype"
          },
          {
            "name": "getGroupResDeltaList",
            "comment": " Get the current change in the group's data as a list of (key, (prior, current)) structures. ",
            "type": "Pylon.DB.Group.Group subtype -> List ( String , ( Pylon.Resource.Resource Pylon.DB.DBError subtype , Pylon.Resource.Resource Pylon.DB.DBError subtype ) )"
          },
          {
            "name": "getGroupResDeltas",
            "comment": " Get the current change in the group's data as a dictionary of resource pairs, each representing\nthe prior and current values of the data respectively. ",
            "type": "Pylon.DB.Group.Group subtype -> Dict.Dict String ( Pylon.Resource.Resource Pylon.DB.DBError subtype , Pylon.Resource.Resource Pylon.DB.DBError subtype )"
          },
          {
            "name": "getGroupSub",
            "comment": " ",
            "type": "String -> Pylon.DB.Group.Group subtype -> Maybe.Maybe subtype"
          },
          {
            "name": "getGroupSubData",
            "comment": " ",
            "type": "String -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> Pylon.Resource.Resource Pylon.DB.DBError v"
          },
          {
            "name": "getGroupSubFeedback",
            "comment": " Get the subfeedback in a given GroupFeedback if applicable. ",
            "type": "Pylon.DB.Group.GroupFeedback subfeedback -> Maybe.Maybe subfeedback"
          },
          {
            "name": "getGroupSubFeedbackKey",
            "comment": " Get the key of the subfeedback in a given GroupFeedback if applicable. ",
            "type": "Pylon.DB.Group.GroupFeedback subfeedback -> Maybe.Maybe String"
          },
          {
            "name": "getGroupSubFeedbackPair",
            "comment": " Get the subfeedback and it's associated key `(key, feedback')` in a given GroupFeedback if applicable. ",
            "type": "Pylon.DB.Group.GroupFeedback subfeedback -> Maybe.Maybe ( String, subfeedback )"
          },
          {
            "name": "groupAddSub",
            "comment": " Add a sub item to the group. This is how you can write new data within a group. One should use\n`groupAddSub` to add a new record, then invoke a write operation to add a new item. ",
            "type": "subtype -> String -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "groupConfig",
            "comment": " Construct a new group configuration. ",
            "type": "Signal.Address (List (Pylon.DB.Group.GroupFeedback subfeedback)) -> (Signal.Address (List subfeedback) -> Maybe.Maybe ElmFire.Location -> String -> subbinding) -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigBinding",
            "comment": " Interpret the current state of a `GroupConfig` by producing an immediate binding function that\npasses the current state of GroupConfig as it's self parameter. See `groupConfigSelf` and\n`groupConfigSelfForward` for a way to access the GroupConfig from within the binding function. ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> String -> subbinding"
          },
          {
            "name": "groupConfigDefaultLocation",
            "comment": " TODO: write docs ",
            "type": "ElmFire.Location -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigForward",
            "comment": " Construct a new group configuration with an action forwarding function. ",
            "type": "(List (Pylon.DB.Group.GroupFeedback subfeedback) -> List action) -> Signal.Address (List action) -> (Signal.Address (List subfeedback) -> Maybe.Maybe ElmFire.Location -> String -> subbinding) -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigGetAddress",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Signal.Address (List (Pylon.DB.Group.GroupFeedback subfeedback))"
          },
          {
            "name": "groupConfigGetLocation",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Maybe.Maybe ElmFire.Location"
          },
          {
            "name": "groupConfigGetPath",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> List String"
          },
          {
            "name": "groupConfigGetSubAddress",
            "comment": " Get the subaddress that will be used for a given key. ",
            "type": "String -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Signal.Address (List subfeedback)"
          },
          {
            "name": "groupConfigHasLocation",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Bool"
          },
          {
            "name": "groupConfigInputKey",
            "comment": " TODO: write docs ",
            "type": "String -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigLocation",
            "comment": " Set a location for this group configuration. Note that since the Location type is opaque to\nPylon and is \"generally not validated\" (via the ElmFire docs), it is not possible for us to ensure\nthat the current location always matches up with the current path. Please take care. ",
            "type": "ElmFire.Location -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigLocationOr",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> ElmFire.Location -> ElmFire.Location"
          },
          {
            "name": "groupConfigMaybeLocation",
            "comment": " Set a location if it exists. ",
            "type": "Maybe.Maybe ElmFire.Location -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigNoLocation",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigParentLocation",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigPathLocation",
            "comment": " Set a location for this group configuration by location and path. The root location will be\nderived from the given location (you should give the root location anyway for clarity's sake) and\nthen groupConfigSubLocation will be applied to each path element starting from the left, resulting\nin a properly rooted full path. This can be manipulated using groupConfigParentLocation with\nvalid results. ",
            "type": "List String -> ElmFire.Location -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigPopKey",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigRebind",
            "comment": " Rebind a group config to behave altogether differently. This is useful when propagating subbindings using the `*Self*` family. ",
            "type": "(Signal.Address (List subfeedback) -> Maybe.Maybe ElmFire.Location -> String -> subbinding') -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding'"
          },
          {
            "name": "groupConfigRebindSelf",
            "comment": " Rebind a group config to behave altogether differently. This is useful when propagating subbindings using the `*Self*` family. ",
            "type": "(Pylon.DB.Group.GroupConfig subfeedback subbinding' -> String -> subbinding') -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding'"
          },
          {
            "name": "groupConfigRootLocation",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigSelf",
            "comment": " Construct a new self aware group configuration. ",
            "type": "Signal.Address (List (Pylon.DB.Group.GroupFeedback subfeedback)) -> (Pylon.DB.Group.GroupConfig subfeedback subbinding -> String -> subbinding) -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigSelfForward",
            "comment": " Construct a new self aware group configuration with an action forwarding function. ",
            "type": "(List (Pylon.DB.Group.GroupFeedback subfeedback) -> List action) -> Signal.Address (List action) -> (Pylon.DB.Group.GroupConfig subfeedback subbinding -> String -> subbinding) -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigSetPath",
            "comment": " TODO: write docs ",
            "type": "List String -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigSubLocation",
            "comment": " TODO: write docs ",
            "type": "String -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.GroupConfig subfeedback subbinding"
          },
          {
            "name": "groupConfigTopKey",
            "comment": " TODO: write docs ",
            "type": "Pylon.DB.Group.GroupConfig subfeedback subbinding -> Maybe.Maybe String"
          },
          {
            "name": "groupDataInput",
            "comment": " Convenience concrete `DB.Data` record group update function accepting a list of `DB.Feedback`. ",
            "type": "List (Pylon.DB.Group.GroupFeedback (Pylon.DB.Feedback v)) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> Pylon.DB.Group.Group (Pylon.DB.Data v)"
          },
          {
            "name": "groupDataInputOne",
            "comment": " Convenience concrete `DB.Data` record group update function accepting one `DB.Feedback`. ",
            "type": "Pylon.DB.Group.GroupFeedback (Pylon.DB.Feedback v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> Pylon.DB.Group.Group (Pylon.DB.Data v)"
          },
          {
            "name": "groupDataIntegrate",
            "comment": " Convenient short version for groups of just data. This equivalency holds:\n\n    groupDataIntegrate controllers =\n      groupIntegrate controllers DB.cancel DB.subscribe\n\n",
            "type": "List (Pylon.DB.Group.GroupConfig (Pylon.DB.Feedback v) (Pylon.DB.Binding v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.GroupConfig (Pylon.DB.Feedback v) (Pylon.DB.Binding v) -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> ( Pylon.DB.Group.Group (Pylon.DB.Data v) , List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupDataResDeltaFoldL",
            "comment": " Fold from the left across the deltas for a data group, using a particular fold function and initial output. ",
            "type": "(String -> ( Pylon.Resource.Resource Pylon.DB.DBError v , Pylon.Resource.Resource Pylon.DB.DBError v ) -> foldout -> foldout) -> foldout -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> foldout"
          },
          {
            "name": "groupDataResDeltaFoldR",
            "comment": " Fold from the right across the deltas for a data group, using a particular fold function and initial output. ",
            "type": "(String -> ( Pylon.Resource.Resource Pylon.DB.DBError v , Pylon.Resource.Resource Pylon.DB.DBError v ) -> foldout -> foldout) -> foldout -> Pylon.DB.Group.Group (Pylon.DB.Data v) -> foldout"
          },
          {
            "name": "groupDeriveDeltaFoldL",
            "comment": " Fold from the left across the deltas, given a given derivation function and using a particular fold function and initial output. ",
            "type": "(subtype -> Pylon.Resource.Resource Pylon.DB.DBError v) -> (String -> ( Pylon.Resource.Resource Pylon.DB.DBError v , Pylon.Resource.Resource Pylon.DB.DBError v ) -> foldout -> foldout) -> foldout -> Pylon.DB.Group.Group subtype -> foldout"
          },
          {
            "name": "groupDeriveDeltaFoldR",
            "comment": " Fold from the right across the deltas, given a given derivation function and using a particular fold function and initial output. ",
            "type": "(subtype -> Pylon.Resource.Resource Pylon.DB.DBError v) -> (String -> ( Pylon.Resource.Resource Pylon.DB.DBError v , Pylon.Resource.Resource Pylon.DB.DBError v ) -> foldout -> foldout) -> foldout -> Pylon.DB.Group.Group subtype -> foldout"
          },
          {
            "name": "groupDeriveSub",
            "comment": " ",
            "type": "(subtype -> derived) -> String -> Pylon.DB.Group.Group subtype -> Maybe.Maybe derived"
          },
          {
            "name": "groupDoEachSub",
            "comment": " Perform groupDoSub at every existing key after deltas. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupDoSub",
            "comment": " Update the data at the given key using an effector, as documented in `Pylon.App`. This can be\nused to nest the effectors provided by `Pylon.DB`, or in the case of nested groups, nesting can be\ndone as many layers deep as needed. _NOTE_ that this is how you can perform concrete operations\n`op*` on `DB.DB.Data` records bound recursively within the group. ",
            "type": "(subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> String -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupInput",
            "comment": " Group feedback update function accepting a list of `DB.Feedback`. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> List (Pylon.DB.Group.GroupFeedback subfeedback) -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "groupInput2",
            "comment": " groupInput for depth 2. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> List (Pylon.DB.Group.GroupFeedback2 subfeedback) -> Pylon.DB.Group.Group2 subtype -> Pylon.DB.Group.Group2 subtype"
          },
          {
            "name": "groupInput3",
            "comment": " groupInput for depth 3. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> List (Pylon.DB.Group.GroupFeedback3 subfeedback) -> Pylon.DB.Group.Group3 subtype -> Pylon.DB.Group.Group3 subtype"
          },
          {
            "name": "groupInput4",
            "comment": " groupInput for depth 4. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> List (Pylon.DB.Group.GroupFeedback4 subfeedback) -> Pylon.DB.Group.Group4 subtype -> Pylon.DB.Group.Group4 subtype"
          },
          {
            "name": "groupInputOne",
            "comment": " Group feedback update function accepting one `DB.Feedback`. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> Pylon.DB.Group.GroupFeedback subfeedback -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "groupInputOne2",
            "comment": " groupInputOne for depth 2. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> Pylon.DB.Group.GroupFeedback2 subfeedback -> Pylon.DB.Group.Group2 subtype -> Pylon.DB.Group.Group2 subtype"
          },
          {
            "name": "groupInputOne3",
            "comment": " groupInputOne for depth 3. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> Pylon.DB.Group.GroupFeedback3 subfeedback -> Pylon.DB.Group.Group3 subtype -> Pylon.DB.Group.Group3 subtype"
          },
          {
            "name": "groupInputOne4",
            "comment": " groupInputOne for depth 4. ",
            "type": "subtype -> (subfeedback -> subtype -> subtype) -> Pylon.DB.Group.GroupFeedback4 subfeedback -> Pylon.DB.Group.Group4 subtype -> Pylon.DB.Group.Group4 subtype"
          },
          {
            "name": "groupIntegrate",
            "comment": " Integrate a group using the given controller functions, a configuration with the sub-binding\nfunction, and the address to send GroupFeedback to.\n\nThis is a more configurable version of groupSubscriber. It is now the underlying code for\ngroupSubscriber. `groupSubscriber` is depreciated in favor of this, and can be found in\n`Pylon.Legacy.Group`. ",
            "type": "List (Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )) -> (subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> (subbinding -> subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupIntegrate2",
            "comment": " groupIntegrate for depth 2. ",
            "type": "List (Pylon.DB.Group.GroupConfig2 subfeedback subbinding -> Pylon.DB.Group.Group2 subtype -> ( Pylon.DB.Group.Group2 subtype, List (Pylon.DB.DBTask never) )) -> List (Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )) -> (subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> (subbinding -> subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.GroupConfig2 subfeedback subbinding -> Pylon.DB.Group.Group2 subtype -> ( Pylon.DB.Group.Group2 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupIntegrate3",
            "comment": " groupIntegrate for depth 3. ",
            "type": "List (Pylon.DB.Group.GroupConfig3 subfeedback subbinding -> Pylon.DB.Group.Group3 subtype -> ( Pylon.DB.Group.Group3 subtype, List (Pylon.DB.DBTask never) )) -> List (Pylon.DB.Group.GroupConfig2 subfeedback subbinding -> Pylon.DB.Group.Group2 subtype -> ( Pylon.DB.Group.Group2 subtype, List (Pylon.DB.DBTask never) )) -> List (Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )) -> (subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> (subbinding -> subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.GroupConfig3 subfeedback subbinding -> Pylon.DB.Group.Group3 subtype -> ( Pylon.DB.Group.Group3 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupIntegrate4",
            "comment": " groupIntegrate for depth 4. ",
            "type": "List (Pylon.DB.Group.GroupConfig4 subfeedback subbinding -> Pylon.DB.Group.Group4 subtype -> ( Pylon.DB.Group.Group4 subtype, List (Pylon.DB.DBTask never) )) -> List (Pylon.DB.Group.GroupConfig3 subfeedback subbinding -> Pylon.DB.Group.Group3 subtype -> ( Pylon.DB.Group.Group3 subtype, List (Pylon.DB.DBTask never) )) -> List (Pylon.DB.Group.GroupConfig2 subfeedback subbinding -> Pylon.DB.Group.Group2 subtype -> ( Pylon.DB.Group.Group2 subtype, List (Pylon.DB.DBTask never) )) -> List (Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )) -> (subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> (subbinding -> subtype -> ( subtype, List (Pylon.DB.DBTask never) )) -> Pylon.DB.Group.GroupConfig4 subfeedback subbinding -> Pylon.DB.Group.Group4 subtype -> ( Pylon.DB.Group.Group4 subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupRemoveSub",
            "comment": " Remove a sub item from the group. Note that this should very, very rarely ever be called manually\nunless the group in question is deliberately not currently bound, in which case this becomes a simple\ncollection type anyway. ",
            "type": "String -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "groupResDeltaFoldL",
            "comment": " Fold from the left across the deltas, using a particular fold function and initial output. ",
            "type": "(String -> ( Pylon.Resource.Resource Pylon.DB.DBError subtype , Pylon.Resource.Resource Pylon.DB.DBError subtype ) -> foldout -> foldout) -> foldout -> Pylon.DB.Group.Group subtype -> foldout"
          },
          {
            "name": "groupResDeltaFoldR",
            "comment": " Fold from the right across the deltas, using a particular fold function and initial output. ",
            "type": "(String -> ( Pylon.Resource.Resource Pylon.DB.DBError subtype , Pylon.Resource.Resource Pylon.DB.DBError subtype ) -> foldout -> foldout) -> foldout -> Pylon.DB.Group.Group subtype -> foldout"
          },
          {
            "name": "groupSetSub",
            "comment": " This is for directly setting a sub item's current value in the group. This should be used in\nprocessing of derived groups that are not associated with a running controller from a GroupConfig.\n",
            "type": "String -> subtype -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "groupSubscription",
            "comment": " Controller for groupIntegrate that carries out the behavior groupSubscriber, which is the most\nconvenient option for mirroring data from Firebase directly. Since the previous definition was\nfrustratingly limited to this, I was not able to configure the group to mirror a different source,\nsuch as bindings derived from the data in a mirror. ",
            "type": "ElmFire.OrderOptions -> Pylon.DB.Group.GroupConfig subfeedback subbinding -> Pylon.DB.Group.Group subtype -> ( Pylon.DB.Group.Group subtype, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "groupUpdateSub",
            "comment": " Update the item at the given key using a transformation function. This can be used to nest the\ntransformations provided by `Pylon.DB`, or in the case of nested groups from this module\n(`Pylon.DB.Group`), nesting can be done as many layers deep as needed. ",
            "type": "(subtype -> subtype) -> String -> Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "newGroup",
            "comment": " A new group item. ",
            "type": "Pylon.DB.Group.Group subtype"
          },
          {
            "name": "resetGroup",
            "comment": " Reset a `Group`, such that the next time a `group*Subscriber` is reached, the `Group` will be\nrebound to the given `GroupBinding`.  ",
            "type": "Pylon.DB.Group.Group subtype -> Pylon.DB.Group.Group subtype"
          },
          {
            "name": "voidGroup",
            "comment": " A new void group item, which is to say that it starts in the cancelled state, so subscriptions\nwill have no effect when reached until a call to `resetGroup`. ",
            "type": "Pylon.DB.Group.Group subtype"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.DB",
        "comment": " High level 2-way data binding against Firebase using ElmFire. For 2-way binding of arbitrary,\npossibly nested collections of data, use `Pylon.DB.Group`. You should have ElmFire installed to\nuse this, and in order to avoid redundancy. A more general API that can be wired to other DB\nbackends is planned, but not promised.\n\n# Types\n@docs DBTask, DBError, Feedback, Config, Binding, Operation, Data\n\n# Define Operations\n@docs opSet, opSetAndPrioritize, opPrioritize, opUpdateChildren, opSetOrUpdateChildren, opDelete\n\n# Configuration\n@docs config, configDecoder, configEncoder, nilConfig, withEncoder, withDecoder, bindingTo, bindingFrom, sendingTo, forwardingTo\n\n# Data Constructors\n@docs newData, voidData\n\n# Data Binding\n@docs subscribe, cancel, reset, cancelAndReset, inputOne, input\n\n# Interrogating Data\n@docs getResource, getPriorResource, getLastFailed\n\n# Operate on Data\n@docs doOperationIf, doMap, doTransform, enqueueOperation, flushQueue, doOperation, doRetry, doOperationSimple\n\n",
        "aliases": [
          {
            "name": "Binding",
            "comment": " Data binding. Consists of a `Config`, an address for `Feedback`, and a location in Firebase. ",
            "args": [
              "v"
            ],
            "type": "{ config : Pylon.DB.Config v , address : Signal.Address (List (Pylon.DB.Feedback v)) , location : ElmFire.Location }"
          },
          {
            "name": "Config",
            "comment": " Data configuration, consisting of a JSON decoder/encoder pair. ",
            "args": [
              "v"
            ],
            "type": "{ decoder : Json.Decode.Decoder v, encoder : v -> Json.Encode.Value }"
          },
          {
            "name": "DBTask",
            "comment": " An alias for `App.FinalTask`. Kept for legacy reasons in our proprietary codebase. ",
            "args": [
              "never"
            ],
            "type": "Pylon.App.FinalTask never"
          },
          {
            "name": "Data",
            "comment": " Represents a piece of data that may be bound to a Firebase location. ",
            "args": [
              "v"
            ],
            "type": "{ subscription : Pylon.Resource.Resource Pylon.DB.DBError ElmFire.Subscription , value : Pylon.Resource.Resource Pylon.DB.DBError v , priorValue : Pylon.Resource.Resource Pylon.DB.DBError v , lastFailed : Maybe.Maybe (Pylon.DB.Operation v) , queue : List (Pylon.DB.Operation v) }"
          }
        ],
        "types": [
          {
            "name": "DBError",
            "comment": " A database error. ",
            "args": [],
            "cases": [
              [
                "QueryErrorTag",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "PermissionErrorTag",
                [
                  "String"
                ]
              ],
              [
                "DataUnavailableErrorTag",
                [
                  "String"
                ]
              ],
              [
                "OperationErrorTag",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "SubscriptionErrorTag",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "DecodingErrorTag",
                [
                  "String"
                ]
              ],
              [
                "WriteLocationParentIsData",
                []
              ],
              [
                "RecievedSubFeedbackForGroup",
                []
              ],
              [
                "RemovalPathDoesNotExist",
                [
                  "Pylon.DB.Path.Path"
                ]
              ]
            ]
          },
          {
            "name": "Feedback",
            "comment": " Feedback from the database. ",
            "args": [
              "v"
            ],
            "cases": [
              [
                "Subscribed",
                [
                  "ElmFire.Subscription"
                ]
              ],
              [
                "SubscriptionError",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "Cancelled",
                []
              ],
              [
                "DecodingFailed",
                [
                  "String"
                ]
              ],
              [
                "QueryError",
                [
                  "ElmFire.Error"
                ]
              ],
              [
                "Updated",
                [
                  "v"
                ]
              ],
              [
                "UpdatedToVoid",
                []
              ],
              [
                "OperationError",
                [
                  "Pylon.DB.Operation v",
                  "ElmFire.Error"
                ]
              ]
            ]
          },
          {
            "name": "Operation",
            "comment": " Opaque type for a database operation. ",
            "args": [
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "bindingFrom",
            "comment": " Flipped version of `bindingTo` that composes more naturally in the event that your configuration\nwas created elsewhere and reused with a new ElmFire location. ",
            "type": "Pylon.DB.Config v -> ElmFire.Location -> Pylon.DB.Binding v"
          },
          {
            "name": "bindingTo",
            "comment": " Create a new data binding from a configuration and an ElmFire location. ",
            "type": "ElmFire.Location -> Pylon.DB.Config v -> Pylon.DB.Binding v"
          },
          {
            "name": "cancel",
            "comment": " Cancel your subscription to the data. This puts the data in a void state, so that the\n`subscribe` function ceases to have any effect. In order to reactivate the binding, you must\ncall `reset`. A convenience function `cancelAndReset` is provided, which allows you to skip the\nsecond call if you simply wish to refresh, but not disable, the data binding. ",
            "type": "Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "cancelAndReset",
            "comment": " A convenience function that cancels any current bindings that might be live, then `reset`s the\nstructure so that the next time `subscribe` is reached the bindings will be reactivated immediately.\n",
            "type": "Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "config",
            "comment": " Declare a data configuration with a decoder/encoder pair. ",
            "type": "Json.Decode.Decoder v -> (v -> Json.Encode.Value) -> Pylon.DB.Config v"
          },
          {
            "name": "configDecoder",
            "comment": " Declare a data configuration with a decoder, but a dummy encoder. This is useful when you only\nwant one way binding from the server, or if you wish to declare the encoder and encoder seperately\nfor aesthetic reasons. ",
            "type": "Json.Decode.Decoder v -> Pylon.DB.Config v"
          },
          {
            "name": "configEncoder",
            "comment": " Same as above, but declare only an encoder. Offered for symmetry. ",
            "type": "(v -> Json.Encode.Value) -> Pylon.DB.Config v"
          },
          {
            "name": "doMap",
            "comment": " Map the current value of a bound `Data` record _iff_ the value is currently known. ",
            "type": "Pylon.DB.Binding v -> (v -> v) -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "doOperation",
            "comment": " Dispatch the given operation immediately on a bound `Data` record. ",
            "type": "Pylon.DB.Binding v -> Pylon.DB.Operation v -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "doOperationIf",
            "comment": " Conditionally dispatch an operation on a bound `Data` record. ",
            "type": "(Pylon.Resource.Resource Pylon.DB.DBError v -> Bool) -> Pylon.DB.Binding v -> Pylon.DB.Operation v -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "doOperationSimple",
            "comment": " Dispatch the given operation without binding to data. ",
            "type": "ElmFire.Location -> Pylon.DB.Config v -> Pylon.DB.Operation v -> List (Pylon.DB.DBTask never)"
          },
          {
            "name": "doRetry",
            "comment": " Retry the last operation that failed on a given bound `Data` record in the case that any\nexists. ",
            "type": "Pylon.DB.Binding v -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "doTransform",
            "comment": " Transform the resource within a bound `Data` record. Do not use this unless you absolutely know what you are doing! ",
            "type": "Pylon.DB.Binding v -> (Pylon.Resource.Resource Pylon.DB.DBError v -> Pylon.Resource.Resource Pylon.DB.DBError v) -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "enqueueOperation",
            "comment": " Add an operation to the queue. ",
            "type": "Pylon.DB.Operation v -> Pylon.DB.Data v -> Pylon.DB.Data v"
          },
          {
            "name": "flushQueue",
            "comment": " Flush the queue of pending operations, resulting in a list of tasks. ",
            "type": "Pylon.DB.Binding v -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "forwardingTo",
            "comment": " Set the `Feedback` address for a data binding to some forwarding address. Commonly, this is used\nto nest `Feedback` within an action type from your application. ",
            "type": "(List (Pylon.DB.Feedback v) -> List action) -> Signal.Address (List action) -> Pylon.DB.Binding v -> Pylon.DB.Binding v"
          },
          {
            "name": "getLastFailed",
            "comment": " Get the last operation that failed on the record, if it exists. ",
            "type": "Pylon.DB.Data v -> Maybe.Maybe (Pylon.DB.Operation v)"
          },
          {
            "name": "getPriorResource",
            "comment": " Get the prior value of the resource tracked in the `Data` record, as of the last time it changed. ",
            "type": "Pylon.DB.Data v -> Pylon.Resource.Resource Pylon.DB.DBError v"
          },
          {
            "name": "getResource",
            "comment": " Get the underlying resource tracked in the `Data` record. ",
            "type": "Pylon.DB.Data v -> Pylon.Resource.Resource Pylon.DB.DBError v"
          },
          {
            "name": "input",
            "comment": " Input list update function for `Data`. ",
            "type": "List (Pylon.DB.Feedback v) -> Pylon.DB.Data v -> Pylon.DB.Data v"
          },
          {
            "name": "inputOne",
            "comment": " Single input update function for `Data`. ",
            "type": "Pylon.DB.Feedback v -> Pylon.DB.Data v -> Pylon.DB.Data v"
          },
          {
            "name": "newData",
            "comment": " An empty, unbound data. Always initialize instance of Data to this and then invoke `subscribe`\nto enable data flow back to the client. ",
            "type": "Pylon.DB.Data v"
          },
          {
            "name": "nilConfig",
            "comment": " A configuration that hasn't yet been filled out. The decoder always fails, and the encoder\nalways encodes a `null`. Used by `configDecoder` and `configEncoder`. ",
            "type": "Pylon.DB.Config v"
          },
          {
            "name": "opDelete",
            "comment": " Delete the bound data. ",
            "type": "Pylon.DB.Operation v"
          },
          {
            "name": "opPrioritize",
            "comment": " Give the data a Firebase priority. ",
            "type": "ElmFire.Priority -> Pylon.DB.Operation v"
          },
          {
            "name": "opSet",
            "comment": " Set the data to some value. ",
            "type": "v -> Pylon.DB.Operation v"
          },
          {
            "name": "opSetAndPrioritize",
            "comment": " Set the data to some value and give it a Firebase priority. ",
            "type": "v -> ElmFire.Priority -> Pylon.DB.Operation v"
          },
          {
            "name": "opSetOrUpdateChildren",
            "comment": " Combination operation that sets the data if the data is known to be void, or else performs the\nabove listed `opUpdateChildren`. ",
            "type": "v -> Pylon.DB.Operation v"
          },
          {
            "name": "opUpdateChildren",
            "comment": " Update the children in the JSON structure of the data. This diffs the value of the data\ncurrently against the given value after encoding so that a minimal update is always done.\n\nTODO : This may not work right in the event that the data has been updated remotely but not yet\nsynced to the server. One way around this might be to manually fetch the data first as part of\nthe operation. ",
            "type": "v -> Pylon.DB.Operation v"
          },
          {
            "name": "reset",
            "comment": " Reset the given data from a void or error state so that the binding can be attempted again the\nnext time `subscribe` is reached. Notice that this is a simple transformation and not an effector,\nso if the data binding is live, this will have no effect. If you wish to cancel an existing\nsubscription that is live and has not erred, then you should use `cancel`, or `cancelAndReset` in\nthe case that you wish to rebind the data right away. ",
            "type": "Pylon.DB.Data v -> Pylon.DB.Data v"
          },
          {
            "name": "sendingTo",
            "comment": " Set the `Feedback` address for a data binding. By default, data bindings are bound to a\nhidden drain so that you can more comfortably construct bindings without being sure of the target\naddress right away. ",
            "type": "Signal.Address (List (Pylon.DB.Feedback v)) -> Pylon.DB.Binding v -> Pylon.DB.Binding v"
          },
          {
            "name": "subscribe",
            "comment": " `subscribe` is an effector (see Pylon.App for what what we define an effector to be) that takes\na `Binding` and a `Data`. The resulting tasks when executed will set up 2 way data binding using the\n`Config` within the `Binding` to encode and decode the data, and sending all feedback to the\naddress within the `Binding`.  _Take care to set an address on your `Binding`_, or else the\nfeedback from the database _will not be recieved by your application._ ",
            "type": "Pylon.DB.Binding v -> Pylon.DB.Data v -> ( Pylon.DB.Data v, List (Pylon.DB.DBTask never) )"
          },
          {
            "name": "voidData",
            "comment": " A new void data item, which will not be bound by a subscription until it is `reset`. ",
            "type": "Pylon.DB.Data v"
          },
          {
            "name": "withDecoder",
            "comment": " Add a decoder to an existing configuration. ",
            "type": "Json.Decode.Decoder v -> Pylon.DB.Config v -> Pylon.DB.Config v"
          },
          {
            "name": "withEncoder",
            "comment": " Add an encoder to an existing configuration. ",
            "type": "(v -> Json.Encode.Value) -> Pylon.DB.Config v -> Pylon.DB.Config v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.DB.Path",
        "comment": " This path module is designed to work with Pylon.DB.Tree and ElmFire.\n\nPaths must be manipulated using this API. You can transform ElmFire locations with paths.\n\n# Path Type\n@docs Path\n\n# Constructors\n@docs base, single\n\n# List Conversion\n@docs toList, fromList, toStack, fromStack\n\n# Inquiry\n@docs countElements, top, last, first, depth\n\n# Walking\n@docs child, parent, push, pop, up, truncate\n\n# Special Operations\n@docs foldBase, foldTop, join\n\n# Manipulations for `ElmFire.Location`\n@docs childPath, childLocation, absoluteLocation\n\n# Comparisons\n@docs isSame\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Path",
            "comment": " Opaque type representing a path. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "absoluteLocation",
            "comment": " Given the ElmFire root location used by your application (it will be rooted just in case) and a\npath, give a location that represents it as an absolute path in to your database. ",
            "type": "ElmFire.Location -> Pylon.DB.Path.Path -> ElmFire.Location"
          },
          {
            "name": "base",
            "comment": " A base path. Represents no path. ",
            "type": "Pylon.DB.Path.Path"
          },
          {
            "name": "child",
            "comment": " Append a new last element to the path. Synonym: `push` ",
            "type": "String -> Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          },
          {
            "name": "childLocation",
            "comment": " Given an ElmFire location and a path adjust the location relative to it's current position. ",
            "type": "ElmFire.Location -> Pylon.DB.Path.Path -> ElmFire.Location"
          },
          {
            "name": "childPath",
            "comment": " Take two paths, setting the first as the child path of the second. ",
            "type": "Pylon.DB.Path.Path -> Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          },
          {
            "name": "countElements",
            "comment": " Count of the elements in the path. ",
            "type": "Pylon.DB.Path.Path -> Int"
          },
          {
            "name": "depth",
            "comment": " Synonym for countElements. ",
            "type": "Pylon.DB.Path.Path -> Int"
          },
          {
            "name": "first",
            "comment": " Get first element of the path. NOTE: _O(n)_ ",
            "type": "Pylon.DB.Path.Path -> Maybe.Maybe String"
          },
          {
            "name": "foldBase",
            "comment": " Fold over a path's elements from the _base_. ",
            "type": "(String -> typeout -> typeout) -> typeout -> Pylon.DB.Path.Path -> typeout"
          },
          {
            "name": "foldTop",
            "comment": " Fold over a path's elements from the _top_. ",
            "type": "(String -> typeout -> typeout) -> typeout -> Pylon.DB.Path.Path -> typeout"
          },
          {
            "name": "fromList",
            "comment": " Create a path from a list of strings, ordered from the base to the top. ",
            "type": "List String -> Pylon.DB.Path.Path"
          },
          {
            "name": "fromStack",
            "comment": " Set the internal stack. ",
            "type": "List String -> Pylon.DB.Path.Path"
          },
          {
            "name": "isSame",
            "comment": " Compare two paths for equality. ",
            "type": "Pylon.DB.Path.Path -> Pylon.DB.Path.Path -> Bool"
          },
          {
            "name": "join",
            "comment": " Join the path elements with a glue delimiter, like `List.join`. ",
            "type": "String -> Pylon.DB.Path.Path -> String"
          },
          {
            "name": "last",
            "comment": " Get the last element of the path. NOTE : _O(1)_ ",
            "type": "Pylon.DB.Path.Path -> Maybe.Maybe String"
          },
          {
            "name": "parent",
            "comment": " Remove the last element from the path. Synonym: `pop` ",
            "type": "Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          },
          {
            "name": "pop",
            "comment": " Pop an element from the end of the path. Synonym: `parent` ",
            "type": "Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          },
          {
            "name": "push",
            "comment": " Push an element to the end of the path. Synonym: `child` ",
            "type": "String -> Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          },
          {
            "name": "single",
            "comment": " A path with a single element. ",
            "type": "String -> Pylon.DB.Path.Path"
          },
          {
            "name": "toList",
            "comment": " Interpret the path as a list of strings ordered from base to top. ",
            "type": "Pylon.DB.Path.Path -> List String"
          },
          {
            "name": "toStack",
            "comment": " Get the internal stack. ",
            "type": "Pylon.DB.Path.Path -> List String"
          },
          {
            "name": "top",
            "comment": " Get the last element of the path. Synonym for last. NOTE : _O(1)_ ",
            "type": "Pylon.DB.Path.Path -> Maybe.Maybe String"
          },
          {
            "name": "truncate",
            "comment": " Truncate the path to _n_ members by popping until that element count is attained. ",
            "type": "Int -> Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          },
          {
            "name": "up",
            "comment": " Go up in the path by _n_ parents. Some equivalencies:\n\n  Path.up 1 mypath == Path.parent mypath == Path.pop mypath\n  Path.up (Path.countElements mypath) mypath = Path.base\n\nSynonym : `popMany`\n",
            "type": "Int -> Pylon.DB.Path.Path -> Pylon.DB.Path.Path"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.App",
        "comment": " Application module. Similar to StartApp, but with a few extra utilities. Heavily pruned and\nsimplified with respect to it's predecessor in Scaffold. No longer suffers from heinous type\nbloat.\n\n\n# Configuration And Application Structures\n\nThe basic building blocks of the application top level.\n\n@docs Options, Config, Output\n\n\n# Task Types\n\n@docs Dispatch, ActionTask, FinalTask\n\n\n# Task List Dispatch Methods\n\n@docs parallel, sequence\n\n\n# Constructing Options\n\n@docs defaultOptions, optionsDispatchMethod, optionsRunInputsOnStartup\n\n\n# Configuration DSL\n\nCumulatively build a configuration using this convenient DSL, starting either from a `nilConfig`\nor starting from a `configWithOptions`. The latter can be very nice for flowing right in to building\na configuration from building an `Options` struct.\n\n@docs nilConfig, configWithOptions, configOptions, configInit, configUpdateList, configUpdate, configStage, configPresent, configInput, configListInput, configRawInput\n\n# Chaining Effectors\n\nEffectors are functions which give a pair, the first element of which is the of the same type as the\nlast argument, and the second element of which is some list of tasks. Chaining is a useful way to\noperate on a single model with a sequence of actions, all of which might produce tasks. We use\nlists of tasks so that we can elegantly account for the case where no tasks are produced as well as\npossibly producing a number of tasks to execute. Such task lists can be either explicitly reduced\nby the user using `finalizeTasks`, or they can be converted to `ActionTask`s and returned to the\ntop level, where the configured `Dispatch` method is used to run the tasks.\n\n@docs chain, chainIf, chainWhile, chainSub, chainSubIf, chainSubMaybe, chainFinalizingEach, asEffector, mappedEffector, noEffect, doEffect, finalizedEffector\n\n\n# Task Manipulation\n\nSend the results of tasks to addresses, and dispatch them. Use of existing task primitives to handle\nsituations outside the scope of simply sending/forwarding results to the app's mailbox address and\ndetermining their order of execution is encouraged, so that a repeat of the awful `agent` DSL\nfrom Pylon's predecessor Scaffold is not repeated.\n\n@docs promoteActions, handleErrors, mapErrors, sendActions, forwardActions, sendErrorActions, sendResultActions, finalizeTasks, finalizeTask, thenDo, thenDoNothing\n\n\n# Running The Application\n\n`run` will allow you to run an application given an initial model and view with a configuration.\n`doCycle` exposes the internal functionality used by run, with a little syntactic sugar.\n\n@docs doCycle, run\n\n\n# Manipulating Sub Models\n@docs doSubUpdate, doSubStage, doSubPresent, doSubCycle\n\n",
        "aliases": [
          {
            "name": "ActionTask",
            "comment": " A task which results in a list of actions. This can be routed to an address. ",
            "args": [
              "errortype",
              "actiontype"
            ],
            "type": "Task.Task errortype (List actiontype)"
          },
          {
            "name": "Config",
            "comment": " Configure an application. Sane defaults are provided so that you can construct as much or as\nlittle as you need using the provided DSL. ",
            "args": [
              "never",
              "modeltype",
              "actiontype",
              "viewtype"
            ],
            "type": "{ init : Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) ) , inputs : List (Signal.Signal (List actiontype)) , update : List actiontype -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) ) , stage : Signal.Address (List actiontype) -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) ) , present : Signal.Address (List actiontype) -> Time.Time -> modeltype -> ( Maybe.Maybe viewtype, List (Pylon.App.FinalTask never) ) , options : Pylon.App.Options }"
          },
          {
            "name": "FinalTask",
            "comment": " FinalTask represents a task whose results have been routed to an address, and is ready to be\nexecuted. ",
            "args": [
              "never"
            ],
            "type": "Task.Task never ()"
          },
          {
            "name": "Options",
            "comment": " Some extra options for apps.\n\n    runInputsOnStartup    -- If this is true, run the actions produced by the initial input signals\n                          -- on startup.\n\n    dispatchMethod        -- May either dispatch the top level tasks returned in sequence or in\n                          -- parallel.\n\n",
            "args": [],
            "type": "{ runInputsOnStartup : Bool, dispatchMethod : Pylon.App.Dispatch }"
          },
          {
            "name": "Output",
            "comment": " Output of the application. Contains the current view, the current model, the current time, and the latest task if it exists. ",
            "args": [
              "never",
              "modeltype",
              "viewtype"
            ],
            "type": "{ view : Signal.Signal viewtype , model : Signal.Signal modeltype , now : Signal.Signal Time.Time , tasks : Signal.Signal (Pylon.App.FinalTask never) }"
          }
        ],
        "types": [
          {
            "name": "Dispatch",
            "comment": " Task dispatch mode. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "asEffector",
            "comment": " If you want to take a simple transformation `a -> a` and include it in a chain of\n`a -> (a, List (Task z r))`, this is your tool for doing that. ",
            "type": "(modeltype -> modeltype) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "chain",
            "comment": " Utility function for chaining effectors. ",
            "type": "List (modeltype -> ( modeltype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "chainFinalizingEach",
            "comment": " Chaining effectors, finalizing each resultant task list seperately using the given dispatch\nmethod. ",
            "type": "Pylon.App.Dispatch -> List (modeltype -> ( modeltype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "chainIf",
            "comment": " Conditionally chain some effectors. ",
            "type": "(modeltype -> Bool) -> List (modeltype -> ( modeltype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "chainSub",
            "comment": " Chain a list of effectors on a sub model. Provide a fetch and an update function to extract\nand replace the sub model, before and after executing the chain of effectors on the sub model\nrespectively. ",
            "type": "(modeltype -> innertype) -> (innertype -> modeltype -> modeltype) -> List (innertype -> ( innertype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "chainSubIf",
            "comment": " Conditionally chain some effectors on an inner model. ",
            "type": "(modeltype -> Bool) -> (modeltype -> innertype) -> (innertype -> modeltype -> modeltype) -> List (innertype -> ( innertype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "chainSubMaybe",
            "comment": " Execute the list of effectors on the Maybe sub model only if it is not Nothing. ",
            "type": "(modeltype -> Maybe.Maybe innertype) -> (Maybe.Maybe innertype -> modeltype -> modeltype) -> List (innertype -> ( innertype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "chainWhile",
            "comment": " Loop a list of effectors until the predicate is no longer satisfied. ",
            "type": "(modeltype -> Bool) -> List (modeltype -> ( modeltype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "configInit",
            "comment": " Set an initialization function on the app. ",
            "type": "(Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configInput",
            "comment": " Configure an input. ",
            "type": "(inputtype -> actiontype) -> Signal.Signal inputtype -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configListInput",
            "comment": " Configure a list input. ",
            "type": "(List inputtype -> List actiontype) -> Signal.Signal (List inputtype) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configOptions",
            "comment": " Set some extra options on the configuration. ",
            "type": "Pylon.App.Options -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configPresent",
            "comment": " Set a presentation function on the app. This can optionally update the view of the application,\nor not by returning nothing. ",
            "type": "(Signal.Address (List actiontype) -> Time.Time -> modeltype -> ( Maybe.Maybe viewtype, List (Pylon.App.FinalTask never) )) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configRawInput",
            "comment": " Configure a raw input. ",
            "type": "Signal.Signal (List actiontype) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configStage",
            "comment": " Set a staging function on the app. Staging is done after all actions are passed through update,\nbut before presentation. ",
            "type": "(Signal.Address (List actiontype) -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configUpdate",
            "comment": " Add a classic single action update function, which is simpler and just as good for most use\ncases. ",
            "type": "(actiontype -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configUpdateList",
            "comment": " Add an update function which is aware of an entire atomic action list as it comes in. ",
            "type": "(List actiontype -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )) -> Pylon.App.Config never modeltype actiontype viewtype -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "configWithOptions",
            "comment": " A nil configuration, with the given options set. ",
            "type": "Pylon.App.Options -> Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "defaultOptions",
            "comment": " Default options. `runInputsOnStartup` set to `True`. ",
            "type": "Pylon.App.Options"
          },
          {
            "name": "doCycle",
            "comment": " Perform a full cycle on a `(model, view)` pair, using the given application configuration. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype -> Signal.Address (List actiontype) -> List actiontype -> Time.Time -> ( modeltype, viewtype ) -> ( ( modeltype, viewtype ), List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "doEffect",
            "comment": " This gives you a simple way of emitting effects in a chain without changing the model. ",
            "type": "(modeltype -> List (Task.Task z r)) -> modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "doSubCycle",
            "comment": " Perform a full cycle with action promotion. Useful for nesting models. This is\ndeliberately left very unambiguous to avoid obfuscation. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype -> (List actiontype -> List outeraction) -> Signal.Address (List outeraction) -> List actiontype -> Time.Time -> ( modeltype, viewtype ) -> ( ( modeltype, viewtype ), List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "doSubPresent",
            "comment": " Present a sub model. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype -> (List actiontype -> List outeraction) -> Signal.Address (List outeraction) -> Time.Time -> modeltype -> ( Maybe.Maybe viewtype, List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "doSubStage",
            "comment": " Stage a sub model. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype -> (List actiontype -> List outeraction) -> Signal.Address (List outeraction) -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "doSubUpdate",
            "comment": " Update a sub model. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype -> (List actiontype -> List outeraction) -> List actiontype -> Time.Time -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "finalizeTask",
            "comment": " Convert any task in to a `FinalTask`. This does not take a `Dispatch` method, because said\nmethod only makes sense when applied to a list of tasks, not a single task. ",
            "type": "Task.Task e r -> List (Pylon.App.FinalTask never)"
          },
          {
            "name": "finalizeTasks",
            "comment": " Dispatch any arbitrary list of tasks using the given dispatch mode, which may be `parallel` or\n`sequence`. Note that for the sake of cleaner typing, the output of this function is a list of\n`FinalTask`s, however, this list may only have one member in the case that tasks are being\ndispatched, otherwise empty if the input list was empty. This is because finalizing a list of\ntasks will collapse it, encoding the manner in which is should execute in the resultant task if\nit exists. ",
            "type": "Pylon.App.Dispatch -> List (Task.Task e r) -> List (Pylon.App.FinalTask never)"
          },
          {
            "name": "finalizedEffector",
            "comment": " Transform an effector by finalizing it's resulting tasks immediately using the given dispatch method. ",
            "type": "Pylon.App.Dispatch -> (modeltype -> ( modeltype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Pylon.App.FinalTask never) )"
          },
          {
            "name": "forwardActions",
            "comment": " Forward the list of actions produced on the success of this task to the given address using the given transformation function. ",
            "type": "(List actiontype -> List actiontype') -> Signal.Address (List actiontype') -> Pylon.App.ActionTask errortype actiontype -> Pylon.App.ActionTask errortype actiontype'"
          },
          {
            "name": "handleErrors",
            "comment": " Transform errors from the given task in to actions. ",
            "type": "(errortype -> List actiontype) -> Pylon.App.ActionTask errortype actiontype -> Pylon.App.ActionTask z actiontype"
          },
          {
            "name": "mapErrors",
            "comment": " Map the errors of a given task to another type of error. ",
            "type": "(errortype -> errortype') -> Task.Task errortype r -> Task.Task errortype' r"
          },
          {
            "name": "mappedEffector",
            "comment": " Transform the task output of an effector. This is useful if an effector works on the right type of model\nbut needs a shim to fit the correct task type ",
            "type": "(List (Task.Task z r) -> List (Task.Task z' r')) -> (modeltype -> ( modeltype, List (Task.Task z r) )) -> modeltype -> ( modeltype, List (Task.Task z' r') )"
          },
          {
            "name": "nilConfig",
            "comment": " Empty configuration, providing all defaults and nil behavior. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype"
          },
          {
            "name": "noEffect",
            "comment": " An effector that does nothing and produces no tasks. Useful as a placeholder when no action\nis required. ",
            "type": "modeltype -> ( modeltype, List (Task.Task z r) )"
          },
          {
            "name": "optionsDispatchMethod",
            "comment": " Set the dispatch method for the top level ActionTasks returned by application functions. ",
            "type": "Pylon.App.Dispatch -> Pylon.App.Options -> Pylon.App.Options"
          },
          {
            "name": "optionsRunInputsOnStartup",
            "comment": " Set whether or not to run options. ",
            "type": "Bool -> Pylon.App.Options -> Pylon.App.Options"
          },
          {
            "name": "parallel",
            "comment": " Dispatch tasks in parallel, no ordering is required. ",
            "type": "Pylon.App.Dispatch"
          },
          {
            "name": "promoteActions",
            "comment": " Transform the action list type of an `ActionTask`. ",
            "type": "(List actiontype -> List actiontype') -> Pylon.App.ActionTask errortype actiontype -> Pylon.App.ActionTask errortype actiontype'"
          },
          {
            "name": "run",
            "comment": " With the given configuration, start the application as in StartApp with the given initial model,\nand the given default view. ",
            "type": "Pylon.App.Config never modeltype actiontype viewtype -> modeltype -> viewtype -> Pylon.App.Output never modeltype viewtype"
          },
          {
            "name": "sendActions",
            "comment": " Send the list of actions produced on the success of this task to the given address.  ",
            "type": "Signal.Address (List actiontype) -> Pylon.App.ActionTask errortype actiontype -> Pylon.App.ActionTask errortype actiontype"
          },
          {
            "name": "sendErrorActions",
            "comment": " Translate task error to a list of actions and send to the given address. ",
            "type": "(errortype -> List actiontype) -> Signal.Address (List actiontype) -> Pylon.App.ActionTask errortype actiontype -> Pylon.App.ActionTask errortype actiontype"
          },
          {
            "name": "sendResultActions",
            "comment": " Interpret the result of the task whether success or failure as some list of actions and then send. ",
            "type": "(Result.Result errortype successtype -> List actiontype) -> Signal.Address (List actiontype) -> Task.Task errortype successtype -> Pylon.App.ActionTask errortype actiontype"
          },
          {
            "name": "sequence",
            "comment": " Dispatch tasks in sequence. Tasks will execute strictly in the order provided. ",
            "type": "Pylon.App.Dispatch"
          },
          {
            "name": "thenDo",
            "comment": " Turn any task in to an `ActionTask` by performing the given list of actions upon it's successful\ncompletion. Notably, this may be used to turn an `FinalTask` back in to an action task. ",
            "type": "List actiontype -> Task.Task errortype r -> Pylon.App.ActionTask errortype actiontype"
          },
          {
            "name": "thenDoNothing",
            "comment": " Turn any task in to an `ActionTask` without actually performing any actions. This is good for\ntransforming tasks that need to be returned from the top level of the application which have already\nbeen finalized, so the types simply have to match. It should be noted that empty action lists do\nnot trigger any update, staging, or presentation, and as such a busy loop caused by repeated\ndispatchment of empty action tasks will not occur. ",
            "type": "Task.Task errortype r -> Pylon.App.ActionTask errortype a"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Pylon.Resource",
        "comment": " Resource types and reductions. Heavily pruned from Scaffold predecessor to give only what has\nbeen tested, used in practice, and proven useful.\n\n# Resource Type\n\nThis type represents a single remote resource in such a way that it's state can be easily reduced\nto a more abstract representation, either for another part of the system, or the user's view itself.\n\nWe export the tags as well so as to allow the user easy case destructuring.\n@docs Resource\n\n\n# Resource Constructors\n@docs def, pending, undecided, void, unknown\n\n\n# Predicate Composition\n@docs isAll, isAny\n\n\n# Predicates\n@docs isKnown, isNotKnown, isPending, isNotPending, isNotUndecided, isNotUnknown, isNotVoid, isUndecided, isUnknown, isVoid\n\n\n# Reduction\n@docs therefore, otherwise, decideBy, assumeIf, assumeIfNot, assumeInCase, deriveIf, deriveKnown\n\n\n# Interop with Result and Maybe\n@docs maybeKnown, maybeOr, resultOr\n\n",
        "aliases": [],
        "types": [
          {
            "name": "Resource",
            "comment": " A resource item. ",
            "args": [
              "errortype",
              "v"
            ],
            "cases": [
              [
                "Unknown",
                []
              ],
              [
                "Pending",
                []
              ],
              [
                "Void",
                []
              ],
              [
                "Undecided",
                [
                  "errortype"
                ]
              ],
              [
                "Known",
                [
                  "v"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "assumeIf",
            "comment": " If the given predicate is satisfied, the result will be known to the the given value, otherwise\nthe given resource will be given unchanged. ",
            "type": "(Pylon.Resource.Resource errortype v -> Bool) -> v -> Pylon.Resource.Resource errortype v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "assumeIfNot",
            "comment": " Negation of assumeIf. ",
            "type": "(Pylon.Resource.Resource errortype v -> Bool) -> v -> Pylon.Resource.Resource errortype v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "assumeInCase",
            "comment": " In the case that the provided function returns `Just x`, the resource shall be known as that\nvalue, otherwise the Resource shall remain unchanged.  ",
            "type": "(Pylon.Resource.Resource errortype v -> Maybe.Maybe v) -> Pylon.Resource.Resource errortype v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "decideBy",
            "comment": " If the resource is an undecided resource, then the given  ",
            "type": "(errortype -> Pylon.Resource.Resource errortype v) -> Pylon.Resource.Resource errortype v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "def",
            "comment": "  ",
            "type": "v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "deriveIf",
            "comment": " If the predicate is true, apply the given transformation to get a new resource. ",
            "type": "(Pylon.Resource.Resource errortype v' -> Bool) -> (Pylon.Resource.Resource errortype v' -> Pylon.Resource.Resource errortype v') -> Pylon.Resource.Resource errortype v' -> Pylon.Resource.Resource errortype v'"
          },
          {
            "name": "deriveKnown",
            "comment": " If the resource is known, then use the given function to create an entirely new replacement resource,\notherwise carry the state to the new resource. This always transforms the type because no other states\ncarry the value type. ",
            "type": "(v -> Pylon.Resource.Resource errortype v') -> Pylon.Resource.Resource errortype v -> Pylon.Resource.Resource errortype v'"
          },
          {
            "name": "isAll",
            "comment": " True if _all_ of the given predicates is True, otherwise False. ",
            "type": "List (Pylon.Resource.Resource errortype v -> Bool) -> Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isAny",
            "comment": " True if _any_ of the given predicates is True, otherwise False. ",
            "type": "List (Pylon.Resource.Resource errortype v -> Bool) -> Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isKnown",
            "comment": " True if the resource is known. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isNotKnown",
            "comment": " False if the resource is known. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isNotPending",
            "comment": " False if the resource is pending. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isNotUndecided",
            "comment": " False if the resource is undecided. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isNotUnknown",
            "comment": " False if the resource is unknown. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isNotVoid",
            "comment": " False if the resource is void. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isPending",
            "comment": " True if the resource is pending. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isUndecided",
            "comment": " True if the resource is undecided. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isUnknown",
            "comment": " True if the resource is unknown. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "isVoid",
            "comment": " True if the resource is void. ",
            "type": "Pylon.Resource.Resource errortype v -> Bool"
          },
          {
            "name": "maybeKnown",
            "comment": " If a resource is known, then give Just it's value, otherwise Nothing. ",
            "type": "Pylon.Resource.Resource errortype v' -> Maybe.Maybe v'"
          },
          {
            "name": "maybeOr",
            "comment": " ",
            "type": "Pylon.Resource.Resource errortype v -> Maybe.Maybe v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "otherwise",
            "comment": " In the event that the given resource is not a simple `def`, we replace it with a different simple\nresource. ",
            "type": "v' -> Pylon.Resource.Resource errortype v' -> v'"
          },
          {
            "name": "pending",
            "comment": "  ",
            "type": "Pylon.Resource.Resource errortype v"
          },
          {
            "name": "resultOr",
            "comment": "  ",
            "type": "(errortype -> Pylon.Resource.Resource errortype v) -> Result.Result errortype v -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "therefore",
            "comment": " Given a resource of value type v, create a resource of value type v' by transforming the\nknown value or group using some function (v -> v'). NOTE that this will create an entirely new\nresouce structure, and thus any pending changes will be integrated immediately. If you wish to\npreserve deltas for the purpose of mirroring and efficient data flow, then one should be using\ndeltaTo in order to transform just the changes. ",
            "type": "(v -> v') -> Pylon.Resource.Resource errortype v -> Pylon.Resource.Resource errortype v'"
          },
          {
            "name": "undecided",
            "comment": "  ",
            "type": "errortype -> Pylon.Resource.Resource errortype v"
          },
          {
            "name": "unknown",
            "comment": "  ",
            "type": "Pylon.Resource.Resource errortype v"
          },
          {
            "name": "void",
            "comment": "  ",
            "type": "Pylon.Resource.Resource errortype v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "williamwhitacre/scaffold",
    "version": "6.1.8",
    "docs": [
      {
        "name": "Scaffold.Resource.Fire",
        "comment": " Firebase bindings for Scaffold.Resource using ElmFire.Dict and ElmFire.Op\n\n@docs Config, Output, Action, Machine, config, withOrdering, program, machine\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " Convenience type for configuration ",
            "args": [
              "v"
            ],
            "type": "{ location : ElmFire.Location , orderOptions : ElmFire.OrderOptions , encoder : v -> Json.Encode.Value , decoder : Json.Decode.Decoder v }"
          },
          {
            "name": "Machine",
            "comment": " Machine type. ",
            "args": [
              "v"
            ],
            "type": "Scaffold.Machine.Machine (Scaffold.Resource.Fire.Action v) (Scaffold.Resource.Fire.Model v) (Scaffold.Resource.Fire.Output v) ElmFire.Error"
          },
          {
            "name": "Output",
            "comment": " Machine output type. ",
            "args": [
              "v"
            ],
            "type": "{ resource : Scaffold.Resource.Resource String v , location : ElmFire.Location , isRunning : Bool , lastUpdated : Time.Time }"
          }
        ],
        "types": [
          {
            "name": "Action",
            "comment": " Dataset action type ",
            "args": [
              "v"
            ],
            "cases": [
              [
                "Reconfigure",
                [
                  "Scaffold.Resource.Fire.Config v"
                ]
              ],
              [
                "Kill",
                []
              ],
              [
                "Started",
                [
                  "Task.Task ElmFire.Error ()"
                ]
              ],
              [
                "ApplyDelta",
                [
                  "ElmFire.Dict.Delta v"
                ]
              ],
              [
                "DoOperation",
                [
                  "ElmFire.Op.Operation v"
                ]
              ],
              [
                "ReportError",
                [
                  "ElmFire.Error"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "config",
            "comment": " ",
            "type": "(v -> Json.Encode.Value) -> Json.Decode.Decoder v -> ElmFire.Location -> Scaffold.Resource.Fire.Config v"
          },
          {
            "name": "machine",
            "comment": " ",
            "type": "Scaffold.Resource.Fire.Config v -> Scaffold.Resource.Fire.Machine v"
          },
          {
            "name": "program",
            "comment": " ",
            "type": "Scaffold.Resource.Fire.Config v -> Scaffold.App.ProgramInput (Scaffold.Resource.Fire.Action v) (Scaffold.Resource.Fire.Model v) (Scaffold.Resource.Fire.Output v) ElmFire.Error"
          },
          {
            "name": "withOrdering",
            "comment": " ",
            "type": "ElmFire.OrderOptions -> Scaffold.Resource.Fire.Config v -> Scaffold.Resource.Fire.Config v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Scaffold.Machine",
        "comment": " This module builds a more usable state machine snapshot with the Elm Architecture in mind on\ntop of the Gigan App.\n\n# Definition\n@docs Machine\n\n# Constructor\n@docs machine\n\n# Get and Set the Model\n@docs getModel, replaceModel\n\n# Using Machines\n@docs dispatching, dispatchingAs, presenting, presentingAs, staging, stagingAs, updating, integrate\n\n# Get and Set the Model of Maybe Machines\n@docs maybeGetModel, maybeReplaceModel\n\n# Optional Machines Using Maybe\n@docs maybeDispatching, maybeDispatchingAs, maybePresenting, maybePresentingAs, maybeStaging, maybeStagingAs, maybeUpdating, maybeIntegrate\n\n# Resource Dependant Machines\n@docs machineResource, resourceGetModel, resourceReplaceModel, resourceDispatching, resourceDispatchingAs, resourceIntegrate, resourceUpdating, resourceStaging, resourceStagingAs, resourcePresenting, resourcePresentingAs\n\n",
        "aliases": [
          {
            "name": "Machine",
            "comment": " A Machine is an instantaneous description of some model associated with an ProgramInput (see App)\nthat specifies how it should be updated, staged and presented. ",
            "args": [
              "a",
              "b",
              "c",
              "bad"
            ],
            "type": "{ input : Scaffold.App.ProgramInput a b c bad , state : Scaffold.App.ProgramSnapshot a b bad }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "dispatching",
            "comment": " Get the currently waiting dispatchment. ",
            "type": "Scaffold.Machine.Machine a b c bad -> Scaffold.App.TaskDispatchment bad a"
          },
          {
            "name": "dispatchingAs",
            "comment": " Get the currently waiting task dispatchment, but apply some action type transformation. ",
            "type": "(List a -> List a') -> Scaffold.Machine.Machine a b c bad -> Scaffold.App.TaskDispatchment bad a'"
          },
          {
            "name": "getModel",
            "comment": " Get the model of a machine. ",
            "type": "Scaffold.Machine.Machine a b c bad -> b"
          },
          {
            "name": "integrate",
            "comment": " Remove the currently waiting task dispatchment. This should be done only after retrieving any\npossibly waiting dispatchment. ",
            "type": "Scaffold.Machine.Machine a b c bad -> Scaffold.Machine.Machine a b c bad"
          },
          {
            "name": "machine",
            "comment": " Create a machine from an ProgramInput ",
            "type": "Scaffold.App.ProgramInput a b c bad -> Scaffold.Machine.Machine a b c bad"
          },
          {
            "name": "machineResource",
            "comment": " Create a machine resource from a model resource given a partial program definition (without the\nmodel). ",
            "type": "(b -> Scaffold.App.ProgramInput a b c bad) -> Scaffold.Resource.Resource euser b -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "maybeDispatching",
            "comment": " ",
            "type": "Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Scaffold.App.TaskDispatchment bad a"
          },
          {
            "name": "maybeDispatchingAs",
            "comment": " ",
            "type": "(List a -> List a') -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Scaffold.App.TaskDispatchment bad a'"
          },
          {
            "name": "maybeGetModel",
            "comment": " ",
            "type": "Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe b"
          },
          {
            "name": "maybeIntegrate",
            "comment": " ",
            "type": "Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "maybePresenting",
            "comment": " ",
            "type": "Signal.Address (List a) -> Time.Time -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.App.ViewOutput a c bad)"
          },
          {
            "name": "maybePresentingAs",
            "comment": " ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.App.ViewOutput a' c bad)"
          },
          {
            "name": "maybeReplaceModel",
            "comment": " ",
            "type": "b -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "maybeStaging",
            "comment": " ",
            "type": "Signal.Address (List a) -> Time.Time -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "maybeStagingAs",
            "comment": " ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "maybeUpdating",
            "comment": " ",
            "type": "List a -> Time.Time -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad) -> Maybe.Maybe (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "presenting",
            "comment": " Run the present function from the configured ProgramInput of the Machine on the Machine's current model to produce a ViewOutput, which includes the an element of the Machine's view type, and a TaskDispatchment for any desired asynchronous tasks.\nThis takes an address for actions to be sent to, the current time, and the Machine. ",
            "type": "Signal.Address (List a) -> Time.Time -> Scaffold.Machine.Machine a b c bad -> Scaffold.App.ViewOutput a c bad"
          },
          {
            "name": "presentingAs",
            "comment": " Same as presenting, but with a transformation to apply to action lists before they are sent to the address. ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Scaffold.Machine.Machine a b c bad -> Scaffold.App.ViewOutput a' c bad"
          },
          {
            "name": "replaceModel",
            "comment": " Create a machine with a different model from a replacement model and an original machine. ",
            "type": "b -> Scaffold.Machine.Machine a b c bad -> Scaffold.Machine.Machine a b c bad"
          },
          {
            "name": "resourceDispatching",
            "comment": " ",
            "type": "Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.App.TaskDispatchment bad a"
          },
          {
            "name": "resourceDispatchingAs",
            "comment": " ",
            "type": "(List a -> List a') -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.App.TaskDispatchment bad a'"
          },
          {
            "name": "resourceGetModel",
            "comment": " ",
            "type": "Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser b"
          },
          {
            "name": "resourceIntegrate",
            "comment": " ",
            "type": "Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "resourcePresenting",
            "comment": " ",
            "type": "Signal.Address (List a) -> Time.Time -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.App.ViewOutput a c bad)"
          },
          {
            "name": "resourcePresentingAs",
            "comment": " ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.App.ViewOutput a' c bad)"
          },
          {
            "name": "resourceReplaceModel",
            "comment": " ",
            "type": "b -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "resourceStaging",
            "comment": " ",
            "type": "Signal.Address (List a) -> Time.Time -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "resourceStagingAs",
            "comment": " ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "resourceUpdating",
            "comment": " ",
            "type": "List a -> Time.Time -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad) -> Scaffold.Resource.Resource euser (Scaffold.Machine.Machine a b c bad)"
          },
          {
            "name": "staging",
            "comment": " Run the update function from the configured ProgramInput of the Machine on the Machine's current model to produce a new model and dispatch any asynchronous tasks desired.\nThis takes an address for actions to be sent to, the current time, and the Machine. ",
            "type": "Signal.Address (List a) -> Time.Time -> Scaffold.Machine.Machine a b c bad -> Scaffold.Machine.Machine a b c bad"
          },
          {
            "name": "stagingAs",
            "comment": " Same as staging, but with a transformation to apply to action lists before they are sent to the address. ",
            "type": "(List a -> List a') -> Signal.Address (List a') -> Time.Time -> Scaffold.Machine.Machine a b c bad -> Scaffold.Machine.Machine a b c bad"
          },
          {
            "name": "updating",
            "comment": " Run the update function from the configured ProgramInput of the Machine on the Machine's current model to produce a new model and dispatch any asynchronous tasks desired.\nThis takes a list of actions, the current time, and the Machine. ",
            "type": "List a -> Time.Time -> Scaffold.Machine.Machine a b c bad -> Scaffold.Machine.Machine a b c bad"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Scaffold.Resource",
        "comment": " Resource system.\n\n# Types\n@docs Resource, ResourceTask, ResourceRef, ResourcePath, UserTask\n\n# Define Resources\n@docs defResource, forbiddenResource, pendingResource, undecidedResource, unknownResource, voidResource, operationResource, groupResource\n\n# Interpret `Maybe` or `Result` as Resources\n@docs maybeOr, resultOr\n\n# Conditional Assumptions\n@docs assumeIf, assumeIfNot, assumeIfNow, assumeInCase, assumeInCaseNow\n\n# Conditional Derivations\n\n`deriveIf` and `deriveIfNow` are given as more flexible and readable versions of `assumeInCase`\nand `assumeInCaseNow`. Neither muddies the waters with the Maybe type, and the transformation\ncan be any `Resource euser v -> Resource euser v`, which makes these highly nestable by comparison\nto their respective older counterparts.\n\n@docs deriveIf, deriveIfNow\n\n# Resource Output\n@docs otherwise, maybeKnownNow\n\n# Bulk Operations\n@docs decideBy, flatten, flattenDict, collapse, throughout, throughoutNow, therefore, therefore', within\n\n# Handling `UserTask` and `ResourceTask`\n@docs userTask, deltaTask, toProgramTask, comprehend, comprehend', interpret, interpret', routeTo, catchError\n\n# Conditional Operations\n@docs dispatchIf, dispatchIfNot, dispatchInCase, dispatchInCaseNow\n\n# Resource Introspection Predicates\n@docs isUnknown, isNotUnknown, isPending, isNotPending, isUndecided, isNotUndecided, isForbidden, isNotForbidden, isVoid, isNotVoid, isNil, isNotNil, isKnown, isNotKnown, isOperation, isNotOperation, isGroup, isNotGroup\n\n# Manipulate and Use `ResourcePath`\n@docs prefixPath, atPath, putPath, getPath, deletePath, writePath, movePath, copyPath\n\n# Built-in Conflict Operators\n\nFor use with `merge` and `mergeMany`.\n\n@docs chooseLeft, chooseRight, chooseVoid, chooseNeither\n\n# Merge Resource Groups\n@docs merge, mergeMany\n\n# Update Resources\n@docs update, updateList, update', updateList', dispatch, integrate, deltaTo, deltaOf\n\n# Program Resources\n@docs toProgram\n\n",
        "aliases": [
          {
            "name": "ResourcePath",
            "comment": " Used as the resource path type. ",
            "args": [],
            "type": "List String"
          },
          {
            "name": "ResourceRef",
            "comment": " A reference to a resource, including it's path. ",
            "args": [
              "euser",
              "v"
            ],
            "type": "{ path : Scaffold.Resource.ResourcePath , resource : Scaffold.Resource.Resource euser v }"
          },
          {
            "name": "ResourceTask",
            "comment": " This is a Task which represents some kind of synchronization with optask data. It can also easily\nbe used for long running arbitrary computations, too. It produces a Gigan Error or a Resource. ",
            "args": [
              "euser",
              "v"
            ],
            "type": "Task.Task ( Scaffold.Resource.ResourcePath, Scaffold.Error.Error euser ) (Scaffold.Resource.ResourceRef euser v)"
          },
          {
            "name": "UserTask",
            "comment": " This task simplifies routing out for the user. ",
            "args": [
              "euser",
              "v"
            ],
            "type": "Task.Task (Scaffold.Error.Error euser) (Scaffold.Resource.Resource euser v)"
          }
        ],
        "types": [
          {
            "name": "Resource",
            "comment": " A resource item. ",
            "args": [
              "euser",
              "v"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "assumeIf",
            "comment": " If some predicate `satisfies` is satisfied by the resource `res`, then we make the following\nassumption. If this resource is an operation, then the assumption will be applied to\nthe result of that operation. ",
            "type": "(Scaffold.Resource.Resource euser v -> Bool) -> v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "assumeIfNot",
            "comment": " Negation of assumeIf. ",
            "type": "(Scaffold.Resource.Resource euser v -> Bool) -> v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "assumeIfNow",
            "comment": " If the predicate is satisfied, replace the resource with some known value. ",
            "type": "(Scaffold.Resource.Resource euser v' -> Bool) -> v' -> Scaffold.Resource.Resource euser v' -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "assumeInCase",
            "comment": " If `possibleAssumption` yields some value `value'` when a Resource is applied, then that\nvalue is used to overwrite the resource with an assumption `Known value'`, otherwise the Resource\nis unaffected. If this resource is an operation, then the assumption will be applied conditionally\nto the result of that operation. ",
            "type": "(Scaffold.Resource.Resource euser v -> Maybe.Maybe v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "assumeInCaseNow",
            "comment": " This is the counterpart to assumeInCase which does _not_ abstract away whether or not this is\nsome pending optask operation. Concretely, we want this in the case that we are doing model to view\nreductions because a pending operation should still have some concrete visible representation, such\nas an ajax loader symbol. Of course, one should still correctly call *Integrate so that an operation\nis always a `pendingResource` by the time it gets past the `stage` step. ",
            "type": "(Scaffold.Resource.Resource euser v' -> Maybe.Maybe v') -> Scaffold.Resource.Resource euser v' -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "atPath",
            "comment": " Manipulate an item at the given path, or else do nothing if the path does not exist. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "catchError",
            "comment": " Provide a decider that turns an error of type `Error.Error euser` in to a resource of `Resource euser v`. ",
            "type": "(Scaffold.Error.Error euser -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.ResourceTask euser v"
          },
          {
            "name": "chooseLeft",
            "comment": " Collision handler for nested Resources that always chooses the left hand side. ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "chooseNeither",
            "comment": " Collision handler that removes collision keys entirely. ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "chooseRight",
            "comment": " Collision handler for nested Resources that always chooses the right hand side. ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "chooseVoid",
            "comment": " Collision handler for nested Resources that voids collision keys. ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "collapse",
            "comment": " Collapses a resource tree made of group resources in to a single resource of the same type. ",
            "type": "(List ( Scaffold.Resource.ResourcePath , Scaffold.Resource.Resource euser v ) -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "comprehend",
            "comment": " The equivalent of therefore for ResourceTasks. This allows you to map fetched data to multiple\nmodels with ease, as long as operations which should effect all of the models are all sunk in to\nResourceTasks producing the base model's type. ",
            "type": "(v -> v') -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.ResourceTask euser v'"
          },
          {
            "name": "comprehend'",
            "comment": " Like `comprehend`, but accounts for the path of the leaves effected by the transformation\nby using `therefore'` on the result of the task. This prepends the reference path of the resource\ntask, such that global context for the resource's location is available if desired.\n\nNote that you may specify a prefix path to the existing one to provide additional context in large\nresource group structures.\n",
            "type": "(Scaffold.Resource.ResourcePath -> v -> v') -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.ResourceTask euser v'"
          },
          {
            "name": "copyPath",
            "comment": " Copy the resource at a given path `path` in the resource group structure to a target path `path'`. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "decideBy",
            "comment": " Offer a decision on some `undecidedResource res`. Undecided resource is the result of some\nproblem which may or may not be in control of the client. Such resource may be the result of\nanything that can result in an error in your application. If this resource is an operation, then\nthe assumption will be applied to the result of that operation. ",
            "type": "(Scaffold.Error.Error euser -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "defResource",
            "comment": "  ",
            "type": "v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "deletePath",
            "comment": " Delete the item at the given path. This equivalency holds:\n\n    atPath (always unknownResource) path res == deletePath path res\n\n",
            "type": "Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "deltaOf",
            "comment": " Like `deltaTo`, but without the transformation. The following equivalency holds ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "deltaTask",
            "comment": " Transform a `ResourceTask` back in to a `UserTask`, which will produce a nested `Resource`\nfinger reflecting the final path output of the given `ResourceTask`. This output resource can be\ntreated just like a delta using the `Resource.merge` and `Resource.mergeMany` functions to inject it\nin to the working set.  ",
            "type": "Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.UserTask euser v"
          },
          {
            "name": "deltaTo",
            "comment": " `deltaTo` applies the given transformation function to the pending changes to the\n`Resource` structure, producing a partial structure representing only what has changed since the\nlast call to `integrate`. The resulting partial structure is intended for use as a delta, to be\npassed to `update` for some other Resource structure. This results in a simple one-way data binding.\n\nTo introduce k-way data binding, one need only use the `interpret` function to transform the\n`ResourceTask` output of the subordinate views back in to deltas that transform the origin\n`Resource` structure. NOTE that this implies when one wishes for the origin structure to reflect\nchanges to one of it's subordinates, one must dispatch UserTasks that succeed with the intended\nchanges. This can be very clean as long as there is a bijection between the origin structure\nand each of it's subordinates. The complexity of the mapping is of course dependent on your record\ndesign, so one must still take care. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v') -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "deriveIf",
            "comment": " If the predicate is satisfied, apply the given transformation function. If this is a pending\noperationResource, then apply deriveIf with the same arguments to the result. ",
            "type": "(Scaffold.Resource.Resource euser v' -> Bool) -> (Scaffold.Resource.Resource euser v' -> Scaffold.Resource.Resource euser v') -> Scaffold.Resource.Resource euser v' -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "deriveIfNow",
            "comment": " If the predicate is satisfied, apply the given transformation function. ",
            "type": "(Scaffold.Resource.Resource euser v' -> Bool) -> (Scaffold.Resource.Resource euser v' -> Scaffold.Resource.Resource euser v') -> Scaffold.Resource.Resource euser v' -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "dispatch",
            "comment": " Given some configuration and a resource, produce Just an opaque query task or Nothing\nwhen the resource is an operation or the resource is not an operation respectively. ",
            "type": "Scaffold.Resource.Resource euser v -> List (Scaffold.Resource.ResourceTask euser v)"
          },
          {
            "name": "dispatchIf",
            "comment": " If some predicate `satisfies` is satisfied by the resource `res`, then we make the following\noptask. ",
            "type": "(Scaffold.Resource.Resource euser v -> Bool) -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "dispatchIfNot",
            "comment": " Negation of dispatchIf ",
            "type": "(Scaffold.Resource.Resource euser v -> Bool) -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "dispatchInCase",
            "comment": " If `possibleOperation` yields some ResourceTask task `optask` when a Resource is applied, then\nthe resource is replaced by the resource `operationResource optask`, otherwise the resource is\nunaffected. If this resource is an operation, then the result of that operation will be used as\nthe input to the provided function. In this way, operations can be chained arbitrarily deep,\nbut in a manner that helpfully abstracts away whether we are still waiting or already have the\nresult in the composition. ",
            "type": "(Scaffold.Resource.Resource euser v -> Maybe.Maybe (Scaffold.Resource.ResourceTask euser v)) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "dispatchInCaseNow",
            "comment": "  ",
            "type": "(Scaffold.Resource.Resource euser v -> Maybe.Maybe (Scaffold.Resource.ResourceTask euser v)) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "flatten",
            "comment": " Flatten the given resource if it is a group to a resource of the same type. Note that unlike\n`collapse`, this function does not recursively collapse the entire tree automatically. This grants\na greater degree of flexibility.  ",
            "type": "(List ( String, Scaffold.Resource.Resource euser v ) -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "flattenDict",
            "comment": " Variant of `flatten` whose argument function takes a dictionary instead of a list of pairs. ",
            "type": "(Dict.Dict String (Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "forbiddenResource",
            "comment": "  ",
            "type": "Scaffold.Error.Error euser -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "getPath",
            "comment": " Get the item at the given path. Returns unknownResource if the item _might_ exist, but the hierarchy\ndoes not show knowledge at the fringe (i.e., the fringe is unknown at the last known location in\nthe path), but may also return voidResource to a path which is known not to exist. For example,\nif foo is a resource, then foo/bar cannot be a valid path because foo is not a collection. Pending\nwill be given in the case that an operation is pending. ",
            "type": "Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "groupResource",
            "comment": "  ",
            "type": "List ( String, Scaffold.Resource.Resource euser v ) -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "integrate",
            "comment": " Given some configuration and a resource, produce a pendingResource in the case that the\nresource is an operation, otherwise give the same resource. ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "interpret",
            "comment": " Interpret the given `ResourceTask`'s resource output by a given transform function. NOTE that this\ncan be literally any function whose signature ends in `ResourceTask euser v -> ResourceTask euser v'`,\nwhich is of course inclusive of `ResourceTask euser v -> ResourceTask euser v'` in the case that\n`v` is the same type as `v'`. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v') -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.ResourceTask euser v'"
          },
          {
            "name": "interpret'",
            "comment": " Like `interpret`, but the prefix path of the resource is passed to the given function, and the\nuser can optionally specify their own prefix path. `interpret'` is to `interpret` what `comprehend'`\nis to `comprehend`. ",
            "type": "(Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v') -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.ResourceTask euser v'"
          },
          {
            "name": "isForbidden",
            "comment": " True if the resource is forbiddenResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isGroup",
            "comment": " True if the resource is unknownResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isKnown",
            "comment": " True if the resource is known. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNil",
            "comment": " True if the resource is unknownResource or voidResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotForbidden",
            "comment": " False if the resource is forbiddenResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotGroup",
            "comment": " False if the resource is unknownResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotKnown",
            "comment": " False if the resource is known. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotNil",
            "comment": " False if the resource is unknownResource or voidResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotOperation",
            "comment": " False if the resource is a pending operation. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotPending",
            "comment": " False if the resource is pendingResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotUndecided",
            "comment": " False if the resource is undecidedResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotUnknown",
            "comment": " False if the resource is unknownResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isNotVoid",
            "comment": " False if the resource is voidResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isOperation",
            "comment": " True if the resource is a pending operation. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isPending",
            "comment": " True if the resource is pendingResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isUndecided",
            "comment": " True if the resource is undecidedResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isUnknown",
            "comment": " True if the resource is unknownResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "isVoid",
            "comment": " True if the resource is voidResource. ",
            "type": "Scaffold.Resource.Resource euser v -> Bool"
          },
          {
            "name": "maybeKnownNow",
            "comment": " If a resource is known, then give Just it's value, otherwise Nothing. ",
            "type": "Scaffold.Resource.Resource euser v' -> Maybe.Maybe v'"
          },
          {
            "name": "maybeOr",
            "comment": " ",
            "type": "Scaffold.Resource.Resource euser v -> Maybe.Maybe v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "merge",
            "comment": " Merge can be used to assemble path fingers or existing group structures arbitrarily. A common\nusage would be to put many different resources at their own prefix paths, then merge them all by\nfolding on this if your data structure is odd, otherwise use mergeMany if you are already working\nwith a list. This takes a choice function that determines the outcome of two different resources\nexisting at the same path, _at least one of which is concrete and not a group_. Groups merge\nautomatically with eachother. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "mergeMany",
            "comment": " Merge many folds from the left over the given list of resources with merge. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> List (Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "movePath",
            "comment": " Move the resource at a given path `path` in the resource group structure to a target path `path'`. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "operationResource",
            "comment": "  ",
            "type": "Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "otherwise",
            "comment": " In the event that the given resource is not a simple `defResource`, we replace it with a different simple\nresource. ",
            "type": "v' -> Scaffold.Resource.Resource euser v' -> v'"
          },
          {
            "name": "pendingResource",
            "comment": "  ",
            "type": "Scaffold.Resource.Resource euser v"
          },
          {
            "name": "prefixPath",
            "comment": " Create a path before the given resource. This has the effect of prefixing whatever is there\nwhether concrete or a group with the given path. Thus, creating a resource path [\"foo\", \"bar\"] and\nanother at [\"foo\", \"baz\"] would result in two resources that can be merged without conflicts\nguaranteed because their contents are in the `foo -> bar -> ...` and `foo -> baz -> ...` subtries\nrespectively. ",
            "type": "Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "putPath",
            "comment": " Put a resource in to a group resource at the given path. In the case that something is already\nthere, use the `choice` function to determine which should be used. See the `choose*` family for some\nbuilt-in functions. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "resultOr",
            "comment": "  ",
            "type": "(Scaffold.Error.Error euser -> Scaffold.Resource.Resource euser v) -> Result.Result (Scaffold.Error.Error euser) v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "routeTo",
            "comment": " Route the results of a given `ResourceTask` to a given `ResourcePath`. ",
            "type": "Scaffold.Resource.ResourcePath -> Scaffold.Resource.ResourceTask euser v -> Scaffold.Resource.ResourceTask euser v"
          },
          {
            "name": "therefore",
            "comment": " Given a resource of value type v, create a resource of value type v' by transforming the\nknown value or group using some function (v -> v'). NOTE that this will create an entirely new\nresouce structure, and thus any pending changes will be integrated immediately. If you wish to\npreserve deltas for the purpose of mirroring and efficient data flow, then one should be using\ndeltaTo in order to transform just the changes. ",
            "type": "(v -> v') -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "therefore'",
            "comment": " `therefore`, but which includes the current path as the first argument. ",
            "type": "(Scaffold.Resource.ResourcePath -> v -> v') -> Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v'"
          },
          {
            "name": "throughout",
            "comment": " Use the given function to transform all leaf resources throughout a group structure. This\napplies to the result of any pending resource operations. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "throughoutNow",
            "comment": " Use the given function to transform all leaf resources throughout a group structure. This version\napplies the transformation function now, even if the resource is a pending operation. This should be\nused in contexts where we are rendering some resulting view of the resources most of the time. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "toProgram",
            "comment": " Convert a resource to program input. I've found that this is a very un-Elm-like way\nof doing things that makes the Elm Architecture harder to stick to. If anyone else finds a\ncounterexample, please let me know! If it does turn out to be useful, I will complete the set.\n\nNOTE : DEPRECIATED, removed from v5.\n",
            "type": "(b -> Scaffold.App.ProgramInput a b c bad) -> Scaffold.Resource.Resource euser b -> Scaffold.Resource.Resource euser (Scaffold.App.ProgramInput a b c bad)"
          },
          {
            "name": "toProgramTask",
            "comment": " Convert a `UserTask euser v` in to an `App.ProgramTask bad a` ",
            "type": "(Scaffold.Error.Error euser -> List a) -> (Scaffold.Resource.Resource euser v -> List a) -> Scaffold.Resource.UserTask euser v -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "undecidedResource",
            "comment": "  ",
            "type": "Scaffold.Error.Error euser -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "unknownResource",
            "comment": "  ",
            "type": "Scaffold.Resource.Resource euser v"
          },
          {
            "name": "update",
            "comment": " Update the second `Resource` argument by merging the first argument's delta `Resource`. Chooses\nthe left `Resource` on a conflict, mechanically speaking. ",
            "type": "Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "update'",
            "comment": " Same as `update`, but pass the given conflict resolution choice function to `merge` instead of\n`chooseLeft`, which is the default. This allows one to make a selection as to whether or not the\ngiven delta is still relevant. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "updateList",
            "comment": " Same as `update`, but apply a list of delta resources sequentially. This resolves all conflicts\nby `chooseLeft`, which favors the deltas always. ",
            "type": "List (Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "updateList'",
            "comment": " Same as `updateList`, but uses the provided conflict resolution choice function instead of\n`chooseLeft` as in `updateList`. This allows one to make a selection as to whether or not the\ngiven delta is still relevant. ",
            "type": "(Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v) -> List (Scaffold.Resource.Resource euser v) -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          },
          {
            "name": "userTask",
            "comment": " Create a task which will route the resulting resource to the given path. ",
            "type": "Scaffold.Resource.UserTask euser v -> Scaffold.Resource.ResourceTask euser v"
          },
          {
            "name": "voidResource",
            "comment": "  ",
            "type": "Scaffold.Resource.Resource euser v"
          },
          {
            "name": "within",
            "comment": " DEPRECIATED version of therefore, not supporting type transformation.\n\nNOTE : removed in version 5.\n",
            "type": "(sub -> sub) -> Scaffold.Resource.Resource euser sub -> Scaffold.Resource.Resource euser sub"
          },
          {
            "name": "writePath",
            "comment": " Equivalent to `putPath chooseLeft`, this is a simple write which will always blindly overwrite the\ncurrent resource at the given path. ",
            "type": "Scaffold.Resource.ResourcePath -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v -> Scaffold.Resource.Resource euser v"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Scaffold.Error",
        "comment": " This module contains the internal error type for Gigan and some helper functions for\nconstructing errors.\n\n# Definitions\n@docs DecodingFailure, Error, ErrorType\n\n# Constructors\n@docs reportError, reportErrorAndLog, unknownError, unknownErrorAndLog, decoderError, decoderErrorAndLog, userError, userErrorAndLog, decodingFailure\n\n",
        "aliases": [
          {
            "name": "DecodingFailure",
            "comment": " Represents a decoding task which failed. ",
            "args": [],
            "type": "{ source : String, reason : String }"
          },
          {
            "name": "Error",
            "comment": " Error record. ",
            "args": [
              "euser"
            ],
            "type": "{ error : Scaffold.Error.ErrorType euser, desc : String }"
          }
        ],
        "types": [
          {
            "name": "ErrorType",
            "comment": " Type of error that occurred in Scaffold. ",
            "args": [
              "euser"
            ],
            "cases": [
              [
                "UnknownError",
                []
              ],
              [
                "DecoderError",
                [
                  "Scaffold.Error.DecodingFailure"
                ]
              ],
              [
                "UserError",
                [
                  "euser"
                ]
              ]
            ]
          }
        ],
        "values": [
          {
            "name": "decoderError",
            "comment": " Report a problem decoding something. ",
            "type": "String -> Scaffold.Error.DecodingFailure -> Scaffold.Error.Error euser"
          },
          {
            "name": "decoderErrorAndLog",
            "comment": " decoderError and log to console. ",
            "type": "String -> Scaffold.Error.DecodingFailure -> Scaffold.Error.Error euser"
          },
          {
            "name": "decodingFailure",
            "comment": " Given the source string on which decoding was attempted and the reason for the failure,\ngive a DecodingFailure ",
            "type": "String -> String -> Scaffold.Error.DecodingFailure"
          },
          {
            "name": "reportError",
            "comment": " Report an error. Given an ErrorType and a String describing what went wrong humanly, create\nan error record.  ",
            "type": "String -> Scaffold.Error.ErrorType euser -> Scaffold.Error.Error euser"
          },
          {
            "name": "reportErrorAndLog",
            "comment": " reportError and log to console.  ",
            "type": "String -> Scaffold.Error.ErrorType euser -> Scaffold.Error.Error euser"
          },
          {
            "name": "unknownError",
            "comment": " Report an error, the nature of which is not known. ",
            "type": "String -> Scaffold.Error.Error euser"
          },
          {
            "name": "unknownErrorAndLog",
            "comment": " unknownError and log to console. ",
            "type": "String -> Scaffold.Error.Error euser"
          },
          {
            "name": "userError",
            "comment": " Report a user defined error. ",
            "type": "String -> euser -> Scaffold.Error.Error euser"
          },
          {
            "name": "userErrorAndLog",
            "comment": " userError and log to console. ",
            "type": "String -> euser -> Scaffold.Error.Error euser"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Scaffold.Layout",
        "comment": " A very nice ruler snapping symachine for layouts. Actual documentation underway.\n\n# Definitions\n@docs Axis, Bounds, Group, Item, Rule\n\n# Ruler Guide Manipulation\n@docs adjustedRule, horizontalRule, horizontalRuleBetween, horizontalRuleCentered, itemHorizontalRule, itemRule, itemVerticalRule, ruleBetween, ruleCenter, snapToRule, towardsRule, towardsRuleRelative, verticalRule, verticalRuleBetween, verticalRuleCentered\n\n# Grouping and Group Operations\n@docs appendGroup, group, groupAt, groupAtBefore, groupFromArray, groupFromDict, groupSize, prependGroup, computed, butBefore, butBeforeAt, butBeforeSlice, thenDo, thenDoAt, thenDoSlice, flatten, flattenOutTo, flattenTo, flattenWithin, flattenWithinOutTo, flattenStyled, flattenToStyled, flattenWithinStyled, flattenOutToStyled, flattenWithinOutToStyled\n\n# Group Spacing and Distribution.\n@docs spacedBetween, spacedBy, regularly, vertically, horizontally\n\n# Bounds Definitions\n@docs defBounds, defSizeBounds, defCenteredBounds, autoBounds, boundsHeight, boundsLower, boundsSize, boundsUpper, boundsWidth, clampedBounds, clampedInnerBounds, clampedOuterBounds\n\n# Item Grabs\n@docs grabItem, grabItemRelative, grabItemRelativeX, grabItemRelativeY, grabItemX, grabItemY\n\n# Item Metrics\n@docs itemBounds, itemWidth, itemHeight, itemSize\n\n# Item Placement\n@docs lerpOf, move, moveX, moveY, place, placeX, placeY\n\n# Create and Display Items\n@docs emptyItem, makeItem, makeItemStyled, iconItem, makeIconItem, toItem, fromItem, fromItemStyled\n\n",
        "aliases": [
          {
            "name": "Item",
            "comment": " An item, which represents an Elm Element with a position and a handle. ",
            "args": [],
            "type": "{ elem : Scaffold.Layout.Element , x : Int , u : Int , y : Int , v : Int }"
          }
        ],
        "types": [
          {
            "name": "Axis",
            "comment": " An axis along which to evenly distribute by spacing or handle position. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Bounds",
            "comment": " A bounding box, given as a minimum and a maximum. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Group",
            "comment": " Group is an opaque type that represents a grouped set of items with a pending set of transformations. ",
            "args": [],
            "cases": []
          },
          {
            "name": "Rule",
            "comment": " A guide ruler defined as either a vertical or a horizontal axis aligned line. ",
            "args": [],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "adjustedRule",
            "comment": " Adjust a horizontal or vertical ruler. ",
            "type": "(Int -> Scaffold.Layout.Rule) -> Int -> Scaffold.Layout.Rule -> Scaffold.Layout.Rule"
          },
          {
            "name": "appendGroup",
            "comment": " Append two groups, resulting a group containing the elements from `grp` first and the\nelements of `grp'` second. ",
            "type": "Scaffold.Layout.Group -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "autoBounds",
            "comment": " Automatic bounds. ",
            "type": "Scaffold.Layout.Bounds"
          },
          {
            "name": "boundsHeight",
            "comment": " Get the width of a bounding box, defined as boundsSize >> snd ",
            "type": "Scaffold.Layout.Bounds -> Int"
          },
          {
            "name": "boundsLower",
            "comment": " Get the minimum bound if a minimum bound is defined. ",
            "type": "Scaffold.Layout.Bounds -> Maybe.Maybe ( Int, Int )"
          },
          {
            "name": "boundsSize",
            "comment": " Get the size of a bounding box if both maximum and minimum bounds are defined, otherwise (0, 0). ",
            "type": "Scaffold.Layout.Bounds -> ( Int, Int )"
          },
          {
            "name": "boundsUpper",
            "comment": " Get the maximum bound if a maximum bound is defined. ",
            "type": "Scaffold.Layout.Bounds -> Maybe.Maybe ( Int, Int )"
          },
          {
            "name": "boundsWidth",
            "comment": " Get the width of a bounding box, defined as boundsSize >> fst ",
            "type": "Scaffold.Layout.Bounds -> Int"
          },
          {
            "name": "butBefore",
            "comment": " Apply some transformation to every item in the group before the pending transformations. ",
            "type": "(Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "butBeforeAt",
            "comment": " Apply some transformation to the item at a particular index in the group before the pending transformations. ",
            "type": "Int -> (Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "butBeforeSlice",
            "comment": " Apply some transformation to the items in a particular slice of the group before the pending transformations. ",
            "type": "Int -> Int -> (Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "clampedBounds",
            "comment": " Clamp a bounding box to some inner bounding box and some outer bounding box. Either the inner\nor the outer bounding box may be autoBounds, so this may also only clamp an inner or an outer limit,\nor neither. ",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds"
          },
          {
            "name": "clampedInnerBounds",
            "comment": " clampedInnerBounds myBounds = clampedBounds myBounds autoBounds ",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds"
          },
          {
            "name": "clampedOuterBounds",
            "comment": " clampedOuterBounds myBounds = clampedBounds autoBounds myBounds ",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds"
          },
          {
            "name": "computed",
            "comment": " Run any pending transformations on all group items. For the most part, this can be avoided, but it should be\ndone if you are planning to get a lot of items back from the group transformed, or else the work of applying the\npending group transforms will be done at least twice, once when you retrieve the item using groupAt and once when\nyou flatten the group to produce an item. ",
            "type": "Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "defBounds",
            "comment": " Define a definite bounding box. ",
            "type": "Int -> Int -> Int -> Int -> Scaffold.Layout.Bounds"
          },
          {
            "name": "defCenteredBounds",
            "comment": " Define a bounding box with a particular size whose center falls on (0, 0) ",
            "type": "Int -> Int -> Scaffold.Layout.Bounds"
          },
          {
            "name": "defSizeBounds",
            "comment": " Define a bounding box at (0, 0) ",
            "type": "Int -> Int -> Scaffold.Layout.Bounds"
          },
          {
            "name": "emptyItem",
            "comment": " An empty layout item. ",
            "type": "Scaffold.Layout.Item"
          },
          {
            "name": "flatten",
            "comment": " Flatten a group using automatic bounds for the inner and outer bounds. This will produce the\ntightest bounding box possible around the target, and place the handle at (0, 0) relative to the resulting\nbounding box. This can result in the handle being placed outside of the group, but this can be desirable for\npositioning. For example, I may want to grab something at (-5, -5), so I can position it's top left\ncorner relative to some outer box with (5, 5) padding. ",
            "type": "Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenOutTo",
            "comment": " Flatten a group using only an inner bound, which is equivalent to\n\n    flattenWithinOutTo outer autoBounds\n",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenOutToStyled",
            "comment": " Same as flattenOutTo, but applies the given additional styles to the container. ",
            "type": "List ( String, String ) -> Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenStyled",
            "comment": " Same as flatten, but applies the given additional styles to the container. ",
            "type": "List ( String, String ) -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenTo",
            "comment": " Flatten a group using an exact bound. If this is specified to be autoBounds, then the following\nequivalency holds:\n\n    flattenTo autoBounds group == flatten group\n\nOtherwise, the items in the group are positioned in the resulting item relative to the top left corner of the bounds and\nthe resulting item shall have the exact size of the given bounds. ",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenToStyled",
            "comment": " Same as flattenTo, but applies the given additional styles to the container. ",
            "type": "List ( String, String ) -> Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenWithin",
            "comment": " Flatten a group using only an outer bound, which is equivalent to\n\n    flattenWithinOutTo autoBounds outer\n",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenWithinOutTo",
            "comment": " Flatten a group using an inner and an outer bound to clamp the size of the resulting item. ",
            "type": "Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenWithinOutToStyled",
            "comment": " Same as flattenWithinOutTo, but applies the given additional styles to the container. ",
            "type": "List ( String, String ) -> Scaffold.Layout.Bounds -> Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "flattenWithinStyled",
            "comment": " Same as flattenWithin, but applies the given additional styles to the container. ",
            "type": "List ( String, String ) -> Scaffold.Layout.Bounds -> Scaffold.Layout.Group -> Scaffold.Layout.Item"
          },
          {
            "name": "fromItem",
            "comment": " Convert an Item to Html by placing it inside of a sized container. ",
            "type": "Scaffold.Layout.Item -> Html.Html"
          },
          {
            "name": "fromItemStyled",
            "comment": " The same as fromItem, but styles the sized container with a given arbitrary list of CSS\nproperties. ",
            "type": "List ( String, String ) -> Scaffold.Layout.Item -> Html.Html"
          },
          {
            "name": "grabItem",
            "comment": " Grab an item, producing a handle. This defines a point on the item called the \"handle\" that is\nplaced exactly at item's coordinates. If I say\n\n  grabItem 0 0\n\nthen that would grab the top left corner. u and v and given as window coordinates relative to the\ntop left corner of the item. ",
            "type": "Int -> Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "grabItemRelative",
            "comment": " Grab an item in normalized coordinates relative to it's size. This means that (1, 1) is the\nbottom right corner, and (0, 0) is the top left corner. ",
            "type": "Float -> Float -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "grabItemRelativeX",
            "comment": " Grab an item by it's x coordinate relative to the item's size. ",
            "type": "Float -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "grabItemRelativeY",
            "comment": " Grab an item by it's y coordinate relative to the item's size. ",
            "type": "Float -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "grabItemX",
            "comment": " Grab an item by it's x coordinate. ",
            "type": "Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "grabItemY",
            "comment": " Grab an item by it's y coordinate. ",
            "type": "Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "group",
            "comment": " Create an item group from a list. ",
            "type": "List Scaffold.Layout.Item -> Scaffold.Layout.Group"
          },
          {
            "name": "groupAt",
            "comment": " Retrieve the item at a given index in the group, or Nothing if the index is out of bounds. If\nthere are waiting transformations, a copy of the item with those transformations applied will be\ngiven. ",
            "type": "Int -> Scaffold.Layout.Group -> Maybe.Maybe Scaffold.Layout.Item"
          },
          {
            "name": "groupAtBefore",
            "comment": " Retrieve the item at a given index in the group, or Nothing if the index is out of bounds. The\nitem will be retrieved in it's original state without any pending group transformations applied. ",
            "type": "Int -> Scaffold.Layout.Group -> Maybe.Maybe Scaffold.Layout.Item"
          },
          {
            "name": "groupFromArray",
            "comment": " Create an item group from an array. ",
            "type": "Array.Array Scaffold.Layout.Item -> Scaffold.Layout.Group"
          },
          {
            "name": "groupFromDict",
            "comment": " Create an item group from a dictionary. ",
            "type": "Dict.Dict comparable Scaffold.Layout.Item -> Scaffold.Layout.Group"
          },
          {
            "name": "groupSize",
            "comment": " Get the size of the group. ",
            "type": "Scaffold.Layout.Group -> Int"
          },
          {
            "name": "horizontalRule",
            "comment": " Create a new horizontal ruler at the given y coordinate. ",
            "type": "Int -> Scaffold.Layout.Rule"
          },
          {
            "name": "horizontalRuleBetween",
            "comment": " Shorthand for ruleBetween horizontalRule ",
            "type": "Int -> Int -> Float -> Scaffold.Layout.Rule"
          },
          {
            "name": "horizontalRuleCentered",
            "comment": " Shorthand for ruleCenter horizontalRule ",
            "type": "Int -> Int -> Scaffold.Layout.Rule"
          },
          {
            "name": "horizontally",
            "comment": " Do a distribution horizontally. ",
            "type": "Scaffold.Layout.Axis"
          },
          {
            "name": "iconItem",
            "comment": " Create an item using an SVG icon function. This is intended primarily for use with the material\nicon set, but if others follow suit with the same API for different icon sets, this will work just\nas well. Note that the size and color arguments are intentionally flipped. This is for currying\npurposes; it is much less likely for the size of an icon to change than the color. ",
            "type": "(Color.Color -> Int -> Svg.Svg) -> Int -> Color.Color -> Scaffold.Layout.Item"
          },
          {
            "name": "itemBounds",
            "comment": " Get the resultant bounding box of an item, given it's placement and handle. ",
            "type": "Scaffold.Layout.Item -> Scaffold.Layout.Bounds"
          },
          {
            "name": "itemHeight",
            "comment": " Get the height of an item. ",
            "type": "Scaffold.Layout.Item -> Int"
          },
          {
            "name": "itemHorizontalRule",
            "comment": " Create a horizontal ruler aligned with an item. ",
            "type": "Scaffold.Layout.Item -> Scaffold.Layout.Rule"
          },
          {
            "name": "itemRule",
            "comment": " Create a vertical or a horizontal ruler aligned with an item. ",
            "type": "(Int -> Scaffold.Layout.Rule) -> Scaffold.Layout.Item -> Scaffold.Layout.Rule"
          },
          {
            "name": "itemSize",
            "comment": " Get the size of an Item. ",
            "type": "Scaffold.Layout.Item -> ( Int, Int )"
          },
          {
            "name": "itemVerticalRule",
            "comment": " Create a vertical ruler aligned with an item. ",
            "type": "Scaffold.Layout.Item -> Scaffold.Layout.Rule"
          },
          {
            "name": "itemWidth",
            "comment": " Get the width of an item. ",
            "type": "Scaffold.Layout.Item -> Int"
          },
          {
            "name": "lerpOf",
            "comment": " Modify any of the item manipulation primitives by linearly interpolating the handle and coordinates\nbetween the current and output values. This provides the basic building block for transitional animations.\nEasing functions could quite easily be implemented on top of this. ",
            "type": "(Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Float -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "makeIconItem",
            "comment": " iconItem, but you can set html attributes on the container div. ",
            "type": "(Color.Color -> Int -> Svg.Svg) -> List Html.Attribute -> Int -> Color.Color -> Scaffold.Layout.Item"
          },
          {
            "name": "makeItem",
            "comment": " Create an item using an Html constructor. Nice for when you largely rely on Layout over Html,\nusing Html just for the end controls. ",
            "type": "Int -> Int -> (List Html.Attribute -> List Html.Html -> Html.Html) -> List Html.Attribute -> List Html.Html -> Scaffold.Layout.Item"
          },
          {
            "name": "makeItemStyled",
            "comment": " Create an item using an Html constructor, but append a style attribute to the end of the\nattributes list with the given styles. Useful in the case that you want to forward declare the\nstyle of a whole bunch of items' Html contents with a partial function.  ",
            "type": "List ( String, String ) -> Int -> Int -> (List Html.Attribute -> List Html.Html -> Html.Html) -> List Html.Attribute -> List Html.Html -> Scaffold.Layout.Item"
          },
          {
            "name": "move",
            "comment": " Move an item. ",
            "type": "Int -> Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "moveX",
            "comment": " Move an item horizontally. ",
            "type": "Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "moveY",
            "comment": " Move an item vertically. ",
            "type": "Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "place",
            "comment": " Place the handle of an item at these coordinates. ",
            "type": "Int -> Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "placeX",
            "comment": " Place the handle of an item at this x coordinate. ",
            "type": "Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "placeY",
            "comment": " Place the handle of an item at this y coordinate. ",
            "type": "Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "prependGroup",
            "comment": " Prepend a group before another, resulting a group containing the elements from `grp` second and\nthe elements of `grp'` first. ",
            "type": "Scaffold.Layout.Group -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "regularly",
            "comment": " Distribute the items in the group along some Axis given a starting coordinate and an ending\ncoordinate, such that the handles of the items are evenly distributed between the starting and the\nending coordinates. The height or width of this vertical or horizontal distribution is dependent on\nthe positioning of the handles on the items, and the coordinate not effected by the distribution is\nleft in place. ",
            "type": "Scaffold.Layout.Axis -> Int -> Int -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "ruleBetween",
            "comment": " Given a ruler direction (verticalRule or horizontalRule), a lower and an upper bound, and some\nfloat t between 0 and 1, linearly interpolate between the lower and upper bound by t. ",
            "type": "(Int -> Scaffold.Layout.Rule) -> Int -> Int -> Float -> Scaffold.Layout.Rule"
          },
          {
            "name": "ruleCenter",
            "comment": " Given a ruler direction (verticalRule or horizontalRule), a lower bound, and an upper bound,\ncenter a ruler between the lower and the upper bound. The following equivalencies hold:\n\n    ruleCenter verticalRule x0 x1 == ruleBetween verticalRule x0 x1 0.5\n    ruleCenter horizontalRule y0 y1 == ruleBetween horizontalRule y0 y1 0.5\n\n",
            "type": "(Int -> Scaffold.Layout.Rule) -> Int -> Int -> Scaffold.Layout.Rule"
          },
          {
            "name": "snapToRule",
            "comment": " Snap an item's handle to a vertical or horizontal ruler. ",
            "type": "Scaffold.Layout.Rule -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "spacedBetween",
            "comment": " Distribute the items in the group along some Axis given a starting coordinate and an ending\ncoordinate, such that the spaces between all of the items are even, resulting in a justified layout.\nVertical distribution is done top to bottom, horizontal distribution is done left to right.\n\nThe height or width of this vertical or horizontal distribution is\n\n    to - from\n\nand the coordinate not effected by the distribution is left in place.\n",
            "type": "Scaffold.Layout.Axis -> Int -> Int -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "spacedBy",
            "comment": " Distribute the items in the group along some Axis given a starting coordinate and spacing given\nin window coordinates, resulting in an evenly spaced horizontal or vertical distribution. Vertical\ndistribution is done top to bottom, horizontal distribution is done left to right.\n\nThe height or width of this vertical or horizontal distribution is\n\n    from + siz * (n - 1) + (sum itemHeight items)\n\nand the coordinate not effected by the distribution is left in place.\n\n",
            "type": "Scaffold.Layout.Axis -> Int -> Int -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "thenDo",
            "comment": " Apply some transformation to every item in the group after the pending transformations. ",
            "type": "(Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "thenDoAt",
            "comment": " Apply some transformation to the item at a particular index in the group after the pending transformations. ",
            "type": "Int -> (Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "thenDoSlice",
            "comment": " Apply some transformation to the items in a particular slice of the group after the pending transformations. ",
            "type": "Int -> Int -> (Scaffold.Layout.Item -> Scaffold.Layout.Item) -> Scaffold.Layout.Group -> Scaffold.Layout.Group"
          },
          {
            "name": "toItem",
            "comment": " Create an item from Html ",
            "type": "Int -> Int -> Html.Html -> Scaffold.Layout.Item"
          },
          {
            "name": "towardsRule",
            "comment": " Move an item's handle toward a vertical or horizontal ruler by some constant amount. ",
            "type": "Scaffold.Layout.Rule -> Int -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "towardsRuleRelative",
            "comment": " Move an item's handle toward a vertical or horizontal ruler by some factor t  ",
            "type": "Scaffold.Layout.Rule -> Float -> Scaffold.Layout.Item -> Scaffold.Layout.Item"
          },
          {
            "name": "verticalRule",
            "comment": " Create a new vertical ruler at the given x coordinate. ",
            "type": "Int -> Scaffold.Layout.Rule"
          },
          {
            "name": "verticalRuleBetween",
            "comment": " Shorthand for ruleBetween verticalRule ",
            "type": "Int -> Int -> Float -> Scaffold.Layout.Rule"
          },
          {
            "name": "verticalRuleCentered",
            "comment": " Shorthand for ruleCenter verticalRule ",
            "type": "Int -> Int -> Scaffold.Layout.Rule"
          },
          {
            "name": "vertically",
            "comment": " Do a distribution vertically. ",
            "type": "Scaffold.Layout.Axis"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "Scaffold.App",
        "comment": " The main application scaffolding. You can write a really pretty top level like this:\n\n    myProgramOutput : ProgramOutput MyAction MyModel Layout.Item Error\n    myProgramOutput =\n      defStagedProgram myPresent myStage myUpdate myInitialModel\n      |> defSequenceInputs\n        [ someVeryImportantBrowserEnvironmentInput\n        , someOtherOutsideSignal\n        ]\n      |> runAnd (computeTask doMyComplicatedStartupWork myData)\n      |> it'sErrorConnector myErrorHandler\n      |> thisAddressAsync myOutsideMailboxAddress\n      |> itself\n\n\n    main : Signal Graphics.Element.Element\n    main =\n      viewOutput myProgramOutput\n      |> Signal.map Layout.fromItem\n\n\n    port sink : Signal (Task z ())\n    port sink = sink myProgramOutput\n\n\n# Definitions\n@docs AgentStatus, ComputedResult, ComputedSuccess, ProgramInput, ProgramOutput, ProgramSnapshot, ProgramConnector, ProgramTask, TaskDispatchment, UpdatedModel, ViewOutput\n\n# Define Programs\n@docs defProgram, defProgram', defStagedProgram, forwardSingleton\n\n# Run Programs\n@docs run, runAnd, defSingletonInputs, defSequenceInputs, defLazySequenceInputs, sink\n\n# UpdatedModel and ViewOutput Manipulation\n@docs updated, presented, withTask, withTasks, withDispatchment, withDispatchments, withChildren, viewOutputTask\n\n# Dispatch Actions and Errors\n@docs actionTask, actionTaskAsync, errorTask, computeTask, computedSuccess, computedSuccessAsync, noActions, nilTask\n\n# Program Output Routing and Management\n@docs itself, itselfAsync, it'sErrorConnector, thisAddress, thisAddressAsync, thisForwardAddress, thisForwardAddressAsync, thisErrorConnector, thisForwardConnector, thisConnector, outputView\n\n# Handling Tasks and TaskDispatchment\n@docs combineDispatchments, collapseTasks, dispatchTasks, dispatchmentHasWork, dispatchmentTask, promoteDispatchment, promoteDispatchmentErrors, handleDispatchmentErrors\n\n# Manipulate Program Snapshots\n@docs programSnapshot, programSnapshotAddDispatchment, programSnapshotDispatch, programSnapshotPresent, programSnapshotStage, programSnapshotUpdate, performCycle\n\n# Program Task Agents\n@docs agentSuccess, agentSingletonSuccess, agentFailure, agent, successAgent, failureAgent, binaryAgent, blindAgent, nilAgent, resultAgent, ignoreError\n\n\n",
        "aliases": [
          {
            "name": "ComputedResult",
            "comment": " A ComputedResult is a Result which may be a ComputedSuccess or some error type on failure. This\nis used as the output type of the function passed to a `computeTask`. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "Result.Result bad (Scaffold.App.ComputedSuccess a)"
          },
          {
            "name": "ComputedSuccess",
            "comment": " This is the success type of an ProgramTask. It consists of a sequence of actions to execute, and\na tag saying whether we want the actions executed all at once, or spread out asynchronously. This\nshould be treated as opaque; use the constructors `computedSuccess` and `computedSuccessAsync`. ",
            "args": [
              "a"
            ],
            "type": "{ sequence : List a, method : Scaffold.App.FeedbackMethod }"
          },
          {
            "name": "ProgramConnector",
            "comment": " ProgramConnector is an alias for functions that transform ProgramTasks by routing their actions to\nan address. You will probably not need to directly provide an ProgramConnector function, as the built in\nfamily of taps should be sufficient for just about any application. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "Signal.Address (List a) -> Scaffold.App.ProgramTask bad a -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "ProgramInput",
            "comment": " This is the input type for Program. It can be seen as roughly analogous to StartApp's Config\ntype, but carries the full configuration and input in one. This should be considered opaque. ",
            "args": [
              "a",
              "b",
              "c",
              "bad"
            ],
            "type": "{ inputs : Lazy.List.LazyList (Signal.Signal (Lazy.List.LazyList a)) , model0 : b , present : Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.ViewOutput a c bad , stage : Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad , update : a -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad }"
          },
          {
            "name": "ProgramOutput",
            "comment": " This is the output of an Program program. This is not intended to be opaque. Any part of the\noutput structure is up for grabs. I do not reccomend usage of the lazyAddress externally.\n\n    view'     Signal with the current view.\n    model'    Signal with the current model.\n    now       Signal with the most recent execution time.\n    actions   Signal with the most recently atomically executed action list.\n    tasks     Signal with the most recent ProgramTask output.\n    address   The address of the Program program's Mailbox.\n\n",
            "args": [
              "a",
              "b",
              "c",
              "bad"
            ],
            "type": "{ view' : Signal.Signal c , model' : Signal.Signal b , now : Signal.Signal Time.Time , actions : Signal.Signal (List a) , tasks : Signal.Signal (Scaffold.App.ProgramTask bad a) , address : Signal.Address (List a) , lazyAddress : Signal.Address (Lazy.List.LazyList a) }"
          },
          {
            "name": "ProgramSnapshot",
            "comment": " This represents an instantaneous description of an Program program. It consists of the current\nmodel and a possible TaskDispatchment. This should be treated as opaque. ",
            "args": [
              "a",
              "b",
              "bad"
            ],
            "type": "{ model' : b, dispatchment : Scaffold.App.TaskDispatchment bad a }"
          },
          {
            "name": "ProgramTask",
            "comment": " A task with a ComputedSuccess result. These are used as the output task type of the Program. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "Task.Task bad (Scaffold.App.ComputedSuccess a)"
          },
          {
            "name": "TaskDispatchment",
            "comment": " This is an opaque type representing an ordered list of tasks to execute. This is quite similar\nto Effects batching. ",
            "args": [
              "bad",
              "a"
            ],
            "type": "{ taskExec : Lazy.List.LazyList (Scaffold.App.ProgramTask bad a) }"
          },
          {
            "name": "UpdatedModel",
            "comment": " Represents the output of the `update` and `stage` functions configured in the ProgramInput.\nThis type exists so that TaskDispatchments and ProgramTasks can be cleanly included in the output\nof `stage` and `update` without the need to return an ugly pair or embed anything in the model. ",
            "args": [
              "a",
              "b",
              "bad"
            ],
            "type": "{ dispatchment : Scaffold.App.TaskDispatchment bad a, model' : b }"
          },
          {
            "name": "ViewOutput",
            "comment": " Represents the output of the `present` function configured in the ProgramInput.\nThis type exists so that TaskDispatchments and ProgramTasks can be cleanly included in the output\nof `present` without the need to return an ugly pair or embed anything in the model. ",
            "args": [
              "a",
              "c",
              "bad"
            ],
            "type": "{ dispatchment : Scaffold.App.TaskDispatchment bad a, view' : c }"
          }
        ],
        "types": [
          {
            "name": "AgentStatus",
            "comment": " Represents the status of a given program agent. Program agents are a way of transforming the\nresults of arbitrary tasks in to actions and errors for the program to consume. ",
            "args": [
              "bad",
              "a"
            ],
            "cases": []
          }
        ],
        "values": [
          {
            "name": "actionTask",
            "comment": " An ProgramTask that carries a list of actions to execute atomically.\n\nNote that a tap which is explicitly from the `*Async` family of taps will override this behavior,\ninstead producing the same behavior as actionTaskAsync. For that reason, asynchronous taps should\nmainly be used for one-way data flows that are not dependent on ordering. ",
            "type": "List a -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "actionTaskAsync",
            "comment": " An ProgramTask that carries a list of actions to execute asynchronously, meaning they may be\ninterspersed with other feedback and inputs. ",
            "type": "List a -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "agent",
            "comment": " The basic program agent. Takes two functions, one of which transforms a successful result in to\nan AgentStatus, and one which does the same for task failure results. This transforms an arbitrary\ntask in to an ProgramTask. Notice that we can easily succeed anyway even if the task failed, or vice\nversa, because we get an AgentStatus which may be successful or failing either way. This means you\ncan skip error handling altogether if you already know what to do with the failure from the scope\nyou're in; you can simply map the failure on to some actions that perform an appropriate\ncontingency. ",
            "type": "(x -> Scaffold.App.AgentStatus bad a) -> (y -> Scaffold.App.AgentStatus bad a) -> Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "agentFailure",
            "comment": " Failed program agent output. ",
            "type": "bad -> Scaffold.App.AgentStatus bad a"
          },
          {
            "name": "agentSingletonSuccess",
            "comment": " Successful program agent output. ",
            "type": "a -> Scaffold.App.AgentStatus bad a"
          },
          {
            "name": "agentSuccess",
            "comment": " Successful program agent output. ",
            "type": "List a -> Scaffold.App.AgentStatus bad a"
          },
          {
            "name": "binaryAgent",
            "comment": " A binary program agent. This does not process any of the results, but simply always gives the\nsuccesful AgentStatus (the first one) on task success, otherwise it gives the failed AgentStatus. ",
            "type": "Scaffold.App.AgentStatus bad a -> Scaffold.App.AgentStatus bad a -> Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "blindAgent",
            "comment": " If we don't care about the outcome of a task because it can't fail or produce a meaningful\nresult, we can just queue up something to do after it's done. This is perfect for using delay tasks. ",
            "type": "Scaffold.App.AgentStatus bad a -> Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "collapseTasks",
            "comment": " Collapse two action tasks by executing them sequentially and appending their resulting action\noutputs. ",
            "type": "Scaffold.App.ProgramTask bad a -> Scaffold.App.ProgramTask bad a -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "combineDispatchments",
            "comment": " Combine two TaskDispatchment instances. This appends the task list of the second to the task\nlist of the first. ",
            "type": "Scaffold.App.TaskDispatchment bad a -> Scaffold.App.TaskDispatchment bad a -> Scaffold.App.TaskDispatchment bad a"
          },
          {
            "name": "computeTask",
            "comment": " An ProgramTask that obtains some ComputedResult from user provided data and a user provided\nfunction, which is invoked during execution of the task. This just gives us basic support for\ndeferred computations. ",
            "type": "(data -> Scaffold.App.ComputedResult bad a) -> data -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "computedSuccess",
            "comment": " Produce a normal ComputedSuccess from a list of actions. These actions will be sent all at once,\nand thus will be executed atomically. ",
            "type": "List a -> Scaffold.App.ComputedSuccess a"
          },
          {
            "name": "computedSuccessAsync",
            "comment": " Produce an asynchronous ComputedSuccess from a list of actions. These actions will be sent\none by one from sequential tasks, and thus their execution will be spread out with no guarantee that\nthe sequence of actions will be executed atomically.\n\nIf you need to run a list of a few thousand actions,\nand it is safe for those actions to be interspersed with other actions, you may be looking at a very\ngood use case for this function. Note also that this will never preempt an action list that is sent\nat once using `computeSuccess`, which is a product of how the Elm runtime works. ",
            "type": "List a -> Scaffold.App.ComputedSuccess a"
          },
          {
            "name": "defLazySequenceInputs",
            "comment": " Define a list of action sequence signal inputs for a given ProgramInput, where the sequences are\ngiven as lazy lists via Lazy.List. ",
            "type": "List (Signal.Signal (Lazy.List.LazyList a)) -> Scaffold.App.ProgramInput a b c bad -> Scaffold.App.ProgramInput a b c bad"
          },
          {
            "name": "defProgram",
            "comment": " defProgram is the old declaration form for defining ProgramInput. It is simpler, and does not\nsupport the `stage` function. Internally this uses the new form, but it has been left in for\ntwo reasons. One is of course backwards compatibility, but sometimes you just don't need that\nextra firepower, in which case it is mere clutter. ",
            "type": "(Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.ViewOutput a c bad) -> (a -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad) -> b -> Scaffold.App.ProgramInput a b c bad"
          },
          {
            "name": "defProgram'",
            "comment": " defProgram' is the complete way to define an ProgramInput. ProgramInput is configured with\nthree functions. `update` and `present` should be familiar to users of StartApp, except for the\nfact that they always have the current time. `stage` is a special addition which allows one to\nuse the program Mailbox address from a context in which the model can be updated.\n\nThe use case for `stage` which inspired it's existence is as follows: suppose you have a really\nbig model with a really, really big view. There is enough data that keen algorithms and data\nstructures, as well as avoiding redundant computations during presentation becomes a neccessity.\n\nYou can then structure your application as follows. Represent all these components as instances of\nMachine. From inside `stage`, you can present _only the ones that will or should actually be seen_,\nand cache the results in the model. Since you can create an updated model from here, you can save\nanything that may be later needed during presentation.\n\n`stage` is called only once after an entire list of actions is executed. If you get a list of 1000\nactions, you can still guarantee the work in stage will be done only once, before presentation.\n_The primary reason stage has access to the address is because it enables you to call present on\nany sub components ahead of time for caching purposes._ ",
            "type": "(Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.ViewOutput a c bad) -> (Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad) -> (a -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad) -> b -> Scaffold.App.ProgramInput a b c bad"
          },
          {
            "name": "defSequenceInputs",
            "comment": " Define a list of action sequence signal inputs for a given ProgramInput. ",
            "type": "List (Signal.Signal (List a)) -> Scaffold.App.ProgramInput a b c bad -> Scaffold.App.ProgramInput a b c bad"
          },
          {
            "name": "defSingletonInputs",
            "comment": " Define a list of action singleton signal inputs for a given ProgramInput. ",
            "type": "List (Signal.Signal a) -> Scaffold.App.ProgramInput a b c bad -> Scaffold.App.ProgramInput a b c bad"
          },
          {
            "name": "defStagedProgram",
            "comment": " Clearer synonym for defProgram'. ",
            "type": "(Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.ViewOutput a c bad) -> (Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad) -> (a -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad) -> b -> Scaffold.App.ProgramInput a b c bad"
          },
          {
            "name": "dispatchTasks",
            "comment": " Turn a list of ProgramTasks in to a TaskDispatchment. ",
            "type": "List (Scaffold.App.ProgramTask bad a) -> Scaffold.App.TaskDispatchment bad a"
          },
          {
            "name": "dispatchmentHasWork",
            "comment": " True iff the TaskDispatchment has at least one ProgramTask. ",
            "type": "Scaffold.App.TaskDispatchment bad a -> Bool"
          },
          {
            "name": "dispatchmentTask",
            "comment": " Turn a TaskDispatchment in to an ProgramTask. Doing this will make things a lot more opaque,\nso ask yourself if it is absolutely neccessary first. Mainly this is included for completeness. ",
            "type": "Scaffold.App.TaskDispatchment bad a -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "errorTask",
            "comment": " An ProgramTask that carries an error. ",
            "type": "bad -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "failureAgent",
            "comment": " This is a combination of agent and programBinary agent which gives the successful agent\nstatus in the case of success, and processes failed results to get an AgentStatus otherwise . ",
            "type": "Scaffold.App.AgentStatus bad a -> (y -> Scaffold.App.AgentStatus bad a) -> Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "forwardSingleton",
            "comment": " Sometimes you don't need the fanciness of an action list address. In that case, it's cool to\nnot have to write your own forwarding address. ",
            "type": "Signal.Address (List a) -> Signal.Address a"
          },
          {
            "name": "handleDispatchmentErrors",
            "comment": " Transform errors from a dispatchment back in to actions at any point. ",
            "type": "(bad -> List a) -> Scaffold.App.TaskDispatchment bad a -> Scaffold.App.TaskDispatchment bad a"
          },
          {
            "name": "ignoreError",
            "comment": " This makes any error in to noActions. ",
            "type": "bad -> List a"
          },
          {
            "name": "it'sErrorConnector",
            "comment": " Same semantics as `itself`, but for errors. Error taps do not have an asynchronous alternative. ",
            "type": "(bad -> List a) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "itself",
            "comment": " This is the most essential tap for almost any application. It routes the actions resulting from your TaskDispatchment output back to the program's main address. ",
            "type": "Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "itselfAsync",
            "comment": " Same as itself, but execute action lists asynchronously, such that they may be interspersed with other action lists. ",
            "type": "Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "nilAgent",
            "comment": " No matter what, do nothing. This will get your task to run, but no kind of action or error\nfeedback will be produced. ",
            "type": "Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "nilTask",
            "comment": " An ProgramTask that does nothing and produces noActions. ",
            "type": "Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "noActions",
            "comment": " A list of no actions. ",
            "type": "List a"
          },
          {
            "name": "outputView",
            "comment": " Get the program view output. ",
            "type": "Scaffold.App.ProgramOutput a b c bad -> Signal.Signal c"
          },
          {
            "name": "performCycle",
            "comment": " Perform a full cycle on an ProgramSnapshot. This looks like:\n\n      state\n      |> programSnapshotUpdate input actions now\n      |> programSnapshotStage input address now\n      |> programSnapshotDispatch\n\ninternally. The point of performCycle is to be used in foldp, which it is inside runWithWork\nand run (which really just calls runWithWork with nilTask).\n",
            "type": "Scaffold.App.ProgramInput a b c bad -> Signal.Address (List a) -> ( Time.Time, List a ) -> ( Scaffold.App.ProgramSnapshot a b bad , Scaffold.App.TaskDispatchment bad a ) -> ( Scaffold.App.ProgramSnapshot a b bad , Scaffold.App.TaskDispatchment bad a )"
          },
          {
            "name": "presented",
            "comment": " Give a ViewOutput from your view type, carrying an empty TaskDispatchment. ",
            "type": "c -> Scaffold.App.ViewOutput a c bad"
          },
          {
            "name": "programSnapshot",
            "comment": " Constructor for an ProgramSnapshot. I reccomend using the Machine module instead of these functions. ",
            "type": "b -> Scaffold.App.TaskDispatchment bad a -> Scaffold.App.ProgramSnapshot a b bad"
          },
          {
            "name": "programSnapshotAddDispatchment",
            "comment": " Add a dispatchment to an ProgramSnapshot. ",
            "type": "Scaffold.App.TaskDispatchment bad a -> Scaffold.App.ProgramSnapshot a b bad -> Scaffold.App.ProgramSnapshot a b bad"
          },
          {
            "name": "programSnapshotDispatch",
            "comment": " Get the pending TaskDispatchment out of an ProgramSnapshot and clear it from the snapshot in\none go. This gives an _ugly pair_. See the newer interface for this in Machine, and also see the way\nResource works. It seems much better to separate this in to two stages. It leaves room for a mistake,\nwhich I was trying to avoid, but it's so much cleaner than way that it's worth it and actually\nleads to fewer mistakes as a result. ",
            "type": "Scaffold.App.ProgramSnapshot a b bad -> ( Scaffold.App.ProgramSnapshot a b bad , Scaffold.App.TaskDispatchment bad a )"
          },
          {
            "name": "programSnapshotPresent",
            "comment": " Run the `present` phase on an ProgramSnapshot, yielding a ViewOutput. ",
            "type": "{ k | present : Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.ViewOutput a c bad } -> Signal.Address (List a) -> Time.Time -> Scaffold.App.ProgramSnapshot a b bad -> Scaffold.App.ViewOutput a c bad"
          },
          {
            "name": "programSnapshotStage",
            "comment": " Run the `stage` phase on an ProgramSnapshot. ",
            "type": "{ k | stage : Signal.Address (List a) -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad } -> Signal.Address (List a) -> Time.Time -> Scaffold.App.ProgramSnapshot a b bad -> Scaffold.App.ProgramSnapshot a b bad"
          },
          {
            "name": "programSnapshotUpdate",
            "comment": " Run the `update` phase on an ProgramSnapshot. ",
            "type": "{ k | update : a -> Time.Time -> b -> Scaffold.App.UpdatedModel a b bad } -> List a -> Time.Time -> Scaffold.App.ProgramSnapshot a b bad -> Scaffold.App.ProgramSnapshot a b bad"
          },
          {
            "name": "promoteDispatchment",
            "comment": " Using some function, create a TaskDispatchment with a different action type. ",
            "type": "(List a -> List a') -> Scaffold.App.TaskDispatchment bad a -> Scaffold.App.TaskDispatchment bad a'"
          },
          {
            "name": "promoteDispatchmentErrors",
            "comment": " Using some function, create a TaskDispatchment with a different error type. ",
            "type": "(bad -> bad') -> Scaffold.App.TaskDispatchment bad a -> Scaffold.App.TaskDispatchment bad' a"
          },
          {
            "name": "resultAgent",
            "comment": " The other program agents defined so far are less succinct because they take two arguments, one\nwhich applies to the success case and one which applies to the failure case. This one takes a single\nfunction which processes the task's outcome as a Result, and so is generally a bit shorter to write. ",
            "type": "(Result.Result y x -> Scaffold.App.AgentStatus bad a) -> Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "run",
            "comment": " Run an program without any startup task.\n\n    run (myProgram `withSequenceInputs` [myInput, myInput2])\n\n",
            "type": "Scaffold.App.ProgramInput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "runAnd",
            "comment": " Run an program with a startup task\n",
            "type": "Scaffold.App.ProgramTask bad a -> Scaffold.App.ProgramInput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "sink",
            "comment": " The sink is the final stop for ProgramOutput. This should be attached at a port to get your\ntasks running. ",
            "type": "Scaffold.App.ProgramOutput a b c bad -> Signal.Signal (Task.Task z ())"
          },
          {
            "name": "successAgent",
            "comment": " This is a combination of agent and programBinary agent which processes successful results\nto get an AgentStatus, otherwise giving the failed agent status. ",
            "type": "(x -> Scaffold.App.AgentStatus bad a) -> Scaffold.App.AgentStatus bad a -> Task.Task y x -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "thisAddress",
            "comment": " Route the resulting actions from your TaskDispatchments to some action list address. ",
            "type": "Signal.Address (List a) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "thisAddressAsync",
            "comment": " Same as thisAddress, but asynchronously as described above. ",
            "type": "Signal.Address (List a) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "thisConnector",
            "comment": " A tap defined using an ProgramConnector and some address. The ProgramTasks that pass through this tap will be\nrouted to the given address. This is a bit lower level than is needed in most cases. ",
            "type": "Scaffold.App.ProgramConnector bad a -> Signal.Address (List a) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "thisErrorConnector",
            "comment": " Transform any errors in to lists of actions, then route them to the address. ",
            "type": "Signal.Address (List a) -> (bad -> List a) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "thisForwardAddress",
            "comment": " Same as thisAddress, but with forwarding. ",
            "type": "Signal.Address target -> (List a -> target) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "thisForwardAddressAsync",
            "comment": " Same as thisForwardAddress, but asynchronously as described above. ",
            "type": "Signal.Address target -> (List a -> target) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "thisForwardConnector",
            "comment": " Same as thisConnector but uses Address forwarding to transform action lists in to some other target type\nfor your address. ",
            "type": "Scaffold.App.ProgramConnector bad a -> Signal.Address target -> (List a -> target) -> Scaffold.App.ProgramOutput a b c bad -> Scaffold.App.ProgramOutput a b c bad"
          },
          {
            "name": "updated",
            "comment": " Give an UpdatedModel from a model, carrying an empty TaskDispatchment. ",
            "type": "b -> Scaffold.App.UpdatedModel a b bad"
          },
          {
            "name": "viewOutputTask",
            "comment": " Get an ProgramTask from a ViewOutput. This is DEPRECIATED. Use TaskDispatchment wherever\npossible. ",
            "type": "Scaffold.App.ViewOutput a c bad -> Scaffold.App.ProgramTask bad a"
          },
          {
            "name": "withChildren",
            "comment": " This takes a list of UpdatedModel or ViewOutput instances, and appends each one to the\nTaskDispatchment of the current output. This is preferred when doing model composition with Machine.\nFor example:\n\n    App.staged { collectionModel | memberViews = memberOutputs }\n    |> App.withChildren memberOutputs\n\nwhere memberOutputs is a list of machinePresent or machinePresentAs outputs in the example.\n",
            "type": "List { anything | dispatchment : Scaffold.App.TaskDispatchment bad a } -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a } -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a }"
          },
          {
            "name": "withDispatchment",
            "comment": " This is the same as `withTasks`, but it takes an already existing TaskDispatchment. ",
            "type": "Scaffold.App.TaskDispatchment bad a -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a } -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a }"
          },
          {
            "name": "withDispatchments",
            "comment": " `withDispatchment` for multiple dispatchments. ",
            "type": "List (Scaffold.App.TaskDispatchment bad a) -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a } -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a }"
          },
          {
            "name": "withTask",
            "comment": " Add a single task to the output of any of the three program functions. ",
            "type": "Scaffold.App.ProgramTask bad a -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a } -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a }"
          },
          {
            "name": "withTasks",
            "comment": " Add some tasks to the output of any of the three Program functions.\n\n    updated model |> withTasks [actionTask [Jump, Run]]\n    presented viewstuff |> withTasks [errorTask [reportError \"You done goofed.\"]]\n\nThis is definitely the most elegant way to build a TaskDispatchment as well, especially in the\ncontext of declaring causality.\n",
            "type": "List (Scaffold.App.ProgramTask bad a) -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a } -> { anything | dispatchment : Scaffold.App.TaskDispatchment bad a }"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  },
  {
    "name": "z5h/time-app",
    "version": "1.0.1",
    "docs": [
      {
        "name": "TimeApp",
        "comment": " This module helps you start your application in a typical Elm workflow.\nIt assumes you are following [the Elm Architecture][arch] and using\n[elm-effects][]. From there it will wire everything up for you!\n\n**Be sure to [read the Elm Architecture tutorial][arch] to learn how this all\nworks!**\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial\n[elm-effects]: http://package.elm-lang.org/packages/evancz/elm-effects/latest\n\n# Start your Application\n@docs start, Config, App\n\n",
        "aliases": [
          {
            "name": "App",
            "comment": " An `App` is made up of a couple signals:\n\n  * `html` &mdash; a signal of `Html` representing the current visual\n    representation of your app. This should be fed into `main`.\n\n  * `model` &mdash; a signal representing the current model. Generally you\n    will not need this one, but it is there just in case. You will know if you\n    need this.\n\n  * `tasks` &mdash; a signal of tasks that need to get run. Your app is going\n    to be producing tasks in response to all sorts of events, so this needs to\n    be hooked up to a `port` to ensure they get run.\n",
            "args": [
              "model"
            ],
            "type": "{ html : Signal.Signal Html.Html , model : Signal.Signal model , tasks : Signal.Signal (Task.Task Effects.Never ()) }"
          },
          {
            "name": "Config",
            "comment": " The configuration of an app follows the basic model / update / view pattern\nthat you see in every Elm program.\n\nThe `init` transaction will give you an initial model and create any tasks that\nare needed on start up.\n\nThe `update` and `view` fields describe how to step the model and view the\nmodel.\n\nThe `inputs` field is for any external signals you might need. If you need to\nget values from JavaScript, they will come in through a port as a signal which\nyou can pipe into your app as one of the `inputs`.\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ init : ( model, Effects.Effects action ) , update : action -> Time.Time -> model -> ( model, Effects.Effects action ) , view : Signal.Address action -> model -> Html.Html , inputs : List (Signal.Signal action) }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " Start an application. It requires a bit of wiring once you have created an\n`App`. It should pretty much always look like this:\n\n    app =\n        start { init = init, view = view, update = update, inputs = [] }\n\n    main =\n        app.html\n\n    port tasks : Signal (Task.Task Never ())\n    port tasks =\n        app.tasks\n\nSo once we start the `App` we feed the HTML into `main` and feed the resulting\ntasks into a `port` that will run them all.\n",
            "type": "TimeApp.Config model action -> TimeApp.App model"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      },
      {
        "name": "TimeApp.Simple",
        "comment": " This module makes it super simple to get started making a typical web app.\nThis is what you want if you are new to Elm, still getting a handle on the\nsyntax and patterns.\n\nIt is designed to work perfectly with [the Elm Architecture][arch] which\ndescribes a simple architecture pattern that makes testing and refactoring\nshockingly pleasant. Definitely read [the tutorial][arch] to get started!\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n# Start your Application\n@docs start, Config\n",
        "aliases": [
          {
            "name": "Config",
            "comment": " The configuration has three key components:\n\n  * `model` &mdash; a big chunk of data fully describing your application.\n\n  * `view` &mdash; a way to show your model on screen. It takes in two\n    arguments. One is the model, which contains *all* the information about our\n    app. The other is an [`Address`][address] that helps us handle user input.\n    Whenever there is a click or key press, we send a message to the address\n    describing what happened and where.\n\n  * `update` &mdash; a function to update your model. Whenever a UI event\n    occurs, is routed through the `Address` to this update function. We take\n    in the message, the time, and the current model, then we give back a new model!\n\n[The Elm Architecture][arch] augments this basic pattern to give you all the\nmodularity you want. But since we have whole model in one place, it is\nalso really easy to support features like *save* and *undo* that can be quite\nhard in other languages.\n\n[address]: http://package.elm-lang.org/packages/elm-lang/core/2.0.1/Signal#Mailbox\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n",
            "args": [
              "model",
              "action"
            ],
            "type": "{ model : model , view : Signal.Address action -> model -> Html.Html , update : action -> Time.Time -> model -> model }"
          }
        ],
        "types": [],
        "values": [
          {
            "name": "start",
            "comment": " This starts up your application. The following code sets up a counter\nthat can be incremented and decremented. The time between events is also displayed.\nYou can read more about writing programs like this\n[here](https://github.com/evancz/elm-architecture-tutorial/).\n\n    import Html exposing (div, button, text)\n    import Html.Events exposing (onClick)\n    import TimeApp.Simple as TimeApp\n    import StartTime\n\n\n    main =\n      TimeApp.start { model = model, view = view, update = update }\n\n\n    model =\n      { count = 0\n      , prevEventTime = StartTime.startTime\n      , eventTime = StartTime.startTime\n      }\n\n\n    view address model =\n      let\n        secondsAgo = toString <| (model.eventTime - model.prevEventTime ) / 1000.0\n      in\n        div []\n          [ button [ onClick address Decrement ] [ text \"-\" ]\n          , div [] [ text <| (toString model.count) ++ \". Previously changed \" ++ secondsAgo ++ \" seconds ago\" ]\n          , button [ onClick address Increment ] [ text \"+\" ]\n          , div [] [ ]\n          ]\n\n\n    type Action = Increment | Decrement\n\n\n    update action time model =\n      case action of\n        Increment -> {count = model.count + 1, eventTime = time, prevEventTime = model.eventTime}\n        Decrement -> {count = model.count - 1, eventTime = time, prevEventTime = model.eventTime}\n\nNotice that the program cleanly breaks up into model, update, and view.\nThis means it is super easy to test your update logic independent of any\nrendering.\n",
            "type": "TimeApp.Simple.Config model action -> Signal.Signal Html.Html"
          }
        ],
        "generated-with-elm-version": "0.16.0"
      }
    ]
  }
]
